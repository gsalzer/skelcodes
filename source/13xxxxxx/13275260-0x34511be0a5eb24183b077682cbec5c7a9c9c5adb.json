{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Router.sol\": {\r\n      \"content\": \"pragma solidity >=0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\n\\nimport \\\"./interfaces/IFactory.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\n\\ncontract Router is IRouter, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    IFactory public override factory;\\n\\n    constructor(address _factory) {\\n        factory = IFactory(_factory);\\n    }\\n\\n    /// @inheritdoc IRouter\\n    function newBaseLiquidity(\\n        int24 _baseLower,\\n        int24 _baseUpper,\\n        uint8 _percentage,\\n        bool swapEnabled\\n    ) external override nonReentrant {\\n        IVault vault = _getVault(msg.sender);\\n        newLiquidity(\\n            vault,\\n            _baseLower,\\n            _baseUpper,\\n            vault.baseLower(),\\n            vault.baseUpper(),\\n            _percentage,\\n            swapEnabled\\n        );\\n        vault.setBaseTicks(_baseLower, _baseUpper);\\n\\n        emit RebalanceBaseLiqudity(address(vault), _baseLower, _baseUpper, _percentage);\\n    }\\n\\n    /// @inheritdoc IRouter\\n    function newLimitLiquidity(\\n        int24 _limitLower,\\n        int24 _limitUpper,\\n        uint8 _percentage,\\n        bool swapEnabled\\n    ) external override nonReentrant {\\n        IVault vault = _getVault(msg.sender);\\n        newLiquidity(\\n            vault,\\n            _limitLower,\\n            _limitUpper,\\n            vault.limitLower(),\\n            vault.limitUpper(),\\n            _percentage,\\n            swapEnabled\\n        );\\n        vault.setLimitTicks(_limitLower, _limitUpper);\\n\\n        emit RebalanceLimitLiqudity(address(vault), _limitLower, _limitUpper, _percentage);\\n    }\\n\\n    function newLiquidity(\\n        IVault vault,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int24 oldTickLower,\\n        int24 oldTickUpper,\\n        uint8 percentage,\\n        bool swapEnabled\\n    ) internal {\\n        require(percentage <= 100, \\\"percentage\\\");\\n        vault.poke(oldTickLower, oldTickUpper);\\n        (uint128 oldLiquidity, , , , ) = vault.position(\\n            oldTickLower,\\n            oldTickUpper\\n        );\\n        if (oldLiquidity > 0) {\\n            vault.burnAndCollect(oldTickLower, oldTickUpper, oldLiquidity);\\n        }\\n        if (percentage > 0) {\\n            uint256 balance0 = vault.getBalance0();\\n            uint256 balance1 = vault.getBalance1();\\n\\n            vault.mintOptimalLiquidity(\\n                tickLower,\\n                tickUpper,\\n                balance0.mul(percentage).div(100),\\n                balance1.mul(percentage).div(100),\\n                swapEnabled\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc IRouter\\n    function getBaseAmounts(address _vault)\\n        public\\n        view\\n        override\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        )\\n    {\\n        IVault vault = IVault(_vault);\\n        (liquidity, , , , ) = vault.position(\\n            vault.baseLower(),\\n            vault.baseUpper()\\n        );\\n\\n        (amount0, amount1) = vault.getPositionAmounts(\\n            vault.baseLower(),\\n            vault.baseUpper()\\n        );\\n    }\\n\\n    /// @inheritdoc IRouter\\n    function getLimitAmounts(address _vault)\\n        public\\n        view\\n        override\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        )\\n    {\\n        IVault vault = IVault(_vault);\\n        (liquidity, , , , ) = vault.position(\\n            vault.limitLower(),\\n            vault.limitUpper()\\n        );\\n\\n        (amount0, amount1) = vault.getPositionAmounts(\\n            vault.limitLower(),\\n            vault.limitUpper()\\n        );\\n    }\\n\\n    /// @inheritdoc IRouter\\n    function getBaseTicks(address _vault)\\n        external\\n        view\\n        override\\n        returns (int24, int24)\\n    {\\n        IVault vault = IVault(_vault);\\n        return (vault.baseLower(), vault.baseUpper());\\n    }\\n\\n    /// @inheritdoc IRouter\\n    function getLimitTicks(address _vault)\\n        external\\n        view\\n        override\\n        returns (int24, int24)\\n    {\\n        IVault vault = IVault(_vault);\\n        return (vault.limitLower(), vault.limitUpper());\\n    }\\n\\n    /// @inheritdoc IRouter\\n    function compoundFee(address _vault) public override {\\n        IVault vault = IVault(_vault);\\n        vault.compoundFee();\\n    }\\n\\n    // modifier onlyStrategy(address _manager) {\\n    //     require(\\n    //         factory.managerVault(_manager) != address(0),\\n    //         \\\"Router : onlyStrategy :: tx sender needs to be a valid strategy manager\\\"\\n    //     );\\n    //     _;\\n    // }\\n\\n    /// @dev Retrieves the vault for msg.sender by fetching from factory\\n    function _getVault(address _manager) internal view returns (IVault vault) {\\n        address _vault = factory.managerVault(_manager);\\n\\n        // This should never fail, but just in case\\n        require(\\n            _vault != address(0),\\n            \\\"Router : _getVault :: PANIC! SM has no valid vault\\\"\\n        );\\n        return IVault(_vault);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFactory.sol\": {\r\n      \"content\": \"pragma solidity >=0.7.5;\\n\\n/// @title Aastra Vault Factory\\n/// @author 0xKal1\\n/// @notice Aastra Vault Factory deploys and manages Aastra Vaults. \\n/// @dev Provides an interface to the Aastra Vault Factory\\ninterface IFactory {\\n\\n    /// @notice Emitted when new vault created by factory\\n    /// @param strategyManager Address of strategyManager allocated to the vault\\n    /// @param uniswapPool Address of uniswap pool tied to the vault\\n    /// @param vaultAddress Address of the newly created vault\\n    event VaultCreation(\\n        address indexed strategyManager,\\n        address indexed uniswapPool,\\n        address indexed vaultAddress\\n    );\\n\\n    /// @notice Emitted when governance of protocol gets changes\\n    /// @param oldGovernance Address of old governance \\n    /// @param newGovernance Address of new governance \\n    event GovernanceChange(\\n        address indexed oldGovernance,\\n        address indexed newGovernance\\n    );\\n\\n    /// @notice Returns manager address of a given vault address\\n    /// @param _vault Address of Aastra vault\\n    /// @return _manager Address of vault manager\\n    function vaultManager(address _vault)\\n        external\\n        view\\n        returns (address _manager);\\n\\n    /// @notice Returns vault address of a given manager address\\n    /// @param _manager Address of vault manager\\n    /// @return _vault Address of Aastra vault\\n    function managerVault(address _manager)\\n        external\\n        view\\n        returns (address _vault);\\n\\n    /// @notice Creates a new Aastra vault\\n    /// @param _uniswapPool Address of Uniswap V3 Pool\\n    /// @param _strategyManager Address of strategy manager managing the vault\\n    /// @param _protocolFee Fee charged by strategy manager for the new vault\\n    /// @param _strategyFee Fee charged by protocol for the new vault\\n    /// @param _maxCappedLimit Max limit of TVL of the vault\\n    function createVault(\\n        address _uniswapPool,\\n        address _strategyManager,\\n        uint256 _protocolFee,\\n        uint256 _strategyFee,\\n        uint256 _maxCappedLimit\\n    ) external;\\n\\n    /// @notice Sets a new manager for an existing vault\\n    /// @param _newManager Address of the new manager for the vault\\n    /// @param _vault Address of the Aastra vault\\n    function updateManager(address _newManager, address _vault) external;\\n\\n    /// @notice Returns the address of Router contract\\n    /// @return _router Address of Router contract\\n    function router() external view returns (address _router);\\n\\n    /// @notice Returns the address of protocol governance\\n    /// @return _governance Address of protocol governance\\n    function governance() external view returns (address _governance);\\n\\n\\n    /// @notice Returns the address of pending protocol governance\\n    /// @return _pendingGovernance Address of pending protocol governance\\n    function pendingGovernance()\\n        external\\n        view\\n        returns (address _pendingGovernance);\\n\\n    /// @notice Allows to upgrade the router contract to a new one\\n    /// @param _router Address of the new router contract\\n    function setRouter(address _router) external;\\n\\n    /// @notice Allows to set a new governance address\\n    /// @param _governance Address of the new protocol governance\\n    function setGovernance(address _governance) external;\\n\\n    /// @notice Function to be called by new governance method to accept the role\\n    function acceptGovernance() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"pragma solidity >=0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"../interfaces/IFactory.sol\\\";\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\n\\n/// @title Aastra Vault\\n/// @author 0xKal1\\n/// @notice Aastra Vault is a Uniswap V3 liquidity management vault enabling you to automate yield generation on your idle funds\\n/// @dev Provides an interface to the Aastra Vault\\ninterface IVault is IERC20 {\\n\\n    /// @notice Emitted when a deposit made to a vault\\n    /// @param sender The sender of the deposit transaction\\n    /// @param to The recipient of LP tokens\\n    /// @param shares Amount of LP tokens paid to recipient\\n    /// @param amount0 Amount of token0 deposited\\n    /// @param amount1 Amount of token1 deposited\\n    event Deposit(\\n        address indexed sender,\\n        address indexed to,\\n        uint256 shares,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when a withdraw made to a vault\\n    /// @param sender The sender of the withdraw transaction\\n    /// @param to The recipient of withdrawn amounts\\n    /// @param shares Amount of LP tokens paid back to vault\\n    /// @param amount0 Amount of token0 withdrawn\\n    /// @param amount1 Amount of token1 withdrawn\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed to,\\n        uint256 shares,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees collected from uniswap\\n    /// @param feesToVault0 Amount of token0 earned as fee by protocol\\n    /// @param feesToVault1 Amount of token1 earned as fee by protocol\\n    /// @param feesToStrategy0 Amount of token0 earned as fee by strategy manager\\n    /// @param feesToStrategy1 Amount of token1 earned as fee by strategy manager\\n    event CollectFees(\\n        uint256 feesToVault0,\\n        uint256 feesToVault1,\\n        uint256 feesToStrategy0,\\n        uint256 feesToStrategy1\\n    );\\n\\n    /// @notice Retrieve first token of Uniswap V3 pool\\n    /// @return IERC20Metadata token address\\n    function token0() external view returns (IERC20Metadata);\\n\\n    /// @notice Retrieve second token of Uniswap V3 pool\\n    /// @return IERC20Metadata token address\\n    function token1() external view returns (IERC20Metadata);\\n\\n    /// @notice Retrieve usable amount of token0 available in the vault\\n    /// @return amount0 Amount of token0\\n    function getBalance0() external view returns (uint256);\\n\\n    /// @notice Retrieve usable amount of token1 available in the vault\\n    /// @return amount1 Amount of token0\\n    function getBalance1() external view returns (uint256);\\n\\n    /// @notice Retrieve tickSpacing of Pool used in the vault\\n    /// @return tickSpacing tickSpacing of the Uniswap V3 pool\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice Retrieve lower tick of base position of Pool used in the vault\\n    /// @return baseLower of the Uniswap V3 pool\\n    function baseLower() external view returns (int24);\\n\\n    /// @notice Retrieve upper tick of base position of Pool used in the vault\\n    /// @return baseUpper of the Uniswap V3 pool\\n    function baseUpper() external view returns (int24);\\n\\n    /// @notice Retrieve lower tick of limit position of Pool used in the vault\\n    /// @return limitLower of the Uniswap V3 pool\\n    function limitLower() external view returns (int24);\\n\\n    /// @notice Retrieve upper tick of limit position of Pool used in the vault\\n    /// @return limitUpper of the Uniswap V3 pool\\n    function limitUpper() external view returns (int24);\\n\\n    /// @notice Retrieve address of Uni V3 Pool used in the vault\\n    /// @return IUniswapV3Pool address of Uniswap V3 Pool\\n    function pool() external view returns (IUniswapV3Pool);\\n\\n    /// @notice Retrieve address of Factory used to create the vault\\n    /// @return IFactory address of Aastra factory contract\\n    function factory() external view returns (IFactory);\\n\\n    /// @notice Retrieve address of current router in Aastra\\n    /// @return router address of Aastra router contract\\n    function router() external view returns (address);\\n\\n    /// @notice Retrieve address of strategy manager used to manage the vault\\n    /// @return manager address of vault manager\\n    function strategy() external view returns (address);\\n\\n    /**\\n     * @notice Calculates the vault's total holdings of token0 and token1 - in\\n     * other words, how much of each token the vault would hold if it withdrew\\n     * all its liquidity from Uniswap.\\n     * @return total0 Total token0 holdings of the vault\\n     * @return total1 Total token1 holdings of the vault\\n     */\\n    function getTotalAmounts() external view returns (uint256, uint256);\\n\\n    /// @dev Wrapper around `IUniswapV3Pool.positions()`.\\n    /// @notice Provides the current data on a position in the vault according to lower and upper tick\\n    /// @param tickLower Lower tick of the vault's position\\n    /// @param tickUpper Upper tick of the vault's position\\n    function position(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            uint128,\\n            uint256,\\n            uint256,\\n            uint128,\\n            uint128\\n        );\\n\\n    /**\\n     * @notice Amounts of token0 and token1 held in vault's position. Includes owed fees but excludes the proportion of fees that will be paid to the protocol. Doesn't include fees accrued since last poke.\\n     * @param tickLower Lower tick of the vault's position\\n     * @param tickUpper Upper tick of the vault's position\\n     * @return amount0 Amount of token0 held in the vault's position\\n     * @return amount1 Amount of token1 held in the vault's position\\n     */\\n    function getPositionAmounts(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    /// ------------- Router Functions ------------- ///\\n\\n    /// @notice Updates due amount in uniswap owed for a tick range\\n    /// @dev Do zero-burns to poke a position on Uniswap so earned fees are updated. Should be called if total amounts needs to include up-to-date fees.\\n    /// @param tickLower Lower bound of the tick range\\n    /// @param tickUpper Upper bound of the tick range\\n    function poke(int24 tickLower, int24 tickUpper) external;\\n\\n    /// @notice Used to update the new base position ticks of the vault\\n    /// @param _baseLower The new lower tick of the vault\\n    /// @param _baseUpper The new upper tick of the vault\\n    function setBaseTicks(int24 _baseLower, int24 _baseUpper) external;\\n\\n    /// @notice Used to update the new limit position ticks of the vault\\n    /// @param _limitLower The new lower tick of the vault\\n    /// @param _limitUpper The new upper tick of the vault\\n    function setLimitTicks(int24 _limitLower, int24 _limitUpper) external;\\n\\n    /// @notice Withdraws all liquidity from a range and collects all the fees in the process\\n    /// @param tickLower Lower bound of the tick range\\n    /// @param tickUpper Upper bound of the tick range\\n    /// @param liquidity Liquidity to be withdrawn from the range\\n    /// @return burned0 Amount of token0 that was burned\\n    /// @return burned1 Amount of token1 that was burned\\n    /// @return feesToVault0 Amount of token0 fees vault earned\\n    /// @return feesToVault1 Amount of token1 fees vault earned\\n    function burnAndCollect(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 liquidity\\n    )\\n        external\\n        returns (\\n            uint256 burned0,\\n            uint256 burned1,\\n            uint256 feesToVault0,\\n            uint256 feesToVault1\\n        );\\n\\n    /// @notice This method will optimally use all the funds provided in argument to mint the maximum possible liquidity\\n    /// @param _lowerTick Lower bound of the tick range\\n    /// @param _upperTick Upper bound of the tick range\\n    /// @param amount0 Amount of token0 to be used for minting liquidity\\n    /// @param amount1 Amount of token1 to be used for minting liquidity\\n    function mintOptimalLiquidity(\\n        int24 _lowerTick,\\n        int24 _upperTick,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool swapEnabled\\n    ) external;\\n\\n    /// @notice Swaps tokens from the pool\\n    /// @param direction The direction of the swap, true for token0 to token1, false for reverse\\n    /// @param amountInToSwap Desired amount of token0 or token1 wished to swap\\n    /// @return amountOut Amount of token0 or token1 received from the swap\\n    function swapTokensFromPool(bool direction, uint256 amountInToSwap)\\n        external\\n        returns (uint256 amountOut);\\n\\n    /// @notice Collects liquidity fee earned from both positions of vault and reinvests them back into the same position\\n    function compoundFee() external;\\n\\n    /// @notice Used to collect accumulated strategy fees.\\n    /// @param amount0 Amount of token0 to collect\\n    /// @param amount1 Amount of token1 to collect\\n    /// @param to Address to send collected fees to\\n    function collectStrategy(\\n        uint256 amount0,\\n        uint256 amount1,\\n        address to\\n    ) external;\\n\\n    /// ------------- GOV Functions ------------- ///\\n\\n    /**\\n     * @notice Emergency method to freeze actions performed by a strategy\\n     * @param value To be set to true in case of active freeze\\n     */\\n    function freezeStrategy(bool value) external;\\n\\n    /**\\n     * @notice Emergency method to freeze actions performed by a vault user\\n     * @param value To be set to true in case of active freeze\\n     */\\n    function freezeUser(bool value) external;\\n\\n    /// @notice Used to collect accumulated protocol fees.\\n    /// @param amount0 Amount of token0 to collect\\n    /// @param amount1 Amount of token1 to collect\\n    /// @param to Address to send collected fees to\\n    function collectProtocol(\\n        uint256 amount0,\\n        uint256 amount1,\\n        address to\\n    ) external;\\n\\n    /**\\n     * @notice Used to change deposit cap for a guarded launch or to ensure\\n     * vault doesn't grow too large relative to the pool. Cap is on total\\n     * supply rather than amounts of token0 and token1 as those amounts\\n     * fluctuate naturally over time.\\n     * @param _maxTotalSupply The new max total cap of the vault\\n     */\\n    function setMaxTotalSupply(uint256 _maxTotalSupply) external;\\n\\n    /**\\n     * @notice Removes liquidity in case of emergency.\\n     * @param to Address to withdraw funds to\\n     */\\n    function emergencyBurnAndCollect(address to) external;\\n\\n    /// ------------- User Functions ------------- ///\\n\\n    /**\\n     * @notice Deposits tokens in proportion to the vault's current holdings.\\n     * @param amount0Desired Max amount of token0 to deposit\\n     * @param amount1Desired Max amount of token1 to deposit\\n     * @param amount0Min Revert if resulting `amount0` is less than this\\n     * @param amount1Min Revert if resulting `amount1` is less than this\\n     * @param to Recipient of shares\\n     * @return shares Number of shares minted\\n     * @return amount0 Amount of token0 deposited\\n     * @return amount1 Amount of token1 deposited\\n     */\\n    function deposit(\\n        uint256 amount0Desired,\\n        uint256 amount1Desired,\\n        uint256 amount0Min,\\n        uint256 amount1Min,\\n        address to\\n    )\\n        external\\n        returns (\\n            uint256 shares,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    /**\\n     * @notice Withdraws tokens in proportion to the vault's holdings.\\n     * @param shares Shares burned by sender\\n     * @param amount0Min Revert if resulting `amount0` is smaller than this\\n     * @param amount1Min Revert if resulting `amount1` is smaller than this\\n     * @param to Recipient of tokens\\n     * @return amount0 Amount of token0 sent to recipient\\n     * @return amount1 Amount of token1 sent to recipient\\n     */\\n    function withdraw(\\n        uint256 shares,\\n        uint256 amount0Min,\\n        uint256 amount1Min,\\n        address to\\n    ) external returns (uint256 amount0, uint256 amount1);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRouter.sol\": {\r\n      \"content\": \"pragma solidity >=0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\n\\nimport \\\"../interfaces/IFactory.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\n\\n/// @title Aastra Router\\n/// @author 0xKal1\\n/// @notice Aastra Router provides simple interface for SM to interact with vault\\ninterface IRouter {\\n\\n    /// @notice Emitted on successfull rebalance of base liquidity of vault\\n    /// @param vault Address of aastra vault\\n    /// @param baseLower Lower tick of new rebalanced liquidity\\n    /// @param baseUpper Upper tick of new rebalanced liquidity\\n    /// @param percentage Percentage of funds to be used for rebalance\\n    event RebalanceBaseLiqudity(\\n        address indexed vault,\\n        int24 baseLower,\\n        int24 baseUpper,\\n        uint8 percentage\\n    );\\n\\n    /// @notice Emitted on successfull rebalance of base liquidity of vault\\n    /// @param vault Address of aastra vault\\n    /// @param limitLower Lower tick of new rebalanced liquidity\\n    /// @param limitUpper Upper tick of new rebalanced liquidity\\n    /// @param percentage Percentage of funds to be used for rebalance\\n    event RebalanceLimitLiqudity(\\n        address indexed vault,\\n        int24 limitLower,\\n        int24 limitUpper,\\n        uint8 percentage\\n    );\\n    \\n    /// @notice returns address of Aastra factory contract\\n    /// @return IFactory Address of aastra factory contract\\n    function factory() external returns (IFactory);\\n\\n    /// @notice Retrieve amounts present in base position\\n    /// @param vault Address of the vault\\n    /// @return liquidity Liquidity amount of the position\\n    /// @return amount0 Amount of token0 present in the position after last poke\\n    /// @return amount1 Amount of token1 present in the position after last poke\\n    function getBaseAmounts(address vault)\\n        external\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    /// @notice Retrieve amounts present in limit position\\n    /// @param vault Address of the vault\\n    /// @return liquidity Liquidity amount of the position\\n    /// @return amount0 Amount of token0 present in the position after last poke\\n    /// @return amount1 Amount of token1 present in the position after last poke\\n    function getLimitAmounts(address vault)\\n        external\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    /// @notice Used to create a new base liquidity position on uniswap. This will burn and remove any existing position held by the vault \\n    /// @param _baseLower The lower limit of the liquidity position\\n    /// @param _baseUpper The upper limit of the liquidity position\\n    /// @param _percentage The percentage of funds of the vault to be used for liquidity position\\n    /// @param swapEnabled Enable/disable the automatic swapping for optimal liqudity minting\\n    function newBaseLiquidity(\\n        int24 _baseLower,\\n        int24 _baseUpper,\\n        uint8 _percentage,\\n        bool swapEnabled\\n    ) external;\\n\\n    /// @notice Used to create a new limit liquidity position on uniswap. This will burn and remove any existing position held by the vault \\n    /// @param _limitLower The lower limit of the liquidity position\\n    /// @param _limitUpper The upper limit of the liquidity position\\n    /// @param _percentage The percentage of funds of the vault to be used for liquidity position\\n    function newLimitLiquidity(\\n        int24 _limitLower,\\n        int24 _limitUpper,\\n        uint8 _percentage, \\n        bool swapEnabled\\n    ) external;\\n\\n    /// @notice Used to collect and compound fee for a specific vault\\n    /// @param _vault Address of the vault\\n    function compoundFee(address _vault) external;\\n\\n    /// @notice Retrieve lower and upper ticks of vault\\\\'s base position\\n    /// @param vault Address of the vault\\n    /// @return lowerTick Lower limit of the vault\\\\'s base position\\n    /// @return upperTick Upper limit of the vault\\\\'s base position\\n    function getBaseTicks(address vault)\\n        external\\n        returns (int24 lowerTick, int24 upperTick);\\n\\n    /// @notice Retrieve lower and upper ticks of vault\\\\'s limit position\\n    /// @param vault Address of the vault\\n    /// @return lowerTick Lower limit of the vault\\\\'s limit position\\n    /// @return upperTick Upper limit of the vault\\\\'s limit position\\n    function getLimitTicks(address vault)\\n        external\\n        returns (int24 lowerTick, int24 upperTick);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"baseLower\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"baseUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"percentage\",\"type\":\"uint8\"}],\"name\":\"RebalanceBaseLiqudity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"limitLower\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"limitUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"percentage\",\"type\":\"uint8\"}],\"name\":\"RebalanceLimitLiqudity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"compoundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getBaseAmounts\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getBaseTicks\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getLimitAmounts\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getLimitTicks\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"_baseLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"_baseUpper\",\"type\":\"int24\"},{\"internalType\":\"uint8\",\"name\":\"_percentage\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"swapEnabled\",\"type\":\"bool\"}],\"name\":\"newBaseLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"_limitLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"_limitUpper\",\"type\":\"int24\"},{\"internalType\":\"uint8\",\"name\":\"_percentage\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"swapEnabled\",\"type\":\"bool\"}],\"name\":\"newLimitLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Router","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"50","ConstructorArguments":"000000000000000000000000bad59d2ba9a532242f1287deabc4227e8150d074","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}