{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\dynamicMetadata\\model\\IDynamicUriResolver.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\ninterface IDynamicUriResolver {\r\n    function resolve(address subject, string calldata plainUri, bytes calldata inputData, address caller) external view returns(string memory);\r\n}\r\n\r\n// File: contracts\\dynamicMetadata\\model\\IDynamicUriRenderer.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\ninterface IDynamicUriRenderer {\r\n    function render(address subject, string calldata plainUri, bytes calldata inputData, address caller, bytes calldata rendererData) external view returns (string memory);\r\n}\r\n\r\n// File: contracts\\lib\\GeneralUtilities.sol\r\n\r\n// SPDX_License_Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\nlibrary BehaviorUtilities {\r\n\r\n    function randomKey(uint256 i) internal view returns (bytes32) {\r\n        return keccak256(abi.encode(i, block.timestamp, block.number, tx.origin, tx.gasprice, block.coinbase, block.difficulty, msg.sender, blockhash(block.number - 5)));\r\n    }\r\n\r\n    function calculateProjectedArraySizeAndLoopUpperBound(uint256 arraySize, uint256 start, uint256 offset) internal pure returns(uint256 projectedArraySize, uint256 projectedArrayLoopUpperBound) {\r\n        if(arraySize != 0 && start < arraySize && offset != 0) {\r\n            uint256 length = start + offset;\r\n            if(start < (length = length > arraySize ? arraySize : length)) {\r\n                projectedArraySize = (projectedArrayLoopUpperBound = length) - start;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary ReflectionUtilities {\r\n\r\n    function read(address subject, bytes memory inputData) internal view returns(bytes memory returnData) {\r\n        bool result;\r\n        (result, returnData) = subject.staticcall(inputData);\r\n        if(!result) {\r\n            assembly {\r\n                revert(add(returnData, 0x20), mload(returnData))\r\n            }\r\n        }\r\n    }\r\n\r\n    function submit(address subject, uint256 value, bytes memory inputData) internal returns(bytes memory returnData) {\r\n        bool result;\r\n        (result, returnData) = subject.call{value : value}(inputData);\r\n        if(!result) {\r\n            assembly {\r\n                revert(add(returnData, 0x20), mload(returnData))\r\n            }\r\n        }\r\n    }\r\n\r\n    function isContract(address subject) internal view returns (bool) {\r\n        if(subject == address(0)) {\r\n            return false;\r\n        }\r\n        uint256 codeLength;\r\n        assembly {\r\n            codeLength := extcodesize(subject)\r\n        }\r\n        return codeLength > 0;\r\n    }\r\n\r\n    function clone(address originalContract) internal returns(address copyContract) {\r\n        assembly {\r\n            mstore(\r\n                0,\r\n                or(\r\n                    0x5880730000000000000000000000000000000000000000803b80938091923cF3,\r\n                    mul(originalContract, 0x1000000000000000000)\r\n                )\r\n            )\r\n            copyContract := create(0, 0, 32)\r\n            switch extcodesize(copyContract)\r\n                case 0 {\r\n                    invalid()\r\n                }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary BytesUtilities {\r\n\r\n    bytes private constant ALPHABET = \"0123456789abcdef\";\r\n\r\n    function asAddress(bytes memory b) internal pure returns(address) {\r\n        if(b.length == 0) {\r\n            return address(0);\r\n        }\r\n        if(b.length == 20) {\r\n            address addr;\r\n            assembly {\r\n                addr := mload(add(b, 20))\r\n            }\r\n            return addr;\r\n        }\r\n        return abi.decode(b, (address));\r\n    }\r\n\r\n    function asAddressArray(bytes memory b) internal pure returns(address[] memory callResult) {\r\n        if(b.length > 0) {\r\n            return abi.decode(b, (address[]));\r\n        }\r\n    }\r\n\r\n    function asBool(bytes memory bs) internal pure returns(bool) {\r\n        return asUint256(bs) != 0;\r\n    }\r\n\r\n    function asBoolArray(bytes memory b) internal pure returns(bool[] memory callResult) {\r\n        if(b.length > 0) {\r\n            return abi.decode(b, (bool[]));\r\n        }\r\n    }\r\n\r\n    function asBytesArray(bytes memory b) internal pure returns(bytes[] memory callResult) {\r\n        if(b.length > 0) {\r\n            return abi.decode(b, (bytes[]));\r\n        }\r\n    }\r\n\r\n    function asString(bytes memory b) internal pure returns(string memory callResult) {\r\n        if(b.length > 0) {\r\n            return abi.decode(b, (string));\r\n        }\r\n    }\r\n\r\n    function asStringArray(bytes memory b) internal pure returns(string[] memory callResult) {\r\n        if(b.length > 0) {\r\n            return abi.decode(b, (string[]));\r\n        }\r\n    }\r\n\r\n    function asUint256(bytes memory bs) internal pure returns(uint256 x) {\r\n        if (bs.length >= 32) {\r\n            assembly {\r\n                x := mload(add(bs, add(0x20, 0)))\r\n            }\r\n        }\r\n    }\r\n\r\n    function asUint256Array(bytes memory b) internal pure returns(uint256[] memory callResult) {\r\n        if(b.length > 0) {\r\n            return abi.decode(b, (uint256[]));\r\n        }\r\n    }\r\n\r\n    function toString(bytes memory data) internal pure returns(string memory) {\r\n        bytes memory str = new bytes(2 + data.length * 2);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n        for (uint i = 0; i < data.length; i++) {\r\n            str[2+i*2] = ALPHABET[uint(uint8(data[i] >> 4))];\r\n            str[3+i*2] = ALPHABET[uint(uint8(data[i] & 0x0f))];\r\n        }\r\n        return string(str);\r\n    }\r\n}\r\n\r\nlibrary StringUtilities {\r\n\r\n    bytes1 private constant CHAR_0 = bytes1('0');\r\n    bytes1 private constant CHAR_A = bytes1('A');\r\n    bytes1 private constant CHAR_a = bytes1('a');\r\n    bytes1 private constant CHAR_f = bytes1('f');\r\n\r\n    function isEmpty(string memory test) internal pure returns (bool) {\r\n        return equals(test, \"\");\r\n    }\r\n\r\n    function equals(string memory a, string memory b) internal pure returns(bool) {\r\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\r\n    }\r\n\r\n    function toLowerCase(string memory str) internal pure returns(string memory) {\r\n        bytes memory bStr = bytes(str);\r\n        for (uint i = 0; i < bStr.length; i++) {\r\n            bStr[i] = bStr[i] >= 0x41 && bStr[i] <= 0x5A ? bytes1(uint8(bStr[i]) + 0x20) : bStr[i];\r\n        }\r\n        return string(bStr);\r\n    }\r\n\r\n    function asBytes(string calldata str) internal pure returns(bytes memory toDecode) {\r\n        bytes memory data = abi.encodePacked(str);\r\n        if(data.length == 0 || data[0] != \"0\" || (data[1] != \"x\" && data[1] != \"X\")) {\r\n            return \"\";\r\n        }\r\n        uint256 start = 2;\r\n        toDecode = new bytes((data.length - 2) / 2);\r\n\r\n        for(uint256 i = 0; i < toDecode.length; i++) {\r\n            toDecode[i] = bytes1(_fromHexChar(uint8(data[start++])) + _fromHexChar(uint8(data[start++])) * 16);\r\n        }\r\n    }\r\n\r\n    function _fromHexChar(uint8 c) private pure returns (uint8) {\r\n        bytes1 charc = bytes1(c);\r\n        return charc < CHAR_0 || charc > CHAR_f ? 0 : (charc < CHAR_A ? 0 : 10) + c - uint8(charc < CHAR_A ? CHAR_0 : charc < CHAR_a ? CHAR_A : CHAR_a);\r\n    }\r\n}\r\n\r\nlibrary Uint256Utilities {\r\n    function asSingletonArray(uint256 n) internal pure returns(uint256[] memory array) {\r\n        array = new uint256[](1);\r\n        array[0] = n;\r\n    }\r\n\r\n    function toString(uint256 _i) internal pure returns (string memory) {\r\n        return BytesUtilities.toString(abi.encodePacked(_i));\r\n    }\r\n}\r\n\r\nlibrary AddressUtilities {\r\n    function asSingletonArray(address a) internal pure returns(address[] memory array) {\r\n        array = new address[](1);\r\n        array[0] = a;\r\n    }\r\n\r\n    function toString(address _addr) internal pure returns (string memory) {\r\n        return _addr == address(0) ? \"0x0000000000000000000000000000000000000000\" : BytesUtilities.toString(abi.encodePacked(_addr));\r\n    }\r\n}\r\n\r\nlibrary Bytes32Utilities {\r\n\r\n    function asSingletonArray(bytes32 a) internal pure returns(bytes32[] memory array) {\r\n        array = new bytes32[](1);\r\n        array[0] = a;\r\n    }\r\n\r\n    function toString(bytes32 bt) internal pure returns (string memory) {\r\n        return bt == bytes32(0) ?  \"0x0000000000000000000000000000000000000000000000000000000000000000\" : BytesUtilities.toString(abi.encodePacked(bt));\r\n    }\r\n}\r\n\r\n// File: contracts\\dynamicMetadata\\impl\\DynamicUriResolver.sol\r\n\r\n//SPDX_License_Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\n\r\n\r\n\r\ncontract DynamicUriResolver is IDynamicUriResolver {\r\n    using StringUtilities for string;\r\n\r\n    function resolve(address subject, string calldata plainUri, bytes calldata inputData, address caller) override external view returns(string memory) {\r\n        if(msg.sender != address(this)) {\r\n            try this.resolve(subject, plainUri, inputData, caller) returns (string memory renderedUri) {\r\n                return renderedUri;\r\n            } catch {\r\n                return plainUri;\r\n            }\r\n        }\r\n        (address renderer, bytes memory rendererData) = abi.decode(plainUri.asBytes(), (address, bytes));\r\n        if(renderer == address(0)) {\r\n            return plainUri;\r\n        }\r\n        try IDynamicUriRenderer(renderer).render(subject, plainUri, inputData, caller, rendererData) returns (string memory renderedUri) {\r\n            return renderedUri;\r\n        } catch {\r\n            return plainUri;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"plainUri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DynamicUriResolver","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bcbdfa7736bf24fc9b52ce1d14e1905e7d9e9d39a297f552fb964a3e6ad82f8d"}]}