{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/token/MagicDecimalFix.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@solidstate/contracts/token/ERC20/metadata/ERC20MetadataStorage.sol';\\n\\ncontract MagicDecimalFix {\\n    function fixDecimals() external {\\n        ERC20MetadataStorage.layout().decimals = 18;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC20/metadata/ERC20MetadataStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC20MetadataStorage {\\n  struct Layout {\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n  }\\n\\n  bytes32 internal constant STORAGE_SLOT = keccak256(\\n    'solidstate.contracts.storage.ERC20Metadata'\\n  );\\n\\n  function layout () internal pure returns (Layout storage l) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly { l.slot := slot }\\n  }\\n\\n  function setName (\\n    Layout storage l,\\n    string memory name\\n  ) internal {\\n    l.name = name;\\n  }\\n\\n  function setSymbol (\\n    Layout storage l,\\n    string memory symbol\\n  ) internal {\\n    l.symbol = symbol;\\n  }\\n\\n  function setDecimals (\\n    Layout storage l,\\n    uint8 decimals\\n  ) internal {\\n    l.decimals = decimals;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"fixDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MagicDecimalFix","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}