{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Volumes/Data/Projects/BscStarter/source/crispy-octo/contracts/STARToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./lib/ERC20.sol\\\";\\n\\ncontract STARToken is ERC20 {\\n    constructor() public ERC20(\\\"BSCstarter\\\", \\\"START\\\") {\\n        _mint(msg.sender, 1000000 * (10**uint256(decimals())));\\n    }\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/BscStarter/source/crispy-octo/contracts/ethereum/EthStarterFarming.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../STARToken.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../interfaces/IUniswap.sol\\\";\\nimport \\\"../lib/ReentrancyGuard.sol\\\";\\nimport \\\"../lib/Ownable.sol\\\";\\nimport \\\"../lib/SafeMath.sol\\\";\\nimport \\\"../lib/Math.sol\\\";\\nimport \\\"../lib/Address.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\n\\ncontract EthStarterFarming is ReentrancyGuard, Ownable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    event Staked(address indexed from, uint256 amountETH, uint256 amountLP);\\n    event Withdrawn(address indexed to, uint256 amountETH, uint256 amountLP);\\n    event Claimed(address indexed to, uint256 amount);\\n    event Halving(uint256 amount);\\n    event Received(address indexed from, uint256 amount);\\n\\n    STARToken public startToken;\\n    IUniswapV2Factory public factory;\\n    IUniswapV2Router02 public router;\\n    address public weth;\\n    address payable public devAddress;\\n    address public pairAddress;\\n\\n    struct AccountInfo {\\n        // Staked LP token balance\\n        uint256 balance;\\n        uint256 peakBalance;\\n        uint256 withdrawTimestamp;\\n        uint256 reward;\\n        uint256 rewardPerTokenPaid;\\n    }\\n    mapping(address => AccountInfo) public accountInfos;\\n\\n    mapping(address => bool) public bscsDevs;\\n\\n    // Staked LP token total supply\\n    uint256 private _totalSupply = 0;\\n\\n    uint256 public rewardDuration = 7 days;\\n    uint256 public rewardAllocation = 500 * 1e18;\\n    uint256 public lastUpdateTimestamp = 0;\\n\\n    uint256 public rewardRate = 0;\\n    uint256 public rewardPerTokenStored = 0;\\n\\n    // Farming will be open on this timestamp\\n    uint256 public farmingStartTimestamp = 1628985600; // Thursday, July 1, 2021 12:00:00 AM\\n    bool public farmingStarted = false;\\n\\n    // Max 25% / day LP withdraw\\n    uint256 public withdrawLimit = 25;\\n    uint256 public withdrawCycle = 24 hours;\\n\\n    // Burn address\\n    address constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n    uint256 public burnFeeX100 = 300;\\n\\n    modifier onlyBscsDev() {\\n        require(\\n            owner == msg.sender || bscsDevs[msg.sender],\\n            \\\"You are not dev.\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _startToken) public {\\n        startToken = STARToken(address(_startToken));\\n\\n        router = IUniswapV2Router02(0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff);\\n        factory = IUniswapV2Factory(router.factory());\\n        weth = router.WETH();\\n        devAddress = msg.sender;\\n        pairAddress = factory.getPair(address(startToken), weth);\\n\\n        // Calc reward rate\\n        rewardRate = rewardAllocation.div(rewardDuration);\\n    }\\n\\n    receive() external payable {\\n        emit Received(msg.sender, msg.value);\\n    }\\n\\n    function stake() external payable nonReentrant {\\n        _checkFarming();\\n        _updateReward(msg.sender);\\n\\n        require(msg.value > 0, \\\"Cannot stake 0\\\");\\n        require(\\n            !address(msg.sender).isContract(),\\n            \\\"Please use your individual account\\\"\\n        );\\n\\n        // 50% used to buy START\\n        address[] memory swapPath = new address[](2);\\n        swapPath[0] = address(weth);\\n        swapPath[1] = address(startToken);\\n        IERC20(startToken).safeApprove(address(router), 0);\\n        IERC20(startToken).safeApprove(address(router), msg.value.div(2));\\n        uint256[] memory amounts = router.swapExactETHForTokens{\\n            value: msg.value.div(2)\\n        }(uint256(0), swapPath, address(this), block.timestamp + 1 days);\\n        uint256 boughtStart = amounts[amounts.length - 1];\\n\\n        // Add liquidity\\n        uint256 amountETHDesired = msg.value.sub(msg.value.div(2));\\n        IERC20(startToken).approve(address(router), boughtStart);\\n        (, , uint256 liquidity) = router.addLiquidityETH{\\n            value: amountETHDesired\\n        }(\\n            address(startToken),\\n            boughtStart,\\n            1,\\n            1,\\n            address(this),\\n            block.timestamp + 1 days\\n        );\\n\\n        // Add LP token to total supply\\n        _totalSupply = _totalSupply.add(liquidity);\\n\\n        // Add to balance\\n        accountInfos[msg.sender].balance = accountInfos[msg.sender].balance.add(\\n            liquidity\\n        );\\n        // Set peak balance\\n        if (\\n            accountInfos[msg.sender].balance >\\n            accountInfos[msg.sender].peakBalance\\n        ) {\\n            accountInfos[msg.sender].peakBalance = accountInfos[msg.sender]\\n                .balance;\\n        }\\n\\n        // Set stake timestamp as withdraw timestamp\\n        // to prevent withdraw immediately after first staking\\n        if (accountInfos[msg.sender].withdrawTimestamp == 0) {\\n            accountInfos[msg.sender].withdrawTimestamp = block.timestamp;\\n        }\\n\\n        emit Staked(msg.sender, msg.value, liquidity);\\n    }\\n\\n    function withdraw() external nonReentrant {\\n        _checkFarming();\\n        _updateReward(msg.sender);\\n\\n        require(\\n            accountInfos[msg.sender].withdrawTimestamp + withdrawCycle <=\\n                block.timestamp,\\n            \\\"You must wait more time since your last withdraw or stake\\\"\\n        );\\n        require(accountInfos[msg.sender].balance > 0, \\\"Cannot withdraw 0\\\");\\n\\n        // Limit withdraw LP token\\n        uint256 amount = accountInfos[msg.sender]\\n            .peakBalance\\n            .mul(withdrawLimit)\\n            .div(100);\\n        if (accountInfos[msg.sender].balance < amount) {\\n            amount = accountInfos[msg.sender].balance;\\n        }\\n\\n        // Reduce total supply\\n        _totalSupply = _totalSupply.sub(amount);\\n        // Reduce balance\\n        accountInfos[msg.sender].balance = accountInfos[msg.sender].balance.sub(\\n            amount\\n        );\\n        if (accountInfos[msg.sender].balance == 0) {\\n            accountInfos[msg.sender].peakBalance = 0;\\n        }\\n        // Set timestamp\\n        accountInfos[msg.sender].withdrawTimestamp = block.timestamp;\\n\\n        // Remove liquidity in uniswap\\n        IERC20(pairAddress).approve(address(router), amount);\\n        (uint256 tokenAmount, uint256 bnbAmount) = router.removeLiquidity(\\n            address(startToken),\\n            weth,\\n            amount,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp + 1 days\\n        );\\n\\n        // Burn 3% START, send balance to sender\\n        uint256 burnAmount = tokenAmount.mul(burnFeeX100).div(10000);\\n        if (burnAmount > 0) {\\n            tokenAmount = tokenAmount.sub(burnAmount);\\n            startToken.transfer(address(BURN_ADDRESS), burnAmount);\\n        }\\n        startToken.transfer(msg.sender, tokenAmount);\\n\\n        // Withdraw BNB and send to sender\\n        IWETH(weth).withdraw(bnbAmount);\\n        msg.sender.transfer(bnbAmount);\\n\\n        emit Withdrawn(msg.sender, bnbAmount, amount);\\n    }\\n\\n    function claim() external nonReentrant {\\n        _checkFarming();\\n        _updateReward(msg.sender);\\n\\n        uint256 reward = accountInfos[msg.sender].reward;\\n        require(reward > 0, \\\"There is no reward to claim\\\");\\n\\n        if (reward > 0) {\\n            // Reduce first\\n            accountInfos[msg.sender].reward = 0;\\n            // Apply tax\\n            uint256 taxDenominator = claimTaxDenominator();\\n            uint256 tax = taxDenominator > 0 ? reward.div(taxDenominator) : 0;\\n            uint256 net = reward.sub(tax);\\n\\n            // Send reward\\n            startToken.transfer(msg.sender, net);\\n            if (tax > 0) {\\n                // Burn taxed token\\n                startToken.transfer(BURN_ADDRESS, tax);\\n            }\\n\\n            emit Claimed(msg.sender, reward);\\n        }\\n    }\\n\\n    function withdrawStart() external onlyOwner {\\n        startToken.transfer(devAddress, startToken.balanceOf(address(this)));\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return accountInfos[account].balance;\\n    }\\n\\n    function burnedTokenAmount() public view returns (uint256) {\\n        return startToken.balanceOf(BURN_ADDRESS);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        return\\n            rewardPerTokenStored.add(\\n                lastRewardTimestamp()\\n                    .sub(lastUpdateTimestamp)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(_totalSupply)\\n            );\\n    }\\n\\n    function lastRewardTimestamp() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function rewardEarned(address account) public view returns (uint256) {\\n        return\\n            accountInfos[account]\\n                .balance\\n                .mul(\\n                    rewardPerToken().sub(\\n                        accountInfos[account].rewardPerTokenPaid\\n                    )\\n                )\\n                .div(1e18)\\n                .add(accountInfos[account].reward);\\n    }\\n\\n    // Token price in eth\\n    function tokenPrice() public view returns (uint256) {\\n        uint256 bnbAmount = IERC20(weth).balanceOf(pairAddress);\\n        uint256 tokenAmount = IERC20(startToken).balanceOf(pairAddress);\\n        return bnbAmount.mul(1e18).div(tokenAmount);\\n    }\\n\\n    function claimTaxDenominator() public view returns (uint256) {\\n        if (block.timestamp < farmingStartTimestamp + 7 days) {\\n            return 4;\\n        } else if (block.timestamp < farmingStartTimestamp + 14 days) {\\n            return 5;\\n        } else if (block.timestamp < farmingStartTimestamp + 30 days) {\\n            return 10;\\n        } else if (block.timestamp < farmingStartTimestamp + 45 days) {\\n            return 20;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function _updateReward(address account) internal {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTimestamp = lastRewardTimestamp();\\n        if (account != address(0)) {\\n            accountInfos[account].reward = rewardEarned(account);\\n            accountInfos[account].rewardPerTokenPaid = rewardPerTokenStored;\\n        }\\n    }\\n\\n    // Check if farming is started\\n    function _checkFarming() internal {\\n        require(\\n            farmingStartTimestamp <= block.timestamp,\\n            \\\"Please wait until farming started\\\"\\n        );\\n        if (!farmingStarted) {\\n            farmingStarted = true;\\n            lastUpdateTimestamp = block.timestamp;\\n        }\\n    }\\n\\n    function addDevAddress(address _devAddr) external onlyOwner {\\n        bscsDevs[_devAddr] = true;\\n    }\\n\\n    function deleteDevAddress(address _devAddr) external onlyOwner {\\n        bscsDevs[_devAddr] = false;\\n    }\\n\\n    function setFarmingStartTimestamp(\\n        uint256 _farmingTimestamp,\\n        bool _farmingStarted\\n    ) external onlyBscsDev {\\n        farmingStartTimestamp = _farmingTimestamp;\\n        farmingStarted = _farmingStarted;\\n    }\\n\\n    function setBurnFee(uint256 _burnFee) external onlyBscsDev {\\n        burnFeeX100 = _burnFee;\\n    }\\n\\n    function setWithdrawInfo(uint256 _withdrawLimit, uint256 _withdrawCycle)\\n        external\\n        onlyBscsDev\\n    {\\n        withdrawLimit = _withdrawLimit;\\n        withdrawCycle = _withdrawCycle;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/BscStarter/source/crispy-octo/contracts/ethereum/EthStarterInfo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../lib/Ownable.sol\\\";\\nimport \\\"../lib/SafeMath.sol\\\";\\nimport \\\"../lib/ERC20.sol\\\";\\nimport \\\"./EthStarterFarming.sol\\\";\\n\\ninterface IEthStarterStaking {\\n    function accountLpInfos(address, address)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\\ninterface IEthExternalStaking {\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\\ncontract EthStarterInfo is Ownable {\\n    using SafeMath for uint256;\\n\\n    uint256[] private devFeePercentage = [5, 2, 2];\\n    uint256 private minDevFeeInWei = 5 ether; // min fee amount going to dev AND BSCS hodlers\\n    address[] private presaleAddresses; // track all presales created\\n\\n    mapping(address => uint256) private minInvestorBSCSBalance; // min amount to investors HODL BSCS balance\\n    mapping(address => uint256) private minInvestorGuaranteedBalance;\\n\\n    uint256 private minStakeTime = 1 minutes;\\n    uint256 private minUnstakeTime = 3 days;\\n    uint256 private creatorUnsoldClaimTime = 3 days;\\n\\n    address[] private swapRouters = [\\n        address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)\\n    ]; // Array of Routers\\n    address[] private swapFactorys = [\\n        address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f)\\n    ]; // Array of Factorys\\n\\n    mapping(address => bytes32) private initCodeHash; // Mapping of INIT_CODE_HASH\\n\\n    mapping(address => address) private lpAddresses; // TOKEN + START Pair Addresses\\n\\n    address private starterSwapRouter =\\n        address(0x0000000000000000000000000000000000000000); // StarterSwap Router\\n    address private starterSwapFactory =\\n        address(0x0000000000000000000000000000000000000000); // StarterSwap Factory\\n    bytes32 private starterSwapICH =\\n        0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5; // StarterSwap InitCodeHash\\n\\n    uint256 private starterSwapLPPercent = 0; // Liquidity will go StarterSwap\\n\\n    address private weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    address private startFactoryAddress;\\n    mapping(address => uint256) private investmentLimit;\\n\\n    mapping(address => bool) private starterDevs;\\n    mapping(address => bool) private presaleCreatorDevs;\\n\\n    address private startVestingAddress =\\n        address(0x0000000000000000000000000000000000000000);\\n\\n    mapping(address => uint256) private minYesVotesThreshold; // minimum number of yes votes needed to pass\\n\\n    mapping(address => uint256) private minCreatorStakedBalance;\\n\\n    mapping(address => bool) private blacklistedAddresses;\\n\\n    mapping(address => bool) public auditorWhitelistedAddresses; // addresses eligible to perform audits\\n\\n    IEthStarterStaking public starterStakingPool;\\n    EthStarterFarming public starterLPFarm;\\n    IEthExternalStaking public starterExternalStaking;\\n\\n    uint256 private devPresaleTokenFee = 2;\\n    address private devPresaleAllocationAddress =\\n        address(0x0000000000000000000000000000000000000000);\\n\\n    constructor(\\n        address _starterStakingPool,\\n        address payable _starterLPFarm,\\n        address _starterExternalStaking\\n    ) public {\\n        starterStakingPool = IEthStarterStaking(_starterStakingPool);\\n        starterLPFarm = EthStarterFarming(_starterLPFarm);\\n        starterExternalStaking = IEthExternalStaking(_starterExternalStaking);\\n\\n        starterDevs[address(0xf7e925818a20E5573Ee0f3ba7aBC963e17f2c476)] = true; // Chef\\n        starterDevs[address(0xcc887c71ABeB5763E896859B11530cc7942c7Bd5)] = true; // Cocktologist\\n\\n        initCodeHash[\\n            address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f)\\n        ] = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f; //Uniswap V2 INIT_CODE_HASH\\n\\n        lpAddresses[weth] = address(0x9E2B254c7D6AD24aFb334A75cE21e216A9AA25fc); // WETH -> WETH+START LP Addresses\\n\\n        lpAddresses[\\n            address(0x1d7Ca62F6Af49ec66f6680b8606E634E55Ef22C1)\\n        ] = address(0x1d7Ca62F6Af49ec66f6680b8606E634E55Ef22C1); // START => START address\\n\\n        minYesVotesThreshold[weth] = 1000 * 1e18;\\n\\n        minInvestorBSCSBalance[weth] = 3.5 * 1e18;\\n\\n        minInvestorGuaranteedBalance[weth] = 35 * 1e18;\\n\\n        investmentLimit[weth] = 1000 * 1e18;\\n\\n        minCreatorStakedBalance[weth] = 3.5 * 1e18;\\n    }\\n\\n    modifier onlyFactory() {\\n        require(\\n            startFactoryAddress == msg.sender ||\\n                owner == msg.sender ||\\n                starterDevs[msg.sender],\\n            \\\"onlyFactoryOrDev\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyStarterDev() {\\n        require(\\n            owner == msg.sender || starterDevs[msg.sender],\\n            \\\"onlyStarterDev\\\"\\n        );\\n        _;\\n    }\\n\\n    function getCakeV2LPAddress(\\n        address tokenA,\\n        address tokenB,\\n        uint256 swapIndex\\n    ) public view returns (address pair) {\\n        (address token0, address token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        swapFactorys[swapIndex],\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        initCodeHash[swapFactorys[swapIndex]] // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function getStarterSwapLPAddress(address tokenA, address tokenB)\\n        public\\n        view\\n        returns (address pair)\\n    {\\n        (address token0, address token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        starterSwapFactory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        starterSwapICH // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function getStarterDev(address _dev) external view returns (bool) {\\n        return starterDevs[_dev];\\n    }\\n\\n    function setStarterDevAddress(address _newDev) external onlyOwner {\\n        starterDevs[_newDev] = true;\\n    }\\n\\n    function removeStarterDevAddress(address _oldDev) external onlyOwner {\\n        starterDevs[_oldDev] = false;\\n    }\\n\\n    function getPresaleCreatorDev(address _dev) external view returns (bool) {\\n        return presaleCreatorDevs[_dev];\\n    }\\n\\n    function setPresaleCreatorDevAddress(address _newDev)\\n        external\\n        onlyStarterDev\\n    {\\n        presaleCreatorDevs[_newDev] = true;\\n    }\\n\\n    function removePresaleCreatorDevAddress(address _oldDev)\\n        external\\n        onlyStarterDev\\n    {\\n        presaleCreatorDevs[_oldDev] = false;\\n    }\\n\\n    function getBscsFactoryAddress() external view returns (address) {\\n        return startFactoryAddress;\\n    }\\n\\n    function setBscsFactoryAddress(address _newFactoryAddress)\\n        external\\n        onlyStarterDev\\n    {\\n        startFactoryAddress = _newFactoryAddress;\\n    }\\n\\n    function getBscsStakingPool() external view returns (address) {\\n        return address(starterStakingPool);\\n    }\\n\\n    function setBscsStakingPool(address _starterStakingPool)\\n        external\\n        onlyStarterDev\\n    {\\n        starterStakingPool = IEthStarterStaking(_starterStakingPool);\\n    }\\n\\n    function setStarterLPFarmPool(address payable _starterLPFarm)\\n        external\\n        onlyStarterDev\\n    {\\n        starterLPFarm = EthStarterFarming(_starterLPFarm);\\n    }\\n\\n    function setStarterExternalStaking(address _starterExternalStaking)\\n        external\\n        onlyStarterDev\\n    {\\n        starterExternalStaking = IEthExternalStaking(_starterExternalStaking);\\n    }\\n\\n    function addPresaleAddress(address _presale)\\n        external\\n        onlyFactory\\n        returns (uint256)\\n    {\\n        presaleAddresses.push(_presale);\\n        return presaleAddresses.length - 1;\\n    }\\n\\n    function getPresalesCount() external view returns (uint256) {\\n        return presaleAddresses.length;\\n    }\\n\\n    function getPresaleAddress(uint256 bscsId) external view returns (address) {\\n        return presaleAddresses[bscsId];\\n    }\\n\\n    function setPresaleAddress(uint256 bscsId, address _newAddress)\\n        external\\n        onlyStarterDev\\n    {\\n        presaleAddresses[bscsId] = _newAddress;\\n    }\\n\\n    function getDevFeePercentage(uint256 presaleType)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return devFeePercentage[presaleType];\\n    }\\n\\n    function setDevFeePercentage(uint256 presaleType, uint256 _devFeePercentage)\\n        external\\n        onlyStarterDev\\n    {\\n        devFeePercentage[presaleType] = _devFeePercentage;\\n    }\\n\\n    function getMinDevFeeInWei() external view returns (uint256) {\\n        return minDevFeeInWei;\\n    }\\n\\n    function setMinDevFeeInWei(uint256 _minDevFeeInWei)\\n        external\\n        onlyStarterDev\\n    {\\n        minDevFeeInWei = _minDevFeeInWei;\\n    }\\n\\n    function getMinInvestorBSCSBalance(address tokenAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return minInvestorBSCSBalance[tokenAddress];\\n    }\\n\\n    function setMinInvestorBSCSBalance(\\n        address tokenAddress,\\n        uint256 _minInvestorBSCSBalance\\n    ) external onlyStarterDev {\\n        minInvestorBSCSBalance[tokenAddress] = _minInvestorBSCSBalance;\\n    }\\n\\n    function getMinYesVotesThreshold(address tokenAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return minYesVotesThreshold[tokenAddress];\\n    }\\n\\n    function setMinYesVotesThreshold(\\n        address tokenAddress,\\n        uint256 _minYesVotesThreshold\\n    ) external onlyStarterDev {\\n        minYesVotesThreshold[tokenAddress] = _minYesVotesThreshold;\\n    }\\n\\n    function getMinCreatorStakedBalance(address fundingTokenAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return minCreatorStakedBalance[fundingTokenAddress];\\n    }\\n\\n    function setMinCreatorStakedBalance(\\n        address fundingTokenAddress,\\n        uint256 _minCreatorStakedBalance\\n    ) external onlyStarterDev {\\n        minCreatorStakedBalance[fundingTokenAddress] = _minCreatorStakedBalance;\\n    }\\n\\n    function getMinInvestorGuaranteedBalance(address tokenAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return minInvestorGuaranteedBalance[tokenAddress];\\n    }\\n\\n    function setMinInvestorGuaranteedBalance(\\n        address tokenAddress,\\n        uint256 _minInvestorGuaranteedBalance\\n    ) external onlyStarterDev {\\n        minInvestorGuaranteedBalance[\\n            tokenAddress\\n        ] = _minInvestorGuaranteedBalance;\\n    }\\n\\n    function getMinStakeTime() external view returns (uint256) {\\n        return minStakeTime;\\n    }\\n\\n    function setMinStakeTime(uint256 _minStakeTime) external onlyStarterDev {\\n        minStakeTime = _minStakeTime;\\n    }\\n\\n    function getMinUnstakeTime() external view returns (uint256) {\\n        return minUnstakeTime;\\n    }\\n\\n    function setMinUnstakeTime(uint256 _minUnstakeTime)\\n        external\\n        onlyStarterDev\\n    {\\n        minUnstakeTime = _minUnstakeTime;\\n    }\\n\\n    function getCreatorUnsoldClaimTime() external view returns (uint256) {\\n        return creatorUnsoldClaimTime;\\n    }\\n\\n    function setCreatorUnsoldClaimTime(uint256 _creatorUnsoldClaimTime)\\n        external\\n        onlyStarterDev\\n    {\\n        creatorUnsoldClaimTime = _creatorUnsoldClaimTime;\\n    }\\n\\n    function getSwapRouter(uint256 index) external view returns (address) {\\n        return swapRouters[index];\\n    }\\n\\n    function setSwapRouter(uint256 index, address _swapRouter)\\n        external\\n        onlyStarterDev\\n    {\\n        swapRouters[index] = _swapRouter;\\n    }\\n\\n    function addSwapRouter(address _swapRouter) external onlyStarterDev {\\n        swapRouters.push(_swapRouter);\\n    }\\n\\n    function getSwapFactory(uint256 index) external view returns (address) {\\n        return swapFactorys[index];\\n    }\\n\\n    function setSwapFactory(uint256 index, address _swapFactory)\\n        external\\n        onlyStarterDev\\n    {\\n        swapFactorys[index] = _swapFactory;\\n    }\\n\\n    function addSwapFactory(address _swapFactory) external onlyStarterDev {\\n        swapFactorys.push(_swapFactory);\\n    }\\n\\n    function getInitCodeHash(address _swapFactory)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return initCodeHash[_swapFactory];\\n    }\\n\\n    function setInitCodeHash(address _swapFactory, bytes32 _initCodeHash)\\n        external\\n        onlyStarterDev\\n    {\\n        initCodeHash[_swapFactory] = _initCodeHash;\\n    }\\n\\n    function getStarterSwapRouter() external view returns (address) {\\n        return starterSwapRouter;\\n    }\\n\\n    function setStarterSwapRouter(address _starterSwapRouter)\\n        external\\n        onlyStarterDev\\n    {\\n        starterSwapRouter = _starterSwapRouter;\\n    }\\n\\n    function getStarterSwapFactory() external view returns (address) {\\n        return starterSwapFactory;\\n    }\\n\\n    function setStarterSwapFactory(address _starterSwapFactory)\\n        external\\n        onlyStarterDev\\n    {\\n        starterSwapFactory = _starterSwapFactory;\\n    }\\n\\n    function getStarterSwapICH() external view returns (bytes32) {\\n        return starterSwapICH;\\n    }\\n\\n    function setStarterSwapICH(bytes32 _initCodeHash) external onlyStarterDev {\\n        starterSwapICH = _initCodeHash;\\n    }\\n\\n    function getStarterSwapLPPercent() external view returns (uint256) {\\n        return starterSwapLPPercent;\\n    }\\n\\n    function setStarterSwapLPPercent(uint256 _starterSwapLPPercent)\\n        external\\n        onlyStarterDev\\n    {\\n        starterSwapLPPercent = _starterSwapLPPercent;\\n    }\\n\\n    function getWETH() external view returns (address) {\\n        return weth;\\n    }\\n\\n    function setWETH(address _weth) external onlyStarterDev {\\n        weth = _weth;\\n    }\\n\\n    function getVestingAddress() external view returns (address) {\\n        return startVestingAddress;\\n    }\\n\\n    function setVestingAddress(address _newVesting) external onlyStarterDev {\\n        startVestingAddress = _newVesting;\\n    }\\n\\n    function getInvestmentLimit(address tokenAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return investmentLimit[tokenAddress];\\n    }\\n\\n    function setInvestmentLimit(address tokenAddress, uint256 _limit)\\n        external\\n        onlyStarterDev\\n    {\\n        investmentLimit[tokenAddress] = _limit;\\n    }\\n\\n    function getLpAddress(address tokenAddress) public view returns (address) {\\n        return lpAddresses[tokenAddress];\\n    }\\n\\n    function setLpAddress(address tokenAddress, address lpAddress)\\n        external\\n        onlyStarterDev\\n    {\\n        lpAddresses[tokenAddress] = lpAddress;\\n    }\\n\\n    function getStartLpStaked(address lpAddress, address payable sender)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 balance;\\n        uint256 lastStakedTimestamp;\\n        (balance, lastStakedTimestamp, ) = starterStakingPool.accountLpInfos(\\n            lpAddress,\\n            address(sender)\\n        );\\n        uint256 totalHodlerBalance = 0;\\n        if (lastStakedTimestamp + minStakeTime <= block.timestamp) {\\n            totalHodlerBalance = totalHodlerBalance.add(balance);\\n        }\\n\\n        // add LP farm mining to balance\\n        balance = 0;\\n\\n        (balance, , , , ) = starterLPFarm.accountInfos(address(sender));\\n\\n        uint256 externalBalance = starterExternalStaking.balanceOf(\\n            address(sender)\\n        );\\n\\n        return totalHodlerBalance + balance + externalBalance;\\n    }\\n\\n    function getTotalStartLpStaked(address lpAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return ERC20(lpAddress).balanceOf(address(starterStakingPool));\\n    }\\n\\n    function getStaked(address fundingTokenAddress, address payable sender)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return getStartLpStaked(getLpAddress(fundingTokenAddress), sender);\\n    }\\n\\n    function getTotalStaked(address fundingTokenAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return getTotalStartLpStaked(getLpAddress(fundingTokenAddress));\\n    }\\n\\n    function getDevPresaleTokenFee() public view returns (uint256) {\\n        return devPresaleTokenFee;\\n    }\\n\\n    function setDevPresaleTokenFee(uint256 _devPresaleTokenFee)\\n        external\\n        onlyStarterDev\\n    {\\n        devPresaleTokenFee = _devPresaleTokenFee;\\n    }\\n\\n    function getDevPresaleAllocationAddress() public view returns (address) {\\n        return devPresaleAllocationAddress;\\n    }\\n\\n    function setDevPresaleAllocationAddress(\\n        address _devPresaleAllocationAddress\\n    ) external onlyStarterDev {\\n        devPresaleAllocationAddress = _devPresaleAllocationAddress;\\n    }\\n\\n    function isBlacklistedAddress(address _sender) public view returns (bool) {\\n        return blacklistedAddresses[_sender];\\n    }\\n\\n    function addBlacklistedAddresses(address[] calldata _blacklistedAddresses)\\n        external\\n        onlyStarterDev\\n    {\\n        for (uint256 i = 0; i < _blacklistedAddresses.length; i++) {\\n            blacklistedAddresses[_blacklistedAddresses[i]] = true;\\n        }\\n    }\\n\\n    function removeBlacklistedAddresses(\\n        address[] calldata _blacklistedAddresses\\n    ) external onlyStarterDev {\\n        for (uint256 i = 0; i < _blacklistedAddresses.length; i++) {\\n            blacklistedAddresses[_blacklistedAddresses[i]] = false;\\n        }\\n    }\\n\\n    function isAuditorWhitelistedAddress(address _sender)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return auditorWhitelistedAddresses[_sender];\\n    }\\n\\n    function addAuditorWhitelistedAddresses(\\n        address[] calldata _whitelistedAddresses\\n    ) external onlyStarterDev {\\n        for (uint256 i = 0; i < _whitelistedAddresses.length; i++) {\\n            auditorWhitelistedAddresses[_whitelistedAddresses[i]] = true;\\n        }\\n    }\\n\\n    function removeAuditorWhitelistedAddresses(\\n        address[] calldata _whitelistedAddresses\\n    ) external onlyStarterDev {\\n        for (uint256 i = 0; i < _whitelistedAddresses.length; i++) {\\n            auditorWhitelistedAddresses[_whitelistedAddresses[i]] = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/BscStarter/source/crispy-octo/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/BscStarter/source/crispy-octo/contracts/interfaces/IUniswap.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/BscStarter/source/crispy-octo/contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/BscStarter/source/crispy-octo/contracts/lib/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\\n            data\\n        );\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/BscStarter/source/crispy-octo/contracts/lib/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/BscStarter/source/crispy-octo/contracts/lib/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(address => uint256) _balances;\\n\\n    mapping(address => mapping(address => uint256)) _allowances;\\n\\n    uint256 _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(\\n            amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/BscStarter/source/crispy-octo/contracts/lib/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/BscStarter/source/crispy-octo/contracts/lib/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\n/**\\n * @title Owned\\n * @dev Basic contract for authorization control.\\n * @author dicether\\n */\\ncontract Ownable {\\n    address public owner;\\n    address public pendingOwner;\\n\\n    event LogOwnerShipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event LogOwnerShipTransferInitiated(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Modifier, which throws if called by other account than owner.\\n     */\\n    modifier onlyOwner {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier throws if called by any account other than the pendingOwner.\\n     */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == pendingOwner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set contract creator as initial owner\\n     */\\n    constructor() public {\\n        owner = msg.sender;\\n        pendingOwner = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to set the pendingOwner address.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address _newOwner) public onlyOwner {\\n        pendingOwner = _newOwner;\\n        emit LogOwnerShipTransferInitiated(owner, _newOwner);\\n    }\\n\\n    /**\\n     * @dev PendingOwner can accept ownership.\\n     */\\n    function claimOwnership() public onlyPendingOwner {\\n        owner = pendingOwner;\\n        pendingOwner = address(0);\\n        emit LogOwnerShipTransferred(owner, pendingOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/BscStarter/source/crispy-octo/contracts/lib/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/BscStarter/source/crispy-octo/contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\nimport \\\"./Address.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(\\n            value\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Volumes/Data/Projects/BscStarter/source/crispy-octo/contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_starterStakingPool\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_starterLPFarm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_starterExternalStaking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnerShipTransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnerShipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelistedAddresses\",\"type\":\"address[]\"}],\"name\":\"addAuditorWhitelistedAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_blacklistedAddresses\",\"type\":\"address[]\"}],\"name\":\"addBlacklistedAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_presale\",\"type\":\"address\"}],\"name\":\"addPresaleAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapFactory\",\"type\":\"address\"}],\"name\":\"addSwapFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"addSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"auditorWhitelistedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBscsFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBscsStakingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapIndex\",\"type\":\"uint256\"}],\"name\":\"getCakeV2LPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreatorUnsoldClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleType\",\"type\":\"uint256\"}],\"name\":\"getDevFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDevPresaleAllocationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDevPresaleTokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapFactory\",\"type\":\"address\"}],\"name\":\"getInitCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getInvestmentLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getLpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingTokenAddress\",\"type\":\"address\"}],\"name\":\"getMinCreatorStakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinDevFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getMinInvestorBSCSBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getMinInvestorGuaranteedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinUnstakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getMinYesVotesThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bscsId\",\"type\":\"uint256\"}],\"name\":\"getPresaleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"getPresaleCreatorDev\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPresalesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getStartLpStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"getStarterDev\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStarterSwapFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStarterSwapICH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getStarterSwapLPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStarterSwapLPPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStarterSwapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSwapFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSwapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingTokenAddress\",\"type\":\"address\"}],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"}],\"name\":\"getTotalStartLpStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isAuditorWhitelistedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isBlacklistedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelistedAddresses\",\"type\":\"address[]\"}],\"name\":\"removeAuditorWhitelistedAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_blacklistedAddresses\",\"type\":\"address[]\"}],\"name\":\"removeBlacklistedAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldDev\",\"type\":\"address\"}],\"name\":\"removePresaleCreatorDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldDev\",\"type\":\"address\"}],\"name\":\"removeStarterDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFactoryAddress\",\"type\":\"address\"}],\"name\":\"setBscsFactoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_starterStakingPool\",\"type\":\"address\"}],\"name\":\"setBscsStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_creatorUnsoldClaimTime\",\"type\":\"uint256\"}],\"name\":\"setCreatorUnsoldClaimTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presaleType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setDevFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devPresaleAllocationAddress\",\"type\":\"address\"}],\"name\":\"setDevPresaleAllocationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devPresaleTokenFee\",\"type\":\"uint256\"}],\"name\":\"setDevPresaleTokenFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapFactory\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_initCodeHash\",\"type\":\"bytes32\"}],\"name\":\"setInitCodeHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setInvestmentLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"}],\"name\":\"setLpAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCreatorStakedBalance\",\"type\":\"uint256\"}],\"name\":\"setMinCreatorStakedBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDevFeeInWei\",\"type\":\"uint256\"}],\"name\":\"setMinDevFeeInWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minInvestorBSCSBalance\",\"type\":\"uint256\"}],\"name\":\"setMinInvestorBSCSBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minInvestorGuaranteedBalance\",\"type\":\"uint256\"}],\"name\":\"setMinInvestorGuaranteedBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakeTime\",\"type\":\"uint256\"}],\"name\":\"setMinStakeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minUnstakeTime\",\"type\":\"uint256\"}],\"name\":\"setMinUnstakeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minYesVotesThreshold\",\"type\":\"uint256\"}],\"name\":\"setMinYesVotesThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bscsId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setPresaleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDev\",\"type\":\"address\"}],\"name\":\"setPresaleCreatorDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDev\",\"type\":\"address\"}],\"name\":\"setStarterDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_starterExternalStaking\",\"type\":\"address\"}],\"name\":\"setStarterExternalStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_starterLPFarm\",\"type\":\"address\"}],\"name\":\"setStarterLPFarmPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_starterSwapFactory\",\"type\":\"address\"}],\"name\":\"setStarterSwapFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_initCodeHash\",\"type\":\"bytes32\"}],\"name\":\"setStarterSwapICH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_starterSwapLPPercent\",\"type\":\"uint256\"}],\"name\":\"setStarterSwapLPPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_starterSwapRouter\",\"type\":\"address\"}],\"name\":\"setStarterSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_swapFactory\",\"type\":\"address\"}],\"name\":\"setSwapFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newVesting\",\"type\":\"address\"}],\"name\":\"setVestingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starterExternalStaking\",\"outputs\":[{\"internalType\":\"contract IEthExternalStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starterLPFarm\",\"outputs\":[{\"internalType\":\"contract EthStarterFarming\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"starterStakingPool\",\"outputs\":[{\"internalType\":\"contract IEthStarterStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EthStarterInfo","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"50","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}