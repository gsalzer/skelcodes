{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0<0.9.0;\r\n\r\ninterface IERC20 {\r\n    function approve(address _spender, uint256 _tokens) external returns (bool);\r\n    function balanceOf(address who) external returns (uint256);\r\n    function burn(uint256 _tokens) external;\r\n}\r\n\r\ninterface ICompounder {\r\n    function buy(uint256 _amount) external returns (uint256);\r\n    function disburse(uint256 _amount) external;\r\n    function withdraw() external returns (uint256);\r\n    function dividendsOf(address _user) external returns (uint256);\r\n}\r\n\r\ninterface IClaimable {\r\n    function claim() external;\r\n}\r\n\r\ninterface IStakingRewards {\r\n    function deposit(uint256 _amount) external;\r\n}\r\n\r\ncontract KRILLBurner {\r\n    address public krill;       // address of the KRILL token\r\n    address public cKrill;      // address of the cKRILL token\r\n    address public liquidity;   // address of the LP token\r\n    address public whalesGame;  // address of the whales game contract\r\n    address public staking;     // address of the LP staking contract\r\n\r\n    constructor (address _krill, address _cKrill, address _liquidity, address _whalesGame, address _staking) {\r\n        krill = _krill;\r\n        cKrill = _cKrill;\r\n        liquidity = _liquidity;\r\n        whalesGame = _whalesGame;\r\n        staking = _staking;\r\n\r\n        IERC20(krill).approve(cKrill, type(uint256).max);       // max out approval for KRILL tokens\r\n        IERC20(liquidity).approve(staking, type(uint256).max);  // max out approval for LP tokens\r\n    }\r\n\r\n    // if any applicable tokens are held by this contract, it should be able to deposit them\r\n    function _depositAssets ()\r\n    internal {\r\n        uint LPBalance = IERC20(liquidity).balanceOf(address(this));    // load LP balance into memory\r\n\r\n        if(LPBalance > 0)                                               // are there any LP tokens?\r\n            IStakingRewards(staking).deposit(LPBalance);             // deposit the entire amount into the StakingRewards contract\r\n\r\n        uint krillBalance = IERC20(krill).balanceOf(address(this));      // load KRILL balance into memory\r\n\r\n        if(krillBalance > 0 )                                           // is there any krill here dumped from another contract?\r\n            ICompounder(cKrill).buy(krillBalance);                          // buy cKRILL with whatever balance is held\r\n    }\r\n\r\n    // claim rewards from NFTs, staking, and cKRILL position\r\n    function _claimRewardsAndDisburse()\r\n    internal {\r\n        IClaimable(staking).claim();    // Claim rewards from the LP staking contract\r\n        IClaimable(whalesGame).claim(); // Claim rewards from the whales game contract\r\n\r\n        if(ICompounder(cKrill).dividendsOf(address(this)) > 0)      // If this contract has rewards to claim\r\n            ICompounder(cKrill).withdraw();                         // Claim rewards from the cKRILL held by this contract\r\n\r\n        uint krillBalance = IERC20(krill).balanceOf(address(this)); // load KRILL balance into memory\r\n        \r\n        if(krillBalance > 0)                                // is there any krill here dumped from another contract?\r\n            IERC20(krill).burn(krillBalance);               // burn it all\r\n    }\r\n\r\n    // process() function for additional incentive layer\r\n    function process()\r\n    external {\r\n        _depositAssets();\r\n        _claimRewardsAndDisburse();\r\n    }\r\n }","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_krill\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cKrill\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whalesGame\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"cKrill\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"krill\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"process\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whalesGame\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"KRILLBurner","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f59bfeed034092e399cc43ff79edab15e2e187350000000000000000000000009a8fd979f655f8e41d086b596f14bca16f53ad1500000000000000000000000099ef226531aea4e34f3188ab83ae110e3c4d34470000000000000000000000001ebb218415b1f70aeff54041c743082f183318ce0000000000000000000000001a300c5a5639c4605c1b47f6e079e8b4056a9376","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://543833b950c891001b7934d7ac50b6282445fe17361ed30f60dc8c6d096b74ef"}]}