{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// solhint-disable var-name-mixedcase\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IVestingPools.sol\\\";\\nimport \\\"./interfaces/IRewardPool.sol\\\";\\nimport \\\"./utils/ImmutableOwnable.sol\\\";\\nimport \\\"./utils/Utils.sol\\\";\\n\\n/**\\n * @title RewardPool\\n * @notice It vests $ZKP token from the Panther Protocol \\\"Reward Pool\\\".\\n * @dev One of the vesting pools (maybe, the major one) which the VestingPools\\n * contract vests $ZKP tokens to is the \\\"Reward Pool\\\" (aka \\\"Protocol Pool\\\").\\n * This contract assumed to have a \\\"pool wallet\\\" role with the VestingPools,\\n * and therefore has a privilege to request vesting $ZKPs from the Reward Pool\\n * to the \\\"recipient\\\".\\n * The \\\"RewardMaster\\\" contract, that distributes tokens to users as rewards,\\n * is assumed to be the \\\"recipient\\\".\\n *\\n * This contract is expected to be replaced. Therefore it allows the owner\\n * to transfer the \\\"pool wallet\\\" role to another account.\\n */\\ncontract RewardPool is ImmutableOwnable, Utils, IRewardPool {\\n    /// @notice Address of the VestingPools instance\\n    address public immutable VESTING_POOLS;\\n\\n    /// @notice ID of the pool (in the VestingPools) to vest from\\n    uint8 public poolId;\\n\\n    /// @dev (UNIX) Time when vesting gets disabled\\n    uint32 public endTime;\\n\\n    /// @notice Address to vest tokens to\\n    address public recipient;\\n\\n    constructor(address _vestingPools, address _owner)\\n        ImmutableOwnable(_owner)\\n        nonZeroAddress(_vestingPools)\\n    {\\n        VESTING_POOLS = _vestingPools;\\n    }\\n\\n    /// @inheritdoc IRewardPool\\n    function releasableAmount() external view override returns (uint256) {\\n        if (recipient == address(0)) return 0;\\n        if (timeNow() >= endTime) return 0;\\n\\n        return _releasableAmount();\\n    }\\n\\n    /// @inheritdoc IRewardPool\\n    function vestRewards() external override returns (uint256 amount) {\\n        // revert if unauthorized or recipient not yet set\\n        require(msg.sender == recipient, \\\"RP: unauthorized\\\");\\n        require(timeNow() < endTime, \\\"RP: expired\\\");\\n\\n        amount = _releasableAmount();\\n\\n        if (amount != 0) {\\n            IVestingPools(VESTING_POOLS).releaseTo(poolId, recipient, amount);\\n            emit Vested(amount);\\n        }\\n    }\\n\\n    /// @notice Sets the {poolId} and the {recipient} to given values\\n    /// @dev Owner only may call, once only\\n    /// This contract address must be set in the VestingPools as the wallet for the pool\\n    function initialize(\\n        uint8 _poolId,\\n        address _recipient,\\n        uint32 _endTime\\n    ) external onlyOwner nonZeroAddress(_recipient) {\\n        // once only\\n        require(recipient == address(0), \\\"RP: initialized\\\");\\n        // _endTime can't be in the past\\n        require(_endTime > timeNow(), \\\"RP: expired\\\");\\n        // this contract must be registered with the VestingPools\\n        require(IVestingPools(VESTING_POOLS).getWallet(_poolId) == address(this), \\\"RP:E7\\\");\\n\\n        poolId = _poolId;\\n        recipient = _recipient;\\n        endTime = _endTime;\\n\\n        emit Initialized(_poolId, _recipient, _endTime);\\n    }\\n\\n    /// @notice Calls VestingPools to transfer 'pool wallet' role to given address\\n    /// @dev Owner only may call, once only\\n    function transferPoolWalletRole(address newWallet)\\n        external\\n        onlyOwner\\n        nonZeroAddress(newWallet)\\n    {\\n        IVestingPools(VESTING_POOLS).updatePoolWallet(poolId, newWallet);\\n    }\\n\\n    function _releasableAmount() internal view returns (uint256) {\\n        return IVestingPools(VESTING_POOLS).releasableAmount(poolId);\\n    }\\n\\n    modifier nonZeroAddress(address account) {\\n        require(account != address(0), \\\"RP: zero address\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVestingPools.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVestingPools {\\n    /**\\n     * @notice Returns Token address.\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @notice Returns the wallet address of the specified pool.\\n     */\\n    function getWallet(uint256 poolId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the amount that may be vested now from the given pool.\\n     */\\n    function releasableAmount(uint256 poolId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount that has been vested from the given pool\\n     */\\n    function vestedAmount(uint256 poolId) external view returns (uint256);\\n\\n    /**\\n     * @notice Vests the specified amount from the given pool to the pool wallet.\\n     * If the amount is zero, it vests the entire \\\"releasable\\\" amount.\\n     * @dev Pool wallet may call only.\\n     * @return released - Amount released.\\n     */\\n    function release(uint256 poolId, uint256 amount)\\n        external\\n        returns (uint256 released);\\n\\n    /**\\n     * @notice Vests the specified amount from the given pool to the given address.\\n     * If the amount is zero, it vests the entire \\\"releasable\\\" amount.\\n     * @dev Pool wallet may call only.\\n     * @return released - Amount released.\\n     */\\n    function releaseTo(\\n        uint256 poolId,\\n        address account,\\n        uint256 amount\\n    ) external returns (uint256 released);\\n\\n    /**\\n     * @notice Updates the wallet for the given pool.\\n     * @dev Only address with the 'wallet' role may call.\\n     */\\n    function updatePoolWallet(uint256 poolId, address newWallet) external;\\n\\n    /// @notice Emitted on an amount vesting.\\n    event Released(uint256 indexed poolId, address to, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.0;\\n\\ninterface IRewardPool {\\n    /// @notice Returns token amount that may be released (vested) now\\n    function releasableAmount() external view returns (uint256);\\n\\n    /// @notice Vests releasable token amount to the {recipient}\\n    /// @dev {recipient} only may call\\n    function vestRewards() external returns (uint256 amount);\\n\\n    /// @notice Emitted on vesting to the {recipient}\\n    event Vested(uint256 amount);\\n\\n    /// @notice Emitted on parameters initialized.\\n    event Initialized(uint256 _poolId, address _recipient, uint256 _endTime);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ImmutableOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\n/// @title Staking\\nabstract contract ImmutableOwnable {\\n    /// @notice The owner who has privileged rights\\n    address public immutable OWNER;\\n\\n    /// @dev Throws if called by any account other than the {OWNER}.\\n    modifier onlyOwner() {\\n        require(OWNER == msg.sender, \\\"ImmOwn: unauthorized\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"ImmOwn: zero owner address\\\");\\n        OWNER = _owner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_8\\npragma solidity ^0.8.0;\\n\\nabstract contract Utils {\\n    function safe32(uint256 n) internal pure returns (uint32) {\\n        require(n < 2**32, \\\"UNSAFE32\\\");\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint256 n) internal pure returns (uint96) {\\n        require(n < 2**96, \\\"UNSAFE96\\\");\\n        return uint96(n);\\n    }\\n\\n    function safe128(uint256 n) internal pure returns (uint128) {\\n        require(n < 2**128, \\\"UNSAFE128\\\");\\n        return uint128(n);\\n    }\\n\\n    function safe160(uint256 n) internal pure returns (uint160) {\\n        require(n < 2**160, \\\"UNSAFE160\\\");\\n        return uint160(n);\\n    }\\n\\n    function safe32TimeNow() internal view returns (uint32) {\\n        return safe32(timeNow());\\n    }\\n\\n    function safe32BlockNow() internal view returns (uint32) {\\n        return safe32(blockNow());\\n    }\\n\\n    /// @dev Returns the current block timestamp (added to ease testing)\\n    function timeNow() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @dev Returns the current block number (added to ease testing)\\n    function blockNow() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingPools\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Vested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VESTING_POOLS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_poolId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_endTime\",\"type\":\"uint32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"transferPoolWalletRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RewardPool","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"000000000000000000000000b476104aa9d1f30180a01987fb09b1e96ddcf14b000000000000000000000000505796f5bc290269d2522cf19135ad7aa60dfd77","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}