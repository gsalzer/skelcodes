{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MintableDutchSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"./interfaces/IMintableERC721.sol\\\";\\n\\n/**\\n * @title Mintable Dutch Sale\\n *\\n * @notice Mintable Dutch Sale sales fixed amount of NFTs (tokens) for a price in a fixed period of time;\\n *      it can be used in a 10k sale campaign and the smart contract is generic and\\n *      can sell any type of mintable NFT (see MintableERC721 interface)\\n *\\n * @dev Technically, all the \\\"fixed\\\" parameters can be changed on the go after smart contract is deployed\\n *      and operational, but this ability is reserved for quick fix-like adjustments, and to provide\\n *      an ability to restart and run a similar sale after the previous one ends\\n *\\n * @dev When buying a token from this smart contract, next token is minted to the recipient\\n *\\n * @dev Supports functionality to limit amount of tokens that can be minted to each address\\n *\\n * @dev Reduces the price every certain intervals\\n *\\n * @dev Deployment and setup:\\n *      1. Deploy smart contract, specify smart contract address during the deployment:\\n *         - Mintable ER721 deployed instance address\\n *      2. Execute `initialize` function and set up the sale parameters;\\n *         sale is not active until it's initialized\\n *\\n */\\ncontract MintableDutchSale is Ownable {\\n  // ----- SLOT.1 (256/256)\\n  /**\\n   * @notice Initial price of a single item (token) minted\\n   *      When buying several tokens at once the price accumulates accordingly, with no discount\\n   *\\n   * The price gets reduced every interval in the Dutch auction until it\\n   * reaches finalPrice\\n   *\\n   * @dev Maximum item price is ~18.44 ETH\\n   */\\n  uint64 public initialPrice;\\n\\n  /**\\n   * @dev Next token ID to mint;\\n   *      initially this is the first \\\"free\\\" ID which can be minted;\\n   *      at any point in time this should point to a free, mintable ID\\n   *      for the token\\n   *\\n   * @dev `nextId` cannot be zero, we do not ever mint NFTs with zero IDs\\n   */\\n  uint32 public nextId = 1;\\n\\n  /**\\n   * @dev Last token ID to mint;\\n   *      once `nextId` exceeds `finalId` the sale pauses\\n   */\\n  uint32 public finalId;\\n\\n  /**\\n   * @notice Sale start unix timestamp; the sale is active after the start (inclusive)\\n   */\\n  uint32 public saleStart;\\n\\n  /**\\n   * @notice Sale end unix timestamp; the sale is active before the end (exclusive)\\n   */\\n  uint32 public saleEnd;\\n\\n  /**\\n   * @notice Once set, limits the amount of tokens one can buy in a single transaction;\\n   *       When unset (zero) the amount of tokens is limited only by block size and\\n   *       amount of tokens left for sale\\n   */\\n  uint32 public batchLimit;\\n\\n  /**\\n   * @notice Once set, limits the amount of tokens one address can buy for the duration of the sale;\\n   *       When unset (zero) the amount of tokens is limited only by the amount of tokens left for sale\\n   */\\n  uint32 public mintLimit;\\n\\n  // ----- SLOT.2 (192/256)\\n  /**\\n   * @notice Counter of the tokens sold (minted) by this sale smart contract\\n   */\\n  uint32 public soldCounter;\\n\\n  /**\\n   * @notice How often to reduce the price in the Dutch action\\n   */\\n  uint32 public interval;\\n\\n  /**\\n   * @notice By how much to reduce the price in the Dutch action\\n   */\\n  uint64 public reduceBy;\\n\\n  /**\\n   * @notice By how much to reduce the price in the Dutch action\\n   */\\n  uint64 public finalPrice;\\n\\n  // ----- NON-SLOTTED\\n  /**\\n   * @dev Mintable ERC721 contract address to mint\\n   */\\n  address public immutable tokenContract;\\n\\n  // ----- NON-SLOTTED\\n  /**\\n   * @dev Number of mints performed by address\\n   */\\n  mapping(address => uint32) mints;\\n\\n  /**\\n   * @dev Fired in initialize()\\n   *\\n   * @param _by an address which executed the initialization\\n   * @param _initialPrice price of one token created\\n   * @param _nextId next ID of the token to mint\\n   * @param _finalId final ID of the token to mint\\n   * @param _saleStart start of the sale, unix timestamp\\n   * @param _saleEnd end of the sale, unix timestamp\\n   * @param _batchLimit how many tokens is allowed to buy in a single transaction\\n   * @param _interval how often the price is reduced\\n   * @param _reduceBy how much to reduce price in every interval\\n   * @param _finalPrice price will not be reduced to less than final price\\n   */\\n  event Initialized(\\n    address indexed _by,\\n    uint64 _initialPrice,\\n    uint32 _nextId,\\n    uint32 _finalId,\\n    uint32 _saleStart,\\n    uint32 _saleEnd,\\n    uint32 _batchLimit,\\n    uint32 _limit,\\n    uint32 _interval,\\n    uint64 _reduceBy,\\n    uint64 _finalPrice\\n  );\\n\\n  /**\\n   * @dev Fired in buy(), buyTo(), buySingle(), and buySingleTo()\\n   *\\n   * @param _by an address which executed and payed the transaction, probably a buyer\\n   * @param _to an address which received token(s) minted\\n   * @param _amount number of tokens minted\\n   * @param _value ETH amount charged\\n   */\\n  event Bought(address indexed _by, address indexed _to, uint256 _amount, uint256 _value);\\n\\n  /**\\n   * @dev Fired in withdraw() and withdrawTo()\\n   *\\n   * @param _by an address which executed the withdrawal\\n   * @param _to an address which received the ETH withdrawn\\n   * @param _value ETH amount withdrawn\\n   */\\n  event Withdrawn(address indexed _by, address indexed _to, uint256 _value);\\n\\n  /**\\n   * @dev Creates/deploys MintableSale and binds it to Mintable ERC721\\n   *      smart contract on construction\\n   *\\n   * @param _tokenContract deployed Mintable ERC721 smart contract; sale will mint ERC721\\n   *      tokens of that type to the recipient\\n   */\\n  constructor(address _tokenContract) {\\n    // verify the input is set\\n    require(_tokenContract != address(0), \\\"token contract is not set\\\");\\n\\n    // verify input is valid smart contract of the expected interfaces\\n    require(\\n      IERC165(_tokenContract).supportsInterface(type(IMintableERC721).interfaceId)\\n      && IERC165(_tokenContract).supportsInterface(type(IMintableERC721).interfaceId),\\n      \\\"unexpected token contract type\\\"\\n    );\\n\\n    // assign the addresses\\n    tokenContract = _tokenContract;\\n  }\\n\\n  /**\\n   * @notice Number of tokens left on sale\\n   *\\n   * @dev Doesn't take into account if sale is active or not,\\n   *      if `nextId - finalId < 1` returns zero\\n   *\\n   * @return number of tokens left on sale\\n   */\\n  function itemsOnSale() public view returns(uint32) {\\n    // calculate items left on sale, taking into account that\\n    // finalId is on sale (inclusive bound)\\n    return finalId > nextId? finalId + 1 - nextId: 0;\\n  }\\n\\n  /**\\n   * @notice Number of tokens available on sale\\n   *\\n   * @dev Takes into account if sale is active or not, doesn't throw,\\n   *      returns zero if sale is inactive\\n   *\\n   * @return number of tokens available on sale\\n   */\\n  function itemsAvailable() public view returns(uint32) {\\n    // delegate to itemsOnSale() if sale is active, return zero otherwise\\n    return isActive()? itemsOnSale(): 0;\\n  }\\n\\n  /**\\n   * @notice Active sale is an operational sale capable of minting and selling tokens\\n   *\\n   * @dev The sale is active when all the requirements below are met:\\n   *      1. Price is set (`itemPrice` is not zero)\\n   *      2. `finalId` is not reached (`nextId <= finalId`)\\n   *      3. current timestamp is between `saleStart` (inclusive) and `saleEnd` (exclusive)\\n   *\\n   * @dev Function is marked as virtual to be overridden in the helper test smart contract (mock)\\n   *      in order to test how it affects the sale process\\n   *\\n   * @return true if sale is active (operational) and can sell tokens, false otherwise\\n   */\\n  function isActive() public view virtual returns(bool) {\\n    // evaluate sale state based on the internal state variables and return\\n    return initialPrice > 0 && nextId <= finalId && saleStart <= block.timestamp && saleEnd > block.timestamp;\\n  }\\n\\n  /**\\n   * @dev Restricted access function to set up sale parameters, all at once,\\n   *      or any subset of them\\n   *\\n   * @dev To skip parameter initialization, set it to `-1`,\\n   *      that is a maximum value for unsigned integer of the corresponding type;\\n   *      `_aliSource` and `_aliValue` must both be either set or skipped\\n   *\\n   * @dev Example: following initialization will update only _initialPrice and _batchLimit,\\n   *      leaving the rest of the fields unchanged\\n   *      initialize(\\n   *          100000000000000000,\\n   *          0xFFFFFFFF,\\n   *          0xFFFFFFFF,\\n   *          0xFFFFFFFF,\\n   *          0xFFFFFFFF,\\n   *          10,\\n   *          0xFFFFFFFF\\n   *      )\\n   *\\n   * @dev Requires next ID to be greater than zero (strict): `_nextId > 0`\\n   *\\n   * @dev Requires transaction sender to have `ROLE_SALE_MANAGER` role\\n   *\\n   * @param _initialPrice price of one token created at the start of the sale;\\n   *      setting the price to zero deactivates the sale\\n   * @param _nextId next ID of the token to mint, will be increased\\n   *      in smart contract storage after every successful buy\\n   * @param _finalId final ID of the token to mint; sale is capable of producing\\n   *      `_finalId - _nextId + 1` tokens\\n   * @param _saleStart start of the sale, unix timestamp\\n   * @param _saleEnd end of the sale, unix timestamp; sale is active only\\n   *      when current time is within _saleStart (inclusive) and _saleEnd (exclusive)\\n   * @param _batchLimit how many tokens is allowed to buy in a single transaction,\\n   *      set to zero to disable the limit\\n   * @param _mintLimit how many tokens is allowed to buy for the duration of the sale,\\n   *      set to zero to disable the limit\\n   * @param _interval how often to reduce the price\\n   * @param _reduceBy how much to reduce the price every interval\\n   * @param _finalPrice do not reduce reduce the price below final price\\n   */\\n  function initialize(\\n    uint64 _initialPrice,  // <<<--- keep type in sync with the body type(uint64).max !!!\\n    uint32 _nextId,  // <<<--- keep type in sync with the body type(uint32).max !!!\\n    uint32 _finalId,  // <<<--- keep type in sync with the body type(uint32).max !!!\\n    uint32 _saleStart,  // <<<--- keep type in sync with the body type(uint32).max !!!\\n    uint32 _saleEnd,  // <<<--- keep type in sync with the body type(uint32).max !!!\\n    uint32 _batchLimit,  // <<<--- keep type in sync with the body type(uint32).max !!!\\n    uint32 _mintLimit,  // <<<--- keep type in sync with the body type(uint32).max !!!\\n    uint32 _interval,  // <<<--- keep type in sync with the body type(uint32).max !!!\\n    uint64 _reduceBy,  // <<<--- keep type in sync with the body type(uint64).max !!!\\n    uint64 _finalPrice  // <<<--- keep type in sync with the body type(uint64).max !!!\\n  ) public onlyOwner {\\n    // verify the inputs\\n    require(_nextId > 0, \\\"zero nextId\\\");\\n\\n    // no need to verify extra parameters - \\\"incorrect\\\" values will deactivate the sale\\n\\n    // initialize contract state based on the values supplied\\n    // take into account our convention that value `-1` means \\\"do not set\\\"\\n    // 0xFFFFFFFFFFFFFFFF, 64 bits\\n    if(_initialPrice != type(uint64).max) {\\n      initialPrice = _initialPrice;\\n    }\\n    // 0xFFFFFFFF, 32 bits\\n    if(_nextId != type(uint32).max) {\\n      nextId = _nextId;\\n    }\\n    // 0xFFFFFFFF, 32 bits\\n    if(_finalId != type(uint32).max) {\\n      finalId = _finalId;\\n    }\\n    // 0xFFFFFFFF, 32 bits\\n    if(_saleStart != type(uint32).max) {\\n      saleStart = _saleStart;\\n    }\\n    // 0xFFFFFFFF, 32 bits\\n    if(_saleEnd != type(uint32).max) {\\n      saleEnd = _saleEnd;\\n    }\\n    // 0xFFFFFFFF, 32 bits\\n    if(_batchLimit != type(uint32).max) {\\n      batchLimit = _batchLimit;\\n    }\\n    // 0xFFFFFFFF, 32 bits\\n    if(_mintLimit != type(uint32).max) {\\n      mintLimit = _mintLimit;\\n    }\\n    // 0xFFFFFFFF, 32 bits\\n    if(_interval != type(uint32).max) {\\n      interval = _interval;\\n    }\\n    // 0xFFFFFFFFFFFFFFFF, 64 bits\\n    if(_reduceBy != type(uint64).max) {\\n      reduceBy = _reduceBy;\\n    }\\n    // 0xFFFFFFFFFFFFFFFF, 64 bits\\n    if(_finalPrice != type(uint64).max) {\\n      finalPrice = _finalPrice;\\n    }\\n\\n    // emit an event - read values from the storage since not all of them might be set\\n    emit Initialized(\\n      msg.sender,\\n      initialPrice,\\n      nextId,\\n      finalId,\\n      saleStart,\\n      saleEnd,\\n      batchLimit,\\n      mintLimit,\\n      interval,\\n      reduceBy,\\n      finalPrice\\n    );\\n  }\\n\\n  function itemPrice() public view returns (uint64) {\\n    uint64 reduction = (uint64(block.timestamp) - saleStart) / interval * reduceBy;\\n\\n    if(reduction > initialPrice || initialPrice - reduction < finalPrice) {\\n      return finalPrice;\\n    } else {\\n      return initialPrice - reduction;\\n    }\\n  }\\n\\n  /**\\n   * @notice Buys several (at least two) tokens in a batch.\\n   *      Accepts ETH as payment and mints a token\\n   *\\n   * @param _amount amount of tokens to create, two or more\\n   */\\n  function buy(uint32 _amount) public payable {\\n    // delegate to `buyTo` with the transaction sender set to be a recipient\\n    buyTo(msg.sender, _amount);\\n  }\\n\\n  /**\\n   * @notice Buys several (at least two) tokens in a batch to an address specified.\\n   *      Accepts ETH as payment and mints tokens\\n   *\\n   * @param _to address to mint tokens to\\n   * @param _amount amount of tokens to create, two or more\\n   */\\n  function buyTo(address _to, uint32 _amount) public payable {\\n    // calculate item price\\n    uint64 itemPrice = itemPrice();\\n\\n    // verify the inputs\\n    require(_to != address(0), \\\"recipient not set\\\");\\n    require(_amount > 1 && (batchLimit == 0 || _amount <= batchLimit), \\\"incorrect amount\\\");\\n\\n    // verify mint limit\\n    if(mintLimit != 0) {\\n      require(mints[msg.sender] + _amount <= mintLimit, \\\"mint limit reached\\\");\\n    }\\n\\n    // verify there is enough items available to buy the amount\\n    // verifies sale is in active state under the hood\\n    require(itemsAvailable() >= _amount, \\\"inactive sale or not enough items available\\\");\\n\\n    // calculate the total price required and validate the transaction value\\n    uint256 totalPrice = uint256(itemPrice) * _amount;\\n    require(msg.value >= totalPrice, \\\"not enough funds\\\");\\n\\n    // mint token to to the recipient\\n    IMintableERC721(tokenContract).mintBatch(_to, nextId, _amount);\\n\\n    // increment `nextId`\\n    nextId += _amount;\\n    // increment `soldCounter`\\n    soldCounter += _amount;\\n    // increment sender mints\\n    mints[msg.sender] += _amount;\\n\\n    // if ETH amount supplied exceeds the price\\n    if(msg.value > totalPrice) {\\n      // send excess amount back to sender\\n      payable(msg.sender).transfer(msg.value - totalPrice);\\n    }\\n\\n    // emit en event\\n    emit Bought(msg.sender, _to, _amount, totalPrice);\\n  }\\n\\n  /**\\n   * @notice Buys single token.\\n   *      Accepts ETH as payment and mints a token\\n   */\\n  function buySingle() public payable {\\n    // delegate to `buySingleTo` with the transaction sender set to be a recipient\\n    buySingleTo(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Buys single token to an address specified.\\n   *      Accepts ETH as payment and mints a token\\n   *\\n   * @param _to address to mint token to\\n   */\\n  function buySingleTo(address _to) public payable {\\n    // calculate item price\\n    uint64 itemPrice = itemPrice();\\n\\n    // verify the inputs and transaction value\\n    require(_to != address(0), \\\"recipient not set\\\");\\n    require(msg.value >= itemPrice, \\\"not enough funds\\\");\\n\\n    // verify mint limit\\n    if(mintLimit != 0) {\\n      require(mints[msg.sender] + 1 <= mintLimit, \\\"mint limit reached\\\");\\n    }\\n\\n    // verify sale is in active state\\n    require(isActive(), \\\"inactive sale\\\");\\n\\n    // mint token to the recipient\\n    IMintableERC721(tokenContract).mint(_to, nextId);\\n\\n    // increment `nextId`\\n    nextId++;\\n    // increment `soldCounter`\\n    soldCounter++;\\n    // increment sender mints\\n    mints[msg.sender]++;\\n\\n    // if ETH amount supplied exceeds the price\\n    if(msg.value > itemPrice) {\\n      // send excess amount back to sender\\n      payable(msg.sender).transfer(msg.value - itemPrice);\\n    }\\n\\n    // emit en event\\n    emit Bought(msg.sender, _to, 1, itemPrice);\\n  }\\n\\n  /**\\n   * @dev Restricted access function to withdraw ETH on the contract balance,\\n   *      sends ETH back to transaction sender\\n   */\\n  function withdraw() public {\\n    // delegate to `withdrawTo`\\n    withdrawTo(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Restricted access function to withdraw ETH on the contract balance,\\n   *      sends ETH to the address specified\\n   *\\n   * @param _to an address to send ETH to\\n   */\\n  function withdrawTo(address _to) public onlyOwner {\\n    // verify withdrawal address is set\\n    require(_to != address(0), \\\"address not set\\\");\\n\\n    // ETH value to send\\n    uint256 _value = address(this).balance;\\n\\n    // verify sale balance is positive (non-zero)\\n    require(_value > 0, \\\"zero balance\\\");\\n\\n    // send the entire balance to the transaction sender\\n    payable(_to).transfer(_value);\\n\\n    // emit en event\\n    emit Withdrawn(msg.sender, _to, _value);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintableERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IMintableERC721 {\\n\\t/**\\n\\t * @notice Checks if specified token exists\\n\\t *\\n\\t * @dev Returns whether the specified token ID has an ownership\\n\\t *      information associated with it\\n\\t *\\n\\t * @param _tokenId ID of the token to query existence for\\n\\t * @return whether the token exists (true - exists, false - doesn't exist)\\n\\t */\\n\\tfunction exists(uint256 _tokenId) external view returns(bool);\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Prefer the use of `saveMint` instead of `mint`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction mint(address _to, uint256 _tokenId) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Prefer the use of `saveMintBatch` instead of `mintBatch`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint tokens to\\n\\t * @param _tokenId ID of the first token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction mintBatch(address _to, uint256 _tokenId, uint256 n) external;\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId) external;\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId, bytes memory _data) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\n\\t */\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n, bytes memory _data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_initialPrice\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_nextId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_finalId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_saleStart\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_saleEnd\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_batchLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_limit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_interval\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_reduceBy\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_finalPrice\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"batchLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_amount\",\"type\":\"uint32\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySingle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"buySingleTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_amount\",\"type\":\"uint32\"}],\"name\":\"buyTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalPrice\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_initialPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_nextId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_finalId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_saleStart\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_saleEnd\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_batchLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_mintLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_interval\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_reduceBy\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_finalPrice\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemPrice\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemsAvailable\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemsOnSale\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reduceBy\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleEnd\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStart\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldCounter\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MintableDutchSale","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005bd9a16d955f1dcd4a160bc49eac1f12bba73676","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}