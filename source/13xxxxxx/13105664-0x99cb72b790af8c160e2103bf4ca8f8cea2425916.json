{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n pragma solidity 0.8.7;\r\n\r\ncontract MoonChadRoyalties {\r\n    uint256 private royalties = 0;\r\n    address payable public communityWalletAddress;\r\n    address[] private teamMembers;\r\n    mapping(address => uint256) private royaltiesShare;\r\n\r\n    modifier onlyMaintainer(address sender) {\r\n        require(\r\n            sender == teamMembers[0] || sender == teamMembers[1],\r\n            \"Caller must be a maintainer.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyProjectTeam(address sender) {\r\n        require(\r\n            sender == teamMembers[0] ||\r\n                sender == teamMembers[1] ||\r\n                sender == teamMembers[2],\r\n            \"Caller must be a project team member.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(address[] memory _teamMembers) payable {\r\n        // Set project variables\r\n        teamMembers = _teamMembers;\r\n        for (uint256 i = 0; i < _teamMembers.length; i++) {\r\n            address teamMember = _teamMembers[i];\r\n            royaltiesShare[teamMember] = 0;\r\n        }\r\n    }\r\n\r\n    fallback() external payable {}\r\n\r\n    receive() external payable {}\r\n\r\n    function splitRoyalties() public onlyMaintainer(msg.sender) {\r\n        uint256 existingRoyalties = 0;\r\n        for (uint256 i = 0; i < teamMembers.length; i++) {\r\n            address member = teamMembers[i];\r\n            existingRoyalties = existingRoyalties + royaltiesShare[member];\r\n        }\r\n\r\n        uint256 _unassignedRoyalties = address(this).balance -\r\n            existingRoyalties;\r\n\r\n        uint256 share = _unassignedRoyalties / 10;\r\n\r\n        uint256 artistShare = share * 5;\r\n        uint256 communityShare = share * 4;\r\n        uint256 projectTeamShare = share / 2;\r\n\r\n        royaltiesShare[teamMembers[0]] =\r\n            royaltiesShare[teamMembers[0]] +\r\n            projectTeamShare;\r\n        royaltiesShare[teamMembers[1]] =\r\n            royaltiesShare[teamMembers[1]] +\r\n            projectTeamShare;\r\n        royaltiesShare[teamMembers[2]] =\r\n            royaltiesShare[teamMembers[2]] +\r\n            artistShare;\r\n\r\n        (bool success, ) = communityWalletAddress.call{value: communityShare}(\r\n            \"\"\r\n        );\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n\r\n    function withdrawRoyalties() public onlyProjectTeam(msg.sender) {\r\n        require(\r\n            royaltiesShare[msg.sender] > 0,\r\n            \"The address has no project share to withdraw.\"\r\n        );\r\n\r\n        uint256 share = royaltiesShare[msg.sender];\r\n\r\n        royaltiesShare[msg.sender] = 0;\r\n\r\n        (bool success, ) = msg.sender.call{value: share}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n\r\n    function withdrawAll() public onlyMaintainer(msg.sender) {\r\n        require(address(this).balance > 0, \"Balance must be greater than 0\");\r\n        \r\n        royaltiesShare[teamMembers[0]] = 0;\r\n        royaltiesShare[teamMembers[1]] = 0;\r\n        royaltiesShare[teamMembers[2]] = 0;\r\n        \r\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n\r\n    function getShareBalance()\r\n        public\r\n        view\r\n        onlyProjectTeam(msg.sender)\r\n        returns (uint256)\r\n    {\r\n        return royaltiesShare[msg.sender];\r\n    }\r\n\r\n    function setCommunityWalletAddress(address payable _communityWalletAddress)\r\n        public\r\n        onlyMaintainer(msg.sender)\r\n    {\r\n        communityWalletAddress = _communityWalletAddress;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_teamMembers\",\"type\":\"address[]\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"communityWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShareBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_communityWalletAddress\",\"type\":\"address\"}],\"name\":\"setCommunityWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MoonChadRoyalties","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000002868a996089ebee1ed1d9e56a373398a907c2da30000000000000000000000000f97b0bd7ad496bc7e0c1d5a6712e9c4796eecb000000000000000000000000013ed5165fe0e32e0549b2abe7a96dbe99a36dd95","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3a0660abd5b8c9da501a7c26053890e31d4e861eaa39b3a2a7961fbc5d53a4b7"}]}