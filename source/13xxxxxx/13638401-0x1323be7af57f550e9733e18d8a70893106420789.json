{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/proposals/IncentiveUpdateExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport {DataTypes} from '../utils/DataTypes.sol';\\nimport {IAaveEcosystemReserveController} from '../interfaces/IAaveEcosystemReserveController.sol';\\nimport {IAaveIncentivesController} from '../interfaces/IAaveIncentivesController.sol';\\nimport {IATokenDetailed} from '../interfaces/IATokenDetailed.sol';\\nimport {ILendingPoolConfigurator} from '../interfaces/ILendingPoolConfigurator.sol';\\nimport {ILendingPoolData} from '../interfaces/ILendingPoolData.sol';\\n\\ncontract IncentiveUpdateExecutor {\\n\\n  address constant AAVE_TOKEN = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\\n  address constant CONTROLLER_ECO_RESERVE = 0x1E506cbb6721B83B1549fa1558332381Ffa61A93;\\n  address constant LENDING_POOL = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;\\n  address constant POOL_CONFIGURATOR = 0x311Bb771e4F8952E6Da169b425E7e92d6Ac45756;\\n  address constant INCENTIVES_CONTROLLER_PROXY_ADDRESS = 0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5;\\n\\n  uint256 constant DISTRIBUTION_DURATION = 7776000;   // 90 days\\n  uint256 constant DISTRIBUTION_AMOUNT = 138600 ether;\\n\\n  uint256 constant PROPOSER_GAS_REFUND = 70 ether;\\n  address constant PROPOSER_REFUND_ADDRESS = 0x6904110f17feD2162a11B5FA66B188d801443Ea4;\\n  \\n  function execute() external {\\n\\n    IAaveEcosystemReserveController ecosystemReserveController = IAaveEcosystemReserveController(CONTROLLER_ECO_RESERVE);\\n    IAaveIncentivesController incentivesController = IAaveIncentivesController(INCENTIVES_CONTROLLER_PROXY_ADDRESS);\\n    ILendingPoolConfigurator poolConfigurator = ILendingPoolConfigurator(POOL_CONFIGURATOR);\\n\\n    address payable[4] memory aTokens = [\\n      0x00c92Eb9eba1e4F90233B5e4c846A97dDACE0F5B,   // aDPI\\n      0xc84E16357b4204523a80E9e4c0cFc8f8EC1613d3,   // aBUSD\\n      0xB5AE2299c71aFFDc2dAd3B53974D56d5651FDD35,   // aFRAX\\n      0xd78037ED778ec3E2FCDb03B622c42d2F1B66D469    // aCRV\\n    ];\\n\\n    address payable[4] memory vDebtTokens = [\\n      address(0),                                   // vDebtDPI\\n      0xCFC5923024E782Cb2862520CCfFD48Ad24e7825a,   // vDebtBUSD\\n      0xc67c18F4620e003c78fd041Fb5172Cb20642FD47,   // vDebtFRAX\\n      address(0)                                    // vDebtCRV\\n    ];\\n\\n    address payable[20] memory reserves = [\\n      0x6B175474E89094C44Da98b954EedeAC495271d0F,   // DAI\\n      0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd,   // GUSD\\n      0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48,   // USDC\\n      0xdAC17F958D2ee523a2206206994597C13D831ec7,   // USDT\\n      0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599,   // WBTC\\n      0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,   // WETH\\n      0x514910771AF9Ca656af840dff83E8264EcF986CA,   // LINK\\n      0x57Ab1ec28D129707052df4dF418D58a2D46d5f51,   // sUSD\\n      0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e,   // YFI\\n      0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272,   // xSUSHI\\n      0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984,   // UNI\\n      0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2,   // MKR\\n      0x0000000000085d4780B73119b644AE5ecd22b376,   // TUSD\\n      0x03ab458634910AaD20eF5f1C8ee96F1D6ac54919,   // RAI\\n      0xba100000625a3754423978a60c9317c58a424e3D,   // BAL\\n      0x8E870D67F660D95d5be530380D0eC0bd388289E1,   // USDP\\n      0x853d955aCEf822Db058eb8505911ED77F175b99e,   // FRAX\\n      0x1494CA1F11D487c2bBe4543E90080AeBa4BA3C2b,   // DPI\\n      0x4Fabb145d64652a948d72533023f6E7A623C7C53,   // BUSD\\n      0xD533a949740bb3306d119CC777fa900bA034cd52    // CRV\\n    ];\\n\\n    uint256[] memory emissions = new uint256[](40);\\n\\n    emissions[0] = 1203204146880510;    // aDAI\\n    emissions[1] = 2406408293761020;    // vDebtDAI\\n    emissions[2] = 0;                   // aGUSD\\n    emissions[3] = 0;                   // vDebtGUSD\\n    emissions[4] = 2674448821531440;    // aUSDC\\n    emissions[5] = 5348897643062870;    // vDebtUSDC\\n    emissions[6] = 780295758620530;     // aUSDT\\n    emissions[7] = 1560591517241060;    // vDebtUSDT\\n    emissions[8] = 538517489758869;     // aWBTC\\n    emissions[9] = 0;                   // vDebtWBTC\\n    emissions[10] = 2061139949740800;   // aWETH\\n    emissions[11] = 0;                  // vDebtWETH\\n    emissions[12] = 473219265599667;    // aLINK\\n    emissions[13] = 0;                  // vDebtLINK\\n    emissions[14] = 35280089910759;     // aSUSD\\n    emissions[15] = 70560179821518;     // vDebtSUSD\\n    emissions[16] = 47620672711642;     // aYFI\\n    emissions[17] = 0;                  // vDebtYFI\\n    emissions[18] = 101144783834246;    // aXSUSHI\\n    emissions[19] = 0;                  // vDebtXSUSHI\\n    emissions[20] = 0;                  // aUNI\\n    emissions[21] = 0;                  // vDebtUNI\\n    emissions[22] = 128538286894602;    // aMKR\\n    emissions[23] = 0;                  // vDebtMKR\\n    emissions[24] = 49670888023944;     // aTUSD\\n    emissions[25] = 99341776047887;     // vDebtTUSD\\n    emissions[26] = 25422154944980;     // aRAI\\n    emissions[27] = 50844309889961;     // vDebtRAI\\n    emissions[28] = 13725047526598;     // aBAL\\n    emissions[29] = 0;                  // vDebtBAL\\n    emissions[30] = 9935368896023;      // aUSDP\\n    emissions[31] = 19870737792047;     // vDebtUSP\\n    emissions[32] = 5807544768359;      // aFRAX\\n    emissions[33] = 11615089536718;     // vDebtFRAX\\n    emissions[34] = 53890469813093;     // aDPI\\n    emissions[35] = 0;                  // vDebtDPI\\n    emissions[36] = 5176160414055;      // aBUSD\\n    emissions[37] = 10352320828111;     // vDebtBUSD\\n    emissions[38] = 37118390250968;     // aCRV\\n    emissions[39] = 0;                  // vDebtCRV\\n\\n    // Update aTokens and vDebtTokens\\n    for (uint256 i = 0; i < aTokens.length; i++) {\\n\\n      address underlying = IATokenDetailed(aTokens[i]).UNDERLYING_ASSET_ADDRESS();\\n      poolConfigurator.updateAToken(underlying, address(aTokens[i]));\\n\\n      if (vDebtTokens[i] != address(0)) {\\n        poolConfigurator.updateVariableDebtToken(underlying, address(vDebtTokens[i]));\\n      }\\n    }\\n\\n    address[] memory assets = new address[](40);\\n\\n    for (uint256 i = 0; i < reserves.length; i++) {\\n      DataTypes.ReserveData memory reserveData = ILendingPoolData(LENDING_POOL).getReserveData(reserves[i]);\\n\\n      assets[2*i] = reserveData.aTokenAddress;\\n      assets[2*i+1] = reserveData.variableDebtTokenAddress;\\n    }\\n\\n    // Transfer AAVE funds to the Incentives Controller\\n    ecosystemReserveController.transfer(\\n      AAVE_TOKEN,\\n      INCENTIVES_CONTROLLER_PROXY_ADDRESS,\\n      DISTRIBUTION_AMOUNT\\n    );\\n\\n    // Transfer AAVE funds to the proposer to reimburse gas costs\\n    ecosystemReserveController.transfer(\\n      AAVE_TOKEN,\\n      PROPOSER_REFUND_ADDRESS,\\n      PROPOSER_GAS_REFUND\\n    );\\n\\n    // Enable incentives in aTokens and Variable Debt tokens\\n    incentivesController.configureAssets(assets, emissions);\\n\\n    // Sets the end date for the distribution\\n    incentivesController.setDistributionEnd(block.timestamp + DISTRIBUTION_DURATION);\\n  }\\n}\"\r\n    },\r\n    \"contracts/utils/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAaveEcosystemReserveController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\ninterface IAaveEcosystemReserveController {\\n  function AAVE_RESERVE_ECOSYSTEM() external view returns (address);\\n\\n  function approve(\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  function owner() external view returns (address);\\n\\n  function renounceOwnership() external;\\n\\n  function transfer(\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAaveIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport {IAaveDistributionManager} from '../interfaces/IAaveDistributionManager.sol';\\n\\ninterface IAaveIncentivesController is IAaveDistributionManager {\\n  \\n  event RewardsAccrued(address indexed user, uint256 amount);\\n  \\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed to,\\n    address indexed claimer,\\n    uint256 amount\\n  );\\n\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n  function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond)\\n    external;\\n\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n  function handleAction(\\n    address asset,\\n    uint256 userBalance,\\n    uint256 totalSupply\\n  ) external;\\n\\n  /**\\n   * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(address[] calldata assets, address user)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n  /**\\n  * @dev for backward compatibility with previous implementation of the Incentives controller\\n  */\\n  function REWARD_TOKEN() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAaveDistributionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport {DistributionTypes} from '../lib/DistributionTypes.sol';\\n\\ninterface IAaveDistributionManager {\\n  \\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\\n  event AssetIndexUpdated(address indexed asset, uint256 index);\\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\n  event DistributionEndUpdated(uint256 newDistributionEnd);\\n\\n  /**\\n  * @dev Sets the end date for the distribution\\n  * @param distributionEnd The end date timestamp\\n  **/\\n  function setDistributionEnd(uint256 distributionEnd) external;\\n\\n  /**\\n  * @dev Gets the end date for the distribution\\n  * @return The end of the distribution\\n  **/\\n  function getDistributionEnd() external view returns (uint256);\\n\\n  /**\\n  * @dev for backwards compatibility with the previous DistributionManager used\\n  * @return The end of the distribution\\n  **/\\n  function DISTRIBUTION_END() external view returns(uint256);\\n\\n   /**\\n   * @dev Returns the data of an user on a distribution\\n   * @param user Address of the user\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The new index\\n   **/\\n   function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n   /**\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n   function getAssetData(address asset) external view returns (uint256, uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/DistributionTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nlibrary DistributionTypes {\\n  struct AssetConfigInput {\\n    uint104 emissionPerSecond;\\n    uint256 totalStaked;\\n    address underlyingAsset;\\n  }\\n\\n  struct UserStakeInput {\\n    address underlyingAsset;\\n    uint256 stakedByUser;\\n    uint256 totalStaked;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IATokenDetailed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\ninterface IATokenDetailed {\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolConfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\n\\ninterface ILendingPoolConfigurator {\\n  function updateAToken(address reserve, address implementation) external;\\n\\n  function updateVariableDebtToken(address reserve, address implementation) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport {DataTypes} from '../utils/DataTypes.sol';\\n\\ninterface ILendingPoolData {\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IncentiveUpdateExecutor","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}