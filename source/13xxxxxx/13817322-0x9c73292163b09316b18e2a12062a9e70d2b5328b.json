{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IERC721 {\r\n   \r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    \r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n}\r\n\r\ninterface IERC1155 {\r\n    \r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n    \r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    \r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    \r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\ncontract Disperse {\r\n    function disperseEther(address[] calldata recipients, uint256[] calldata values) external payable {\r\n        for (uint256 i = 0; i < recipients.length; i++)\r\n            payable(recipients[i]).transfer(values[i]);\r\n        uint256 balance = address(this).balance;\r\n        if (balance > 0)\r\n            payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    function disperseTokenERC20(IERC20 token, address[] calldata recipients, uint256[] calldata values) external {\r\n        uint256 total = 0;\r\n        for (uint256 i = 0; i < recipients.length; i++)\r\n            total += values[i];\r\n        require(token.transferFrom(msg.sender, address(this), total), \"ERC20: transfer caller is not approved\");\r\n        \r\n        for (uint256 i = 0; i < recipients.length; i++)\r\n            require(token.transfer(recipients[i], values[i]));\r\n    }\r\n\r\n    \r\n    function disperseTokenERC721(IERC721[] calldata tokens, address[] calldata recipients, uint256[] calldata tokenIds) external {\r\n        require(tokens.length == recipients.length, \"ERC721: tokens and recipients length mismatch\");\r\n        require(tokenIds.length == recipients.length, \"ERC721: recipients and tokenIds length mismatch\");\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++){\r\n            require(tokens[i].ownerOf(tokenIds[i]) == msg.sender, \"ERC721: transfer caller is not owner\");\r\n            require(tokens[i].isApprovedForAll(msg.sender, address(this)), \"ERC721: transfer caller is not approved\");\r\n        }\r\n            \r\n        for (uint256 i = 0; i < recipients.length; i++)\r\n            tokens[i].safeTransferFrom(msg.sender, recipients[i], tokenIds[i]);\r\n    }\r\n    \r\n    function disperseTokenERC1155(IERC1155[] calldata tokens, address[] calldata recipients, uint256[] calldata tokenIds, uint256[] calldata amounts, bytes[] calldata datas) external {\r\n        require(tokens.length == recipients.length, \"ERC1155: tokens and recipients length mismatch\");\r\n        require(tokenIds.length == recipients.length, \"ERC1155: tokens and recipients length mismatch\");\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++){\r\n            require(tokens[i].balanceOf(msg.sender,tokenIds[i]) >= amounts[i], \"ERC1155: insufficient balance for transfer\");\r\n            require(tokens[i].isApprovedForAll(msg.sender, address(this)), \"ERC1155: transfer caller is not approved\");\r\n        }\r\n            \r\n        for (uint256 i = 0; i < recipients.length; i++)\r\n            tokens[i].safeTransferFrom(msg.sender, recipients[i], tokenIds[i], amounts[i], datas[i]);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"disperseEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"disperseTokenERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"disperseTokenERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"disperseTokenERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Disperse","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1516344f37791df04b1283a3523e7621d116a197e2c2cebea928a42c2d039638"}]}