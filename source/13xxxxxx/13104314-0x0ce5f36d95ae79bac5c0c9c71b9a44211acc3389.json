{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.4.1 https://hardhat.org\r\n\r\n// File contracts/interfaces/IERC20Upgradeable.sol\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20Detailed.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Detailed {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ICurveFi.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ICurveFi {\r\n    function get_virtual_price() external returns (uint256 out);\r\n\r\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\r\n        external;\r\n\r\n    function add_liquidity(\r\n        // sBTC pool\r\n        uint256[3] calldata amounts,\r\n        uint256 min_mint_amount\r\n    ) external;\r\n\r\n    function add_liquidity(\r\n        // bUSD pool\r\n        uint256[4] calldata amounts,\r\n        uint256 min_mint_amount\r\n    ) external;\r\n\r\n    function get_dy(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx\r\n    ) external returns (uint256 out);\r\n\r\n    function get_dy_underlying(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx\r\n    ) external returns (uint256 out);\r\n\r\n    function exchange(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external;\r\n\r\n    function exchange(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 min_dy,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function exchange_underlying(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external;\r\n\r\n    function exchange_underlying(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 min_dy,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function remove_liquidity(\r\n        uint256 _amount,\r\n        uint256 deadline,\r\n        uint256[2] calldata min_amounts\r\n    ) external;\r\n\r\n    function remove_liquidity_imbalance(\r\n        uint256[2] calldata amounts,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function remove_liquidity_imbalance(\r\n        uint256[3] calldata amounts,\r\n        uint256 max_burn_amount\r\n    ) external;\r\n\r\n    function remove_liquidity(uint256 _amount, uint256[3] calldata amounts)\r\n        external;\r\n\r\n    function remove_liquidity_imbalance(\r\n        uint256[4] calldata amounts,\r\n        uint256 max_burn_amount\r\n    ) external;\r\n\r\n    function remove_liquidity(uint256 _amount, uint256[4] calldata amounts)\r\n        external;\r\n\r\n    function commit_new_parameters(\r\n        int128 amplification,\r\n        int128 new_fee,\r\n        int128 new_admin_fee\r\n    ) external;\r\n\r\n    function apply_new_parameters() external;\r\n\r\n    function revert_new_parameters() external;\r\n\r\n    function commit_transfer_ownership(address _owner) external;\r\n\r\n    function apply_transfer_ownership() external;\r\n\r\n    function revert_transfer_ownership() external;\r\n\r\n    function withdraw_admin_fees() external;\r\n\r\n    function coins(int128 arg0) external returns (address out);\r\n\r\n    function underlying_coins(int128 arg0) external returns (address out);\r\n\r\n    function balances(int128 arg0) external returns (uint256 out);\r\n\r\n    function A() external returns (int128 out);\r\n\r\n    function fee() external returns (int128 out);\r\n\r\n    function admin_fee() external returns (int128 out);\r\n\r\n    function owner() external returns (address out);\r\n\r\n    function admin_actions_deadline() external returns (uint256 out);\r\n\r\n    function transfer_ownership_deadline() external returns (uint256 out);\r\n\r\n    function future_A() external returns (int128 out);\r\n\r\n    function future_fee() external returns (int128 out);\r\n\r\n    function future_admin_fee() external returns (int128 out);\r\n\r\n    function future_owner() external returns (address out);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ICurveGauge.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ICurveGauge {\r\n    function deposit(uint256 _value) external;\r\n\r\n    function deposit(uint256 _value, address addr) external;\r\n\r\n    function balanceOf(address arg0) external view returns (uint256);\r\n\r\n    function withdraw(uint256 _value) external;\r\n\r\n    function withdraw(uint256 _value, bool claim_rewards) external;\r\n\r\n    function claim_rewards() external;\r\n\r\n    function claim_rewards(address addr) external;\r\n\r\n    function claimable_tokens(address addr) external returns (uint256);\r\n\r\n    function claimable_reward(address addr) external view returns (uint256);\r\n\r\n    function integrate_fraction(address arg0) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IUniswapRouterV2.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapRouterV2 {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IMintr.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IMintr {\r\n    function mint(address) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IConverter.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IConverter {\r\n    function convert(address) external returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IOneSplitAudit.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IOneSplitAudit {\r\n    function swap(\r\n        address fromToken,\r\n        address destToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        uint256[] calldata distribution,\r\n        uint256 flags\r\n    ) external payable returns (uint256 returnAmount);\r\n\r\n    function getExpectedReturn(\r\n        address fromToken,\r\n        address destToken,\r\n        uint256 amount,\r\n        uint256 parts,\r\n        uint256 flags // See constants in IOneSplit.sol\r\n    ) external view returns (uint256 returnAmount, uint256[] memory distribution);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IController.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IController {\r\n    function withdraw(address, uint256) external;\r\n\r\n    function strategies(address) external view returns (address);\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function earn(address, uint256) external;\r\n\r\n    function want(address) external view returns (address);\r\n\r\n    function rewards() external view returns (address);\r\n\r\n    function vaults(address) external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IStrategy.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IStrategy {\r\n    function want() external view returns (address);\r\n\r\n    function deposit() external;\r\n\r\n    // NOTE: must exclude any tokens used in the yield\r\n    // Controller role - withdraw should return to Controller\r\n    function withdrawOther(address) external returns (uint256 balance);\r\n\r\n    // Controller | Vault role - withdraw should always return to Vault\r\n    function withdraw(uint256) external;\r\n\r\n    // Controller | Vault role - withdraw should always return to Vault\r\n    function withdrawAll() external returns (uint256);\r\n\r\n    function balanceOf() external view returns (uint256);\r\n\r\n    function getName() external pure returns (string memory);\r\n\r\n    function setStrategist(address _strategist) external;\r\n\r\n    function setWithdrawalFee(uint256 _withdrawalFee) external;\r\n\r\n    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist) external;\r\n\r\n    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance) external;\r\n\r\n    function setGovernance(address _governance) external;\r\n\r\n    function setController(address _controller) external;\r\n}\r\n\r\n\r\n// File contracts/upgrades/SafeMathUpgradeable.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/upgrades/AddressUpgradeable.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [// importANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * // importANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/upgrades/SafeERC20Upgradeable.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/upgrades/Initializable.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n * \r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n * \r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { cs := extcodesize(self) }\r\n        return cs == 0;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/upgrades/ContextUpgradeable.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/upgrades/ERC20Upgradeable.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using AddressUpgradeable for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name, symbol);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n    uint256[44] private __gap;\r\n}\r\n\r\n\r\n// File contracts/upgrades/OwnableUpgradeable.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/upgrades/PausableUpgradeable.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal initializer {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/QuaiAccessControl.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n/*\r\n    Common base for permissioned roles throughout QUAI ecosystem\r\n*/\r\ncontract QuaiAccessControl is Initializable {\r\n    address public governance;\r\n    address public strategist;\r\n    address public keeper;\r\n\r\n    // ===== MODIFIERS =====\r\n    function _onlyGovernance() internal view {\r\n        require(msg.sender == governance, \"onlyGovernance\");\r\n    }\r\n\r\n    function _onlyGovernanceOrStrategist() internal view {\r\n        require(msg.sender == strategist || msg.sender == governance, \"onlyGovernanceOrStrategist\");\r\n    }\r\n\r\n    function _onlyAuthorizedActors() internal view {\r\n        require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance, \"onlyAuthorizedActors\");\r\n    }\r\n\r\n    // ===== PERMISSIONED ACTIONS =====\r\n\r\n    /// @notice Change strategist address\r\n    /// @notice Can only be changed by governance itself\r\n    function setStrategist(address _strategist) external {\r\n        _onlyGovernance();\r\n        strategist = _strategist;\r\n    }\r\n\r\n    /// @notice Change keeper address\r\n    /// @notice Can only be changed by governance itself\r\n    function setKeeper(address _keeper) external {\r\n        _onlyGovernance();\r\n        keeper = _keeper;\r\n    }\r\n\r\n    /// @notice Change governance address\r\n    /// @notice Can only be changed by governance itself\r\n    function setGovernance(address _governance) public {\r\n        _onlyGovernance();\r\n        governance = _governance;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/QuaiAccessControlDefended.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n/*\r\n    Add ability to prevent unwanted contract access to Vault permissions\r\n*/\r\ncontract QuaiAccessControlDefended is QuaiAccessControl {\r\n    mapping (address => bool) public approved;\r\n\r\n    function approveContractAccess(address account) external {\r\n        _onlyGovernance();\r\n        approved[account] = true;\r\n    }\r\n\r\n    function revokeContractAccess(address account) external {\r\n        _onlyGovernance();\r\n        approved[account] = false;\r\n    }\r\n\r\n    function _defend() internal view returns (bool) {\r\n        require(approved[msg.sender] || msg.sender == tx.origin, \"Access denied for caller\");\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/BaseStrategy.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract BaseStrategy is PausableUpgradeable, QuaiAccessControl {\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n    using AddressUpgradeable for address;\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    event Withdraw(uint256 amount);\r\n    event WithdrawAll(uint256 balance);\r\n    event WithdrawOther(address token, uint256 amount);\r\n    event SetStrategist(address strategist);\r\n    event SetGovernance(address governance);\r\n    event SetController(address controller);\r\n    event SetWithdrawalFee(uint256 withdrawalFee);\r\n    event SetPerformanceFeeStrategist(uint256 performanceFeeStrategist);\r\n    event SetPerformanceFeeGovernance(uint256 performanceFeeGovernance);\r\n    event Harvest(uint256 harvested, uint256 indexed blockNumber);\r\n    event Tend(uint256 tended);\r\n\r\n    address public want; // Want: Curve.fi renBTC/wBTC (crvRenWBTC) LP token 0x49849C98ae39Fff122806C06791Fa73784FB3675\r\n\r\n    uint256 public performanceFeeGovernance; //1000\r\n    uint256 public performanceFeeStrategist; //1000\r\n    uint256 public withdrawalFee; //50\r\n\r\n    uint256 public constant MAX_FEE = 10000;\r\n    address public constant uniswap = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // Uniswap Dex\r\n\r\n    address public controller;\r\n    address public guardian;\r\n\r\n    function __BaseStrategy_init(\r\n        address _governance,\r\n        address _strategist,\r\n        address _controller,\r\n        address _keeper,\r\n        address _guardian\r\n    ) public initializer {\r\n        __Pausable_init();\r\n        governance = _governance;\r\n        strategist = _strategist;\r\n        keeper = _keeper;\r\n        controller = _controller;\r\n        guardian = _guardian;\r\n    }\r\n\r\n    // ===== Modifiers =====\r\n\r\n    function _onlyController() internal view {\r\n        require(msg.sender == controller, \"onlyController\");\r\n    }\r\n\r\n    function _onlyAuthorizedActorsOrController() internal view {\r\n        require(\r\n            msg.sender == keeper || msg.sender == strategist || msg.sender == governance || msg.sender == controller,\r\n            \"onlyAuthorizedActorsOrController\"\r\n        );\r\n    }\r\n\r\n    function _onlyAuthorizedPausers() internal view {\r\n        require(msg.sender == guardian || msg.sender == strategist || msg.sender == governance, \"onlyPausers\");\r\n    }\r\n\r\n    /// ===== View Functions =====\r\n\r\n    /// @notice Get the balance of want held idle in the Strategy\r\n    function balanceOfWant() public view returns (uint256) {\r\n        return IERC20Upgradeable(want).balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice Get the total balance of want realized in the strategy, whether idle or active in Strategy positions.\r\n    function balanceOf() public virtual view returns (uint256) {\r\n        return balanceOfWant().add(balanceOfPool());\r\n    }\r\n\r\n    function isTendable() public virtual pure returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /// ===== Permissioned Actions: Governance =====\r\n\r\n    function setGuardian(address _guardian) external {\r\n        _onlyGovernance();\r\n        guardian = _guardian;\r\n    }\r\n\r\n    function setWithdrawalFee(uint256 _withdrawalFee) external {\r\n        _onlyGovernance();\r\n        withdrawalFee = _withdrawalFee;\r\n    }\r\n\r\n    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist) external {\r\n        _onlyGovernance();\r\n        performanceFeeStrategist = _performanceFeeStrategist;\r\n    }\r\n\r\n    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance) external {\r\n        _onlyGovernance();\r\n        performanceFeeGovernance = _performanceFeeGovernance;\r\n    }\r\n\r\n    function setController(address _controller) external {\r\n        _onlyGovernance();\r\n        controller = _controller;\r\n    }\r\n\r\n    function deposit() public virtual whenNotPaused {\r\n        _onlyAuthorizedActorsOrController();\r\n        uint256 _want = IERC20Upgradeable(want).balanceOf(address(this));\r\n        if (_want > 0) {\r\n            _deposit(_want);\r\n        }\r\n        _postDeposit();\r\n    }\r\n\r\n    // ===== Permissioned Actions: Controller =====\r\n\r\n    /// @notice Withdraw all funds, normally used when migrating strategies\r\n    function withdrawAll() external virtual whenNotPaused returns (uint256)\r\n     {\r\n        _onlyController();\r\n\r\n        _withdrawAll();\r\n\r\n        _transferToVault(IERC20Upgradeable(want).balanceOf(address(this)));\r\n    }\r\n\r\n    /// @notice Controller-only function to Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint256 _amount) external virtual whenNotPaused {\r\n        _onlyController();\r\n\r\n        uint256 _balance = IERC20Upgradeable(want).balanceOf(address(this));\r\n\r\n        // Withdraw some from activities if idle want is not sufficient to cover withdrawal\r\n        if (_balance < _amount) {\r\n            _amount = _withdrawSome(_amount.sub(_balance));\r\n            _amount = _amount.add(_balance);\r\n        }\r\n\r\n        // Process withdrawal fee\r\n        uint256 _fee = _processWithdrawalFee(_amount);\r\n\r\n        // Transfer remaining to Vault to handle withdrawal\r\n        _transferToVault(_amount.sub(_fee));\r\n    }\r\n\r\n    // NOTE: must exclude any tokens used in the yield\r\n    // Controller role - withdraw should return to Controller\r\n    function withdrawOther(address _asset) external virtual whenNotPaused returns (uint256 balance) {\r\n        _onlyController();\r\n        _onlyNotProtectedTokens(_asset);\r\n\r\n        balance = IERC20Upgradeable(_asset).balanceOf(address(this));\r\n        IERC20Upgradeable(_asset).safeTransfer(controller, balance);\r\n    }\r\n\r\n    /// ===== Permissioned Actions: Authoized Contract Pausers =====\r\n\r\n    function pause() external {\r\n        _onlyAuthorizedPausers();\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external {\r\n        _onlyAuthorizedPausers();\r\n        _unpause();\r\n    }\r\n\r\n    /// ===== Internal Helper Functions =====\r\n\r\n    /// @notice If withdrawal fee is active, take the appropriate amount from the given value and transfer to rewards recipient\r\n    /// @return The withdrawal fee that was taken\r\n    function _processWithdrawalFee(uint256 _amount) internal returns (uint256) {\r\n        if (withdrawalFee == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 fee = _amount.mul(withdrawalFee).div(MAX_FEE);\r\n        IERC20Upgradeable(want).safeTransfer(IController(controller).rewards(), fee);\r\n        return fee;\r\n    }\r\n\r\n    /// @dev Helper function to process an arbitrary fee\r\n    /// @dev If the fee is active, transfers a given portion in basis points of the specified value to the recipient\r\n    /// @return The fee that was taken\r\n    function _processFee(\r\n        address token,\r\n        uint256 amount,\r\n        uint256 feeBps,\r\n        address recipient\r\n    ) internal returns (uint256) {\r\n        if (feeBps == 0) {\r\n            return 0;\r\n        }\r\n        uint256 fee = amount.mul(feeBps).div(MAX_FEE);\r\n        IERC20Upgradeable(token).safeTransfer(recipient, fee);\r\n        return fee;\r\n    }\r\n\r\n    /// @dev Reset approval and approve exact amount\r\n    function _safeApproveHelper(\r\n        address token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        IERC20Upgradeable(token).safeApprove(recipient, 0);\r\n        IERC20Upgradeable(token).safeApprove(recipient, amount);\r\n    }\r\n\r\n    function _transferToVault(uint256 _amount) internal {\r\n        address _vault = IController(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20Upgradeable(want).safeTransfer(_vault, _amount);\r\n    }\r\n\r\n    /// @notice Swap specified balance of given token on Uniswap with given path\r\n    function _swap(\r\n        address startToken,\r\n        uint256 balance,\r\n        address[] memory path\r\n    ) internal {\r\n        _safeApproveHelper(startToken, uniswap, balance);\r\n        IUniswapRouterV2(uniswap).swapExactTokensForTokens(balance, 0, path, address(this), now);\r\n    }\r\n\r\n    function _swapEthIn(\r\n        uint256 balance,\r\n        address[] memory path\r\n    ) internal {\r\n        IUniswapRouterV2(uniswap).swapExactETHForTokens{value: balance}(0, path, address(this), now);\r\n    }\r\n\r\n    function _swapEthOut(\r\n        address startToken,\r\n        uint256 balance,\r\n        address[] memory path\r\n    ) internal {\r\n        _safeApproveHelper(startToken, uniswap, balance);\r\n        IUniswapRouterV2(uniswap).swapExactTokensForETH(balance, 0, path, address(this), now);\r\n    }\r\n\r\n    /// @notice Add liquidity to uniswap for specified token pair, utilizing the maximum balance possible\r\n    function _add_max_liquidity_uniswap(address token0, address token1) internal {\r\n        uint256 _token0Balance = IERC20Upgradeable(token0).balanceOf(address(this));\r\n        uint256 _token1Balance = IERC20Upgradeable(token1).balanceOf(address(this));\r\n\r\n        _safeApproveHelper(token0, uniswap, _token0Balance);\r\n        _safeApproveHelper(token1, uniswap, _token1Balance);\r\n\r\n        IUniswapRouterV2(uniswap).addLiquidity(\r\n            token0,\r\n            token1,\r\n            _token0Balance,\r\n            _token1Balance,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // ===== Abstract Functions: To be implemented by specific Strategies =====\r\n\r\n    /// @dev Internal deposit logic to be implemented by Stratgies\r\n    function _deposit(uint256 _want) internal virtual;\r\n\r\n    function _postDeposit() internal virtual {\r\n        //no-op by default\r\n    }\r\n\r\n    /// @notice Specify tokens used in yield process, should not be available to withdraw via withdrawOther()\r\n    function _onlyNotProtectedTokens(address _asset) internal virtual;\r\n\r\n    function getProtectedTokens() external view virtual returns (address[] memory);\r\n\r\n    /// @dev Internal logic for strategy migration. Should exit positions as efficiently as possible\r\n    function _withdrawAll() internal virtual;\r\n\r\n    /// @dev Internal logic for partial withdrawals. Should exit positions as efficiently as possible.\r\n    /// @dev The withdraw() function shell automatically uses idle want in the strategy before attempting to withdraw more using this\r\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\r\n\r\n    /// @dev Realize returns from positions\r\n    /// @dev Returns can be reinvested into positions, or distributed in another fashion\r\n    /// @dev Performance fees should also be implemented in this function\r\n    /// @dev Override function stub is removed as each strategy can have it's own return signature for STATICCALL\r\n    // function harvest() external virtual;\r\n\r\n    /// @dev User-friendly name for this strategy for purposes of convenient reading\r\n    function getName() external virtual pure returns (string memory);\r\n\r\n    /// @dev Balance of want currently held in strategy positions\r\n    function balanceOfPool() public virtual view returns (uint256);\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/StrategyCurveGaugeBase.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\ncontract StrategyCurveGaugeBase is BaseStrategy {\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n    using AddressUpgradeable for address;\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    address public gauge; // Curve renBtc Gauge\r\n    address public mintr; // Curve CRV Minter\r\n    address public curveSwap; // Curve renBtc Swap\r\n    address public lpComponent; // renBTC for renCrv and sCrv\r\n\r\n    address public constant crv = 0xD533a949740bb3306d119CC777fa900bA034cd52; // CRV token\r\n    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // Weth Token, used for crv <> weth <> wbtc route\r\n    address public constant wbtc = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599; // Wbtc Token\r\n    address public constant renbtc = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D; // renBTC token\r\n\r\n    uint256 public keepCRV;\r\n\r\n    event CurveHarvest(\r\n        uint256 crvHarvested,\r\n        uint256 keepCrv,\r\n        uint256 crvRecycled,\r\n        uint256 lpComponentDeposited,\r\n        uint256 wantProcessed,\r\n        uint256 wantDeposited,\r\n        uint256 governancePerformanceFee,\r\n        uint256 strategistPerformanceFee\r\n    );\r\n\r\n    struct HarvestData {\r\n        uint256 crvHarvested;\r\n        uint256 keepCrv;\r\n        uint256 crvRecycled;\r\n        uint256 lpComponentDeposited;\r\n        uint256 wantProcessed;\r\n        uint256 wantDeposited;\r\n        uint256 governancePerformanceFee;\r\n        uint256 strategistPerformanceFee;\r\n    }\r\n\r\n    function initialize(\r\n        address _governance,\r\n        address _strategist,\r\n        address _controller,\r\n        address _keeper,\r\n        address _guardian,\r\n        address[5] memory _wantConfig,\r\n        uint256[4] memory _feeConfig\r\n    ) public initializer {\r\n        __BaseStrategy_init(_governance, _strategist, _controller, _keeper, _guardian);\r\n\r\n        want = _wantConfig[0];\r\n        gauge = _wantConfig[1];\r\n        mintr = _wantConfig[2];\r\n        curveSwap = _wantConfig[3];\r\n        lpComponent = _wantConfig[4];\r\n\r\n        performanceFeeGovernance = _feeConfig[0]; //1000\r\n        performanceFeeStrategist = _feeConfig[1]; //1000\r\n        withdrawalFee = _feeConfig[2]; //50\r\n        keepCRV = _feeConfig[3]; // 0\r\n\r\n        IERC20Upgradeable(want).safeApprove(gauge, type(uint256).max);\r\n    }\r\n\r\n    /// ===== View Functions =====\r\n\r\n    function getName() external override pure returns (string memory) {\r\n        return \"StrategyCurveGauge\";\r\n    }\r\n\r\n    function balanceOfPool() public override view returns (uint256) {\r\n        return ICurveGauge(gauge).balanceOf(address(this));\r\n    }\r\n\r\n    function getProtectedTokens() external view override returns (address[] memory) {\r\n        address[] memory protectedTokens = new address[](3);\r\n        protectedTokens[0] = want;\r\n        protectedTokens[1] = lpComponent;\r\n        protectedTokens[2] = crv;\r\n        return protectedTokens;\r\n    }\r\n\r\n    /// ===== Permissioned Actions: Governance =====\r\n    function setKeepCRV(uint256 _keepCRV) external {\r\n        _onlyGovernance();\r\n        keepCRV = _keepCRV;\r\n    }\r\n\r\n    /// ===== Internal Core Implementations =====\r\n\r\n    function _onlyNotProtectedTokens(address _asset) internal override {\r\n        require(address(want) != _asset, \"want\");\r\n        require(lpComponent != _asset, \"lpComponent\");\r\n        require(crv != _asset, \"crv\");\r\n    }\r\n\r\n    function _deposit(uint256 _want) internal override {\r\n        ICurveGauge(gauge).deposit(_want);\r\n    }\r\n\r\n    function _withdrawAll() internal override {\r\n        ICurveGauge(gauge).withdraw(ICurveGauge(gauge).balanceOf(address(this)));\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal override returns (uint256) {\r\n        ICurveGauge(gauge).withdraw(_amount);\r\n        return _amount;\r\n    }\r\n\r\n    /// @notice Harvest from strategy mechanics, realizing increase in underlying position\r\n    function harvest() external whenNotPaused returns (HarvestData memory) {\r\n        _onlyAuthorizedActors();\r\n\r\n        HarvestData memory harvestData;\r\n\r\n        uint256 _before = IERC20Upgradeable(want).balanceOf(address(this));\r\n        uint256 _beforeCrv = IERC20Upgradeable(crv).balanceOf(address(this));\r\n\r\n        // Harvest from Gauge\r\n        IMintr(mintr).mint(address(gauge));\r\n        uint256 _afterCrv = IERC20Upgradeable(crv).balanceOf(address(this));\r\n\r\n        harvestData.crvHarvested = _afterCrv.sub(_beforeCrv);\r\n        uint256 _crv = _afterCrv;\r\n\r\n        // Transfer CRV to keep to Rewards\r\n        harvestData.keepCrv = _crv.mul(keepCRV).div(MAX_FEE);\r\n        if (harvestData.keepCrv > 0) {\r\n            IERC20Upgradeable(crv).safeTransfer(IController(controller).rewards(), harvestData.keepCrv);\r\n        }\r\n\r\n        harvestData.crvRecycled = _crv.sub(harvestData.keepCrv);\r\n\r\n        // Convert remaining CRV to lpComponent\r\n        if (harvestData.crvRecycled > 0) {\r\n            address[] memory path = new address[](3);\r\n            path[0] = crv;\r\n            path[1] = weth;\r\n            path[2] = lpComponent;\r\n            _swap(crv, harvestData.crvRecycled, path);\r\n        }\r\n\r\n        // Deposit into Curve to increase LP position\r\n        harvestData.lpComponentDeposited = IERC20Upgradeable(lpComponent).balanceOf(address(this));\r\n        if (harvestData.lpComponentDeposited > 0) {\r\n            _safeApproveHelper(lpComponent, curveSwap, harvestData.lpComponentDeposited);\r\n            _add_liquidity_curve(harvestData.lpComponentDeposited);\r\n        }\r\n\r\n        // Take fees from want increase and deposit remaining into Gauge\r\n        harvestData.wantProcessed = (IERC20Upgradeable(want).balanceOf(address(this))).sub(_before);\r\n        if (harvestData.wantProcessed > 0) {\r\n\r\n            harvestData.governancePerformanceFee = _processFee(\r\n                want,\r\n                harvestData.wantProcessed,\r\n                performanceFeeGovernance,\r\n                IController(controller).rewards()\r\n            );\r\n\r\n            harvestData.strategistPerformanceFee = _processFee(want, harvestData.wantProcessed, performanceFeeStrategist, strategist);\r\n\r\n            harvestData.wantDeposited = IERC20Upgradeable(want).balanceOf(address(this));\r\n\r\n            if (harvestData.wantDeposited > 0) {\r\n                _deposit(harvestData.wantDeposited);\r\n            }\r\n        }\r\n        emit CurveHarvest(\r\n            harvestData.crvHarvested,\r\n            harvestData.keepCrv,\r\n            harvestData.crvRecycled,\r\n            harvestData.lpComponentDeposited,\r\n            harvestData.wantProcessed,\r\n            harvestData.wantDeposited,\r\n            harvestData.governancePerformanceFee,\r\n            harvestData.strategistPerformanceFee\r\n        );\r\n        emit Harvest(harvestData.wantProcessed, block.number);\r\n    }\r\n\r\n    /// ===== Internal Helper Functions =====\r\n\r\n    /// @dev Handle the particular function variant for CurveSwap\r\n    function _add_liquidity_curve(uint256 _amount) internal virtual {\r\n        // e.g. ICurveFi(curveSwap).add_liquidity([0, _amount, 0], 0);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/StrategyCurveGaugeRenBtcCrv.sol\r\n\r\npragma solidity =0.6.12;\r\n\r\n/*\r\n    //address[5] memory _wantConfig\r\n    //want = 0x49849C98ae39Fff122806C06791Fa73784FB3675 (crvRenWBTC)\r\n    //gauge = 0xB1F2cdeC61db658F091671F5f199635aEF202CAC renCRV Gauge\r\n    //mintr = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0 Curve minter\r\n    //curveSwap = 0x93054188d876f558f4a66B2EF1d97d16eDf0895B Curve REN Swap\r\n    //lpComponent = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D renBTC\r\n*/\r\n\r\ncontract StrategyCurveGaugeRenBtcCrv is StrategyCurveGaugeBase {\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n    using AddressUpgradeable for address;\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    /// ===== Internal Helper Functions =====\r\n    /// @dev Expects lpComponent to be renBTC\r\n    function _add_liquidity_curve (uint256 _amount) internal override {\r\n        ICurveFi(curveSwap).add_liquidity([_amount, 0], 0);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"crvHarvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keepCrv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"crvRecycled\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpComponentDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantProcessed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"governancePerformanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategistPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"CurveHarvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvested\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"SetGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFeeGovernance\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFeeGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFeeStrategist\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFeeStrategist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"}],\"name\":\"SetStrategist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tended\",\"type\":\"uint256\"}],\"name\":\"Tend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WithdrawAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawOther\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"__BaseStrategy_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtectedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"crvHarvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keepCrv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crvRecycled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpComponentDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantProcessed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"governancePerformanceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strategistPerformanceFee\",\"type\":\"uint256\"}],\"internalType\":\"struct StrategyCurveGaugeBase.HarvestData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"address[5]\",\"name\":\"_wantConfig\",\"type\":\"address[5]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_feeConfig\",\"type\":\"uint256[4]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTendable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepCRV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpComponent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeGovernance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeStrategist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keepCRV\",\"type\":\"uint256\"}],\"name\":\"setKeepCRV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFeeGovernance\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFeeStrategist\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdrawOther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StrategyCurveGaugeRenBtcCrv","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4fa3162fc25c6a3a571522f59de7a5d7195fbedad7bc805bdcdb06c290632f88"}]}