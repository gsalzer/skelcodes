{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/contract/RocketBase.sol\": {\r\n      \"content\": \"/**\\r\\n  *       .\\r\\n  *      / \\\\\\r\\n  *     |.'.|\\r\\n  *     |'.'|\\r\\n  *   ,'|   |`.\\r\\n  *  |,-'-|-'-.|\\r\\n  *   __|_| |         _        _      _____           _\\r\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n  * +---------------------------------------------------+\\r\\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\\r\\n  * +---------------------------------------------------+\\r\\n  *\\r\\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\\r\\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\\r\\n  *\\r\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n  *\\r\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\r\\n  *\\r\\n  */\\r\\n\\r\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../interface/RocketStorageInterface.sol\\\";\\n\\n/// @title Base settings / modifiers for each contract in Rocket Pool\\n/// @author David Rugendyke\\n\\nabstract contract RocketBase {\\n\\n    // Calculate using this as the base\\n    uint256 constant calcBase = 1 ether;\\n\\n    // Version of the contract\\n    uint8 public version;\\n\\n    // The main storage contract where primary persistant storage is maintained\\n    RocketStorageInterface rocketStorage = RocketStorageInterface(0);\\n\\n\\n    /*** Modifiers **********************************************************/\\n\\n    /**\\n    * @dev Throws if called by any sender that doesn't match a Rocket Pool network contract\\n    */\\n    modifier onlyLatestNetworkContract() {\\n        require(getBool(keccak256(abi.encodePacked(\\\"contract.exists\\\", msg.sender))), \\\"Invalid or outdated network contract\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that doesn't match one of the supplied contract or is the latest version of that contract\\n    */\\n    modifier onlyLatestContract(string memory _contractName, address _contractAddress) {\\n        require(_contractAddress == getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName))), \\\"Invalid or outdated contract\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a registered node\\n    */\\n    modifier onlyRegisteredNode(address _nodeAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"node.exists\\\", _nodeAddress))), \\\"Invalid node\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a trusted node DAO member\\n    */\\n    modifier onlyTrustedNode(address _nodeAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"dao.trustednodes.\\\", \\\"member\\\", _nodeAddress))), \\\"Invalid trusted node\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any sender that isn't a registered minipool\\n    */\\n    modifier onlyRegisteredMinipool(address _minipoolAddress) {\\n        require(getBool(keccak256(abi.encodePacked(\\\"minipool.exists\\\", _minipoolAddress))), \\\"Invalid minipool\\\");\\n        _;\\n    }\\n    \\n\\n    /**\\n    * @dev Throws if called by any account other than a guardian account (temporary account allowed access to settings before DAO is fully enabled)\\n    */\\n    modifier onlyGuardian() {\\n        require(msg.sender == rocketStorage.getGuardian(), \\\"Account is not a temporary guardian\\\");\\n        _;\\n    }\\n\\n\\n\\n\\n    /*** Methods **********************************************************/\\n\\n    /// @dev Set the main Rocket Storage address\\n    constructor(RocketStorageInterface _rocketStorageAddress) {\\n        // Update the contract address\\n        rocketStorage = RocketStorageInterface(_rocketStorageAddress);\\n    }\\n\\n\\n    /// @dev Get the address of a network contract by name\\n    function getContractAddress(string memory _contractName) internal view returns (address) {\\n        // Get the current contract address\\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName)));\\n        // Check it\\n        require(contractAddress != address(0x0), \\\"Contract not found\\\");\\n        // Return\\n        return contractAddress;\\n    }\\n\\n\\n    /// @dev Get the address of a network contract by name (returns address(0x0) instead of reverting if contract does not exist)\\n    function getContractAddressUnsafe(string memory _contractName) internal view returns (address) {\\n        // Get the current contract address\\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", _contractName)));\\n        // Return\\n        return contractAddress;\\n    }\\n\\n\\n    /// @dev Get the name of a network contract by address\\n    function getContractName(address _contractAddress) internal view returns (string memory) {\\n        // Get the contract name\\n        string memory contractName = getString(keccak256(abi.encodePacked(\\\"contract.name\\\", _contractAddress)));\\n        // Check it\\n        require(bytes(contractName).length > 0, \\\"Contract not found\\\");\\n        // Return\\n        return contractName;\\n    }\\n\\n    /// @dev Get revert error message from a .call method\\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n\\n\\n    /*** Rocket Storage Methods ****************************************/\\n\\n    // Note: Unused helpers have been removed to keep contract sizes down\\n\\n    /// @dev Storage get methods\\n    function getAddress(bytes32 _key) internal view returns (address) { return rocketStorage.getAddress(_key); }\\n    function getUint(bytes32 _key) internal view returns (uint) { return rocketStorage.getUint(_key); }\\n    function getString(bytes32 _key) internal view returns (string memory) { return rocketStorage.getString(_key); }\\n    function getBytes(bytes32 _key) internal view returns (bytes memory) { return rocketStorage.getBytes(_key); }\\n    function getBool(bytes32 _key) internal view returns (bool) { return rocketStorage.getBool(_key); }\\n    function getInt(bytes32 _key) internal view returns (int) { return rocketStorage.getInt(_key); }\\n    function getBytes32(bytes32 _key) internal view returns (bytes32) { return rocketStorage.getBytes32(_key); }\\n\\n    /// @dev Storage set methods\\n    function setAddress(bytes32 _key, address _value) internal { rocketStorage.setAddress(_key, _value); }\\n    function setUint(bytes32 _key, uint _value) internal { rocketStorage.setUint(_key, _value); }\\n    function setString(bytes32 _key, string memory _value) internal { rocketStorage.setString(_key, _value); }\\n    function setBytes(bytes32 _key, bytes memory _value) internal { rocketStorage.setBytes(_key, _value); }\\n    function setBool(bytes32 _key, bool _value) internal { rocketStorage.setBool(_key, _value); }\\n    function setInt(bytes32 _key, int _value) internal { rocketStorage.setInt(_key, _value); }\\n    function setBytes32(bytes32 _key, bytes32 _value) internal { rocketStorage.setBytes32(_key, _value); }\\n\\n    /// @dev Storage delete methods\\n    function deleteAddress(bytes32 _key) internal { rocketStorage.deleteAddress(_key); }\\n    function deleteUint(bytes32 _key) internal { rocketStorage.deleteUint(_key); }\\n    function deleteString(bytes32 _key) internal { rocketStorage.deleteString(_key); }\\n    function deleteBytes(bytes32 _key) internal { rocketStorage.deleteBytes(_key); }\\n    function deleteBool(bytes32 _key) internal { rocketStorage.deleteBool(_key); }\\n    function deleteInt(bytes32 _key) internal { rocketStorage.deleteInt(_key); }\\n    function deleteBytes32(bytes32 _key) internal { rocketStorage.deleteBytes32(_key); }\\n\\n    /// @dev Storage arithmetic methods\\n    function addUint(bytes32 _key, uint256 _amount) internal { rocketStorage.addUint(_key, _amount); }\\n    function subUint(bytes32 _key, uint256 _amount) internal { rocketStorage.subUint(_key, _amount); }\\n}\\n\"\r\n    },\r\n    \"/contracts/contract/node/RocketNodeDeposit.sol\": {\r\n      \"content\": \"/**\\r\\n  *       .\\r\\n  *      / \\\\\\r\\n  *     |.'.|\\r\\n  *     |'.'|\\r\\n  *   ,'|   |`.\\r\\n  *  |,-'-|-'-.|\\r\\n  *   __|_| |         _        _      _____           _\\r\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n  * +---------------------------------------------------+\\r\\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\\r\\n  * +---------------------------------------------------+\\r\\n  *\\r\\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\\r\\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\\r\\n  *\\r\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n  *\\r\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\r\\n  *\\r\\n  */\\r\\n\\r\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../RocketBase.sol\\\";\\nimport \\\"../../interface/deposit/RocketDepositPoolInterface.sol\\\";\\nimport \\\"../../interface/minipool/RocketMinipoolInterface.sol\\\";\\nimport \\\"../../interface/minipool/RocketMinipoolManagerInterface.sol\\\";\\nimport \\\"../../interface/network/RocketNetworkFeesInterface.sol\\\";\\nimport \\\"../../interface/node/RocketNodeDepositInterface.sol\\\";\\nimport \\\"../../interface/dao/protocol/settings/RocketDAOProtocolSettingsDepositInterface.sol\\\";\\nimport \\\"../../interface/dao/protocol/settings/RocketDAOProtocolSettingsMinipoolInterface.sol\\\";\\nimport \\\"../../interface/dao/protocol/settings/RocketDAOProtocolSettingsNodeInterface.sol\\\";\\nimport \\\"../../interface/dao/protocol/settings/RocketDAOProtocolSettingsNetworkInterface.sol\\\";\\nimport \\\"../../interface/dao/node/RocketDAONodeTrustedInterface.sol\\\";\\nimport \\\"../../interface/dao/node/settings/RocketDAONodeTrustedSettingsMembersInterface.sol\\\";\\nimport \\\"../../types/MinipoolDeposit.sol\\\";\\n\\n// Handles node deposits and minipool creation\\n\\ncontract RocketNodeDeposit is RocketBase, RocketNodeDepositInterface {\\n\\n    // Libs\\n    using SafeMath for uint;\\n\\n    // Events\\n    event DepositReceived(address indexed from, uint256 amount, uint256 time);\\n\\n    // Construct\\n    constructor(RocketStorageInterface _rocketStorageAddress) RocketBase(_rocketStorageAddress) {\\n        version = 1;\\n    }\\n\\n    // Accept a node deposit and create a new minipool under the node\\n    // Only accepts calls from registered nodes\\n    function deposit(uint256 _minimumNodeFee) override external payable onlyLatestContract(\\\"rocketNodeDeposit\\\", address(this)) onlyRegisteredNode(msg.sender) {\\n        // Load contracts\\n        RocketDAOProtocolSettingsDepositInterface rocketDAOProtocolSettingsDeposit = RocketDAOProtocolSettingsDepositInterface(getContractAddress(\\\"rocketDAOProtocolSettingsDeposit\\\"));\\n        RocketMinipoolManagerInterface rocketMinipoolManager = RocketMinipoolManagerInterface(getContractAddress(\\\"rocketMinipoolManager\\\"));\\n        RocketDAOProtocolSettingsMinipoolInterface rocketDAOProtocolSettingsMinipool = RocketDAOProtocolSettingsMinipoolInterface(getContractAddress(\\\"rocketDAOProtocolSettingsMinipool\\\"));\\n        RocketNetworkFeesInterface rocketNetworkFees = RocketNetworkFeesInterface(getContractAddress(\\\"rocketNetworkFees\\\"));\\n        RocketDAOProtocolSettingsNodeInterface rocketDAOProtocolSettingsNode = RocketDAOProtocolSettingsNodeInterface(getContractAddress(\\\"rocketDAOProtocolSettingsNode\\\"));\\n        // Check node settings\\n        require(rocketDAOProtocolSettingsNode.getDepositEnabled(), \\\"Node deposits are currently disabled\\\");\\n        // Check current node fee\\n        uint256 nodeFee = rocketNetworkFees.getNodeFee();\\n        require(nodeFee >= _minimumNodeFee, \\\"Minimum node fee exceeds current network node fee\\\");\\n        // Get deposit type by node deposit amount\\n        MinipoolDeposit depositType = MinipoolDeposit.None;\\n        if (msg.value == rocketDAOProtocolSettingsMinipool.getFullDepositNodeAmount()) { depositType = MinipoolDeposit.Full; }\\n        else if (msg.value == rocketDAOProtocolSettingsMinipool.getHalfDepositNodeAmount()) { depositType = MinipoolDeposit.Half; }\\n        else if (msg.value == rocketDAOProtocolSettingsMinipool.getEmptyDepositNodeAmount()) { depositType = MinipoolDeposit.Empty; }\\n        else {\\n            // Invalid deposit amount\\n            revert(\\\"Invalid node deposit amount\\\");\\n        }\\n        // If creating an unbonded minipool, check current unbonded minipool count and current fee > 80% of max\\n        if (depositType == MinipoolDeposit.Empty) {\\n            RocketDAOProtocolSettingsNetworkInterface rocketDAOProtocolSettingsNetwork = RocketDAOProtocolSettingsNetworkInterface(getContractAddress(\\\"rocketDAOProtocolSettingsNetwork\\\"));\\n            RocketDAONodeTrustedInterface rocketDaoNodeTrusted = RocketDAONodeTrustedInterface(getContractAddress(\\\"rocketDAONodeTrusted\\\"));\\n            RocketDAONodeTrustedSettingsMembersInterface rocketDaoNodeTrustedSettingsMembers = RocketDAONodeTrustedSettingsMembersInterface(getContractAddress(\\\"rocketDAONodeTrustedSettingsMembers\\\"));\\n            // Node is trusted\\n            if (rocketDaoNodeTrusted.getMemberIsValid(msg.sender)) {\\n                require(rocketDaoNodeTrusted.getMemberUnbondedValidatorCount(msg.sender) < rocketDaoNodeTrustedSettingsMembers.getMinipoolUnbondedMax(), \\\"Trusted node member would exceed the amount of unbonded minipools allowed\\\");\\n                uint256 maxFee = rocketDAOProtocolSettingsNetwork.getMaximumNodeFee();\\n                require(nodeFee > maxFee.mul(rocketDaoNodeTrustedSettingsMembers.getMinipoolUnbondedMinFee()).div(1 ether), \\\"Current commission rate is not high enough to create unbonded minipools\\\");\\n            }\\n            // Node is not trusted - it cannot create unbonded minipools\\n            else {\\n                revert(\\\"Only members of the trusted node DAO may create unbonded minipools\\\");\\n            }\\n        }\\n        // Emit deposit received event\\n        emit DepositReceived(msg.sender, msg.value, block.timestamp);\\n        // Create minipool\\n        RocketMinipoolInterface minipool = rocketMinipoolManager.createMinipool(msg.sender, depositType);\\n        // Transfer deposit to minipool\\n        minipool.nodeDeposit{value: msg.value}();\\n        // Assign deposits if enabled\\n        if (rocketDAOProtocolSettingsDeposit.getAssignDepositsEnabled()) {\\n            RocketDepositPoolInterface rocketDepositPool = RocketDepositPoolInterface(getContractAddress(\\\"rocketDepositPool\\\"));\\n            rocketDepositPool.assignDeposits();\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/RocketStorageInterface.sol\": {\r\n      \"content\": \"/**\\r\\n  *       .\\r\\n  *      / \\\\\\r\\n  *     |.'.|\\r\\n  *     |'.'|\\r\\n  *   ,'|   |`.\\r\\n  *  |,-'-|-'-.|\\r\\n  *   __|_| |         _        _      _____           _\\r\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n  * +---------------------------------------------------+\\r\\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\\r\\n  * +---------------------------------------------------+\\r\\n  *\\r\\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\\r\\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\\r\\n  *\\r\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n  *\\r\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\r\\n  *\\r\\n  */\\r\\n\\r\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketStorageInterface {\\n\\n    // Guardian\\n    function getGuardian() external view returns(address);\\n    function setGuardian(address _newAddress) external;\\n    function confirmGuardian() external;\\n\\n    // Getters\\n    function getAddress(bytes32 _key) external view returns (address);\\n    function getUint(bytes32 _key) external view returns (uint);\\n    function getString(bytes32 _key) external view returns (string memory);\\n    function getBytes(bytes32 _key) external view returns (bytes memory);\\n    function getBool(bytes32 _key) external view returns (bool);\\n    function getInt(bytes32 _key) external view returns (int);\\n    function getBytes32(bytes32 _key) external view returns (bytes32);\\n\\n    // Setters\\n    function setAddress(bytes32 _key, address _value) external;\\n    function setUint(bytes32 _key, uint _value) external;\\n    function setString(bytes32 _key, string calldata _value) external;\\n    function setBytes(bytes32 _key, bytes calldata _value) external;\\n    function setBool(bytes32 _key, bool _value) external;\\n    function setInt(bytes32 _key, int _value) external;\\n    function setBytes32(bytes32 _key, bytes32 _value) external;\\n\\n    // Deleters\\n    function deleteAddress(bytes32 _key) external;\\n    function deleteUint(bytes32 _key) external;\\n    function deleteString(bytes32 _key) external;\\n    function deleteBytes(bytes32 _key) external;\\n    function deleteBool(bytes32 _key) external;\\n    function deleteInt(bytes32 _key) external;\\n    function deleteBytes32(bytes32 _key) external;\\n\\n    // Arithmetic\\n    function addUint(bytes32 _key, uint256 _amount) external;\\n    function subUint(bytes32 _key, uint256 _amount) external;\\n\\n    // Protected storage\\n    function getNodeWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function getNodePendingWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external;\\n    function confirmWithdrawalAddress(address _nodeAddress) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/dao/node/RocketDAONodeTrustedInterface.sol\": {\r\n      \"content\": \"/**\\r\\n  *       .\\r\\n  *      / \\\\\\r\\n  *     |.'.|\\r\\n  *     |'.'|\\r\\n  *   ,'|   |`.\\r\\n  *  |,-'-|-'-.|\\r\\n  *   __|_| |         _        _      _____           _\\r\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n  * +---------------------------------------------------+\\r\\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\\r\\n  * +---------------------------------------------------+\\r\\n  *\\r\\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\\r\\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\\r\\n  *\\r\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n  *\\r\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\r\\n  *\\r\\n  */\\r\\n\\r\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketDAONodeTrustedInterface {\\n    function getBootstrapModeDisabled() external view returns (bool);\\n    function getMemberQuorumVotesRequired() external view returns (uint256);\\n    function getMemberAt(uint256 _index) external view returns (address);\\n    function getMemberCount() external view returns (uint256);\\n    function getMemberMinRequired() external view returns (uint256);\\n    function getMemberIsValid(address _nodeAddress) external view returns (bool);\\n    function getMemberLastProposalTime(address _nodeAddress) external view returns (uint256);\\n    function getMemberID(address _nodeAddress) external view returns (string memory);\\n    function getMemberUrl(address _nodeAddress) external view returns (string memory);\\n    function getMemberJoinedTime(address _nodeAddress) external view returns (uint256);\\n    function getMemberProposalExecutedTime(string memory _proposalType, address _nodeAddress) external view returns (uint256);\\n    function getMemberRPLBondAmount(address _nodeAddress) external view returns (uint256);\\n    function getMemberIsChallenged(address _nodeAddress) external view returns (bool);\\n    function getMemberUnbondedValidatorCount(address _nodeAddress) external view returns (uint256);\\n    function incrementMemberUnbondedValidatorCount(address _nodeAddress) external;\\n    function decrementMemberUnbondedValidatorCount(address _nodeAddress) external;\\n    function bootstrapMember(string memory _id, string memory _url, address _nodeAddress) external;\\n    function bootstrapSettingUint(string memory _settingContractName, string memory _settingPath, uint256 _value) external;\\n    function bootstrapSettingBool(string memory _settingContractName, string memory _settingPath, bool _value) external;\\n    function bootstrapUpgrade(string memory _type, string memory _name, string memory _contractAbi, address _contractAddress) external;\\n    function bootstrapDisable(bool _confirmDisableBootstrapMode) external;\\n    function memberJoinRequired(string memory _id, string memory _url) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/dao/node/settings/RocketDAONodeTrustedSettingsMembersInterface.sol\": {\r\n      \"content\": \"/**\\r\\n  *       .\\r\\n  *      / \\\\\\r\\n  *     |.'.|\\r\\n  *     |'.'|\\r\\n  *   ,'|   |`.\\r\\n  *  |,-'-|-'-.|\\r\\n  *   __|_| |         _        _      _____           _\\r\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n  * +---------------------------------------------------+\\r\\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\\r\\n  * +---------------------------------------------------+\\r\\n  *\\r\\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\\r\\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\\r\\n  *\\r\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n  *\\r\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\r\\n  *\\r\\n  */\\r\\n\\r\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketDAONodeTrustedSettingsMembersInterface {\\n    function getQuorum() external view returns (uint256);\\n    function getRPLBond() external view returns(uint256);\\n    function getMinipoolUnbondedMax() external view returns(uint256);\\n    function getMinipoolUnbondedMinFee() external view returns(uint256);\\n    function getChallengeCooldown() external view returns(uint256);\\n    function getChallengeWindow() external view returns(uint256);\\n    function getChallengeCost() external view returns(uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/dao/protocol/settings/RocketDAOProtocolSettingsDepositInterface.sol\": {\r\n      \"content\": \"/**\\r\\n  *       .\\r\\n  *      / \\\\\\r\\n  *     |.'.|\\r\\n  *     |'.'|\\r\\n  *   ,'|   |`.\\r\\n  *  |,-'-|-'-.|\\r\\n  *   __|_| |         _        _      _____           _\\r\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n  * +---------------------------------------------------+\\r\\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\\r\\n  * +---------------------------------------------------+\\r\\n  *\\r\\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\\r\\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\\r\\n  *\\r\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n  *\\r\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\r\\n  *\\r\\n  */\\r\\n\\r\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketDAOProtocolSettingsDepositInterface {\\n    function getDepositEnabled() external view returns (bool);\\n    function getAssignDepositsEnabled() external view returns (bool);\\n    function getMinimumDeposit() external view returns (uint256);\\n    function getMaximumDepositPoolSize() external view returns (uint256);\\n    function getMaximumDepositAssignments() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/dao/protocol/settings/RocketDAOProtocolSettingsMinipoolInterface.sol\": {\r\n      \"content\": \"/**\\r\\n  *       .\\r\\n  *      / \\\\\\r\\n  *     |.'.|\\r\\n  *     |'.'|\\r\\n  *   ,'|   |`.\\r\\n  *  |,-'-|-'-.|\\r\\n  *   __|_| |         _        _      _____           _\\r\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n  * +---------------------------------------------------+\\r\\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\\r\\n  * +---------------------------------------------------+\\r\\n  *\\r\\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\\r\\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\\r\\n  *\\r\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n  *\\r\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\r\\n  *\\r\\n  */\\r\\n\\r\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../../../../types/MinipoolDeposit.sol\\\";\\n\\ninterface RocketDAOProtocolSettingsMinipoolInterface {\\n    function getLaunchBalance() external view returns (uint256);\\n    function getDepositNodeAmount(MinipoolDeposit _depositType) external view returns (uint256);\\n    function getFullDepositNodeAmount() external view returns (uint256);\\n    function getHalfDepositNodeAmount() external view returns (uint256);\\n    function getEmptyDepositNodeAmount() external view returns (uint256);\\n    function getDepositUserAmount(MinipoolDeposit _depositType) external view returns (uint256);\\n    function getFullDepositUserAmount() external view returns (uint256);\\n    function getHalfDepositUserAmount() external view returns (uint256);\\n    function getEmptyDepositUserAmount() external view returns (uint256);\\n    function getSubmitWithdrawableEnabled() external view returns (bool);\\n    function getLaunchTimeout() external view returns (uint256);\\n    function getMaximumCount() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/dao/protocol/settings/RocketDAOProtocolSettingsNetworkInterface.sol\": {\r\n      \"content\": \"/**\\r\\n  *       .\\r\\n  *      / \\\\\\r\\n  *     |.'.|\\r\\n  *     |'.'|\\r\\n  *   ,'|   |`.\\r\\n  *  |,-'-|-'-.|\\r\\n  *   __|_| |         _        _      _____           _\\r\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n  * +---------------------------------------------------+\\r\\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\\r\\n  * +---------------------------------------------------+\\r\\n  *\\r\\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\\r\\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\\r\\n  *\\r\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n  *\\r\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\r\\n  *\\r\\n  */\\r\\n\\r\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketDAOProtocolSettingsNetworkInterface {\\n    function getNodeConsensusThreshold() external view returns (uint256);\\n    function getSubmitBalancesEnabled() external view returns (bool);\\n    function getSubmitBalancesFrequency() external view returns (uint256);\\n    function getSubmitPricesEnabled() external view returns (bool);\\n    function getSubmitPricesFrequency() external view returns (uint256);\\n    function getMinimumNodeFee() external view returns (uint256);\\n    function getTargetNodeFee() external view returns (uint256);\\n    function getMaximumNodeFee() external view returns (uint256);\\n    function getNodeFeeDemandRange() external view returns (uint256);\\n    function getTargetRethCollateralRate() external view returns (uint256);\\n    function getRethDepositDelay() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/dao/protocol/settings/RocketDAOProtocolSettingsNodeInterface.sol\": {\r\n      \"content\": \"/**\\r\\n  *       .\\r\\n  *      / \\\\\\r\\n  *     |.'.|\\r\\n  *     |'.'|\\r\\n  *   ,'|   |`.\\r\\n  *  |,-'-|-'-.|\\r\\n  *   __|_| |         _        _      _____           _\\r\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n  * +---------------------------------------------------+\\r\\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\\r\\n  * +---------------------------------------------------+\\r\\n  *\\r\\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\\r\\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\\r\\n  *\\r\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n  *\\r\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\r\\n  *\\r\\n  */\\r\\n\\r\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketDAOProtocolSettingsNodeInterface {\\n    function getRegistrationEnabled() external view returns (bool);\\n    function getDepositEnabled() external view returns (bool);\\n    function getMinimumPerMinipoolStake() external view returns (uint256);\\n    function getMaximumPerMinipoolStake() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/deposit/RocketDepositPoolInterface.sol\": {\r\n      \"content\": \"/**\\r\\n  *       .\\r\\n  *      / \\\\\\r\\n  *     |.'.|\\r\\n  *     |'.'|\\r\\n  *   ,'|   |`.\\r\\n  *  |,-'-|-'-.|\\r\\n  *   __|_| |         _        _      _____           _\\r\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n  * +---------------------------------------------------+\\r\\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\\r\\n  * +---------------------------------------------------+\\r\\n  *\\r\\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\\r\\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\\r\\n  *\\r\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n  *\\r\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\r\\n  *\\r\\n  */\\r\\n\\r\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketDepositPoolInterface {\\n    function getBalance() external view returns (uint256);\\n    function getExcessBalance() external view returns (uint256);\\n    function deposit() external payable;\\n    function recycleDissolvedDeposit() external payable;\\n    function recycleExcessCollateral() external payable;\\n    function recycleLiquidatedStake() external payable;\\n    function assignDeposits() external;\\n    function withdrawExcessBalance(uint256 _amount) external;\\n    function getUserLastDepositBlock(address _address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/minipool/RocketMinipoolInterface.sol\": {\r\n      \"content\": \"/**\\r\\n  *       .\\r\\n  *      / \\\\\\r\\n  *     |.'.|\\r\\n  *     |'.'|\\r\\n  *   ,'|   |`.\\r\\n  *  |,-'-|-'-.|\\r\\n  *   __|_| |         _        _      _____           _\\r\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n  * +---------------------------------------------------+\\r\\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\\r\\n  * +---------------------------------------------------+\\r\\n  *\\r\\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\\r\\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\\r\\n  *\\r\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n  *\\r\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\r\\n  *\\r\\n  */\\r\\n\\r\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../../types/MinipoolDeposit.sol\\\";\\nimport \\\"../../types/MinipoolStatus.sol\\\";\\nimport \\\"../RocketStorageInterface.sol\\\";\\n\\ninterface RocketMinipoolInterface {\\n    function initialise(address _nodeAddress, MinipoolDeposit _depositType) external;\\n    function getStatus() external view returns (MinipoolStatus);\\n    function getFinalised() external view returns (bool);\\n    function getStatusBlock() external view returns (uint256);\\n    function getStatusTime() external view returns (uint256);\\n    function getDepositType() external view returns (MinipoolDeposit);\\n    function getNodeAddress() external view returns (address);\\n    function getNodeFee() external view returns (uint256);\\n    function getNodeDepositBalance() external view returns (uint256);\\n    function getNodeRefundBalance() external view returns (uint256);\\n    function getNodeDepositAssigned() external view returns (bool);\\n    function getUserDepositBalance() external view returns (uint256);\\n    function getUserDepositAssigned() external view returns (bool);\\n    function getUserDepositAssignedTime() external view returns (uint256);\\n    function getWithdrawalCredentials() external view returns (bytes memory);\\n    function calculateNodeShare(uint256 _balance) external view returns (uint256);\\n    function calculateUserShare(uint256 _balance) external view returns (uint256);\\n    function nodeDeposit() external payable;\\n    function userDeposit() external payable;\\n    function distributeBalance() external;\\n    function distributeBalanceAndFinalise() external;\\n    function refund() external;\\n    function slash() external;\\n    function finalise() external;\\n    function stake(bytes calldata _validatorPubkey, bytes calldata _validatorSignature, bytes32 _depositDataRoot) external;\\n    function setWithdrawable() external;\\n    function dissolve() external;\\n    function close() external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/minipool/RocketMinipoolManagerInterface.sol\": {\r\n      \"content\": \"/**\\r\\n  *       .\\r\\n  *      / \\\\\\r\\n  *     |.'.|\\r\\n  *     |'.'|\\r\\n  *   ,'|   |`.\\r\\n  *  |,-'-|-'-.|\\r\\n  *   __|_| |         _        _      _____           _\\r\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n  * +---------------------------------------------------+\\r\\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\\r\\n  * +---------------------------------------------------+\\r\\n  *\\r\\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\\r\\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\\r\\n  *\\r\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n  *\\r\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\r\\n  *\\r\\n  */\\r\\n\\r\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../../types/MinipoolDeposit.sol\\\";\\nimport \\\"./RocketMinipoolInterface.sol\\\";\\n\\ninterface RocketMinipoolManagerInterface {\\n    function getMinipoolCount() external view returns (uint256);\\n    function getStakingMinipoolCount() external view returns (uint256);\\n    function getFinalisedMinipoolCount() external view returns (uint256);\\n    function getActiveMinipoolCount() external view returns (uint256);\\n    function getMinipoolCountPerStatus(uint256 offset, uint256 limit) external view returns (uint256, uint256, uint256, uint256, uint256);\\n    function getMinipoolAt(uint256 _index) external view returns (address);\\n    function getNodeMinipoolCount(address _nodeAddress) external view returns (uint256);\\n    function getNodeActiveMinipoolCount(address _nodeAddress) external view returns (uint256);\\n    function getNodeFinalisedMinipoolCount(address _nodeAddress) external view returns (uint256);\\n    function getNodeStakingMinipoolCount(address _nodeAddress) external view returns (uint256);\\n    function getNodeMinipoolAt(address _nodeAddress, uint256 _index) external view returns (address);\\n    function getNodeValidatingMinipoolCount(address _nodeAddress) external view returns (uint256);\\n    function getNodeValidatingMinipoolAt(address _nodeAddress, uint256 _index) external view returns (address);\\n    function getMinipoolByPubkey(bytes calldata _pubkey) external view returns (address);\\n    function getMinipoolExists(address _minipoolAddress) external view returns (bool);\\n    function getMinipoolPubkey(address _minipoolAddress) external view returns (bytes memory);\\n    function createMinipool(address _nodeAddress, MinipoolDeposit _depositType) external returns (RocketMinipoolInterface);\\n    function destroyMinipool() external;\\n    function incrementNodeStakingMinipoolCount(address _nodeAddress) external;\\n    function decrementNodeStakingMinipoolCount(address _nodeAddress) external;\\n    function incrementNodeFinalisedMinipoolCount(address _nodeAddress) external;\\n    function setMinipoolPubkey(bytes calldata _pubkey) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/network/RocketNetworkFeesInterface.sol\": {\r\n      \"content\": \"/**\\r\\n  *       .\\r\\n  *      / \\\\\\r\\n  *     |.'.|\\r\\n  *     |'.'|\\r\\n  *   ,'|   |`.\\r\\n  *  |,-'-|-'-.|\\r\\n  *   __|_| |         _        _      _____           _\\r\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n  * +---------------------------------------------------+\\r\\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\\r\\n  * +---------------------------------------------------+\\r\\n  *\\r\\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\\r\\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\\r\\n  *\\r\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n  *\\r\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\r\\n  *\\r\\n  */\\r\\n\\r\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketNetworkFeesInterface {\\n    function getNodeDemand() external view returns (int256);\\n    function getNodeFee() external view returns (uint256);\\n    function getNodeFeeByDemand(int256 _nodeDemand) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/node/RocketNodeDepositInterface.sol\": {\r\n      \"content\": \"/**\\r\\n  *       .\\r\\n  *      / \\\\\\r\\n  *     |.'.|\\r\\n  *     |'.'|\\r\\n  *   ,'|   |`.\\r\\n  *  |,-'-|-'-.|\\r\\n  *   __|_| |         _        _      _____           _\\r\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n  * +---------------------------------------------------+\\r\\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\\r\\n  * +---------------------------------------------------+\\r\\n  *\\r\\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\\r\\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\\r\\n  *\\r\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n  *\\r\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\r\\n  *\\r\\n  */\\r\\n\\r\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketNodeDepositInterface {\\n    function deposit(uint256 _minimumNodeFee) external payable;\\n}\\n\"\r\n    },\r\n    \"/contracts/types/MinipoolDeposit.sol\": {\r\n      \"content\": \"/**\\r\\n  *       .\\r\\n  *      / \\\\\\r\\n  *     |.'.|\\r\\n  *     |'.'|\\r\\n  *   ,'|   |`.\\r\\n  *  |,-'-|-'-.|\\r\\n  *   __|_| |         _        _      _____           _\\r\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n  * +---------------------------------------------------+\\r\\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\\r\\n  * +---------------------------------------------------+\\r\\n  *\\r\\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\\r\\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\\r\\n  *\\r\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n  *\\r\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\r\\n  *\\r\\n  */\\r\\n\\r\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\n// Represents the type of deposits required by a minipool\\n\\nenum MinipoolDeposit {\\n    None,    // Marks an invalid deposit type\\n    Full,    // The minipool requires 32 ETH from the node operator, 16 ETH of which will be refinanced from user deposits\\n    Half,    // The minipool required 16 ETH from the node operator to be matched with 16 ETH from user deposits\\n    Empty    // The minipool requires 0 ETH from the node operator to be matched with 32 ETH from user deposits (trusted nodes only)\\n}\\n\"\r\n    },\r\n    \"/contracts/types/MinipoolStatus.sol\": {\r\n      \"content\": \"/**\\r\\n  *       .\\r\\n  *      / \\\\\\r\\n  *     |.'.|\\r\\n  *     |'.'|\\r\\n  *   ,'|   |`.\\r\\n  *  |,-'-|-'-.|\\r\\n  *   __|_| |         _        _      _____           _\\r\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\r\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\r\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\r\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\r\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\r\\n  * +---------------------------------------------------+\\r\\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\\r\\n  * +---------------------------------------------------+\\r\\n  *\\r\\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\\r\\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\\r\\n  *\\r\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\r\\n  *\\r\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\r\\n  *\\r\\n  */\\r\\n\\r\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\n// Represents a minipool's status within the network\\n\\nenum MinipoolStatus {\\n    Initialised,    // The minipool has been initialised and is awaiting a deposit of user ETH\\n    Prelaunch,      // The minipool has enough ETH to begin staking and is awaiting launch by the node operator\\n    Staking,        // The minipool is currently staking\\n    Withdrawable,   // The minipool has become withdrawable on the beacon chain and can be withdrawn from by the node operator\\n    Dissolved       // The minipool has been dissolved and its user deposited ETH has been returned to the deposit pool\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 15000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract RocketStorageInterface\",\"name\":\"_rocketStorageAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumNodeFee\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RocketNodeDeposit","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"15000","ConstructorArguments":"0000000000000000000000001d8f8f00cfa6758d7be78336684788fb0ee0fa46","EVMVersion":"istanbul","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e53d0ffec5f442e74b2790bff4920c5398a9094a304fb19283c966fb0d2e0eeb"}]}