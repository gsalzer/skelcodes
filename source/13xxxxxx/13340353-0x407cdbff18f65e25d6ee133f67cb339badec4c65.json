{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.0;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface PolvenStakingStructs {\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 normalizedAmount;\r\n    }\r\n\r\n    struct StakeTimeframe {\r\n        uint256 amount;\r\n        uint256 normalizedAmount;\r\n        uint256 lastStakeTime;\r\n    }\r\n}\r\n\r\ninterface PolvenStaking is PolvenStakingStructs {\r\n    function userStakes(address) external returns(Stake memory);\r\n    function userStakesTimeframe(address) external returns(StakeTimeframe memory);\r\n}\r\n\r\ncontract Vote is Ownable, PolvenStakingStructs {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 counter;\r\n    \r\n    enum Choice { YES, NO, ABSTAINED }\r\n    enum AdminStatus { OPEN, CLOSED }\r\n    enum ProposalStatus { OPEN, CLOSED }\r\n    \r\n    event CreateVote(uint256 expirationDate, string title, string description);\r\n    event Voting (Choice _choice, address voter, uint256 count, uint256 counter);\r\n    event CloseProposal(uint256 counter);\r\n    \r\n    struct Voter {\r\n        uint256 count;\r\n        Choice choice;\r\n    }\r\n    \r\n    struct Proposal {\r\n        uint256 expirationDate;\r\n        string title;\r\n        string description;\r\n        AdminStatus adminStatus;\r\n        // or use separate mapping\r\n        uint256 yes;\r\n        uint256 no;\r\n        uint256 abstained;\r\n    }\r\n    \r\n    mapping(uint256 => Proposal) public proposals;\r\n    mapping(uint256 => mapping(address => Voter) ) public votes;\r\n    mapping(uint256 => address[]) public voters;\r\n    \r\n    PolvenStaking public staking;\r\n    \r\n    constructor(address _staking) public {\r\n        counter = 0;\r\n        staking = PolvenStaking(_staking);\r\n    }\r\n    \r\n    function create(uint256 expirationDate, string memory title, string memory description) external onlyOwner {\r\n        require(expirationDate > block.timestamp, \"Incorrect expiration date\");\r\n        \r\n        if(counter > 0) {\r\n            require(getProposalStatus(counter) == ProposalStatus.CLOSED, \"The previous vote is not over yet\");\r\n        }\r\n        \r\n        counter++;\r\n        \r\n        proposals[counter].expirationDate = expirationDate;\r\n        proposals[counter].title = title;\r\n        proposals[counter].description = description;\r\n        proposals[counter].adminStatus = AdminStatus.OPEN;\r\n        proposals[counter].yes = 0;\r\n        proposals[counter].no = 0;\r\n        proposals[counter].abstained = 0;\r\n        \r\n        emit CreateVote(expirationDate, title, description);\r\n    }\r\n    \r\n    function closeLastProposal() external onlyOwner {\r\n        proposals[counter].adminStatus = AdminStatus.CLOSED;\r\n        \r\n        emit CloseProposal(counter);\r\n    }\r\n    \r\n    function voting(Choice _choice) external {\r\n        require(getProposalStatus(counter) == ProposalStatus.OPEN, \"Voting closed\");\r\n        require(isVoted(msg.sender) == false, \"Account has already been voted\");\r\n\r\n        Stake memory userStakes = staking.userStakes(msg.sender);\r\n        StakeTimeframe memory userStakesTimeframe = staking.userStakesTimeframe(msg.sender);\r\n        \r\n        uint256 sum = userStakes.amount + userStakesTimeframe.amount;\r\n        require(sum > 0, \"You have no staked tokens\");\r\n        require(counter > 0, \"Proposal has not been created yet\");\r\n        \r\n        votes[counter][msg.sender].count = sum;\r\n        votes[counter][msg.sender].choice = _choice;\r\n        \r\n        Proposal memory _proposal = proposals[counter];\r\n        \r\n        if(_choice == Choice.YES) {\r\n            proposals[counter].yes = _proposal.yes.add(sum);\r\n        }else if(_choice == Choice.NO) {\r\n            proposals[counter].no = _proposal.no.add(sum);\r\n        } else {\r\n            proposals[counter].abstained = _proposal.abstained.add(sum);\r\n        }\r\n        \r\n        voters[counter].push(msg.sender);\r\n        \r\n        emit Voting (_choice, msg.sender, sum, counter);\r\n    }\r\n    \r\n    function getCounter() public view returns (uint256) {\r\n        return counter;\r\n    }\r\n    \r\n    function getLastProposal() public view returns(uint256, string memory, string memory, uint256, uint256, uint256, ProposalStatus) {\r\n        return getItem(counter);\r\n    }\r\n    \r\n    function getProposal(uint256 index) public view returns(uint256, string memory, string memory, uint256, uint256, uint256, ProposalStatus) {\r\n        require(index > 0, \"Index must be greater than 0\");\r\n        require(index <= counter, \"Index must be less than or equal to counter\");\r\n        return getItem(index);\r\n    }\r\n\r\n    function isVoted(address voter) public view returns (bool) {\r\n        return votes[counter][voter].count != 0;\r\n    }\r\n    \r\n    function getVoteForLastProposal() public view returns (uint256, Choice) {\r\n        return getVote(counter, msg.sender);\r\n    }\r\n    \r\n    function getVote(uint256 index, address voter) public view returns (uint256, Choice) {\r\n        return (votes[index][voter].count, votes[index][voter].choice);\r\n    }\r\n    \r\n    function getVotersForLastProposal() public view returns (address [] memory) {\r\n        return getVoters(counter);\r\n    }\r\n    \r\n    function getVoters(uint256 index) public view returns (address [] memory) {\r\n        return voters[index];\r\n    }\r\n  \r\n    function getItem(uint256 index) private view returns(uint256, string memory, string memory, uint256, uint256, uint256, ProposalStatus) {\r\n        return (proposals[index].expirationDate, \r\n        proposals[index].title, \r\n        proposals[index].description, \r\n        proposals[index].yes, \r\n        proposals[index].no, \r\n        proposals[index].abstained,\r\n        getProposalStatus(index));\r\n    }\r\n    \r\n    function getProposalStatus(uint256 index) private view returns(ProposalStatus) {\r\n        if(proposals[index].adminStatus == AdminStatus.CLOSED) {\r\n            return ProposalStatus.CLOSED;\r\n        }\r\n     \r\n        if(proposals[index].expirationDate <= block.timestamp) {\r\n            return ProposalStatus.CLOSED;\r\n        }\r\n     \r\n        return ProposalStatus.OPEN;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"name\":\"CloseProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"CreateVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Vote.Choice\",\"name\":\"_choice\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"name\":\"Voting\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"closeLastProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum Vote.ProposalStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum Vote.ProposalStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum Vote.Choice\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoteForLastProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum Vote.Choice\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotersForLastProposal\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"isVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum Vote.AdminStatus\",\"name\":\"adminStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"yes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"no\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstained\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract PolvenStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"enum Vote.Choice\",\"name\":\"choice\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Vote.Choice\",\"name\":\"_choice\",\"type\":\"uint8\"}],\"name\":\"voting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Vote","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009b887877f99d7696e0ca1d2da3b7e75fa11fd81e","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://55f66ff7ee4eecbe3a3a9a7d8d5a721efbda96e2190d26ef5a305ad7b05d5d65"}]}