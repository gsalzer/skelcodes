{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ncontract CoinFlipper {\r\n    \r\n    address payable[] players;\r\n\r\n    receive() payable external {\r\n        require(msg.value >= 0.01 ether, \"Must send correct amount of ether to play.\");\r\n        // Add player that paid to the array\r\n        players.push(payable(msg.sender));\r\n        // If there are 2 players, play\r\n        if( getPlayerCount() == 2 ) {\r\n            play();\r\n        }\r\n    }\r\n    \r\n    function play() internal {\r\n        address payable winner = players[flipTheCoin()];\r\n        clearPlayers();\r\n        // Send the winner all the ether\r\n        payOut(winner, getBalance());\r\n    }\r\n    \r\n    function getBalance() public view returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function payOut(address payable _to, uint _amount) private {\r\n        (bool sent, ) = _to.call{value: _amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n    \r\n    function clearPlayers() internal {\r\n        delete players;\r\n    }\r\n    \r\n    function getPlayerCount() public view returns(uint) {\r\n        return players.length;\r\n    }\r\n    \r\n    function flipTheCoin() private view returns(uint) {\r\n        return random() % 2;\r\n    }\r\n    \r\n    function random() public view returns(uint){\r\n       return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, players.length)));\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CoinFlipper","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4c8203acea6fe92db3f66bbd06ec59093aa0cf704f6ef763ee3c60746dd71d13"}]}