{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.5.0 https://hardhat.org\r\n\r\n// File contracts/external/avm/interfaces/iArbitrum_Inbox.sol\r\n\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// Retryable tickets are the Arbitrum protocolâ€™s canonical method for passing generalized messages from Ethereum to\r\n// Arbitrum. A retryable ticket is an L2 message encoded and delivered by L1; if gas is provided, it will be executed\r\n// immediately. If no gas is provided or the execution reverts, it will be placed in the L2 retry buffer,\r\n// where any user can re-execute for some fixed period (roughly one week).\r\n// Retryable tickets are created by calling Inbox.createRetryableTicket.\r\n// More details here: https://developer.offchainlabs.com/docs/l1_l2_messages#ethereum-to-arbitrum-retryable-tickets\r\n\r\ninterface iArbitrum_Inbox {\r\n    function createRetryableTicketNoRefundAliasRewrite(\r\n        address destAddr,\r\n        uint256 l2CallValue,\r\n        uint256 maxSubmissionCost,\r\n        address excessFeeRefundAddress,\r\n        address callValueRefundAddress,\r\n        uint256 maxGas,\r\n        uint256 gasPriceBid,\r\n        bytes calldata data\r\n    ) external payable returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/insured-bridge/avm/Arbitrum_CrossDomainEnabled.sol\r\n\r\n// Copied logic from https://github.com/makerdao/arbitrum-dai-bridge/blob/34acc39bc6f3a2da0a837ea3c5dbc634ec61c7de/contracts/l1/L1CrossDomainEnabled.sol\r\n// with a change to the solidity version.\r\n\r\nabstract contract Arbitrum_CrossDomainEnabled {\r\n    iArbitrum_Inbox public immutable inbox;\r\n\r\n    /**\r\n     * @param _inbox Contract that sends generalized messages to the Arbitrum chain.\r\n     */\r\n    constructor(address _inbox) {\r\n        inbox = iArbitrum_Inbox(_inbox);\r\n    }\r\n\r\n    // More details about retryable ticket parameters here: https://developer.offchainlabs.com/docs/l1_l2_messages#parameters\r\n    // This function will not apply aliassing to the `user` address on L2.\r\n    // Note: If `l1CallValue > 0`, then this contract must contain at least that much ETH to send as msg.value to the\r\n    // inbox.\r\n    function sendTxToL2NoAliassing(\r\n        address target, // Address where transaction will initiate on L2.\r\n        address user, // Address where excess gas is credited on L2.\r\n        uint256 l1CallValue, // msg.value deposited to `user` on L2.\r\n        uint256 maxSubmissionCost, // Amount of ETH allocated to pay for base submission fee. The user is charged this\r\n        // fee to cover the storage costs of keeping their retryable ticket's calldata in the retry buffer. This should\r\n        // also cover the `l2CallValue`, but we set that to 0. This amount is proportional to the size of `data`.\r\n        uint256 maxGas, // Gas limit for immediate L2 execution attempt.\r\n        uint256 gasPriceBid, // L2 gas price bid for immediate L2 execution attempt.\r\n        bytes memory data // ABI encoded data to send to target.\r\n    ) internal returns (uint256) {\r\n        // createRetryableTicket API: https://developer.offchainlabs.com/docs/sol_contract_docs/md_docs/arb-bridge-eth/bridge/inbox#createretryableticketaddress-destaddr-uint256-l2callvalue-uint256-maxsubmissioncost-address-excessfeerefundaddress-address-callvaluerefundaddress-uint256-maxgas-uint256-gaspricebid-bytes-data-%E2%86%92-uint256-external\r\n        // - address destAddr: destination L2 contract address\r\n        // - uint256 l2CallValue: call value for retryable L2 message\r\n        // - uint256 maxSubmissionCost: Max gas deducted from user's L2 balance to cover base submission fee\r\n        // - address excessFeeRefundAddress: maxgas x gasprice - execution cost gets credited here on L2\r\n        // - address callValueRefundAddress: l2CallValue gets credited here on L2 if retryable txn times out or gets cancelled\r\n        // - uint256 maxGas: Max gas deducted from user's L2 balance to cover L2 execution\r\n        // - uint256 gasPriceBid: price bid for L2 execution\r\n        // - bytes data: ABI encoded data of L2 message\r\n        uint256 seqNum =\r\n            inbox.createRetryableTicketNoRefundAliasRewrite{ value: l1CallValue }(\r\n                target,\r\n                0, // we always assume that l2CallValue = 0\r\n                maxSubmissionCost,\r\n                user,\r\n                user,\r\n                maxGas,\r\n                gasPriceBid,\r\n                data\r\n            );\r\n        return seqNum;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/insured-bridge/interfaces/MessengerInterface.sol\r\n\r\n\r\n/**\r\n * @notice Sends cross chain messages to contracts on a specific L2 network. The `relayMessage` implementation will\r\n * differ for each L2.\r\n */\r\ninterface MessengerInterface {\r\n    function relayMessage(\r\n        address target,\r\n        address userToRefund,\r\n        uint256 l1CallValue,\r\n        uint256 gasLimit,\r\n        uint256 gasPrice,\r\n        uint256 maxSubmissionCost,\r\n        bytes memory message\r\n    ) external payable;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.1.0\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.1.0\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/insured-bridge/avm/Arbitrum_Messenger.sol\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice Sends cross chain messages Arbitrum L2 network.\r\n * @dev This contract's owner should be set to the BridgeAdmin deployed on the same L1 network so that only the\r\n * BridgeAdmin can call cross-chain administrative functions on the L2 DepositBox via this messenger.\r\n * @dev This address will be the sender of any L1 --> L2 retryable tickets, so it should be set as the cross domain\r\n * owner for L2 contracts that expect to receive cross domain messages.\r\n */\r\ncontract Arbitrum_Messenger is Ownable, Arbitrum_CrossDomainEnabled, MessengerInterface {\r\n    event RelayedMessage(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed seqNum,\r\n        address userToRefund,\r\n        uint256 l1CallValue,\r\n        uint256 gasLimit,\r\n        uint256 gasPrice,\r\n        uint256 maxSubmissionCost,\r\n        bytes data\r\n    );\r\n\r\n    /**\r\n     * @param _inbox Contract that sends generalized messages to the Arbitrum chain.\r\n     */\r\n    constructor(address _inbox) Arbitrum_CrossDomainEnabled(_inbox) {}\r\n\r\n    /**\r\n     * @notice Sends a message to an account on L2. If this message reverts on l2 for any reason it can either be\r\n     * resent on L1, or redeemed on L2 manually. To learn more see how \"retryable tickets\" work on Arbitrum\r\n     * https://developer.offchainlabs.com/docs/l1_l2_messages#parameters\r\n     * @param target The intended recipient on L2.\r\n     * @param userToRefund User on L2 to refund extra fees to.\r\n     * @param l1CallValue Amount of ETH deposited to `target` contract on L2. Used to pay for L2 submission fee and\r\n     * l2CallValue. This will usually be > 0.\r\n     * @param gasLimit The gasLimit for the receipt of the message on L2.\r\n     * @param gasPrice Gas price bid for L2 execution.\r\n     * @param maxSubmissionCost: Max gas deducted from user's L2 balance to cover base submission fee.\r\n     * This amount is proportional to the size of `data`.\r\n     * @param message The data to send to the target (usually calldata to a function with\r\n     *  `onlyFromCrossDomainAccount()`)\r\n     */\r\n    function relayMessage(\r\n        address target,\r\n        address userToRefund,\r\n        uint256 l1CallValue,\r\n        uint256 gasLimit,\r\n        uint256 gasPrice,\r\n        uint256 maxSubmissionCost,\r\n        bytes memory message\r\n    ) external payable override onlyOwner {\r\n        // Since we know the L2 target's address in advance, we don't need to alias an L1 address.\r\n        uint256 seqNumber =\r\n            sendTxToL2NoAliassing(target, userToRefund, l1CallValue, maxSubmissionCost, gasLimit, gasPrice, message);\r\n        emit RelayedMessage(\r\n            msg.sender,\r\n            target,\r\n            seqNumber,\r\n            userToRefund,\r\n            l1CallValue,\r\n            gasLimit,\r\n            gasPrice,\r\n            maxSubmissionCost,\r\n            message\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userToRefund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"l1CallValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSubmissionCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"RelayedMessage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contract iArbitrum_Inbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userToRefund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"l1CallValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"relayMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Arbitrum_Messenger","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004dbd4fc535ac27206064b68ffcf827b0a60bab3f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://14ae70ed258357998f8e3b88b823951690435719388ed6d4e1aeb5cc0ad61c0a"}]}