{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.7;\r\n\r\nabstract contract ERC20Events {\r\n    event Approval(address indexed src, address indexed guy, uint wad);\r\n    event Transfer(address indexed src, address indexed dst, uint wad);\r\n}\r\n\r\nabstract contract ERC20 is ERC20Events {\r\n    function totalSupply() virtual public view returns (uint);\r\n    function balanceOf(address guy) virtual public view returns (uint);\r\n    function allowance(address src, address guy) virtual public view returns (uint);\r\n\r\n    function approve(address guy, uint wad) virtual public returns (bool);\r\n    function transfer(address dst, uint wad) virtual public returns (bool);\r\n    function transferFrom(\r\n        address src, address dst, uint wad\r\n    ) virtual public returns (bool);\r\n}\r\n\r\ncontract StakeRewardRefill {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"StakeRewardRefill/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Checks whether msg.sender can refill\r\n    **/\r\n    modifier canRefill {\r\n        require(either(openRefill == 1, authorizedAccounts[msg.sender] == 1), \"StakeRewardRefill/cannot-refill\");\r\n        _;\r\n    }\r\n\r\n    // --- Variables ---\r\n    // Last timestamp for a refill\r\n    uint256 public lastRefillTime;\r\n    // The delay between two consecutive refills\r\n    uint256 public refillDelay;\r\n    // The amount to send per refill\r\n    uint256 public refillAmount;\r\n    // Whether anyone can refill or only authed accounts\r\n    uint256 public openRefill;\r\n\r\n    // The address that receives tokens\r\n    address public refillDestination;\r\n\r\n    // The token used as reward\r\n    ERC20   public rewardToken;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(\r\n      bytes32 parameter,\r\n      address addr\r\n    );\r\n    event ModifyParameters(\r\n      bytes32 parameter,\r\n      uint256 val\r\n    );\r\n    event Refill(address refillDestination, uint256 amountToTransfer);\r\n\r\n    constructor(\r\n      address rewardToken_,\r\n      address refillDestination_,\r\n      uint256 openRefill_,\r\n      uint256 refillDelay_,\r\n      uint256 refillAmount_\r\n    ) public {\r\n        require(rewardToken_ != address(0), \"StakeRewardRefill/null-reward-token\");\r\n        require(refillDestination_ != address(0), \"StakeRewardRefill/null-refill-destination\");\r\n        require(refillDelay_ > 0, \"StakeRewardRefill/null-refill-delay\");\r\n        require(refillAmount_ > 0, \"StakeRewardRefill/null-refill-amount\");\r\n        require(openRefill_ <= 1, \"StakeRewardRefill/invalid-open-refill\");\r\n\r\n        authorizedAccounts[msg.sender] = 1;\r\n\r\n        openRefill        = openRefill_;\r\n        refillDelay       = refillDelay_;\r\n        refillAmount      = refillAmount_;\r\n        lastRefillTime    = now;\r\n\r\n        rewardToken       = ERC20(rewardToken_);\r\n        refillDestination = refillDestination_;\r\n\r\n        emit AddAuthorization(msg.sender);\r\n        emit ModifyParameters(\"openRefill\", openRefill);\r\n        emit ModifyParameters(\"refillDestination\", refillDestination);\r\n        emit ModifyParameters(\"refillDelay\", refillDelay);\r\n        emit ModifyParameters(\"refillAmount\", refillAmount);\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n\r\n    // --- Math ---\r\n    function subtract(uint x, uint y) public pure returns (uint z) {\r\n        z = x - y;\r\n        require(z <= x, \"uint-uint-sub-underflow\");\r\n    }\r\n    function multiply(uint x, uint y) public pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"uint-uint-mul-overflow\");\r\n    }\r\n\r\n    // --- Administration ---\r\n    /**\r\n    * @notice Modify an address parameter\r\n    * @param parameter The parameter name\r\n    * @param data The new parameter value\r\n    **/\r\n    function modifyParameters(bytes32 parameter, address data) external isAuthorized {\r\n        require(data != address(0), \"StakeRewardRefill/null-address\");\r\n\r\n        if (parameter == \"refillDestination\") {\r\n          refillDestination = data;\r\n        } else revert(\"StakeRewardRefill/modify-unrecognized-param\");\r\n    }\r\n    /**\r\n    * @notice Modify a uint256 parameter\r\n    * @param parameter The parameter name\r\n    * @param data The new parameter value\r\n    **/\r\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\r\n        if (parameter == \"openRefill\") {\r\n          require(data <= 1, \"StakeRewardRefill/invalid-open-refill\");\r\n          openRefill = data;\r\n        } else if (parameter == \"lastRefillTime\") {\r\n          require(data >= lastRefillTime, \"StakeRewardRefill/invalid-refill-time\");\r\n          lastRefillTime = data;\r\n        } else if (parameter == \"refillDelay\") {\r\n          require(data > 0, \"StakeRewardRefill/null-refill-delay\");\r\n          refillDelay = data;\r\n        } else if (parameter == \"refillAmount\") {\r\n          require(data > 0, \"StakeRewardRefill/null-refill-amount\");\r\n          refillAmount = data;\r\n        }\r\n        else revert(\"StakeRewardRefill/modify-unrecognized-param\");\r\n    }\r\n    /**\r\n    * @notice Transfer tokens to a custom address\r\n    * @param dst Transfer destination\r\n    * @param amount Amount of tokens to transfer\r\n    **/\r\n    function transferTokenOut(address dst, uint256 amount) external isAuthorized {\r\n        require(dst != address(0), \"StakeRewardRefill/null-dst\");\r\n        require(amount > 0, \"StakeRewardRefill/null-amount\");\r\n\r\n        rewardToken.transfer(dst, amount);\r\n    }\r\n\r\n    // --- Core Logic ---\r\n    /**\r\n    * @notice Send tokens to refillDestination\r\n    * @dev This function can only be called if msg.sender passes canRefill checks\r\n    **/\r\n    function refill() external canRefill {\r\n        uint256 delay = subtract(now, lastRefillTime);\r\n        require(delay >= refillDelay, \"StakeRewardRefill/wait-more\");\r\n\r\n        // Update the last refill time\r\n        lastRefillTime = subtract(now, delay % refillDelay);\r\n\r\n        // Send tokens\r\n        uint256 amountToTransfer = multiply(delay / refillDelay, refillAmount);\r\n        rewardToken.transfer(refillDestination, amountToTransfer);\r\n\r\n        emit Refill(refillDestination, amountToTransfer);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refillDestination_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"openRefill_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refillDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refillAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refillDestination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToTransfer\",\"type\":\"uint256\"}],\"name\":\"Refill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRefillTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"multiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openRefill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refillAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refillDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refillDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"subtract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokenOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakeRewardRefill","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006243d8cea23066d098a15582d81a598b4e8391f400000000000000000000000003da3d5e0b13b6f0917fa9bc3d65b46229d7ef470000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000de0b6b3a7640000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://661a03bcebf9de5946fe99fa8b48e7251195205414f1e56a759aae2854124ba1"}]}