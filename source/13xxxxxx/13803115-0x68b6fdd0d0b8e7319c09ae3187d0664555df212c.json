{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"./interfaces/IERC20Mintable.sol\\\";\\r\\nimport \\\"./interfaces/IVesting.sol\\\";\\r\\n\\r\\ncontract Vesting is IVesting, EIP712Upgradeable, OwnableUpgradeable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Math for uint256;\\r\\n\\r\\n    bytes32 private constant _CONTAINER_TYPEHASE =\\r\\n        keccak256(\\r\\n            \\\"Container(address sender,uint256 amount,bool isFiat,uint256 nonce)\\\"\\r\\n        );\\r\\n\\r\\n    uint256 public constant MAX_INITIAL_PERCENTAGE = 1e20;\\r\\n\\r\\n    bool public isCompleted;\\r\\n    address public signer;\\r\\n    uint8 public rewardTokenDecimals;\\r\\n    uint8 public stakedTokenDecimals;\\r\\n\\r\\n    mapping(address => uint256) public rewardsPaid;\\r\\n    mapping(address => uint256) public deposited;\\r\\n    mapping(address => uint256) public specificAllocation;\\r\\n    mapping(address => VestingInfo) public specificVesting;\\r\\n\\r\\n    string private _name;\\r\\n    uint256 private _totalSupply;\\r\\n    uint256 private _tokenPrice;\\r\\n    uint256 private _totalDeposited;\\r\\n    uint256 private _initialPercentage;\\r\\n    uint256 private _minAllocation;\\r\\n    uint256 private _maxAllocation;\\r\\n    uint256 private _startDate;\\r\\n    uint256 private _endDate;\\r\\n    IERC20 private _rewardToken;\\r\\n    IERC20 private _depositToken;\\r\\n    VestingType private _vestingType;\\r\\n    VestingInfo private _vestingInfo;\\r\\n\\r\\n    mapping(address => mapping(uint256 => bool)) private nonces;\\r\\n\\r\\n    function initialize(\\r\\n        string memory name_,\\r\\n        address rewardToken_,\\r\\n        address depositToken_,\\r\\n        address signer_,\\r\\n        uint256 initialUnlockPercentage_,\\r\\n        uint256 minAllocation_,\\r\\n        uint256 maxAllocation_,\\r\\n        VestingType vestingType_\\r\\n    ) external override initializer {\\r\\n        require(\\r\\n            rewardToken_ != address(0) && depositToken_ != address(0),\\r\\n            \\\"Incorrect token address\\\"\\r\\n        );\\r\\n        require(minAllocation_ <= maxAllocation_, \\\"Incorrect allocation size\\\");\\r\\n        require(\\r\\n            initialUnlockPercentage_ <= MAX_INITIAL_PERCENTAGE,\\r\\n            \\\"Incorrect initial percentage\\\"\\r\\n        );\\r\\n        require(signer_ != address(0), \\\"Incorrect signer address\\\");\\r\\n\\r\\n        _initialPercentage = initialUnlockPercentage_;\\r\\n        _minAllocation = minAllocation_;\\r\\n        _maxAllocation = maxAllocation_;\\r\\n        _name = name_;\\r\\n        _vestingType = vestingType_;\\r\\n        _rewardToken = IERC20(rewardToken_);\\r\\n        _depositToken = IERC20(depositToken_);\\r\\n        rewardTokenDecimals = IERC20Metadata(rewardToken_).decimals();\\r\\n        stakedTokenDecimals = IERC20Metadata(depositToken_).decimals();\\r\\n\\r\\n        signer = signer_;\\r\\n\\r\\n        __Ownable_init();\\r\\n        __EIP712_init(\\\"Vesting\\\", \\\"v1\\\");\\r\\n    }\\r\\n\\r\\n    function getTimePoint()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256 startDate, uint256 endDate)\\r\\n    {\\r\\n        return (_startDate, _endDate);\\r\\n    }\\r\\n\\r\\n    function getAvailAmountToDeposit(address _addr)\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256 minAvailAllocation, uint256 maxAvailAllocation)\\r\\n    {\\r\\n        uint256 totalCurrency = convertToCurrency(_totalSupply);\\r\\n\\r\\n        if (totalCurrency <= _totalDeposited) {\\r\\n            return (0, 0);\\r\\n        }\\r\\n\\r\\n        uint256 depositedAmount = deposited[_addr];\\r\\n\\r\\n        uint256 remaining = totalCurrency - _totalDeposited;\\r\\n\\r\\n        uint256 maxAllocation = specificAllocation[_addr] > 0\\r\\n            ? specificAllocation[_addr]\\r\\n            : _maxAllocation;\\r\\n        maxAvailAllocation = depositedAmount < maxAllocation\\r\\n            ? Math.min(maxAllocation - depositedAmount, remaining)\\r\\n            : 0;\\r\\n        minAvailAllocation = depositedAmount == 0 ? _minAllocation : 0;\\r\\n    }\\r\\n\\r\\n    function getInfo()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (\\r\\n            string memory name,\\r\\n            address stakedToken,\\r\\n            address rewardToken,\\r\\n            uint256 minAllocation,\\r\\n            uint256 maxAllocation,\\r\\n            uint256 totalSupply,\\r\\n            uint256 totalDeposited,\\r\\n            uint256 tokenPrice,\\r\\n            uint256 initialUnlockPercentage,\\r\\n            VestingType vestingType\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            _name,\\r\\n            address(_depositToken),\\r\\n            address(_rewardToken),\\r\\n            _minAllocation,\\r\\n            _maxAllocation,\\r\\n            _totalSupply,\\r\\n            _totalDeposited,\\r\\n            _tokenPrice,\\r\\n            _initialPercentage,\\r\\n            _vestingType\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getVestingInfo()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (\\r\\n            uint256 periodDuration,\\r\\n            uint256 countPeriodOfVesting,\\r\\n            Interval[] memory intervals\\r\\n        )\\r\\n    {\\r\\n        VestingInfo memory info = _vestingInfo;\\r\\n        uint256 size = info.unlockIntervals.length;\\r\\n        intervals = new Interval[](size);\\r\\n\\r\\n        for (uint256 i = 0; i < size; i++) {\\r\\n            intervals[i] = info.unlockIntervals[i];\\r\\n        }\\r\\n        periodDuration = info.periodDuration;\\r\\n        countPeriodOfVesting = info.countPeriodOfVesting;\\r\\n    }\\r\\n\\r\\n    function getBalanceInfo(address _addr)\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256 lockedBalance, uint256 unlockedBalance)\\r\\n    {\\r\\n        uint256 tokenBalance = convertToToken(deposited[_addr]);\\r\\n\\r\\n        if (!_isVestingStarted()) {\\r\\n            return (tokenBalance, 0);\\r\\n        }\\r\\n\\r\\n        uint256 unlock = _calculateUnlock(_addr, 0);\\r\\n        return (tokenBalance - unlock - rewardsPaid[_addr], unlock);\\r\\n    }\\r\\n\\r\\n    function initializeToken(uint256 tokenPrice_, uint256 totalSypply_)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_tokenPrice == 0, \\\"Is was initialized before\\\");\\r\\n        require(totalSypply_ > 0 && tokenPrice_ > 0, \\\"Incorrect amount\\\");\\r\\n\\r\\n        _tokenPrice = tokenPrice_;\\r\\n        _totalSupply = totalSypply_;\\r\\n\\r\\n        _rewardToken.safeTransferFrom(\\r\\n            _msgSender(),\\r\\n            address(this),\\r\\n            totalSypply_\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function increaseTotalSupply(uint256 _amount)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(!isCompleted, \\\"Vesting should be not completed\\\");\\r\\n        _totalSupply += _amount;\\r\\n        _rewardToken.safeTransferFrom(_msgSender(), address(this), _amount);\\r\\n        emit IncreaseTotalSupply(_amount);\\r\\n    }\\r\\n\\r\\n    function setTimePoint(uint256 startDate_, uint256 endDate_)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            startDate_ < endDate_ && block.timestamp < startDate_,\\r\\n            \\\"Incorrect dates\\\"\\r\\n        );\\r\\n        _startDate = startDate_;\\r\\n        _endDate = endDate_;\\r\\n        emit SetTimePoint(startDate_, endDate_);\\r\\n    }\\r\\n\\r\\n    function setSigner(address addr_) external virtual override onlyOwner {\\r\\n        require(addr_ != address(0), \\\"Incorrect signer address\\\");\\r\\n        signer = addr_;\\r\\n    }\\r\\n\\r\\n    function setSpecificAllocation(\\r\\n        address[] calldata addrs_,\\r\\n        uint256[] calldata amount_\\r\\n    ) external virtual override onlyOwner {\\r\\n        require(addrs_.length == amount_.length, \\\"Diff array size\\\");\\r\\n        uint256 index = 0;\\r\\n        for (index; index < addrs_.length; index++) {\\r\\n            specificAllocation[addrs_[index]] = amount_[index];\\r\\n            if (gasleft() < 20000) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (index != addrs_.length) {\\r\\n            index++;\\r\\n        }\\r\\n        emit SetSpecificAllocation(addrs_[:index], amount_[:index]);\\r\\n    }\\r\\n\\r\\n    function setSpecificVesting(\\r\\n        address addr_,\\r\\n        uint256 periodDuration_,\\r\\n        uint256 countPeriodOfVesting_,\\r\\n        uint256 cliffDuration_,\\r\\n        Interval[] calldata intervals_\\r\\n    ) external virtual override onlyOwner {\\r\\n        VestingInfo storage info = specificVesting[addr_];\\r\\n        require(\\r\\n            !(info.countPeriodOfVesting > 0 || info.unlockIntervals.length > 0),\\r\\n            \\\"was initialized before\\\"\\r\\n        );\\r\\n        _setVesting(\\r\\n            info,\\r\\n            periodDuration_,\\r\\n            countPeriodOfVesting_,\\r\\n            cliffDuration_,\\r\\n            intervals_\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setVesting(\\r\\n        uint256 periodDuration_,\\r\\n        uint256 countPeriodOfVesting_,\\r\\n        uint256 cliffDuration_,\\r\\n        Interval[] calldata intervals_\\r\\n    ) external virtual override onlyOwner {\\r\\n        VestingInfo storage info = _vestingInfo;\\r\\n        _setVesting(\\r\\n            info,\\r\\n            periodDuration_,\\r\\n            countPeriodOfVesting_,\\r\\n            cliffDuration_,\\r\\n            intervals_\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addDepositeAmount(\\r\\n        address[] calldata _addrArr,\\r\\n        uint256[] calldata _amountArr\\r\\n    ) external virtual override onlyOwner {\\r\\n        require(_addrArr.length == _amountArr.length, \\\"Incorrect array length\\\");\\r\\n        require(!_isVestingStarted(), \\\"Sale is closed\\\");\\r\\n\\r\\n        uint256 remainingAllocation = _totalSupply -\\r\\n            convertToToken(_totalDeposited);\\r\\n        uint256 index = 0;\\r\\n        for (index; index < _addrArr.length; index++) {\\r\\n            uint256 convertAmount = convertToToken(_amountArr[index]);\\r\\n            require(\\r\\n                convertAmount <= remainingAllocation,\\r\\n                \\\"Not enough allocation\\\"\\r\\n            );\\r\\n            remainingAllocation -= convertAmount;\\r\\n            deposited[_addrArr[index]] += _amountArr[index];\\r\\n            _totalDeposited += _amountArr[index];\\r\\n            if (gasleft() < 40000) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (index != _addrArr.length) {\\r\\n            index++;\\r\\n        }\\r\\n\\r\\n        emit Deposites(_addrArr[:index], _amountArr[:index]);\\r\\n    }\\r\\n\\r\\n    function completeVesting() external virtual override onlyOwner {\\r\\n        require(_isVestingStarted(), \\\"Vesting can't be started\\\");\\r\\n        require(!isCompleted, \\\"Complete was called before\\\");\\r\\n        isCompleted = true;\\r\\n\\r\\n        uint256 soldToken = convertToToken(_totalDeposited);\\r\\n\\r\\n        if (soldToken < _totalSupply)\\r\\n            _rewardToken.safeTransfer(_msgSender(), _totalSupply - soldToken);\\r\\n\\r\\n        uint256 balance = _depositToken.balanceOf(address(this));\\r\\n        _depositToken.safeTransfer(_msgSender(), balance);\\r\\n    }\\r\\n\\r\\n    function deposite(\\r\\n        uint256 _amount,\\r\\n        bool _fiat,\\r\\n        uint256 _nonce,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external virtual override {\\r\\n        require(!nonces[_msgSender()][_nonce], \\\"Nonce used before\\\");\\r\\n        require(\\r\\n            _isValidSigner(_msgSender(), _amount, _fiat, _nonce, _v, _r, _s),\\r\\n            \\\"Invalid signer\\\"\\r\\n        );\\r\\n        require(_isSale(), \\\"Sale is closed\\\");\\r\\n        require(_isValidAmount(_amount), \\\"Invalid amount\\\");\\r\\n\\r\\n        nonces[_msgSender()][_nonce] = true;\\r\\n        deposited[_msgSender()] += _amount;\\r\\n        _totalDeposited += _amount;\\r\\n\\r\\n        uint256 transferAmount = _convertToCorrectDecimals(\\r\\n            _amount,\\r\\n            rewardTokenDecimals,\\r\\n            stakedTokenDecimals\\r\\n        );\\r\\n        if (!_fiat) {\\r\\n            _depositToken.safeTransferFrom(\\r\\n                _msgSender(),\\r\\n                address(this),\\r\\n                transferAmount\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (VestingType.SWAP == _vestingType) {\\r\\n            uint256 tokenAmount = convertToToken(_amount);\\r\\n            rewardsPaid[_msgSender()] += tokenAmount;\\r\\n            _rewardToken.safeTransfer(_msgSender(), tokenAmount);\\r\\n            emit Harvest(_msgSender(), tokenAmount);\\r\\n        }\\r\\n\\r\\n        emit Deposite(_msgSender(), _amount, _fiat);\\r\\n    }\\r\\n\\r\\n    function harvestFor(address _addr) external virtual override {\\r\\n        _harvest(_addr, 0);\\r\\n    }\\r\\n\\r\\n    function harvest() external virtual override {\\r\\n        _harvest(_msgSender(), 0);\\r\\n    }\\r\\n\\r\\n    function harvestInterval(uint256 intervalIndex) external virtual override {\\r\\n        _harvest(_msgSender(), intervalIndex);\\r\\n    }\\r\\n\\r\\n    function DOMAIN_SEPARATOR()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return _domainSeparatorV4();\\r\\n    }\\r\\n\\r\\n    function convertToToken(uint256 _amount)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return (_amount * 10**rewardTokenDecimals) / _tokenPrice;\\r\\n    }\\r\\n\\r\\n    function convertToCurrency(uint256 _amount)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return (_amount * _tokenPrice) / 10**rewardTokenDecimals;\\r\\n    }\\r\\n\\r\\n    function _calculateUnlock(address _addr, uint256 intervalIndex)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 tokenAmount = convertToToken(deposited[_addr]);\\r\\n        uint256 oldRewards = rewardsPaid[_addr];\\r\\n\\r\\n        VestingInfo memory info = specificVesting[_addr].periodDuration > 0 ||\\r\\n            specificVesting[_addr].unlockIntervals.length > 0\\r\\n            ? specificVesting[_addr]\\r\\n            : _vestingInfo;\\r\\n\\r\\n        if (VestingType.LINEAR_VESTING == _vestingType) {\\r\\n            tokenAmount = _calculateLinearUnlock(info, tokenAmount);\\r\\n        } else if (VestingType.INTERVAL_VESTING == _vestingType) {\\r\\n            tokenAmount = _calculateIntervalUnlock(\\r\\n                info.unlockIntervals,\\r\\n                tokenAmount,\\r\\n                intervalIndex\\r\\n            );\\r\\n        }\\r\\n        return tokenAmount > oldRewards ? tokenAmount - oldRewards : 0;\\r\\n    }\\r\\n\\r\\n    function _calculateLinearUnlock(\\r\\n        VestingInfo memory info,\\r\\n        uint256 tokenAmount\\r\\n    ) internal view virtual returns (uint256) {\\r\\n        if (block.timestamp > _endDate + info.cliffDuration) {\\r\\n            uint256 initialUnlockAmount = (tokenAmount * _initialPercentage) /\\r\\n                MAX_INITIAL_PERCENTAGE;\\r\\n            uint256 passePeriod = Math.min(\\r\\n                (block.timestamp - _endDate - info.cliffDuration) /\\r\\n                    info.periodDuration,\\r\\n                info.countPeriodOfVesting\\r\\n            );\\r\\n            return\\r\\n                (((tokenAmount - initialUnlockAmount) * passePeriod) /\\r\\n                    info.countPeriodOfVesting) + initialUnlockAmount;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _calculateIntervalUnlock(\\r\\n        Interval[] memory intervals,\\r\\n        uint256 tokenAmount,\\r\\n        uint256 intervalIndex\\r\\n    ) internal view virtual returns (uint256) {\\r\\n        uint256 unlockPercentage = _initialPercentage;\\r\\n        if (intervalIndex > 0) {\\r\\n            require(\\r\\n                intervals[intervalIndex].timeStamp < block.timestamp,\\r\\n                \\\"Incorrect interval index\\\"\\r\\n            );\\r\\n            unlockPercentage = intervals[intervalIndex].percentage;\\r\\n        } else {\\r\\n            for (uint256 i = 0; i < intervals.length; i++) {\\r\\n                if (block.timestamp > intervals[i].timeStamp) {\\r\\n                    unlockPercentage = intervals[i].percentage;\\r\\n                } else {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (tokenAmount * unlockPercentage) / MAX_INITIAL_PERCENTAGE;\\r\\n    }\\r\\n\\r\\n    function _convertToCorrectDecimals(\\r\\n        uint256 _amount,\\r\\n        uint256 _fromDecimals,\\r\\n        uint256 _toDecimals\\r\\n    ) internal pure virtual returns (uint256) {\\r\\n        if (_fromDecimals < _toDecimals) {\\r\\n            _amount = _amount * (10**(_toDecimals - _fromDecimals));\\r\\n        } else if (_fromDecimals > _toDecimals) {\\r\\n            _amount = _amount / (10**(_fromDecimals - _toDecimals));\\r\\n        }\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    function _isVestingStarted() internal view virtual returns (bool) {\\r\\n        return block.timestamp > _endDate && _endDate != 0;\\r\\n    }\\r\\n\\r\\n    function _isSale() internal view virtual returns (bool) {\\r\\n        return block.timestamp >= _startDate && block.timestamp < _endDate;\\r\\n    }\\r\\n\\r\\n    function _isValidSigner(\\r\\n        address _sender,\\r\\n        uint256 _amount,\\r\\n        bool _fiat,\\r\\n        uint256 _nonce,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) internal view virtual returns (bool) {\\r\\n        bytes32 structHash = keccak256(\\r\\n            abi.encode(_CONTAINER_TYPEHASE, _sender, _amount, _fiat, _nonce)\\r\\n        );\\r\\n        bytes32 hash = _hashTypedDataV4(structHash);\\r\\n        address messageSigner = ECDSAUpgradeable.recover(hash, _v, _r, _s);\\r\\n\\r\\n        return messageSigner == signer;\\r\\n    }\\r\\n\\r\\n    function _isValidAmount(uint256 _amount)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 maxAllocation = specificAllocation[_msgSender()] > 0\\r\\n            ? specificAllocation[_msgSender()]\\r\\n            : _maxAllocation;\\r\\n        uint256 depositAmount = deposited[_msgSender()];\\r\\n        uint256 remainingAmount = Math.min(\\r\\n            maxAllocation - depositAmount,\\r\\n            convertToCurrency(_totalSupply) - _totalDeposited\\r\\n        );\\r\\n        return\\r\\n            (_amount < _minAllocation && depositAmount == 0) ||\\r\\n                (_amount > maxAllocation || _amount > remainingAmount)\\r\\n                ? false\\r\\n                : true;\\r\\n    }\\r\\n\\r\\n    function _setVesting(\\r\\n        VestingInfo storage info,\\r\\n        uint256 periodDuration_,\\r\\n        uint256 countPeriodOfVesting_,\\r\\n        uint256 cliffDuration_,\\r\\n        Interval[] calldata _intervals\\r\\n    ) internal virtual {\\r\\n        if (VestingType.LINEAR_VESTING == _vestingType) {\\r\\n            require(\\r\\n                countPeriodOfVesting_ > 0 && periodDuration_ > 0,\\r\\n                \\\"Incorrect linear vesting setup\\\"\\r\\n            );\\r\\n            info.periodDuration = periodDuration_;\\r\\n            info.countPeriodOfVesting = countPeriodOfVesting_;\\r\\n            info.cliffDuration = cliffDuration_;\\r\\n        } else {\\r\\n            delete info.unlockIntervals;\\r\\n            uint256 lastUnlockingPart = _initialPercentage;\\r\\n            uint256 lastIntervalStartingTimestamp = _endDate;\\r\\n            for (uint256 i = 0; i < _intervals.length; i++) {\\r\\n                uint256 percent = _intervals[i].percentage;\\r\\n                require(\\r\\n                    percent > lastUnlockingPart &&\\r\\n                        percent <= MAX_INITIAL_PERCENTAGE,\\r\\n                    \\\"Invalid interval unlocking part\\\"\\r\\n                );\\r\\n                require(\\r\\n                    _intervals[i].timeStamp > lastIntervalStartingTimestamp,\\r\\n                    \\\"Invalid interval starting timestamp\\\"\\r\\n                );\\r\\n                lastUnlockingPart = percent;\\r\\n                info.unlockIntervals.push(_intervals[i]);\\r\\n            }\\r\\n            require(\\r\\n                lastUnlockingPart == MAX_INITIAL_PERCENTAGE,\\r\\n                \\\"Invalid interval unlocking part\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _harvest(address _addr, uint256 intervalIndex) internal virtual {\\r\\n        require(_isVestingStarted(), \\\"Vesting can't be started\\\");\\r\\n\\r\\n        uint256 amountToTransfer = _calculateUnlock(_addr, intervalIndex);\\r\\n\\r\\n        require(amountToTransfer > 0, \\\"Amount is zero\\\");\\r\\n\\r\\n        rewardsPaid[_addr] += amountToTransfer;\\r\\n\\r\\n        _rewardToken.safeTransfer(_addr, amountToTransfer);\\r\\n\\r\\n        emit Harvest(_addr, amountToTransfer);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface IVesting {\\r\\n    event Harvest(address indexed sender, uint256 amount);\\r\\n    event Deposite(address indexed sender, uint256 amount, bool isFiat);\\r\\n    event Deposites(address[] senders, uint256[] amounts);\\r\\n    event SetSpecificAllocation(address[] users, uint256[] allocation);\\r\\n    event IncreaseTotalSupply(uint256 amount);\\r\\n    event SetTimePoint(uint256 startDate, uint256 endDate);\\r\\n\\r\\n    enum VestingType {\\r\\n        SWAP,\\r\\n        LINEAR_VESTING,\\r\\n        INTERVAL_VESTING\\r\\n    }\\r\\n\\r\\n    struct Interval {\\r\\n        uint256 timeStamp;\\r\\n        uint256 percentage;\\r\\n    }\\r\\n\\r\\n    struct VestingInfo {\\r\\n        uint256 periodDuration;\\r\\n        uint256 countPeriodOfVesting;\\r\\n        uint256 cliffDuration;\\r\\n        Interval[] unlockIntervals;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        string memory name_,\\r\\n        address rewardToken_,\\r\\n        address depositToken_,\\r\\n        address signer_,\\r\\n        uint256 initialUnlockPercentage_,\\r\\n        uint256 minAllocation_,\\r\\n        uint256 maxAllocation_,\\r\\n        VestingType vestingType_\\r\\n    ) external;\\r\\n\\r\\n    function getAvailAmountToDeposit(address _addr)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 minAvailAllocation, uint256 maxAvailAllocation);\\r\\n\\r\\n    function getInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            string memory name,\\r\\n            address stakedToken,\\r\\n            address rewardToken,\\r\\n            uint256 minAllocation,\\r\\n            uint256 maxAllocation,\\r\\n            uint256 totalSupply,\\r\\n            uint256 totalDeposited,\\r\\n            uint256 tokenPrice,\\r\\n            uint256 initialUnlockPercentage,\\r\\n            VestingType vestingType\\r\\n        );\\r\\n\\r\\n    function getVestingInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 periodDuration,\\r\\n            uint256 countPeriodOfVesting,\\r\\n            Interval[] memory intervals\\r\\n        );\\r\\n\\r\\n    function getBalanceInfo(address _addr)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 lockedBalance, uint256 unlockedBalance);\\r\\n\\r\\n    function initializeToken(uint256 tokenPrice_, uint256 totalSypply_)\\r\\n        external;\\r\\n\\r\\n    function increaseTotalSupply(uint256 _amount) external;\\r\\n\\r\\n    function setTimePoint(uint256 _startDate, uint256 _endDate) external;\\r\\n\\r\\n    function setSigner(address addr_) external;\\r\\n\\r\\n    function setSpecificAllocation(\\r\\n        address[] calldata addrs_,\\r\\n        uint256[] calldata amount_\\r\\n    ) external;\\r\\n\\r\\n    function setSpecificVesting(\\r\\n        address addr_,\\r\\n        uint256 periodDuration_,\\r\\n        uint256 countPeriodOfVesting_,\\r\\n        uint256 cliffPeriod_,\\r\\n        Interval[] calldata intervals_\\r\\n    ) external;\\r\\n\\r\\n    function setVesting(\\r\\n        uint256 periodDuration_,\\r\\n        uint256 countPeriodOfVesting_,\\r\\n        uint256 cliffPeriod_,\\r\\n        Interval[] calldata intervals_\\r\\n    ) external;\\r\\n\\r\\n    function addDepositeAmount(\\r\\n        address[] calldata _addrArr,\\r\\n        uint256[] calldata _amountArr\\r\\n    ) external;\\r\\n\\r\\n    function completeVesting() external;\\r\\n\\r\\n    function deposite(\\r\\n        uint256 _amount,\\r\\n        bool _fiat,\\r\\n        uint256 _nonce,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external;\\r\\n\\r\\n    function harvestFor(address _addr) external;\\r\\n\\r\\n    function harvest() external;\\r\\n\\r\\n    function harvestInterval(uint256 intervalIndex) external;\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function convertToToken(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    function convertToCurrency(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    function getTimePoint()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 startDate, uint256 endDate);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IERC20Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface IERC20Mintable {\\r\\n    function mint(address _to, uint256 _value) external;\\r\\n\\r\\n    function burn(address account, uint256 amount) external;\\r\\n\\r\\n    function burnFrom(address account, uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFiat\",\"type\":\"bool\"}],\"name\":\"Deposite\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Deposites\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncreaseTotalSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"allocation\",\"type\":\"uint256[]\"}],\"name\":\"SetSpecificAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"SetTimePoint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INITIAL_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrArr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountArr\",\"type\":\"uint256[]\"}],\"name\":\"addDepositeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertToCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_fiat\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"deposite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getAvailAmountToDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minAvailAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAvailAllocation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getBalanceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialUnlockPercentage\",\"type\":\"uint256\"},{\"internalType\":\"enum IVesting.VestingType\",\"name\":\"vestingType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimePoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"periodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countPeriodOfVesting\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct IVesting.Interval[]\",\"name\":\"intervals\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"harvestFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"intervalIndex\",\"type\":\"uint256\"}],\"name\":\"harvestInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialUnlockPercentage_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAllocation_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllocation_\",\"type\":\"uint256\"},{\"internalType\":\"enum IVesting.VestingType\",\"name\":\"vestingType_\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSypply_\",\"type\":\"uint256\"}],\"name\":\"initializeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount_\",\"type\":\"uint256[]\"}],\"name\":\"setSpecificAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"periodDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countPeriodOfVesting_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct IVesting.Interval[]\",\"name\":\"intervals_\",\"type\":\"tuple[]\"}],\"name\":\"setSpecificVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startDate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate_\",\"type\":\"uint256\"}],\"name\":\"setTimePoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countPeriodOfVesting_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct IVesting.Interval[]\",\"name\":\"intervals_\",\"type\":\"tuple[]\"}],\"name\":\"setVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"specificAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"specificVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"periodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countPeriodOfVesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Vesting","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}