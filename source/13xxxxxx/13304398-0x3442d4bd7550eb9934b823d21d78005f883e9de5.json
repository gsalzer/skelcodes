{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n   ____            __   __        __   _\r\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\r\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\r\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\r\n     /___/\r\n\r\n* Synthetix: ExchangeRatesWithDexPricing.sol\r\n*\r\n* Latest source (may be newer): https://github.com/Synthetixio/synthetix/blob/master/contracts/ExchangeRatesWithDexPricing.sol\r\n* Docs: https://docs.synthetix.io/contracts/ExchangeRatesWithDexPricing\r\n*\r\n* Contract Dependencies: \r\n*\t- ExchangeRates\r\n*\t- IAddressResolver\r\n*\t- IExchangeRates\r\n*\t- MixinResolver\r\n*\t- MixinSystemSettings\r\n*\t- Owned\r\n* Libraries: \r\n*\t- Math\r\n*\t- SafeDecimalMath\r\n*\t- SafeMath\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2021 Synthetix\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\n\r\n\r\npragma solidity ^0.5.16;\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/owned\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    constructor(address _owner) public {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    function _onlyOwner() private view {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\r\ninterface IAddressResolver {\r\n    function getAddress(bytes32 name) external view returns (address);\r\n\r\n    function getSynth(bytes32 key) external view returns (address);\r\n\r\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/isynth\r\ninterface ISynth {\r\n    // Views\r\n    function currencyKey() external view returns (bytes32);\r\n\r\n    function transferableSynths(address account) external view returns (uint);\r\n\r\n    // Mutative functions\r\n    function transferAndSettle(address to, uint value) external returns (bool);\r\n\r\n    function transferFromAndSettle(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    // Restricted: used internally to Synthetix\r\n    function burn(address account, uint amount) external;\r\n\r\n    function issue(address account, uint amount) external;\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/iissuer\r\ninterface IIssuer {\r\n    // Views\r\n    function anySynthOrSNXRateIsInvalid() external view returns (bool anyRateInvalid);\r\n\r\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\r\n\r\n    function availableSynthCount() external view returns (uint);\r\n\r\n    function availableSynths(uint index) external view returns (ISynth);\r\n\r\n    function canBurnSynths(address account) external view returns (bool);\r\n\r\n    function collateral(address account) external view returns (uint);\r\n\r\n    function collateralisationRatio(address issuer) external view returns (uint);\r\n\r\n    function collateralisationRatioAndAnyRatesInvalid(address _issuer)\r\n        external\r\n        view\r\n        returns (uint cratio, bool anyRateIsInvalid);\r\n\r\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint debtBalance);\r\n\r\n    function issuanceRatio() external view returns (uint);\r\n\r\n    function lastIssueEvent(address account) external view returns (uint);\r\n\r\n    function maxIssuableSynths(address issuer) external view returns (uint maxIssuable);\r\n\r\n    function minimumStakeTime() external view returns (uint);\r\n\r\n    function remainingIssuableSynths(address issuer)\r\n        external\r\n        view\r\n        returns (\r\n            uint maxIssuable,\r\n            uint alreadyIssued,\r\n            uint totalSystemDebt\r\n        );\r\n\r\n    function synths(bytes32 currencyKey) external view returns (ISynth);\r\n\r\n    function getSynths(bytes32[] calldata currencyKeys) external view returns (ISynth[] memory);\r\n\r\n    function synthsByAddress(address synthAddress) external view returns (bytes32);\r\n\r\n    function totalIssuedSynths(bytes32 currencyKey, bool excludeOtherCollateral) external view returns (uint);\r\n\r\n    function transferableSynthetixAndAnyRateIsInvalid(address account, uint balance)\r\n        external\r\n        view\r\n        returns (uint transferable, bool anyRateIsInvalid);\r\n\r\n    // Restricted: used internally to Synthetix\r\n    function issueSynths(address from, uint amount) external;\r\n\r\n    function issueSynthsOnBehalf(\r\n        address issueFor,\r\n        address from,\r\n        uint amount\r\n    ) external;\r\n\r\n    function issueMaxSynths(address from) external;\r\n\r\n    function issueMaxSynthsOnBehalf(address issueFor, address from) external;\r\n\r\n    function burnSynths(address from, uint amount) external;\r\n\r\n    function burnSynthsOnBehalf(\r\n        address burnForAddress,\r\n        address from,\r\n        uint amount\r\n    ) external;\r\n\r\n    function burnSynthsToTarget(address from) external;\r\n\r\n    function burnSynthsToTargetOnBehalf(address burnForAddress, address from) external;\r\n\r\n    function burnForRedemption(\r\n        address deprecatedSynthProxy,\r\n        address account,\r\n        uint balance\r\n    ) external;\r\n\r\n    function liquidateDelinquentAccount(\r\n        address account,\r\n        uint susdAmount,\r\n        address liquidator\r\n    ) external returns (uint totalRedeemed, uint amountToLiquidate);\r\n}\r\n\r\n\r\n// Inheritance\r\n\r\n\r\n// Internal references\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/addressresolver\r\ncontract AddressResolver is Owned, IAddressResolver {\r\n    mapping(bytes32 => address) public repository;\r\n\r\n    constructor(address _owner) public Owned(_owner) {}\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function importAddresses(bytes32[] calldata names, address[] calldata destinations) external onlyOwner {\r\n        require(names.length == destinations.length, \"Input lengths must match\");\r\n\r\n        for (uint i = 0; i < names.length; i++) {\r\n            bytes32 name = names[i];\r\n            address destination = destinations[i];\r\n            repository[name] = destination;\r\n            emit AddressImported(name, destination);\r\n        }\r\n    }\r\n\r\n    /* ========= PUBLIC FUNCTIONS ========== */\r\n\r\n    function rebuildCaches(MixinResolver[] calldata destinations) external {\r\n        for (uint i = 0; i < destinations.length; i++) {\r\n            destinations[i].rebuildCache();\r\n        }\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function areAddressesImported(bytes32[] calldata names, address[] calldata destinations) external view returns (bool) {\r\n        for (uint i = 0; i < names.length; i++) {\r\n            if (repository[names[i]] != destinations[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getAddress(bytes32 name) external view returns (address) {\r\n        return repository[name];\r\n    }\r\n\r\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address) {\r\n        address _foundAddress = repository[name];\r\n        require(_foundAddress != address(0), reason);\r\n        return _foundAddress;\r\n    }\r\n\r\n    function getSynth(bytes32 key) external view returns (address) {\r\n        IIssuer issuer = IIssuer(repository[\"Issuer\"]);\r\n        require(address(issuer) != address(0), \"Cannot find Issuer address\");\r\n        return address(issuer.synths(key));\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event AddressImported(bytes32 name, address destination);\r\n}\r\n\r\n\r\n// Internal references\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/mixinresolver\r\ncontract MixinResolver {\r\n    AddressResolver public resolver;\r\n\r\n    mapping(bytes32 => address) private addressCache;\r\n\r\n    constructor(address _resolver) internal {\r\n        resolver = AddressResolver(_resolver);\r\n    }\r\n\r\n    /* ========== INTERNAL FUNCTIONS ========== */\r\n\r\n    function combineArrays(bytes32[] memory first, bytes32[] memory second)\r\n        internal\r\n        pure\r\n        returns (bytes32[] memory combination)\r\n    {\r\n        combination = new bytes32[](first.length + second.length);\r\n\r\n        for (uint i = 0; i < first.length; i++) {\r\n            combination[i] = first[i];\r\n        }\r\n\r\n        for (uint j = 0; j < second.length; j++) {\r\n            combination[first.length + j] = second[j];\r\n        }\r\n    }\r\n\r\n    /* ========== PUBLIC FUNCTIONS ========== */\r\n\r\n    // Note: this function is public not external in order for it to be overridden and invoked via super in subclasses\r\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {}\r\n\r\n    function rebuildCache() public {\r\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\r\n        // The resolver must call this function whenver it updates its state\r\n        for (uint i = 0; i < requiredAddresses.length; i++) {\r\n            bytes32 name = requiredAddresses[i];\r\n            // Note: can only be invoked once the resolver has all the targets needed added\r\n            address destination =\r\n                resolver.requireAndGetAddress(name, string(abi.encodePacked(\"Resolver missing target: \", name)));\r\n            addressCache[name] = destination;\r\n            emit CacheUpdated(name, destination);\r\n        }\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function isResolverCached() external view returns (bool) {\r\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\r\n        for (uint i = 0; i < requiredAddresses.length; i++) {\r\n            bytes32 name = requiredAddresses[i];\r\n            // false if our cache is invalid or if the resolver doesn't have the required address\r\n            if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /* ========== INTERNAL FUNCTIONS ========== */\r\n\r\n    function requireAndGetAddress(bytes32 name) internal view returns (address) {\r\n        address _foundAddress = addressCache[name];\r\n        require(_foundAddress != address(0), string(abi.encodePacked(\"Missing address: \", name)));\r\n        return _foundAddress;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event CacheUpdated(bytes32 name, address destination);\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/iflexiblestorage\r\ninterface IFlexibleStorage {\r\n    // Views\r\n    function getUIntValue(bytes32 contractName, bytes32 record) external view returns (uint);\r\n\r\n    function getUIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (uint[] memory);\r\n\r\n    function getIntValue(bytes32 contractName, bytes32 record) external view returns (int);\r\n\r\n    function getIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (int[] memory);\r\n\r\n    function getAddressValue(bytes32 contractName, bytes32 record) external view returns (address);\r\n\r\n    function getAddressValues(bytes32 contractName, bytes32[] calldata records) external view returns (address[] memory);\r\n\r\n    function getBoolValue(bytes32 contractName, bytes32 record) external view returns (bool);\r\n\r\n    function getBoolValues(bytes32 contractName, bytes32[] calldata records) external view returns (bool[] memory);\r\n\r\n    function getBytes32Value(bytes32 contractName, bytes32 record) external view returns (bytes32);\r\n\r\n    function getBytes32Values(bytes32 contractName, bytes32[] calldata records) external view returns (bytes32[] memory);\r\n\r\n    // Mutative functions\r\n    function deleteUIntValue(bytes32 contractName, bytes32 record) external;\r\n\r\n    function deleteIntValue(bytes32 contractName, bytes32 record) external;\r\n\r\n    function deleteAddressValue(bytes32 contractName, bytes32 record) external;\r\n\r\n    function deleteBoolValue(bytes32 contractName, bytes32 record) external;\r\n\r\n    function deleteBytes32Value(bytes32 contractName, bytes32 record) external;\r\n\r\n    function setUIntValue(\r\n        bytes32 contractName,\r\n        bytes32 record,\r\n        uint value\r\n    ) external;\r\n\r\n    function setUIntValues(\r\n        bytes32 contractName,\r\n        bytes32[] calldata records,\r\n        uint[] calldata values\r\n    ) external;\r\n\r\n    function setIntValue(\r\n        bytes32 contractName,\r\n        bytes32 record,\r\n        int value\r\n    ) external;\r\n\r\n    function setIntValues(\r\n        bytes32 contractName,\r\n        bytes32[] calldata records,\r\n        int[] calldata values\r\n    ) external;\r\n\r\n    function setAddressValue(\r\n        bytes32 contractName,\r\n        bytes32 record,\r\n        address value\r\n    ) external;\r\n\r\n    function setAddressValues(\r\n        bytes32 contractName,\r\n        bytes32[] calldata records,\r\n        address[] calldata values\r\n    ) external;\r\n\r\n    function setBoolValue(\r\n        bytes32 contractName,\r\n        bytes32 record,\r\n        bool value\r\n    ) external;\r\n\r\n    function setBoolValues(\r\n        bytes32 contractName,\r\n        bytes32[] calldata records,\r\n        bool[] calldata values\r\n    ) external;\r\n\r\n    function setBytes32Value(\r\n        bytes32 contractName,\r\n        bytes32 record,\r\n        bytes32 value\r\n    ) external;\r\n\r\n    function setBytes32Values(\r\n        bytes32 contractName,\r\n        bytes32[] calldata records,\r\n        bytes32[] calldata values\r\n    ) external;\r\n}\r\n\r\n\r\n// Internal references\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/mixinsystemsettings\r\ncontract MixinSystemSettings is MixinResolver {\r\n    bytes32 internal constant SETTING_CONTRACT_NAME = \"SystemSettings\";\r\n\r\n    bytes32 internal constant SETTING_WAITING_PERIOD_SECS = \"waitingPeriodSecs\";\r\n    bytes32 internal constant SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR = \"priceDeviationThresholdFactor\";\r\n    bytes32 internal constant SETTING_ISSUANCE_RATIO = \"issuanceRatio\";\r\n    bytes32 internal constant SETTING_FEE_PERIOD_DURATION = \"feePeriodDuration\";\r\n    bytes32 internal constant SETTING_TARGET_THRESHOLD = \"targetThreshold\";\r\n    bytes32 internal constant SETTING_LIQUIDATION_DELAY = \"liquidationDelay\";\r\n    bytes32 internal constant SETTING_LIQUIDATION_RATIO = \"liquidationRatio\";\r\n    bytes32 internal constant SETTING_LIQUIDATION_PENALTY = \"liquidationPenalty\";\r\n    bytes32 internal constant SETTING_RATE_STALE_PERIOD = \"rateStalePeriod\";\r\n    bytes32 internal constant SETTING_EXCHANGE_FEE_RATE = \"exchangeFeeRate\";\r\n    bytes32 internal constant SETTING_MINIMUM_STAKE_TIME = \"minimumStakeTime\";\r\n    bytes32 internal constant SETTING_AGGREGATOR_WARNING_FLAGS = \"aggregatorWarningFlags\";\r\n    bytes32 internal constant SETTING_TRADING_REWARDS_ENABLED = \"tradingRewardsEnabled\";\r\n    bytes32 internal constant SETTING_DEBT_SNAPSHOT_STALE_TIME = \"debtSnapshotStaleTime\";\r\n    bytes32 internal constant SETTING_CROSS_DOMAIN_DEPOSIT_GAS_LIMIT = \"crossDomainDepositGasLimit\";\r\n    bytes32 internal constant SETTING_CROSS_DOMAIN_ESCROW_GAS_LIMIT = \"crossDomainEscrowGasLimit\";\r\n    bytes32 internal constant SETTING_CROSS_DOMAIN_REWARD_GAS_LIMIT = \"crossDomainRewardGasLimit\";\r\n    bytes32 internal constant SETTING_CROSS_DOMAIN_WITHDRAWAL_GAS_LIMIT = \"crossDomainWithdrawalGasLimit\";\r\n    bytes32 internal constant SETTING_ETHER_WRAPPER_MAX_ETH = \"etherWrapperMaxETH\";\r\n    bytes32 internal constant SETTING_ETHER_WRAPPER_MINT_FEE_RATE = \"etherWrapperMintFeeRate\";\r\n    bytes32 internal constant SETTING_ETHER_WRAPPER_BURN_FEE_RATE = \"etherWrapperBurnFeeRate\";\r\n    bytes32 internal constant SETTING_ATOMIC_MAX_VOLUME_PER_BLOCK = \"atomicMaxVolumePerBlock\";\r\n    bytes32 internal constant SETTING_ATOMIC_TWAP_WINDOW = \"atomicTwapWindow\";\r\n    bytes32 internal constant SETTING_ATOMIC_EQUIVALENT_FOR_DEX_PRICING = \"atomicEquivalentForDexPricing\";\r\n    bytes32 internal constant SETTING_ATOMIC_EXCHANGE_FEE_RATE = \"atomicExchangeFeeRate\";\r\n    bytes32 internal constant SETTING_ATOMIC_PRICE_BUFFER = \"atomicPriceBuffer\";\r\n    bytes32 internal constant SETTING_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW = \"atomicVolConsiderationWindow\";\r\n    bytes32 internal constant SETTING_ATOMIC_VOLATILITY_UPDATE_THRESHOLD = \"atomicVolUpdateThreshold\";\r\n\r\n    bytes32 internal constant CONTRACT_FLEXIBLESTORAGE = \"FlexibleStorage\";\r\n\r\n    enum CrossDomainMessageGasLimits {Deposit, Escrow, Reward, Withdrawal}\r\n\r\n    constructor(address _resolver) internal MixinResolver(_resolver) {}\r\n\r\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {\r\n        addresses = new bytes32[](1);\r\n        addresses[0] = CONTRACT_FLEXIBLESTORAGE;\r\n    }\r\n\r\n    function flexibleStorage() internal view returns (IFlexibleStorage) {\r\n        return IFlexibleStorage(requireAndGetAddress(CONTRACT_FLEXIBLESTORAGE));\r\n    }\r\n\r\n    function _getGasLimitSetting(CrossDomainMessageGasLimits gasLimitType) internal pure returns (bytes32) {\r\n        if (gasLimitType == CrossDomainMessageGasLimits.Deposit) {\r\n            return SETTING_CROSS_DOMAIN_DEPOSIT_GAS_LIMIT;\r\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Escrow) {\r\n            return SETTING_CROSS_DOMAIN_ESCROW_GAS_LIMIT;\r\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Reward) {\r\n            return SETTING_CROSS_DOMAIN_REWARD_GAS_LIMIT;\r\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Withdrawal) {\r\n            return SETTING_CROSS_DOMAIN_WITHDRAWAL_GAS_LIMIT;\r\n        } else {\r\n            revert(\"Unknown gas limit type\");\r\n        }\r\n    }\r\n\r\n    function getCrossDomainMessageGasLimit(CrossDomainMessageGasLimits gasLimitType) internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, _getGasLimitSetting(gasLimitType));\r\n    }\r\n\r\n    function getTradingRewardsEnabled() internal view returns (bool) {\r\n        return flexibleStorage().getBoolValue(SETTING_CONTRACT_NAME, SETTING_TRADING_REWARDS_ENABLED);\r\n    }\r\n\r\n    function getWaitingPeriodSecs() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_WAITING_PERIOD_SECS);\r\n    }\r\n\r\n    function getPriceDeviationThresholdFactor() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR);\r\n    }\r\n\r\n    function getIssuanceRatio() internal view returns (uint) {\r\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ISSUANCE_RATIO);\r\n    }\r\n\r\n    function getFeePeriodDuration() internal view returns (uint) {\r\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_FEE_PERIOD_DURATION);\r\n    }\r\n\r\n    function getTargetThreshold() internal view returns (uint) {\r\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_TARGET_THRESHOLD);\r\n    }\r\n\r\n    function getLiquidationDelay() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_DELAY);\r\n    }\r\n\r\n    function getLiquidationRatio() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_RATIO);\r\n    }\r\n\r\n    function getLiquidationPenalty() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_PENALTY);\r\n    }\r\n\r\n    function getRateStalePeriod() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_RATE_STALE_PERIOD);\r\n    }\r\n\r\n    function getExchangeFeeRate(bytes32 currencyKey) internal view returns (uint) {\r\n        return\r\n            flexibleStorage().getUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_EXCHANGE_FEE_RATE, currencyKey))\r\n            );\r\n    }\r\n\r\n    function getMinimumStakeTime() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_MINIMUM_STAKE_TIME);\r\n    }\r\n\r\n    function getAggregatorWarningFlags() internal view returns (address) {\r\n        return flexibleStorage().getAddressValue(SETTING_CONTRACT_NAME, SETTING_AGGREGATOR_WARNING_FLAGS);\r\n    }\r\n\r\n    function getDebtSnapshotStaleTime() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_DEBT_SNAPSHOT_STALE_TIME);\r\n    }\r\n\r\n    function getEtherWrapperMaxETH() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_MAX_ETH);\r\n    }\r\n\r\n    function getEtherWrapperMintFeeRate() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_MINT_FEE_RATE);\r\n    }\r\n\r\n    function getEtherWrapperBurnFeeRate() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_BURN_FEE_RATE);\r\n    }\r\n\r\n    function getAtomicMaxVolumePerBlock() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ATOMIC_MAX_VOLUME_PER_BLOCK);\r\n    }\r\n\r\n    function getAtomicTwapWindow() internal view returns (uint) {\r\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ATOMIC_TWAP_WINDOW);\r\n    }\r\n\r\n    function getAtomicEquivalentForDexPricing(bytes32 currencyKey) internal view returns (address) {\r\n        return\r\n            flexibleStorage().getAddressValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_ATOMIC_EQUIVALENT_FOR_DEX_PRICING, currencyKey))\r\n            );\r\n    }\r\n\r\n    function getAtomicExchangeFeeRate(bytes32 currencyKey) internal view returns (uint) {\r\n        return\r\n            flexibleStorage().getUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_ATOMIC_EXCHANGE_FEE_RATE, currencyKey))\r\n            );\r\n    }\r\n\r\n    function getAtomicPriceBuffer(bytes32 currencyKey) internal view returns (uint) {\r\n        return\r\n            flexibleStorage().getUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_ATOMIC_PRICE_BUFFER, currencyKey))\r\n            );\r\n    }\r\n\r\n    function getAtomicVolatilityConsiderationWindow(bytes32 currencyKey) internal view returns (uint) {\r\n        return\r\n            flexibleStorage().getUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW, currencyKey))\r\n            );\r\n    }\r\n\r\n    function getAtomicVolatilityUpdateThreshold(bytes32 currencyKey) internal view returns (uint) {\r\n        return\r\n            flexibleStorage().getUIntValue(\r\n                SETTING_CONTRACT_NAME,\r\n                keccak256(abi.encodePacked(SETTING_ATOMIC_VOLATILITY_UPDATE_THRESHOLD, currencyKey))\r\n            );\r\n    }\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/ierc20\r\ninterface IERC20 {\r\n    // ERC20 Optional Views\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    // Views\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    // Mutative functions\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/iexchangerates\r\ninterface IExchangeRates {\r\n    // Structs\r\n    struct RateAndUpdatedTime {\r\n        uint216 rate;\r\n        uint40 time;\r\n    }\r\n\r\n    struct InversePricing {\r\n        uint entryPoint;\r\n        uint upperLimit;\r\n        uint lowerLimit;\r\n        bool frozenAtUpperLimit;\r\n        bool frozenAtLowerLimit;\r\n    }\r\n\r\n    // Views\r\n    function aggregators(bytes32 currencyKey) external view returns (address);\r\n\r\n    function aggregatorWarningFlags() external view returns (address);\r\n\r\n    function anyRateIsInvalid(bytes32[] calldata currencyKeys) external view returns (bool);\r\n\r\n    function canFreezeRate(bytes32 currencyKey) external view returns (bool);\r\n\r\n    function currentRoundForRate(bytes32 currencyKey) external view returns (uint);\r\n\r\n    function currenciesUsingAggregator(address aggregator) external view returns (bytes32[] memory);\r\n\r\n    function effectiveValue(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    ) external view returns (uint value);\r\n\r\n    function effectiveValueAndRates(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint value,\r\n            uint sourceRate,\r\n            uint destinationRate\r\n        );\r\n\r\n    function effectiveAtomicValueAndRates(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint value,\r\n            uint systemValue,\r\n            uint systemSourceRate,\r\n            uint systemDestinationRate\r\n        );\r\n\r\n    function effectiveValueAtRound(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        uint roundIdForSrc,\r\n        uint roundIdForDest\r\n    ) external view returns (uint value);\r\n\r\n    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint);\r\n\r\n    function getLastRoundIdBeforeElapsedSecs(\r\n        bytes32 currencyKey,\r\n        uint startingRoundId,\r\n        uint startingTimestamp,\r\n        uint timediff\r\n    ) external view returns (uint);\r\n\r\n    function inversePricing(bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (\r\n            uint entryPoint,\r\n            uint upperLimit,\r\n            uint lowerLimit,\r\n            bool frozenAtUpperLimit,\r\n            bool frozenAtLowerLimit\r\n        );\r\n\r\n    function lastRateUpdateTimes(bytes32 currencyKey) external view returns (uint256);\r\n\r\n    function oracle() external view returns (address);\r\n\r\n    function rateAndTimestampAtRound(bytes32 currencyKey, uint roundId) external view returns (uint rate, uint time);\r\n\r\n    function rateAndUpdatedTime(bytes32 currencyKey) external view returns (uint rate, uint time);\r\n\r\n    function rateAndInvalid(bytes32 currencyKey) external view returns (uint rate, bool isInvalid);\r\n\r\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\r\n\r\n    function rateIsFlagged(bytes32 currencyKey) external view returns (bool);\r\n\r\n    function rateIsFrozen(bytes32 currencyKey) external view returns (bool);\r\n\r\n    function rateIsInvalid(bytes32 currencyKey) external view returns (bool);\r\n\r\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\r\n\r\n    function rateStalePeriod() external view returns (uint);\r\n\r\n    function ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32 currencyKey, uint numRounds)\r\n        external\r\n        view\r\n        returns (uint[] memory rates, uint[] memory times);\r\n\r\n    function ratesAndInvalidForCurrencies(bytes32[] calldata currencyKeys)\r\n        external\r\n        view\r\n        returns (uint[] memory rates, bool anyRateInvalid);\r\n\r\n    function ratesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory);\r\n\r\n    function synthTooVolatileForAtomicExchange(bytes32 currencyKey) external view returns (bool);\r\n\r\n    // Mutative functions\r\n    function freezeRate(bytes32 currencyKey) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Libraries\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\r\nlibrary SafeDecimalMath {\r\n    using SafeMath for uint;\r\n\r\n    /* Number of decimal places in the representations. */\r\n    uint8 public constant decimals = 18;\r\n    uint8 public constant highPrecisionDecimals = 27;\r\n\r\n    /* The number representing 1.0. */\r\n    uint public constant UNIT = 10**uint(decimals);\r\n\r\n    /* The number representing 1.0 for higher fidelity numbers. */\r\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\r\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\r\n\r\n    /**\r\n     * @return Provides an interface to UNIT.\r\n     */\r\n    function unit() external pure returns (uint) {\r\n        return UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return Provides an interface to PRECISE_UNIT.\r\n     */\r\n    function preciseUnit() external pure returns (uint) {\r\n        return PRECISE_UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\r\n     * decimals.\r\n     *\r\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\r\n     * so that product must be less than 2**256. As this is an integer division,\r\n     * the internal division always rounds down. This helps save on gas. Rounding\r\n     * is more expensive on gas.\r\n     */\r\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\r\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\r\n        return x.mul(y) / UNIT;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of the specified precision unit.\r\n     *\r\n     * @dev The operands should be in the form of a the specified unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function _multiplyDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\r\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of a precise unit.\r\n     *\r\n     * @dev The operands should be in the precise unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely multiplying x and y, interpreting the operands\r\n     * as fixed-point decimals of a standard unit.\r\n     *\r\n     * @dev The operands should be in the standard unit factor which will be\r\n     * divided out after the product of x and y is evaluated, so that product must be\r\n     * less than 2**256.\r\n     *\r\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\r\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\r\n     * (eg. small fractions or percentages).\r\n     */\r\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _multiplyDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is a high\r\n     * precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the standard precision unit\r\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\r\n     * this is an integer division, the result is always rounded down.\r\n     * This helps save on gas. Rounding is more expensive on gas.\r\n     */\r\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\r\n        /* Reintroduce the UNIT factor that will be divided out by y. */\r\n        return x.mul(UNIT).div(y);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * decimal in the precision unit specified in the parameter.\r\n     *\r\n     * @dev y is divided after the product of x and the specified precision unit\r\n     * is evaluated, so the product of x and the specified precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function _divideDecimalRound(\r\n        uint x,\r\n        uint y,\r\n        uint precisionUnit\r\n    ) private pure returns (uint) {\r\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\r\n\r\n        if (resultTimesTen % 10 >= 5) {\r\n            resultTimesTen += 10;\r\n        }\r\n\r\n        return resultTimesTen / 10;\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * standard precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the standard precision unit\r\n     * is evaluated, so the product of x and the standard precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, UNIT);\r\n    }\r\n\r\n    /**\r\n     * @return The result of safely dividing x and y. The return value is as a rounded\r\n     * high precision decimal.\r\n     *\r\n     * @dev y is divided after the product of x and the high precision unit\r\n     * is evaluated, so the product of x and the high precision unit must\r\n     * be less than 2**256. The result is rounded to the nearest increment.\r\n     */\r\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\r\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\r\n    }\r\n\r\n    /**\r\n     * @dev Convert a standard decimal representation to a high precision one.\r\n     */\r\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\r\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\r\n    }\r\n\r\n    /**\r\n     * @dev Convert a high precision decimal to a standard decimal representation.\r\n     */\r\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\r\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\r\n\r\n        if (quotientTimesTen % 10 >= 5) {\r\n            quotientTimesTen += 10;\r\n        }\r\n\r\n        return quotientTimesTen / 10;\r\n    }\r\n\r\n    // Computes `a - b`, setting the value to 0 if b > a.\r\n    function floorsub(uint a, uint b) internal pure returns (uint) {\r\n        return b >= a ? 0 : a - b;\r\n    }\r\n}\r\n\r\n\r\ninterface AggregatorInterface {\r\n  function latestAnswer() external view returns (int256);\r\n  function latestTimestamp() external view returns (uint256);\r\n  function latestRound() external view returns (uint256);\r\n  function getAnswer(uint256 roundId) external view returns (int256);\r\n  function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\r\n}\r\n\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title The V2 & V3 Aggregator Interface\r\n * @notice Solidity V0.5 does not allow interfaces to inherit from other\r\n * interfaces so this contract is a combination of v0.5 AggregatorInterface.sol\r\n * and v0.5 AggregatorV3Interface.sol.\r\n */\r\ninterface AggregatorV2V3Interface {\r\n  //\r\n  // V2 Interface:\r\n  //\r\n  function latestAnswer() external view returns (int256);\r\n  function latestTimestamp() external view returns (uint256);\r\n  function latestRound() external view returns (uint256);\r\n  function getAnswer(uint256 roundId) external view returns (int256);\r\n  function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\r\n\r\n  //\r\n  // V3 Interface:\r\n  //\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n\r\ninterface FlagsInterface {\r\n  function getFlag(address) external view returns (bool);\r\n  function getFlags(address[] calldata) external view returns (bool[] memory);\r\n  function raiseFlag(address) external;\r\n  function raiseFlags(address[] calldata) external;\r\n  function lowerFlags(address[] calldata) external;\r\n  function setRaisingAccessController(address) external;\r\n}\r\n\r\n\r\ninterface IVirtualSynth {\r\n    // Views\r\n    function balanceOfUnderlying(address account) external view returns (uint);\r\n\r\n    function rate() external view returns (uint);\r\n\r\n    function readyToSettle() external view returns (bool);\r\n\r\n    function secsLeftInWaitingPeriod() external view returns (uint);\r\n\r\n    function settled() external view returns (bool);\r\n\r\n    function synth() external view returns (ISynth);\r\n\r\n    // Mutative functions\r\n    function settle(address account) external;\r\n}\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/interfaces/iexchanger\r\ninterface IExchanger {\r\n    // Views\r\n    function calculateAmountAfterSettlement(\r\n        address from,\r\n        bytes32 currencyKey,\r\n        uint amount,\r\n        uint refunded\r\n    ) external view returns (uint amountAfterSettlement);\r\n\r\n    function isSynthRateInvalid(bytes32 currencyKey) external view returns (bool);\r\n\r\n    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) external view returns (uint);\r\n\r\n    function settlementOwing(address account, bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (\r\n            uint reclaimAmount,\r\n            uint rebateAmount,\r\n            uint numEntries\r\n        );\r\n\r\n    function hasWaitingPeriodOrSettlementOwing(address account, bytes32 currencyKey) external view returns (bool);\r\n\r\n    function feeRateForExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey)\r\n        external\r\n        view\r\n        returns (uint exchangeFeeRate);\r\n\r\n    function getAmountsForExchange(\r\n        uint sourceAmount,\r\n        bytes32 sourceCurrencyKey,\r\n        bytes32 destinationCurrencyKey\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint amountReceived,\r\n            uint fee,\r\n            uint exchangeFeeRate\r\n        );\r\n\r\n    function priceDeviationThresholdFactor() external view returns (uint);\r\n\r\n    function waitingPeriodSecs() external view returns (uint);\r\n\r\n    // Mutative functions\r\n    function exchange(\r\n        address exchangeForAddress,\r\n        address from,\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        address destinationAddress,\r\n        bool virtualSynth,\r\n        address rewardAddress,\r\n        bytes32 trackingCode\r\n    ) external returns (uint amountReceived, IVirtualSynth vSynth);\r\n\r\n    function exchangeAtomically(\r\n        address from,\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        address destinationAddress,\r\n        bytes32 trackingCode\r\n    ) external returns (uint amountReceived);\r\n\r\n    function settle(address from, bytes32 currencyKey)\r\n        external\r\n        returns (\r\n            uint reclaimed,\r\n            uint refunded,\r\n            uint numEntries\r\n        );\r\n\r\n    function setLastExchangeRateForSynth(bytes32 currencyKey, uint rate) external;\r\n\r\n    function resetLastExchangeRate(bytes32[] calldata currencyKeys) external;\r\n\r\n    function suspendSynthWithInvalidRate(bytes32 currencyKey) external;\r\n}\r\n\r\n\r\n// Inheritance\r\n\r\n\r\n// Libraries\r\n\r\n\r\n// Internal references\r\n// AggregatorInterface from Chainlink represents a decentralized pricing network for a single currency key\r\n\r\n// FlagsInterface from Chainlink addresses SIP-76\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/exchangerates\r\ncontract ExchangeRates is Owned, MixinSystemSettings, IExchangeRates {\r\n    using SafeMath for uint;\r\n    using SafeDecimalMath for uint;\r\n\r\n    bytes32 public constant CONTRACT_NAME = \"ExchangeRates\";\r\n\r\n    // Exchange rates and update times stored by currency code, e.g. 'SNX', or 'sUSD'\r\n    mapping(bytes32 => mapping(uint => RateAndUpdatedTime)) private _rates;\r\n\r\n    // The address of the oracle which pushes rate updates to this contract\r\n    address public oracle;\r\n\r\n    // Decentralized oracle networks that feed into pricing aggregators\r\n    mapping(bytes32 => AggregatorV2V3Interface) public aggregators;\r\n\r\n    mapping(bytes32 => uint8) public currencyKeyDecimals;\r\n\r\n    // List of aggregator keys for convenient iteration\r\n    bytes32[] public aggregatorKeys;\r\n\r\n    // Do not allow the oracle to submit times any further forward into the future than this constant.\r\n    uint private constant ORACLE_FUTURE_LIMIT = 10 minutes;\r\n\r\n    mapping(bytes32 => InversePricing) public inversePricing;\r\n\r\n    bytes32[] public invertedKeys;\r\n\r\n    mapping(bytes32 => uint) public currentRoundForRate;\r\n\r\n    mapping(bytes32 => uint) public roundFrozen;\r\n\r\n    /* ========== ADDRESS RESOLVER CONFIGURATION ========== */\r\n    bytes32 private constant CONTRACT_EXCHANGER = \"Exchanger\";\r\n\r\n    //\r\n    // ========== CONSTRUCTOR ==========\r\n\r\n    constructor(\r\n        address _owner,\r\n        address _oracle,\r\n        address _resolver,\r\n        bytes32[] memory _currencyKeys,\r\n        uint[] memory _newRates\r\n    ) public Owned(_owner) MixinSystemSettings(_resolver) {\r\n        require(_currencyKeys.length == _newRates.length, \"Currency key length and rate length must match.\");\r\n\r\n        oracle = _oracle;\r\n\r\n        // The sUSD rate is always 1 and is never stale.\r\n        _setRate(\"sUSD\", SafeDecimalMath.unit(), now);\r\n\r\n        internalUpdateRates(_currencyKeys, _newRates, now);\r\n    }\r\n\r\n    /* ========== SETTERS ========== */\r\n\r\n    function setOracle(address _oracle) external onlyOwner {\r\n        oracle = _oracle;\r\n        emit OracleUpdated(oracle);\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    function updateRates(\r\n        bytes32[] calldata currencyKeys,\r\n        uint[] calldata newRates,\r\n        uint timeSent\r\n    ) external onlyOracle returns (bool) {\r\n        return internalUpdateRates(currencyKeys, newRates, timeSent);\r\n    }\r\n\r\n    function deleteRate(bytes32 currencyKey) external onlyOracle {\r\n        require(_getRate(currencyKey) > 0, \"Rate is zero\");\r\n\r\n        delete _rates[currencyKey][currentRoundForRate[currencyKey]];\r\n\r\n        currentRoundForRate[currencyKey]--;\r\n\r\n        emit RateDeleted(currencyKey);\r\n    }\r\n\r\n    function setInversePricing(\r\n        bytes32 currencyKey,\r\n        uint entryPoint,\r\n        uint upperLimit,\r\n        uint lowerLimit,\r\n        bool freezeAtUpperLimit,\r\n        bool freezeAtLowerLimit\r\n    ) external onlyOwner {\r\n        // 0 < lowerLimit < entryPoint => 0 < entryPoint\r\n        require(lowerLimit > 0, \"lowerLimit must be above 0\");\r\n        require(upperLimit > entryPoint, \"upperLimit must be above the entryPoint\");\r\n        require(upperLimit < entryPoint.mul(2), \"upperLimit must be less than double entryPoint\");\r\n        require(lowerLimit < entryPoint, \"lowerLimit must be below the entryPoint\");\r\n\r\n        require(!(freezeAtUpperLimit && freezeAtLowerLimit), \"Cannot freeze at both limits\");\r\n\r\n        InversePricing storage inverse = inversePricing[currencyKey];\r\n        if (inverse.entryPoint == 0) {\r\n            // then we are adding a new inverse pricing, so add this\r\n            invertedKeys.push(currencyKey);\r\n        }\r\n        inverse.entryPoint = entryPoint;\r\n        inverse.upperLimit = upperLimit;\r\n        inverse.lowerLimit = lowerLimit;\r\n\r\n        if (freezeAtUpperLimit || freezeAtLowerLimit) {\r\n            // When indicating to freeze, we need to know the rate to freeze it at - either upper or lower\r\n            // this is useful in situations where ExchangeRates is updated and there are existing inverted\r\n            // rates already frozen in the current contract that need persisting across the upgrade\r\n\r\n            inverse.frozenAtUpperLimit = freezeAtUpperLimit;\r\n            inverse.frozenAtLowerLimit = freezeAtLowerLimit;\r\n            uint roundId = _getCurrentRoundId(currencyKey);\r\n            roundFrozen[currencyKey] = roundId;\r\n            emit InversePriceFrozen(currencyKey, freezeAtUpperLimit ? upperLimit : lowerLimit, roundId, msg.sender);\r\n        } else {\r\n            // unfreeze if need be\r\n            inverse.frozenAtUpperLimit = false;\r\n            inverse.frozenAtLowerLimit = false;\r\n            // remove any tracking\r\n            roundFrozen[currencyKey] = 0;\r\n        }\r\n\r\n        // SIP-78\r\n        uint rate = _getRate(currencyKey);\r\n        if (rate > 0) {\r\n            exchanger().setLastExchangeRateForSynth(currencyKey, rate);\r\n        }\r\n\r\n        emit InversePriceConfigured(currencyKey, entryPoint, upperLimit, lowerLimit);\r\n    }\r\n\r\n    function removeInversePricing(bytes32 currencyKey) external onlyOwner {\r\n        require(inversePricing[currencyKey].entryPoint > 0, \"No inverted price exists\");\r\n\r\n        delete inversePricing[currencyKey];\r\n\r\n        // now remove inverted key from array\r\n        bool wasRemoved = removeFromArray(currencyKey, invertedKeys);\r\n\r\n        if (wasRemoved) {\r\n            emit InversePriceConfigured(currencyKey, 0, 0, 0);\r\n        }\r\n    }\r\n\r\n    function addAggregator(bytes32 currencyKey, address aggregatorAddress) external onlyOwner {\r\n        AggregatorV2V3Interface aggregator = AggregatorV2V3Interface(aggregatorAddress);\r\n        // This check tries to make sure that a valid aggregator is being added.\r\n        // It checks if the aggregator is an existing smart contract that has implemented `latestTimestamp` function.\r\n\r\n        require(aggregator.latestRound() >= 0, \"Given Aggregator is invalid\");\r\n        uint8 decimals = aggregator.decimals();\r\n        require(decimals <= 18, \"Aggregator decimals should be lower or equal to 18\");\r\n        if (address(aggregators[currencyKey]) == address(0)) {\r\n            aggregatorKeys.push(currencyKey);\r\n        }\r\n        aggregators[currencyKey] = aggregator;\r\n        currencyKeyDecimals[currencyKey] = decimals;\r\n        emit AggregatorAdded(currencyKey, address(aggregator));\r\n    }\r\n\r\n    function removeAggregator(bytes32 currencyKey) external onlyOwner {\r\n        address aggregator = address(aggregators[currencyKey]);\r\n        require(aggregator != address(0), \"No aggregator exists for key\");\r\n        delete aggregators[currencyKey];\r\n        delete currencyKeyDecimals[currencyKey];\r\n\r\n        bool wasRemoved = removeFromArray(currencyKey, aggregatorKeys);\r\n\r\n        if (wasRemoved) {\r\n            emit AggregatorRemoved(currencyKey, aggregator);\r\n        }\r\n    }\r\n\r\n    // SIP-75 Public keeper function to freeze a synth that is out of bounds\r\n    function freezeRate(bytes32 currencyKey) external {\r\n        InversePricing storage inverse = inversePricing[currencyKey];\r\n        require(inverse.entryPoint > 0, \"Cannot freeze non-inverse rate\");\r\n        require(!inverse.frozenAtUpperLimit && !inverse.frozenAtLowerLimit, \"The rate is already frozen\");\r\n\r\n        uint rate = _getRate(currencyKey);\r\n\r\n        if (rate > 0 && (rate >= inverse.upperLimit || rate <= inverse.lowerLimit)) {\r\n            inverse.frozenAtUpperLimit = (rate == inverse.upperLimit);\r\n            inverse.frozenAtLowerLimit = (rate == inverse.lowerLimit);\r\n            uint currentRoundId = _getCurrentRoundId(currencyKey);\r\n            roundFrozen[currencyKey] = currentRoundId;\r\n            emit InversePriceFrozen(currencyKey, rate, currentRoundId, msg.sender);\r\n        } else {\r\n            revert(\"Rate within bounds\");\r\n        }\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {\r\n        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();\r\n        bytes32[] memory newAddresses = new bytes32[](1);\r\n        newAddresses[0] = CONTRACT_EXCHANGER;\r\n        addresses = combineArrays(existingAddresses, newAddresses);\r\n    }\r\n\r\n    // SIP-75 View to determine if freezeRate can be called safely\r\n    function canFreezeRate(bytes32 currencyKey) external view returns (bool) {\r\n        InversePricing memory inverse = inversePricing[currencyKey];\r\n        if (inverse.entryPoint == 0 || inverse.frozenAtUpperLimit || inverse.frozenAtLowerLimit) {\r\n            return false;\r\n        } else {\r\n            uint rate = _getRate(currencyKey);\r\n            return (rate > 0 && (rate >= inverse.upperLimit || rate <= inverse.lowerLimit));\r\n        }\r\n    }\r\n\r\n    function currenciesUsingAggregator(address aggregator) external view returns (bytes32[] memory currencies) {\r\n        uint count = 0;\r\n        currencies = new bytes32[](aggregatorKeys.length);\r\n        for (uint i = 0; i < aggregatorKeys.length; i++) {\r\n            bytes32 currencyKey = aggregatorKeys[i];\r\n            if (address(aggregators[currencyKey]) == aggregator) {\r\n                currencies[count++] = currencyKey;\r\n            }\r\n        }\r\n    }\r\n\r\n    function rateStalePeriod() external view returns (uint) {\r\n        return getRateStalePeriod();\r\n    }\r\n\r\n    function aggregatorWarningFlags() external view returns (address) {\r\n        return getAggregatorWarningFlags();\r\n    }\r\n\r\n    function rateAndUpdatedTime(bytes32 currencyKey) external view returns (uint rate, uint time) {\r\n        RateAndUpdatedTime memory rateAndTime = _getRateAndUpdatedTime(currencyKey);\r\n        return (rateAndTime.rate, rateAndTime.time);\r\n    }\r\n\r\n    function getLastRoundIdBeforeElapsedSecs(\r\n        bytes32 currencyKey,\r\n        uint startingRoundId,\r\n        uint startingTimestamp,\r\n        uint timediff\r\n    ) external view returns (uint) {\r\n        uint roundId = startingRoundId;\r\n        uint nextTimestamp = 0;\r\n        while (true) {\r\n            (, nextTimestamp) = _getRateAndTimestampAtRound(currencyKey, roundId + 1);\r\n            // if there's no new round, then the previous roundId was the latest\r\n            if (nextTimestamp == 0 || nextTimestamp > startingTimestamp + timediff) {\r\n                return roundId;\r\n            }\r\n            roundId++;\r\n        }\r\n        return roundId;\r\n    }\r\n\r\n    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint) {\r\n        return _getCurrentRoundId(currencyKey);\r\n    }\r\n\r\n    function effectiveValueAtRound(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        uint roundIdForSrc,\r\n        uint roundIdForDest\r\n    ) external view returns (uint value) {\r\n        // If there's no change in the currency, then just return the amount they gave us\r\n        if (sourceCurrencyKey == destinationCurrencyKey) return sourceAmount;\r\n\r\n        (uint srcRate, ) = _getRateAndTimestampAtRound(sourceCurrencyKey, roundIdForSrc);\r\n        (uint destRate, ) = _getRateAndTimestampAtRound(destinationCurrencyKey, roundIdForDest);\r\n        if (destRate == 0) {\r\n            // prevent divide-by 0 error (this can happen when roundIDs jump epochs due\r\n            // to aggregator upgrades)\r\n            return 0;\r\n        }\r\n        // Calculate the effective value by going from source -> USD -> destination\r\n        value = sourceAmount.multiplyDecimalRound(srcRate).divideDecimalRound(destRate);\r\n    }\r\n\r\n    function rateAndTimestampAtRound(bytes32 currencyKey, uint roundId) external view returns (uint rate, uint time) {\r\n        return _getRateAndTimestampAtRound(currencyKey, roundId);\r\n    }\r\n\r\n    function lastRateUpdateTimes(bytes32 currencyKey) external view returns (uint256) {\r\n        return _getUpdatedTime(currencyKey);\r\n    }\r\n\r\n    function lastRateUpdateTimesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory) {\r\n        uint[] memory lastUpdateTimes = new uint[](currencyKeys.length);\r\n\r\n        for (uint i = 0; i < currencyKeys.length; i++) {\r\n            lastUpdateTimes[i] = _getUpdatedTime(currencyKeys[i]);\r\n        }\r\n\r\n        return lastUpdateTimes;\r\n    }\r\n\r\n    function effectiveValue(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    ) external view returns (uint value) {\r\n        (value, , ) = _effectiveValueAndRates(sourceCurrencyKey, sourceAmount, destinationCurrencyKey);\r\n    }\r\n\r\n    function effectiveValueAndRates(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint value,\r\n            uint sourceRate,\r\n            uint destinationRate\r\n        )\r\n    {\r\n        return _effectiveValueAndRates(sourceCurrencyKey, sourceAmount, destinationCurrencyKey);\r\n    }\r\n\r\n    // SIP-120 Atomic exchanges\r\n    function effectiveAtomicValueAndRates(\r\n        bytes32,\r\n        uint,\r\n        bytes32\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint,\r\n            uint,\r\n            uint,\r\n            uint\r\n        )\r\n    {\r\n        _notImplemented();\r\n    }\r\n\r\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint) {\r\n        return _getRateAndUpdatedTime(currencyKey).rate;\r\n    }\r\n\r\n    function ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32 currencyKey, uint numRounds)\r\n        external\r\n        view\r\n        returns (uint[] memory rates, uint[] memory times)\r\n    {\r\n        rates = new uint[](numRounds);\r\n        times = new uint[](numRounds);\r\n\r\n        uint roundId = _getCurrentRoundId(currencyKey);\r\n        for (uint i = 0; i < numRounds; i++) {\r\n            // fetch the rate and treat is as current, so inverse limits if frozen will always be applied\r\n            // regardless of current rate\r\n            (rates[i], times[i]) = _getRateAndTimestampAtRound(currencyKey, roundId);\r\n\r\n            if (roundId == 0) {\r\n                // if we hit the last round, then return what we have\r\n                return (rates, times);\r\n            } else {\r\n                roundId--;\r\n            }\r\n        }\r\n    }\r\n\r\n    function ratesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory) {\r\n        uint[] memory _localRates = new uint[](currencyKeys.length);\r\n\r\n        for (uint i = 0; i < currencyKeys.length; i++) {\r\n            _localRates[i] = _getRate(currencyKeys[i]);\r\n        }\r\n\r\n        return _localRates;\r\n    }\r\n\r\n    function rateAndInvalid(bytes32 currencyKey) external view returns (uint rate, bool isInvalid) {\r\n        RateAndUpdatedTime memory rateAndTime = _getRateAndUpdatedTime(currencyKey);\r\n\r\n        if (currencyKey == \"sUSD\") {\r\n            return (rateAndTime.rate, false);\r\n        }\r\n        return (\r\n            rateAndTime.rate,\r\n            _rateIsStaleWithTime(getRateStalePeriod(), rateAndTime.time) ||\r\n                _rateIsFlagged(currencyKey, FlagsInterface(getAggregatorWarningFlags()))\r\n        );\r\n    }\r\n\r\n    function ratesAndInvalidForCurrencies(bytes32[] calldata currencyKeys)\r\n        external\r\n        view\r\n        returns (uint[] memory rates, bool anyRateInvalid)\r\n    {\r\n        rates = new uint[](currencyKeys.length);\r\n\r\n        uint256 _rateStalePeriod = getRateStalePeriod();\r\n\r\n        // fetch all flags at once\r\n        bool[] memory flagList = getFlagsForRates(currencyKeys);\r\n\r\n        for (uint i = 0; i < currencyKeys.length; i++) {\r\n            // do one lookup of the rate & time to minimize gas\r\n            RateAndUpdatedTime memory rateEntry = _getRateAndUpdatedTime(currencyKeys[i]);\r\n            rates[i] = rateEntry.rate;\r\n            if (!anyRateInvalid && currencyKeys[i] != \"sUSD\") {\r\n                anyRateInvalid = flagList[i] || _rateIsStaleWithTime(_rateStalePeriod, rateEntry.time);\r\n            }\r\n        }\r\n    }\r\n\r\n    function rateIsStale(bytes32 currencyKey) external view returns (bool) {\r\n        return _rateIsStale(currencyKey, getRateStalePeriod());\r\n    }\r\n\r\n    function rateIsFrozen(bytes32 currencyKey) external view returns (bool) {\r\n        return _rateIsFrozen(currencyKey);\r\n    }\r\n\r\n    function rateIsInvalid(bytes32 currencyKey) external view returns (bool) {\r\n        return\r\n            _rateIsStale(currencyKey, getRateStalePeriod()) ||\r\n            _rateIsFlagged(currencyKey, FlagsInterface(getAggregatorWarningFlags()));\r\n    }\r\n\r\n    function rateIsFlagged(bytes32 currencyKey) external view returns (bool) {\r\n        return _rateIsFlagged(currencyKey, FlagsInterface(getAggregatorWarningFlags()));\r\n    }\r\n\r\n    function anyRateIsInvalid(bytes32[] calldata currencyKeys) external view returns (bool) {\r\n        // Loop through each key and check whether the data point is stale.\r\n\r\n        uint256 _rateStalePeriod = getRateStalePeriod();\r\n        bool[] memory flagList = getFlagsForRates(currencyKeys);\r\n\r\n        for (uint i = 0; i < currencyKeys.length; i++) {\r\n            if (flagList[i] || _rateIsStale(currencyKeys[i], _rateStalePeriod)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function synthTooVolatileForAtomicExchange(bytes32) external view returns (bool) {\r\n        _notImplemented();\r\n    }\r\n\r\n    /* ========== INTERNAL FUNCTIONS ========== */\r\n\r\n    function exchanger() internal view returns (IExchanger) {\r\n        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));\r\n    }\r\n\r\n    function getFlagsForRates(bytes32[] memory currencyKeys) internal view returns (bool[] memory flagList) {\r\n        FlagsInterface _flags = FlagsInterface(getAggregatorWarningFlags());\r\n\r\n        // fetch all flags at once\r\n        if (_flags != FlagsInterface(0)) {\r\n            address[] memory _aggregators = new address[](currencyKeys.length);\r\n\r\n            for (uint i = 0; i < currencyKeys.length; i++) {\r\n                _aggregators[i] = address(aggregators[currencyKeys[i]]);\r\n            }\r\n\r\n            flagList = _flags.getFlags(_aggregators);\r\n        } else {\r\n            flagList = new bool[](currencyKeys.length);\r\n        }\r\n    }\r\n\r\n    function _setRate(\r\n        bytes32 currencyKey,\r\n        uint256 rate,\r\n        uint256 time\r\n    ) internal {\r\n        // Note: this will effectively start the rounds at 1, which matches Chainlink's Agggregators\r\n        currentRoundForRate[currencyKey]++;\r\n\r\n        _rates[currencyKey][currentRoundForRate[currencyKey]] = RateAndUpdatedTime({\r\n            rate: uint216(rate),\r\n            time: uint40(time)\r\n        });\r\n    }\r\n\r\n    function internalUpdateRates(\r\n        bytes32[] memory currencyKeys,\r\n        uint[] memory newRates,\r\n        uint timeSent\r\n    ) internal returns (bool) {\r\n        require(currencyKeys.length == newRates.length, \"Currency key array length must match rates array length.\");\r\n        require(timeSent < (now + ORACLE_FUTURE_LIMIT), \"Time is too far into the future\");\r\n\r\n        // Loop through each key and perform update.\r\n        for (uint i = 0; i < currencyKeys.length; i++) {\r\n            bytes32 currencyKey = currencyKeys[i];\r\n\r\n            // Should not set any rate to zero ever, as no asset will ever be\r\n            // truely worthless and still valid. In this scenario, we should\r\n            // delete the rate and remove it from the system.\r\n            require(newRates[i] != 0, \"Zero is not a valid rate, please call deleteRate instead.\");\r\n            require(currencyKey != \"sUSD\", \"Rate of sUSD cannot be updated, it's always UNIT.\");\r\n\r\n            // We should only update the rate if it's at least the same age as the last rate we've got.\r\n            if (timeSent < _getUpdatedTime(currencyKey)) {\r\n                continue;\r\n            }\r\n\r\n            // Ok, go ahead with the update.\r\n            _setRate(currencyKey, newRates[i], timeSent);\r\n        }\r\n\r\n        emit RatesUpdated(currencyKeys, newRates);\r\n\r\n        return true;\r\n    }\r\n\r\n    function removeFromArray(bytes32 entry, bytes32[] storage array) internal returns (bool) {\r\n        for (uint i = 0; i < array.length; i++) {\r\n            if (array[i] == entry) {\r\n                delete array[i];\r\n\r\n                // Copy the last key into the place of the one we just deleted\r\n                // If there's only one key, this is array[0] = array[0].\r\n                // If we're deleting the last one, it's also a NOOP in the same way.\r\n                array[i] = array[array.length - 1];\r\n\r\n                // Decrease the size of the array by one.\r\n                array.length--;\r\n\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _rateOrInverted(\r\n        bytes32 currencyKey,\r\n        uint rate,\r\n        uint roundId\r\n    ) internal view returns (uint newRate) {\r\n        // if an inverse mapping exists, adjust the price accordingly\r\n        InversePricing memory inverse = inversePricing[currencyKey];\r\n        if (inverse.entryPoint == 0 || rate == 0) {\r\n            // when no inverse is set or when given a 0 rate, return the rate, regardless of the inverse status\r\n            // (the latter is so when a new inverse is set but the underlying has no rate, it will return 0 as\r\n            // the rate, not the lowerLimit)\r\n            return rate;\r\n        }\r\n\r\n        newRate = rate;\r\n\r\n        // Determine when round was frozen (if any)\r\n        uint roundWhenRateFrozen = roundFrozen[currencyKey];\r\n        // And if we're looking at a rate after frozen, and it's currently frozen, then apply the bounds limit even\r\n        // if the current price is back within bounds\r\n        if (roundId >= roundWhenRateFrozen && inverse.frozenAtUpperLimit) {\r\n            newRate = inverse.upperLimit;\r\n        } else if (roundId >= roundWhenRateFrozen && inverse.frozenAtLowerLimit) {\r\n            newRate = inverse.lowerLimit;\r\n        } else {\r\n            // this ensures any rate outside the limit will never be returned\r\n            uint doubleEntryPoint = inverse.entryPoint.mul(2);\r\n            if (doubleEntryPoint <= rate) {\r\n                // avoid negative numbers for unsigned ints, so set this to 0\r\n                // which by the requirement that lowerLimit be > 0 will\r\n                // cause this to freeze the price to the lowerLimit\r\n                newRate = 0;\r\n            } else {\r\n                newRate = doubleEntryPoint.sub(rate);\r\n            }\r\n\r\n            // now ensure the rate is between the bounds\r\n            if (newRate >= inverse.upperLimit) {\r\n                newRate = inverse.upperLimit;\r\n            } else if (newRate <= inverse.lowerLimit) {\r\n                newRate = inverse.lowerLimit;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _formatAggregatorAnswer(bytes32 currencyKey, int256 rate) internal view returns (uint) {\r\n        require(rate >= 0, \"Negative rate not supported\");\r\n        if (currencyKeyDecimals[currencyKey] > 0) {\r\n            uint multiplier = 10**uint(SafeMath.sub(18, currencyKeyDecimals[currencyKey]));\r\n            return uint(uint(rate).mul(multiplier));\r\n        }\r\n        return uint(rate);\r\n    }\r\n\r\n    function _getRateAndUpdatedTime(bytes32 currencyKey) internal view returns (RateAndUpdatedTime memory) {\r\n        AggregatorV2V3Interface aggregator = aggregators[currencyKey];\r\n\r\n        if (aggregator != AggregatorV2V3Interface(0)) {\r\n            // this view from the aggregator is the most gas efficient but it can throw when there's no data,\r\n            // so let's call it low-level to suppress any reverts\r\n            bytes memory payload = abi.encodeWithSignature(\"latestRoundData()\");\r\n            // solhint-disable avoid-low-level-calls\r\n            (bool success, bytes memory returnData) = address(aggregator).staticcall(payload);\r\n\r\n            if (success) {\r\n                (uint80 roundId, int256 answer, , uint256 updatedAt, ) =\r\n                    abi.decode(returnData, (uint80, int256, uint256, uint256, uint80));\r\n                return\r\n                    RateAndUpdatedTime({\r\n                        rate: uint216(_rateOrInverted(currencyKey, _formatAggregatorAnswer(currencyKey, answer), roundId)),\r\n                        time: uint40(updatedAt)\r\n                    });\r\n            }\r\n        } else {\r\n            uint roundId = currentRoundForRate[currencyKey];\r\n            RateAndUpdatedTime memory entry = _rates[currencyKey][roundId];\r\n\r\n            return RateAndUpdatedTime({rate: uint216(_rateOrInverted(currencyKey, entry.rate, roundId)), time: entry.time});\r\n        }\r\n    }\r\n\r\n    function _getCurrentRoundId(bytes32 currencyKey) internal view returns (uint) {\r\n        AggregatorV2V3Interface aggregator = aggregators[currencyKey];\r\n\r\n        if (aggregator != AggregatorV2V3Interface(0)) {\r\n            return aggregator.latestRound();\r\n        } else {\r\n            return currentRoundForRate[currencyKey];\r\n        }\r\n    }\r\n\r\n    function _getRateAndTimestampAtRound(bytes32 currencyKey, uint roundId) internal view returns (uint rate, uint time) {\r\n        AggregatorV2V3Interface aggregator = aggregators[currencyKey];\r\n\r\n        if (aggregator != AggregatorV2V3Interface(0)) {\r\n            // this view from the aggregator is the most gas efficient but it can throw when there's no data,\r\n            // so let's call it low-level to suppress any reverts\r\n            bytes memory payload = abi.encodeWithSignature(\"getRoundData(uint80)\", roundId);\r\n            // solhint-disable avoid-low-level-calls\r\n            (bool success, bytes memory returnData) = address(aggregator).staticcall(payload);\r\n\r\n            if (success) {\r\n                (, int256 answer, , uint256 updatedAt, ) =\r\n                    abi.decode(returnData, (uint80, int256, uint256, uint256, uint80));\r\n                return (_rateOrInverted(currencyKey, _formatAggregatorAnswer(currencyKey, answer), roundId), updatedAt);\r\n            }\r\n        } else {\r\n            RateAndUpdatedTime memory update = _rates[currencyKey][roundId];\r\n            return (_rateOrInverted(currencyKey, update.rate, roundId), update.time);\r\n        }\r\n    }\r\n\r\n    function _getRate(bytes32 currencyKey) internal view returns (uint256) {\r\n        return _getRateAndUpdatedTime(currencyKey).rate;\r\n    }\r\n\r\n    function _getUpdatedTime(bytes32 currencyKey) internal view returns (uint256) {\r\n        return _getRateAndUpdatedTime(currencyKey).time;\r\n    }\r\n\r\n    function _effectiveValueAndRates(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    )\r\n        internal\r\n        view\r\n        returns (\r\n            uint value,\r\n            uint sourceRate,\r\n            uint destinationRate\r\n        )\r\n    {\r\n        sourceRate = _getRate(sourceCurrencyKey);\r\n        // If there's no change in the currency, then just return the amount they gave us\r\n        if (sourceCurrencyKey == destinationCurrencyKey) {\r\n            destinationRate = sourceRate;\r\n            value = sourceAmount;\r\n        } else {\r\n            // Calculate the effective value by going from source -> USD -> destination\r\n            destinationRate = _getRate(destinationCurrencyKey);\r\n            // prevent divide-by 0 error (this happens if the dest is not a valid rate)\r\n            if (destinationRate > 0) {\r\n                value = sourceAmount.multiplyDecimalRound(sourceRate).divideDecimalRound(destinationRate);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _rateIsStale(bytes32 currencyKey, uint _rateStalePeriod) internal view returns (bool) {\r\n        // sUSD is a special case and is never stale (check before an SLOAD of getRateAndUpdatedTime)\r\n        if (currencyKey == \"sUSD\") return false;\r\n\r\n        return _rateIsStaleWithTime(_rateStalePeriod, _getUpdatedTime(currencyKey));\r\n    }\r\n\r\n    function _rateIsStaleWithTime(uint _rateStalePeriod, uint _time) internal view returns (bool) {\r\n        return _time.add(_rateStalePeriod) < now;\r\n    }\r\n\r\n    function _rateIsFrozen(bytes32 currencyKey) internal view returns (bool) {\r\n        InversePricing memory inverse = inversePricing[currencyKey];\r\n        return inverse.frozenAtUpperLimit || inverse.frozenAtLowerLimit;\r\n    }\r\n\r\n    function _rateIsFlagged(bytes32 currencyKey, FlagsInterface flags) internal view returns (bool) {\r\n        // sUSD is a special case and is never invalid\r\n        if (currencyKey == \"sUSD\") return false;\r\n        address aggregator = address(aggregators[currencyKey]);\r\n        // when no aggregator or when the flags haven't been setup\r\n        if (aggregator == address(0) || flags == FlagsInterface(0)) {\r\n            return false;\r\n        }\r\n        return flags.getFlag(aggregator);\r\n    }\r\n\r\n    function _notImplemented() internal pure {\r\n        revert(\"Cannot be run on this layer\");\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyOracle {\r\n        _onlyOracle();\r\n        _;\r\n    }\r\n\r\n    function _onlyOracle() internal view {\r\n        require(msg.sender == oracle, \"Only the oracle can perform this action\");\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event OracleUpdated(address newOracle);\r\n    event RatesUpdated(bytes32[] currencyKeys, uint[] newRates);\r\n    event RateDeleted(bytes32 currencyKey);\r\n    event InversePriceConfigured(bytes32 currencyKey, uint entryPoint, uint upperLimit, uint lowerLimit);\r\n    event InversePriceFrozen(bytes32 currencyKey, uint rate, uint roundId, address initiator);\r\n    event AggregatorAdded(bytes32 currencyKey, address aggregator);\r\n    event AggregatorRemoved(bytes32 currencyKey, address aggregator);\r\n}\r\n\r\n\r\ninterface IDexPriceAggregator {\r\n    function assetToAsset(\r\n        address tokenIn,\r\n        uint amountIn,\r\n        address tokenOut,\r\n        uint twapPeriod\r\n    ) external view returns (uint amountOut);\r\n}\r\n\r\n\r\n// Inheritance\r\n\r\n\r\n// https://docs.synthetix.io/contracts/source/contracts/exchangerateswithdexpricing\r\ncontract ExchangeRatesWithDexPricing is ExchangeRates {\r\n    bytes32 internal constant SETTING_DEX_PRICE_AGGREGATOR = \"dexPriceAggregator\";\r\n\r\n    constructor(\r\n        address _owner,\r\n        address _oracle,\r\n        address _resolver,\r\n        bytes32[] memory _currencyKeys,\r\n        uint[] memory _newRates\r\n    ) public ExchangeRates(_owner, _oracle, _resolver, _currencyKeys, _newRates) {}\r\n\r\n    /* ========== SETTERS ========== */\r\n\r\n    function setDexPriceAggregator(IDexPriceAggregator _dexPriceAggregator) external onlyOwner {\r\n        flexibleStorage().setAddressValue(CONTRACT_NAME, SETTING_DEX_PRICE_AGGREGATOR, address(_dexPriceAggregator));\r\n        emit DexPriceAggregatorUpdated(address(_dexPriceAggregator));\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function dexPriceAggregator() public view returns (IDexPriceAggregator) {\r\n        return IDexPriceAggregator(flexibleStorage().getAddressValue(CONTRACT_NAME, SETTING_DEX_PRICE_AGGREGATOR));\r\n    }\r\n\r\n    function atomicTwapWindow() external view returns (uint) {\r\n        return getAtomicTwapWindow();\r\n    }\r\n\r\n    function atomicEquivalentForDexPricing(bytes32 currencyKey) external view returns (address) {\r\n        return getAtomicEquivalentForDexPricing(currencyKey);\r\n    }\r\n\r\n    function atomicPriceBuffer(bytes32 currencyKey) external view returns (uint) {\r\n        return getAtomicPriceBuffer(currencyKey);\r\n    }\r\n\r\n    function atomicVolatilityConsiderationWindow(bytes32 currencyKey) external view returns (uint) {\r\n        return getAtomicVolatilityConsiderationWindow(currencyKey);\r\n    }\r\n\r\n    function atomicVolatilityUpdateThreshold(bytes32 currencyKey) external view returns (uint) {\r\n        return getAtomicVolatilityUpdateThreshold(currencyKey);\r\n    }\r\n\r\n    // SIP-120 Atomic exchanges\r\n    // Note that the returned systemValue, systemSourceRate, and systemDestinationRate are based on\r\n    // the current system rate, which may not be the atomic rate derived from value / sourceAmount\r\n    function effectiveAtomicValueAndRates(\r\n        bytes32 sourceCurrencyKey,\r\n        uint sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint value,\r\n            uint systemValue,\r\n            uint systemSourceRate,\r\n            uint systemDestinationRate\r\n        )\r\n    {\r\n        IERC20 sourceEquivalent = IERC20(getAtomicEquivalentForDexPricing(sourceCurrencyKey));\r\n        require(address(sourceEquivalent) != address(0), \"No atomic equivalent for src\");\r\n\r\n        IERC20 destEquivalent = IERC20(getAtomicEquivalentForDexPricing(destinationCurrencyKey));\r\n        require(address(destEquivalent) != address(0), \"No atomic equivalent for dest\");\r\n\r\n        (systemValue, systemSourceRate, systemDestinationRate) = _effectiveValueAndRates(\r\n            sourceCurrencyKey,\r\n            sourceAmount,\r\n            destinationCurrencyKey\r\n        );\r\n        // Derive P_CLBUF from highest configured buffer between source and destination synth\r\n        uint priceBuffer = Math.max(getAtomicPriceBuffer(sourceCurrencyKey), getAtomicPriceBuffer(destinationCurrencyKey));\r\n        uint pClbufValue = systemValue.multiplyDecimal(SafeDecimalMath.unit().sub(priceBuffer));\r\n\r\n        // Normalize decimals in case equivalent asset uses different decimals from internal unit\r\n        uint sourceAmountInEquivalent = (sourceAmount * 10**uint(sourceEquivalent.decimals())) / SafeDecimalMath.unit();\r\n\r\n        uint twapWindow = getAtomicTwapWindow();\r\n        require(twapWindow != 0, \"Uninitialized atomic twap window\");\r\n\r\n        uint twapValueInEquivalent =\r\n            dexPriceAggregator().assetToAsset(\r\n                address(sourceEquivalent),\r\n                sourceAmountInEquivalent,\r\n                address(destEquivalent),\r\n                twapWindow\r\n            );\r\n\r\n        // Similar to source amount, normalize decimals back to internal unit for output amount\r\n        uint pDexValue = (twapValueInEquivalent * SafeDecimalMath.unit()) / 10**uint(destEquivalent.decimals());\r\n\r\n        // Final value is minimum output between P_CLBUF and P_TWAP\r\n        value = Math.min(pClbufValue, pDexValue);\r\n    }\r\n\r\n    function synthTooVolatileForAtomicExchange(bytes32 currencyKey) external view returns (bool) {\r\n        // sUSD is a special case and is never volatile\r\n        if (currencyKey == \"sUSD\") return false;\r\n\r\n        uint considerationWindow = getAtomicVolatilityConsiderationWindow(currencyKey);\r\n        uint updateThreshold = getAtomicVolatilityUpdateThreshold(currencyKey);\r\n\r\n        if (considerationWindow == 0 || updateThreshold == 0) {\r\n            // If either volatility setting is not set, never judge an asset to be volatile\r\n            return false;\r\n        }\r\n\r\n        // Go back through the historical oracle update rounds to see if there have been more\r\n        // updates in the consideration window than the allowed threshold.\r\n        // If there have, consider the asset volatile--by assumption that many close-by oracle\r\n        // updates is a good proxy for price volatility.\r\n        uint considerationWindowStart = block.timestamp.sub(considerationWindow);\r\n        uint roundId = _getCurrentRoundId(currencyKey);\r\n        for (updateThreshold; updateThreshold > 0; updateThreshold--) {\r\n            (uint rate, uint time) = _getRateAndTimestampAtRound(currencyKey, roundId);\r\n            if (time != 0 && time < considerationWindowStart) {\r\n                // Round was outside consideration window so we can stop querying further rounds\r\n                return false;\r\n            } else if (rate == 0 || time == 0) {\r\n                // Either entire round or a rate inside consideration window was not available\r\n                // Consider the asset volatile\r\n                break;\r\n            }\r\n\r\n            if (roundId == 0) {\r\n                // Not enough historical data to continue further\r\n                // Consider the asset volatile\r\n                break;\r\n            }\r\n            roundId--;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event DexPriceAggregatorUpdated(address newDexPriceAggregator);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_currencyKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newRates\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"AggregatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"AggregatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDexPriceAggregator\",\"type\":\"address\"}],\"name\":\"DexPriceAggregatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upperLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowerLimit\",\"type\":\"uint256\"}],\"name\":\"InversePriceConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"}],\"name\":\"InversePriceFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"RateDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"currencyKeys\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"newRates\",\"type\":\"uint256[]\"}],\"name\":\"RatesUpdated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"aggregatorAddress\",\"type\":\"address\"}],\"name\":\"addAggregator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"aggregatorKeys\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aggregatorWarningFlags\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"aggregators\",\"outputs\":[{\"internalType\":\"contract AggregatorV2V3Interface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"currencyKeys\",\"type\":\"bytes32[]\"}],\"name\":\"anyRateIsInvalid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"atomicEquivalentForDexPricing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"atomicPriceBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atomicTwapWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"atomicVolatilityConsiderationWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"atomicVolatilityUpdateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"canFreezeRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"currenciesUsingAggregator\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"currencies\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"currencyKeyDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"currentRoundForRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"deleteRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dexPriceAggregator\",\"outputs\":[{\"internalType\":\"contract IDexPriceAggregator\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sourceCurrencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"destinationCurrencyKey\",\"type\":\"bytes32\"}],\"name\":\"effectiveAtomicValueAndRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"systemValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"systemSourceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"systemDestinationRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sourceCurrencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"destinationCurrencyKey\",\"type\":\"bytes32\"}],\"name\":\"effectiveValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sourceCurrencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"destinationCurrencyKey\",\"type\":\"bytes32\"}],\"name\":\"effectiveValueAndRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sourceCurrencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"destinationCurrencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"roundIdForSrc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundIdForDest\",\"type\":\"uint256\"}],\"name\":\"effectiveValueAtRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"freezeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"getCurrentRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startingRoundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timediff\",\"type\":\"uint256\"}],\"name\":\"getLastRoundIdBeforeElapsedSecs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"inversePricing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entryPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"frozenAtUpperLimit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"frozenAtLowerLimit\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invertedKeys\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"lastRateUpdateTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"currencyKeys\",\"type\":\"bytes32[]\"}],\"name\":\"lastRateUpdateTimesForCurrencies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"rateAndInvalid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInvalid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"rateAndTimestampAtRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"rateAndUpdatedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"rateForCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"rateIsFlagged\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"rateIsFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"rateIsInvalid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"rateIsStale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateStalePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"currencyKeys\",\"type\":\"bytes32[]\"}],\"name\":\"ratesAndInvalidForCurrencies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"anyRateInvalid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"numRounds\",\"type\":\"uint256\"}],\"name\":\"ratesAndUpdatedTimeForCurrencyLastNRounds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"times\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"currencyKeys\",\"type\":\"bytes32[]\"}],\"name\":\"ratesForCurrencies\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebuildCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"removeAggregator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"removeInversePricing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolverAddressesRequired\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"addresses\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roundFrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IDexPriceAggregator\",\"name\":\"_dexPriceAggregator\",\"type\":\"address\"}],\"name\":\"setDexPriceAggregator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"entryPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"freezeAtUpperLimit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"freezeAtLowerLimit\",\"type\":\"bool\"}],\"name\":\"setInversePricing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"synthTooVolatileForAtomicExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"currencyKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timeSent\",\"type\":\"uint256\"}],\"name\":\"updateRates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ExchangeRatesWithDexPricing","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000386d4369003dbd3aa0b35345303d1fa28f3054d6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000033a0eefab850a842d3c203751fc287d6d402b0d700000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"SafeDecimalMath:84d626b2bb4d0f064067e4bf80fce7055d8f3e7b","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ac718a22411bd100cdaab10f3e8b4fc3cf799acaed4fddaa0f6a6686aa45ca57"}]}