{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/internal/seeder/Seeder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title The WizardsToken pseudo-random seed generator.\\n// Modified version from NounsDAO.\\n\\npragma solidity ^0.8.6;\\n\\nimport {ISeeder} from \\\"./ISeeder.sol\\\";\\nimport {IDescriptor} from \\\"../descriptor/IDescriptor.sol\\\";\\n\\ncontract Seeder is ISeeder {\\n    struct Counts {\\n        uint256 backgroundCount;\\n        uint256 skinsCount;\\n        uint256 mouthsCount;\\n        uint256 eyesCount;\\n        uint256 hatsCount;\\n        uint256 clothesCount;\\n        uint256 accessoryCount;\\n        uint256 bgItemCount;\\n    }\\n\\n    /**\\n     * @notice Generate a pseudo-random Wizard seed using the previous blockhash and wizard ID.\\n     */\\n    function generateSeed(\\n        uint256 wizardId,\\n        IDescriptor descriptor,\\n        bool isOneOfOne,\\n        uint48 oneOfOneIndex\\n    ) external view override returns (Seed memory) {\\n        if (isOneOfOne) {\\n            return\\n                Seed({\\n                    background: 0,\\n                    skin: 0,\\n                    bgItem: 0,\\n                    accessory: 0,\\n                    clothes: 0,\\n                    mouth: 0,\\n                    eyes: 0,\\n                    hat: 0,\\n                    oneOfOne: isOneOfOne,\\n                    oneOfOneIndex: oneOfOneIndex\\n                });\\n        }\\n\\n        uint256 pseudorandomness = getRandomness(wizardId);\\n        Counts memory counts = getCounts(descriptor);\\n        uint256 accShift = getAccShift(wizardId);\\n        uint256 clothShift = getClothShift(wizardId);\\n\\n        return\\n            Seed({\\n                background: uint48(\\n                    uint48(pseudorandomness) % counts.backgroundCount\\n                ),\\n                skin: uint48(\\n                    uint48(pseudorandomness >> 48) % counts.skinsCount\\n                ),\\n                accessory: uint48(\\n                    uint48(pseudorandomness >> accShift) % counts.accessoryCount\\n                ),\\n                mouth: uint48(\\n                    uint48(pseudorandomness >> 144) % counts.mouthsCount\\n                ),\\n                eyes: uint48(\\n                    uint48(pseudorandomness >> 192) % counts.eyesCount\\n                ),\\n                hat: uint48(uint48(pseudorandomness >> 144) % counts.hatsCount),\\n                bgItem: uint48(\\n                    uint48(pseudorandomness >> accShift) % counts.bgItemCount\\n                ),\\n                clothes: uint48(\\n                    uint48(pseudorandomness >> clothShift) % counts.clothesCount\\n                ),\\n                oneOfOne: isOneOfOne,\\n                oneOfOneIndex: oneOfOneIndex\\n            });\\n    }\\n\\n    function getCounts(IDescriptor descriptor)\\n        internal\\n        view\\n        returns (Counts memory)\\n    {\\n        return\\n            Counts({\\n                backgroundCount: descriptor.backgroundCount(),\\n                skinsCount: descriptor.skinsCount(),\\n                mouthsCount: descriptor.mouthsCount(),\\n                eyesCount: descriptor.eyesCount(),\\n                hatsCount: descriptor.hatsCount(),\\n                clothesCount: descriptor.clothesCount(),\\n                accessoryCount: descriptor.accessoryCount(),\\n                bgItemCount: descriptor.bgItemsCount()\\n            });\\n    }\\n\\n    function getRandomness(uint256 wizardId) internal view returns (uint256) {\\n        uint256 pseudorandomness = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    blockhash(block.number - 1),\\n                    wizardId,\\n                    block.difficulty,\\n                    block.coinbase\\n                )\\n            )\\n        );\\n\\n        return pseudorandomness;\\n    }\\n\\n    function getAccShift(uint256 wizardId) internal pure returns (uint256) {\\n        uint256 rem = wizardId % 2;\\n        uint256 shift = (rem == 0) ? 96 : 192;\\n\\n        return shift;\\n    }\\n\\n    function getClothShift(uint256 wizardId) internal pure returns (uint256) {\\n        uint256 rem = wizardId % 2;\\n        uint256 clothShift = (rem == 0) ? 48 : 144;\\n\\n        return clothShift;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/internal/seeder/ISeeder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for Seeder\\n\\npragma solidity ^0.8.6;\\n\\nimport { IDescriptor } from '../descriptor/IDescriptor.sol';\\n\\n// \\\"Skin\\\", \\\"Cloth\\\", \\\"Eye\\\", \\\"Mouth\\\", \\\"Acc\\\", \\\"Item\\\", \\\"Hat\\\"\\ninterface ISeeder {\\n    struct Seed {\\n        uint48 background;\\n        uint48 skin;\\n        uint48 clothes;\\n        uint48 eyes;\\n        uint48 mouth;\\n        uint48 accessory;\\n        uint48 bgItem;\\n        uint48 hat;\\n        bool oneOfOne;\\n        uint48 oneOfOneIndex;\\n    }\\n\\n    function generateSeed(uint256 wizardId, IDescriptor descriptor, bool isOneOfOne, uint48 isOneOfOneIndex) external view returns (Seed memory);\\n}\\n\"\r\n    },\r\n    \"contracts/internal/descriptor/IDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for Descriptor\\n\\npragma solidity ^0.8.6;\\n\\nimport { ISeeder } from '../seeder/ISeeder.sol';\\n\\ninterface IDescriptor {\\n    event PartsLocked();\\n\\n    event DataURIToggled(bool enabled);\\n\\n    event BaseURIUpdated(string baseURI);\\n\\n    function arePartsLocked() external returns (bool);\\n\\n    function isDataURIEnabled() external returns (bool);    \\n\\n    function baseURI() external returns (string memory);\\n\\n    function palettes(uint8 paletteIndex, uint256 colorIndex) external view returns (string memory);\\n\\n    function addManyColorsToPalette(uint8 paletteIndex, string[] calldata newColors) external;\\n\\n    function addColorToPalette(uint8 paletteIndex, string calldata color) external;\\n\\n\\n    function backgrounds(uint256 index) external view returns (string memory);    \\n\\n    function backgroundCount() external view returns (uint256);\\n\\n    function addManyBackgrounds(string[] calldata backgrounds) external;\\n\\n    function addBackground(string calldata background) external;    \\n\\n    \\n    \\n    function oneOfOnes(uint256 index) external view returns (bytes memory);\\n\\n    function oneOfOnesCount() external view returns (uint256);\\n\\n    function addOneOfOne(bytes calldata _oneOfOne) external;\\n\\n    function addManyOneOfOnes(bytes[] calldata _oneOfOnes) external;    \\n\\n\\n    function skins(uint256 index) external view returns (bytes memory);\\n\\n    function skinsCount() external view returns (uint256);\\n\\n    function addManySkins(bytes[] calldata skins) external;\\n\\n    function addSkin(bytes calldata skin) external;\\n\\n\\n    function hats(uint256 index) external view returns (bytes memory);\\n\\n    function hatsCount() external view returns (uint256);\\n\\n    function addManyHats(bytes[] calldata hats) external;\\n\\n    function addHat(bytes calldata hat) external;\\n\\n    \\n    function clothes(uint256 index) external view returns (bytes memory);\\n\\n    function clothesCount() external view returns (uint256);\\n\\n    function addManyClothes(bytes[] calldata ears) external;\\n\\n    function addClothes(bytes calldata ear) external;\\n\\n\\n    function mouths(uint256 index) external view returns (bytes memory);\\n\\n    function mouthsCount() external view returns (uint256);\\n\\n    function addManyMouths(bytes[] calldata mouths) external;\\n\\n    function addMouth(bytes calldata mouth) external;\\n\\n    \\n    function eyes(uint256 index) external view returns (bytes memory);\\n\\n    function eyesCount() external view returns (uint256);\\n\\n    function addManyEyes(bytes[] calldata eyes) external;\\n\\n    function addEyes(bytes calldata eye) external;\\n\\n\\n    function accessory(uint256 index) external view returns (bytes memory);\\n\\n    function accessoryCount() external view returns (uint256);\\n\\n    function addManyAccessories(bytes[] calldata noses) external;\\n\\n    function addAccessory(bytes calldata nose) external;\\n\\n\\n    function bgItems(uint256 index) external view returns (bytes memory);\\n\\n    function bgItemsCount() external view returns (uint256);\\n\\n    function addManyBgItems(bytes[] calldata noses) external;\\n\\n    function addBgItem(bytes calldata nose) external;\\n\\n\\n    function lockParts() external;\\n\\n    function toggleDataURIEnabled() external;\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function tokenURI(uint256 tokenId, ISeeder.Seed memory seed) external view returns (string memory);\\n\\n    function dataURI(uint256 tokenId, ISeeder.Seed memory seed) external view returns (string memory);\\n\\n    function genericDataURI(\\n        string calldata name,\\n        string calldata description,\\n        ISeeder.Seed memory seed\\n    ) external view returns (string memory);\\n\\n    function generateSVGImage(ISeeder.Seed memory seed) external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"},{\"internalType\":\"contract IDescriptor\",\"name\":\"descriptor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOneOfOne\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"oneOfOneIndex\",\"type\":\"uint48\"}],\"name\":\"generateSeed\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"background\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"skin\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"clothes\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"eyes\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"mouth\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"accessory\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"bgItem\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"hat\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"oneOfOne\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"oneOfOneIndex\",\"type\":\"uint48\"}],\"internalType\":\"struct ISeeder.Seed\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Seeder","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}