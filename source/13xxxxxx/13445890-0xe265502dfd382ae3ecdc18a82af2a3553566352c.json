{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: Unlicensed\r\n\r\n/**\r\n  \r\n    NaughtyAperica \r\n\r\n                  .aadddbbbbaa,       ,adddbbbbaaa.\r\n             .ad\"           \"\\bbmdd/\"           \"ba.\r\n          .,d\"                 `\"'                 \"b,.\r\n       .,ad\"                                         \"ba,.\r\n    .,amd\"  __..,,,..No Ape does it better..,,,..__  \"bma,.\r\n,am8888ca8\"\"\"\"\"''                                ``\"\"\"\"8ac88888ma,\r\n\"\"\"\"\"]8a.                                               .a8[\"\"\"\"\"\r\n      \"8ba.                                           .ad8\"'\r\n        `\"8bma,.                                .,amd88\"'\r\n            `\"\"\"88bmm==Naughty===Aperica==mmd88\"\"\"'\r\n                    `\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"'\r\n\r\n\r\nNo Ape, No Ape Does It Better ! \r\n\r\nWelcome to the world of Naughty Apes !\r\n\r\n\r\n  Telegram : https://t.me/NaughtyAperica\r\n\r\n\r\n  Tokenomics : \r\n    1 Billion Max Supply\r\n    5% Max Buy Limit \r\n    5% Max Hold Limit\r\n\r\n   Taxes on each transaction : \r\n    8% Project\r\n    2% Reflection\r\n    2% Burns\r\n\r\n   Slippage Required : 13 - 15 % \r\n   \r\n   Tax free transfers. \r\n  \r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    \r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\nlibrary ExtraMath {\r\n    /**\r\n     * @dev Calculates the percentage of a number\r\n     * @param number: The number to calculate the percentage of\r\n     * @param percentage: The percentage of the number to return\r\n     * @return The percentage of a number\r\n     */\r\n    function percentageOf(uint256 number, uint256 percentage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (number * percentage) / 100;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private  _totalSupply;\r\n    string  private  _name;\r\n    string  private  _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual  override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom( address sender, address recipient, uint256 amount ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public  virtual returns (bool) {\r\n        _approve( _msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\" );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount,\"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n}\r\n\r\ncontract NaughtyAperica is ERC20, Ownable {\r\n\r\n    //using safeMath and Address libraries\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    //to store the max unsigned integer\r\n    uint256 private constant MAX = ~uint256(0);\r\n    \r\n    //uniswap variables\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    //dead wallet\r\n    address private constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n    \r\n    //burn tax\r\n    uint256 public  _burnFee = 2;\r\n    uint256 private _previousBurnFee = _burnFee;\r\n\r\n    //redistribution tax\r\n    uint256 public  _rewardFee = 2;\r\n    uint256 private _previousRewardFee = _rewardFee;\r\n\r\n    //dev tax\r\n    uint256 public  _devTax = 8;\r\n    uint256 private _previousDevTax = _devTax;\r\n    \r\n    //fee receiving address\r\n    address payable private _devAddress;\r\n    address payable private _marketingAddress;\r\n\r\n    //to store addresses excluded from rewards\r\n    mapping (address => bool) private _isExcludedFromReward;\r\n    address[] private _excludedFromReward;\r\n\r\n    //to store addresses excluded from fees\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _tTotal = 1000 * 10**6 * 10**9; //TotalSupply = 1B\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n    uint256 public _tRewardsTotal; //Total redistributed tokens\r\n    \r\n    uint8 private  _decimals = 9;\r\n    \r\n    bool currentlySwapping;\r\n    bool public swapAndRedirectEthFeesEnabled = false;\r\n\r\n    bool tradingOpen = false;\r\n    uint256 public _maxTxAmount;\r\n    uint256 public _maxHoldAmount;\r\n\r\n    modifier lockTheSwap {\r\n        currentlySwapping = true;\r\n        _;\r\n        currentlySwapping = false;\r\n    }\r\n\r\n    event OnSwapAndRedirectEthFees(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived\r\n    );\r\n    event SwapAndRedirectEthFeesUpdated(bool enabled);  \r\n\r\n    event TransferBurn(address indexed from, address indexed burnAddress, uint256 value);\r\n    event TransferFees(address indexed from, address indexed to, uint256 amount);\r\n\r\n    constructor(\r\n        string  memory name,\r\n        string  memory symbol,\r\n        address payable addr1,\r\n        address payable addr2\r\n        ) ERC20(name, symbol)\r\n    {\r\n        _devAddress = addr1;\r\n        _marketingAddress = addr2;\r\n        \r\n        //exclude owner, burn address, contract from fees\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[BURN_ADDRESS] = true;\r\n\r\n        //exclude burn address, contract from collecting reflections / rewards\r\n        _isExcludedFromReward[address(this)] = true;\r\n        _isExcludedFromReward[BURN_ADDRESS] = true;\r\n        _excludedFromReward.push(BURN_ADDRESS);\r\n        _excludedFromReward.push(address(this));\r\n        \r\n        _rOwned[_msgSender()] = _rTotal;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n\t}\r\n\r\n\r\n    function addLiquidityUniswap() external onlyOwner() {\r\n\r\n        require(!tradingOpen,\"trading is already open\");\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        swapAndRedirectEthFeesEnabled = true;\r\n        tradingOpen = true;\r\n        _maxTxAmount = ExtraMath.percentageOf(_tTotal,5);\r\n        _maxHoldAmount = ExtraMath.percentageOf(_tTotal,5);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n\r\n        //exclude LP pair from receiving reflections\r\n\t\tif(_rOwned[address(uniswapV2Pair)] > 0) {\r\n\t\t\t_tOwned[address(uniswapV2Pair)] = tokenFromReflection(_rOwned[address(uniswapV2Pair)]);\r\n\t\t}\r\n\t\t_isExcludedFromReward[address(uniswapV2Pair)] = true;\r\n\t\t_excludedFromReward.push(address(uniswapV2Pair));\r\n\r\n    }\r\n\t\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        \treturn 9;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        \treturn _tTotal;\r\n    }\r\n\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\tif (_isExcludedFromReward[account]) return _tOwned[account];\r\n\t\treturn tokenFromReflection(_rOwned[account]);\r\n\t}\r\n\r\n\tfunction totalRewards() public view returns (uint256) {\r\n\t\treturn _tRewardsTotal;\r\n\t}\r\n\r\n\tfunction totalBurned() public view returns (uint256) {\r\n\t\treturn balanceOf(BURN_ADDRESS);\r\n\t}\r\n\r\n\tfunction deliver(uint256 tAmount) public {\r\n\t\taddress sender = _msgSender();\r\n\t\trequire(!_isExcludedFromReward[sender], \"Excluded addresses cannot call this function\");\r\n\t\t(uint256 rAmount,,,,,,) = _getValues(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_rTotal = _rTotal.sub(rAmount);\r\n\t\t_tRewardsTotal = _tRewardsTotal.add(tAmount);\r\n\t}\r\n\r\n\tfunction reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n\t\trequire(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n\t\tif (!deductTransferFee) {\r\n\t\t\t(uint256 rAmount,,,,,,) = _getValues(tAmount);\r\n\t\t\treturn rAmount;\r\n\t\t} else {\r\n\t\t\t(,uint256 rTransferAmount,,,,,) = _getValues(tAmount);\r\n\t\t\treturn rTransferAmount;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n\t\trequire(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n\t\tuint256 currentRate =  _getRate();\r\n\t\treturn rAmount.div(currentRate);\r\n\t}\r\n\r\n\tfunction isExcludedFromReward(address account) public view returns (bool) {\r\n\t\treturn _isExcludedFromReward[account];\r\n\t}\r\n\r\n\tfunction excludeFromReward(address account) external onlyOwner {\r\n\t\trequire(!_isExcludedFromReward[account], \"Account is already excluded\");\r\n\t\tif(_rOwned[account] > 0) {\r\n\t\t\t_tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n\t\t}\r\n\t\t_isExcludedFromReward[account] = true;\r\n\t\t_excludedFromReward.push(account);\r\n\t}\r\n\r\n\tfunction includeInReward(address account) external onlyOwner {\r\n\t\trequire(_isExcludedFromReward[account], \"Account is already excluded\");\r\n\t\tfor (uint256 i = 0; i < _excludedFromReward.length; i++) {\r\n\t\t\tif (_excludedFromReward[i] == account) {\r\n\t\t\t\t_excludedFromReward[i] = _excludedFromReward[_excludedFromReward.length - 1];\r\n\t\t\t\t_tOwned[account] = 0;\r\n\t\t\t\t_isExcludedFromReward[account] = false;\r\n\t\t\t\t_excludedFromReward.pop();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction excludeFromFee(address account) external onlyOwner {\r\n\t\t_isExcludedFromFee[account] = true;\r\n\t}\r\n\r\n\tfunction includeInFee(address account) external onlyOwner {\r\n\t\t_isExcludedFromFee[account] = false;\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\r\n\tfunction _reflectFee(uint256 _rRewardFee, uint256 _tRewardFee) private {\r\n\t\t_rTotal = _rTotal.sub(_rRewardFee);\r\n\t\t_tRewardsTotal = _tRewardsTotal.add(_tRewardFee);\r\n\t}\r\n\r\n\tfunction _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n\t\t(\r\n\t\t    uint256 tTransferAmount,\r\n\t\t    uint256 _tRewardFee,\r\n\t\t    uint256 tBurn,\r\n            uint256 tTeam\r\n\t\t ) = _getTValues(tAmount);\r\n\t\t \r\n\t\t(\r\n\t\t    uint256 rAmount,\r\n\t\t    uint256 rTransferAmount,\r\n\t\t    uint256 _rRewardFee\r\n\t\t ) = _getRValues(tAmount, _tRewardFee, tBurn, tTeam, _getRate());\r\n\t\t \r\n\t\treturn (rAmount, rTransferAmount, _rRewardFee, tTransferAmount, _tRewardFee, tBurn, tTeam);\r\n\t}\r\n\r\n\tfunction _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {\r\n\t\tuint256 _tRewardFee = ExtraMath.percentageOf(tAmount, _rewardFee);\r\n\t\tuint256 tBurn = ExtraMath.percentageOf(tAmount, _burnFee);\r\n        uint256 tTeam = ExtraMath.percentageOf(tAmount, _devTax);\r\n\t\tuint256 tTransferAmount = tAmount.sub(_tRewardFee).sub(tBurn).sub(tTeam);\r\n\t\treturn (tTransferAmount, _tRewardFee, tBurn, tTeam);\r\n\t}\r\n\r\n\tfunction _getRValues(uint256 tAmount, uint256 _tRewardFee, uint256 tBurn, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n\t\tuint256 rAmount = tAmount.mul(currentRate);\r\n\t\tuint256 _rRewardFee = _tRewardFee.mul(currentRate);\r\n\t\tuint256 rBurn = tBurn.mul(currentRate);\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n\t\tuint256 rTransferAmount = rAmount.sub(_rRewardFee).sub(rBurn).sub(rTeam);\r\n\t\treturn (rAmount, rTransferAmount, _rRewardFee);\r\n\t}\r\n\r\n\tfunction _getRate() private view returns(uint256) {\r\n\t\t(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n\t\treturn rSupply.div(tSupply);\r\n\t}\r\n\r\n\tfunction _getCurrentSupply() private view returns(uint256, uint256) {\r\n\t\tuint256 rSupply = _rTotal;\r\n\t\tuint256 tSupply = _tTotal;\r\n\t\tfor (uint256 i = 0; i < _excludedFromReward.length; i++) {\r\n\t\t\tif (_rOwned[_excludedFromReward[i]] > rSupply || _tOwned[_excludedFromReward[i]] > tSupply) return (_rTotal, _tTotal);\r\n\t\t\trSupply = rSupply.sub(_rOwned[_excludedFromReward[i]]);\r\n\t\t\ttSupply = tSupply.sub(_tOwned[_excludedFromReward[i]]);\r\n\t\t}\r\n\t\tif (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n\t\treturn (rSupply, tSupply);\r\n\t}\r\n\r\n\tfunction removeAllFee() private {\r\n\t\tif(_rewardFee == 0 && _burnFee == 0 && _devTax == 0 ) return;\r\n\t\t_previousRewardFee = _rewardFee;\r\n\t\t_previousBurnFee   = _burnFee;\r\n        _previousDevTax    = _devTax;\r\n\t\t_rewardFee = 0;\r\n\t\t_burnFee   = 0;\r\n        _devTax    = 0;\r\n\t}\r\n\r\n\tfunction restoreAllFee() private {\r\n\t\t_rewardFee = _previousRewardFee;\r\n\t\t_burnFee   = _previousBurnFee;\r\n        _devTax    = _previousDevTax;\r\n\t}\r\n\r\n\tfunction isExcludedFromFee(address account) public view returns(bool) {\r\n\t\treturn _isExcludedFromFee[account];\r\n\t}\r\n\r\n\tfunction _transfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal override {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(from != BURN_ADDRESS, \"Hey, don't even think about it\");\r\n\r\n        bool takeFee = false;\r\n\r\n        if (!(_isExcludedFromFee[from] || _isExcludedFromFee[to])) {\r\n    \r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to]) {\r\n                if (tradingOpen){\r\n                    require(amount <= _maxTxAmount);\r\n                    require(balanceOf(to).add(amount) <= _maxHoldAmount);\r\n                }\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n            if (\r\n                !currentlySwapping &&\r\n                from != uniswapV2Pair &&\r\n                swapAndRedirectEthFeesEnabled\r\n            ) {\r\n                // swap for dev fees\r\n                swapAndRedirectEthFees(contractTokenBalance);\r\n            }\r\n            \r\n            // take fee only on swaps\r\n            if (\r\n            (from == uniswapV2Pair || to == uniswapV2Pair) &&\r\n            !(_isExcludedFromFee[from] || _isExcludedFromFee[to])\r\n            ) {\r\n            takeFee = true;\r\n            }\r\n        \r\n        }\r\n\r\n        //transfer amount, it will take tax, ref, burn\r\n\t\t_tokenTransfer(from,to,amount,takeFee);\r\n        \r\n\t}\r\n\r\n\r\n\tfunction _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n\r\n\t\tif(!takeFee)\r\n\t\t\tremoveAllFee();\r\n\r\n\t\tif (_isExcludedFromReward[sender] && !_isExcludedFromReward[recipient]) {\r\n\t\t\t_transferFromExcluded(sender, recipient, amount);\r\n\t\t} else if (!_isExcludedFromReward[sender] && _isExcludedFromReward[recipient]) {\r\n\t\t\t_transferToExcluded(sender, recipient, amount);\r\n\t\t} else if (_isExcludedFromReward[sender] && _isExcludedFromReward[recipient]) {\r\n\t\t\t_transferBothExcluded(sender, recipient, amount);\r\n\t\t} else {\r\n\t\t\t_transferStandard(sender, recipient, amount);\r\n\t\t}\r\n\r\n\t\tif(!takeFee)\r\n\t\t\trestoreAllFee();\r\n\r\n\t}\r\n\r\n\tfunction _transferTax(uint256 tAmount, address recipient) private {\r\n\t    uint256 currentRate = _getRate();\r\n\t    uint256 rAmount = tAmount.mul(currentRate);\r\n\t    _rOwned[recipient]  = _rOwned[recipient].add(rAmount);\r\n\t    if(_isExcludedFromReward[recipient]) {\r\n\t        _tOwned[recipient] = _tOwned[recipient].add(tAmount);\r\n\t    }\r\n\t}\r\n\r\n\tfunction _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\t\t(\r\n\t\t\tuint256 rAmount,\r\n\t\t\tuint256 rTransferAmount,\r\n\t\t\tuint256 _rRewardFee,\r\n\t\t\tuint256 tTransferAmount,\r\n\t\t\tuint256 _tRewardFee,\r\n\t\t\tuint256 tBurn,\r\n            uint256 tTeam\r\n\t\t) = _getValues(tAmount);\r\n\r\n\t\t_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\r\n\t\t_transferTax(tBurn, BURN_ADDRESS);  //transfer the burn tax to burn wallet\r\n        _transferTax(tTeam, address(this)); //transfer the taxes for dev to the contract\r\n\t\t_reflectFee(_rRewardFee, _tRewardFee);\r\n\r\n\t\temit TransferBurn(sender, BURN_ADDRESS, tBurn);\r\n        emit TransferFees(sender, address(this), tTeam);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t}\r\n\r\n\tfunction _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\t\t(\r\n\t\t\tuint256 rAmount,\r\n\t\t\tuint256 rTransferAmount,\r\n\t\t\tuint256 _rRewardFee,\r\n\t\t\tuint256 tTransferAmount,\r\n\t\t\tuint256 _tRewardFee,\r\n\t\t\tuint256 tBurn,\r\n            uint256 tTeam\r\n\t\t) = _getValues(tAmount);\r\n\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        \r\n\t\t_transferTax(tBurn, BURN_ADDRESS);  //transfer the burn tax to burn wallet\r\n        _transferTax(tTeam, address(this)); //transfer the taxes for dev to the contract\r\n\t\t_reflectFee(_rRewardFee, _tRewardFee);\r\n\r\n\t\temit TransferBurn(sender, BURN_ADDRESS, tBurn);\r\n        emit TransferFees(sender, address(this), tTeam);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t}\r\n\r\n\tfunction _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n\t\t(\r\n\t\t\tuint256 rAmount,\r\n\t\t\tuint256 rTransferAmount,\r\n\t\t\tuint256 _rRewardFee,\r\n\t\t\tuint256 tTransferAmount,\r\n\t\t\tuint256 _tRewardFee,\r\n\t\t\tuint256 tBurn,\r\n            uint256 tTeam\r\n\t\t) = _getValues(tAmount);\r\n\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\r\n\t\t_transferTax(tBurn, BURN_ADDRESS);  //transfer the burn tax to burn wallet\r\n        _transferTax(tTeam, address(this)); //transfer the taxes for dev to the contract\r\n\t\t_reflectFee(_rRewardFee, _tRewardFee);\r\n\r\n\t\temit TransferBurn(sender, BURN_ADDRESS, tBurn);\r\n        emit TransferFees(sender, address(this), tTeam);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t}\r\n\r\n\tfunction _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\t\t(\r\n\t\t\tuint256 rAmount,\r\n\t\t\tuint256 rTransferAmount,\r\n\t\t\tuint256 _rRewardFee,\r\n\t\t\tuint256 tTransferAmount,\r\n\t\t\tuint256 _tRewardFee,\r\n\t\t\tuint256 tBurn,\r\n            uint256 tTeam\r\n\t\t) = _getValues(tAmount);\r\n\r\n\t\t_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\r\n\t\t_transferTax(tBurn, BURN_ADDRESS);  //transfer the burn tax to burn wallet\r\n        _transferTax(tTeam, address(this)); //transfer the taxes for dev to the contract\r\n\t\t_reflectFee(_rRewardFee, _tRewardFee);\r\n\r\n\t\temit TransferBurn(sender, BURN_ADDRESS, tBurn);\r\n        emit TransferFees(sender, address(this), tTeam);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\r\n\t}\r\n\r\n    function swapAndRedirectEthFees(uint256 contractTokenBalance) private lockTheSwap {\r\n\r\n        \r\n        // swap tokens for ETH\r\n        swapTokensForEth(contractTokenBalance);\r\n        //\r\n        // for dev fee\r\n        // send to the dev address\r\n        //\r\n\r\n        uint256 contractETHBalance = address(this).balance;\r\n\r\n        if (contractETHBalance > 0) {\r\n            sendEthToDevAddress(contractETHBalance);\r\n            emit OnSwapAndRedirectEthFees(contractTokenBalance, contractETHBalance);\r\n        }\r\n    }\r\n\r\n    function sendEthToDevAddress(uint256 amount) private {\r\n        _devAddress.transfer(amount.mul(50).div(100));\r\n        _marketingAddress.transfer(amount.mul(50).div(100));\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function manualSwap(uint256 noOfTokens) external  {\r\n        require(_msgSender() == _devAddress);\r\n        uint256 noOfTokensToSwap = noOfTokens * 10**9;\r\n        require(noOfTokensToSwap <= balanceOf(address(this))); \r\n        swapTokensForEth(noOfTokensToSwap);\r\n    }\r\n\r\n    function manualSend() external {\r\n        require(_msgSender() == _devAddress);\r\n        uint256 contractEthBalance = address(this).balance;\r\n        sendEthToDevAddress(contractEthBalance);\r\n    }\r\n\r\n    function manualTransfer(uint256 noOfTokens) external  {\r\n    \trequire(_msgSender() == _devAddress);    \r\n    \tuint256 noOfTokensToSend = noOfTokens * 10**9;\r\n    \trequire(noOfTokensToSend <= balanceOf(address(this)));\r\n   \t    bool takeFee = false;\r\n    \t_tokenTransfer(address(this),_msgSender(),noOfTokensToSend,takeFee);\r\n }\r\n\r\n    //set internal swaps\r\n    function setSwapAndRedirectEthFeesEnabled(bool _enabled) external onlyOwner() {\r\n        swapAndRedirectEthFeesEnabled = _enabled;\r\n        emit SwapAndRedirectEthFeesUpdated(_enabled);\r\n    }  \r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"addr1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"addr2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"OnSwapAndRedirectEthFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndRedirectEthFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burnAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferFees\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxHoldAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tRewardsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityUniswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"noOfTokens\",\"type\":\"uint256\"}],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"noOfTokens\",\"type\":\"uint256\"}],\"name\":\"manualTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndRedirectEthFeesEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndRedirectEthFeesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NaughtyAperica","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000b6fed27d0e31871bd038a247618bf35e93111fd20000000000000000000000005fc2fc1e1c0b479f3704c77109089d5ac2840d5e00000000000000000000000000000000000000000000000000000000000000244e61756768747941706572696361207c20742e6d652f4e617567687479417065726963610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094e41504520f09f928b0000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://956105ffa9fd4f7956352e84dd763f87f4630c4226ed1a2a70ebcaf88fcc0a1a"}]}