{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NodesV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC1155Preset.sol\\\";\\nimport \\\"./interfaces/StrongPoolInterface.sol\\\";\\nimport \\\"./lib/AdminAccessControl.sol\\\";\\nimport \\\"./interfaces/StrongNFTBonusInterface.sol\\\";\\nimport \\\"./lib/rewards.sol\\\";\\n\\ncontract NodesV2 is AdminAccessControl {\\n\\n  event Requested(address indexed miner);\\n  event Claimed(address indexed miner, uint256 reward);\\n  event Paid(address indexed entity, uint128 nodeId, bool isRenewal, uint256 upToBlockNumber);\\n\\n  using SafeMath for uint256;\\n\\n  IERC20 public strongToken;\\n  StrongPoolInterface public strongPool;\\n\\n  bool public initDone;\\n  uint256 public activeEntities;\\n  address payable public feeCollector;\\n  uint256 public rewardPerBlockNumerator;\\n  uint256 public rewardPerBlockDenominator;\\n  uint256 public rewardPerBlockNumeratorNew;\\n  uint256 public rewardPerBlockDenominatorNew;\\n  uint256 public rewardPerBlockNewEffectiveBlock;\\n  uint256 public claimingFeeNumerator;\\n  uint256 public claimingFeeDenominator;\\n  uint256 public requestingFeeInWei;\\n  uint256 public strongFeeInWei;\\n  uint256 public recurringFeeInWei;\\n  uint256 public recurringPaymentCycleInBlocks;\\n  uint256 public rewardBalance;\\n  uint256 public claimingFeeInWei;\\n  uint256 public gracePeriodInBlocks;\\n  uint128 public maxNodes;\\n  uint256 public maxPaymentPeriods;\\n  mapping(bytes => uint256) public entityNodePaidOnBlock;\\n  mapping(bytes => uint256) public entityNodeClaimedOnBlock;\\n  mapping(address => uint128) public entityNodeCount;\\n\\n  StrongNFTBonusInterface public strongNFTBonus;\\n\\n  function init(\\n    address _strongTokenAddress,\\n    address _strongPoolAddress,\\n    uint256 _rewardPerBlockNumeratorValue,\\n    uint256 _rewardPerBlockDenominatorValue,\\n    uint256 _requestingFeeInWeiValue,\\n    uint256 _strongFeeInWeiValue,\\n    uint256 _recurringFeeInWeiValue,\\n    uint256 _recurringPaymentCycleInBlocksValue,\\n    uint256 _claimingFeeNumeratorValue,\\n    uint256 _claimingFeeDenominatorValue\\n  ) public {\\n    require(!initDone, \\\"init done\\\");\\n\\n    strongToken = IERC20(_strongTokenAddress);\\n    strongPool = StrongPoolInterface(_strongPoolAddress);\\n    rewardPerBlockNumerator = _rewardPerBlockNumeratorValue;\\n    rewardPerBlockDenominator = _rewardPerBlockDenominatorValue;\\n    requestingFeeInWei = _requestingFeeInWeiValue;\\n    strongFeeInWei = _strongFeeInWeiValue;\\n    recurringFeeInWei = _recurringFeeInWeiValue;\\n    claimingFeeNumerator = _claimingFeeNumeratorValue;\\n    claimingFeeDenominator = _claimingFeeDenominatorValue;\\n    recurringPaymentCycleInBlocks = _recurringPaymentCycleInBlocksValue;\\n    maxNodes = 100;\\n    initDone = true;\\n  }\\n\\n  //\\n  // Getters\\n  // -------------------------------------------------------------------------------------------------------------------\\n\\n  function canBePaid(address _entity, uint128 _nodeId) public view returns (bool) {\\n    return !hasNodeExpired(_entity, _nodeId) && !hasMaxPayments(_entity, _nodeId);\\n  }\\n\\n  function doesNodeExist(address _entity, uint128 _nodeId) public view returns (bool) {\\n    return entityNodePaidOnBlock[getNodeId(_entity, _nodeId)] > 0;\\n  }\\n\\n  function hasNodeExpired(address _entity, uint128 _nodeId) public view returns (bool) {\\n    uint256 blockLastPaidOn = entityNodePaidOnBlock[getNodeId(_entity, _nodeId)];\\n    return block.number > blockLastPaidOn.add(recurringPaymentCycleInBlocks).add(gracePeriodInBlocks);\\n  }\\n\\n  function hasMaxPayments(address _entity, uint128 _nodeId) public view returns (bool) {\\n    uint256 blockLastPaidOn = entityNodePaidOnBlock[getNodeId(_entity, _nodeId)];\\n    uint256 limit = block.number.add(recurringPaymentCycleInBlocks.mul(maxPaymentPeriods));\\n\\n    return blockLastPaidOn.add(recurringPaymentCycleInBlocks) >= limit;\\n  }\\n\\n  function getNodeId(address _entity, uint128 _nodeId) public view returns (bytes memory) {\\n    uint128 id = _nodeId != 0 ? _nodeId : entityNodeCount[_entity] + 1;\\n    return abi.encodePacked(_entity, id);\\n  }\\n\\n  function getNodePaidOn(address _entity, uint128 _nodeId) public view returns (uint256) {\\n    return entityNodePaidOnBlock[getNodeId(_entity, _nodeId)];\\n  }\\n\\n  function getReward(address _entity, uint128 _nodeId) public view returns (uint256) {\\n    return getRewardByBlock(_entity, _nodeId, block.number);\\n  }\\n\\n  function getRewardAll(address _entity, uint256 _blockNumber) public view returns (uint256) {\\n    uint256 rewardsAll = 0;\\n\\n    for (uint128 i = 1; i <= entityNodeCount[_entity]; i++) {\\n      rewardsAll = rewardsAll.add(getRewardByBlock(_entity, i, _blockNumber > 0 ? _blockNumber : block.number));\\n    }\\n\\n    return rewardsAll;\\n  }\\n\\n  function getRewardByBlock(address _entity, uint128 _nodeId, uint256 _blockNumber) public view returns (uint256) {\\n    bytes memory id = getNodeId(_entity, _nodeId);\\n\\n    uint256 blockLastClaimedOn = entityNodeClaimedOnBlock[id] != 0 ? entityNodeClaimedOnBlock[id] : entityNodePaidOnBlock[id];\\n\\n    if (_blockNumber > block.number) return 0;\\n    if (blockLastClaimedOn == 0) return 0;\\n    if (_blockNumber < blockLastClaimedOn) return 0;\\n\\n    uint256[2] memory rewardBlocks = rewards.blocks(blockLastClaimedOn, rewardPerBlockNewEffectiveBlock, _blockNumber);\\n    uint256 rewardOld = rewardPerBlockDenominator > 0 ? rewardBlocks[0].mul(rewardPerBlockNumerator).div(rewardPerBlockDenominator) : 0;\\n    uint256 rewardNew = rewardPerBlockDenominatorNew > 0 ? rewardBlocks[1].mul(rewardPerBlockNumeratorNew).div(rewardPerBlockDenominatorNew) : 0;\\n\\n    uint256 bonus = address(strongNFTBonus) != address(0)\\n    ? strongNFTBonus.getBonus(_entity, _nodeId, blockLastClaimedOn, _blockNumber)\\n    : 0;\\n\\n    return rewardOld.add(rewardNew).add(bonus);\\n  }\\n\\n  function isEntityActive(address _entity) public view returns (bool) {\\n    return doesNodeExist(_entity, 1) && !hasNodeExpired(_entity, 1);\\n  }\\n\\n  //\\n  // Actions\\n  // -------------------------------------------------------------------------------------------------------------------\\n\\n  function requestAccess() public payable {\\n    require(entityNodeCount[msg.sender] < maxNodes, \\\"limit reached\\\");\\n    require(msg.value == requestingFeeInWei, \\\"invalid fee\\\");\\n\\n    uint128 nodeId = entityNodeCount[msg.sender] + 1;\\n    bytes memory id = getNodeId(msg.sender, nodeId);\\n\\n    activeEntities = activeEntities.add(1);\\n\\n    entityNodePaidOnBlock[id] = block.number;\\n    entityNodeClaimedOnBlock[id] = block.number;\\n    entityNodeCount[msg.sender] = entityNodeCount[msg.sender] + 1;\\n\\n    feeCollector.transfer(msg.value);\\n    strongToken.transferFrom(msg.sender, feeCollector, strongFeeInWei);\\n\\n    emit Paid(msg.sender, nodeId, false, entityNodePaidOnBlock[id].add(recurringPaymentCycleInBlocks));\\n  }\\n\\n  function payFee(uint128 _nodeId) public payable {\\n    address sender = msg.sender == address(this) ? tx.origin : msg.sender;\\n    bytes memory id = getNodeId(sender, _nodeId);\\n\\n    require(doesNodeExist(sender, _nodeId), \\\"doesnt exist\\\");\\n    require(hasNodeExpired(sender, _nodeId) == false, \\\"too late\\\");\\n    require(hasMaxPayments(sender, _nodeId) == false, \\\"too soon\\\");\\n    require(msg.value == recurringFeeInWei, \\\"invalid fee\\\");\\n\\n    feeCollector.transfer(msg.value);\\n    entityNodePaidOnBlock[id] = entityNodePaidOnBlock[id].add(recurringPaymentCycleInBlocks);\\n\\n    emit Paid(sender, _nodeId, true, entityNodePaidOnBlock[id]);\\n  }\\n\\n  function claim(uint128 _nodeId, uint256 _blockNumber, bool _toStrongPool) public payable returns (bool) {\\n    address sender = msg.sender == address(this) || msg.sender == address(strongNFTBonus) ? tx.origin : msg.sender;\\n    bytes memory id = getNodeId(sender, _nodeId);\\n\\n    uint256 blockLastClaimedOn = entityNodeClaimedOnBlock[id] != 0 ? entityNodeClaimedOnBlock[id] : entityNodePaidOnBlock[id];\\n    uint256 blockLastPaidOn = entityNodePaidOnBlock[id];\\n\\n    require(blockLastClaimedOn != 0, \\\"never claimed\\\");\\n    require(_blockNumber <= block.number, \\\"invalid block\\\");\\n    require(_blockNumber > blockLastClaimedOn, \\\"too soon\\\");\\n\\n    if (recurringFeeInWei != 0) {\\n      require(_blockNumber < blockLastPaidOn.add(recurringPaymentCycleInBlocks), \\\"pay fee\\\");\\n    }\\n\\n    uint256 reward = getRewardByBlock(sender, _nodeId, _blockNumber);\\n    require(reward > 0, \\\"no reward\\\");\\n\\n    uint256 fee = reward.mul(claimingFeeNumerator).div(claimingFeeDenominator);\\n    require(msg.value >= fee, \\\"invalid fee\\\");\\n\\n    feeCollector.transfer(msg.value);\\n\\n    if (_toStrongPool) {\\n      strongToken.approve(address(strongPool), reward);\\n      strongPool.mineFor(sender, reward);\\n    } else {\\n      strongToken.transfer(sender, reward);\\n    }\\n\\n    rewardBalance = rewardBalance.sub(reward);\\n    entityNodeClaimedOnBlock[id] = _blockNumber;\\n    emit Claimed(sender, reward);\\n\\n    return true;\\n  }\\n\\n  function claimAll(uint256 _blockNumber, bool _toStrongPool) public payable {\\n    uint256 value = msg.value;\\n    for (uint16 i = 1; i <= entityNodeCount[msg.sender]; i++) {\\n      uint256 reward = getRewardByBlock(msg.sender, i, _blockNumber);\\n      uint256 fee = reward.mul(claimingFeeNumerator).div(claimingFeeDenominator);\\n      require(value >= fee, \\\"invalid fee\\\");\\n      require(this.claim{value : fee}(i, _blockNumber, _toStrongPool), \\\"claim failed\\\");\\n      value = value.sub(fee);\\n    }\\n  }\\n\\n  function payAll(uint256 _nodeCount) public payable {\\n    require(_nodeCount > 0, \\\"invalid value\\\");\\n    require(msg.value == recurringFeeInWei.mul(_nodeCount), \\\"invalid fee\\\");\\n\\n    for (uint16 nodeId = 1; nodeId <= entityNodeCount[msg.sender]; nodeId++) {\\n      if (!canBePaid(msg.sender, nodeId)) {\\n        continue;\\n      }\\n\\n      this.payFee{value : recurringFeeInWei}(nodeId);\\n      _nodeCount = _nodeCount.sub(1);\\n    }\\n\\n    require(_nodeCount == 0, \\\"invalid count\\\");\\n  }\\n\\n  //\\n  // Admin\\n  // -------------------------------------------------------------------------------------------------------------------\\n\\n  function deposit(uint256 _amount) public onlyRole(adminControl.SUPER_ADMIN()) {\\n    require(_amount > 0);\\n    strongToken.transferFrom(msg.sender, address(this), _amount);\\n    rewardBalance = rewardBalance.add(_amount);\\n  }\\n\\n  function withdraw(address _destination, uint256 _amount) public onlyRole(adminControl.SUPER_ADMIN()) {\\n    require(_amount > 0);\\n    require(rewardBalance >= _amount, \\\"not enough\\\");\\n    strongToken.transfer(_destination, _amount);\\n    rewardBalance = rewardBalance.sub(_amount);\\n  }\\n\\n  function updateFeeCollector(address payable _newFeeCollector) public onlyRole(adminControl.SUPER_ADMIN()) {\\n    require(_newFeeCollector != address(0));\\n    feeCollector = _newFeeCollector;\\n  }\\n\\n  function updateRequestingFee(uint256 _feeInWei) public onlyRole(adminControl.SERVICE_ADMIN()) {\\n    requestingFeeInWei = _feeInWei;\\n  }\\n\\n  function updateStrongFee(uint256 _feeInWei) public onlyRole(adminControl.SERVICE_ADMIN()) {\\n    strongFeeInWei = _feeInWei;\\n  }\\n\\n  function updateClaimingFee(uint256 _numerator, uint256 _denominator) public onlyRole(adminControl.SERVICE_ADMIN()) {\\n    require(_denominator != 0);\\n    claimingFeeNumerator = _numerator;\\n    claimingFeeDenominator = _denominator;\\n  }\\n\\n  function updateRecurringFee(uint256 _feeInWei) public onlyRole(adminControl.SERVICE_ADMIN()) {\\n    recurringFeeInWei = _feeInWei;\\n  }\\n\\n  function updateRecurringPaymentCycleInBlocks(uint256 _blocks) public onlyRole(adminControl.SERVICE_ADMIN()) {\\n    require(_blocks > 0);\\n    recurringPaymentCycleInBlocks = _blocks;\\n  }\\n\\n  function updateGracePeriodInBlocks(uint256 _blocks) public onlyRole(adminControl.SERVICE_ADMIN()) {\\n    require(_blocks > 0);\\n    gracePeriodInBlocks = _blocks;\\n  }\\n\\n  function updateLimits(uint128 _maxNodes, uint256 _maxPaymentPeriods) public onlyRole(adminControl.SERVICE_ADMIN()) {\\n    maxNodes = _maxNodes;\\n    maxPaymentPeriods = _maxPaymentPeriods;\\n  }\\n\\n  function updateRewardPerBlock(uint256 _numerator, uint256 _denominator) public onlyRole(adminControl.SERVICE_ADMIN()) {\\n    require(_denominator != 0);\\n    rewardPerBlockNumerator = _numerator;\\n    rewardPerBlockDenominator = _denominator;\\n  }\\n\\n  function updateRewardPerBlockNew(uint256 _numerator, uint256 _denominator, uint256 _effectiveBlock) public onlyRole(adminControl.SERVICE_ADMIN()) {\\n    require(_denominator != 0);\\n    rewardPerBlockNumeratorNew = _numerator;\\n    rewardPerBlockDenominatorNew = _denominator;\\n    rewardPerBlockNewEffectiveBlock = _effectiveBlock != 0 ? _effectiveBlock : block.number;\\n  }\\n\\n  function addNFTBonusContract(address _contract) public onlyRole(adminControl.SERVICE_ADMIN()) {\\n    strongNFTBonus = StrongNFTBonusInterface(_contract);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC1155Preset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Preset {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\\n     *\\n     * See {ERC1155-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `MINTER_ROLE`.\\n     */\\n    function mint(address to, uint256 id, uint256 amount, bytes memory data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}.\\n     */\\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) external;\\n\\n    function getOwnerIdByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    function getOwnerIdIndex(address owner, uint256 id) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/StrongPoolInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface StrongPoolInterface {\\n  function mineFor(address miner, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/AdminAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"../interfaces/AdminControlInterface.sol\\\";\\n\\nabstract contract AdminAccessControl {\\n\\n  AdminControlInterface public adminControl;\\n\\n  modifier onlyRole(uint8 _role) {\\n    require(address(adminControl) == address(0) || adminControl.hasRole(_role, msg.sender), 'no access');\\n    _;\\n  }\\n\\n  function addAdminControlContract(address _contract) public onlyRole(0) {\\n    adminControl = AdminControlInterface(_contract);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/StrongNFTBonusInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface StrongNFTBonusInterface {\\n  function getBonus(address _entity, uint128 _nodeId, uint256 _fromBlock, uint256 _toBlock) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/rewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary rewards {\\n\\n    using SafeMath for uint256;\\n\\n    function blocks(uint256 lastClaimedOnBlock, uint256 newRewardBlock, uint256 blockNumber) internal pure returns (uint256[2] memory) {\\n        if (lastClaimedOnBlock >= blockNumber) return [uint256(0), uint256(0)];\\n\\n        if (blockNumber <= newRewardBlock || newRewardBlock == 0) {\\n            return [blockNumber.sub(lastClaimedOnBlock), uint256(0)];\\n        }\\n        else if (lastClaimedOnBlock >= newRewardBlock) {\\n            return [uint256(0), blockNumber.sub(lastClaimedOnBlock)];\\n        }\\n        else {\\n            return [newRewardBlock.sub(lastClaimedOnBlock), blockNumber.sub(newRewardBlock)];\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/AdminControlInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface AdminControlInterface {\\n\\n  function hasRole(uint8 _role, address _account) external view returns (bool);\\n\\n  function SUPER_ADMIN() external view returns (uint8);\\n  function ADMIN() external view returns (uint8);\\n  function SERVICE_ADMIN() external view returns (uint8);\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"nodeId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRenewal\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upToBlockNumber\",\"type\":\"uint256\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"}],\"name\":\"Requested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeEntities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"addAdminControlContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"addNFTBonusContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminControl\",\"outputs\":[{\"internalType\":\"contract AdminControlInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_nodeId\",\"type\":\"uint128\"}],\"name\":\"canBePaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_nodeId\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_toStrongPool\",\"type\":\"bool\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_toStrongPool\",\"type\":\"bool\"}],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_nodeId\",\"type\":\"uint128\"}],\"name\":\"doesNodeExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"entityNodeClaimedOnBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entityNodeCount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"entityNodePaidOnBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_nodeId\",\"type\":\"uint128\"}],\"name\":\"getNodeId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_nodeId\",\"type\":\"uint128\"}],\"name\":\"getNodePaidOn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_nodeId\",\"type\":\"uint128\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getRewardAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_nodeId\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getRewardByBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gracePeriodInBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_nodeId\",\"type\":\"uint128\"}],\"name\":\"hasMaxPayments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_nodeId\",\"type\":\"uint128\"}],\"name\":\"hasNodeExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strongTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strongPoolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlockNumeratorValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlockDenominatorValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestingFeeInWeiValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strongFeeInWeiValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_recurringFeeInWeiValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_recurringPaymentCycleInBlocksValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimingFeeNumeratorValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimingFeeDenominatorValue\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"}],\"name\":\"isEntityActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNodes\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPaymentPeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nodeCount\",\"type\":\"uint256\"}],\"name\":\"payAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_nodeId\",\"type\":\"uint128\"}],\"name\":\"payFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recurringFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recurringPaymentCycleInBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestAccess\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestingFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlockDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlockDenominatorNew\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlockNewEffectiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlockNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlockNumeratorNew\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strongFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strongNFTBonus\",\"outputs\":[{\"internalType\":\"contract StrongNFTBonusInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strongPool\",\"outputs\":[{\"internalType\":\"contract StrongPoolInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strongToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"updateClaimingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newFeeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"updateGracePeriodInBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_maxNodes\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"_maxPaymentPeriods\",\"type\":\"uint256\"}],\"name\":\"updateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeInWei\",\"type\":\"uint256\"}],\"name\":\"updateRecurringFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"updateRecurringPaymentCycleInBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeInWei\",\"type\":\"uint256\"}],\"name\":\"updateRequestingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_effectiveBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlockNew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeInWei\",\"type\":\"uint256\"}],\"name\":\"updateStrongFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NodesV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}