{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TellorProvider.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"./ITellorGetters.sol\\\";\\nimport \\\"./IMedianOracle.sol\\\";\\n\\ncontract TellorProvider{\\n\\n    ITellorGetters public tellor;\\n    IMedianOracle public medianOracle;\\n\\n    \\n    struct TellorTimes{\\n        uint128 time0;\\n        uint128 time1;\\n    }\\n    TellorTimes public tellorReport;\\n    uint256 constant TellorID = 10;\\n\\n\\n    constructor(address _tellor, address _medianOracle) public {\\n        tellor = ITellorGetters(_tellor);\\n        medianOracle = IMedianOracle(_medianOracle);\\n    }\\n\\n    function pushTellor() external {\\n        (bool retrieved, uint256 value, uint256 _time) = getTellorData(); \\n        //Saving _time in a storage value to quickly verify disputes later\\n        if(tellorReport.time0 >= tellorReport.time1) {\\n            tellorReport.time1 = uint128(_time);\\n        } else {\\n            tellorReport.time0 = uint128(_time);\\n        }\\n        medianOracle.pushReport(value);\\n    }\\n\\n    function verifyTellorReports() external {\\n        //most recent tellor report is in dispute, so let's purge it\\n        if(tellor.retrieveData(TellorID, tellorReport.time0) == 0 || tellor.retrieveData(TellorID,tellorReport.time1) == 0){\\n            medianOracle.purgeReports();\\n        }\\n    }\\n\\n    function getTellorData() internal view returns(bool, uint256, uint256){\\n        uint256 _count = tellor.getNewValueCountbyRequestId(TellorID);\\n        if(_count > 0) {\\n            uint256 _time = tellor.getTimestampbyRequestIDandIndex(TellorID, _count - 1);\\n            uint256 _value = tellor.retrieveData(TellorID, _time);\\n            return(true, _value, _time);\\n        }\\n        return (false, 0, 0);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/ITellorGetters.sol\": {\r\n      \"content\": \"\\npragma solidity 0.4.24;\\n\\n\\n/**\\n* @title Tellor Getters\\n* @dev Oracle contract with all tellor getter functions. The logic for the functions on this contract \\n* is saved on the TellorGettersLibrary, TellorTransfer, TellorGettersLibrary, and TellorStake\\n*/\\ninterface ITellorGetters {\\n    function getNewValueCountbyRequestId(uint _requestId) external view returns(uint);\\n    function getTimestampbyRequestIDandIndex(uint _requestID, uint _index) external view returns(uint);\\n    function retrieveData(uint _requestId, uint _timestamp) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/IMedianOracle.sol\": {\r\n      \"content\": \"\\npragma solidity 0.4.24;\\n\\ninterface IMedianOracle{\\n\\n    //  // The number of seconds after which the report is deemed expired.\\n    // uint256 public reportExpirationTimeSec;\\n\\n    // // The number of seconds since reporting that has to pass before a report\\n    // // is usable.\\n    // uint256 public reportDelaySec;\\n    function reportDelaySec() external returns(uint256);\\n    function reportExpirationTimeSec() external returns(uint256);\\n    function pushReport(uint256 payload) external;\\n    function purgeReports() external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tellorReport\",\"outputs\":[{\"name\":\"time0\",\"type\":\"uint128\"},{\"name\":\"time1\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tellor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pushTellor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"medianOracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"verifyTellorReports\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tellor\",\"type\":\"address\"},{\"name\":\"_medianOracle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"TellorProvider","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"300","ConstructorArguments":"00000000000000000000000088df592f8eb5d7bd38bfef7deb0fbc02cf3778a000000000000000000000000099c9775e076fdf99388c029550155032ba2d8914","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}