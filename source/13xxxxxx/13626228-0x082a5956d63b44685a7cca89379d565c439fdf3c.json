{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.3.0\r\n# @author skozin <info@lido.fi>\r\n# @licence MIT\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface ERC20Decimals:\r\n    def decimals() -> uint256: view\r\n\r\ninterface ChainlinkAggregatorV3Interface:\r\n    def decimals() -> uint256: view\r\n    # (roundId: uint80, answer: int256, startedAt: uint256, updatedAt: uint256, answeredInRound: uint80)\r\n    def latestRoundData() -> (uint256, int256, uint256, uint256, uint256): view\r\n\r\ninterface CurvePool:\r\n    def exchange(i: int128, j: int128, dx: uint256, min_dy: uint256) -> uint256: payable\r\n\r\ninterface CurveMetaPool:\r\n    def exchange_underlying(i: int128, j: int128, dx: uint256, min_dy: uint256) -> uint256: nonpayable\r\n\r\n\r\nevent SoldStethToUST:\r\n    steth_amount: uint256\r\n    eth_amount: uint256\r\n    usdc_amount: uint256\r\n    ust_amount: uint256\r\n    steth_eth_price: uint256\r\n    eth_usdc_price: uint256\r\n    usdc_ust_price: uint256\r\n\r\nevent AdminChanged:\r\n    new_admin: address\r\n\r\nevent PriceDifferenceChanged:\r\n    max_steth_eth_price_difference_percent: uint256\r\n    max_eth_usdc_price_difference_percent: uint256\r\n    max_usdc_ust_price_difference_percent: uint256\r\n    max_steth_ust_price_difference_percent: uint256\r\n\r\nevent UniswapUSDCPoolFeeChanged:\r\n    fee: uint256\r\n\r\n\r\nUST_TOKEN: constant(address) = 0xa47c8bf37f92aBed4A126BDA807A7b7498661acD\r\nUST_TOKEN_DECIMALS: constant(uint256) = 18\r\nUSDC_TOKEN: constant(address) = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\r\nUSDC_TOKEN_DECIMALS: constant(uint256) = 6\r\nSTETH_TOKEN: constant(address) = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84\r\nSTETH_TOKEN_DECIMALS: constant(uint256) = 18\r\nWETH_TOKEN: constant(address) = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\nWETH_TOKEN_DECIMALS: constant(uint256) = 18\r\n\r\nCHAINLINK_STETH_ETH_FEED: constant(address) = 0x86392dC19c0b719886221c78AB11eb8Cf5c52812\r\nCHAINLINK_UST_ETH_FEED: constant(address) = 0xa20623070413d42a5C01Db2c8111640DD7A5A03a\r\nCHAINLINK_USDC_ETH_FEED: constant(address) = 0x986b5E1e1755e3C2440e960477f25201B0a8bbD4\r\n\r\nCURVE_STETH_POOL: constant(address) = 0xDC24316b9AE028F1497c275EB9192a3Ea0f67022\r\nCURVE_UST_POOL: constant(address) = 0x890f4e345B1dAED0367A877a1612f86A1f86985f\r\nUNISWAP_ROUTER_V3: constant(address) = 0xE592427A0AEce92De3Edee1F18E0157C05861564\r\n\r\nCURVE_ETH_INDEX: constant(uint256) = 0\r\nCURVE_STETH_INDEX: constant(uint256) = 1\r\nCURVE_USDC_UNDERLYING_INDEX: constant(uint256) = 2\r\nCURVE_UST_UNDERLYING_INDEX: constant(uint256) = 0\r\n\r\n# An address that is allowed to configure the liquidator settings.\r\nadmin: public(address)\r\n\r\n# An address that is allowed to sell.\r\nvault: public(address)\r\n\r\n# Maximum difference (in percents multiplied by 10**18) between the resulting\r\n# stETH/ETH price and the stETH/ETH anchor price obtained from the feed.\r\nmax_steth_eth_price_difference_percent: public(uint256)\r\n\r\n# Maximum difference (in percents multiplied by 10**18) between the resulting\r\n# ETH/USDC price and the ETH/USDC anchor price obtained from the feed.\r\nmax_eth_usdc_price_difference_percent: public(uint256)\r\n\r\n# Maximum difference (in percents multiplied by 10**18) between the resulting\r\n# USDC/UST price and the USDC/USD anchor price obtained from the feed.\r\nmax_usdc_ust_price_difference_percent: public(uint256)\r\n\r\n# Maximum difference (in percents multiplied by 10**18) between the resulting\r\n# stETH/UST price and the stETH/USD anchor price obtained from the feed.\r\nmax_steth_ust_price_difference_percent: public(uint256)\r\n\r\n# Uniswap pool fee (required for pool selection)\r\nuniswap_usdc_pool_fee: public(uint256)\r\n\r\n\r\n@external\r\ndef __init__(\r\n    vault: address,\r\n    admin: address,\r\n    max_steth_eth_price_difference_percent: uint256,\r\n    max_eth_usdc_price_difference_percent: uint256,\r\n    max_usdc_ust_price_difference_percent: uint256,\r\n    max_steth_ust_price_difference_percent: uint256\r\n):\r\n    assert ERC20Decimals(USDC_TOKEN).decimals() == USDC_TOKEN_DECIMALS\r\n    assert ERC20Decimals(UST_TOKEN).decimals() == UST_TOKEN_DECIMALS\r\n    assert ERC20Decimals(STETH_TOKEN).decimals() == STETH_TOKEN_DECIMALS\r\n\r\n    self.vault = vault\r\n    self.admin = admin\r\n    log AdminChanged(self.admin)\r\n\r\n    self.uniswap_usdc_pool_fee = 3000 # initially we use a pool with a commission of 0.3%\r\n\r\n    log UniswapUSDCPoolFeeChanged(self.uniswap_usdc_pool_fee)\r\n\r\n    assert max_steth_eth_price_difference_percent <= 10**18, \"invalid percentage\"\r\n    assert max_eth_usdc_price_difference_percent <= 10**18, \"invalid percentage\"\r\n    assert max_usdc_ust_price_difference_percent <= 10**18, \"invalid percentage\"\r\n    assert max_steth_ust_price_difference_percent <= 10**18, \"invalid percentage\"\r\n\r\n    self.max_steth_eth_price_difference_percent = max_steth_eth_price_difference_percent\r\n    self.max_eth_usdc_price_difference_percent = max_eth_usdc_price_difference_percent\r\n    self.max_usdc_ust_price_difference_percent = max_usdc_ust_price_difference_percent\r\n    self.max_steth_ust_price_difference_percent = max_steth_ust_price_difference_percent\r\n\r\n    log PriceDifferenceChanged(\r\n        self.max_steth_eth_price_difference_percent, \r\n        self.max_eth_usdc_price_difference_percent,\r\n        self.max_usdc_ust_price_difference_percent,\r\n        self.max_steth_ust_price_difference_percent\r\n    )\r\n\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n    pass\r\n\r\n\r\n@external\r\ndef change_admin(new_admin: address):\r\n    assert msg.sender == self.admin, \"unauthorized\"\r\n    self.admin = new_admin\r\n    log AdminChanged(self.admin)\r\n\r\n\r\n@external\r\ndef set_uniswap_usdc_pool_fee(\r\n    fee: uint256\r\n):\r\n    assert msg.sender == self.admin, \"unauthorized\"\r\n    assert fee > 0, \"invalid uniswap_usdc_pool_fee\"\r\n\r\n    self.uniswap_usdc_pool_fee = fee\r\n\r\n    log UniswapUSDCPoolFeeChanged(self.uniswap_usdc_pool_fee)\r\n\r\n\r\n@external\r\ndef configure(\r\n    max_steth_eth_price_difference_percent: uint256,\r\n    max_eth_usdc_price_difference_percent: uint256,\r\n    max_usdc_ust_price_difference_percent: uint256,\r\n    max_steth_ust_price_difference_percent: uint256\r\n):\r\n    assert msg.sender == self.admin, \"unauthorized\"\r\n    assert max_steth_eth_price_difference_percent <= 10**18, \"invalid percentage\"\r\n    assert max_eth_usdc_price_difference_percent <= 10**18, \"invalid percentage\"\r\n    assert max_usdc_ust_price_difference_percent <= 10**18, \"invalid percentage\"\r\n    assert max_steth_ust_price_difference_percent <= 10**18, \"invalid percentage\"\r\n\r\n    self.max_steth_eth_price_difference_percent = max_steth_eth_price_difference_percent\r\n    self.max_eth_usdc_price_difference_percent = max_eth_usdc_price_difference_percent\r\n    self.max_usdc_ust_price_difference_percent = max_usdc_ust_price_difference_percent\r\n    self.max_steth_ust_price_difference_percent = max_steth_ust_price_difference_percent\r\n\r\n    log PriceDifferenceChanged(\r\n        self.max_steth_eth_price_difference_percent, \r\n        self.max_eth_usdc_price_difference_percent,\r\n        self.max_usdc_ust_price_difference_percent,\r\n        self.max_steth_ust_price_difference_percent\r\n    )\r\n\r\n\r\n@internal\r\n@view\r\ndef _get_chainlink_price(chainlink_price_feed: address) -> uint256:\r\n    price_decimals: uint256 = ChainlinkAggregatorV3Interface(chainlink_price_feed).decimals()\r\n    assert 0 < price_decimals and price_decimals <= 18\r\n\r\n    round_id: uint256 = 0\r\n    answer: int256 = 0\r\n    started_at: uint256 = 0\r\n    updated_at: uint256 = 0\r\n    answered_in_round: uint256 = 0\r\n\r\n    (round_id, answer, started_at, updated_at, answered_in_round) = \\\r\n        ChainlinkAggregatorV3Interface(chainlink_price_feed).latestRoundData()\r\n\r\n    assert updated_at != 0\r\n    # forced conversion to 18 decimal places\r\n    return convert(answer, uint256) * (10 ** (18 - price_decimals))\r\n\r\n\r\n@internal\r\n@view\r\ndef _get_inverse_rate(price: uint256) -> uint256:\r\n    return  (10 ** 36) / price  \r\n\r\n\r\n@internal\r\n@view\r\ndef _get_chainlink_cross_price(priceA: uint256, priceB: uint256) -> uint256:\r\n    return (priceA * priceB) / (10 ** 18)\r\n    \r\n\r\n@internal\r\ndef _uniswap_v3_sell_eth_to_usdc(\r\n    eth_amount_in: uint256,\r\n    usdc_amount_out_min: uint256,\r\n    usdc_recipient: address\r\n) -> uint256:\r\n\r\n    result: Bytes[32] = raw_call(\r\n        UNISWAP_ROUTER_V3,\r\n        concat(\r\n            method_id(\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\"),\r\n            convert(WETH_TOKEN, bytes32),\r\n            convert(USDC_TOKEN, bytes32),\r\n            convert(self.uniswap_usdc_pool_fee, bytes32), #pool fee\r\n            convert(usdc_recipient, bytes32), #recipient\r\n            convert(block.timestamp, bytes32), #deadline\r\n            convert(eth_amount_in, bytes32),\r\n            convert(usdc_amount_out_min, bytes32),\r\n            convert(0, bytes32), #sqrtPriceLimitX96\r\n        ),\r\n        value=eth_amount_in,\r\n        max_outsize=32\r\n    )\r\n    return convert(result, uint256)\r\n\r\n\r\n@internal\r\n@pure\r\ndef _get_min_amount_out(\r\n    amount: uint256,\r\n    price: uint256,\r\n    max_diff_percent: uint256,\r\n    decimal_token_in: uint256,\r\n    decimal_token_out: uint256\r\n) -> uint256:\r\n    # = (amount * (10 ** (18 - decimal_token_in)) * price) / 10 ** 18\r\n    amount_out: uint256 = (amount * price) / (10 ** decimal_token_in)\r\n\r\n    min_mult: uint256 = 10**18 - max_diff_percent\r\n\r\n    # = ((amount_out * min_mult) / 10**18) / (10 ** (18 - decimal_token_out))\r\n    return (amount_out * min_mult) / (10 ** (36 - decimal_token_out))\r\n\r\n\r\n# 1) stETH -> ETH (Curve)\r\n# 2) ETH -> USDC (Uniswap v3)\r\n# 3) USDC -> UST (Curve)\r\n@external\r\ndef liquidate(ust_recipient: address) -> uint256:\r\n    assert msg.sender == self.vault, \"unauthorized\"\r\n\r\n    steth_amount: uint256 = ERC20(STETH_TOKEN).balanceOf(self)\r\n    assert steth_amount > 0, \"zero stETH balance\"\r\n\r\n    # steth -> eth\r\n    steth_eth_price: uint256 = self._get_chainlink_price(CHAINLINK_STETH_ETH_FEED)\r\n    min_eth_amount: uint256 = self._get_min_amount_out(\r\n        steth_amount,\r\n        steth_eth_price,\r\n        self.max_steth_eth_price_difference_percent,\r\n        STETH_TOKEN_DECIMALS,\r\n        WETH_TOKEN_DECIMALS\r\n    )\r\n\r\n    ERC20(STETH_TOKEN).approve(CURVE_STETH_POOL, steth_amount)\r\n\r\n    CurvePool(CURVE_STETH_POOL).exchange(\r\n        CURVE_STETH_INDEX,\r\n        CURVE_ETH_INDEX,\r\n        steth_amount,\r\n        0 # do not require a minimum amount\r\n    )\r\n    eth_amount: uint256 = self.balance\r\n\r\n    assert eth_amount >= min_eth_amount, \"insuff. ETH return\"\r\n\r\n    # eth -> usdc\r\n    usdc_eth_price: uint256 = self._get_chainlink_price(CHAINLINK_USDC_ETH_FEED)\r\n    eth_usdc_price: uint256 = self._get_inverse_rate(usdc_eth_price)\r\n    min_usdc_amount: uint256 = self._get_min_amount_out(\r\n        eth_amount,\r\n        eth_usdc_price,\r\n        self.max_eth_usdc_price_difference_percent,\r\n        WETH_TOKEN_DECIMALS,\r\n        USDC_TOKEN_DECIMALS\r\n    )\r\n\r\n    self._uniswap_v3_sell_eth_to_usdc(\r\n        eth_amount,\r\n        0, # do not require a minimum amount\r\n        self\r\n    )\r\n    usdc_amount: uint256 = ERC20(USDC_TOKEN).balanceOf(self)\r\n\r\n    assert usdc_amount >= min_usdc_amount, \"insuff. USDC return\"\r\n\r\n    # usdc -> ust\r\n    eth_ust_price: uint256 = self._get_inverse_rate(self._get_chainlink_price(CHAINLINK_UST_ETH_FEED))\r\n    usdc_ust_price: uint256 = self._get_chainlink_cross_price(usdc_eth_price, eth_ust_price)\r\n    min_ust_amount: uint256 = self._get_min_amount_out(\r\n        usdc_amount,\r\n        usdc_ust_price,\r\n        self.max_usdc_ust_price_difference_percent,\r\n        USDC_TOKEN_DECIMALS,\r\n        UST_TOKEN_DECIMALS\r\n    )\r\n\r\n    ERC20(USDC_TOKEN).approve(CURVE_UST_POOL, usdc_amount)\r\n\r\n    CurveMetaPool(CURVE_UST_POOL).exchange_underlying(\r\n        CURVE_USDC_UNDERLYING_INDEX,\r\n        CURVE_UST_UNDERLYING_INDEX,\r\n        usdc_amount,\r\n        0 # do not require a minimum amount\r\n    )\r\n    ust_amount: uint256 = ERC20(UST_TOKEN).balanceOf(self)\r\n\r\n    assert ust_amount >= min_ust_amount, \"insuff. UST return\"\r\n\r\n    # final overall check\r\n    steth_ust_price: uint256 = self._get_chainlink_cross_price(steth_eth_price, eth_ust_price)\r\n    min_ust_amount = self._get_min_amount_out(\r\n        steth_amount,\r\n        steth_ust_price,\r\n        self.max_steth_ust_price_difference_percent,\r\n        STETH_TOKEN_DECIMALS,\r\n        UST_TOKEN_DECIMALS\r\n    )\r\n\r\n    assert ust_amount >= min_ust_amount, \"insuff. overall UST return\"\r\n\r\n    ERC20(UST_TOKEN).transfer(ust_recipient, ust_amount)\r\n\r\n    log SoldStethToUST(\r\n        steth_amount,\r\n        eth_amount,\r\n        usdc_amount,\r\n        ust_amount,\r\n        steth_eth_price,\r\n        eth_usdc_price,\r\n        usdc_ust_price\r\n    )\r\n\r\n    return ust_amount","ABI":"[{\"name\":\"SoldStethToUST\",\"inputs\":[{\"name\":\"steth_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"eth_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"usdc_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"ust_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"steth_eth_price\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"eth_usdc_price\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"usdc_ust_price\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AdminChanged\",\"inputs\":[{\"name\":\"new_admin\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PriceDifferenceChanged\",\"inputs\":[{\"name\":\"max_steth_eth_price_difference_percent\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"max_eth_usdc_price_difference_percent\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"max_usdc_ust_price_difference_percent\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"max_steth_ust_price_difference_percent\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UniswapUSDCPoolFeeChanged\",\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"vault\",\"type\":\"address\"},{\"name\":\"admin\",\"type\":\"address\"},{\"name\":\"max_steth_eth_price_difference_percent\",\"type\":\"uint256\"},{\"name\":\"max_eth_usdc_price_difference_percent\",\"type\":\"uint256\"},{\"name\":\"max_usdc_ust_price_difference_percent\",\"type\":\"uint256\"},{\"name\":\"max_steth_ust_price_difference_percent\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"change_admin\",\"inputs\":[{\"name\":\"new_admin\",\"type\":\"address\"}],\"outputs\":[],\"gas\":41722},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_uniswap_usdc_pool_fee\",\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":41736},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"configure\",\"inputs\":[{\"name\":\"max_steth_eth_price_difference_percent\",\"type\":\"uint256\"},{\"name\":\"max_eth_usdc_price_difference_percent\",\"type\":\"uint256\"},{\"name\":\"max_usdc_ust_price_difference_percent\",\"type\":\"uint256\"},{\"name\":\"max_steth_ust_price_difference_percent\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":154339},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"liquidate\",\"inputs\":[{\"name\":\"ust_recipient\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":110939},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2736},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vault\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2766},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"max_steth_eth_price_difference_percent\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2796},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"max_eth_usdc_price_difference_percent\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2826},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"max_usdc_ust_price_difference_percent\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2856},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"max_steth_ust_price_difference_percent\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2886},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"uniswap_usdc_pool_fee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2916}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.3.0","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000a2f987a546d4cd1c607ee8141276876c26b72bdf0000000000000000000000003cd9f71f80ab08ea5a7dca348b5e94bc595f26a000000000000000000000000000000000000000000000000000354a6ba7a18000000000000000000000000000000000000000000000000000006a94d74f430000000000000000000000000000000000000000000000000000006a94d74f43000000000000000000000000000000000000000000000000000000b1a2bc2ec50000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}