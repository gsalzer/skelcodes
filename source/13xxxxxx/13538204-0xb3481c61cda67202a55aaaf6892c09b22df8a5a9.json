{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ncontract AdminWallets is Ownable {\r\n\r\n    address private OWNER_WALLET = 0x2565053B002ea3C52dC533C00838335Bf49D0FE9; // Need to set owner wallet also in VotingLogic.sol\r\n    address private DIVERSITY_WALLET = 0xe2165a834F93C39483123Ac31533780b9c679ed4; // EX AUSTIN\r\n    address private ASSETBENDER_WALLET = 0x650802BD9dF24DF295241684185265196f88BA7D; // EX LUKE\r\n    address private MARKETING_WALLET = 0x9cE09Fd065f2C6b5668b458627608F561b3B1336; // EX INFLUENCER\r\n    address private DIVINETREASURY_WALLET = 0x650802BD9dF24DF295241684185265196f88BA7D; // EX BUYBACK\r\n\r\n    mapping(address => bool) private EMPEROR_LIST; \r\n\r\n    uint256 private _presaleRound = 1;\r\n    bool private _presaleActive = true;\r\n\r\n    mapping(uint256 => mapping(address => bool)) private PRESALE_ACCOUNTS;\r\n\r\n    // Wallet setters.\r\n    function setOwnerWallet(address _OWNER_WALLET) external onlyOwner {\r\n        OWNER_WALLET = _OWNER_WALLET;\r\n    }\r\n\r\n    function setDiversityWallet(address _DIVERSITY_WALLET) external onlyOwner {\r\n        DIVERSITY_WALLET = _DIVERSITY_WALLET;\r\n    }\r\n\r\n    function setAssetBenderWallet(address _ASSETBENDER_WALLET) external onlyOwner {\r\n        ASSETBENDER_WALLET = _ASSETBENDER_WALLET;\r\n    }\r\n\r\n    function setMarketingWallet(address _MARKETING_WALLET) external onlyOwner {\r\n        MARKETING_WALLET = _MARKETING_WALLET;\r\n    }\r\n\r\n    function setDivineTreasuryWallet(address _DIVINETREASURY_WALLET) external onlyOwner {\r\n        DIVINETREASURY_WALLET = _DIVINETREASURY_WALLET;\r\n    }\r\n\r\n    // Wallet getters.\r\n    function getOwnerWallet() external view returns(address) {\r\n        return OWNER_WALLET;\r\n    }\r\n\r\n    function getDiversityWallet() external view returns(address) {\r\n        return DIVERSITY_WALLET;\r\n    }\r\n\r\n    function getAssetBenderWallet() external view returns(address) {\r\n        return ASSETBENDER_WALLET;\r\n    }\r\n\r\n    function getMarketingWallet() external view returns(address) {\r\n        return MARKETING_WALLET;\r\n    }\r\n\r\n    function getDivineTreasuryWallet() external view returns(address) {\r\n        return DIVINETREASURY_WALLET;\r\n    }\r\n\r\n\r\n    // Emperor list functions.\r\n    function joinEmperorList(address[] memory accounts) external onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            EMPEROR_LIST[accounts[i]] = true;\r\n        }\r\n    }\r\n\r\n    function isInEmperorList(address account) external view returns(bool) {\r\n        return EMPEROR_LIST[account];\r\n    }\r\n\r\n    // Presale functions.\r\n    function setAccountInPresale(address[] memory accounts) external onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            PRESALE_ACCOUNTS[_presaleRound][accounts[i]] = true;\r\n        }\r\n    }\r\n\r\n    function setNewPresaleRound() external onlyOwner {\r\n        _presaleRound += 1;\r\n    }\r\n    \r\n    function setNewPresaleRoundExact(uint256 integer) external onlyOwner {\r\n        _presaleRound = integer;\r\n    }\r\n\r\n    function setPresaleState(bool _bool) external onlyOwner {\r\n        _presaleActive = _bool;\r\n    }\r\n\r\n    function isPresaleActive() external view returns(bool) {\r\n        return _presaleActive;\r\n    }\r\n\r\n    function getCurrentPresaleRound() external view returns(uint256) {\r\n        return _presaleRound;\r\n    }\r\n\r\n    function isAllowedAtPresale(uint256 round, address account) external view returns(bool) {\r\n        return PRESALE_ACCOUNTS[round][account];\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAssetBenderWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPresaleRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDiversityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDivineTreasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAllowedAtPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isInEmperorList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"joinEmperorList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"setAccountInPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ASSETBENDER_WALLET\",\"type\":\"address\"}],\"name\":\"setAssetBenderWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DIVERSITY_WALLET\",\"type\":\"address\"}],\"name\":\"setDiversityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DIVINETREASURY_WALLET\",\"type\":\"address\"}],\"name\":\"setDivineTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_MARKETING_WALLET\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setNewPresaleRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"integer\",\"type\":\"uint256\"}],\"name\":\"setNewPresaleRoundExact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_OWNER_WALLET\",\"type\":\"address\"}],\"name\":\"setOwnerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setPresaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AdminWallets","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a8f1e0fd1383218307d28faa9a8f10fa0310c36c3abb5416cb8190df395e1a90"}]}