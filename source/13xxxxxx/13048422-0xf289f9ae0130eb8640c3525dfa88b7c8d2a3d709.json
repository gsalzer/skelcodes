{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n\r\n    function toPayable(address account)\r\n        internal\r\n        pure\r\n        returns (address payable)\r\n    {\r\n        return payable(account);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n}\r\n\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeBEP20: decreased allowance below zero\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeBEP20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeBEP20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeBEP20: BEP20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract SignData {\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    string public NAME;\r\n    mapping(address => uint256) public nonces;\r\n    bytes32 public UNLOCK_TYPE_HASH;\r\n    bytes32 public LOCK_TYPE_HASH;\r\n    bytes32 public UPDATE_EPOCH_TYPE_HASH;\r\n\r\n    constructor() {\r\n        NAME = \"RIFI BRIDGE LOCKER\";\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\r\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n                ),\r\n                keccak256(bytes(NAME)),\r\n                keccak256(bytes(\"1\")),\r\n                chainId,\r\n                this\r\n            )\r\n        );\r\n        UNLOCK_TYPE_HASH = keccak256(\r\n            \"Data(address[] senders,address[] receivers,uint256[] amount,uint256 epoch,uint256 deadline,uint256 nonce)\"\r\n        );\r\n        LOCK_TYPE_HASH = keccak256(\r\n            \"Data(address ethAddress,uint256 amount,uint256 deadline,uint256 nonce)\"\r\n        );\r\n        UPDATE_EPOCH_TYPE_HASH = keccak256(\"Data(uint256 nonce)\");\r\n    }\r\n\r\n    function verify(\r\n        bytes32 data,\r\n        address sender,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public view {\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, data)\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(\r\n            recoveredAddress != address(0) && recoveredAddress == sender,\r\n            \"Invalid nonce\"\r\n        );\r\n    }\r\n}\r\n\r\ncontract RIFIChainBridge is Ownable, SignData {\r\n    using SafeBEP20 for IBEP20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    struct BridgeUserData {\r\n        uint256 timestamp;\r\n        uint256 bridgeAmount;\r\n    }\r\n\r\n    struct BridgeData {\r\n        address sender;\r\n        address ethAddress;\r\n        uint256 amount;\r\n    }\r\n\r\n    uint256 public MAX_DAILY_BRIDGE;\r\n    uint256 public MAX_AMOUNT_BRIDGE;\r\n    IBEP20 public rifi;\r\n    mapping(address => bool) public unlockedRoles;\r\n\r\n    uint256 public epochs;\r\n    // etherEpoch => bool\r\n    mapping(uint256 => bool) public isUnlocked;\r\n    // epochs => index => BridgeData\r\n    mapping(uint256 => BridgeData[]) public bridgeData;\r\n    // user=> BridgeUserData\r\n    mapping(address => BridgeUserData) public bridgeUserData;\r\n\r\n    event Unlock(\r\n        uint256 indexed receiveEpoch,\r\n        address sender,\r\n        address receiver,\r\n        uint256 amount,\r\n        uint256 indexed index\r\n    );\r\n\r\n    event Lock(\r\n        address sender,\r\n        address receiver,\r\n        uint256 amount,\r\n        uint256 indexed epoch\r\n    );\r\n\r\n    constructor(\r\n        IBEP20 _rifi,\r\n        uint256 _maxDailyAmount,\r\n        uint256 _maxAmountInTx\r\n    ) {\r\n        rifi = _rifi;\r\n        MAX_AMOUNT_BRIDGE = _maxAmountInTx;\r\n        MAX_DAILY_BRIDGE = _maxDailyAmount;\r\n        unlockedRoles[msg.sender] = true;\r\n    }\r\n\r\n    modifier ensure(uint256 deadline) {\r\n        require(deadline > block.timestamp, \"DEADLINE_OUT_OF_DATE\");\r\n        _;\r\n    }\r\n\r\n    function setDailyAmount(uint256 _amount) public onlyOwner {\r\n        MAX_DAILY_BRIDGE = _amount;\r\n    }\r\n\r\n    function setMaxAmountInTx(uint256 _amount) public onlyOwner {\r\n        MAX_AMOUNT_BRIDGE = _amount;\r\n    }\r\n\r\n    function setRifi(IBEP20 _rifi) public onlyOwner {\r\n        rifi = _rifi;\r\n    }\r\n\r\n    function setUnlockRoles(address _user, bool _result) public onlyOwner {\r\n        unlockedRoles[_user] = _result;\r\n    }\r\n\r\n    function getBridgeDataLength(uint256 epoch) public view returns (uint256) {\r\n        return bridgeData[epoch].length;\r\n    }\r\n\r\n    function lockRifi(address ethAddress, uint256 amount) public {\r\n        _lockRifi(msg.sender, ethAddress, amount);\r\n    }\r\n\r\n    function lockRifiPermit(\r\n        address sender,\r\n        address ethAddress,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public ensure(deadline) {\r\n        verify(\r\n            keccak256(\r\n                abi.encode(\r\n                    LOCK_TYPE_HASH,\r\n                    ethAddress,\r\n                    amount,\r\n                    deadline,\r\n                    nonces[sender]++\r\n                )\r\n            ),\r\n            sender,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n        _lockRifi(sender, ethAddress, amount);\r\n    }\r\n\r\n    function _lockRifi(\r\n        address sender,\r\n        address ethAddress,\r\n        uint256 amount\r\n    ) internal {\r\n        uint256 timestamp = block.timestamp;\r\n        BridgeUserData storage _bridgeUserData = bridgeUserData[sender];\r\n        if (timestamp - _bridgeUserData.timestamp > 1 days) {\r\n            _bridgeUserData.timestamp = timestamp;\r\n            _bridgeUserData.bridgeAmount = amount;\r\n        } else {\r\n            _bridgeUserData.bridgeAmount = _bridgeUserData.bridgeAmount.add(\r\n                amount\r\n            );\r\n        }\r\n        require(amount <= MAX_AMOUNT_BRIDGE, \"Exceed amount limit\");\r\n        require(\r\n            _bridgeUserData.bridgeAmount <= MAX_DAILY_BRIDGE,\r\n            \"Exceed daily limit\"\r\n        );\r\n\r\n        rifi.safeTransferFrom(sender, address(this), amount);\r\n        BridgeData memory _bridgeData = BridgeData(sender, ethAddress, amount);\r\n        bridgeData[epochs].push(_bridgeData);\r\n\r\n        emit Lock(sender, ethAddress, amount, epochs);\r\n    }\r\n\r\n    function updateEpochPermit(\r\n        address sender,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public {\r\n        verify(\r\n            keccak256(abi.encode(UPDATE_EPOCH_TYPE_HASH, nonces[sender]++)),\r\n            sender,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n        _updateEpoch(sender);\r\n    }\r\n\r\n    function updateEpoch() public {\r\n        _updateEpoch(msg.sender);\r\n    }\r\n\r\n    function _updateEpoch(address sender) internal {\r\n        require(unlockedRoles[sender], \"Forbidden\");\r\n        require(getBridgeDataLength(epochs) > 0, \"getBridgeDataLength=0\");\r\n        epochs++;\r\n    }\r\n\r\n    function unlockRifiPermit(\r\n        address[] memory senders,\r\n        address[] memory receivers,\r\n        uint256[] memory amounts,\r\n        uint256 receiveEpoch,\r\n        uint256 deadline,\r\n        address sender,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external ensure(deadline) {\r\n        verify(\r\n            keccak256(\r\n                abi.encode(\r\n                    UNLOCK_TYPE_HASH,\r\n                    receivers,\r\n                    amounts,\r\n                    receiveEpoch,\r\n                    deadline,\r\n                    nonces[sender]++\r\n                )\r\n            ),\r\n            sender,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n        _unlockRifi(senders, receivers, amounts, receiveEpoch, sender);\r\n    }\r\n\r\n    function unlockRifi(\r\n        address[] memory senders,\r\n        address[] memory receivers,\r\n        uint256[] memory amounts,\r\n        uint256 receiveEpoch\r\n    ) external {\r\n        _unlockRifi(senders, receivers, amounts, receiveEpoch, msg.sender);\r\n    }\r\n\r\n    function _unlockRifi(\r\n        address[] memory senders,\r\n        address[] memory receivers,\r\n        uint256[] memory amounts,\r\n        uint256 receiveEpoch,\r\n        address sender\r\n    ) internal {\r\n        require(unlockedRoles[sender], \"Forbidden\");\r\n        require(receivers.length == amounts.length, \"Invalid data\");\r\n        require(isUnlocked[receiveEpoch] == false, \"Unlocked\");\r\n        isUnlocked[receiveEpoch] = true;\r\n        for (uint256 i = 0; i < receivers.length; i++) {\r\n            rifi.safeTransfer(receivers[i], amounts[i]);\r\n            emit Unlock(receiveEpoch, senders[i], receivers[i], amounts[i], i);\r\n        }\r\n    }\r\n\r\n    function inCaseStuckToken(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) public onlyOwner {\r\n        token.safeTransfer(to, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_rifi\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxDailyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountInTx\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"receiveEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AMOUNT_BRIDGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DAILY_BRIDGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNLOCK_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_EPOCH_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bridgeData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bridgeUserData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bridgeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getBridgeDataLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"inCaseStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockRifi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"lockRifiPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rifi\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setDailyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxAmountInTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_rifi\",\"type\":\"address\"}],\"name\":\"setRifi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"}],\"name\":\"setUnlockRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"receiveEpoch\",\"type\":\"uint256\"}],\"name\":\"unlockRifi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"receiveEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"unlockRifiPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockedRoles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"updateEpochPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RIFIChainBridge","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d2b9d016fce1179a4d85da1a48dd85e796611d3400000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000021e19e0c9bab2400000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c6dcd6841fead6e2ba7ae38d8a4bbd7e661650d69863355d8ef60d6f841262b5"}]}