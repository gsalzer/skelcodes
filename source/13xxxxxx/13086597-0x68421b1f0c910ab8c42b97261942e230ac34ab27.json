{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-06-08\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface contract2{\r\n    function editData(address user, uint256 lockedRewards, uint256 firstBlock) external ;\r\n    function definiteStats(address user) external view returns(uint256 firstBlock, uint256 lockedRewards, uint256 totalLockedRewards);\r\n    function claimRewards(address user) external returns(bool);\r\n    function userStats(address user) external view returns(uint256 firstBlock, uint256 claimedDays, uint256 lockedRewards, uint256 claimableRewards);\r\n    \r\n}\r\n\r\ninterface IERC20{\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n}\r\n\r\ninterface MCHstakingInterface {\r\n    \r\n    function showBlackUser(address user) external view returns(bool) ;\r\n}\r\n\r\ninterface Icontract3{\r\n    function withdrawLockedRewards() external ;\r\n    event WithdrawLockedRewards(address indexed user, uint256 amount);\r\n}\r\ncontract contract3 is Icontract3{\r\n    \r\n    IERC20 MCF;\r\n    contract2 SC2;\r\n    \r\n    address _owner;\r\n\r\n    mapping(address => uint256) private claimedMonths;\r\n    mapping (address => bool) private _blackListed;\r\n        \r\n    constructor(address contract2Address, address MCFaddress){\r\n        _owner = msg.sender;\r\n        SC2 = contract2(contract2Address);\r\n        MCF = IERC20(MCFaddress);\r\n    }\r\n   \r\n        \r\n    function addToBlackList(address user) external {\r\n        require(_owner == msg.sender);\r\n        _blackListed[user] = true;\r\n    }\r\n    \r\n    function showBlackUser(address user) external view returns(bool){\r\n        return _blackListed[user];\r\n    }\r\n    \r\n    function removeFromBlackList(address user) external {\r\n        require(_owner == msg.sender);\r\n        _blackListed[user] = false;\r\n    } \r\n    \r\n    function claimedRewards(address user) external view returns(uint256) { \r\n        (, , uint256 totalLockedRewards) = SC2.definiteStats(user);\r\n        uint256 totalLocked = totalLockedRewards/10;\r\n        return claimedMonths[user] * totalLocked;\r\n    }\r\n    \r\n    function claimableRewards(address user) external view returns(uint256) {\r\n        (, , uint256 totalLockedRewards) = SC2.definiteStats(user);\r\n        (,,uint256 lockedRewards,) = SC2.userStats(user);\r\n        \r\n        if(lockedRewards > totalLockedRewards) {totalLockedRewards = lockedRewards;}\r\n        uint256 rewards;\r\n        uint256 month = (block.number - 12954838) / 199384;\r\n        uint256 _claimMonths = claimedMonths[user];\r\n        while(month > _claimMonths){\r\n        \r\n        if(lockedRewards == 0){break;}\r\n        uint256 totalLocked = totalLockedRewards/10;\r\n        \r\n        if(lockedRewards < totalLocked){rewards += lockedRewards; break;}\r\n        else{rewards += totalLocked; lockedRewards -=totalLocked; }\r\n        \r\n        ++_claimMonths;\r\n        }\r\n        \r\n        return rewards;\r\n    }\r\n    function withdrawLockedRewards() external override {\r\n        require(_blackListed[msg.sender] == false);\r\n     \r\n        SC2.claimRewards(msg.sender);\r\n        (uint256 firstBlock, uint256 lockedRewards, uint256 totalLockedRewards) = SC2.definiteStats(msg.sender);\r\n        require(block.number > 13154223 && lockedRewards > 0);\r\n        ////////////////////////12755454\r\n        uint256 claimedRewards;\r\n        uint256 month = (block.number - 12954838) / 199384;\r\n        uint256 total;\r\n        while(month > claimedMonths[msg.sender]){\r\n        \r\n        if(lockedRewards == 0){break;}\r\n        uint256 totalLocked = totalLockedRewards/10;\r\n        \r\n        if(lockedRewards < totalLocked){total += lockedRewards; claimedRewards += lockedRewards; lockedRewards = 0;}\r\n        else{total += totalLocked; claimedRewards += lockedRewards; lockedRewards -=totalLocked; }\r\n        \r\n        ++claimedMonths[msg.sender];\r\n        }\r\n        \r\n        MCF.transfer(msg.sender, total);\r\n        SC2.editData(msg.sender, lockedRewards, firstBlock);\r\n        \r\n        emit WithdrawLockedRewards(msg.sender, claimedRewards);\r\n    }\r\n    \r\n    function emergencyWithdraw(uint256 amount) external {\r\n        require(msg.sender == _owner);\r\n        MCF.transfer(msg.sender, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract2Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"MCFaddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawLockedRewards\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addToBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeFromBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"showBlackUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLockedRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"contract3","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007e1e71a94daf39a43b86a790c21d1aa36bb6fa38000000000000000000000000e33ae4e795114279721047484e5ad5cc7df24fcb","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b45febdf8bd4d9f80c98b969aa3c6fb2e2cff654a7ef78005adf7c3b0762f2ce"}]}