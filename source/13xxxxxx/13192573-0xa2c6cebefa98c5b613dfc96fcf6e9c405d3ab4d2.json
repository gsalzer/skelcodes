{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/D/Working/work-O/Densetsu/Antiample/contract/contracts/ERC20Interface.sol\": {\r\n      \"content\": \"pragma solidity 0.6.0;\\r\\n\\r\\ninterface ERC20Interface {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address tokenOwner)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 balance);\\r\\n\\r\\n    function allowance(address tokenOwner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 remaining);\\r\\n\\r\\n    function transfer(address to, uint256 tokens) external returns (bool success);\\r\\n\\r\\n    function approve(address spender, uint256 tokens)\\r\\n        external\\r\\n        returns (bool success);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokens\\r\\n    ) external returns (bool success);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\\r\\n    event Approval(\\r\\n        address indexed tokenOwner,\\r\\n        address indexed spender,\\r\\n        uint256 tokens\\r\\n    );\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Working/work-O/Densetsu/Antiample/contract/contracts/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity 0.6.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/D/Working/work-O/Densetsu/Antiample/contract/contracts/XampCapital.sol\": {\r\n      \"content\": \"pragma solidity 0.6.0;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./ERC20Interface.sol\\\";\\r\\n\\r\\ncontract XampCapital {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 constant public PERCENTS_DIVIDER = 1000;\\r\\n\\tuint256 constant public PERCENTS_DAILY = 50;\\r\\n    uint256 constant public TIME_STEP = 1 days;\\r\\n\\t\\r\\n\\tERC20Interface XampToken;\\r\\n\\r\\n    uint256 public totalUsers;\\r\\n    uint256 public totalInvested;\\r\\n    uint256 public totalWithdrawn;\\r\\n    uint256 public totalDeposits;\\r\\n\\r\\n    struct Deposit {\\r\\n        uint256 amount;\\r\\n        uint256 withdrawn;\\r\\n        uint256 start;\\r\\n    }\\r\\n\\r\\n    struct User {\\r\\n        Deposit[] deposits;\\r\\n        uint256 checkpoint;\\r\\n        uint256 bonus;\\r\\n    }\\r\\n\\r\\n    mapping (address => User) internal users;\\r\\n\\r\\n    event Newbie(address user);\\r\\n    event NewDeposit(address indexed user, uint256 amount);\\r\\n    event Withdrawn(address indexed user, uint256 amount);\\r\\n\\r\\n    constructor(address _XampToken) public {\\r\\n        XampToken = ERC20Interface(_XampToken);\\r\\n    }\\r\\n\\r\\n    function invest(uint256 amount) public {\\r\\n\\r\\n        uint256 received = amount;\\r\\n\\r\\n\\t\\tXampToken.transferFrom(msg.sender, address(this), received);\\r\\n\\t\\t\\r\\n        User storage user = users[msg.sender];\\r\\n\\r\\n        if (user.deposits.length == 0) {\\r\\n            user.checkpoint = block.timestamp;\\r\\n            totalUsers = totalUsers.add(1);\\r\\n            emit Newbie(msg.sender);\\r\\n        }\\r\\n\\r\\n        user.deposits.push(Deposit(received, 0, block.timestamp));\\r\\n\\r\\n        totalInvested = totalInvested.add(received);\\r\\n        totalDeposits = totalDeposits.add(1);\\r\\n\\r\\n        emit NewDeposit(msg.sender, received);\\r\\n\\r\\n    }\\r\\n\\r\\n    function withdraw() public {\\r\\n        User storage user = users[msg.sender];\\r\\n\\r\\n        uint256 totalAmount;\\r\\n        uint256 dividends;\\r\\n\\r\\n        for (uint256 i = 0; i < user.deposits.length; i++) {\\r\\n\\r\\n            if (user.deposits[i].withdrawn < user.deposits[i].amount) {\\r\\n\\r\\n                if (user.deposits[i].start > user.checkpoint) {\\r\\n\\r\\n                    dividends = (user.deposits[i].amount.mul(PERCENTS_DAILY).div(PERCENTS_DIVIDER))\\r\\n\\t\\t\\t\\t\\t\\t.mul(block.timestamp.sub(user.deposits[i].start))\\r\\n\\t\\t\\t\\t\\t\\t.div(TIME_STEP);\\r\\n\\r\\n                } else {\\r\\n\\r\\n                    dividends = (user.deposits[i].amount.mul(PERCENTS_DAILY).div(PERCENTS_DIVIDER))\\r\\n                        .mul(block.timestamp.sub(user.checkpoint))\\r\\n                        .div(TIME_STEP);\\r\\n\\r\\n                }\\r\\n\\r\\n                if (user.deposits[i].withdrawn.add(dividends) > user.deposits[i].amount) {\\r\\n                    dividends = (user.deposits[i].amount).sub(user.deposits[i].withdrawn);\\r\\n                }\\r\\n\\r\\n                user.deposits[i].withdrawn = user.deposits[i].withdrawn.add(dividends); /// changing of storage data\\r\\n                totalAmount = totalAmount.add(dividends);\\r\\n\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(totalAmount > 0, \\\"User has no dividends\\\");\\r\\n\\r\\n        uint256 contractBalance = XampToken.balanceOf(address(this));\\r\\n        if (contractBalance < totalAmount) {\\r\\n            totalAmount = contractBalance;\\r\\n        }\\r\\n\\r\\n        user.checkpoint = block.timestamp;\\r\\n\\t\\t\\r\\n\\t\\tXampToken.transfer(msg.sender, totalAmount);\\r\\n\\r\\n        totalWithdrawn = totalWithdrawn.add(totalAmount);\\r\\n\\r\\n        emit Withdrawn(msg.sender, totalAmount);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function getUserDividends(address userAddress) public view returns (uint256) {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        uint256 totalDividends;\\r\\n        uint256 dividends;\\r\\n\\r\\n        for (uint256 i = 0; i < user.deposits.length; i++) {\\r\\n\\r\\n            if (user.deposits[i].withdrawn < user.deposits[i].amount) {\\r\\n\\r\\n                if (user.deposits[i].start > user.checkpoint) {\\r\\n\\r\\n                    dividends = (user.deposits[i].amount.mul(PERCENTS_DAILY).div(PERCENTS_DIVIDER))\\r\\n\\t\\t\\t\\t\\t\\t.mul(block.timestamp.sub(user.deposits[i].start))\\r\\n\\t\\t\\t\\t\\t\\t.div(TIME_STEP);\\r\\n\\r\\n                } else {\\r\\n\\r\\n                    dividends = (user.deposits[i].amount.mul(PERCENTS_DAILY).div(PERCENTS_DIVIDER))\\r\\n\\t\\t\\t\\t\\t\\t.mul(block.timestamp.sub(user.checkpoint))\\r\\n\\t\\t\\t\\t\\t\\t.div(TIME_STEP);\\r\\n                }\\r\\n\\r\\n                if (user.deposits[i].withdrawn.add(dividends) > user.deposits[i].amount) {\\r\\n                    dividends = (user.deposits[i].amount).sub(user.deposits[i].withdrawn);\\r\\n                }\\r\\n\\r\\n                totalDividends = totalDividends.add(dividends);\\r\\n\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        return totalDividends;\\r\\n    }\\r\\n\\r\\n    function getUserCheckpoint(address userAddress) public view returns(uint256) {\\r\\n        return users[userAddress].checkpoint;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getUserAvailable(address userAddress) public view returns(uint256) {\\r\\n        return getUserDividends(userAddress);\\r\\n    }\\r\\n\\r\\n    function isActive(address userAddress) public view returns (bool) {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        if (user.deposits.length > 0) {\\r\\n            if (user.deposits[user.deposits.length-1].withdrawn < user.deposits[user.deposits.length-1].amount) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUserDepositInfo(address userAddress, uint256 index) public view returns(uint256, uint256, uint256) {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        return (user.deposits[index].amount, user.deposits[index].withdrawn, user.deposits[index].start);\\r\\n    }\\r\\n\\r\\n    function getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\\r\\n        return users[userAddress].deposits.length;\\r\\n    }\\r\\n\\r\\n    function getUserTotalDeposits(address userAddress) public view returns(uint256) {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        uint256 amount;\\r\\n\\r\\n        for (uint256 i = 0; i < user.deposits.length; i++) {\\r\\n            amount = amount.add(user.deposits[i].amount);\\r\\n        }\\r\\n\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function getUserTotalWithdrawn(address userAddress) public view returns(uint256) {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        uint256 amount;\\r\\n\\r\\n        for (uint256 i = 0; i < user.deposits.length; i++) {\\r\\n            amount = amount.add(user.deposits[i].withdrawn);\\r\\n        }\\r\\n\\r\\n        return amount;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_XampToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENTS_DAILY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"XampCapital","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f911a7ec46a2c6fa49193212fe4a2a9b95851c27","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}