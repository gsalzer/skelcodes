{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ILand.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ninterface ILand {\\n  function maximumSupply() external view returns (uint256);\\n  function balanceOf(address owner) external view returns (uint256);\\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n}\\n\"},\"IMintPass.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ninterface IMintPass {\\n  function passExists(uint256 _passId) external view returns (bool);\\n  function passDetail(uint256 _tokenId) external view returns (address, uint256, uint256);\\n  function mintToken(\\n    address _account,\\n    uint256 _passId,\\n    uint256 _count\\n  ) external;\\n  function burnToken(uint256 _tokenId) external;\\n}\\n\"},\"IOre.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ninterface IOre {\\n  function balanceOf(address owner) external view returns (uint256);\\n  function mint(address account, uint256 amount) external;\\n  function burn(address account, uint256 amount) external;\\n}\\n\"},\"MintPassMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\nimport \\\"./ILand.sol\\\";\\nimport \\\"./IOre.sol\\\";\\nimport \\\"./IMintPass.sol\\\";\\n\\n\\ncontract MintPassMinter is Ownable, ReentrancyGuard {\\n  // MintPass token contract interface\\n  IMintPass public mintPass;\\n  // Land token contract interface\\n  ILand public land;\\n  // Ore token contract interface\\n  IOre public ore;\\n\\n  // Stores the currently set pass prices\\n  mapping (uint256 =\\u003e uint256) private _passPrices;\\n  // Keeps track of the timestamp of the latest claiming period\\n  uint256 private _lastClaimTimestamp;\\n\\n  // Keeps track of the total free pass claimed by landowners\\n  uint256 public totalFreePassClaimed;\\n  // Keeps track of the total purchased mint passes\\n  mapping (uint256 =\\u003e uint256) public totalPurchasedByPassId;\\n  // Keeps track of total claimed free passes for land owners\\n  mapping (uint256 =\\u003e uint256) public lastClaimTimestampByLandId;\\n\\n  // The passId used to indicate the free passes claimable by landowners\\n  uint256 private _freePassId;\\n\\n  constructor(\\n    address _ore,\\n    address _land,\\n    address _mintPass\\n  ) {\\n    ore = IOre(_ore);\\n    land = ILand(_land);\\n    mintPass = IMintPass(_mintPass);\\n  }\\n\\n  function freePassId() external view returns (uint256) {\\n    return _freePassId;\\n  }\\n\\n  function passPrice(uint256 _passId) external view returns (uint256) {\\n    require(mintPass.passExists(_passId), \\\"Invalid PassId\\\");\\n    return _passPrices[_passId];\\n  }\\n\\n  // Enable new claiming by updating the ending timestamp to 24 hours after enabled\\n  function setLastClaimTimestamp(uint256 _timestamp) external onlyOwner {\\n    _lastClaimTimestamp = _timestamp;\\n  }\\n\\n  function lastClaimTimestamp() external view returns (uint256) {\\n    return _lastClaimTimestamp;\\n  }\\n\\n  // Update the token price\\n  function setPassPrice(uint256 _passId, uint256 _price) external onlyOwner {\\n    require(mintPass.passExists(_passId), \\\"Invalid PassId\\\");\\n    _passPrices[_passId] = _price;\\n  }\\n\\n  // Set the passId used as landowner\\u0027s free passes\\n  function setFreePassId(uint256 _passId) external onlyOwner {\\n    require(mintPass.passExists(_passId), \\\"Invalid PassId\\\");\\n    _freePassId = _passId;\\n  }\\n\\n  // Generate passes to be used for marketing purposes\\n  function generatePassForMarketing(uint256 _passId, uint256 _count) external onlyOwner {\\n    require(_count \\u003e 0, \\\"Invalid Amount\\\");\\n    mintPass.mintToken(msg.sender, _passId, _count);\\n  }\\n\\n  // Fetch the total count of unclaimed free passes for the specified landowner account\\n  function unclaimedFreePass(address _account) external view returns (uint256) {\\n    uint256 landOwned = land.balanceOf(_account);\\n    uint256 mintCount = 0;\\n\\n    for (uint256 i = 0; i \\u003c landOwned; i++) {\\n      uint256 tokenId = land.tokenOfOwnerByIndex(_account, i);\\n      if (_lastClaimTimestamp \\u003e block.timestamp \\u0026\\u0026\\n        _lastClaimTimestamp \\u003e lastClaimTimestampByLandId[tokenId]) {\\n        mintCount++;\\n      }\\n    }\\n\\n    return mintCount;\\n  }\\n\\n  // Handles free passes claiming for the landowners\\n  function claimFreePass() external nonReentrant {\\n    require(_freePassId \\u003e 0, \\\"Pass Id Not Set\\\");\\n    uint256 landOwned = land.balanceOf(msg.sender);\\n    require(landOwned \\u003e 0, \\\"Reserved For Land Owners\\\");\\n\\n    // Iterate through all the land tokens owned to get the mint count and mark them as claimed\\n    uint256 mintCount = 0;\\n\\n    for (uint256 i = 0; i \\u003c landOwned; i++) {\\n      uint256 tokenId = land.tokenOfOwnerByIndex(msg.sender, i);\\n      if (_lastClaimTimestamp \\u003e block.timestamp \\u0026\\u0026\\n        _lastClaimTimestamp \\u003e lastClaimTimestampByLandId[tokenId]) {\\n        mintCount++;\\n        lastClaimTimestampByLandId[tokenId] = _lastClaimTimestamp;\\n      }\\n    }\\n\\n    require(mintCount \\u003e 0, \\\"No Unclaimed Free Passes Found\\\");\\n\\n    totalFreePassClaimed += mintCount;\\n    mintPass.mintToken(msg.sender, _freePassId, mintCount);\\n  }\\n\\n  // Handles pass purchases using ORE\\n  function buyPass(uint256 _passId, uint256 _count) external nonReentrant {\\n    // Check if sufficient funds are sent\\n    require(mintPass.passExists(_passId), \\\"Invalid PassId\\\");\\n    require(_passPrices[_passId] \\u003e 0, \\\"Price Not Set\\\");\\n    uint256 totalPrice = _count * _passPrices[_passId];\\n    require(ore.balanceOf(msg.sender) \\u003e= totalPrice, \\\"Insufficient Ore\\\");\\n\\n    totalPurchasedByPassId[_passId] += _count;\\n\\n    // Burn the ORE and proceed to mint the passes\\n    ore.burn(msg.sender, totalPrice);\\n    mintPass.mintToken(msg.sender, _passId, _count);\\n  }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_land\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mintPass\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_passId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"buyPass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFreePass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freePassId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_passId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"generatePassForMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"land\",\"outputs\":[{\"internalType\":\"contract ILand\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastClaimTimestampByLandId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPass\",\"outputs\":[{\"internalType\":\"contract IMintPass\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ore\",\"outputs\":[{\"internalType\":\"contract IOre\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_passId\",\"type\":\"uint256\"}],\"name\":\"passPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_passId\",\"type\":\"uint256\"}],\"name\":\"setFreePassId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setLastClaimTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_passId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPassPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFreePassClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalPurchasedByPassId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unclaimedFreePass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MintPassMinter","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000c40107e23c285d9cc9759f7c656805d6e5c88a3c00000000000000000000000030d5977e4c9b159c2d44461868bdc7353c2e425b000000000000000000000000f8854f6011278dcb3b1abbf41bdf80a8c427c656","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://18a1fbada54a1ccac99dec476a992545e585463a734905d8d2171528387d39eb"}]}