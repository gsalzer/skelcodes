{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Epochs.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IEpochs.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n//                                                                             hhhhhhh\\n//                                                                             h:::::h\\n//                                                                             h:::::h\\n//                                                                             h:::::h\\n//     eeeeeeeeeeee    ppppp   ppppppppp      ooooooooooo       cccccccccccccccch::::h hhhhh           ssssssssss\\n//   ee::::::::::::ee  p::::ppp:::::::::p   oo:::::::::::oo   cc:::::::::::::::ch::::hh:::::hhh      ss::::::::::s\\n//  e::::::eeeee:::::eep:::::::::::::::::p o:::::::::::::::o c:::::::::::::::::ch::::::::::::::hh  ss:::::::::::::s\\n// e::::::e     e:::::epp::::::ppppp::::::po:::::ooooo:::::oc:::::::cccccc:::::ch:::::::hhh::::::h s::::::ssss:::::s\\n// e:::::::eeeee::::::e p:::::p     p:::::po::::o     o::::oc::::::c     ccccccch::::::h   h::::::h s:::::s  ssssss\\n// e:::::::::::::::::e  p:::::p     p:::::po::::o     o::::oc:::::c             h:::::h     h:::::h   s::::::s\\n// e::::::eeeeeeeeeee   p:::::p     p:::::po::::o     o::::oc:::::c             h:::::h     h:::::h      s::::::s\\n// e:::::::e            p:::::p    p::::::po::::o     o::::oc::::::c     ccccccch:::::h     h:::::hssssss   s:::::s\\n// e::::::::e           p:::::ppppp:::::::po:::::ooooo:::::oc:::::::cccccc:::::ch:::::h     h:::::hs:::::ssss::::::s\\n//  e::::::::eeeeeeee   p::::::::::::::::p o:::::::::::::::o c:::::::::::::::::ch:::::h     h:::::hs::::::::::::::s\\n//   ee:::::::::::::e   p::::::::::::::pp   oo:::::::::::oo   cc:::::::::::::::ch:::::h     h:::::h s:::::::::::ss\\n//     eeeeeeeeeeeeee   p::::::pppppppp       ooooooooooo       cccccccccccccccchhhhhhh     hhhhhhh  sssssssssss\\n//                      p:::::p\\n//                      p:::::p\\n//                     p:::::::p\\n//                     p:::::::p\\n//                     p:::::::p\\n//                     ppppppppp\\n\\n/// @title Epochs\\n/// @author jongold.eth\\n/// @notice parses block numbers in epochs\\ncontract Epochs is IEpochs, Ownable {\\n    string[12] private epochLabels;\\n\\n    constructor(string[12] memory _labels) {\\n        epochLabels = _labels;\\n    }\\n\\n    function getEpochLabels() public view override returns (string[12] memory) {\\n        return epochLabels;\\n    }\\n\\n    function setEpochLabels(string[12] memory _labels) public onlyOwner {\\n        epochLabels = _labels;\\n    }\\n\\n    function currentEpochs() public view override returns (uint256[12] memory) {\\n        return getEpochs(block.number);\\n    }\\n\\n    function getEpochs(uint256 blockNumber)\\n        public\\n        pure\\n        override\\n        returns (uint256[12] memory epochs)\\n    {\\n        for (uint256 i = 0; i < 12; i++) {\\n            uint256 exp = i;\\n            epochs[i] = 1 + ((blockNumber / 11**exp) % 11);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IEpochs.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\npragma experimental ABIEncoderV2;\\n\\ninterface IEpochs {\\n    function getEpochLabels() external view returns (string[12] memory);\\n\\n    function currentEpochs() external view returns (uint256[12] memory);\\n\\n    function getEpochs(uint256 blockNumber)\\n        external\\n        pure\\n        returns (uint256[12] memory);\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string[12]\",\"name\":\"_labels\",\"type\":\"string[12]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"currentEpochs\",\"outputs\":[{\"internalType\":\"uint256[12]\",\"name\":\"\",\"type\":\"uint256[12]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochLabels\",\"outputs\":[{\"internalType\":\"string[12]\",\"name\":\"\",\"type\":\"string[12]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getEpochs\",\"outputs\":[{\"internalType\":\"uint256[12]\",\"name\":\"epochs\",\"type\":\"uint256[12]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[12]\",\"name\":\"_labels\",\"type\":\"string[12]\"}],\"name\":\"setEpochLabels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Epochs","CompilerVersion":"v0.8.5+commit.a4f2e591","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000004400000000000000000000000000000000000000000000000000000000000000005426c6f636b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004466f726d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000953747275637475726500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005426c6f6f6d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007457069736f646500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000550686173650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006536561736f6e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a5265766f6c7574696f6e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064165706f636800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004416572610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054172636865000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000441656f6e00000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}