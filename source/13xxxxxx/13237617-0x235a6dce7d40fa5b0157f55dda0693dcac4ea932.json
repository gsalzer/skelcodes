{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// Sources flattened with hardhat v2.6.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.1.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/bloq/ISwapManager.sol\r\n\r\n\r\n\r\npragma solidity 0.8.3;\r\n\r\n/* solhint-disable func-name-mixedcase */\r\n\r\ninterface ISwapManager {\r\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\r\n\r\n    function N_DEX() external view returns (uint256);\r\n\r\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\r\n\r\n    function bestOutputFixedInput(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amountIn\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address[] memory path,\r\n            uint256 amountOut,\r\n            uint256 rIdx\r\n        );\r\n\r\n    function bestPathFixedInput(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amountIn,\r\n        uint256 _i\r\n    ) external view returns (address[] memory path, uint256 amountOut);\r\n\r\n    function bestInputFixedOutput(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amountOut\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address[] memory path,\r\n            uint256 amountIn,\r\n            uint256 rIdx\r\n        );\r\n\r\n    function bestPathFixedOutput(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amountOut,\r\n        uint256 _i\r\n    ) external view returns (address[] memory path, uint256 amountIn);\r\n\r\n    function safeGetAmountsOut(\r\n        uint256 _amountIn,\r\n        address[] memory _path,\r\n        uint256 _i\r\n    ) external view returns (uint256[] memory result);\r\n\r\n    function unsafeGetAmountsOut(\r\n        uint256 _amountIn,\r\n        address[] memory _path,\r\n        uint256 _i\r\n    ) external view returns (uint256[] memory result);\r\n\r\n    function safeGetAmountsIn(\r\n        uint256 _amountOut,\r\n        address[] memory _path,\r\n        uint256 _i\r\n    ) external view returns (uint256[] memory result);\r\n\r\n    function unsafeGetAmountsIn(\r\n        uint256 _amountOut,\r\n        address[] memory _path,\r\n        uint256 _i\r\n    ) external view returns (uint256[] memory result);\r\n\r\n    function comparePathsFixedInput(\r\n        address[] memory pathA,\r\n        address[] memory pathB,\r\n        uint256 _amountIn,\r\n        uint256 _i\r\n    ) external view returns (address[] memory path, uint256 amountOut);\r\n\r\n    function comparePathsFixedOutput(\r\n        address[] memory pathA,\r\n        address[] memory pathB,\r\n        uint256 _amountOut,\r\n        uint256 _i\r\n    ) external view returns (address[] memory path, uint256 amountIn);\r\n\r\n    function ours(address a) external view returns (bool);\r\n\r\n    function oracleCount() external view returns (uint256);\r\n\r\n    function oracleAt(uint256 idx) external view returns (address);\r\n\r\n    function getOracle(\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _period,\r\n        uint256 _i\r\n    ) external view returns (address);\r\n\r\n    function createOrUpdateOracle(\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _period,\r\n        uint256 _i\r\n    ) external returns (address oracleAddr);\r\n\r\n    function consultForFree(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amountIn,\r\n        uint256 _period,\r\n        uint256 _i\r\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\r\n\r\n    /// get the data we want and pay the gas to update\r\n    function consult(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amountIn,\r\n        uint256 _period,\r\n        uint256 _i\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountOut,\r\n            uint256 lastUpdatedAt,\r\n            bool updated\r\n        );\r\n\r\n    function updateOracles() external returns (uint256 updated, uint256 expected);\r\n\r\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\r\n}\r\n\r\n\r\n// File contracts/interfaces/bloq/IAddressList.sol\r\n\r\n\r\n\r\npragma solidity 0.8.3;\r\n\r\ninterface IAddressList {\r\n    function add(address a) external returns (bool);\r\n\r\n    function remove(address a) external returns (bool);\r\n\r\n    function get(address a) external view returns (uint256);\r\n\r\n    function contains(address a) external view returns (bool);\r\n\r\n    function length() external view returns (uint256);\r\n\r\n    function grantRole(bytes32 role, address account) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/bloq/IAddressListFactory.sol\r\n\r\n\r\n\r\npragma solidity 0.8.3;\r\n\r\ninterface IAddressListFactory {\r\n    function ours(address a) external view returns (bool);\r\n\r\n    function listCount() external view returns (uint256);\r\n\r\n    function listAt(uint256 idx) external view returns (address);\r\n\r\n    function createList() external returns (address listaddr);\r\n}\r\n\r\n\r\n// File contracts/interfaces/vesper/IStrategy.sol\r\n\r\n\r\n\r\npragma solidity 0.8.3;\r\n\r\ninterface IStrategy {\r\n    function rebalance() external;\r\n\r\n    function sweepERC20(address _fromToken) external;\r\n\r\n    function withdraw(uint256 _amount) external;\r\n\r\n    function feeCollector() external view returns (address);\r\n\r\n    function isReservedToken(address _token) external view returns (bool);\r\n\r\n    function migrate(address _newStrategy) external;\r\n\r\n    function token() external view returns (address);\r\n\r\n    function totalValue() external view returns (uint256);\r\n\r\n    function totalValueCurrent() external returns (uint256);\r\n\r\n    function pool() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/interfaces/vesper/IVesperPool.sol\r\n\r\n\r\n\r\npragma solidity 0.8.3;\r\n\r\n\r\ninterface IVesperPool is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function deposit(uint256 _share) external;\r\n\r\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\r\n\r\n    function excessDebt(address _strategy) external view returns (uint256);\r\n\r\n    function permit(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        uint8,\r\n        bytes32,\r\n        bytes32\r\n    ) external;\r\n\r\n    function poolRewards() external returns (address);\r\n\r\n    function reportEarning(\r\n        uint256 _profit,\r\n        uint256 _loss,\r\n        uint256 _payback\r\n    ) external;\r\n\r\n    function reportLoss(uint256 _loss) external;\r\n\r\n    function resetApproval() external;\r\n\r\n    function sweepERC20(address _fromToken) external;\r\n\r\n    function withdraw(uint256 _amount) external;\r\n\r\n    function withdrawETH(uint256 _amount) external;\r\n\r\n    function whitelistedWithdraw(uint256 _amount) external;\r\n\r\n    function governor() external view returns (address);\r\n\r\n    function keepers() external view returns (IAddressList);\r\n\r\n    function maintainers() external view returns (IAddressList);\r\n\r\n    function feeCollector() external view returns (address);\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function strategy(address _strategy)\r\n        external\r\n        view\r\n        returns (\r\n            bool _active,\r\n            uint256 _interestFee,\r\n            uint256 _debtRate,\r\n            uint256 _lastRebalance,\r\n            uint256 _totalDebt,\r\n            uint256 _totalLoss,\r\n            uint256 _totalProfit,\r\n            uint256 _debtRatio\r\n        );\r\n\r\n    function stopEverything() external view returns (bool);\r\n\r\n    function token() external view returns (IERC20);\r\n\r\n    function tokensHere() external view returns (uint256);\r\n\r\n    function totalDebtOf(address _strategy) external view returns (uint256);\r\n\r\n    function totalValue() external view returns (uint256);\r\n\r\n    function withdrawFee() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/strategies/Strategy.sol\r\n\r\n\r\n\r\npragma solidity 0.8.3;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract Strategy is IStrategy, Context {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public immutable collateralToken;\r\n    address public receiptToken;\r\n    address public immutable override pool;\r\n    IAddressList public keepers;\r\n    address public override feeCollector;\r\n    ISwapManager public swapManager;\r\n\r\n    uint256 public oraclePeriod = 3600; // 1h\r\n    uint256 public oracleRouterIdx = 0; // Uniswap V2\r\n    uint256 public swapSlippage = 10000; // 100% Don't use oracles by default\r\n\r\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\r\n\r\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\r\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\r\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\r\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\r\n\r\n    constructor(\r\n        address _pool,\r\n        address _swapManager,\r\n        address _receiptToken\r\n    ) {\r\n        require(_pool != address(0), \"pool-address-is-zero\");\r\n        require(_swapManager != address(0), \"sm-address-is-zero\");\r\n        swapManager = ISwapManager(_swapManager);\r\n        pool = _pool;\r\n        collateralToken = IVesperPool(_pool).token();\r\n        receiptToken = _receiptToken;\r\n    }\r\n\r\n    modifier onlyGovernor {\r\n        require(_msgSender() == IVesperPool(pool).governor(), \"caller-is-not-the-governor\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyKeeper() {\r\n        require(keepers.contains(_msgSender()), \"caller-is-not-a-keeper\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPool() {\r\n        require(_msgSender() == pool, \"caller-is-not-vesper-pool\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Add given address in keepers list.\r\n     * @param _keeperAddress keeper address to add.\r\n     */\r\n    function addKeeper(address _keeperAddress) external onlyGovernor {\r\n        require(keepers.add(_keeperAddress), \"add-keeper-failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice Create keeper list\r\n     * NOTE: Any function with onlyKeeper modifier will not work until this function is called.\r\n     * NOTE: Due to gas constraint this function cannot be called in constructor.\r\n     * @param _addressListFactory To support same code in eth side chain, user _addressListFactory as param\r\n     * ethereum- 0xded8217De022706A191eE7Ee0Dc9df1185Fb5dA3\r\n     * polygon-0xD10D5696A350D65A9AA15FE8B258caB4ab1bF291\r\n     */\r\n    function init(address _addressListFactory) external onlyGovernor {\r\n        require(address(keepers) == address(0), \"keeper-list-already-created\");\r\n        // Prepare keeper list\r\n        IAddressListFactory _factory = IAddressListFactory(_addressListFactory);\r\n        keepers = IAddressList(_factory.createList());\r\n        require(keepers.add(_msgSender()), \"add-keeper-failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\r\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\r\n     * @param _newStrategy Address of new strategy\r\n     */\r\n    function migrate(address _newStrategy) external virtual override onlyPool {\r\n        require(_newStrategy != address(0), \"new-strategy-address-is-zero\");\r\n        require(IStrategy(_newStrategy).pool() == pool, \"not-valid-new-strategy\");\r\n        _beforeMigration(_newStrategy);\r\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\r\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice Remove given address from keepers list.\r\n     * @param _keeperAddress keeper address to remove.\r\n     */\r\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\r\n        require(keepers.remove(_keeperAddress), \"remove-keeper-failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice Update fee collector\r\n     * @param _feeCollector fee collector address\r\n     */\r\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\r\n        require(_feeCollector != address(0), \"fee-collector-address-is-zero\");\r\n        require(_feeCollector != feeCollector, \"fee-collector-is-same\");\r\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\r\n        feeCollector = _feeCollector;\r\n    }\r\n\r\n    /**\r\n     * @notice Update swap manager address\r\n     * @param _swapManager swap manager address\r\n     */\r\n    function updateSwapManager(address _swapManager) external onlyGovernor {\r\n        require(_swapManager != address(0), \"sm-address-is-zero\");\r\n        require(_swapManager != address(swapManager), \"sm-is-same\");\r\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\r\n        swapManager = ISwapManager(_swapManager);\r\n    }\r\n\r\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\r\n        require(_newSwapSlippage <= 10000, \"invalid-slippage-value\");\r\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\r\n        swapSlippage = _newSwapSlippage;\r\n    }\r\n\r\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\r\n        require(_newRouterIdx < swapManager.N_DEX(), \"invalid-router-index\");\r\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\r\n        require(_newPeriod > 59, \"invalid-oracle-period\");\r\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\r\n        oraclePeriod = _newPeriod;\r\n        oracleRouterIdx = _newRouterIdx;\r\n    }\r\n\r\n    /// @dev Approve all required tokens\r\n    function approveToken() external onlyKeeper {\r\n        _approveToken(0);\r\n        _approveToken(MAX_UINT_VALUE);\r\n    }\r\n\r\n    function setupOracles() external onlyKeeper {\r\n        _setupOracles();\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw collateral token from lending pool.\r\n     * @param _amount Amount of collateral token\r\n     */\r\n    function withdraw(uint256 _amount) external override onlyPool {\r\n        _withdraw(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Rebalance profit, loss and investment of this strategy\r\n     */\r\n    function rebalance() external virtual override onlyKeeper {\r\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\r\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\r\n        _reinvest();\r\n    }\r\n\r\n    /**\r\n     * @dev sweep given token to feeCollector of strategy\r\n     * @param _fromToken token address to sweep\r\n     */\r\n    function sweepERC20(address _fromToken) external override onlyKeeper {\r\n        require(feeCollector != address(0), \"fee-collector-not-set\");\r\n        require(_fromToken != address(collateralToken), \"not-allowed-to-sweep-collateral\");\r\n        require(!isReservedToken(_fromToken), \"not-allowed-to-sweep\");\r\n        if (_fromToken == ETH) {\r\n            Address.sendValue(payable(feeCollector), address(this).balance);\r\n        } else {\r\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\r\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Returns address of token correspond to collateral token\r\n    function token() external view override returns (address) {\r\n        return receiptToken;\r\n    }\r\n\r\n    /// @dev Convert from 18 decimals to token defined decimals. Default no conversion.\r\n    function convertFrom18(uint256 amount) public pure virtual returns (uint256) {\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate total value of asset under management\r\n     * @dev Report total value in collateral token\r\n     */\r\n    function totalValue() public view virtual override returns (uint256 _value);\r\n\r\n    /**\r\n     * @notice Calculate total value of asset under management (in real-time)\r\n     * @dev Report total value in collateral token\r\n     */\r\n    function totalValueCurrent() external virtual override returns (uint256) {\r\n        return totalValue();\r\n    }\r\n\r\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\r\n    function isReservedToken(address _token) public view virtual override returns (bool);\r\n\r\n    /**\r\n     * @notice some strategy may want to prepare before doing migration. \r\n        Example In Maker old strategy want to give vault ownership to new strategy\r\n     * @param _newStrategy .\r\n     */\r\n    function _beforeMigration(address _newStrategy) internal virtual;\r\n\r\n    /**\r\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\r\n     * excess debt, if any.\r\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\r\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\r\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\r\n     */\r\n    function _generateReport()\r\n        internal\r\n        virtual\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _payback\r\n        )\r\n    {\r\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\r\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\r\n        _profit = _realizeProfit(_totalDebt);\r\n        _loss = _realizeLoss(_totalDebt);\r\n        _payback = _liquidate(_excessDebt);\r\n    }\r\n\r\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\r\n        return (_amount * (10000 - _slippage)) / (10000);\r\n    }\r\n\r\n    function _simpleOraclePath(address _from, address _to) internal pure returns (address[] memory path) {\r\n        if (_from == WETH || _to == WETH) {\r\n            path = new address[](2);\r\n            path[0] = _from;\r\n            path[1] = _to;\r\n        } else {\r\n            path = new address[](3);\r\n            path[0] = _from;\r\n            path[1] = WETH;\r\n            path[2] = _to;\r\n        }\r\n    }\r\n\r\n    function _consultOracle(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amt\r\n    ) internal returns (uint256, bool) {\r\n        // from, to, amountIn, period, router\r\n        (uint256 rate, uint256 lastUpdate, ) = swapManager.consult(_from, _to, _amt, oraclePeriod, oracleRouterIdx);\r\n        // We're looking at a TWAP ORACLE with a 1 hr Period that has been updated within the last hour\r\n        if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\r\n        return (0, false);\r\n    }\r\n\r\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\r\n        require(path.length > 1, \"invalid-oracle-path\");\r\n        amountOut = _amountIn;\r\n        bool isValid;\r\n        for (uint256 i = 0; i < path.length - 1; i++) {\r\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\r\n            require(isValid, \"invalid-oracle-rate\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\r\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\r\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\r\n     * however, this method will throw minAmountOut is not met\r\n     * @param _from address of from token\r\n     * @param _to address of to token\r\n     * @param _amountIn Amount to be swapped\r\n     * @param _minAmountOut minimum amount out\r\n     */\r\n    function _safeSwap(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amountIn,\r\n        uint256 _minAmountOut\r\n    ) internal {\r\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\r\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\r\n        if (_minAmountOut == 0) _minAmountOut = 1;\r\n        if (amountOut != 0) {\r\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\r\n                _amountIn,\r\n                _minAmountOut,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    // These methods can be implemented by the inheriting strategy.\r\n    /* solhint-disable no-empty-blocks */\r\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\r\n\r\n    /**\r\n     * @notice Set up any oracles that are needed for this strategy.\r\n     */\r\n    function _setupOracles() internal virtual {}\r\n\r\n    /* solhint-enable */\r\n\r\n    // These methods must be implemented by the inheriting strategy\r\n    function _withdraw(uint256 _amount) internal virtual;\r\n\r\n    function _approveToken(uint256 _amount) internal virtual;\r\n\r\n    /**\r\n     * @notice Withdraw collateral to payback excess debt in pool.\r\n     * @param _excessDebt Excess debt of strategy in collateral token\r\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\r\n     */\r\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\r\n\r\n    /**\r\n     * @notice Calculate earning and withdraw/convert it into collateral token.\r\n     * @param _totalDebt Total collateral debt of this strategy\r\n     * @return _profit Profit in collateral token\r\n     */\r\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\r\n\r\n    /**\r\n     * @notice Calculate loss\r\n     * @param _totalDebt Total collateral debt of this strategy\r\n     * @return _loss Realized loss in collateral token\r\n     */\r\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\r\n\r\n    /**\r\n     * @notice Reinvest collateral.\r\n     * @dev Once we file report back in pool, we might have some collateral in hand\r\n     * which we want to reinvest aka deposit in lender/provider.\r\n     */\r\n    function _reinvest() internal virtual;\r\n}\r\n\r\n\r\n// File contracts/interfaces/vesper/ICollateralManager.sol\r\n\r\n\r\n\r\npragma solidity 0.8.3;\r\n\r\ninterface ICollateralManager {\r\n    function addGemJoin(address[] calldata _gemJoins) external;\r\n\r\n    function borrow(uint256 _amount) external;\r\n\r\n    function createVault(bytes32 _collateralType) external returns (uint256 _vaultNum);\r\n\r\n    function depositCollateral(uint256 _amount) external;\r\n\r\n    function payback(uint256 _amount) external;\r\n\r\n    function transferVaultOwnership(address _newOwner) external;\r\n\r\n    function withdrawCollateral(uint256 _amount) external;\r\n\r\n    function getVaultBalance(address _vaultOwner) external view returns (uint256 collateralLocked);\r\n\r\n    function getVaultDebt(address _vaultOwner) external view returns (uint256 daiDebt);\r\n\r\n    function getVaultInfo(address _vaultOwner)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 collateralLocked,\r\n            uint256 daiDebt,\r\n            uint256 collateralUsdRate,\r\n            uint256 collateralRatio,\r\n            uint256 minimumDebt\r\n        );\r\n\r\n    function mcdManager() external view returns (address);\r\n\r\n    function vaultNum(address _vaultOwner) external view returns (uint256 _vaultNum);\r\n\r\n    function whatWouldWithdrawDo(address _vaultOwner, uint256 _amount)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 collateralLocked,\r\n            uint256 daiDebt,\r\n            uint256 collateralUsdRate,\r\n            uint256 collateralRatio,\r\n            uint256 minimumDebt\r\n        );\r\n}\r\n\r\n\r\n// File contracts/strategies/maker/MakerStrategy.sol\r\n\r\n\r\n\r\npragma solidity 0.8.3;\r\n\r\n\r\n/// @dev This strategy will deposit collateral token in Maker, borrow Dai and\r\n/// deposit borrowed DAI in other lending pool to earn interest.\r\nabstract contract MakerStrategy is Strategy {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    ICollateralManager public immutable cm;\r\n    bytes32 public immutable collateralType;\r\n    uint256 public highWater;\r\n    uint256 public lowWater;\r\n    uint256 private constant WAT = 10**16;\r\n\r\n    constructor(\r\n        address _pool,\r\n        address _cm,\r\n        address _swapManager,\r\n        address _receiptToken,\r\n        bytes32 _collateralType\r\n    ) Strategy(_pool, _swapManager, _receiptToken) {\r\n        require(_cm != address(0), \"cm-address-is-zero\");\r\n        collateralType = _collateralType;\r\n        cm = ICollateralManager(_cm);\r\n    }\r\n\r\n    /// @notice Create new Maker vault\r\n    function createVault() external onlyGovernor {\r\n        cm.createVault(collateralType);\r\n    }\r\n\r\n    /**\r\n     * @dev If pool is underwater this function will resolve underwater condition.\r\n     * If Debt in Maker is greater than Dai balance in lender then pool is underwater.\r\n     * Lowering DAI debt in Maker will resolve underwater condition.\r\n     * Resolve: Calculate required collateral token to lower DAI debt. Withdraw required\r\n     * collateral token from Maker and convert those to DAI via Uniswap.\r\n     * Finally payback debt in Maker using DAI.\r\n     * @dev Also report loss in pool.\r\n     */\r\n    function resurface() external onlyKeeper {\r\n        _resurface();\r\n    }\r\n\r\n    /**\r\n     * @notice Update balancing factors aka high water and low water values.\r\n     * Water mark values represent Collateral Ratio in Maker. For example 300 as high water\r\n     * means 300% collateral ratio.\r\n     * @param _highWater Value for high water mark.\r\n     * @param _lowWater Value for low water mark.\r\n     */\r\n    function updateBalancingFactor(uint256 _highWater, uint256 _lowWater) external onlyGovernor {\r\n        require(_lowWater != 0, \"lowWater-is-zero\");\r\n        require(_highWater > _lowWater, \"highWater-less-than-lowWater\");\r\n        highWater = _highWater * WAT;\r\n        lowWater = _lowWater * WAT;\r\n    }\r\n\r\n    /**\r\n     * @notice Report total value of this strategy\r\n     * @dev Make sure to return value in collateral token and in order to do that\r\n     * we are using Uniswap to get collateral amount for earned DAI.\r\n     */\r\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\r\n        uint256 _daiBalance = _getDaiBalance();\r\n        uint256 _debt = cm.getVaultDebt(address(this));\r\n        if (_daiBalance > _debt) {\r\n            uint256 _daiEarned = _daiBalance - _debt;\r\n            (, _totalValue) = swapManager.bestPathFixedInput(DAI, address(collateralToken), _daiEarned, 0);\r\n        }\r\n        _totalValue += convertFrom18(cm.getVaultBalance(address(this)));\r\n    }\r\n\r\n    function vaultNum() external view returns (uint256) {\r\n        return cm.vaultNum(address(this));\r\n    }\r\n\r\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\r\n    function isReservedToken(address _token) public view virtual override returns (bool) {\r\n        return _token == receiptToken;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns true if pool is underwater.\r\n     * @notice Underwater - If debt is greater than earning of pool.\r\n     * @notice Earning - Sum of DAI balance and DAI from accrued reward, if any, in lending pool.\r\n     */\r\n    function isUnderwater() public view virtual returns (bool) {\r\n        return cm.getVaultDebt(address(this)) > _getDaiBalance();\r\n    }\r\n\r\n    /**\r\n     * @notice Before migration hook. It will be called during migration\r\n     * @dev Transfer Maker vault ownership to new strategy\r\n     * @param _newStrategy Address of new strategy.\r\n     */\r\n    function _beforeMigration(address _newStrategy) internal virtual override {\r\n        cm.transferVaultOwnership(_newStrategy);\r\n    }\r\n\r\n    function _approveToken(uint256 _amount) internal virtual override {\r\n        IERC20(DAI).safeApprove(address(cm), _amount);\r\n        collateralToken.safeApprove(address(cm), _amount);\r\n        collateralToken.safeApprove(pool, _amount);\r\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\r\n            collateralToken.safeApprove(address(swapManager.ROUTERS(i)), _amount);\r\n            IERC20(DAI).safeApprove(address(swapManager.ROUTERS(i)), _amount);\r\n        }\r\n    }\r\n\r\n    function _moveDaiToMaker(uint256 _amount) internal {\r\n        if (_amount != 0) {\r\n            _withdrawDaiFromLender(_amount);\r\n            cm.payback(_amount);\r\n        }\r\n    }\r\n\r\n    function _moveDaiFromMaker(uint256 _amount) internal virtual {\r\n        cm.borrow(_amount);\r\n        _amount = IERC20(DAI).balanceOf(address(this));\r\n        _depositDaiToLender(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw collateral to payback excess debt in pool.\r\n     * @param _excessDebt Excess debt of strategy in collateral token\r\n     * @return payback amount in collateral token. Usually it is equal to excess debt.\r\n     */\r\n    function _liquidate(uint256 _excessDebt) internal virtual override returns (uint256) {\r\n        _withdrawHere(_excessDebt);\r\n        return _excessDebt;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate earning and convert it to collateral token\r\n     * @dev Also claim rewards if available.\r\n     *      Withdraw excess DAI from lender.\r\n     *      Swap net earned DAI to collateral token\r\n     * @return profit in collateral token\r\n     */\r\n    function _realizeProfit(\r\n        uint256 /*_totalDebt*/\r\n    ) internal virtual override returns (uint256) {\r\n        _claimRewardsAndConvertTo(DAI);\r\n        _rebalanceDaiInLender();\r\n        uint256 _daiBalance = IERC20(DAI).balanceOf(address(this));\r\n        if (_daiBalance != 0) {\r\n            _safeSwap(DAI, address(collateralToken), _daiBalance, 1);\r\n        }\r\n        return collateralToken.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate collateral loss from resurface, if any\r\n     * @dev Difference of total debt of strategy in pool and collateral locked\r\n     *      in Maker vault is the loss.\r\n     * @return loss in collateral token\r\n     */\r\n    function _realizeLoss(uint256 _totalDebt) internal virtual override returns (uint256) {\r\n        uint256 _collateralLocked = convertFrom18(cm.getVaultBalance(address(this)));\r\n        return _totalDebt > _collateralLocked ? _totalDebt - _collateralLocked : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit collateral in Maker and rebalance collateral and debt in Maker.\r\n     * @dev Based on defined risk parameter either borrow more DAI from Maker or\r\n     * payback some DAI in Maker. It will try to mitigate risk of liquidation.\r\n     */\r\n    function _reinvest() internal virtual override {\r\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\r\n        if (_collateralBalance != 0) {\r\n            cm.depositCollateral(_collateralBalance);\r\n        }\r\n\r\n        (\r\n            uint256 _collateralLocked,\r\n            uint256 _currentDebt,\r\n            uint256 _collateralUsdRate,\r\n            uint256 _collateralRatio,\r\n            uint256 _minimumAllowedDebt\r\n        ) = cm.getVaultInfo(address(this));\r\n        uint256 _maxDebt = (_collateralLocked * _collateralUsdRate) / highWater;\r\n        if (_maxDebt < _minimumAllowedDebt) {\r\n            // Dusting Scenario:: Based on collateral locked, if our max debt is less\r\n            // than Maker defined minimum debt then payback whole debt and wind up.\r\n            _moveDaiToMaker(_currentDebt);\r\n        } else {\r\n            if (_collateralRatio > highWater) {\r\n                require(!isUnderwater(), \"pool-is-underwater\");\r\n                // Safe to borrow more DAI\r\n                _moveDaiFromMaker(_maxDebt - _currentDebt);\r\n            } else if (_collateralRatio < lowWater) {\r\n                // Being below low water brings risk of liquidation in Maker.\r\n                // Withdraw DAI from Lender and deposit in Maker\r\n                _moveDaiToMaker(_currentDebt - _maxDebt);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _resurface() internal virtual {\r\n        require(isUnderwater(), \"pool-is-above-water\");\r\n        uint256 _daiNeeded = cm.getVaultDebt(address(this)) - _getDaiBalance();\r\n        (address[] memory _path, uint256 _collateralNeeded, uint256 rIdx) =\r\n            swapManager.bestInputFixedOutput(address(collateralToken), DAI, _daiNeeded);\r\n        if (_collateralNeeded != 0) {\r\n            cm.withdrawCollateral(_collateralNeeded);\r\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\r\n                _collateralNeeded,\r\n                1,\r\n                _path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n            cm.payback(IERC20(DAI).balanceOf(address(this)));\r\n            IVesperPool(pool).reportLoss(_collateralNeeded);\r\n        }\r\n    }\r\n\r\n    function _withdraw(uint256 _amount) internal override {\r\n        _withdrawHere(_amount);\r\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\r\n    }\r\n\r\n    // TODO do we need a safe withdraw\r\n    function _withdrawHere(uint256 _amount) internal {\r\n        (\r\n            uint256 collateralLocked,\r\n            uint256 debt,\r\n            uint256 collateralUsdRate,\r\n            uint256 collateralRatio,\r\n            uint256 minimumDebt\r\n        ) = cm.whatWouldWithdrawDo(address(this), _amount);\r\n        if (debt != 0 && collateralRatio < lowWater) {\r\n            // If this withdraw results in Low Water scenario.\r\n            uint256 maxDebt = (collateralLocked * collateralUsdRate) / highWater;\r\n            if (maxDebt < minimumDebt) {\r\n                // This is Dusting scenario\r\n                _moveDaiToMaker(debt);\r\n            } else if (maxDebt < debt) {\r\n                _moveDaiToMaker(debt - maxDebt);\r\n            }\r\n        }\r\n        cm.withdrawCollateral(_amount);\r\n    }\r\n\r\n    function _depositDaiToLender(uint256 _amount) internal virtual;\r\n\r\n    function _rebalanceDaiInLender() internal virtual;\r\n\r\n    function _withdrawDaiFromLender(uint256 _amount) internal virtual;\r\n\r\n    function _getDaiBalance() internal view virtual returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/vesper/IPoolRewards.sol\r\n\r\n\r\n\r\npragma solidity 0.8.3;\r\n\r\ninterface IPoolRewards {\r\n    /// Emitted after reward added\r\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\r\n    /// Emitted whenever any user claim rewards\r\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\r\n    /// Emitted after adding new rewards token into rewardTokens array\r\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\r\n\r\n    function claimReward(address) external;\r\n\r\n    function notifyRewardAmount(\r\n        address _rewardToken,\r\n        uint256 _rewardAmount,\r\n        uint256 _rewardDuration\r\n    ) external;\r\n\r\n    function notifyRewardAmount(\r\n        address[] memory _rewardTokens,\r\n        uint256[] memory _rewardAmounts,\r\n        uint256[] memory _rewardDurations\r\n    ) external;\r\n\r\n    function updateReward(address) external;\r\n\r\n    function claimable(address _account)\r\n        external\r\n        view\r\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\r\n\r\n    function lastTimeRewardApplicable(address _rewardToken) external view returns (uint256);\r\n\r\n    function rewardForDuration()\r\n        external\r\n        view\r\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\r\n\r\n    function rewardPerToken()\r\n        external\r\n        view\r\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\r\n}\r\n\r\n\r\n// File contracts/strategies/Earn.sol\r\n\r\n\r\n\r\npragma solidity 0.8.3;\r\n\r\n\r\n\r\n\r\n\r\nabstract contract Earn is Strategy {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public immutable dripToken;\r\n\r\n    uint256 public dripPeriod = 48 hours;\r\n    uint256 public totalEarned; // accounting total stable coin earned. This amount is not reported to pool.\r\n\r\n    event DripPeriodUpdated(uint256 oldDripPeriod, uint256 newDripPeriod);\r\n\r\n    constructor(address _dripToken) {\r\n        require(_dripToken != address(0), \"dripToken-zero\");\r\n        dripToken = _dripToken;\r\n    }\r\n\r\n    /**\r\n     * @notice Update update period of distribution of earning done in one rebalance\r\n     * @dev _dripPeriod in seconds\r\n     */\r\n    function updateDripPeriod(uint256 _dripPeriod) external onlyGovernor {\r\n        require(_dripPeriod != 0, \"dripPeriod-zero\");\r\n        require(_dripPeriod != dripPeriod, \"same-dripPeriod\");\r\n        emit DripPeriodUpdated(dripPeriod, _dripPeriod);\r\n        dripPeriod = _dripPeriod;\r\n    }\r\n\r\n    /// @notice Converts excess collateral earned to drip token\r\n    function _convertCollateralToDrip() internal {\r\n        uint256 _collateralAmount = collateralToken.balanceOf(address(this));\r\n        _convertCollateralToDrip(_collateralAmount);\r\n    }\r\n\r\n    function _convertCollateralToDrip(uint256 _collateralAmount) internal {\r\n        if (_collateralAmount != 0) {\r\n            uint256 minAmtOut =\r\n                (swapSlippage != 10000)\r\n                    ? _calcAmtOutAfterSlippage(\r\n                        _getOracleRate(_simpleOraclePath(address(collateralToken), dripToken), _collateralAmount),\r\n                        swapSlippage\r\n                    )\r\n                    : 1;\r\n            _safeSwap(address(collateralToken), dripToken, _collateralAmount, minAmtOut);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Send this earning to drip contract.\r\n     */\r\n    function _forwardEarning() internal {\r\n        (, uint256 _interestFee, , , , , , ) = IVesperPool(pool).strategy(address(this));\r\n        address _dripContract = IVesperPool(pool).poolRewards();\r\n        uint256 _earned = IERC20(dripToken).balanceOf(address(this));\r\n        if (_earned != 0) {\r\n            totalEarned += _earned;\r\n            uint256 _fee = (_earned * _interestFee) / 10000;\r\n            if (_fee != 0) {\r\n                IERC20(dripToken).safeTransfer(feeCollector, _fee);\r\n                _earned = _earned - _fee;\r\n            }\r\n            IERC20(dripToken).safeTransfer(_dripContract, _earned);\r\n            IPoolRewards(_dripContract).notifyRewardAmount(dripToken, _earned, dripPeriod);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/compound/ICompound.sol\r\n\r\n\r\n\r\npragma solidity 0.8.3;\r\n\r\ninterface CToken {\r\n    function accrueInterest() external returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external returns (uint256);\r\n\r\n    function borrowBalanceStored(address account) external view returns (uint256);\r\n\r\n    function exchangeRateCurrent() external returns (uint256);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n\r\n    function getAccountSnapshot(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function borrow(uint256 borrowAmount) external returns (uint256);\r\n\r\n    function mint() external payable; // For ETH\r\n\r\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    function repayBorrow() external payable; // For ETH\r\n\r\n    function repayBorrow(uint256 repayAmount) external returns (uint256); // For ERC20\r\n\r\n    function transfer(address user, uint256 amount) external returns (bool);\r\n\r\n    function getCash() external view returns (uint256);\r\n\r\n    function transferFrom(\r\n        address owner,\r\n        address user,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function underlying() external view returns (address);\r\n}\r\n\r\ninterface Comptroller {\r\n    function claimComp(address holder, address[] memory) external;\r\n\r\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\r\n\r\n    function exitMarket(address cToken) external returns (uint256);\r\n\r\n    function compAccrued(address holder) external view returns (uint256);\r\n\r\n    function getAccountLiquidity(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function markets(address market)\r\n        external\r\n        view\r\n        returns (\r\n            bool isListed,\r\n            uint256 collateralFactorMantissa,\r\n            bool isCompted\r\n        );\r\n}\r\n\r\n\r\n// File contracts/strategies/maker/CompoundMakerStrategy.sol\r\n\r\n\r\n\r\npragma solidity 0.8.3;\r\n\r\n\r\n/// @dev This strategy will deposit collateral token in Maker, borrow Dai and\r\n/// deposit borrowed DAI in Compound to earn interest.\r\nabstract contract CompoundMakerStrategy is MakerStrategy {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address internal constant COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\r\n    CToken internal immutable cToken;\r\n    Comptroller internal constant COMPTROLLER = Comptroller(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\r\n\r\n    constructor(\r\n        address _pool,\r\n        address _cm,\r\n        address _swapManager,\r\n        address _receiptToken,\r\n        bytes32 _collateralType\r\n    ) MakerStrategy(_pool, _cm, _swapManager, _receiptToken, _collateralType) {\r\n        require(_receiptToken != address(0), \"cToken-address-is-zero\");\r\n        cToken = CToken(_receiptToken);\r\n    }\r\n\r\n    /**\r\n     * @notice Report total value of this strategy\r\n     * @dev Make sure to return value in collateral token.\r\n     * @dev Total value = DAI earned + COMP earned + Collateral locked in Maker\r\n     */\r\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\r\n        _totalValue = _calculateTotalValue(COMPTROLLER.compAccrued(address(this)));\r\n    }\r\n\r\n    function totalValueCurrent() public virtual override returns (uint256 _totalValue) {\r\n        _claimComp();\r\n        _totalValue = _calculateTotalValue(IERC20(COMP).balanceOf(address(this)));\r\n    }\r\n\r\n    function _calculateTotalValue(uint256 _compAccrued) internal view returns (uint256 _totalValue) {\r\n        uint256 _daiBalance = _getDaiBalance();\r\n        uint256 _debt = cm.getVaultDebt(address(this));\r\n        if (_daiBalance > _debt) {\r\n            uint256 _daiEarned = _daiBalance - _debt;\r\n            (, _totalValue) = swapManager.bestPathFixedInput(DAI, address(collateralToken), _daiEarned, 0);\r\n        }\r\n\r\n        if (_compAccrued != 0) {\r\n            (, uint256 _compAsCollateral) =\r\n                swapManager.bestPathFixedInput(COMP, address(collateralToken), _compAccrued, 0);\r\n            _totalValue += _compAsCollateral;\r\n        }\r\n        _totalValue += convertFrom18(cm.getVaultBalance(address(this)));\r\n    }\r\n\r\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\r\n    function isReservedToken(address _token) public view override returns (bool) {\r\n        return _token == receiptToken || _token == COMP;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns true if pool is underwater.\r\n     * @notice Underwater - If debt is greater than earning of pool.\r\n     * @notice Earning - Sum of DAI balance and DAI from accrued reward, if any, in lending pool.\r\n     * @dev There can be a scenario when someone calls claimComp() periodically which will\r\n     * leave compAccrued = 0 and pool might be underwater. Call rebalance() to liquidate COMP.\r\n     */\r\n    function isUnderwater() public view override returns (bool) {\r\n        uint256 _compAccrued = COMPTROLLER.compAccrued(address(this));\r\n        uint256 _daiEarned;\r\n        if (_compAccrued != 0) {\r\n            (, _daiEarned) = swapManager.bestPathFixedInput(COMP, DAI, _compAccrued, 0);\r\n        }\r\n        return cm.getVaultDebt(address(this)) > (_getDaiBalance() + _daiEarned);\r\n    }\r\n\r\n    function _approveToken(uint256 _amount) internal override {\r\n        super._approveToken(_amount);\r\n        IERC20(DAI).safeApprove(address(receiptToken), _amount);\r\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\r\n            IERC20(COMP).safeApprove(address(swapManager.ROUTERS(i)), _amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Claim rewardToken from lender and convert it into DAI\r\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\r\n        _claimComp();\r\n        uint256 _compAmount = IERC20(COMP).balanceOf(address(this));\r\n        if (_compAmount > 0) {\r\n            _safeSwap(COMP, _toToken, _compAmount, 1);\r\n        }\r\n    }\r\n\r\n    function _claimComp() internal {\r\n        address[] memory _markets = new address[](1);\r\n        _markets[0] = address(cToken);\r\n        COMPTROLLER.claimComp(address(this), _markets);\r\n    }\r\n\r\n    function _depositDaiToLender(uint256 _amount) internal override {\r\n        if (_amount != 0) {\r\n            require(cToken.mint(_amount) == 0, \"deposit-in-compound-failed\");\r\n        }\r\n    }\r\n\r\n    function _getDaiBalance() internal view override returns (uint256) {\r\n        return (cToken.balanceOf(address(this)) * cToken.exchangeRateStored()) / 1e18;\r\n    }\r\n\r\n    /**\r\n     * @dev Rebalance DAI in lender. If lender has more DAI than DAI debt in Maker\r\n     * then withdraw excess DAI from lender. If lender is short on DAI, underwater,\r\n     * then deposit DAI to lender.\r\n     * @dev There may be a scenario where we do not have enough DAI to deposit to\r\n     * lender, in that case pool will be underwater even after rebalanceDai.\r\n     */\r\n    function _rebalanceDaiInLender() internal override {\r\n        uint256 _daiDebtInMaker = cm.getVaultDebt(address(this));\r\n        uint256 _daiInLender = _getDaiBalance();\r\n        if (_daiInLender > _daiDebtInMaker) {\r\n            _withdrawDaiFromLender(_daiInLender - _daiDebtInMaker);\r\n        } else if (_daiInLender < _daiDebtInMaker) {\r\n            // We have more DAI debt in Maker than DAI in lender\r\n            uint256 _daiNeeded = _daiDebtInMaker - _daiInLender;\r\n            uint256 _daiBalanceHere = IERC20(DAI).balanceOf(address(this));\r\n            if (_daiBalanceHere > _daiNeeded) {\r\n                _depositDaiToLender(_daiNeeded);\r\n            } else {\r\n                _depositDaiToLender(_daiBalanceHere);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _withdrawDaiFromLender(uint256 _amount) internal override {\r\n        require(cToken.redeemUnderlying(_amount) == 0, \"withdraw-from-compound-failed\");\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/aave/IAave.sol\r\n\r\n\r\n\r\npragma solidity 0.8.3;\r\n\r\ninterface AaveLendingPoolAddressesProvider {\r\n    function getLendingPool() external view returns (address);\r\n\r\n    function getAddress(bytes32 id) external view returns (address);\r\n}\r\n\r\ninterface AToken is IERC20 {\r\n    /**\r\n     * @dev Returns the address of the incentives controller contract\r\n     **/\r\n    function getIncentivesController() external view returns (address);\r\n}\r\n\r\ninterface AaveIncentivesController {\r\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\r\n\r\n    function claimRewards(\r\n        address[] calldata assets,\r\n        uint256 amount,\r\n        address to\r\n    ) external returns (uint256);\r\n}\r\n\r\ninterface AaveLendingPool {\r\n    function deposit(\r\n        address asset,\r\n        uint256 amount,\r\n        address onBehalfOf,\r\n        uint16 referralCode\r\n    ) external;\r\n\r\n    function withdraw(\r\n        address asset,\r\n        uint256 amount,\r\n        address to\r\n    ) external returns (uint256);\r\n}\r\n\r\ninterface AaveProtocolDataProvider {\r\n    function getReserveTokensAddresses(address asset)\r\n        external\r\n        view\r\n        returns (\r\n            address aTokenAddress,\r\n            address stableDebtTokenAddress,\r\n            address variableDebtTokenAddress\r\n        );\r\n\r\n    function getReserveData(address asset)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 availableLiquidity,\r\n            uint256 totalStableDebt,\r\n            uint256 totalVariableDebt,\r\n            uint256 liquidityRate,\r\n            uint256 variableBorrowRate,\r\n            uint256 stableBorrowRate,\r\n            uint256 averageStableBorrowRate,\r\n            uint256 liquidityIndex,\r\n            uint256 variableBorrowIndex,\r\n            uint40 lastUpdateTimestamp\r\n        );\r\n}\r\n\r\n//solhint-disable func-name-mixedcase\r\ninterface StakedAave is IERC20 {\r\n    function claimRewards(address to, uint256 amount) external;\r\n\r\n    function cooldown() external;\r\n\r\n    function stake(address onBehalfOf, uint256 amount) external;\r\n\r\n    function redeem(address to, uint256 amount) external;\r\n\r\n    function getTotalRewardsBalance(address staker) external view returns (uint256);\r\n\r\n    function stakersCooldowns(address staker) external view returns (uint256);\r\n\r\n    function COOLDOWN_SECONDS() external view returns (uint256);\r\n\r\n    function UNSTAKE_WINDOW() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/strategies/aave/AaveCore.sol\r\n\r\n\r\n\r\npragma solidity 0.8.3;\r\n\r\n/// @title This contract provide core operations for Aave\r\nabstract contract AaveCore {\r\n    //solhint-disable-next-line const-name-snakecase\r\n    StakedAave public constant stkAAVE = StakedAave(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\r\n    address public constant AAVE = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\r\n\r\n    AaveLendingPoolAddressesProvider public aaveAddressesProvider =\r\n        AaveLendingPoolAddressesProvider(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\r\n    AaveLendingPool public immutable aaveLendingPool;\r\n    AaveProtocolDataProvider public immutable aaveProtocolDataProvider;\r\n    AaveIncentivesController public immutable aaveIncentivesController;\r\n\r\n    AToken internal immutable aToken;\r\n    bytes32 private constant AAVE_PROVIDER_ID = 0x0100000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    constructor(address _receiptToken) {\r\n        require(_receiptToken != address(0), \"aToken-address-is-zero\");\r\n        aToken = AToken(_receiptToken);\r\n        // If there is no AAVE incentive then below call will fail\r\n        try AToken(_receiptToken).getIncentivesController() {\r\n            aaveIncentivesController = AaveIncentivesController(AToken(_receiptToken).getIncentivesController());\r\n        } catch {} //solhint-disable no-empty-blocks\r\n\r\n        aaveLendingPool = AaveLendingPool(aaveAddressesProvider.getLendingPool());\r\n        aaveProtocolDataProvider = AaveProtocolDataProvider(aaveAddressesProvider.getAddress(AAVE_PROVIDER_ID));\r\n    }\r\n\r\n    ///////////////////////// External access functions /////////////////////////\r\n\r\n    /**\r\n     * @notice Initiate cooldown to unstake aave.\r\n     * @dev We only want to call this function when cooldown is expired and\r\n     * that's the reason we have 'if' condition.\r\n     * @dev Child contract should expose this function as external and onlyKeeper\r\n     */\r\n    function _startCooldown() internal returns (bool) {\r\n        if (canStartCooldown()) {\r\n            stkAAVE.cooldown();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice Unstake Aave from stakedAave contract\r\n     * @dev We want to unstake as soon as favorable condition exit\r\n     * @dev No guarding condition thus this call can fail, if we can't unstake.\r\n     * @dev Child contract should expose this function as external and onlyKeeper\r\n     */\r\n    function _unstakeAave() internal {\r\n        stkAAVE.redeem(address(this), type(uint256).max);\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n\r\n    /// @notice Returns true if Aave can be unstaked\r\n    function canUnstake() external view returns (bool) {\r\n        (, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\r\n        return _canUnstake(_cooldownEnd, _unstakeEnd);\r\n    }\r\n\r\n    /// @notice Returns true if we should start cooldown\r\n    function canStartCooldown() public view returns (bool) {\r\n        (uint256 _cooldownStart, , uint256 _unstakeEnd) = cooldownData();\r\n        return _canStartCooldown(_cooldownStart, _unstakeEnd);\r\n    }\r\n\r\n    /// @notice Return cooldown related timestamps\r\n    function cooldownData()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 _cooldownStart,\r\n            uint256 _cooldownEnd,\r\n            uint256 _unstakeEnd\r\n        )\r\n    {\r\n        _cooldownStart = stkAAVE.stakersCooldowns(address(this));\r\n        _cooldownEnd = _cooldownStart + stkAAVE.COOLDOWN_SECONDS();\r\n        _unstakeEnd = _cooldownEnd + stkAAVE.UNSTAKE_WINDOW();\r\n    }\r\n\r\n    /**\r\n     * @notice Claim Aave. Also unstake all Aave if favorable condition exits or start cooldown.\r\n     * @dev If we unstake all Aave, we can't start cooldown because it requires StakedAave balance.\r\n     * @dev DO NOT convert 'if else' to 2 'if's as we are reading cooldown state once to save gas.\r\n     * @dev Not all collateral token has aave incentive\r\n     */\r\n    function _claimAave() internal returns (uint256) {\r\n        if (address(aaveIncentivesController) == address(0)) {\r\n            return 0;\r\n        }\r\n        (uint256 _cooldownStart, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\r\n        if (_cooldownStart == 0 || block.timestamp > _unstakeEnd) {\r\n            // claim stkAave when its first rebalance or unstake period passed.\r\n            address[] memory _assets = new address[](1);\r\n            _assets[0] = address(aToken);\r\n            aaveIncentivesController.claimRewards(_assets, type(uint256).max, address(this));\r\n        }\r\n        // Fetch and check again for next action.\r\n        (_cooldownStart, _cooldownEnd, _unstakeEnd) = cooldownData();\r\n        if (_canUnstake(_cooldownEnd, _unstakeEnd)) {\r\n            stkAAVE.redeem(address(this), type(uint256).max);\r\n        } else if (_canStartCooldown(_cooldownStart, _unstakeEnd)) {\r\n            stkAAVE.cooldown();\r\n        }\r\n\r\n        stkAAVE.claimRewards(address(this), type(uint256).max);\r\n        return IERC20(AAVE).balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice Deposit asset into Aave\r\n    function _deposit(address _asset, uint256 _amount) internal {\r\n        if (_amount != 0) {\r\n            aaveLendingPool.deposit(_asset, _amount, address(this), 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\r\n     * @dev Check we have enough aToken and liquidity to support this withdraw\r\n     * @param _asset Address of asset to withdraw\r\n     * @param _to Address that will receive collateral token.\r\n     * @param _amount Amount of collateral to withdraw.\r\n     * @return Actual collateral withdrawn\r\n     */\r\n    function _safeWithdraw(\r\n        address _asset,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (uint256) {\r\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\r\n        // If Vesper becomes large liquidity provider in Aave(This happened in past in vUSDC 1.0)\r\n        // In this case we might have more aToken compare to available liquidity in Aave and any\r\n        // withdraw asking more than available liquidity will fail. To do safe withdraw, check\r\n        // _amount against available liquidity.\r\n        (uint256 _availableLiquidity, , , , , , , , , ) = aaveProtocolDataProvider.getReserveData(_asset);\r\n        // Get minimum of _amount, _aTokenBalance and _availableLiquidity\r\n        return _withdraw(_asset, _to, _min(_amount, _min(_aTokenBalance, _availableLiquidity)));\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw given amount of collateral from Aave to given address\r\n     * @param _asset Address of asset to withdraw\r\n     * @param _to Address that will receive collateral token.\r\n     * @param _amount Amount of collateral to withdraw.\r\n     * @return Actual collateral withdrawn\r\n     */\r\n    function _withdraw(\r\n        address _asset,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (uint256) {\r\n        if (_amount != 0) {\r\n            require(aaveLendingPool.withdraw(_asset, _amount, _to) == _amount, \"withdrawn-amount-is-not-correct\");\r\n        }\r\n        return _amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Return true, only if we have StakedAave balance and either cooldown expired or cooldown is zero\r\n     * @dev If we are in cooldown period we cannot unstake Aave. But our cooldown is still valid so we do\r\n     * not want to reset/start cooldown.\r\n     */\r\n    function _canStartCooldown(uint256 _cooldownStart, uint256 _unstakeEnd) internal view returns (bool) {\r\n        return stkAAVE.balanceOf(address(this)) != 0 && (_cooldownStart == 0 || block.timestamp > _unstakeEnd);\r\n    }\r\n\r\n    /// @dev Return true, if cooldown is over and we are in unstake window.\r\n    function _canUnstake(uint256 _cooldownEnd, uint256 _unstakeEnd) internal view returns (bool) {\r\n        return block.timestamp > _cooldownEnd && block.timestamp <= _unstakeEnd;\r\n    }\r\n\r\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\r\n    function _isReservedToken(address _token) internal view returns (bool) {\r\n        return _token == address(aToken) || _token == AAVE || _token == address(stkAAVE);\r\n    }\r\n\r\n    /**\r\n     * @notice Return total AAVE incentive allocated to this address\r\n     * @dev Aave and StakedAave are 1:1\r\n     * @dev Not all collateral token has aave incentive\r\n     */\r\n    function _totalAave() internal view returns (uint256) {\r\n        if (address(aaveIncentivesController) == address(0)) {\r\n            return 0;\r\n        }\r\n        address[] memory _assets = new address[](1);\r\n        _assets[0] = address(aToken);\r\n        // TotalAave = Get current StakedAave rewards from controller +\r\n        //             StakedAave balance here +\r\n        //             Aave rewards by staking Aave in StakedAave contract\r\n        return\r\n            aaveIncentivesController.getRewardsBalance(_assets, address(this)) +\r\n            stkAAVE.balanceOf(address(this)) +\r\n            stkAAVE.getTotalRewardsBalance(address(this));\r\n    }\r\n\r\n    /// @notice Returns minimum of 2 given numbers\r\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/strategies/maker/EarnCompoundMakerStrategy.sol\r\n\r\n\r\npragma solidity 0.8.3;\r\n\r\n\r\n\r\n\r\n\r\n/// @dev This strategy will deposit collateral token in Maker, borrow Dai and\r\n/// deposit borrowed DAI in Aave to earn interest.\r\nabstract contract EarnCompoundMakerStrategy is CompoundMakerStrategy, Earn {\r\n    //solhint-disable no-empty-blocks\r\n    constructor(\r\n        address _pool,\r\n        address _cm,\r\n        address _swapManager,\r\n        address _receiptToken,\r\n        bytes32 _collateralType,\r\n        address _dripToken\r\n    ) CompoundMakerStrategy(_pool, _cm, _swapManager, _receiptToken, _collateralType) Earn(_dripToken) {}\r\n\r\n    function totalValueCurrent() public override(Strategy, CompoundMakerStrategy) returns (uint256 _totalValue) {\r\n        _claimComp();\r\n        _totalValue = _calculateTotalValue(IERC20(COMP).balanceOf(address(this)));\r\n    }\r\n\r\n    function _claimRewardsAndConvertTo(address _toToken) internal override(Strategy, CompoundMakerStrategy) {\r\n        CompoundMakerStrategy._claimRewardsAndConvertTo(_toToken);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate earning and convert it to collateral token\r\n     * @dev Also claim rewards if available.\r\n     *      Withdraw excess DAI from lender.\r\n     *      Swap net earned DAI to collateral token\r\n     * @return profit in collateral token\r\n     */\r\n    function _realizeProfit(\r\n        uint256 /*_totalDebt*/\r\n    ) internal virtual override(Strategy, MakerStrategy) returns (uint256) {\r\n        _claimRewardsAndConvertTo(dripToken);\r\n        _rebalanceDaiInLender();\r\n        _forwardEarning();\r\n        return collateralToken.balanceOf(address(this));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/strategies/maker/EarnCompoundMakerStrategyETH.sol\r\n\r\n\r\n\r\npragma solidity 0.8.3;\r\n\r\n//solhint-disable no-empty-blocks\r\ncontract EarnCompoundMakerStrategyETH is EarnCompoundMakerStrategy {\r\n    string public constant NAME = \"Earn-Aave-Maker-Strategy-ETH\";\r\n    string public constant VERSION = \"3.0.0\";\r\n\r\n    // cDAI = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643\r\n    constructor(\r\n        address _pool,\r\n        address _cm,\r\n        address _swapManager\r\n    ) EarnCompoundMakerStrategy(_pool, _cm, _swapManager, 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643, \"ETH-C\", DAI) {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDripPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDripPeriod\",\"type\":\"uint256\"}],\"name\":\"DripPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRouterIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"UpdatedOracleConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedSwapSlippage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cm\",\"outputs\":[{\"internalType\":\"contract ICollateralManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertFrom18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highWater\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressListFactory\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnderwater\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"contract IAddressList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowWater\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouterIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resurface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_highWater\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lowWater\",\"type\":\"uint256\"}],\"name\":\"updateBalancingFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dripPeriod\",\"type\":\"uint256\"}],\"name\":\"updateDripPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"updateOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"updateSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EarnCompoundMakerStrategyETH","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a89566489e932a2d334b9eff7884feb21a07d2b3000000000000000000000000abc64889601f01e7b26277ef8756250d6abf8c18000000000000000000000000e382d9f2394a359b01006faa8a1864b8a60d2710","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://60f90b1b51d12379b27c842146237c547b3c324f46fe2b7e6e34593a6cff6dda"}]}