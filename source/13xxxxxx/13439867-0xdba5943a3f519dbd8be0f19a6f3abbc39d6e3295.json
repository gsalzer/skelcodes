{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/data-blocks/ArmsImageData.sol\": {\r\n      \"content\": \"// //SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ncontract ArmsImageData {\\n    function getLabel(uint256 slot) public pure returns (string memory) {\\n        string[24] memory names = [\\n            \\\"Aqua\\\",\\n            \\\"Light Blue\\\",\\n            \\\"Bright Blue\\\",\\n            \\\"Dark Blue\\\",\\n            \\\"Light Grey\\\",\\n            \\\"Medium Grey\\\",\\n            \\\"Dark Grey\\\",\\n            \\\"White\\\",\\n            \\\"Light Pink\\\",\\n            \\\"Deep Blush\\\",\\n            \\\"Yellow Green\\\",\\n            \\\"Bright Green\\\",\\n            \\\"Dark Green\\\",\\n            \\\"Olive Green\\\",\\n            \\\"Light Nougat\\\",\\n            \\\"Nougat\\\",\\n            \\\"Brick Yellow\\\",\\n            \\\"Light Brown\\\",\\n            \\\"Dark Brown\\\",\\n            \\\"Light Yellow\\\",\\n            \\\"Yellow\\\",\\n            \\\"Bright Yellow\\\",\\n            \\\"Bright Orange\\\",\\n            \\\"Bright Red\\\"\\n        ];\\n        return names[slot % names.length];\\n    }\\n\\n    function getData(uint256 slot) public pure returns (bytes memory) {\\n        string[24] memory colors = [\\n            \\\"C1E4DA\\\",\\n            \\\"78BFEA\\\",\\n            \\\"00A3DA\\\",\\n            \\\"006CB7\\\",\\n            \\\"A0A19F\\\",\\n            \\\"646765\\\",\\n            \\\"42423E\\\",\\n            \\\"F4F4F4\\\",\\n            \\\"F6ADCD\\\",\\n            \\\"E95DA2\\\",\\n            \\\"9ACA3C\\\",\\n            \\\"00AF4D\\\",\\n            \\\"009247\\\",\\n            \\\"828353\\\",\\n            \\\"FCC39E\\\",\\n            \\\"DE8B5F\\\",\\n            \\\"DDC48E\\\",\\n            \\\"AF7446\\\",\\n            \\\"692E14\\\",\\n            \\\"FFF579\\\",\\n            \\\"FEE716\\\",\\n            \\\"FFCD03\\\",\\n            \\\"F57D20\\\",\\n            \\\"DD1A21\\\"\\n        ];\\n        return\\n            abi.encodePacked(\\n                '<path d=\\\"M3 21H5V24H4V25H1V24H2V22H3V21ZM22 21H20V24H21V25H24V24H23V22H22V21Z\\\" fill=\\\"#',\\n                colors[slot % colors.length],\\n                '\\\"/>'\\n                '<path d=\\\"M5 20H3V21H2V22H1V24H0V25H1V24H2V22H3V21H5V24H4V25H5V24H6V21H5V20ZM22 20H20V21H19V24H20V25H21V24H20V21H22V22H23V24H24V25H25V24H24V22H23V21H22V20Z\\\" fill=\\\"black\\\"/>'\\n            );\\n    }\\n\\n    //////// Data blobs\\n    // We use uint32s for all the lengths and offsets since it indexes into the png data blob which can be quite large.  32-bit values (up to 2.1M) seem large enough we won't have more than 2 megs of data in here.\\n    bytes constant data =\\n        hex\\\"89504e470d0a1a0a0000000d4948445200000019000000190806000000c4e98563000000644944415448c763601805a360148c8251300a46c100034628a699198c40f01f8429b088096ac63f6c66802d38f8e4161803f9ffc9f101cc8c038f6f62b5086e01352c81590414fb4794248996fc03e9c7e69b7f40413826d302148b6066012d0299f517003b5560d3878056140000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e9856300000063494441544889ed8f410a80300c04133fadafabefa97f30b50d6945c84183e26507f6604b679008000000003fc3b6cf1c4ccc45170f4de610cfa18165dd74f5bb0402a72365373402af447a88486e5d3e8c487beffd8dd4c3b160e01a32d79c7273ed0734ab58b8793b69dc0000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e985630000005f494441544889ed8f410ac0200c0427fdff2bf455fa97c61e54a4e0a1b52dbdecc09e02330484104208f133d6f699c3302b989507a1ad397ce6a88198eba02c048623a4696804de88f410f8a5e3cd8813d2f41b27e6b1b5c039d45d2139b01fc73e4aa179d72ad80000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e985630000005b4944415448c7ed8f410ac0300804d7be37ef33afabe9c148a07848a5a5971dd893308300218410427e46e63e730820c3570e1dd36199c303adfb8051fb201c9a8656e0954884605bc7871143d3f41b43eb6bb5c02d143e3500e7050c3942dfc50d20540000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e98563000000614944415448c7ed8f410e80200c04c1ffbf01f0a116b7849298f480a8f1b293ec8136eca42110420821e46762cf671d1154cd03d1d63bc4eb6882b2e716bcebca05d6914b724543f086c44498c9d4f2a644f4bf778d6038b228b888ac0b22ed3a4e2a335329e1f004c50000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e985630000005549444154488963601805a360148c8251300a46c100034628a699192089ff504cae454c50fdffb09901b620253d158ca10a4905e86660580497a496254816119624d1927f58cc01fb062401c7645a806e11b2797f01e4af43f7e6dae0330000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e985630000005549444154488963601805a360148c8251300a46c100034628a699192089ff504cae454c50fdffb09901b6c0c9c90e8ca10a4905e86660580497a496254816119624d1927f58cc01fb062401c7645a806e11b2797f01eca43a831ed256070000000049454e44ae42608289504e470d0a1a0a0000000d49484452000000190000001908040000006ee04de80000004d4944415438cbedcd310e80300c43519bfbdf365eb15990e840abb2a2fc2d529e0c745df79b087efb20c32cd1c1d0cf07194541e60b8c52038ab68852815fce09710d3b966579016e24cb659c17e17a3ed5df4444390000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e98563000000644944415448c763601805a360148c8251300a46c100034628a699198c40f01f8429b088096ac63f6c66802df8b6f62c1803f9ffc9f101cc8caf6bce60b5086e01352c81590414fb4794248996fc03e9c7e69b7f40413826d302148b6066012d0299f517004daa5f89fe8720fb0000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e98563000000644944415448c7ed8f410a80300c0413ffd9c7e9ebf4114d4d4a531072a855f1b2037b6842770811000000007e865b3eeb60262e9607a2a57548d4510547da6af45d662ef08e3dada1a80bde90b8486732b4bc2911fb1f5d233aec99145c44dea522ebca27a7eb53d3006c25f20000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e98563000000644944415448c7ed8f410a80300c0413dfd58fea8ff44f4d4d4a531072a855f1b2037b6842770811000000007e865b3eeb60662a9607a2a57548d45105db916af45d662ef08e754fa1a80bde90b8486732b4bc2911fb1f5d233aec99145c44dea522ebca2719ef4da3187b84f80000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e985630000005d4944415448c7ed8f410a80300c0427fe2f5f6d5f68eaa12d45e841abe26507f614982120841042889fb1b6cf1c865130ca83d0d61c3173d440f63a284b1f7447f2696804de88f410c4a5e3cd48907cfa4d907d6c2d700e7557f200f6039ca63f856692c3b50000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e985630000005d4944415448c7ed8f410a80300c04277e2eef6bff6beaa12d45e841abe26507f614982120841042889fb1b6cf1c865130ca83d0d61c3173d440f63a284b1f7447f2696804de88f410c4a5e3cd48907cfa4d907d6c2d700e7557f200f60365643c836c6de9270000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e98563000000624944415448c7ed8f410ac0200c04937ed117d5bebbb18918a19083da965e76600f26b8438800000000f033dcf259073353b13c106dad43a28e2ac847aad17759b9c03bf69c425117bc217191ce6468392911fb1f5d233aec5914dc44dea522eb3a2f85da4773ef8ec2a00000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e9856300000063494441544889ed8f410e80200c0481ff7f411f23cf528b5b024d4c7a50d478d949f6d092ee841008218410f233b1e5b38e088ae68128b50ef13aaa60cb730de63220b08e75995c9109de9074117672e9f1a644f4defb8d606919149c44bd0b22edda0f1e015de75d6e740c0000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e98563000000644944415448c7ed8f410a80300c04133fdaffe81bf5274d4d4a531072a855f1b2037b6842770811000000007e865b3eeb60662a9607a2a57548d45105c7966af45d662ef08e7d4da1a80bde90b8486732b4bc2911fb1f5d233aec99145c44dea522ebca27a5a351136b2a09790000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e9856300000063494441544889ed8f410e80200c0481ffeba7e419fa148b5b024d4c7a50d478d949f6d092ee841008218410f233b1e5b38e088ae68128b50ef13aaa60cb730de63220b08e75995c9109de9074117672e9f1a644f4defb8d606919149c44bd0b22edda0f327a59f3575575c80000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e9856300000063494441544889ed8f4b0ac0200c05630fd70bb5e74a4fd8d8346ab02088fdd0cd1b781b03334804000000809f09799f39825ee2b907a1293ba4e5b0c0b6ce364aa151dcc1ba56c8036f444a8852a87f1c8c08579efa37a28fbe9b814ba8b87831df7e00948a48e2e3239abe0000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e985630000005549444154488963601805a360148c8251300a46c100034628a699192089ff504cae454c50fdffb09901b620534f048ca10a4905e86660580497a496254816119624d1927f58cc01fb062401c7645a806e11b2797f017e83388931b21be60000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e98563000000614944415448c7ed8f410a80301003135fedfebb3d9a786905a107ad8a971dc8696186059224499224f919b67de6200993f083d0d21c1a3948c2ae61d73000cf7cd01d2a310c1d8137223d0440978e37235289e137728d63938153a8bb545601d8761af45f407461ce080000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e9856300000062494441544889ed8f410ac0200c04933ec2ffbfae7d85d1443420e4d06a4b2f3bb08744b2834400000000f819eef9ac8399a958364447ef90a8a309e44a2d3a97058177e433852217bc211922ddc9adc78712b1fbe837a24bcfa260128d2e155957aee9fe5575bb97964b0000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e98563000000614944415448c7ed8f410a8030100313f7ff3f6b9f64e2a52d083d6855bcec404e0b332c9024499224c9cfb0ed33074998841f84b6e6d0cc4112760dbb860178e583ee5089696804de88f410005d3ade8c4825a6dfc835c61603a75077a98400ec0721f851addfc97aac0000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e9856300000065494441544889ed8f4b0e80200c055b4fc241f5d67569b556692061217ee2e64df23690cc0011000000007e86cf7de660bb59f73d080dee60d296c303f3947c74847a0987d85aa108bc11c9213bd34b975d117bbd149ef2376a87b19b812a945d32ba6fd9003acf4c6d48ae06150000000049454e44ae42608289504e470d0a1a0a0000000d4948445200000019000000190806000000c4e9856300000062494441544889ed8f4b0ac0200c05638fd15def7fa5f428c6a646830541ec876edec0db1898412200000000fc4c28fbcc11f492ce3d082dc5213d470eeceb9647169ac51daceb853cf046a486c842e3e36444b8f1b4bf117df4dd0c5c42d5c5e68b0779b041ed1629ac930000000049454e44ae426082\\\";\\n\\n    // taken from https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\\n    function slice(\\n        bytes memory _bytes,\\n        uint32 _start,\\n        uint32 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                tempBytes := mload(0x40)\\n                let lengthmod := and(_length, 31)\\n                let mc := add(\\n                    add(tempBytes, lengthmod),\\n                    mul(0x20, iszero(lengthmod))\\n                )\\n                let end := add(mc, _length)\\n\\n                for {\\n                    let cc := add(\\n                        add(\\n                            add(_bytes, lengthmod),\\n                            mul(0x20, iszero(lengthmod))\\n                        ),\\n                        _start\\n                    )\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n                mstore(tempBytes, _length)\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            default {\\n                tempBytes := mload(0x40)\\n                mstore(tempBytes, 0)\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"getLabel\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"ArmsImageData","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}