{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/pools/UZV1BasicRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma abicoder v2;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport {SharedDataTypes} from \\\"../libraries/SharedDataTypes.sol\\\";\\nimport {UZV1BasePool} from \\\"./UZV1BasePool.sol\\\";\\n\\n/**\\n * @title UnizenBasicRewardPool\\n * @author Unizen\\n * @notice Reward pool for ERC20 tokens\\n **/\\ncontract UZV1BasicRewardPool is UZV1BasePool {\\n    using SafeMath for uint256;\\n\\n    /* === STATE VARIABLES === */\\n\\n    function initialize(address _router, address _accessToken)\\n        public\\n        override\\n        initializer\\n    {\\n        UZV1BasePool.initialize(_router, _accessToken);\\n    }\\n\\n    /* === VIEW FUNCTIONS === */\\n    function canReceiveRewards() external pure override returns (bool) {\\n        return true;\\n    }\\n\\n    function getPoolType() external pure override returns (uint8) {\\n        return 0;\\n    }\\n\\n    function isPayable() public pure override returns (bool) {\\n        return false;\\n    }\\n\\n    function isNative() public pure override returns (bool) {\\n        return false;\\n    }\\n\\n    /* === MUTATING FUNCTIONS === */\\n    /// user functions\\n    function _safeClaim(address _user, uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        IERC20 _token = IERC20(_poolData.token);\\n        uint256 _balance = _token.balanceOf(address(this));\\n        uint256 _realAmount = (_amount <= _balance) ? _amount : _balance;\\n\\n        if (_realAmount == 0) return 0;\\n\\n        _poolStakerUser[_user].totalSavedRewards = _poolStakerUser[_user]\\n            .totalSavedRewards\\n            .add(_realAmount);\\n\\n        _totalRewardsLeft = _totalRewardsLeft.sub(_realAmount);\\n\\n        SafeERC20.safeTransfer(_token, _user, _realAmount);\\n\\n        emit RewardClaimed(_user, _realAmount);\\n        return _realAmount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SharedDataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nlibrary SharedDataTypes {\\n    // struct for returning snapshot values\\n    struct StakeSnapshot {\\n        // initial block number snapshoted\\n        uint256 startBlock;\\n        // end block number snapshoted\\n        uint256 endBlock;\\n        // staked amount at initial block\\n        uint256 stakedAmount;\\n        // total value locked at end block\\n        uint256 tokenTVL;\\n    }\\n\\n    // general staker user information\\n    struct StakerUser {\\n        // snapshotted stakes of the user per token (token => block.number => stakedAmount)\\n        mapping(address => mapping(uint256 => uint256)) stakedAmountSnapshots;\\n        // snapshotted stakes of the user per token keys (token => block.number[])\\n        mapping(address => uint256[]) stakedAmountKeys;\\n        // current stakes of the user per token\\n        mapping(address => uint256) stakedAmount;\\n        // total amount of holder tokens\\n        uint256 zcxhtStakedAmount;\\n    }\\n\\n    // information for stakeable tokens\\n    struct StakeableToken {\\n        // snapshotted total value locked (TVL) (block.number => totalValueLocked)\\n        mapping(uint256 => uint256) totalValueLockedSnapshots;\\n        // snapshotted total value locked (TVL) keys (block.number[])\\n        uint256[] totalValueLockedKeys;\\n        // current total value locked (TVL)\\n        uint256 totalValueLocked;\\n        uint256 weight;\\n        bool active;\\n    }\\n\\n    // POOL DATA\\n\\n    // data object for a user stake on a pool\\n    struct PoolStakerUser {\\n        // saved / withdrawn rewards of user\\n        uint256 totalSavedRewards;\\n        // total purchased allocation\\n        uint256 totalPurchasedAllocation;\\n        // native address, if necessary\\n        string nativeAddress;\\n        // date/time when user has claimed the reward\\n        uint256 claimedTime;\\n    }\\n\\n    // flat data type of stake for UI\\n    struct FlatPoolStakerUser {\\n        address[] tokens;\\n        uint256[] amounts;\\n        uint256 pendingRewards;\\n        uint256 totalPurchasedAllocation;\\n        uint256 totalSavedRewards;\\n        uint256 claimedTime;\\n        PoolState state;\\n        UserPoolState userState;\\n    }\\n\\n    // UI information for pool\\n    // data will be fetched via github token repository\\n    // blockchain / cAddress being the most relevant values\\n    // for fetching the correct token data\\n    struct PoolInfo {\\n        // token name\\n        string name;\\n        // name of blockchain, as written on github\\n        string blockchain;\\n        // tokens contract address on chain\\n        string cAddress;\\n    }\\n\\n    // possible states of the reward pool\\n    enum PoolState {\\n        pendingStaking,\\n        staking,\\n        pendingPayment,\\n        payment,\\n        pendingDistribution,\\n        distribution,\\n        retired\\n    }\\n\\n    // possible states of the reward pool's user\\n    enum UserPoolState {\\n        notclaimed,\\n        claimed,\\n        rejected,\\n        missed\\n    }\\n\\n    // input data for new reward pools\\n    struct PoolInputData {\\n        // total rewards to distribute\\n        uint256 totalRewards;\\n        // start block for distribution\\n        uint256 startBlock;\\n        // end block for distribution\\n        uint256 endBlock;\\n        // erc token address\\n        address token;\\n        // pool type\\n        uint8 poolType;\\n        // information about the reward token\\n        PoolInfo tokenInfo;\\n    }\\n\\n    struct PoolData {\\n        PoolState state;\\n        // pool information for the ui\\n        PoolInfo info;\\n        // start block of staking rewards\\n        uint256 startBlock;\\n        // end block of staking rewards\\n        uint256 endBlock;\\n        // start block of payment period\\n        uint256 paymentStartBlock;\\n        // end block of payment period\\n        uint256 paymentEndBlock;\\n        // start block of distribution period\\n        uint256 distributionStartBlock;\\n        // end block of distribution period\\n        uint256 distributionEndBlock;\\n        // total rewards for allocation\\n        uint256 totalRewards;\\n        // rewards per block\\n        uint256 rewardsPerBlock;\\n        // price of a single payment token\\n        uint256 rewardTokenPrice;\\n        // type of the pool\\n        uint8 poolType;\\n        // address of payment token\\n        address paymentToken;\\n        // address of reward token\\n        address token;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/pools/UZV1BasePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma abicoder v2;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport {IUZV1RewardPool} from \\\"../interfaces/pools/IUZV1RewardPool.sol\\\";\\nimport {IUZV1Router} from \\\"../interfaces/IUZV1Router.sol\\\";\\n\\nimport {SharedDataTypes} from \\\"../libraries/SharedDataTypes.sol\\\";\\nimport {UZV1ProAccess} from \\\"../membership/UZV1ProAccess.sol\\\";\\n\\n/**\\n * @title UnizenBasePool\\n * @author Unizen\\n * @notice Base Reward pool for Unizen. Serves as base for all existing pool types,\\n * to ease more pool types and reduce duplicated code.\\n * The base rewards calculation approach is based on the great work of MasterChef.sol by SushiSwap.\\n * https://github.com/sushiswap/sushiswap/blob/master/contracts/MasterChef.sol\\n **/\\nabstract contract UZV1BasePool is IUZV1RewardPool, UZV1ProAccess {\\n    using SafeMath for uint256;\\n    /* === STATE VARIABLES === */\\n    // router address\\n    IUZV1Router internal _router;\\n    address public override factory;\\n\\n    // data of user stakes and rewards\\n    mapping(address => SharedDataTypes.PoolStakerUser) internal _poolStakerUser;\\n\\n    // pool data\\n    SharedDataTypes.PoolData internal _poolData;\\n\\n    // total rewards left\\n    uint256 internal _totalRewardsLeft;\\n\\n    modifier onlyFactoryOrOwner() {\\n        require(\\n            _msgSender() == factory || _msgSender() == owner(),\\n            \\\"ONLY_FACTORY_OR_OWNER\\\"\\n        );\\n        _;\\n    }\\n\\n    function initialize(address _newRouter, address _accessToken)\\n        public\\n        virtual\\n        override\\n        initializer\\n    {\\n        UZV1ProAccess.initialize(_accessToken);\\n        _router = IUZV1Router(_newRouter);\\n        emit PoolInitiated();\\n    }\\n\\n    function setFactory(address _factory) external override onlyOwner {\\n        factory = _factory;\\n    }\\n\\n    function transferOwnership(address _newOwner)\\n        public\\n        override(IUZV1RewardPool, OwnableUpgradeable)\\n        onlyOwner\\n    {\\n        OwnableUpgradeable.transferOwnership(_newOwner);\\n    }\\n\\n    /* === VIEW FUNCTIONS === */\\n    function getUserPoolStake(address _user)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (SharedDataTypes.PoolStakerUser memory)\\n    {\\n        return _poolStakerUser[_user];\\n    }\\n\\n    function getPendingRewards(address _user)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256 reward)\\n    {\\n        return _getPendingRewards(_user);\\n    }\\n\\n    /**\\n     * @dev  Calculates the current pending reward amounts of a user\\n     * @param _user The user to check\\n     *\\n     * @return reward uint256 pending amount of user rewards\\n     **/\\n    function _getPendingRewards(address _user)\\n        internal\\n        view\\n        returns (uint256 reward)\\n    {\\n        uint256 _totalRewards = _getTotalRewards(_user);\\n        return\\n            _totalRewards > _poolStakerUser[_user].totalSavedRewards\\n                ? _totalRewards.sub(_poolStakerUser[_user].totalSavedRewards)\\n                : 0;\\n    }\\n\\n    /**\\n     * @dev  Calculates the current total reward amounts of a user\\n     * @param _user The user to check\\n     *\\n     * @return reward uint256 total amount of user rewards\\n     **/\\n    function _getTotalRewards(address _user)\\n        internal\\n        view\\n        returns (uint256 reward)\\n    {\\n        // no need to calculate, if rewards haven't started yet\\n        if (block.number < _poolData.startBlock) return 0;\\n\\n        // get all tokens\\n        (\\n            address[] memory _allTokens,\\n            ,\\n            uint256[] memory _weights,\\n            uint256 _combinedWeight\\n        ) = _router.getAllTokens(_getLastRewardBlock());\\n\\n        // loop through all active tokens and get users currently pending reward\\n        for (uint8 i = 0; i < _allTokens.length; i++) {\\n            // read user stakes for every token\\n            SharedDataTypes.StakeSnapshot[] memory _snapshots = _router\\n                .getUserStakesSnapshots(\\n                    _user,\\n                    _allTokens[i],\\n                    _poolData.startBlock,\\n                    _getLastRewardBlock()\\n                );\\n\\n            // calculates reward for every snapshoted block period\\n            for (uint256 bl = 0; bl < _snapshots.length; bl++) {\\n                // calculate pending rewards for token and add it to total pending reward amount\\n                reward = reward.add(\\n                    _calculateTotalRewardForToken(\\n                        _snapshots[bl].stakedAmount,\\n                        _weights[i],\\n                        _combinedWeight,\\n                        _snapshots[bl].tokenTVL,\\n                        _snapshots[bl].endBlock.sub(_snapshots[bl].startBlock)\\n                    )\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev  Returns whether the pool is currently active\\n     *\\n     * @return bool active status of pool\\n     **/\\n    function isPoolActive() public view virtual override returns (bool) {\\n        return (block.number >= _poolData.startBlock &&\\n            block.number <= _poolData.endBlock);\\n    }\\n\\n    /**\\n     * @dev  Returns whether the pool can be payed with a token\\n     *\\n     * @return bool status if pool is payable\\n     **/\\n    function isPayable() public view virtual override returns (bool);\\n\\n    /**\\n     * @dev  Returns whether the pool is a base or native pool\\n     *\\n     * @return bool True, if pool distributes native rewards\\n     **/\\n    function isNative() public view virtual override returns (bool);\\n\\n    /**\\n     * @dev  Returns all relevant information of an pool, excluding the stakes\\n     * of users.\\n     *\\n     * @return PoolData object\\n     **/\\n    function getPoolInfo()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (SharedDataTypes.PoolData memory)\\n    {\\n        SharedDataTypes.PoolData memory _data = _poolData;\\n        _data.state = getPoolState();\\n        return _data;\\n    }\\n\\n    /**\\n     * @dev  Returns the current state of the pool. Not all states\\n     * are available on every pool type. f.e. payment\\n     *\\n     * @return PoolState State of the current phase\\n     *  * pendingStaking\\n     *  * staking\\n     *  * retired\\n     **/\\n    function getPoolState()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (SharedDataTypes.PoolState)\\n    {\\n        // if current block is bigger than end block, return retired state\\n        if (block.number > _poolData.endBlock) {\\n            return SharedDataTypes.PoolState.retired;\\n        }\\n\\n        // if current block is within start and end block, return staking phase\\n        if (\\n            block.number >= _poolData.startBlock &&\\n            block.number <= _poolData.endBlock\\n        ) {\\n            return SharedDataTypes.PoolState.staking;\\n        }\\n\\n        // otherwise, pool is in pendingStaking state\\n        return SharedDataTypes.PoolState.pendingStaking;\\n    }\\n\\n    /**\\n     * @dev  Returns the current state of the pool user\\n     *\\n     * @return UserPoolState State of the user for the current phase\\n     *  * notclaimed\\n     *  * claimed\\n     *  * rejected\\n     *  * missed\\n     **/\\n    function getUserPoolState()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (SharedDataTypes.UserPoolState)\\n    {\\n        return SharedDataTypes.UserPoolState.notclaimed;\\n    }\\n\\n    /**\\n     * @dev  Returns the current type of the pool\\n     *\\n     * @return uint8 id of used pool type\\n     **/\\n    function getPoolType() external view virtual override returns (uint8);\\n\\n    /**\\n     * @dev Returns all relevant staking data for a user.\\n     *\\n     * @param _user address of user to check\\n     *\\n     * @return FlatPoolStakerUser data object, containing all information about the staking data\\n     *  * total tokens staked\\n     *  * total saved rewards (saved/withdrawn)\\n     *  * array with stakes for each active token\\n     **/\\n    function getUserInfo(address _user)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (SharedDataTypes.FlatPoolStakerUser memory)\\n    {\\n        SharedDataTypes.FlatPoolStakerUser memory _userData;\\n\\n        // use data from staking contract\\n        uint256[] memory _userStakes = _router.getUserStakes(\\n            _user,\\n            _getLastRewardBlock()\\n        );\\n\\n        // get all tokens\\n        (address[] memory _allTokens, , , ) = _router.getAllTokens();\\n\\n        _userData.totalSavedRewards = _poolStakerUser[_user].totalSavedRewards;\\n        _userData.pendingRewards = _getPendingRewards(_user);\\n\\n        _userData.amounts = new uint256[](_allTokens.length);\\n        _userData.tokens = new address[](_allTokens.length);\\n\\n        for (uint8 i = 0; i < _allTokens.length; i++) {\\n            _userData.tokens[i] = _allTokens[i];\\n            _userData.amounts[i] = _userStakes[i];\\n        }\\n        _userData.state = getPoolState();\\n        _userData.userState = getUserPoolState();\\n\\n        return _userData;\\n    }\\n\\n    /**\\n     * @dev  Returns whether the pool pays out any rewards. Usually true for onchain and\\n     * false of off-chain reward pools.\\n     *\\n     * @return bool True if the user can receive rewards\\n     **/\\n    function canReceiveRewards() external view virtual override returns (bool);\\n\\n    /**\\n     * @dev  Returns the rewards that are left on the pool. This can be different, based\\n     * on the type of pool. While basic reward pools will just return the reward token balance,\\n     * off-chain pools will just store virtual allocations for users and incubators have different\\n     * returns, based on their current pool state\\n     *\\n     * @return uint256 Amount of rewards left\\n     **/\\n    function getAmountOfOpenRewards()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _totalRewardsLeft;\\n    }\\n\\n    /**\\n     * @dev Returns the start block for staking\\n     * @return uint256 Staking start block number\\n     **/\\n    function getStartBlock() public view virtual override returns (uint256) {\\n        return _poolData.startBlock;\\n    }\\n\\n    /**\\n     * @dev Returns the end block for staking\\n     * @return uint256 Staking end block number\\n     **/\\n    function getEndBlock() public view virtual override returns (uint256) {\\n        return _poolData.endBlock;\\n    }\\n\\n    /**\\n     * @dev Returns start and end blocks for\\n     * all existing stages of the pool\\n     * @return uint256[] Array with all block numbers. Each phase always has startBlock, endBlock\\n     */\\n    function getTimeWindows()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory timeWindows = new uint256[](2);\\n        timeWindows[0] = getStartBlock();\\n        timeWindows[1] = getEndBlock();\\n        return timeWindows;\\n    }\\n\\n    /* === MUTATING FUNCTIONS === */\\n    /// user functions\\n    function pay(address _user, uint256 _amount)\\n        external\\n        virtual\\n        override\\n        onlyRouterOrProAccess(_msgSender())\\n        returns (uint256 refund)\\n    {\\n        revert();\\n    }\\n\\n    function claimRewards(address _user)\\n        external\\n        virtual\\n        override\\n        whenNotPaused\\n        onlyRouterOrProAccess(_msgSender())\\n    {\\n        _claimRewards(_user);\\n    }\\n\\n    function _claimRewards(address _user) internal virtual {\\n        uint256 _pendingRewards = _getPendingRewards(_user);\\n\\n        // check if there are pending rewards\\n        if (_pendingRewards > 0) {\\n            // claim rewards\\n            _safeClaim(_user, _pendingRewards);\\n        }\\n    }\\n\\n    /**\\n     * @dev  Allows the user to set a custom native address as receiver of rewards\\n     * as these rewards will be distributed off-chain.\\n     *\\n     * @param _user address of the user, we want to update\\n     * @param _receiver string users native address, where rewards will be sent to\\n     **/\\n    function setNativeAddress(address _user, string calldata _receiver)\\n        external\\n        override\\n        onlyRouterOrProAccess(_msgSender())\\n    {\\n        require(isNative() == true, \\\"NO_NATIVE_ADDR_REQ\\\");\\n        require(_user != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(bytes(_receiver).length > 0, \\\"EMPTY_RECEIVER\\\");\\n        // if sender is not router, sender and user have to\\n        // be identical\\n        if (_msgSender() != address(_router)) {\\n            require(_msgSender() == _user, \\\"FORBIDDEN\\\");\\n        }\\n\\n        _poolStakerUser[_user].nativeAddress = _receiver;\\n    }\\n\\n    /**\\n     * @dev Returns the users current address as string, or the user provided\\n     * native address, if the pool is a native reward pool\\n     *\\n     * @param user address of the user\\n     * @return receiverAddress string of the users receiving address\\n     */\\n    function getUserReceiverAddress(address user)\\n        external\\n        view\\n        override\\n        returns (string memory receiverAddress)\\n    {\\n        require(user != address(0), \\\"ZERO_ADDRESS\\\");\\n        receiverAddress = (isNative() == true)\\n            ? _poolStakerUser[user].nativeAddress\\n            : _addressToString(user);\\n    }\\n\\n    // helpers to convert address to string\\n    // https://ethereum.stackexchange.com/questions/72677/convert-address-to-string-after-solidity-0-5-x\\n    function _addressToString(address _addr)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes32 value = bytes32(uint256(_addr));\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(51);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < 20; i++) {\\n            str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n        return string(str);\\n    }\\n\\n    /**\\n     * @dev Calculates the last reward block\\n     * @return uint256 Last reward block (block.number or _poolData.endBlock)\\n     **/\\n    function _getLastRewardBlock() internal view virtual returns (uint256) {\\n        return\\n            (block.number <= _poolData.endBlock)\\n                ? block.number\\n                : _poolData.endBlock;\\n    }\\n\\n    /**\\n     * @dev  Safety function that takes care of claiming amounts that\\n     * exceed the reward that is left, in case there is a slight offset\\n     * due to rounding issues.\\n     *\\n     * @param _user The user we want to send rewards to\\n     * @param _amount The amount of rewards that should be claimed / sent\\n     **/\\n    function _safeClaim(address _user, uint256 _amount)\\n        internal\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 _realAmount = (_amount <= _totalRewardsLeft)\\n            ? _amount\\n            : _totalRewardsLeft;\\n        require(_realAmount > 0, \\\"ZERO_REWARD_AMOUNT\\\");\\n\\n        _poolStakerUser[_user].totalSavedRewards = _poolStakerUser[_user]\\n            .totalSavedRewards\\n            .add(_realAmount);\\n        _totalRewardsLeft = _totalRewardsLeft.sub(_realAmount);\\n\\n        emit RewardClaimed(_user, _realAmount);\\n        return _realAmount;\\n    }\\n\\n    function _rewardsForToken(\\n        uint256 _weight,\\n        uint256 _combinedWeight,\\n        uint256 _tvl,\\n        uint256 _blocks\\n    ) internal view returns (uint256) {\\n        uint256 _reward = _blocks\\n            .mul(_poolData.rewardsPerBlock)\\n            .mul(_weight)\\n            .div(_combinedWeight);\\n        if (_tvl > 0) {\\n            return _reward.mul(1e18).div(_tvl);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function _calculateTotalRewardForToken(\\n        uint256 _userStakes,\\n        uint256 _weight,\\n        uint256 _combinedWeight,\\n        uint256 _tvl,\\n        uint256 _blocks\\n    ) internal view returns (uint256 reward) {\\n        uint256 _rewardsPerShare;\\n\\n        // we only need to calculate this, if the user holds any\\n        // amount of this token\\n        if (_userStakes > 0) {\\n            // check if we need to calculate the rewards for more than the current block\\n            if (_tvl > 0) {\\n                // calculate the rewards per share\\n                _rewardsPerShare = _rewardsForToken(\\n                    _weight,\\n                    _combinedWeight,\\n                    _tvl,\\n                    _blocks\\n                );\\n                // check if there is any reward to calculate\\n                if (_rewardsPerShare > 0) {\\n                    // get the current reward for users stakes\\n                    reward = _userStakes.mul(_rewardsPerShare).div(1e18);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// control functions\\n    /**\\n     * @dev Withdrawal function to remove payments, leftover rewards or tokens sent by accident, to the owner\\n     *\\n     * @param _tokenAddress address of token to withdraw\\n     * @param _amount amount of tokens to withdraw, 0 for all\\n     */\\n    function withdrawTokens(address _tokenAddress, uint256 _amount)\\n        external\\n        override\\n        onlyFactoryOrOwner\\n    {\\n        require(_tokenAddress != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        IERC20 _token = IERC20(_tokenAddress);\\n        uint256 _balance = _token.balanceOf(address(this));\\n        require(_balance > 0, \\\"NO_TOKEN_BALANCE\\\");\\n\\n        uint256 _amountToWithdraw = (_amount > 0 && _amount <= _balance)\\n            ? _amount\\n            : _balance;\\n\\n        SafeERC20.safeTransfer(_token, owner(), _amountToWithdraw);\\n    }\\n\\n    /**\\n     * @dev Updates the start / endblock of the staking window. Also updated the rewards\\n     * per block based on the new timeframe. Use with caution: this function can result\\n     * in unexpected issues, if used during an active staking window.\\n     *\\n     * @param _startBlock start of the staking window\\n     * @param _endBlock end of the staking window\\n     */\\n    function setStakingWindow(uint256 _startBlock, uint256 _endBlock)\\n        public\\n        virtual\\n        override\\n        onlyFactoryOrOwner\\n    {\\n        require(_endBlock > _startBlock, \\\"INVALID_END_BLOCK\\\");\\n        require(_startBlock > 0, \\\"INVALID_START_BLOCK\\\");\\n        require(_endBlock > 0, \\\"INVALID_END_BLOCK\\\");\\n        // start block cant be in the past\\n        require(_startBlock >= block.number, \\\"INVALID_START_BLOCK\\\");\\n\\n        _poolData.startBlock = _startBlock;\\n        _poolData.endBlock = _endBlock;\\n\\n        // calculate rewards per block\\n        _poolData.rewardsPerBlock = _poolData.totalRewards.div(\\n            _poolData.endBlock.sub(_poolData.startBlock)\\n        );\\n    }\\n\\n    /**\\n     * @dev  Updates the whole pool meta data, based on the new pool input object\\n     * This function should be used with caution, as it could result in unexpected\\n     * issues on the calculations. Ideally only used during waiting state\\n     *\\n     * @param _inputData object containing all relevant pool information\\n     **/\\n    function setPoolData(SharedDataTypes.PoolInputData calldata _inputData)\\n        external\\n        virtual\\n        override\\n        onlyFactoryOrOwner\\n    {\\n        // set pool data\\n        _poolData.totalRewards = _inputData.totalRewards;\\n        _poolData.token = _inputData.token;\\n        _poolData.poolType = _inputData.poolType;\\n        _poolData.info = _inputData.tokenInfo;\\n\\n        _totalRewardsLeft = _inputData.totalRewards;\\n\\n        // set staking window and calculate rewards per block\\n        setStakingWindow(_inputData.startBlock, _inputData.endBlock);\\n\\n        emit PoolDataSet(\\n            _poolData.token,\\n            _poolData.totalRewards,\\n            _poolData.startBlock,\\n            _poolData.endBlock\\n        );\\n    }\\n\\n    /* === MODIFIERS === */\\n    modifier onlyRouter() {\\n        require(_msgSender() == address(_router), \\\"FORBIDDEN: ROUTER\\\");\\n        _;\\n    }\\n\\n    modifier onlyRouterOrProAccess(address _user) {\\n        if (_user != address(_router)) {\\n            _checkPro(_user);\\n        }\\n        _;\\n    }\\n\\n    /* === EVENTS === */\\n    event PoolInitiated();\\n\\n    event PoolDataSet(\\n        address rewardToken,\\n        uint256 totalReward,\\n        uint256 startBlock,\\n        uint256 endBlock\\n    );\\n\\n    event RewardClaimed(address indexed user, uint256 amount);\\n\\n    event AllocationPaid(\\n        address indexed user,\\n        address token,\\n        uint256 paidAmount,\\n        uint256 paidAllocation\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pools/IUZV1RewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma abicoder v2;\\n\\nimport {SharedDataTypes} from \\\"../../libraries/SharedDataTypes.sol\\\";\\n\\ninterface IUZV1RewardPool {\\n    /* mutating functions */\\n    function claimRewards(address _user) external;\\n\\n    function factory() external returns (address);\\n\\n    function setFactory(address) external;\\n\\n    function transferOwnership(address _newOwner) external;\\n\\n    function pay(address _user, uint256 _amount)\\n        external\\n        returns (uint256 refund);\\n\\n    /* view functions */\\n    // pool specific\\n    function canReceiveRewards() external view returns (bool);\\n\\n    function isPoolActive() external view returns (bool);\\n\\n    function isPayable() external view returns (bool);\\n\\n    function isNative() external view returns (bool);\\n\\n    function getPoolState() external view returns (SharedDataTypes.PoolState);\\n\\n    function getUserPoolStake(address _user)\\n        external\\n        view\\n        returns (SharedDataTypes.PoolStakerUser memory);\\n\\n    function getUserPoolState()\\n        external\\n        view\\n        returns (SharedDataTypes.UserPoolState);\\n\\n    function getPoolType() external view returns (uint8);\\n\\n    function getPoolInfo()\\n        external\\n        view\\n        returns (SharedDataTypes.PoolData memory);\\n\\n    function getAmountOfOpenRewards() external view returns (uint256);\\n\\n    function getStartBlock() external view returns (uint256);\\n\\n    function getEndBlock() external view returns (uint256);\\n\\n    function getTimeWindows() external view returns (uint256[] memory);\\n\\n    function getUserReceiverAddress(address user)\\n        external\\n        view\\n        returns (string memory receiverAddress);\\n\\n    // user specific\\n    function getPendingRewards(address _user)\\n        external\\n        view\\n        returns (uint256 reward);\\n\\n    function getUserInfo(address _user)\\n        external\\n        view\\n        returns (SharedDataTypes.FlatPoolStakerUser memory);\\n\\n    function setNativeAddress(address _user, string calldata _receiver)\\n        external;\\n\\n    function initialize(address _router, address _accessToken) external;\\n\\n    function setPoolData(SharedDataTypes.PoolInputData calldata _inputData)\\n        external;\\n\\n    function withdrawTokens(address _tokenAddress, uint256 _amount) external;\\n\\n    function setStakingWindow(uint256 _startBlock, uint256 _endBlock) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUZV1Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma abicoder v2;\\n\\nimport {IUZV1RewardPool} from \\\"./pools/IUZV1RewardPool.sol\\\";\\nimport {SharedDataTypes} from \\\"../libraries/SharedDataTypes.sol\\\";\\n\\ninterface IUZV1Router {\\n    /* view functions */\\n    function getAllUserRewards(address _user)\\n        external\\n        view\\n        returns (address[] memory _pools, uint256[] memory _rewards);\\n\\n    function getAllPools() external view returns (address[] memory);\\n\\n    function getAllTokens()\\n        external\\n        view\\n        returns (\\n            address[] memory tokenList,\\n            uint256[] memory tokenTVLs,\\n            uint256[] memory weights,\\n            uint256 combinedWeight\\n        );\\n\\n    function getAllTokens(uint256 _blocknumber)\\n        external\\n        view\\n        returns (\\n            address[] memory tokenList,\\n            uint256[] memory tokenTVLs,\\n            uint256[] memory weights,\\n            uint256 combinedWeight\\n        );\\n\\n    function getTVLs() external view returns (uint256[] memory _tokenTVLs);\\n\\n    function getTVLs(uint256 _blocknumber)\\n        external\\n        view\\n        returns (uint256[] memory _tokenTVLs);\\n\\n    function getUserTVLShare(address _user, uint256 _precision)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getStakingUserData(address _user)\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            uint256[] memory,\\n            uint256\\n        );\\n\\n    function getTokenWeights()\\n        external\\n        view\\n        returns (uint256[] memory weights, uint256 combinedWeight);\\n\\n    function getUserStakes(address _user)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getUserStakes(address _user, uint256 _blocknumber)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getUserStakesSnapshots(\\n        address _user,\\n        address _token,\\n        uint256 _startBlock,\\n        uint256 _endBlock\\n    )\\n        external\\n        view\\n        returns (SharedDataTypes.StakeSnapshot[] memory startBlocks);\\n\\n    /* pool view functions */\\n\\n    function canReceiveRewards(address _pool) external view returns (bool);\\n\\n    function isPoolNative(address _pool) external view returns (bool);\\n\\n    function getPoolState(address _pool)\\n        external\\n        view\\n        returns (SharedDataTypes.PoolState);\\n\\n    function getPoolType(address _pool) external view returns (uint8);\\n\\n    function getPoolInfo(address _pool)\\n        external\\n        view\\n        returns (SharedDataTypes.PoolData memory);\\n\\n    function getTimeWindows(address _pool)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getPoolUserReceiverAddress(address _pool, address _user)\\n        external\\n        view\\n        returns (string memory receiverAddress);\\n\\n    function getPoolUserInfo(address _pool, address _user)\\n        external\\n        view\\n        returns (SharedDataTypes.FlatPoolStakerUser memory);\\n\\n    function getTotalPriceForPurchaseableTokens(address _pool, address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /* mutating functions */\\n    function claimAllRewards() external;\\n\\n    function claimReward(address _pool) external returns (bool);\\n\\n    function claimRewardsFor(IUZV1RewardPool[] calldata pools) external;\\n\\n    function payRewardAndSetNativeAddressForPool(\\n        address _pool,\\n        uint256 _amount,\\n        string calldata _receiver\\n    ) external;\\n\\n    function payRewardPool(address _pool, uint256 _amount) external;\\n\\n    function createNewPool(\\n        uint256 totalRewards,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        address token,\\n        uint8 poolType,\\n        string memory name,\\n        string memory blockchain,\\n        string memory cAddress\\n    ) external returns (address);\\n\\n    function setNativeAddressForPool(address _pool, string calldata _receiver)\\n        external;\\n\\n    /* control functions */\\n    function setFactory(address _factory) external;\\n\\n    function setStaking(address _staking) external;\\n\\n    function emergencyWithdrawTokenFromRouter(address _token, uint256 _amount)\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/membership/UZV1ProAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma abicoder v2;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\n\\n/**\\n * @title UZProAccess\\n * @author Unizen\\n * @notice Simple abstract class to add easy checks\\n * for pro membership access token\\n **/\\nabstract contract UZV1ProAccess is\\n    Initializable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable\\n{\\n    // internal storage of the erc721 token\\n    IERC721 internal _membershipToken;\\n\\n    function initialize(address _token) public virtual initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        _setMembershipToken(_token);\\n    }\\n\\n    function membershipToken() public view returns (address) {\\n        return address(_membershipToken);\\n    }\\n\\n    /* === CONTROL FUNCTIONS === */\\n    /**\\n     * @dev pause smart contract\\n     */\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev unpause smart contract\\n     */\\n    function unPause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev  Allows the owner of the contract, to update\\n     * the used membership token\\n     * @param _newToken address of the new erc721 token\\n     **/\\n    function setMembershipToken(address _newToken) public onlyOwner {\\n        _setMembershipToken(_newToken);\\n    }\\n\\n    function _setMembershipToken(address _newToken) internal {\\n        if (_newToken == address(0) && address(_membershipToken) == address(0))\\n            return;\\n\\n        require(_newToken != address(_membershipToken), \\\"SAME_ADDRESS\\\");\\n        _membershipToken = IERC721(_newToken);\\n    }\\n\\n    /**\\n     * @dev  Internal function that checks if the users has any\\n     * membership tokens. Reverts, if none is found.\\n     * @param _user address of user to check\\n     **/\\n    function _checkPro(address _user) internal view {\\n        if (address(_membershipToken) != address(0)) {\\n            require(\\n                _membershipToken.balanceOf(_user) > 0,\\n                \\\"FORBIDDEN: PRO_MEMBER\\\"\\n            );\\n        }\\n    }\\n\\n    /* === MODIFIERS === */\\n    modifier onlyPro(address _user) {\\n        _checkPro(_user);\\n        _;\\n    }\\n\\n    /* === EVENTS === */\\n    event MembershipTokenUpdated(address _newTokenAddress);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidAllocation\",\"type\":\"uint256\"}],\"name\":\"AllocationPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTokenAddress\",\"type\":\"address\"}],\"name\":\"MembershipTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"PoolDataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"canReceiveRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmountOfOpenRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"enum SharedDataTypes.PoolState\",\"name\":\"state\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"blockchain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cAddress\",\"type\":\"string\"}],\"internalType\":\"struct SharedDataTypes.PoolInfo\",\"name\":\"info\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct SharedDataTypes.PoolData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolState\",\"outputs\":[{\"internalType\":\"enum SharedDataTypes.PoolState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeWindows\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPurchasedAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSavedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTime\",\"type\":\"uint256\"},{\"internalType\":\"enum SharedDataTypes.PoolState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"enum SharedDataTypes.UserPoolState\",\"name\":\"userState\",\"type\":\"uint8\"}],\"internalType\":\"struct SharedDataTypes.FlatPoolStakerUser\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPoolStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSavedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPurchasedAllocation\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"nativeAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"claimedTime\",\"type\":\"uint256\"}],\"internalType\":\"struct SharedDataTypes.PoolStakerUser\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserPoolState\",\"outputs\":[{\"internalType\":\"enum SharedDataTypes.UserPoolState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReceiverAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"receiverAddress\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accessToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPayable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPoolActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"membershipToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"setMembershipToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_receiver\",\"type\":\"string\"}],\"name\":\"setNativeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"blockchain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cAddress\",\"type\":\"string\"}],\"internalType\":\"struct SharedDataTypes.PoolInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct SharedDataTypes.PoolInputData\",\"name\":\"_inputData\",\"type\":\"tuple\"}],\"name\":\"setPoolData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"setStakingWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UZV1BasicRewardPool","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}