{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IUniswapV2Router is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ncontract ConvertPortal {\r\n  address public cotToken;\r\n  IUniswapV2Router public router;\r\n  address public weth;\r\n  address constant private ETH_TOKEN_ADDRESS = address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n\r\n  /**\r\n  * @dev contructor\r\n  *\r\n  * @param _cotToken               address of CoTrader erc20 contract\r\n  * @param _router                 address of Uniswap v2\r\n  */\r\n  constructor(\r\n    address _cotToken,\r\n    address _router\r\n    )\r\n    public\r\n  {\r\n    cotToken = _cotToken;\r\n    router = IUniswapV2Router(_router);\r\n    weth = router.WETH();\r\n  }\r\n\r\n  // check if token can be converted to COT in Uniswap v2\r\n  function isConvertibleToCOT(address _token, uint256 _amount)\r\n   public\r\n   view\r\n  returns(uint256 cotAmount)\r\n  {\r\n    address fromToken = _token == address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee)\r\n    ? weth\r\n    : _token;\r\n\r\n    address[] memory path = new address[](2);\r\n    path[0] = fromToken;\r\n    path[1] = cotToken;\r\n\r\n    try router.getAmountsOut(_amount, path) returns(uint256[] memory res){\r\n      cotAmount = res[1];\r\n    }catch{\r\n      cotAmount = 0;\r\n    }\r\n  }\r\n\r\n  // check if token can be converted to ETH in Uniswap v2\r\n  function isConvertibleToETH(address _token, uint256 _amount)\r\n   public\r\n   view\r\n  returns(uint256 ethAmount)\r\n  {\r\n    address[] memory path = new address[](2);\r\n    path[0] = _token;\r\n    path[1] = weth;\r\n    try router.getAmountsOut(_amount, path) returns(uint256[] memory res){\r\n      ethAmount = res[1];\r\n    }catch{\r\n      ethAmount = 0;\r\n    }\r\n  }\r\n\r\n  // Convert ETH to COT directly\r\n  function convertETHToCOT(uint256 _amount)\r\n   public\r\n   payable\r\n   returns (uint256 cotAmount)\r\n  {\r\n    require(msg.value == _amount, \"wrong ETH amount\");\r\n    address[] memory path = new address[](2);\r\n    path[0] = weth;\r\n    path[1] = cotToken;\r\n    uint256 deadline = now + 20 minutes;\r\n\r\n    uint256[] memory amounts = router.swapExactETHForTokens.value(_amount)(\r\n      1,\r\n      path,\r\n      msg.sender,\r\n      deadline\r\n    );\r\n\r\n    // send eth remains\r\n    uint256 remains = address(this).balance;\r\n    if(remains > 0)\r\n      payable(msg.sender).transfer(remains);\r\n\r\n    cotAmount = amounts[1];\r\n  }\r\n\r\n  // convert Token to COT directly\r\n  function convertTokenToCOT(address _token, uint256 _amount)\r\n   external\r\n   returns (uint256 cotAmount)\r\n  {\r\n    _transferFromSenderAndApproveTo(IERC20(_token), _amount, address(router));\r\n    address[] memory path = new address[](2);\r\n    path[0] = _token;\r\n    path[1] = cotToken;\r\n    uint256 deadline = now + 20 minutes;\r\n\r\n    uint256[] memory amounts = router.swapExactTokensForTokens(\r\n      _amount,\r\n      1,\r\n      path,\r\n      msg.sender,\r\n      deadline\r\n    );\r\n\r\n    // send token remains\r\n    uint256 remains = IERC20(_token).balanceOf(address(this));\r\n    if(remains > 0)\r\n      IERC20(_token).transfer(msg.sender, remains);\r\n\r\n    cotAmount = amounts[1];\r\n  }\r\n\r\n  // convert Token to COT via ETH\r\n  function convertTokenToCOTViaETHHelp(address _token, uint256 _amount)\r\n   external\r\n   returns (uint256 cotAmount)\r\n  {\r\n    _transferFromSenderAndApproveTo(IERC20(_token), _amount, address(router));\r\n    address[] memory path = new address[](3);\r\n    path[0] = _token;\r\n    path[1] = weth;\r\n    path[2] = cotToken;\r\n    uint256 deadline = now + 20 minutes;\r\n\r\n    uint256[] memory amounts = router.swapExactTokensForTokens(\r\n      _amount,\r\n      1,\r\n      path,\r\n      msg.sender,\r\n      deadline\r\n    );\r\n\r\n    // send token remains\r\n    uint256 remains = IERC20(_token).balanceOf(address(this));\r\n    if(remains > 0)\r\n      IERC20(_token).transfer(msg.sender, remains);\r\n\r\n    cotAmount = amounts[2];\r\n  }\r\n\r\n /**\r\n  * @dev Transfers tokens to this contract and approves them to another address\r\n  *\r\n  * @param _source          Token to transfer and approve\r\n  * @param _sourceAmount    The amount to transfer and approve (in _source token)\r\n  * @param _to              Address to approve to\r\n  */\r\n  function _transferFromSenderAndApproveTo(IERC20 _source, uint256 _sourceAmount, address _to) private {\r\n    require(_source.transferFrom(msg.sender, address(this), _sourceAmount));\r\n\r\n    _source.approve(_to, _sourceAmount);\r\n  }\r\n\r\n  // fallback payable function to receive ether from other contract addresses\r\n  fallback() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cotToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertETHToCOT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cotAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertTokenToCOT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cotAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertTokenToCOTViaETHHelp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cotAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cotToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"isConvertibleToCOT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cotAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"isConvertibleToETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ConvertPortal","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005c872500c00565505f3624ab435c222e558e9ff80000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fe00d2b93753f7d886bcb2578bdd852b808311cfb6928cad88f09665826f7de9"}]}