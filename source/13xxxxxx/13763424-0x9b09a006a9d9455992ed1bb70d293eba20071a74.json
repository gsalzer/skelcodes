{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.4 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.3.2\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/DAOStackInterfaces.sol\r\n\r\n\r\n\r\n\r\n\r\ninterface Avatar {\r\n\tfunction nativeToken() external view returns (address);\r\n\r\n\tfunction nativeReputation() external view returns (address);\r\n\r\n\tfunction owner() external view returns (address);\r\n}\r\n\r\ninterface Controller {\r\n\tevent RegisterScheme(address indexed _sender, address indexed _scheme);\r\n\tevent UnregisterScheme(address indexed _sender, address indexed _scheme);\r\n\r\n\tfunction genericCall(\r\n\t\taddress _contract,\r\n\t\tbytes calldata _data,\r\n\t\taddress _avatar,\r\n\t\tuint256 _value\r\n\t) external returns (bool, bytes memory);\r\n\r\n\tfunction avatar() external view returns (address);\r\n\r\n\tfunction unregisterScheme(address _scheme, address _avatar)\r\n\t\texternal\r\n\t\treturns (bool);\r\n\r\n\tfunction unregisterSelf(address _avatar) external returns (bool);\r\n\r\n\tfunction registerScheme(\r\n\t\taddress _scheme,\r\n\t\tbytes32 _paramsHash,\r\n\t\tbytes4 _permissions,\r\n\t\taddress _avatar\r\n\t) external returns (bool);\r\n\r\n\tfunction isSchemeRegistered(address _scheme, address _avatar)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bool);\r\n\r\n\tfunction getSchemePermissions(address _scheme, address _avatar)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bytes4);\r\n\r\n\tfunction addGlobalConstraint(\r\n\t\taddress _constraint,\r\n\t\tbytes32 _paramHash,\r\n\t\taddress _avatar\r\n\t) external returns (bool);\r\n\r\n\tfunction mintTokens(\r\n\t\tuint256 _amount,\r\n\t\taddress _beneficiary,\r\n\t\taddress _avatar\r\n\t) external returns (bool);\r\n\r\n\tfunction externalTokenTransfer(\r\n\t\taddress _token,\r\n\t\taddress _recipient,\r\n\t\tuint256 _amount,\r\n\t\taddress _avatar\r\n\t) external returns (bool);\r\n\r\n\tfunction sendEther(\r\n\t\tuint256 _amountInWei,\r\n\t\taddress payable _to,\r\n\t\taddress _avatar\r\n\t) external returns (bool);\r\n}\r\n\r\ninterface GlobalConstraintInterface {\r\n\tenum CallPhase {\r\n\t\tPre,\r\n\t\tPost,\r\n\t\tPreAndPost\r\n\t}\r\n\r\n\tfunction pre(\r\n\t\taddress _scheme,\r\n\t\tbytes32 _params,\r\n\t\tbytes32 _method\r\n\t) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev when return if this globalConstraints is pre, post or both.\r\n\t * @return CallPhase enum indication  Pre, Post or PreAndPost.\r\n\t */\r\n\tfunction when() external returns (CallPhase);\r\n}\r\n\r\ninterface ReputationInterface {\r\n\tfunction balanceOf(address _user) external view returns (uint256);\r\n\r\n\tfunction balanceOfAt(address _user, uint256 _blockNumber)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction getVotes(address _user) external view returns (uint256);\r\n\r\n\tfunction getVotesAt(\r\n\t\taddress _user,\r\n\t\tbool _global,\r\n\t\tuint256 _blockNumber\r\n\t) external view returns (uint256);\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction totalSupplyAt(uint256 _blockNumber)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction delegateOf(address _user) external returns (address);\r\n}\r\n\r\ninterface SchemeRegistrar {\r\n\tfunction proposeScheme(\r\n\t\tAvatar _avatar,\r\n\t\taddress _scheme,\r\n\t\tbytes32 _parametersHash,\r\n\t\tbytes4 _permissions,\r\n\t\tstring memory _descriptionHash\r\n\t) external returns (bytes32);\r\n\r\n\tevent NewSchemeProposal(\r\n\t\taddress indexed _avatar,\r\n\t\tbytes32 indexed _proposalId,\r\n\t\taddress indexed _intVoteInterface,\r\n\t\taddress _scheme,\r\n\t\tbytes32 _parametersHash,\r\n\t\tbytes4 _permissions,\r\n\t\tstring _descriptionHash\r\n\t);\r\n}\r\n\r\ninterface IntVoteInterface {\r\n\tevent NewProposal(\r\n\t\tbytes32 indexed _proposalId,\r\n\t\taddress indexed _organization,\r\n\t\tuint256 _numOfChoices,\r\n\t\taddress _proposer,\r\n\t\tbytes32 _paramsHash\r\n\t);\r\n\r\n\tevent ExecuteProposal(\r\n\t\tbytes32 indexed _proposalId,\r\n\t\taddress indexed _organization,\r\n\t\tuint256 _decision,\r\n\t\tuint256 _totalReputation\r\n\t);\r\n\r\n\tevent VoteProposal(\r\n\t\tbytes32 indexed _proposalId,\r\n\t\taddress indexed _organization,\r\n\t\taddress indexed _voter,\r\n\t\tuint256 _vote,\r\n\t\tuint256 _reputation\r\n\t);\r\n\r\n\tevent CancelProposal(\r\n\t\tbytes32 indexed _proposalId,\r\n\t\taddress indexed _organization\r\n\t);\r\n\tevent CancelVoting(\r\n\t\tbytes32 indexed _proposalId,\r\n\t\taddress indexed _organization,\r\n\t\taddress indexed _voter\r\n\t);\r\n\r\n\t/**\r\n\t * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\r\n\t * generated by calculating keccak256 of a incremented counter.\r\n\t * @param _numOfChoices number of voting choices\r\n\t * @param _proposalParameters defines the parameters of the voting machine used for this proposal\r\n\t * @param _proposer address\r\n\t * @param _organization address - if this address is zero the msg.sender will be used as the organization address.\r\n\t * @return proposal's id.\r\n\t */\r\n\tfunction propose(\r\n\t\tuint256 _numOfChoices,\r\n\t\tbytes32 _proposalParameters,\r\n\t\taddress _proposer,\r\n\t\taddress _organization\r\n\t) external returns (bytes32);\r\n\r\n\tfunction vote(\r\n\t\tbytes32 _proposalId,\r\n\t\tuint256 _vote,\r\n\t\tuint256 _rep,\r\n\t\taddress _voter\r\n\t) external returns (bool);\r\n\r\n\tfunction cancelVote(bytes32 _proposalId) external;\r\n\r\n\tfunction getNumberOfChoices(bytes32 _proposalId)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction isVotable(bytes32 _proposalId) external view returns (bool);\r\n\r\n\t/**\r\n\t * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\r\n\t * @param _proposalId the ID of the proposal\r\n\t * @param _choice the index in the\r\n\t * @return voted reputation for the given choice\r\n\t */\r\n\tfunction voteStatus(bytes32 _proposalId, uint256 _choice)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\t/**\r\n\t * @dev isAbstainAllow returns if the voting machine allow abstain (0)\r\n\t * @return bool true or false\r\n\t */\r\n\tfunction isAbstainAllow() external pure returns (bool);\r\n\r\n\t/**\r\n     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\r\n     * @return min - minimum number of choices\r\n               max - maximum number of choices\r\n     */\r\n\tfunction getAllowedRangeOfChoices()\r\n\t\texternal\r\n\t\tpure\r\n\t\treturns (uint256 min, uint256 max);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeaconUpgradeable {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function implementation() external view returns (address);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\r\n */\r\nlibrary StorageSlotUpgradeable {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This abstract contract provides getters and event emitting update functions for\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\r\n *\r\n * _Available since v4.1._\r\n *\r\n * @custom:oz-upgrades-unsafe-allow delegatecall\r\n */\r\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\r\n    function __ERC1967Upgrade_init() internal initializer {\r\n        __ERC1967Upgrade_init_unchained();\r\n    }\r\n\r\n    function __ERC1967Upgrade_init_unchained() internal initializer {\r\n    }\r\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\r\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _getImplementation() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 implementation slot.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCall(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _upgradeTo(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            _functionDelegateCall(newImplementation, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCallSecure(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        address oldImplementation = _getImplementation();\r\n\r\n        // Initial upgrade and setup call\r\n        _setImplementation(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            _functionDelegateCall(newImplementation, data);\r\n        }\r\n\r\n        // Perform rollback test if not already in progress\r\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\r\n        if (!rollbackTesting.value) {\r\n            // Trigger rollback using upgradeTo from the new implementation\r\n            rollbackTesting.value = true;\r\n            _functionDelegateCall(\r\n                newImplementation,\r\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\r\n            );\r\n            rollbackTesting.value = false;\r\n            // Check rollback was effective\r\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\r\n            // Finally reset to the new implementation and log the upgrade\r\n            _upgradeTo(newImplementation);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n     * @dev Emitted when the admin account has changed.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _getAdmin() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 admin slot.\r\n     */\r\n    function _setAdmin(address newAdmin) private {\r\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\r\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     */\r\n    function _changeAdmin(address newAdmin) internal {\r\n        emit AdminChanged(_getAdmin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n    /**\r\n     * @dev Emitted when the beacon is upgraded.\r\n     */\r\n    event BeaconUpgraded(address indexed beacon);\r\n\r\n    /**\r\n     * @dev Returns the current beacon.\r\n     */\r\n    function _getBeacon() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\r\n     */\r\n    function _setBeacon(address newBeacon) private {\r\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\r\n        require(\r\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\r\n            \"ERC1967: beacon implementation is not a contract\"\r\n        );\r\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\r\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\r\n     *\r\n     * Emits a {BeaconUpgraded} event.\r\n     */\r\n    function _upgradeBeaconToAndCall(\r\n        address newBeacon,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _setBeacon(newBeacon);\r\n        emit BeaconUpgraded(newBeacon);\r\n        if (data.length > 0 || forceCall) {\r\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\r\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol@v4.3.2\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\r\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\r\n *\r\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\r\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\r\n * `UUPSUpgradeable` with a custom implementation of upgrades.\r\n *\r\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\r\n    function __UUPSUpgradeable_init() internal initializer {\r\n        __ERC1967Upgrade_init_unchained();\r\n        __UUPSUpgradeable_init_unchained();\r\n    }\r\n\r\n    function __UUPSUpgradeable_init_unchained() internal initializer {\r\n    }\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\r\n    address private immutable __self = address(this);\r\n\r\n    /**\r\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\r\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\r\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\r\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\r\n     * fail.\r\n     */\r\n    modifier onlyProxy() {\r\n        require(address(this) != __self, \"Function must be called through delegatecall\");\r\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\r\n     * encoded in `data`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallSecure(newImplementation, data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\r\n     * {upgradeTo} and {upgradeToAndCall}.\r\n     *\r\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\r\n     *\r\n     * ```solidity\r\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\r\n     * ```\r\n     */\r\n    function _authorizeUpgrade(address newImplementation) internal virtual;\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/utils/DataTypes.sol\r\n\r\n\r\n\r\n\r\nlibrary DataTypes {\r\n\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\r\n\tstruct ReserveData {\r\n\t\t//stores the reserve configuration\r\n\t\tReserveConfigurationMap configuration;\r\n\t\t//the liquidity index. Expressed in ray\r\n\t\tuint128 liquidityIndex;\r\n\t\t//variable borrow index. Expressed in ray\r\n\t\tuint128 variableBorrowIndex;\r\n\t\t//the current supply rate. Expressed in ray\r\n\t\tuint128 currentLiquidityRate;\r\n\t\t//the current variable borrow rate. Expressed in ray\r\n\t\tuint128 currentVariableBorrowRate;\r\n\t\t//the current stable borrow rate. Expressed in ray\r\n\t\tuint128 currentStableBorrowRate;\r\n\t\tuint40 lastUpdateTimestamp;\r\n\t\t//tokens addresses\r\n\t\taddress aTokenAddress;\r\n\t\taddress stableDebtTokenAddress;\r\n\t\taddress variableDebtTokenAddress;\r\n\t\t//address of the interest rate strategy\r\n\t\taddress interestRateStrategyAddress;\r\n\t\t//the id of the reserve. Represents the position in the list of the active reserves\r\n\t\tuint8 id;\r\n\t}\r\n\r\n\tstruct ReserveConfigurationMap {\r\n\t\t//bit 0-15: LTV\r\n\t\t//bit 16-31: Liq. threshold\r\n\t\t//bit 32-47: Liq. bonus\r\n\t\t//bit 48-55: Decimals\r\n\t\t//bit 56: Reserve is active\r\n\t\t//bit 57: reserve is frozen\r\n\t\t//bit 58: borrowing is enabled\r\n\t\t//bit 59: stable rate borrowing enabled\r\n\t\t//bit 60-63: reserved\r\n\t\t//bit 64-79: reserve factor\r\n\t\tuint256 data;\r\n\t}\r\n\tenum InterestRateMode { NONE, STABLE, VARIABLE }\r\n}\r\n\r\n\r\n// File contracts/Interfaces.sol\r\n\r\n\r\n\r\n\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ERC20 {\r\n\tfunction balanceOf(address addr) external view returns (uint256);\r\n\r\n\tfunction transfer(address to, uint256 amount) external returns (bool);\r\n\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\tfunction decimals() external view returns (uint8);\r\n\r\n\tfunction mint(address to, uint256 mintAmount) external returns (uint256);\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction allowance(address owner, address spender)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\tfunction name() external view returns (string memory);\r\n\r\n\tfunction symbol() external view returns (string memory);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 amount);\r\n\tevent Transfer(\r\n\t\taddress indexed from,\r\n\t\taddress indexed to,\r\n\t\tuint256 amount,\r\n\t\tbytes data\r\n\t);\r\n}\r\n\r\ninterface cERC20 is ERC20 {\r\n\tfunction mint(uint256 mintAmount) external returns (uint256);\r\n\r\n\tfunction redeemUnderlying(uint256 mintAmount) external returns (uint256);\r\n\r\n\tfunction redeem(uint256 mintAmount) external returns (uint256);\r\n\r\n\tfunction exchangeRateCurrent() external returns (uint256);\r\n\r\n\tfunction exchangeRateStored() external view returns (uint256);\r\n\r\n\tfunction underlying() external returns (address);\r\n}\r\n\r\ninterface IGoodDollar is ERC20 {\r\n\tfunction getFees(uint256 value) external view returns (uint256, bool);\r\n\r\n\tfunction burn(uint256 amount) external;\r\n\r\n\tfunction burnFrom(address account, uint256 amount) external;\r\n\r\n\tfunction renounceMinter() external;\r\n\r\n\tfunction addMinter(address minter) external;\r\n\r\n\tfunction isMinter(address minter) external view returns (bool);\r\n\r\n\tfunction transferAndCall(\r\n\t\taddress to,\r\n\t\tuint256 value,\r\n\t\tbytes calldata data\r\n\t) external returns (bool);\r\n\r\n\tfunction formula() external view returns (address);\r\n}\r\n\r\ninterface IERC2917 is ERC20 {\r\n\t/// @dev This emit when interests amount per block is changed by the owner of the contract.\r\n\t/// It emits with the old interests amount and the new interests amount.\r\n\tevent InterestRatePerBlockChanged(uint256 oldValue, uint256 newValue);\r\n\r\n\t/// @dev This emit when a users' productivity has changed\r\n\t/// It emits with the user's address and the the value after the change.\r\n\tevent ProductivityIncreased(address indexed user, uint256 value);\r\n\r\n\t/// @dev This emit when a users' productivity has changed\r\n\t/// It emits with the user's address and the the value after the change.\r\n\tevent ProductivityDecreased(address indexed user, uint256 value);\r\n\r\n\t/// @dev Return the current contract's interests rate per block.\r\n\t/// @return The amount of interests currently producing per each block.\r\n\tfunction interestsPerBlock() external view returns (uint256);\r\n\r\n\t/// @notice Change the current contract's interests rate.\r\n\t/// @dev Note the best practice will be restrict the gross product provider's contract address to call this.\r\n\t/// @return The true/fase to notice that the value has successfully changed or not, when it succeed, it will emite the InterestRatePerBlockChanged event.\r\n\tfunction changeInterestRatePerBlock(uint256 value) external returns (bool);\r\n\r\n\t/// @notice It will get the productivity of given user.\r\n\t/// @dev it will return 0 if user has no productivity proved in the contract.\r\n\t/// @return user's productivity and overall productivity.\r\n\tfunction getProductivity(address user)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256, uint256);\r\n\r\n\t/// @notice increase a user's productivity.\r\n\t/// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\r\n\t/// @return true to confirm that the productivity added success.\r\n\tfunction increaseProductivity(address user, uint256 value)\r\n\t\texternal\r\n\t\treturns (bool);\r\n\r\n\t/// @notice decrease a user's productivity.\r\n\t/// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\r\n\t/// @return true to confirm that the productivity removed success.\r\n\tfunction decreaseProductivity(address user, uint256 value)\r\n\t\texternal\r\n\t\treturns (bool);\r\n\r\n\t/// @notice take() will return the interests that callee will get at current block height.\r\n\t/// @dev it will always calculated by block.number, so it will change when block height changes.\r\n\t/// @return amount of the interests that user are able to mint() at current block height.\r\n\tfunction take() external view returns (uint256);\r\n\r\n\t/// @notice similar to take(), but with the block height joined to calculate return.\r\n\t/// @dev for instance, it returns (_amount, _block), which means at block height _block, the callee has accumulated _amount of interests.\r\n\t/// @return amount of interests and the block height.\r\n\tfunction takeWithBlock() external view returns (uint256, uint256);\r\n\r\n\t/// @notice mint the avaiable interests to callee.\r\n\t/// @dev once it mint, the amount of interests will transfer to callee's address.\r\n\t/// @return the amount of interests minted.\r\n\tfunction mint() external returns (uint256);\r\n}\r\n\r\ninterface Staking {\r\n\tstruct Staker {\r\n\t\t// The staked DAI amount\r\n\t\tuint256 stakedDAI;\r\n\t\t// The latest block number which the\r\n\t\t// staker has staked tokens\r\n\t\tuint256 lastStake;\r\n\t}\r\n\r\n\tfunction stakeDAI(uint256 amount) external;\r\n\r\n\tfunction withdrawStake() external;\r\n\r\n\tfunction stakers(address staker) external view returns (Staker memory);\r\n}\r\n\r\ninterface Uniswap {\r\n\tfunction swapExactETHForTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable returns (uint256[] memory amounts);\r\n\r\n\tfunction swapExactTokensForETH(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction swapExactTokensForTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction WETH() external pure returns (address);\r\n\r\n\tfunction factory() external pure returns (address);\r\n\r\n\tfunction quote(\r\n\t\tuint256 amountA,\r\n\t\tuint256 reserveA,\r\n\t\tuint256 reserveB\r\n\t) external pure returns (uint256 amountB);\r\n\r\n\tfunction getAmountIn(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 reserveIn,\r\n\t\tuint256 reserveOut\r\n\t) external pure returns (uint256 amountIn);\r\n\r\n\tfunction getAmountOut(\r\n\t\tuint256 amountI,\r\n\t\tuint256 reserveIn,\r\n\t\tuint256 reserveOut\r\n\t) external pure returns (uint256 amountOut);\r\n\r\n\tfunction getAmountsOut(uint256 amountIn, address[] memory path)\r\n\t\texternal\r\n\t\tpure\r\n\t\treturns (uint256[] memory amounts);\r\n}\r\n\r\ninterface UniswapFactory {\r\n\tfunction getPair(address tokenA, address tokenB)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (address);\r\n}\r\n\r\ninterface UniswapPair {\r\n\tfunction getReserves()\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint112 reserve0,\r\n\t\t\tuint112 reserve1,\r\n\t\t\tuint32 blockTimestampLast\r\n\t\t);\r\n\r\n\tfunction kLast() external view returns (uint256);\r\n\r\n\tfunction token0() external view returns (address);\r\n\r\n\tfunction token1() external view returns (address);\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address owner) external view returns (uint256);\r\n}\r\n\r\ninterface Reserve {\r\n\tfunction buy(\r\n\t\taddress _buyWith,\r\n\t\tuint256 _tokenAmount,\r\n\t\tuint256 _minReturn\r\n\t) external returns (uint256);\r\n}\r\n\r\ninterface IIdentity {\r\n\tfunction isWhitelisted(address user) external view returns (bool);\r\n\r\n\tfunction addWhitelistedWithDID(address account, string memory did) external;\r\n\r\n\tfunction removeWhitelisted(address account) external;\r\n\r\n\tfunction addIdentityAdmin(address account) external returns (bool);\r\n\r\n\tfunction setAvatar(address _avatar) external;\r\n\r\n\tfunction isIdentityAdmin(address account) external view returns (bool);\r\n\r\n\tfunction owner() external view returns (address);\r\n\r\n\tevent WhitelistedAdded(address user);\r\n}\r\n\r\ninterface IUBIScheme {\r\n\tfunction currentDay() external view returns (uint256);\r\n\r\n\tfunction periodStart() external view returns (uint256);\r\n\r\n\tfunction hasClaimed(address claimer) external view returns (bool);\r\n}\r\n\r\ninterface IFirstClaimPool {\r\n\tfunction awardUser(address user) external returns (uint256);\r\n\r\n\tfunction claimAmount() external view returns (uint256);\r\n}\r\n\r\ninterface ProxyAdmin {\r\n\tfunction getProxyImplementation(address proxy)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (address);\r\n\r\n\tfunction getProxyAdmin(address proxy) external view returns (address);\r\n\r\n\tfunction upgrade(address proxy, address implementation) external;\r\n\r\n\tfunction owner() external view returns (address);\r\n\r\n\tfunction transferOwnership(address newOwner) external;\r\n}\r\n\r\n/**\r\n * @dev Interface for chainlink oracles to obtain price datas\r\n */\r\ninterface AggregatorV3Interface {\r\n\tfunction decimals() external view returns (uint8);\r\n\r\n\tfunction description() external view returns (string memory);\r\n\r\n\tfunction version() external view returns (uint256);\r\n\r\n\t// getRoundData and latestRoundData should both raise \"No data present\"\r\n\t// if they do not have data to report, instead of returning unset values\r\n\t// which could be misinterpreted as actual reported values.\r\n\tfunction getRoundData(uint80 _roundId)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint80 roundId,\r\n\t\t\tint256 answer,\r\n\t\t\tuint256 startedAt,\r\n\t\t\tuint256 updatedAt,\r\n\t\t\tuint80 answeredInRound\r\n\t\t);\r\n\r\n\tfunction latestAnswer() external view returns (int256);\r\n}\r\n\r\n/**\r\n\t@dev interface for AAVE lending Pool\r\n */\r\ninterface ILendingPool {\r\n\t/**\r\n\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\r\n\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\r\n\t * @param asset The address of the underlying asset to deposit\r\n\t * @param amount The amount to be deposited\r\n\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n\t *   is a different wallet\r\n\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n\t *   0 if the action is executed directly by the user, without any middle-man\r\n\t **/\r\n\tfunction deposit(\r\n\t\taddress asset,\r\n\t\tuint256 amount,\r\n\t\taddress onBehalfOf,\r\n\t\tuint16 referralCode\r\n\t) external;\r\n\r\n\t/**\r\n\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\r\n\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\r\n\t * @param asset The address of the underlying asset to withdraw\r\n\t * @param amount The underlying amount to be withdrawn\r\n\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\r\n\t * @param to Address that will receive the underlying, same as msg.sender if the user\r\n\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\r\n\t *   different wallet\r\n\t * @return The final amount withdrawn\r\n\t **/\r\n\tfunction withdraw(\r\n\t\taddress asset,\r\n\t\tuint256 amount,\r\n\t\taddress to\r\n\t) external returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the state and configuration of the reserve\r\n\t * @param asset The address of the underlying asset of the reserve\r\n\t * @return The state of the reserve\r\n\t **/\r\n\tfunction getReserveData(address asset)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (DataTypes.ReserveData memory);\r\n}\r\n\r\ninterface IDonationStaking {\r\n\tfunction stakeDonations() external payable;\r\n}\r\n\r\ninterface INameService {\r\n\tfunction getAddress(string memory _name) external view returns (address);\r\n}\r\n\r\ninterface IAaveIncentivesController {\r\n\t/**\r\n\t * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\r\n\t * @param amount Amount of rewards to claim\r\n\t * @param to Address that will be receiving the rewards\r\n\t * @return Rewards claimed\r\n\t **/\r\n\tfunction claimRewards(\r\n\t\taddress[] calldata assets,\r\n\t\tuint256 amount,\r\n\t\taddress to\r\n\t) external returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the total of rewards of an user, already accrued + not yet accrued\r\n\t * @param user The address of the user\r\n\t * @return The rewards\r\n\t **/\r\n\tfunction getRewardsBalance(address[] calldata assets, address user)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n}\r\n\r\ninterface IGoodStaking {\r\n\tfunction collectUBIInterest(address recipient)\r\n\t\texternal\r\n\t\treturns (\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256\r\n\t\t);\r\n\r\n\tfunction iToken() external view returns (address);\r\n\r\n\tfunction currentGains(\r\n\t\tbool _returnTokenBalanceInUSD,\r\n\t\tbool _returnTokenGainsInUSD\r\n\t)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256\r\n\t\t);\r\n\r\n\tfunction getRewardEarned(address user) external view returns (uint256);\r\n\r\n\tfunction getGasCostForInterestTransfer() external view returns (uint256);\r\n\r\n\tfunction rewardsMinted(\r\n\t\taddress user,\r\n\t\tuint256 rewardsPerBlock,\r\n\t\tuint256 blockStart,\r\n\t\tuint256 blockEnd\r\n\t) external returns (uint256);\r\n}\r\n\r\ninterface IHasRouter {\r\n\tfunction getRouter() external view returns (Uniswap);\r\n}\r\n\r\ninterface IAdminWallet {\r\n\tfunction addAdmins(address payable[] memory _admins) external;\r\n\r\n\tfunction removeAdmins(address[] memory _admins) external;\r\n\r\n\tfunction owner() external view returns (address);\r\n\r\n\tfunction transferOwnership(address _owner) external;\r\n}\r\n\r\n\r\n// File contracts/utils/DAOContract.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n@title Simple contract that keeps DAO contracts registery\r\n*/\r\n\r\ncontract DAOContract {\r\n\tController public dao;\r\n\r\n\taddress public avatar;\r\n\r\n\tINameService public nameService;\r\n\r\n\tfunction _onlyAvatar() internal view {\r\n\t\trequire(\r\n\t\t\taddress(dao.avatar()) == msg.sender,\r\n\t\t\t\"only avatar can call this method\"\r\n\t\t);\r\n\t}\r\n\r\n\tfunction setDAO(INameService _ns) internal {\r\n\t\tnameService = _ns;\r\n\t\tupdateAvatar();\r\n\t}\r\n\r\n\tfunction updateAvatar() public {\r\n\t\tdao = Controller(nameService.getAddress(\"CONTROLLER\"));\r\n\t\tavatar = dao.avatar();\r\n\t}\r\n\r\n\tfunction nativeToken() public view returns (IGoodDollar) {\r\n\t\treturn IGoodDollar(nameService.getAddress(\"GOODDOLLAR\"));\r\n\t}\r\n\r\n\tuint256[50] private gap;\r\n}\r\n\r\n\r\n// File contracts/utils/DAOUpgradeableContract.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n@title Simple contract that adds upgradability to DAOContract\r\n*/\r\n\r\ncontract DAOUpgradeableContract is Initializable, UUPSUpgradeable, DAOContract {\r\n\tfunction _authorizeUpgrade(address) internal virtual override {\r\n\t\t_onlyAvatar();\r\n\t}\r\n}\r\n\r\n\r\n// File contracts/governance/CompoundVotingMachine.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * based on https://github.com/compound-finance/compound-protocol/blob/b9b14038612d846b83f8a009a82c38974ff2dcfe/contracts/Governance/GovernorAlpha.sol\r\n * CompoundVotingMachine based on Compound's governance with a few differences\r\n * 1. no timelock. once vote has passed it stays open for 'queuePeriod' (2 days by default).\r\n * if vote decision has changed, execution will be delayed so at least 24 hours are left to vote.\r\n * 2. execution modified to support DAOStack Avatar/Controller\r\n */\r\ncontract CompoundVotingMachine is ContextUpgradeable, DAOUpgradeableContract {\r\n\t/// @notice The name of this contract\r\n\tstring public constant name = \"GoodDAO Voting Machine\";\r\n\r\n\t/// @notice timestamp when foundation releases guardian veto rights\r\n\tuint64 public foundationGuardianRelease;\r\n\r\n\t/// @notice the number of blocks a proposal is open for voting (before passing quorum)\r\n\tuint256 public votingPeriod;\r\n\r\n\t/// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\r\n\tuint256 public quoromPercentage;\r\n\r\n\tfunction quorumVotes() public view returns (uint256) {\r\n\t\treturn (rep.totalSupply() * quoromPercentage) / 1000000;\r\n\t} //3%\r\n\r\n\t/// @notice The number of votes required in order for a voter to become a proposer\r\n\tuint256 public proposalPercentage;\r\n\r\n\tfunction proposalThreshold(uint256 blockNumber)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn (rep.totalSupplyAt(blockNumber) * proposalPercentage) / 1000000; //0.25%\r\n\t}\r\n\r\n\t/// @notice The maximum number of actions that can be included in a proposal\r\n\tuint256 public proposalMaxOperations; //10\r\n\r\n\t/// @notice The delay in blocks before voting on a proposal may take place, once proposed\r\n\tuint256 public votingDelay; //1 block\r\n\r\n\t/// @notice The duration of time after proposal passed thershold before it can be executed\r\n\tuint256 public queuePeriod; // 2 days\r\n\r\n\t/// @notice The duration of time after proposal passed with absolute majority before it can be executed\r\n\tuint256 public fastQueuePeriod; //1 days/8 = 3hours\r\n\r\n\t/// @notice During the queue period if vote decision has changed, we extend queue period time duration so\r\n\t/// that at least gameChangerPeriod is left\r\n\tuint256 public gameChangerPeriod; //1 day\r\n\r\n\t/// @notice the duration of time a succeeded proposal has to be executed on the blockchain\r\n\tuint256 public gracePeriod; // 3days\r\n\r\n\t/// @notice The address of the DAO reputation token\r\n\tReputationInterface public rep;\r\n\r\n\t/// @notice The address of the Governor Guardian\r\n\taddress public guardian;\r\n\r\n\t/// @notice The total number of proposals\r\n\tuint256 public proposalCount;\r\n\r\n\tstruct Proposal {\r\n\t\t// Unique id for looking up a proposal\r\n\t\tuint256 id;\r\n\t\t// Creator of the proposal\r\n\t\taddress proposer;\r\n\t\t// The timestamp that the proposal will be available for execution, set once the vote succeeds\r\n\t\tuint256 eta;\r\n\t\t// the ordered list of target addresses for calls to be made\r\n\t\taddress[] targets;\r\n\t\t// The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n\t\tuint256[] values;\r\n\t\t// The ordered list of function signatures to be called\r\n\t\tstring[] signatures;\r\n\t\t// The ordered list of calldata to be passed to each call\r\n\t\tbytes[] calldatas;\r\n\t\t// The block at which voting begins: holders must delegate their votes prior to this block\r\n\t\tuint256 startBlock;\r\n\t\t// The block at which voting ends: votes must be cast prior to this block\r\n\t\tuint256 endBlock;\r\n\t\t// Current number of votes in favor of this proposal\r\n\t\tuint256 forVotes;\r\n\t\t// Current number of votes in opposition to this proposal\r\n\t\tuint256 againstVotes;\r\n\t\t// Flag marking whether the proposal has been canceled\r\n\t\tbool canceled;\r\n\t\t// Flag marking whether the proposal has been executed\r\n\t\tbool executed;\r\n\t\t// Receipts of ballots for the entire set of voters\r\n\t\tmapping(address => Receipt) receipts;\r\n\t\t// quorom required at time of proposing\r\n\t\tuint256 quoromRequired;\r\n\t\t// support proposal voting bridge\r\n\t\tuint256 forBlockchain;\r\n\t}\r\n\r\n\t/// @notice Ballot receipt record for a voter\r\n\tstruct Receipt {\r\n\t\t//Whether or not a vote has been cast\r\n\t\tbool hasVoted;\r\n\t\t// Whether or not the voter supports the proposal\r\n\t\tbool support;\r\n\t\t// The number of votes the voter had, which were cast\r\n\t\tuint256 votes;\r\n\t}\r\n\r\n\t/// @notice Possible states that a proposal may be in\r\n\tenum ProposalState {\r\n\t\tPending,\r\n\t\tActive,\r\n\t\tActiveTimelock, // passed quorom, time lock of 2 days activated, still open for voting\r\n\t\tCanceled,\r\n\t\tDefeated,\r\n\t\tSucceeded,\r\n\t\t// Queued, we dont have queued status, we use game changer period instead\r\n\t\tExpired,\r\n\t\tExecuted\r\n\t}\r\n\r\n\t/// @notice The official record of all proposals ever proposed\r\n\tmapping(uint256 => Proposal) public proposals;\r\n\r\n\t/// @notice The latest proposal for each proposer\r\n\tmapping(address => uint256) public latestProposalIds;\r\n\r\n\t/// @notice The EIP-712 typehash for the contract's domain\r\n\tbytes32 public constant DOMAIN_TYPEHASH =\r\n\t\tkeccak256(\r\n\t\t\t\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"\r\n\t\t);\r\n\r\n\t/// @notice The EIP-712 typehash for the ballot struct used by the contract\r\n\tbytes32 public constant BALLOT_TYPEHASH =\r\n\t\tkeccak256(\"Ballot(uint256 proposalId,bool support)\");\r\n\r\n\t/// @notice An event emitted when a new proposal is created\r\n\tevent ProposalCreated(\r\n\t\tuint256 id,\r\n\t\taddress proposer,\r\n\t\taddress[] targets,\r\n\t\tuint256[] values,\r\n\t\tstring[] signatures,\r\n\t\tbytes[] calldatas,\r\n\t\tuint256 startBlock,\r\n\t\tuint256 endBlock,\r\n\t\tstring description\r\n\t);\r\n\r\n\t/// @notice An event emitted when using blockchain proposal bridge\r\n\tevent ProposalSucceeded(\r\n\t\tuint256 id,\r\n\t\taddress proposer,\r\n\t\taddress[] targets,\r\n\t\tuint256[] values,\r\n\t\tstring[] signatures,\r\n\t\tbytes[] calldatas,\r\n\t\tuint256 startBlock,\r\n\t\tuint256 endBlock,\r\n\t\tuint256 forBlockchain,\r\n\t\tuint256 eta,\r\n\t\tuint256 forVotes,\r\n\t\tuint256 againstVotes\r\n\t);\r\n\r\n\t/// @notice event when proposal made for a different blockchain\r\n\tevent ProposalBridge(uint256 id, uint256 indexed forBlockchain);\r\n\r\n\t/// @notice An event emitted when a vote has been cast on a proposal\r\n\tevent VoteCast(\r\n\t\taddress voter,\r\n\t\tuint256 proposalId,\r\n\t\tbool support,\r\n\t\tuint256 votes\r\n\t);\r\n\r\n\t/// @notice An event emitted when a proposal has been canceled\r\n\tevent ProposalCanceled(uint256 id);\r\n\r\n\t/// @notice An event emitted when a proposal has been queued\r\n\tevent ProposalQueued(uint256 id, uint256 eta);\r\n\r\n\t/// @notice An event emitted when a proposal has been executed\r\n\tevent ProposalExecuted(uint256 id);\r\n\r\n\t/// @notice An event emitted when a proposal call has been executed\r\n\tevent ProposalExecutionResult(\r\n\t\tuint256 id,\r\n\t\tuint256 index,\r\n\t\tbool ok,\r\n\t\tbytes result\r\n\t);\r\n\r\n\tevent GuardianSet(address newGuardian);\r\n\r\n\tevent ParametersSet(uint256[9] params);\r\n\r\n\tfunction initialize(\r\n\t\tINameService ns_, // the DAO avatar\r\n\t\tuint256 votingPeriodBlocks_, //number of blocks a proposal is open for voting before expiring\r\n\t\taddress guardian_\r\n\t) public initializer {\r\n\t\tfoundationGuardianRelease = 1672531200; //01/01/2023\r\n\t\tsetDAO(ns_);\r\n\t\trep = ReputationInterface(ns_.getAddress(\"REPUTATION\"));\r\n\t\tuint256[9] memory params = [\r\n\t\t\tvotingPeriodBlocks_,\r\n\t\t\t30000, //3% quorum\r\n\t\t\t2500, //0.25% proposing threshold\r\n\t\t\t10, //max operations\r\n\t\t\t1, //voting delay blocks\r\n\t\t\t2 days, //queue period\r\n\t\t\t1 days / 8, //fast queue period\r\n\t\t\t1 days, //game change period\r\n\t\t\t3 days //grace period\r\n\t\t];\r\n\t\t_setVotingParameters(params);\r\n\t\tguardian = guardian_;\r\n\t}\r\n\r\n\t//upgrade to fix bad guardian deployment\r\n\tfunction fixGuardian(address _guardian) public {\r\n\t\tif (guardian == address(0x4659176E962763e7C8A4eF965ecfD0fdf9f52057)) {\r\n\t\t\tguardian = _guardian;\r\n\t\t}\r\n\t}\r\n\r\n\t///@notice set the different voting parameters, value of 0 is ignored\r\n\t///cell 0 - votingPeriod blocks, 1 - quoromPercentage, 2 - proposalPercentage,3 - proposalMaxOperations, 4 - voting delay blocks, 5 - queuePeriod time\r\n\t///6 - fastQueuePeriod time, 7 - gameChangerPeriod time, 8 - gracePeriod\ttime\r\n\tfunction setVotingParameters(uint256[9] calldata _newParams) external {\r\n\t\t_onlyAvatar();\r\n\t\t_setVotingParameters(_newParams);\r\n\t}\r\n\r\n\tfunction _setVotingParameters(uint256[9] memory _newParams) internal {\r\n\t\trequire(\r\n\t\t\t(quoromPercentage == 0 || _newParams[1] <= quoromPercentage * 2) &&\r\n\t\t\t\t_newParams[1] < 1000000,\r\n\t\t\t\"percentage should not double\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\t(proposalPercentage == 0 || _newParams[2] <= proposalPercentage * 2) &&\r\n\t\t\t\t_newParams[2] < 1000000,\r\n\t\t\t\"percentage should not double\"\r\n\t\t);\r\n\t\tvotingPeriod = _newParams[0] > 0 ? _newParams[0] : votingPeriod;\r\n\t\tquoromPercentage = _newParams[1] > 0 ? _newParams[1] : quoromPercentage;\r\n\t\tproposalPercentage = _newParams[2] > 0 ? _newParams[2] : proposalPercentage;\r\n\t\tproposalMaxOperations = _newParams[3] > 0\r\n\t\t\t? _newParams[3]\r\n\t\t\t: proposalMaxOperations;\r\n\t\tvotingDelay = _newParams[4] > 0 ? _newParams[4] : votingDelay;\r\n\t\tqueuePeriod = _newParams[5] > 0 ? _newParams[5] : queuePeriod;\r\n\t\tfastQueuePeriod = _newParams[6] > 0 ? _newParams[6] : fastQueuePeriod;\r\n\t\tgameChangerPeriod = _newParams[7] > 0 ? _newParams[7] : gameChangerPeriod;\r\n\t\tgracePeriod = _newParams[8] > 0 ? _newParams[8] : gracePeriod;\r\n\r\n\t\temit ParametersSet(_newParams);\r\n\t}\r\n\r\n\t/// @notice make a proposal to be voted on\r\n\t/// @param targets list of contracts to be excuted on\r\n\t/// @param values list of eth value to be used in each contract call\r\n\t/// @param signatures the list of functions to execute\r\n\t/// @param calldatas the list of parameters to pass to each function\r\n\t/// @return uint256 proposal id\r\n\tfunction propose(\r\n\t\taddress[] memory targets,\r\n\t\tuint256[] memory values,\r\n\t\tstring[] memory signatures,\r\n\t\tbytes[] memory calldatas,\r\n\t\tstring memory description\r\n\t) public returns (uint256) {\r\n\t\treturn\r\n\t\t\tpropose(\r\n\t\t\t\ttargets,\r\n\t\t\t\tvalues,\r\n\t\t\t\tsignatures,\r\n\t\t\t\tcalldatas,\r\n\t\t\t\tdescription,\r\n\t\t\t\tgetChainId()\r\n\t\t\t);\r\n\t}\r\n\r\n\t/// @notice make a proposal to be voted on\r\n\t/// @param targets list of contracts to be excuted on\r\n\t/// @param values list of eth value to be used in each contract call\r\n\t/// @param signatures the list of functions to execute\r\n\t/// @param calldatas the list of parameters to pass to each function\r\n\t/// @return uint256 proposal id\r\n\tfunction propose(\r\n\t\taddress[] memory targets,\r\n\t\tuint256[] memory values,\r\n\t\tstring[] memory signatures,\r\n\t\tbytes[] memory calldatas,\r\n\t\tstring memory description,\r\n\t\tuint256 forBlockchain\r\n\t) public returns (uint256) {\r\n\t\trequire(\r\n\t\t\trep.getVotesAt(_msgSender(), true, block.number - 1) >\r\n\t\t\t\tproposalThreshold(block.number - 1),\r\n\t\t\t\"CompoundVotingMachine::propose: proposer votes below proposal threshold\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\ttargets.length == values.length &&\r\n\t\t\t\ttargets.length == signatures.length &&\r\n\t\t\t\ttargets.length == calldatas.length,\r\n\t\t\t\"CompoundVotingMachine::propose: proposal function information arity mismatch\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\ttargets.length != 0,\r\n\t\t\t\"CompoundVotingMachine::propose: must provide actions\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\ttargets.length <= proposalMaxOperations,\r\n\t\t\t\"CompoundVotingMachine::propose: too many actions\"\r\n\t\t);\r\n\r\n\t\tuint256 latestProposalId = latestProposalIds[_msgSender()];\r\n\r\n\t\tif (latestProposalId != 0) {\r\n\t\t\tProposalState proposersLatestProposalState = state(latestProposalId);\r\n\t\t\trequire(\r\n\t\t\t\tproposersLatestProposalState != ProposalState.Active &&\r\n\t\t\t\t\tproposersLatestProposalState != ProposalState.ActiveTimelock,\r\n\t\t\t\t\"CompoundVotingMachine::propose: one live proposal per proposer, found an already active proposal\"\r\n\t\t\t);\r\n\t\t\trequire(\r\n\t\t\t\tproposersLatestProposalState != ProposalState.Pending,\r\n\t\t\t\t\"CompoundVotingMachine::propose: one live proposal per proposer, found an already pending proposal\"\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tuint256 startBlock = block.number + votingDelay;\r\n\t\tuint256 endBlock = startBlock + votingPeriod;\r\n\r\n\t\tproposalCount++;\r\n\t\tProposal storage newProposal = proposals[proposalCount];\r\n\t\tnewProposal.id = proposalCount;\r\n\t\tnewProposal.proposer = _msgSender();\r\n\t\tnewProposal.eta = 0;\r\n\t\tnewProposal.targets = targets;\r\n\t\tnewProposal.values = values;\r\n\t\tnewProposal.signatures = signatures;\r\n\t\tnewProposal.calldatas = calldatas;\r\n\t\tnewProposal.startBlock = startBlock;\r\n\t\tnewProposal.endBlock = endBlock;\r\n\t\tnewProposal.forVotes = 0;\r\n\t\tnewProposal.againstVotes = 0;\r\n\t\tnewProposal.canceled = false;\r\n\t\tnewProposal.executed = false;\r\n\t\tnewProposal.quoromRequired = quorumVotes();\r\n\t\tnewProposal.forBlockchain = forBlockchain;\r\n\t\tlatestProposalIds[newProposal.proposer] = newProposal.id;\r\n\r\n\t\temit ProposalCreated(\r\n\t\t\tnewProposal.id,\r\n\t\t\t_msgSender(),\r\n\t\t\ttargets,\r\n\t\t\tvalues,\r\n\t\t\tsignatures,\r\n\t\t\tcalldatas,\r\n\t\t\tstartBlock,\r\n\t\t\tendBlock,\r\n\t\t\tdescription\r\n\t\t);\r\n\r\n\t\tif (getChainId() != forBlockchain) {\r\n\t\t\temit ProposalBridge(proposalCount, forBlockchain);\r\n\t\t}\r\n\r\n\t\treturn newProposal.id;\r\n\t}\r\n\r\n\t/// @notice helper to set the effective time of a proposal that passed quorom\r\n\t/// @dev also extends the ETA in case of a game changer in vote decision\r\n\t/// @param proposal the proposal to set the eta\r\n\t/// @param hasVoteChanged did the current vote changed the decision\r\n\tfunction _updateETA(Proposal storage proposal, bool hasVoteChanged) internal {\r\n\t\t//if absolute majority allow to execute quickly\r\n\t\tif (proposal.forVotes > rep.totalSupplyAt(proposal.startBlock) / 2) {\r\n\t\t\tproposal.eta = block.timestamp + fastQueuePeriod;\r\n\t\t}\r\n\t\t//first time we have a quorom we ask for a no change in decision period\r\n\t\telse if (proposal.eta == 0) {\r\n\t\t\tproposal.eta = block.timestamp + queuePeriod;\r\n\t\t}\r\n\t\t//if we have a gamechanger then we extend current eta to have at least gameChangerPeriod left\r\n\t\telse if (hasVoteChanged) {\r\n\t\t\tuint256 timeLeft = proposal.eta - block.timestamp;\r\n\t\t\tproposal.eta += timeLeft > gameChangerPeriod\r\n\t\t\t\t? 0\r\n\t\t\t\t: gameChangerPeriod - timeLeft;\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\temit ProposalQueued(proposal.id, proposal.eta);\r\n\t}\r\n\r\n\t/// @notice execute the proposal list of transactions\r\n\t/// @dev anyone can call this once its ETA has arrived\r\n\tfunction execute(uint256 proposalId) public payable {\r\n\t\trequire(\r\n\t\t\tstate(proposalId) == ProposalState.Succeeded,\r\n\t\t\t\"CompoundVotingMachine::execute: proposal can only be executed if it is succeeded\"\r\n\t\t);\r\n\r\n\t\trequire(\r\n\t\t\tproposals[proposalId].forBlockchain == getChainId(),\r\n\t\t\t\"CompoundVotingMachine::execute: proposal for wrong blockchain\"\r\n\t\t);\r\n\r\n\t\tproposals[proposalId].executed = true;\r\n\t\taddress[] memory _targets = proposals[proposalId].targets;\r\n\t\tuint256[] memory _values = proposals[proposalId].values;\r\n\t\tstring[] memory _signatures = proposals[proposalId].signatures;\r\n\t\tbytes[] memory _calldatas = proposals[proposalId].calldatas;\r\n\r\n\t\tfor (uint256 i = 0; i < _targets.length; i++) {\r\n\t\t\t(bool ok, bytes memory result) = _executeTransaction(\r\n\t\t\t\t_targets[i],\r\n\t\t\t\t_values[i],\r\n\t\t\t\t_signatures[i],\r\n\t\t\t\t_calldatas[i]\r\n\t\t\t);\r\n\t\t\temit ProposalExecutionResult(proposalId, i, ok, result);\r\n\t\t}\r\n\t\temit ProposalExecuted(proposalId);\r\n\t}\r\n\r\n\t/// @notice internal helper to execute a single transaction of a proposal\r\n\t/// @dev special execution is done if target is a method in the DAO controller\r\n\tfunction _executeTransaction(\r\n\t\taddress target,\r\n\t\tuint256 value,\r\n\t\tstring memory signature,\r\n\t\tbytes memory data\r\n\t) internal returns (bool, bytes memory) {\r\n\t\tbytes memory callData;\r\n\r\n\t\tif (bytes(signature).length == 0) {\r\n\t\t\tcallData = data;\r\n\t\t} else {\r\n\t\t\tcallData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\r\n\t\t}\r\n\r\n\t\tbool ok;\r\n\t\tbytes memory result;\r\n\r\n\t\tif (target == address(dao)) {\r\n\t\t\t(ok, result) = target.call{ value: value }(callData);\r\n\t\t} else {\r\n\t\t\tif (value > 0) payable(address(avatar)).transfer(value); //make sure avatar have the funds to pay\r\n\t\t\t(ok, result) = dao.genericCall(target, callData, address(avatar), value);\r\n\t\t}\r\n\t\trequire(\r\n\t\t\tok,\r\n\t\t\t\"CompoundVotingMachine::executeTransaction: Transaction execution reverted.\"\r\n\t\t);\r\n\r\n\t\treturn (ok, result);\r\n\t}\r\n\r\n\t/// @notice cancel a proposal in case proposer no longer holds the votes that were required to propose\r\n\t/// @dev could be cheating trying to bypass the single proposal per address by delegating to another address\r\n\t/// or when delegators do not concur with the proposal done in their name, they can withdraw\r\n\tfunction cancel(uint256 proposalId) public {\r\n\t\tProposalState pState = state(proposalId);\r\n\t\trequire(\r\n\t\t\tpState != ProposalState.Executed,\r\n\t\t\t\"CompoundVotingMachine::cancel: cannot cancel executed proposal\"\r\n\t\t);\r\n\r\n\t\tProposal storage proposal = proposals[proposalId];\r\n\t\trequire(\r\n\t\t\t_msgSender() == guardian ||\r\n\t\t\t\trep.getVotesAt(proposal.proposer, true, block.number - 1) <\r\n\t\t\t\tproposalThreshold(proposal.startBlock),\r\n\t\t\t\"CompoundVotingMachine::cancel: proposer above threshold\"\r\n\t\t);\r\n\r\n\t\tproposal.canceled = true;\r\n\r\n\t\temit ProposalCanceled(proposalId);\r\n\t}\r\n\r\n\t/// @notice get the actions to be done in a proposal\r\n\tfunction getActions(uint256 proposalId)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\taddress[] memory targets,\r\n\t\t\tuint256[] memory values,\r\n\t\t\tstring[] memory signatures,\r\n\t\t\tbytes[] memory calldatas\r\n\t\t)\r\n\t{\r\n\t\tProposal storage p = proposals[proposalId];\r\n\t\treturn (p.targets, p.values, p.signatures, p.calldatas);\r\n\t}\r\n\r\n\t/// @notice get the receipt of a single voter in a proposal\r\n\tfunction getReceipt(uint256 proposalId, address voter)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (Receipt memory)\r\n\t{\r\n\t\treturn proposals[proposalId].receipts[voter];\r\n\t}\r\n\r\n\t/// @notice get the current status of a proposal\r\n\tfunction state(uint256 proposalId) public view returns (ProposalState) {\r\n\t\trequire(\r\n\t\t\tproposalCount >= proposalId && proposalId > 0,\r\n\t\t\t\"CompoundVotingMachine::state: invalid proposal id\"\r\n\t\t);\r\n\r\n\t\tProposal storage proposal = proposals[proposalId];\r\n\r\n\t\tif (proposal.canceled) {\r\n\t\t\treturn ProposalState.Canceled;\r\n\t\t} else if (block.number <= proposal.startBlock) {\r\n\t\t\treturn ProposalState.Pending;\r\n\t\t} else if (proposal.executed) {\r\n\t\t\treturn ProposalState.Executed;\r\n\t\t} else if (\r\n\t\t\tproposal.eta > 0 && block.timestamp < proposal.eta //passed quorum but not executed yet, in time lock\r\n\t\t) {\r\n\t\t\treturn ProposalState.ActiveTimelock;\r\n\t\t} else if (\r\n\t\t\t//regular voting period\r\n\t\t\tproposal.eta == 0 && block.number <= proposal.endBlock\r\n\t\t) {\r\n\t\t\t//proposal is active if we are in the gameChanger period (eta) or no decision yet and in voting period\r\n\t\t\treturn ProposalState.Active;\r\n\t\t} else if (\r\n\t\t\tproposal.forVotes <= proposal.againstVotes ||\r\n\t\t\tproposal.forVotes < proposal.quoromRequired\r\n\t\t) {\r\n\t\t\treturn ProposalState.Defeated;\r\n\t\t} else if (\r\n\t\t\tproposal.eta > 0 && block.timestamp >= proposal.eta + gracePeriod\r\n\t\t) {\r\n\t\t\t//expired if not executed gracePeriod after eta\r\n\t\t\treturn ProposalState.Expired;\r\n\t\t} else {\r\n\t\t\treturn ProposalState.Succeeded;\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice cast your vote on a proposal\r\n\t/// @param proposalId the proposal to vote on\r\n\t/// @param support for or against\r\n\tfunction castVote(uint256 proposalId, bool support) public {\r\n\t\t//get all votes in all blockchains including delegated\r\n\t\tProposal storage proposal = proposals[proposalId];\r\n\t\tuint256 votes = rep.getVotesAt(_msgSender(), true, proposal.startBlock);\r\n\t\treturn _castVote(_msgSender(), proposal, support, votes);\r\n\t}\r\n\r\n\tstruct VoteSig {\r\n\t\tbool support;\r\n\t\tuint8 v;\r\n\t\tbytes32 r;\r\n\t\tbytes32 s;\r\n\t}\r\n\r\n\t// function ecRecoverTest(\r\n\t// \tuint256 proposalId,\r\n\t// \tVoteSig[] memory votesFor,\r\n\t// \tVoteSig[] memory votesAgainst\r\n\t// ) public {\r\n\t// \tbytes32 domainSeparator =\r\n\t// \t\tkeccak256(\r\n\t// \t\t\tabi.encode(\r\n\t// \t\t\t\tDOMAIN_TYPEHASH,\r\n\t// \t\t\t\tkeccak256(bytes(name)),\r\n\t// \t\t\t\tgetChainId(),\r\n\t// \t\t\t\taddress(this)\r\n\t// \t\t\t)\r\n\t// \t\t);\r\n\t// \tbytes32 structHashFor =\r\n\t// \t\tkeccak256(abi.encode(BALLOT_TYPEHASH, proposalId, true));\r\n\t// \tbytes32 structHashAgainst =\r\n\t// \t\tkeccak256(abi.encode(BALLOT_TYPEHASH, proposalId, false));\r\n\t// \tbytes32 digestFor =\r\n\t// \t\tkeccak256(\r\n\t// \t\t\tabi.encodePacked(\"\\x19\\x01\", domainSeparator, structHashFor)\r\n\t// \t\t);\r\n\t// \tbytes32 digestAgainst =\r\n\t// \t\tkeccak256(\r\n\t// \t\t\tabi.encodePacked(\"\\x19\\x01\", domainSeparator, structHashAgainst)\r\n\t// \t\t);\r\n\r\n\t// \tProposal storage proposal = proposals[proposalId];\r\n\r\n\t// \tuint256 total;\r\n\t// \tfor (uint32 i = 0; i < votesFor.length; i++) {\r\n\t// \t\tbytes32 digest = digestFor;\r\n\r\n\t// \t\taddress signatory =\r\n\t// \t\t\tecrecover(digest, votesFor[i].v, votesFor[i].r, votesFor[i].s);\r\n\t// \t\trequire(\r\n\t// \t\t\tsignatory != address(0),\r\n\t// \t\t\t\"CompoundVotingMachine::castVoteBySig: invalid signature\"\r\n\t// \t\t);\r\n\t// \t\trequire(\r\n\t// \t\t\tvotesFor[i].support == true,\r\n\t// \t\t\t\"CompoundVotingMachine::castVoteBySig: invalid support value in for batch\"\r\n\t// \t\t);\r\n\t// \t\ttotal += rep.getVotesAt(signatory, true, proposal.startBlock);\r\n\t// \t\tReceipt storage receipt = proposal.receipts[signatory];\r\n\t// \t\treceipt.hasVoted = true;\r\n\t// \t\treceipt.support = true;\r\n\t// \t}\r\n\t// \tif (votesFor.length > 0) {\r\n\t// \t\taddress voteAddressHash =\r\n\t// \t\t\taddress(uint160(uint256(keccak256(abi.encode(votesFor)))));\r\n\t// \t\t_castVote(voteAddressHash, proposalId, true, total);\r\n\t// \t}\r\n\r\n\t// \ttotal = 0;\r\n\t// \tfor (uint32 i = 0; i < votesAgainst.length; i++) {\r\n\t// \t\tbytes32 digest = digestAgainst;\r\n\r\n\t// \t\taddress signatory =\r\n\t// \t\t\tecrecover(\r\n\t// \t\t\t\tdigest,\r\n\t// \t\t\t\tvotesAgainst[i].v,\r\n\t// \t\t\t\tvotesAgainst[i].r,\r\n\t// \t\t\t\tvotesAgainst[i].s\r\n\t// \t\t\t);\r\n\t// \t\trequire(\r\n\t// \t\t\tsignatory != address(0),\r\n\t// \t\t\t\"CompoundVotingMachine::castVoteBySig: invalid signature\"\r\n\t// \t\t);\r\n\t// \t\trequire(\r\n\t// \t\t\tvotesAgainst[i].support == false,\r\n\t// \t\t\t\"CompoundVotingMachine::castVoteBySig: invalid support value in against batch\"\r\n\t// \t\t);\r\n\t// \t\ttotal += rep.getVotesAt(signatory, true, proposal.startBlock);\r\n\t// \t\tReceipt storage receipt = proposal.receipts[signatory];\r\n\t// \t\treceipt.hasVoted = true;\r\n\t// \t\treceipt.support = true;\r\n\t// \t}\r\n\t// \tif (votesAgainst.length > 0) {\r\n\t// \t\taddress voteAddressHash =\r\n\t// \t\t\taddress(uint160(uint256(keccak256(abi.encode(votesAgainst)))));\r\n\t// \t\t_castVote(voteAddressHash, proposalId, false, total);\r\n\t// \t}\r\n\t// }\r\n\r\n\t/// @notice helper to cast a vote for someone else by using eip712 signatures\r\n\tfunction castVoteBySig(\r\n\t\tuint256 proposalId,\r\n\t\tbool support,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) public {\r\n\t\tbytes32 domainSeparator = keccak256(\r\n\t\t\tabi.encode(\r\n\t\t\t\tDOMAIN_TYPEHASH,\r\n\t\t\t\tkeccak256(bytes(name)),\r\n\t\t\t\tgetChainId(),\r\n\t\t\t\taddress(this)\r\n\t\t\t)\r\n\t\t);\r\n\t\tbytes32 structHash = keccak256(\r\n\t\t\tabi.encode(BALLOT_TYPEHASH, proposalId, support)\r\n\t\t);\r\n\t\tbytes32 digest = keccak256(\r\n\t\t\tabi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\r\n\t\t);\r\n\t\taddress signatory = ecrecover(digest, v, r, s);\r\n\t\trequire(\r\n\t\t\tsignatory != address(0),\r\n\t\t\t\"CompoundVotingMachine::castVoteBySig: invalid signature\"\r\n\t\t);\r\n\r\n\t\t//get all votes in all blockchains including delegated\r\n\t\tProposal storage proposal = proposals[proposalId];\r\n\t\tuint256 votes = rep.getVotesAt(signatory, true, proposal.startBlock);\r\n\t\treturn _castVote(signatory, proposal, support, votes);\r\n\t}\r\n\r\n\t/// @notice internal helper to cast a vote\r\n\tfunction _castVote(\r\n\t\taddress voter,\r\n\t\tProposal storage proposal,\r\n\t\tbool support,\r\n\t\tuint256 votes\r\n\t) internal {\r\n\t\tuint256 proposalId = proposal.id;\r\n\t\trequire(\r\n\t\t\tstate(proposalId) == ProposalState.Active ||\r\n\t\t\t\tstate(proposalId) == ProposalState.ActiveTimelock,\r\n\t\t\t\"CompoundVotingMachine::_castVote: voting is closed\"\r\n\t\t);\r\n\r\n\t\tReceipt storage receipt = proposal.receipts[voter];\r\n\t\trequire(\r\n\t\t\treceipt.hasVoted == false,\r\n\t\t\t\"CompoundVotingMachine::_castVote: voter already voted\"\r\n\t\t);\r\n\r\n\t\tbool hasChanged = proposal.forVotes > proposal.againstVotes;\r\n\t\tif (support) {\r\n\t\t\tproposal.forVotes += votes;\r\n\t\t} else {\r\n\t\t\tproposal.againstVotes += votes;\r\n\t\t}\r\n\r\n\t\thasChanged = hasChanged != (proposal.forVotes > proposal.againstVotes);\r\n\t\treceipt.hasVoted = true;\r\n\t\treceipt.support = support;\r\n\t\treceipt.votes = votes;\r\n\r\n\t\t// if quorom passed then start the queue period\r\n\t\tif (\r\n\t\t\tproposal.forVotes >= proposal.quoromRequired ||\r\n\t\t\tproposal.againstVotes >= proposal.quoromRequired\r\n\t\t) _updateETA(proposal, hasChanged);\r\n\t\temit VoteCast(voter, proposalId, support, votes);\r\n\t}\r\n\r\n\tfunction getChainId() public view returns (uint256) {\r\n\t\tuint256 chainId;\r\n\t\tassembly {\r\n\t\t\tchainId := chainid()\r\n\t\t}\r\n\t\treturn chainId;\r\n\t}\r\n\r\n\tfunction renounceGuardian() public {\r\n\t\trequire(_msgSender() == guardian, \"CompoundVotingMachine: not guardian\");\r\n\t\tguardian = address(0);\r\n\t\tfoundationGuardianRelease = 0;\r\n\t\temit GuardianSet(guardian);\r\n\t}\r\n\r\n\tfunction setGuardian(address _guardian) public {\r\n\t\trequire(\r\n\t\t\t_msgSender() == address(avatar) || _msgSender() == guardian,\r\n\t\t\t\"CompoundVotingMachine: not avatar or guardian\"\r\n\t\t);\r\n\r\n\t\trequire(\r\n\t\t\t_msgSender() == guardian || block.timestamp > foundationGuardianRelease,\r\n\t\t\t\"CompoundVotingMachine: foundation expiration not reached\"\r\n\t\t);\r\n\r\n\t\tguardian = _guardian;\r\n\t\temit GuardianSet(guardian);\r\n\t}\r\n\r\n\t/// @notice allow anyone to emit details about proposal that passed. can be used for cross-chain proposals using blockheader proofs\r\n\tfunction emitSucceeded(uint256 _proposalId) public {\r\n\t\trequire(\r\n\t\t\tstate(_proposalId) == ProposalState.Succeeded,\r\n\t\t\t\"CompoundVotingMachine: not Succeeded\"\r\n\t\t);\r\n\t\tProposal storage proposal = proposals[_proposalId];\r\n\t\t//also mark in storage as executed for cross chain voting. can be used by storage proofs, to verify proposal passed\r\n\t\tif (proposal.forBlockchain != getChainId()) {\r\n\t\t\tproposal.executed = true;\r\n\t\t}\r\n\r\n\t\temit ProposalSucceeded(\r\n\t\t\t_proposalId,\r\n\t\t\tproposal.proposer,\r\n\t\t\tproposal.targets,\r\n\t\t\tproposal.values,\r\n\t\t\tproposal.signatures,\r\n\t\t\tproposal.calldatas,\r\n\t\t\tproposal.startBlock,\r\n\t\t\tproposal.endBlock,\r\n\t\t\tproposal.forBlockchain,\r\n\t\t\tproposal.eta,\r\n\t\t\tproposal.forVotes,\r\n\t\t\tproposal.againstVotes\r\n\t\t);\r\n\t}\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"GuardianSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[9]\",\"name\":\"params\",\"type\":\"uint256[9]\"}],\"name\":\"ParametersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"forBlockchain\",\"type\":\"uint256\"}],\"name\":\"ProposalBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"ProposalExecutionResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forBlockchain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"}],\"name\":\"ProposalSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avatar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"contract Controller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"emitSucceeded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fastQueuePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"fixGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationGuardianRelease\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameChangerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"internalType\":\"struct CompoundVotingMachine.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gracePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INameService\",\"name\":\"ns_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votingPeriodBlocks_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"guardian_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameService\",\"outputs\":[{\"internalType\":\"contract INameService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToken\",\"outputs\":[{\"internalType\":\"contract IGoodDollar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalMaxOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"quoromRequired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forBlockchain\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"forBlockchain\",\"type\":\"uint256\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoromPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rep\",\"outputs\":[{\"internalType\":\"contract ReputationInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[9]\",\"name\":\"_newParams\",\"type\":\"uint256[9]\"}],\"name\":\"setVotingParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum CompoundVotingMachine.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAvatar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CompoundVotingMachine","CompilerVersion":"v0.8.8+commit.dddeac2f","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2566a801ddeb7cc3f3dfedae464bbadd24708f60a505db442af0e024dfde9c38"}]}