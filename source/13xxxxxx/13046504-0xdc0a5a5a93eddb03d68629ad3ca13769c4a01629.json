{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.6;\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n//SPDX-License-Identifier: None\r\ncontract MultiSigWallet {\r\n\r\n    address public _owner;\r\n    mapping(address => uint8) public _owners;\r\n    address [] ownerlist;\r\n    \r\n    uint constant MIN_SIGNATURES = 2;\r\n    uint private _transactionIdx;\r\n\r\n    struct Transaction {\r\n      address from;\r\n      address payable to; \r\n      uint amount;\r\n      uint8 signatureCount;\r\n      bool isActive;\r\n      address tokenAddr;\r\n    }\r\n\r\n    mapping (uint => Transaction) public _transactions;\r\n   \r\n    mapping (uint => mapping (address => uint8)) public signatures;\r\n    \r\n    uint[] public pendingTxIds;\r\n    uint public pendingTxCnt;\r\n    uint public totalTxCnt;\r\n    modifier isOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    modifier validOwner() {\r\n        require(msg.sender == _owner || _owners[msg.sender] == 1);\r\n        _;\r\n    }\r\n\r\n    event DepositFunds(address from, uint amount);\r\n    event TransactionCreated(address from, address to, uint amount, uint transactionId);\r\n    event TransactionCompleted(address from, address to, uint amount, uint transactionId);\r\n    event MultiTransactionCompleted(address from, address to, uint amount, uint[] transactionId);\r\n    event TransactionSigned(address by, uint transactionId);\r\n    event multiTransactionSigned(address by, uint[] transactionId);\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function addOwner(address owner)\r\n        isOwner\r\n        public {\r\n            ownerlist.push(owner);\r\n        _owners[owner] = 1;\r\n    }\r\n\r\n    function removeOwner(address owner)\r\n        isOwner\r\n        public {\r\n           \r\n        _owners[owner] = 0;\r\n    }\r\n\r\n    receive() external payable {\r\n        emit DepositFunds(msg.sender, msg.value);\r\n    }\r\n\r\n    \r\n\r\n    function transferTo(address payable to, uint amount)\r\n        public  returns (uint ){\r\n        require(address(this).balance >= amount);\r\n        uint transactionId = _transactionIdx++;\r\n\r\n        \r\n        _transactions[transactionId] = Transaction(msg.sender,to,amount,0,true,address(0x0));\r\n       \r\n        totalTxCnt++;\r\n        pendingTxCnt++;\r\n        pendingTxIds.push(transactionId);\r\n        \r\n        signatures[transactionId][msg.sender] = 1;\r\n        _transactions[transactionId].signatureCount++;\r\n        emit TransactionCreated(msg.sender, to, amount, transactionId);\r\n        return transactionId;\r\n    }\r\n    \r\n    function transferTokenTo(address tokenAddress,address payable to, uint amount)\r\n        public  returns (uint ){\r\n        IERC20 token = IERC20(tokenAddress);    \r\n        uint tokenBalance = token.balanceOf(address(this));    \r\n        require(tokenBalance >= amount);\r\n        uint transactionId = _transactionIdx++;\r\n\r\n        \r\n        _transactions[transactionId] = Transaction(msg.sender,to,amount,0,true,tokenAddress);\r\n       \r\n        totalTxCnt++;\r\n        pendingTxCnt++;\r\n        pendingTxIds.push(transactionId);\r\n        \r\n        signatures[transactionId][msg.sender] = 1;\r\n        _transactions[transactionId].signatureCount++;\r\n        emit TransactionCreated(msg.sender, to, amount, transactionId);\r\n        return transactionId;\r\n    }    \r\n\r\n    function getPendingTransactions()\r\n      public\r\n      view\r\n      returns (address [] memory, address [] memory, uint [] memory, uint [] memory,address [] memory) {\r\n          uint getPendTxLength = pendingTxIds.length;\r\n          address[] memory fromAddress = new address[](getPendTxLength);\r\n          address[] memory toAddress = new address[](getPendTxLength);\r\n          uint[] memory userAmount = new uint[](getPendTxLength);\r\n          uint[] memory userSignatureCount = new uint[](getPendTxLength);\r\n          address[] memory tokenAddr = new address[](getPendTxLength);\r\n          uint i;\r\n          for(i = 0; i < getPendTxLength; i++){\r\n                fromAddress[i] = _transactions[i].from;\r\n                toAddress[i] = _transactions[i].to;\r\n                userAmount[i] = _transactions[i].amount;\r\n                userSignatureCount[i] = _transactions[i].signatureCount;\r\n                tokenAddr[i] = _transactions[i].tokenAddr;\r\n          }\r\n        return (fromAddress, toAddress, userAmount, userSignatureCount,tokenAddr);\r\n    }\r\n    \r\n   \r\n    function signTransaction(uint transactionId)\r\n      validOwner\r\n      public {\r\n\r\n      Transaction storage transaction = _transactions[transactionId];\r\n      address tokenAddress  = transaction.tokenAddr;\r\n      // Transaction must exist\r\n      require(address(0x0) != transaction.from);\r\n      // Creator cannot sign the transaction\r\n      require(msg.sender != transaction.from);\r\n      // Cannot sign a transaction more than once\r\n      require(signatures[transactionId][msg.sender] != 1);\r\n\r\n      signatures[transactionId][msg.sender] = 1;\r\n      transaction.signatureCount++;\r\n\r\n      emit TransactionSigned(msg.sender, transactionId);\r\n\r\n      if (transaction.signatureCount >= MIN_SIGNATURES) {\r\n          if(tokenAddress==address(0x0)){\r\n              require(address(this).balance >= transaction.amount);\r\n              transaction.to.transfer(transaction.amount);\r\n          }\r\n          else {\r\n              IERC20 token = IERC20(tokenAddress);    \r\n              uint tokenBalance = token.balanceOf(address(this)); \r\n              require(tokenBalance >= transaction.amount);\r\n              token.transfer(transaction.to,transaction.amount);\r\n          }\r\n       emit  TransactionCompleted(transaction.from, transaction.to, transaction.amount, transactionId);\r\n        deleteTransaction(transactionId);\r\n      }\r\n    }\r\n\r\n\r\n function signTransactionMulti(uint[] memory transactionIds)\r\n      validOwner\r\n      public {\r\n        require(transactionIds.length>0,\"Transaction Id required\");\r\n        for(uint i=0; i<transactionIds.length; i++) {\r\n            uint transactionId = transactionIds[i];\r\n          Transaction storage transaction = _transactions[transactionId];\r\n          address tokenAddress  = transaction.tokenAddr;\r\n          // Transaction must exist\r\n          if(address(0x0) == transaction.from){ return; }\r\n          // Creator cannot sign the transaction\r\n          if(msg.sender == transaction.from){ return; }\r\n          // Cannot sign a transaction more than once\r\n          if(signatures[transactionId][msg.sender] == 1){ return; }\r\n    \r\n          signatures[transactionId][msg.sender] = 1;\r\n          transaction.signatureCount++;\r\n    \r\n         \r\n    \r\n          if (transaction.signatureCount >= MIN_SIGNATURES) {\r\n              if(tokenAddress==address(0x0)){\r\n                  if(address(this).balance < transaction.amount){ return; }\r\n                  transaction.to.transfer(transaction.amount);\r\n              }\r\n              else {\r\n                  IERC20 token = IERC20(tokenAddress);    \r\n                  uint tokenBalance = token.balanceOf(address(this)); \r\n                  if(tokenBalance < transaction.amount){ return; }\r\n                  token.transfer(transaction.to,transaction.amount);\r\n              }\r\n           \r\n            deleteTransaction(transactionId);\r\n          }\r\n        }\r\n         emit multiTransactionSigned(msg.sender, transactionIds);\r\n       // emit  MultiTransactionCompleted(transaction.from, transaction.to, transaction.amount, transactionIds);\r\n    }\r\n\r\n    function deleteTransaction(uint transactionId)\r\n      validOwner\r\n      public {\r\n     _transactions[transactionId].isActive = false;\r\n     reestPendingTx(transactionId);\r\n     pendingTxCnt--;\r\n    }\r\n\r\n    \r\n   function reestPendingTx(uint removetxId) internal {\r\n       uint[] memory collect = pendingTxIds;\r\n       delete pendingTxIds;\r\n       for(uint i=0; i < collect.length;i++){\r\n            if(collect[i] != removetxId){\r\n                pendingTxIds.push(collect[i]);\r\n            }\r\n       }\r\n   }\r\n\r\n\r\n    function walletBalance()\r\n      public \r\n      view\r\n      returns (uint) {\r\n      return address(this).balance;\r\n    }\r\n    \r\n    \r\n    function showOwnerList()\r\n      public\r\n      view\r\n      returns (address [] memory, uint [] memory) {\r\n          uint ownerlistLength = ownerlist.length;\r\n          address[] memory ownersAddress = new address[](ownerlistLength);\r\n          uint[] memory ownerStatus = new uint[](ownerlistLength);\r\n\r\n          \r\n          for(uint i = 0; i < ownerlistLength; i++) {\r\n                ownersAddress[i] = ownerlist[i];\r\n                ownerStatus[i] = _owners[ownerlist[i]];\r\n          }\r\n        return (ownersAddress, ownerStatus);\r\n    }\r\n    \r\n    function withdrawEthByOwner(uint amount,address payable to)\r\n        isOwner\r\n        public {\r\n        require(address(this).balance >= amount);\r\n        to.transfer(amount);\r\n    }\r\n    \r\n    function withdrawTokenByOwner(address tokenAddress,uint amount,address payable to)\r\n        isOwner\r\n        public {\r\n          IERC20 token = IERC20(tokenAddress);    \r\n          uint tokenBalance = token.balanceOf(address(this)); \r\n          require(tokenBalance >= amount);\r\n          token.transfer(to,amount);\r\n    }\r\n  \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"transactionId\",\"type\":\"uint256[]\"}],\"name\":\"MultiTransactionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TransactionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TransactionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TransactionSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"transactionId\",\"type\":\"uint256[]\"}],\"name\":\"multiTransactionSigned\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_owners\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"signatureCount\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"deleteTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingTransactions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingTxCnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingTxIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showOwnerList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"signTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"transactionIds\",\"type\":\"uint256[]\"}],\"name\":\"signTransactionMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signatures\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTxCnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokenTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawEthByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawTokenByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MultiSigWallet","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://569452b359dec56c4c9421e6a7cf00f28d66a1418b01bfabf76edb134268d5dd"}]}