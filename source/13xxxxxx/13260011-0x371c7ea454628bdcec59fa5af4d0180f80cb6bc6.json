{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address _owner) external returns (uint256);\r\n    function transfer(address _to, uint256 _amount) external;\r\n    function transferFrom(address _from, address _to, uint256 _amount) external;\r\n    function mint(address _to, uint256 _amount) external;\r\n    function burn(uint256 _amount) external;\r\n    function setMinter(address _addr) external;\r\n}\r\n\r\ncontract BridgeOperatable {\r\n    address public owner;\r\n    address public operator1;\r\n    address public operator2;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    event Operator1Transferred(address indexed _from, address indexed _to);\r\n    event Operator2Transferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        operator1 = msg.sender;\r\n        operator2 = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, 'onlyOwner: insufficient privilege');\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator1 {\r\n        require(msg.sender == operator1, 'onlyOperator1: insufficient privilege');\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator2 {\r\n        require(msg.sender == operator2, 'onlyOperator2: insufficient privilege');\r\n        _;\r\n    }\r\n\r\n    function transferOwner(address _owner) public onlyOwner {\r\n        emit Operator1Transferred(owner, _owner);\r\n        owner = _owner;\r\n    }\r\n\r\n    function transferOperator1(address _operator1) public onlyOwner {\r\n        emit Operator1Transferred(operator1, _operator1);\r\n        operator1 = _operator1;\r\n    }\r\n\r\n    function transferOperator2(address _operator2) public onlyOwner {\r\n        emit Operator2Transferred(operator2, _operator2);\r\n        operator2 = _operator2;\r\n    }\r\n}\r\n\r\ncontract BridgeTest is BridgeOperatable {\r\n    mapping(address => address payable) public treasury; \r\n\r\n    receive() external payable {\r\n        // Do nothing\r\n    }\r\n\r\n    function setTreasury(address _token, address payable _treasury) external onlyOwner returns (bool) {\r\n        treasury[_token] = _treasury;\r\n        return true;\r\n    }\r\n\r\n    function withdraw(address _token, uint256 _amount) external onlyOperator1 returns (bool) {\r\n        if(_token == address(0)) {\r\n            // Native token\r\n            require(address(this).balance >= _amount, 'insufficient balance');\r\n            treasury[_token].transfer(_amount);\r\n        } else {\r\n            // ERC20 token\r\n            IERC20 token = IERC20(_token);\r\n            require(token.balanceOf(address(this)) >= _amount, 'insufficient balance');\r\n            token.transfer(treasury[_token], _amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function withdraw2(address _token, uint256 _amount) external returns (bool) {\r\n        if(_token == address(0)) {\r\n            // Native token\r\n            require(address(this).balance >= _amount, 'insufficient balance');\r\n            treasury[_token].transfer(_amount);\r\n        } else {\r\n            // ERC20 token\r\n            IERC20 token = IERC20(_token);\r\n            require(token.balanceOf(address(this)) >= _amount, 'insufficient balance');\r\n            token.transfer(treasury[_token], _amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function withdraw3(address _token, uint256 _amount) external onlyOperator1 returns (bool) {\r\n        require(address(this).balance >= _amount, 'insufficient balance');\r\n        treasury[_token].transfer(_amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdraw4(address _token, uint256 _amount) external returns (bool) {\r\n        require(address(this).balance >= _amount, 'insufficient balance');\r\n        treasury[_token].transfer(_amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdraw5(address _token, uint256 _amount) external onlyOperator1 returns (bool) {\r\n        treasury[_token].transfer(_amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdraw6(address _token, uint256 _amount) external returns (bool) {\r\n        treasury[_token].transfer(_amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdraw7(address payable _to, uint256 _amount) external returns (bool) {\r\n        _to.transfer(_amount);\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Operator1Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Operator2Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"operator1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator1\",\"type\":\"address\"}],\"name\":\"transferOperator1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator2\",\"type\":\"address\"}],\"name\":\"transferOperator2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw4\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw5\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw6\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw7\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BridgeTest","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cee22b4b14f9278fec08978a63f35c6a52f22d528d1a578638547c43d0a99883"}]}