{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/MasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./SatoruFiToken.sol\\\";\\r\\nimport \\\"./Authorizable.sol\\\";\\r\\n\\r\\n// MasterChef is the master breeder of whatever creature the SatoruFiToken represents.\\r\\n//\\r\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\r\\n// will be transferred to a governance smart contract once SatoruFiToken is sufficiently\\r\\n// distributed and the community can show to govern itself.\\r\\n//\\r\\ncontract MasterChef is Ownable, Authorizable, ReentrancyGuard {\\r\\n    using SafeMath\\r\\n    for uint256;\\r\\n    using SafeERC20\\r\\n    for IERC20;\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n        uint256 rewardDebtAtBlock; // the last block user stake\\r\\n        uint256 lastWithdrawBlock; // the last block a user withdrew at.\\r\\n        uint256 firstDepositBlock; // the last block a user deposited at.\\r\\n        uint256 blockdelta; //time passed since withdrawals\\r\\n        uint256 lastDepositBlock;\\r\\n        //\\r\\n        // We do some fancy math here. Basically, any point in time, the amount of SatoruFiTokens\\r\\n        // entitled to a user but is pending to be distributed is:\\r\\n        //\\r\\n        //   pending reward = (user.amount * pool.accGovTokenPerShare) - user.rewardDebt\\r\\n        //\\r\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\r\\n        //   1. The pool's `accGovTokenPerShare` (and `lastRewardBlock`) gets updated.\\r\\n        //   2. User receives the pending reward sent to his/her address.\\r\\n        //   3. User's `amount` gets updated.\\r\\n        //   4. User's `rewardDebt` gets updated.\\r\\n    }\\r\\n\\r\\n    struct UserGlobalInfo {\\r\\n        uint256 globalAmount;\\r\\n        mapping(address => uint256) referrals;\\r\\n        uint256 totalReferals;\\r\\n        uint256 globalRefAmount;\\r\\n    }\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IERC20 lpToken; // Address of LP token contract.\\r\\n        uint256 allocPoint; // How many allocation points assigned to this pool. SatoruFiTokens to distribute per block.\\r\\n        uint256 lastRewardBlock; // Last block number that SatoruFiTokens distribution occurs.\\r\\n        uint256 accGovTokenPerShare; // Accumulated SatoruFiTokens per share, times 1e12. See below.\\r\\n    }\\r\\n\\r\\n    // The Governance token\\r\\n    SatoruFiToken public govToken;\\r\\n    // Dev address.\\r\\n    address public devaddr;\\r\\n    // LP address\\r\\n    address public liquidityaddr;\\r\\n    // Community Fund Address\\r\\n    address public comfundaddr;\\r\\n    // Founder Reward\\r\\n    address public founderaddr;\\r\\n    // SatoruFiTokens created per block.\\r\\n    uint256 public REWARD_PER_BLOCK;\\r\\n    // Bonus muliplier for early SatoruFiToken makers.\\r\\n    uint256[] public REWARD_MULTIPLIER; // init in constructor function\\r\\n    uint256[] public HALVING_AT_BLOCK; // init in constructor function\\r\\n    uint256[] public blockDeltaStartStage;\\r\\n    uint256[] public blockDeltaEndStage;\\r\\n    uint256[] public userFeeStage;\\r\\n    uint256[] public devFeeStage;\\r\\n    uint256 public FINISH_BONUS_AT_BLOCK;\\r\\n    uint256 public userDepFee;\\r\\n    uint256 public devDepFee;\\r\\n\\r\\n    // The block number when SatoruFiToken mining starts.\\r\\n    uint256 public START_BLOCK;\\r\\n\\r\\n    uint256 public PERCENT_LOCK_BONUS_REWARD; // lock xx% of bounus reward in 3 year\\r\\n    uint256 public PERCENT_FOR_DEV; // dev bounties + partnerships\\r\\n    uint256 public PERCENT_FOR_LP; // LP fund\\r\\n    uint256 public PERCENT_FOR_COM; // community fund\\r\\n    uint256 public PERCENT_FOR_FOUNDERS; // founders fund\\r\\n\\r\\n    // Info of each pool.\\r\\n    PoolInfo[] public poolInfo;\\r\\n    mapping(address => uint256) public poolId1; // poolId1 count from 1, subtraction 1 before using with poolInfo\\r\\n    // Info of each user that stakes LP tokens. pid => user address => info\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n    mapping(address => UserGlobalInfo) public userGlobalInfo;\\r\\n    mapping(IERC20 => bool) public poolExistence;\\r\\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\\r\\n    uint256 public totalAllocPoint = 0;\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(\\r\\n        address indexed user,\\r\\n        uint256 indexed pid,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event SendSatoruFiTokenReward(\\r\\n        address indexed user,\\r\\n        uint256 indexed pid,\\r\\n        uint256 amount,\\r\\n        uint256 lockAmount\\r\\n    );\\r\\n    event DevAddressChange(address indexed dev);\\r\\n    event BonusFinishUpdate(uint256 _block);\\r\\n    event HalvingUpdate(uint256[] block);\\r\\n    event LpAddressUpdate(address indexed lpAddress);\\r\\n    event ComAddressUpdate(address indexed comAddress);\\r\\n    event FounderAddressUpdate(address indexed founderAddress);\\r\\n    event RewardUpdate(uint256 amount);\\r\\n    event RewardMulUpdate(uint256[] rewardMultiplier);\\r\\n    event LockUpdate(uint256 PERCENT_LOCK_BONUS_REWARD);\\r\\n    event LockdevUpdate(uint256 PERCENT_FOR_DEV);\\r\\n    event LocklpUpdate(uint256 PERCENT_FOR_LP);\\r\\n    event LockcomUpdate(uint256 PERCENT_FOR_COM);\\r\\n    event LockfounderUpdate(uint256 PERCENT_FOR_FOUNDERS);\\r\\n    event StarblockUpdate(uint256 START_BLOCK);\\r\\n    event WithdrawRevised(address indexed user, uint256 block);\\r\\n    event DepositRevised(address indexed user, uint256 amount);\\r\\n    event StageStartSet(uint256[] blockStarts);\\r\\n    event StageEndSet(uint256[] blockEnds);\\r\\n    event UserFeeStageUpdate(uint256[] userFees);\\r\\n    event DevFeeStageUpdate(uint256[] devFees);\\r\\n    event DevDepFeeUpdate(uint256 devFeePerecnt);\\r\\n    event UserDepFeeUpdate(uint256 usrDepFees);\\r\\n\\r\\n    modifier nonDuplicated(IERC20 _lpToken) {\\r\\n        require(!poolExistence[_lpToken], \\\"MasterChef::nonDuplicated: duplicated\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier validatePoolByPid(uint256 _pid) {\\r\\n        require(_pid < poolInfo.length, \\\"Pool does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        SatoruFiToken _govToken,\\r\\n        address _devaddr,\\r\\n        address _liquidityaddr,\\r\\n        address _comfundaddr,\\r\\n        address _founderaddr,\\r\\n        uint256 _rewardPerBlock,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _halvingAfterBlock,\\r\\n        uint256 _userDepFee,\\r\\n        uint256 _devDepFee,\\r\\n        uint256[] memory _rewardMultiplier,\\r\\n        uint256[] memory _blockDeltaStartStage,\\r\\n        uint256[] memory _blockDeltaEndStage,\\r\\n        uint256[] memory _userFeeStage,\\r\\n        uint256[] memory _devFeeStage\\r\\n    ) public {\\r\\n        govToken = _govToken;\\r\\n        devaddr = _devaddr;\\r\\n        liquidityaddr = _liquidityaddr;\\r\\n        comfundaddr = _comfundaddr;\\r\\n        founderaddr = _founderaddr;\\r\\n        REWARD_PER_BLOCK = _rewardPerBlock;\\r\\n        START_BLOCK = _startBlock;\\r\\n        userDepFee = _userDepFee;\\r\\n        devDepFee = _devDepFee;\\r\\n        REWARD_MULTIPLIER = _rewardMultiplier;\\r\\n        blockDeltaStartStage = _blockDeltaStartStage;\\r\\n        blockDeltaEndStage = _blockDeltaEndStage;\\r\\n        userFeeStage = _userFeeStage;\\r\\n        devFeeStage = _devFeeStage;\\r\\n        for (uint256 i = 0; i < REWARD_MULTIPLIER.length - 1; i++) {\\r\\n            uint256 halvingAtBlock = _halvingAfterBlock.mul(i + 1).add(_startBlock).add(1);\\r\\n            HALVING_AT_BLOCK.push(halvingAtBlock);\\r\\n        }\\r\\n        FINISH_BONUS_AT_BLOCK = _halvingAfterBlock\\r\\n            .mul(REWARD_MULTIPLIER.length)\\r\\n            .add(_startBlock);\\r\\n        HALVING_AT_BLOCK.push(uint256(-1));\\r\\n    }\\r\\n\\r\\n    function poolLength() external view returns(uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    // Add a new lp to the pool. Can only be called by the owner.\\r\\n    function add(\\r\\n        uint256 _allocPoint,\\r\\n        IERC20 _lpToken,\\r\\n        bool _withUpdate\\r\\n    ) external onlyOwner nonDuplicated(_lpToken) {\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        uint256 lastRewardBlock =\\r\\n            block.number > START_BLOCK ? block.number : START_BLOCK;\\r\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\r\\n        poolExistence[_lpToken] = true;\\r\\n        poolInfo.push(\\r\\n            PoolInfo({\\r\\n                lpToken: _lpToken,\\r\\n                allocPoint: _allocPoint,\\r\\n                lastRewardBlock: lastRewardBlock,\\r\\n                accGovTokenPerShare: 0\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Update the given pool's SatoruFiToken allocation point. Can only be called by the owner.\\r\\n    function set(\\r\\n        uint256 _pid,\\r\\n        uint256 _allocPoint,\\r\\n        bool _withUpdate\\r\\n    ) external onlyOwner validatePoolByPid(_pid) {\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\r\\n            _allocPoint\\r\\n        );\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n    }\\r\\n\\r\\n    // Update reward variables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            updatePool(pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update reward variables of the given pool to be up-to-date.\\r\\n    function updatePool(uint256 _pid) public validatePoolByPid(_pid) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (block.number <= pool.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\r\\n        if (lpSupply == 0) {\\r\\n            pool.lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n        uint256 GovTokenForDev;\\r\\n        uint256 GovTokenForFarmer;\\r\\n        uint256 GovTokenForLP;\\r\\n        uint256 GovTokenForCom;\\r\\n        uint256 GovTokenForFounders;\\r\\n        (\\r\\n            GovTokenForDev,\\r\\n            GovTokenForFarmer,\\r\\n            GovTokenForLP,\\r\\n            GovTokenForCom,\\r\\n            GovTokenForFounders\\r\\n        ) = getPoolReward(pool.lastRewardBlock, block.number, pool.allocPoint);\\r\\n        govToken.mint(address(this), GovTokenForFarmer);\\r\\n        pool.accGovTokenPerShare = pool.accGovTokenPerShare.add(\\r\\n            GovTokenForFarmer.mul(1e12).div(lpSupply)\\r\\n        );\\r\\n        pool.lastRewardBlock = block.number;\\r\\n        if (GovTokenForDev > 0) {\\r\\n            govToken.mint(address(devaddr), GovTokenForDev);\\r\\n            //Dev fund has xx% locked during the starting bonus period. After which locked funds drip out linearly each block over 3 years.\\r\\n            if (block.number <= FINISH_BONUS_AT_BLOCK) {\\r\\n                govToken.lock(address(devaddr), GovTokenForDev.mul(75).div(100));\\r\\n            }\\r\\n        }\\r\\n        if (GovTokenForLP > 0) {\\r\\n            govToken.mint(liquidityaddr, GovTokenForLP);\\r\\n            //LP + Partnership fund has only xx% locked over time as most of it is needed early on for incentives and listings. The locked amount will drip out linearly each block after the bonus period.\\r\\n            if (block.number <= FINISH_BONUS_AT_BLOCK) {\\r\\n                govToken.lock(address(liquidityaddr), GovTokenForLP.mul(45).div(100));\\r\\n            }\\r\\n        }\\r\\n        if (GovTokenForCom > 0) {\\r\\n            govToken.mint(comfundaddr, GovTokenForCom);\\r\\n            //Community Fund has xx% locked during bonus period and then drips out linearly over 3 years.\\r\\n            if (block.number <= FINISH_BONUS_AT_BLOCK) {\\r\\n                govToken.lock(address(comfundaddr), GovTokenForCom.mul(85).div(100));\\r\\n            }\\r\\n        }\\r\\n        if (GovTokenForFounders > 0) {\\r\\n            govToken.mint(founderaddr, GovTokenForFounders);\\r\\n            //The Founders reward has xx% of their funds locked during the bonus period which then drip out linearly per block over 3 years.\\r\\n            if (block.number <= FINISH_BONUS_AT_BLOCK) {\\r\\n                govToken.lock(address(founderaddr), GovTokenForFounders.mul(95).div(100));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // |--------------------------------------|\\r\\n    // [20, 30, 40, 50, 60, 70, 80, 99999999]\\r\\n    // Return reward multiplier over the given _from to _to block.\\r\\n    function getMultiplier(uint256 _from, uint256 _to)\\r\\n    public\\r\\n    view\\r\\n    returns(uint256) {\\r\\n        uint256 result = 0;\\r\\n        if (_from < START_BLOCK || _to > FINISH_BONUS_AT_BLOCK) return 0;\\r\\n\\r\\n        for (uint256 i = 0; i < HALVING_AT_BLOCK.length; i++) {\\r\\n            uint256 endBlock = HALVING_AT_BLOCK[i];\\r\\n\\r\\n            if (_to <= endBlock) {\\r\\n                uint256 m = _to.sub(_from).mul(REWARD_MULTIPLIER[i]);\\r\\n                return result.add(m);\\r\\n            }\\r\\n\\r\\n            if (_from < endBlock) {\\r\\n                uint256 m = endBlock.sub(_from).mul(REWARD_MULTIPLIER[i]);\\r\\n                _from = endBlock;\\r\\n                result = result.add(m);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function getPoolReward(\\r\\n        uint256 _from,\\r\\n        uint256 _to,\\r\\n        uint256 _allocPoint\\r\\n    )\\r\\n    public\\r\\n    view\\r\\n    returns(\\r\\n        uint256 forDev,\\r\\n        uint256 forFarmer,\\r\\n        uint256 forLP,\\r\\n        uint256 forCom,\\r\\n        uint256 forFounders\\r\\n    ) {\\r\\n        uint256 multiplier = getMultiplier(_from, _to);\\r\\n        uint256 amount =\\r\\n            multiplier.mul(REWARD_PER_BLOCK).mul(_allocPoint).div(\\r\\n                totalAllocPoint\\r\\n            );\\r\\n        uint256 SatoruFiTokenCanMint = govToken.cap().sub(govToken.totalSupply());\\r\\n        uint256 mulFactor = PERCENT_FOR_DEV + PERCENT_FOR_LP + PERCENT_FOR_COM + PERCENT_FOR_FOUNDERS;\\r\\n        uint256 checkAmount = amount + amount.mul(mulFactor).div(100);\\r\\n\\r\\n        if (SatoruFiTokenCanMint < amount) {\\r\\n            forDev = 0;\\r\\n            forFarmer = SatoruFiTokenCanMint;\\r\\n            forLP = 0;\\r\\n            forCom = 0;\\r\\n            forFounders = 0;\\r\\n        } else if (SatoruFiTokenCanMint < checkAmount) {\\r\\n            forDev = 0;\\r\\n            forFarmer = amount;\\r\\n            forLP = 0;\\r\\n            forCom = 0;\\r\\n            forFounders = 0;\\r\\n        } else {\\r\\n            forDev = amount.mul(PERCENT_FOR_DEV).div(100);\\r\\n            forFarmer = amount;\\r\\n            forLP = amount.mul(PERCENT_FOR_LP).div(100);\\r\\n            forCom = amount.mul(PERCENT_FOR_COM).div(100);\\r\\n            forFounders = amount.mul(PERCENT_FOR_FOUNDERS).div(100);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // View function to see pending SatoruFiTokens on frontend.\\r\\n    function pendingReward(uint256 _pid, address _user)\\r\\n    external\\r\\n    view\\r\\n    validatePoolByPid(_pid)\\r\\n    returns(uint256) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accGovTokenPerShare = pool.accGovTokenPerShare;\\r\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\r\\n        if (block.number > pool.lastRewardBlock && lpSupply > 0) {\\r\\n            uint256 GovTokenForFarmer;\\r\\n            (, GovTokenForFarmer, , , ) = getPoolReward(\\r\\n                pool.lastRewardBlock,\\r\\n                block.number,\\r\\n                pool.allocPoint\\r\\n            );\\r\\n            accGovTokenPerShare = accGovTokenPerShare.add(\\r\\n                GovTokenForFarmer.mul(1e12).div(lpSupply)\\r\\n            );\\r\\n        }\\r\\n        return user.amount.mul(accGovTokenPerShare).div(1e12).sub(user.rewardDebt);\\r\\n    }\\r\\n\\r\\n    function claimRewards(uint256[] memory _pids) external {\\r\\n        for (uint256 i = 0; i < _pids.length; i++) {\\r\\n            claimReward(_pids[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimReward(uint256 _pid) public validatePoolByPid(_pid) {\\r\\n        updatePool(_pid);\\r\\n        _harvest(_pid);\\r\\n    }\\r\\n\\r\\n    // lock 95% of reward if it comes from bonus time\\r\\n    function _harvest(uint256 _pid) internal {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        if (user.amount > 0) {\\r\\n            uint256 pending =\\r\\n                user.amount.mul(pool.accGovTokenPerShare).div(1e12).sub(\\r\\n                    user.rewardDebt\\r\\n                );\\r\\n            uint256 masterBal = govToken.balanceOf(address(this));\\r\\n\\r\\n            if (pending > masterBal) {\\r\\n                pending = masterBal;\\r\\n            }\\r\\n\\r\\n            if (pending > 0) {\\r\\n                govToken.transfer(msg.sender, pending);\\r\\n                uint256 lockAmount = 0;\\r\\n                if (user.rewardDebtAtBlock <= FINISH_BONUS_AT_BLOCK) {\\r\\n                    lockAmount = pending.mul(PERCENT_LOCK_BONUS_REWARD).div(\\r\\n                        100\\r\\n                    );\\r\\n                    govToken.lock(msg.sender, lockAmount);\\r\\n                }\\r\\n\\r\\n                user.rewardDebtAtBlock = block.number;\\r\\n\\r\\n                emit SendSatoruFiTokenReward(msg.sender, _pid, pending, lockAmount);\\r\\n            }\\r\\n\\r\\n            user.rewardDebt = user.amount.mul(pool.accGovTokenPerShare).div(1e12);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getGlobalAmount(address _user) external view returns(uint256) {\\r\\n        UserGlobalInfo memory current = userGlobalInfo[_user];\\r\\n        return current.globalAmount;\\r\\n    }\\r\\n\\r\\n    function getGlobalRefAmount(address _user) external view returns(uint256) {\\r\\n        UserGlobalInfo memory current = userGlobalInfo[_user];\\r\\n        return current.globalRefAmount;\\r\\n    }\\r\\n\\r\\n    function getTotalRefs(address _user) external view returns(uint256) {\\r\\n        UserGlobalInfo memory current = userGlobalInfo[_user];\\r\\n        return current.totalReferals;\\r\\n    }\\r\\n\\r\\n    function getRefValueOf(address _user, address _user2)\\r\\n    external\\r\\n    view\\r\\n    returns(uint256) {\\r\\n        UserGlobalInfo storage current = userGlobalInfo[_user];\\r\\n        uint256 a = current.referrals[_user2];\\r\\n        return a;\\r\\n    }\\r\\n\\r\\n    // Deposit LP tokens to MasterChef for SatoruFiToken allocation.\\r\\n    function deposit(\\r\\n        uint256 _pid,\\r\\n        uint256 _amount,\\r\\n        address _ref\\r\\n    ) external nonReentrant validatePoolByPid(_pid) {\\r\\n        require(\\r\\n            _amount > 0,\\r\\n            \\\"MasterChef::deposit: amount must be greater than 0\\\"\\r\\n        );\\r\\n        // require(_ref != address(0), \\\"MasterChef::deposit: zero address for ref\\\");\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        UserInfo storage devr = userInfo[_pid][devaddr];\\r\\n        UserGlobalInfo storage refer = userGlobalInfo[_ref];\\r\\n        UserGlobalInfo storage current = userGlobalInfo[msg.sender];\\r\\n\\r\\n        if (refer.referrals[msg.sender] > 0) {\\r\\n            refer.referrals[msg.sender] = refer.referrals[msg.sender] + _amount;\\r\\n            refer.globalRefAmount = refer.globalRefAmount + _amount;\\r\\n        } else {\\r\\n            refer.referrals[msg.sender] = refer.referrals[msg.sender] + _amount;\\r\\n            refer.totalReferals = refer.totalReferals + 1;\\r\\n            refer.globalRefAmount = refer.globalRefAmount + _amount;\\r\\n        }\\r\\n\\r\\n        current.globalAmount =\\r\\n            current.globalAmount + _amount -\\r\\n            _amount.mul(userDepFee).div(10000);\\r\\n\\r\\n        updatePool(_pid);\\r\\n        _harvest(_pid);\\r\\n        pool.lpToken.safeTransferFrom(\\r\\n            address(msg.sender),\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n        if (user.amount == 0) {\\r\\n            user.rewardDebtAtBlock = block.number;\\r\\n        }\\r\\n        user.amount = user.amount.add(\\r\\n            _amount.sub(_amount.mul(userDepFee).div(10000))\\r\\n        );\\r\\n        user.rewardDebt = user.amount.mul(pool.accGovTokenPerShare).div(1e12);\\r\\n        devr.amount = devr.amount.add(\\r\\n            _amount.sub(_amount.mul(devDepFee).div(10000))\\r\\n        );\\r\\n        devr.rewardDebt = devr.amount.mul(pool.accGovTokenPerShare).div(1e12);\\r\\n        emit Deposit(msg.sender, _pid, _amount);\\r\\n        if (user.firstDepositBlock > 0) {} else {\\r\\n            user.firstDepositBlock = block.number;\\r\\n        }\\r\\n        user.lastDepositBlock = block.number;\\r\\n    }\\r\\n\\r\\n    // Withdraw LP tokens from MasterChef.\\r\\n    function withdraw(\\r\\n        uint256 _pid,\\r\\n        uint256 _amount,\\r\\n        address _ref\\r\\n    ) external nonReentrant validatePoolByPid(_pid) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        UserGlobalInfo storage refer = userGlobalInfo[_ref];\\r\\n        UserGlobalInfo storage current = userGlobalInfo[msg.sender];\\r\\n        require(user.amount >= _amount, \\\"MasterChef::withdraw: not good\\\");\\r\\n        if (_ref != address(0)) {\\r\\n            refer.referrals[msg.sender] = refer.referrals[msg.sender] - _amount;\\r\\n            refer.globalRefAmount = refer.globalRefAmount - _amount;\\r\\n        }\\r\\n        current.globalAmount = current.globalAmount - _amount;\\r\\n\\r\\n        updatePool(_pid);\\r\\n        _harvest(_pid);\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            user.amount = user.amount.sub(_amount);\\r\\n            if (user.lastWithdrawBlock > 0) {\\r\\n                user.blockdelta = block.number - user.lastWithdrawBlock;\\r\\n            } else {\\r\\n                user.blockdelta = block.number - user.firstDepositBlock;\\r\\n            }\\r\\n            if (\\r\\n                user.blockdelta == blockDeltaStartStage[0] ||\\r\\n                block.number == user.lastDepositBlock\\r\\n            ) {\\r\\n                //25% fee for withdrawals of LP tokens in the same block this is to prevent abuse from flashloans\\r\\n                pool.lpToken.safeTransfer(\\r\\n                    address(msg.sender),\\r\\n                    _amount.mul(userFeeStage[0]).div(100)\\r\\n                );\\r\\n                pool.lpToken.safeTransfer(\\r\\n                    address(devaddr),\\r\\n                    _amount.mul(devFeeStage[0]).div(100)\\r\\n                );\\r\\n            } else if (\\r\\n                user.blockdelta >= blockDeltaStartStage[1] &&\\r\\n                user.blockdelta <= blockDeltaEndStage[0]\\r\\n            ) {\\r\\n                //8% fee if a user deposits and withdraws in between same block and 59 minutes.\\r\\n                pool.lpToken.safeTransfer(\\r\\n                    address(msg.sender),\\r\\n                    _amount.mul(userFeeStage[1]).div(100)\\r\\n                );\\r\\n                pool.lpToken.safeTransfer(\\r\\n                    address(devaddr),\\r\\n                    _amount.mul(devFeeStage[1]).div(100)\\r\\n                );\\r\\n            } else if (\\r\\n                user.blockdelta >= blockDeltaStartStage[2] &&\\r\\n                user.blockdelta <= blockDeltaEndStage[1]\\r\\n            ) {\\r\\n                //4% fee if a user deposits and withdraws after 1 hour but before 1 day.\\r\\n                pool.lpToken.safeTransfer(\\r\\n                    address(msg.sender),\\r\\n                    _amount.mul(userFeeStage[2]).div(100)\\r\\n                );\\r\\n                pool.lpToken.safeTransfer(\\r\\n                    address(devaddr),\\r\\n                    _amount.mul(devFeeStage[2]).div(100)\\r\\n                );\\r\\n            } else if (\\r\\n                user.blockdelta >= blockDeltaStartStage[3] &&\\r\\n                user.blockdelta <= blockDeltaEndStage[2]\\r\\n            ) {\\r\\n                //2% fee if a user deposits and withdraws between after 1 day but before 3 days.\\r\\n                pool.lpToken.safeTransfer(\\r\\n                    address(msg.sender),\\r\\n                    _amount.mul(userFeeStage[3]).div(100)\\r\\n                );\\r\\n                pool.lpToken.safeTransfer(\\r\\n                    address(devaddr),\\r\\n                    _amount.mul(devFeeStage[3]).div(100)\\r\\n                );\\r\\n            } else if (\\r\\n                user.blockdelta > blockDeltaStartStage[4]\\r\\n            ) {\\r\\n                //1% fee if a user deposits and withdraws after 3 days\\r\\n                pool.lpToken.safeTransfer(\\r\\n                    address(msg.sender),\\r\\n                    _amount.mul(userFeeStage[4]).div(100)\\r\\n                );\\r\\n                pool.lpToken.safeTransfer(\\r\\n                    address(devaddr),\\r\\n                    _amount.mul(devFeeStage[4]).div(100)\\r\\n                );\\r\\n            // } else if (\\r\\n            //     user.blockdelta >= blockDeltaStartStage[5] &&\\r\\n            //     user.blockdelta <= blockDeltaEndStage[4]\\r\\n            // ) {\\r\\n            //     //0.5% fee if a user deposits and withdraws if the user withdraws after 5 days but before 2 weeks.\\r\\n            //     pool.lpToken.safeTransfer(\\r\\n            //         address(msg.sender),\\r\\n            //         _amount.mul(userFeeStage[5]).div(1000)\\r\\n            //     );\\r\\n            //     pool.lpToken.safeTransfer(\\r\\n            //         address(devaddr),\\r\\n            //         _amount.mul(devFeeStage[5]).div(1000)\\r\\n            //     );\\r\\n            // } else if (\\r\\n            //     user.blockdelta >= blockDeltaStartStage[6] &&\\r\\n            //     user.blockdelta <= blockDeltaEndStage[5]\\r\\n            // ) {\\r\\n            //     //0.25% fee if a user deposits and withdraws after 2 weeks.\\r\\n            //     pool.lpToken.safeTransfer(\\r\\n            //         address(msg.sender),\\r\\n            //         _amount.mul(userFeeStage[6]).div(10000)\\r\\n            //     );\\r\\n            //     pool.lpToken.safeTransfer(\\r\\n            //         address(devaddr),\\r\\n            //         _amount.mul(devFeeStage[6]).div(10000)\\r\\n            //     );\\r\\n            // } else if (user.blockdelta > blockDeltaStartStage[7]) {\\r\\n            //     //0.1% fee if a user deposits and withdraws after 4 weeks.\\r\\n            //     pool.lpToken.safeTransfer(\\r\\n            //         address(msg.sender),\\r\\n            //         _amount.mul(userFeeStage[7]).div(10000)\\r\\n            //     );\\r\\n            //     pool.lpToken.safeTransfer(\\r\\n            //         address(devaddr),\\r\\n            //         _amount.mul(devFeeStage[7]).div(10000)\\r\\n            //     );\\r\\n            }\\r\\n            user.rewardDebt = user.amount.mul(pool.accGovTokenPerShare).div(1e12);\\r\\n            emit Withdraw(msg.sender, _pid, _amount);\\r\\n            user.lastWithdrawBlock = block.number;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Withdraw without caring about rewards. EMERGENCY ONLY. This has the same 25% fee as same block withdrawals to prevent abuse of thisfunction.\\r\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant validatePoolByPid(_pid) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        //reordered from Sushi function to prevent risk of reentrancy\\r\\n        uint256 amountToSend = user.amount.mul(75).div(100);\\r\\n        uint256 devToSend = user.amount.mul(25).div(100);\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        user.rewardDebtAtBlock = 0;\\r\\n        user.lastWithdrawBlock = 0;\\r\\n        user.firstDepositBlock = 0;\\r\\n        user.blockdelta = 0;\\r\\n        user.lastDepositBlock = 0;\\r\\n        pool.lpToken.safeTransfer(address(msg.sender), amountToSend);\\r\\n        pool.lpToken.safeTransfer(address(devaddr), devToSend);\\r\\n        emit EmergencyWithdraw(msg.sender, _pid, amountToSend);\\r\\n    }\\r\\n\\r\\n    // Safe GovToken transfer function, just in case if rounding error causes pool to not have enough GovTokens.\\r\\n    function safeGovTokenTransfer(address _to, uint256 _amount) internal {\\r\\n        uint256 govTokenBal = govToken.balanceOf(address(this));\\r\\n        bool transferSuccess = false;\\r\\n        if (_amount > govTokenBal) {\\r\\n            transferSuccess = govToken.transfer(_to, govTokenBal);\\r\\n        } else {\\r\\n            transferSuccess = govToken.transfer(_to, _amount);\\r\\n        }\\r\\n        require(transferSuccess, \\\"MasterChef::safeGovTokenTransfer: transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    // Update dev address by the previous dev.\\r\\n    function dev(address _devaddr) external onlyAuthorized {\\r\\n        devaddr = _devaddr;\\r\\n        emit DevAddressChange(devaddr);\\r\\n    }\\r\\n\\r\\n    // Update Finish Bonus Block\\r\\n    function bonusFinishUpdate(uint256 _newFinish) external onlyAuthorized {\\r\\n        FINISH_BONUS_AT_BLOCK = _newFinish;\\r\\n        emit BonusFinishUpdate(FINISH_BONUS_AT_BLOCK);\\r\\n    }\\r\\n\\r\\n    // Update Halving At Block\\r\\n    function halvingUpdate(uint256[] memory _newHalving) external onlyAuthorized {\\r\\n        HALVING_AT_BLOCK = _newHalving;\\r\\n        emit HalvingUpdate(HALVING_AT_BLOCK);\\r\\n    }\\r\\n\\r\\n    // Update Liquidityaddr\\r\\n    function lpUpdate(address _newLP) external onlyAuthorized {\\r\\n        liquidityaddr = _newLP;\\r\\n        emit LpAddressUpdate(liquidityaddr);\\r\\n    }\\r\\n\\r\\n    // Update comfundaddr\\r\\n    function comUpdate(address _newCom) external onlyAuthorized {\\r\\n        comfundaddr = _newCom;\\r\\n        emit ComAddressUpdate(comfundaddr);\\r\\n    }\\r\\n\\r\\n    // Update founderaddr\\r\\n    function founderUpdate(address _newFounder) external onlyAuthorized {\\r\\n        founderaddr = _newFounder;\\r\\n        emit FounderAddressUpdate(founderaddr);\\r\\n    }\\r\\n\\r\\n    // Update Reward Per Block\\r\\n    function rewardUpdate(uint256 _newReward) external onlyAuthorized {\\r\\n        REWARD_PER_BLOCK = _newReward;\\r\\n        emit RewardUpdate(REWARD_PER_BLOCK);\\r\\n    }\\r\\n\\r\\n    // Update Rewards Mulitplier Array\\r\\n    function rewardMulUpdate(uint256[] memory _newMulReward)\\r\\n    external\\r\\n    onlyAuthorized {\\r\\n        REWARD_MULTIPLIER = _newMulReward;\\r\\n        emit RewardMulUpdate(REWARD_MULTIPLIER);\\r\\n    }\\r\\n\\r\\n    // Update % lock for general users\\r\\n    function lockUpdate(uint256 _newlock) external onlyAuthorized {\\r\\n        PERCENT_LOCK_BONUS_REWARD = _newlock;\\r\\n        emit LockUpdate(PERCENT_LOCK_BONUS_REWARD);\\r\\n    }\\r\\n\\r\\n    // Update % lock for dev\\r\\n    function lockdevUpdate(uint256 _newdevlock) external onlyAuthorized {\\r\\n        PERCENT_FOR_DEV = _newdevlock;\\r\\n        emit LockdevUpdate(PERCENT_FOR_DEV);\\r\\n    }\\r\\n\\r\\n    // Update % lock for LP\\r\\n    function locklpUpdate(uint256 _newlplock) external onlyAuthorized {\\r\\n        PERCENT_FOR_LP = _newlplock;\\r\\n        emit LocklpUpdate(PERCENT_FOR_LP);\\r\\n    }\\r\\n\\r\\n    // Update % lock for COM\\r\\n    function lockcomUpdate(uint256 _newcomlock) external onlyAuthorized {\\r\\n        PERCENT_FOR_COM = _newcomlock;\\r\\n        emit LockcomUpdate(PERCENT_FOR_COM);\\r\\n    }\\r\\n\\r\\n    // Update % lock for Founders\\r\\n    function lockfounderUpdate(uint256 _newfounderlock) external onlyAuthorized {\\r\\n        PERCENT_FOR_FOUNDERS = _newfounderlock;\\r\\n        emit LockfounderUpdate(PERCENT_FOR_FOUNDERS);\\r\\n    }\\r\\n\\r\\n    // Update START_BLOCK\\r\\n    function starblockUpdate(uint256 _newstarblock) external onlyAuthorized {\\r\\n        START_BLOCK = _newstarblock;\\r\\n        emit StarblockUpdate(START_BLOCK);\\r\\n    }\\r\\n\\r\\n    function getNewRewardPerBlock(uint256 pid1) external view returns(uint256) {\\r\\n        uint256 multiplier = getMultiplier(block.number - 1, block.number);\\r\\n        return\\r\\n        multiplier\\r\\n            .mul(REWARD_PER_BLOCK)\\r\\n            .mul(poolInfo[pid1].allocPoint)\\r\\n            .div(totalAllocPoint);\\r\\n    }\\r\\n\\r\\n    function userDelta(uint256 _pid) external view validatePoolByPid(_pid) returns(uint256) {\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        if (user.lastWithdrawBlock > 0) {\\r\\n            uint256 estDelta = block.number - user.lastWithdrawBlock;\\r\\n            return estDelta;\\r\\n        } else {\\r\\n            uint256 estDelta = block.number - user.firstDepositBlock;\\r\\n            return estDelta;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reviseWithdraw(\\r\\n        uint256 _pid,\\r\\n        address _user,\\r\\n        uint256 _block\\r\\n    ) external onlyAuthorized() validatePoolByPid(_pid) {\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        user.lastWithdrawBlock = _block;\\r\\n        emit WithdrawRevised(_user, _block);\\r\\n    }\\r\\n\\r\\n    function reviseDeposit(\\r\\n        uint256 _pid,\\r\\n        address _user,\\r\\n        uint256 _block\\r\\n    ) external onlyAuthorized() validatePoolByPid(_pid) {\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        user.firstDepositBlock = _block;\\r\\n        emit DepositRevised(_user, _block);\\r\\n    }\\r\\n\\r\\n    function setStageStarts(uint256[] memory _blockStarts)\\r\\n    external\\r\\n    onlyAuthorized() {\\r\\n        blockDeltaStartStage = _blockStarts;\\r\\n        emit StageStartSet(blockDeltaStartStage);\\r\\n    }\\r\\n\\r\\n    function setStageEnds(uint256[] memory _blockEnds) external onlyAuthorized() {\\r\\n        blockDeltaEndStage = _blockEnds;\\r\\n        emit StageEndSet(blockDeltaEndStage);\\r\\n    }\\r\\n\\r\\n    function setUserFeeStage(uint256[] memory _userFees)\\r\\n    external\\r\\n    onlyAuthorized() {\\r\\n        userFeeStage = _userFees;\\r\\n        emit UserFeeStageUpdate(userFeeStage);\\r\\n    }\\r\\n\\r\\n    function setDevFeeStage(uint256[] memory _devFees) external onlyAuthorized() {\\r\\n        devFeeStage = _devFees;\\r\\n        emit DevFeeStageUpdate(userFeeStage);\\r\\n    }\\r\\n\\r\\n    function setDevDepFee(uint256 _devDepFees) external onlyAuthorized() {\\r\\n        devDepFee = _devDepFees;\\r\\n        emit DevDepFeeUpdate(devDepFee);\\r\\n    }\\r\\n\\r\\n    function setUserDepFee(uint256 _usrDepFees) external onlyAuthorized() {\\r\\n        userDepFee = _usrDepFees;\\r\\n        emit UserDepFeeUpdate(userDepFee);\\r\\n    }\\r\\n\\r\\n    function reclaimTokenOwnership(address _newOwner) external onlyAuthorized() {\\r\\n        govToken.transferOwnership(_newOwner);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/SatoruFiToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./Authorizable.sol\\\";\\r\\n\\r\\n// The SatoruFiToken\\r\\ncontract SatoruFiToken is ERC20, Ownable, Authorizable {\\r\\n    uint256 private _cap;\\r\\n    uint256 private _totalLock;\\r\\n    uint256 public lockFromBlock;\\r\\n    uint256 public lockToBlock;\\r\\n    uint256 public manualMintLimit;\\r\\n    uint256 public manualMinted = 0;\\r\\n\\r\\n    mapping(address => uint256) private _locks;\\r\\n    mapping(address => uint256) private _lastUnlockBlock;\\r\\n\\r\\n    event Lock(address indexed to, uint256 value);\\r\\n    event CapUpdate(uint256 _cap);\\r\\n    event LockFromBlockUpdate(uint256 _block);\\r\\n    event LockToBlockUpdate(uint256 _block);\\r\\n\\r\\n    constructor(\\r\\n      string memory _name,\\r\\n      string memory _symbol,\\r\\n      uint256 cap_,\\r\\n      uint256 _manualMintLimit,\\r\\n      uint256 _lockFromBlock,\\r\\n      uint256 _lockToBlock\\r\\n    ) public ERC20(_name, _symbol) {\\r\\n        _cap = cap_;\\r\\n        manualMintLimit = _manualMintLimit;\\r\\n        lockFromBlock = _lockFromBlock;\\r\\n        lockToBlock = _lockToBlock;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the cap on the token's total supply.\\r\\n     */\\r\\n    function cap() external view returns (uint256) {\\r\\n        return _cap;\\r\\n    }\\r\\n\\r\\n    // Update the total cap - can go up or down but wont destroy previous tokens.\\r\\n    function capUpdate(uint256 _newCap) external onlyAuthorized {\\r\\n        _cap = _newCap;\\r\\n        emit CapUpdate(_cap);\\r\\n    }\\r\\n\\r\\n    // Update the lockFromBlock\\r\\n    function lockFromUpdate(uint256 _newLockFrom) external onlyAuthorized {\\r\\n        lockFromBlock = _newLockFrom;\\r\\n        emit LockFromBlockUpdate(lockFromBlock);\\r\\n    }\\r\\n\\r\\n    // Update the lockToBlock\\r\\n    function lockToUpdate(uint256 _newLockTo) external onlyAuthorized {\\r\\n        lockToBlock = _newLockTo;\\r\\n        emit LockToBlockUpdate(lockToBlock);\\r\\n    }\\r\\n\\r\\n    function unlockedSupply() external view returns (uint256) {\\r\\n        return totalSupply().sub(_totalLock);\\r\\n    }\\r\\n\\r\\n    function lockedSupply() external view returns (uint256) {\\r\\n        return totalLock();\\r\\n    }\\r\\n\\r\\n    function circulatingSupply() external view returns (uint256) {\\r\\n        return totalSupply();\\r\\n    }\\r\\n\\r\\n    function totalLock() public view returns (uint256) {\\r\\n        return _totalLock;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - minted tokens must not cause the total supply to go over the cap.\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual override {\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        if (from == address(0)) {\\r\\n            // When minting tokens\\r\\n            require(\\r\\n                totalSupply().add(amount) <= _cap,\\r\\n                \\\"ERC20Capped: cap exceeded\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual override {\\r\\n        super._transfer(sender, recipient, amount);\\r\\n        _moveDelegates(_delegates[sender], _delegates[recipient], amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterBreeder).\\r\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\r\\n        _mint(_to, _amount);\\r\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\r\\n    }\\r\\n\\r\\n    function manualMint(address _to, uint256 _amount) external onlyAuthorized {\\r\\n        require(manualMinted < manualMintLimit, \\\"ERC20: manualMinted greater than manualMintLimit\\\");\\r\\n        _mint(_to, _amount);\\r\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\r\\n        manualMinted = manualMinted.add(_amount);\\r\\n    }\\r\\n\\r\\n    function totalBalanceOf(address _holder) external view returns (uint256) {\\r\\n        return _locks[_holder].add(balanceOf(_holder));\\r\\n    }\\r\\n\\r\\n    function lockOf(address _holder) external view returns (uint256) {\\r\\n        return _locks[_holder];\\r\\n    }\\r\\n\\r\\n    function lastUnlockBlock(address _holder) external view returns (uint256) {\\r\\n        return _lastUnlockBlock[_holder];\\r\\n    }\\r\\n\\r\\n    function lock(address _holder, uint256 _amount) external onlyOwner {\\r\\n        require(_holder != address(0), \\\"ERC20: lock to the zero address\\\");\\r\\n        require(\\r\\n            _amount <= balanceOf(_holder),\\r\\n            \\\"ERC20: lock amount over balance\\\"\\r\\n        );\\r\\n\\r\\n        _transfer(_holder, address(this), _amount);\\r\\n\\r\\n        _locks[_holder] = _locks[_holder].add(_amount);\\r\\n        _totalLock = _totalLock.add(_amount);\\r\\n        if (_lastUnlockBlock[_holder] < lockFromBlock) {\\r\\n            _lastUnlockBlock[_holder] = lockFromBlock;\\r\\n        }\\r\\n        emit Lock(_holder, _amount);\\r\\n    }\\r\\n\\r\\n    function canUnlockAmount(address _holder) public view returns (uint256) {\\r\\n        if (block.number < lockFromBlock) {\\r\\n            return 0;\\r\\n        } else if (block.number >= lockToBlock) {\\r\\n            return _locks[_holder];\\r\\n        } else {\\r\\n            uint256 releaseBlock = block.number.sub(_lastUnlockBlock[_holder]);\\r\\n            uint256 numberLockBlock =\\r\\n                lockToBlock.sub(_lastUnlockBlock[_holder]);\\r\\n            return _locks[_holder].mul(releaseBlock).div(numberLockBlock);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function unlock() external {\\r\\n        require(_locks[msg.sender] > 0, \\\"ERC20: cannot unlock\\\");\\r\\n\\r\\n        uint256 amount = canUnlockAmount(msg.sender);\\r\\n        // just for sure\\r\\n        if (amount > balanceOf(address(this))) {\\r\\n            amount = balanceOf(address(this));\\r\\n        }\\r\\n        _transfer(address(this), msg.sender, amount);\\r\\n        _locks[msg.sender] = _locks[msg.sender].sub(amount);\\r\\n        _lastUnlockBlock[msg.sender] = block.number;\\r\\n        _totalLock = _totalLock.sub(amount);\\r\\n    }\\r\\n\\r\\n    // This function is for dev address migrate all balance to a multi sig address\\r\\n    function transferAll(address _to) external {\\r\\n        _locks[_to] = _locks[_to].add(_locks[msg.sender]);\\r\\n\\r\\n        if (_lastUnlockBlock[_to] < lockFromBlock) {\\r\\n            _lastUnlockBlock[_to] = lockFromBlock;\\r\\n        }\\r\\n\\r\\n        if (_lastUnlockBlock[_to] < _lastUnlockBlock[msg.sender]) {\\r\\n            _lastUnlockBlock[_to] = _lastUnlockBlock[msg.sender];\\r\\n        }\\r\\n\\r\\n        _locks[msg.sender] = 0;\\r\\n        _lastUnlockBlock[msg.sender] = 0;\\r\\n\\r\\n        _transfer(msg.sender, _to, balanceOf(msg.sender));\\r\\n    }\\r\\n\\r\\n    // Copied and modified from YAM code:\\r\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\\r\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\\r\\n    // Which is copied and modified from COMPOUND:\\r\\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\\r\\n\\r\\n    /// @dev A record of each accounts delegate\\r\\n    mapping(address => address) internal _delegates;\\r\\n\\r\\n    /// @notice A checkpoint for marking number of votes from a given block\\r\\n    struct Checkpoint {\\r\\n        uint32 fromBlock;\\r\\n        uint256 votes;\\r\\n    }\\r\\n\\r\\n    /// @notice A record of votes checkpoints for each account, by index\\r\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\r\\n\\r\\n    /// @notice The number of checkpoints for each account\\r\\n    mapping(address => uint32) public numCheckpoints;\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the contract's domain\\r\\n    bytes32 public constant DOMAIN_TYPEHASH =\\r\\n        keccak256(\\r\\n            \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\r\\n        );\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\r\\n    bytes32 public constant DELEGATION_TYPEHASH =\\r\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\r\\n\\r\\n    /// @notice A record of states for signing / validating signatures\\r\\n    mapping(address => uint256) public nonces;\\r\\n\\r\\n    /// @notice An event thats emitted when an account changes its delegate\\r\\n    event DelegateChanged(\\r\\n        address indexed delegator,\\r\\n        address indexed fromDelegate,\\r\\n        address indexed toDelegate\\r\\n    );\\r\\n\\r\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\r\\n    event DelegateVotesChanged(\\r\\n        address indexed delegate,\\r\\n        uint256 previousBalance,\\r\\n        uint256 newBalance\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\r\\n     * @param delegator The address to get delegatee for\\r\\n     */\\r\\n    function delegates(address delegator) external view returns (address) {\\r\\n        return _delegates[delegator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     */\\r\\n    function delegate(address delegatee) external {\\r\\n        return _delegate(msg.sender, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegates votes from signatory to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     * @param nonce The contract state required to match the signature\\r\\n     * @param expiry The time at which to expire the signature\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function delegateBySig(\\r\\n        address delegatee,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external {\\r\\n        bytes32 domainSeparator =\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    DOMAIN_TYPEHASH,\\r\\n                    keccak256(bytes(name())),\\r\\n                    getChainId(),\\r\\n                    address(this)\\r\\n                )\\r\\n            );\\r\\n\\r\\n        bytes32 structHash =\\r\\n            keccak256(\\r\\n                abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\\r\\n            );\\r\\n\\r\\n        bytes32 digest =\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\r\\n            );\\r\\n\\r\\n        address signatory = ecrecover(digest, v, r, s);\\r\\n        require(\\r\\n            signatory != address(0),\\r\\n            \\\"SatoruFiToken::delegateBySig: invalid signature\\\"\\r\\n        );\\r\\n        require(\\r\\n            nonce == nonces[signatory]++,\\r\\n            \\\"SatoruFiToken::delegateBySig: invalid nonce\\\"\\r\\n        );\\r\\n        require(now <= expiry, \\\"SatoruFiToken::delegateBySig: signature expired\\\");\\r\\n        return _delegate(signatory, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current votes balance for `account`\\r\\n     * @param account The address to get votes balance\\r\\n     * @return The number of current votes for `account`\\r\\n     */\\r\\n    function getCurrentVotes(address account) external view returns (uint256) {\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        return\\r\\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the prior number of votes for an account as of a block number\\r\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\r\\n     * @param account The address of the account to check\\r\\n     * @param blockNumber The block number to get the vote balance at\\r\\n     * @return The number of votes the account had as of the given block\\r\\n     */\\r\\n    function getPriorVotes(address account, uint256 blockNumber)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            blockNumber < block.number,\\r\\n            \\\"SatoruFiToken::getPriorVotes: not yet determined\\\"\\r\\n        );\\r\\n\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        if (nCheckpoints == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // First check most recent balance\\r\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\r\\n            return checkpoints[account][nCheckpoints - 1].votes;\\r\\n        }\\r\\n\\r\\n        // Next check implicit zero balance\\r\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint32 lower = 0;\\r\\n        uint32 upper = nCheckpoints - 1;\\r\\n        while (upper > lower) {\\r\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\r\\n            Checkpoint memory cp = checkpoints[account][center];\\r\\n            if (cp.fromBlock == blockNumber) {\\r\\n                return cp.votes;\\r\\n            } else if (cp.fromBlock < blockNumber) {\\r\\n                lower = center;\\r\\n            } else {\\r\\n                upper = center - 1;\\r\\n            }\\r\\n        }\\r\\n        return checkpoints[account][lower].votes;\\r\\n    }\\r\\n\\r\\n    function _delegate(address delegator, address delegatee) internal {\\r\\n        address currentDelegate = _delegates[delegator];\\r\\n        uint256 delegatorBalance = balanceOf(delegator);\\r\\n        _delegates[delegator] = delegatee;\\r\\n\\r\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\r\\n\\r\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\r\\n    }\\r\\n\\r\\n    function _moveDelegates(\\r\\n        address srcRep,\\r\\n        address dstRep,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (srcRep != dstRep && amount > 0) {\\r\\n            if (srcRep != address(0)) {\\r\\n                // decrease old representative\\r\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\r\\n                uint256 srcRepOld =\\r\\n                    srcRepNum > 0\\r\\n                        ? checkpoints[srcRep][srcRepNum - 1].votes\\r\\n                        : 0;\\r\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\r\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\r\\n            }\\r\\n\\r\\n            if (dstRep != address(0)) {\\r\\n                // increase new representative\\r\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\r\\n                uint256 dstRepOld =\\r\\n                    dstRepNum > 0\\r\\n                        ? checkpoints[dstRep][dstRepNum - 1].votes\\r\\n                        : 0;\\r\\n                uint256 dstRepNew = dstRepOld.add(amount);\\r\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _writeCheckpoint(\\r\\n        address delegatee,\\r\\n        uint32 nCheckpoints,\\r\\n        uint256 oldVotes,\\r\\n        uint256 newVotes\\r\\n    ) internal {\\r\\n        uint32 blockNumber =\\r\\n            safe32(\\r\\n                block.number,\\r\\n                \\\"SatoruFiToken::_writeCheckpoint: block number exceeds 32 bits\\\"\\r\\n            );\\r\\n\\r\\n        if (\\r\\n            nCheckpoints > 0 &&\\r\\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\\r\\n        ) {\\r\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\r\\n        } else {\\r\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\\r\\n                blockNumber,\\r\\n                newVotes\\r\\n            );\\r\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\r\\n        }\\r\\n\\r\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\r\\n    }\\r\\n\\r\\n    function safe32(uint256 n, string memory errorMessage)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint32)\\r\\n    {\\r\\n        require(n < 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function getChainId() internal pure returns (uint256) {\\r\\n        uint256 chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        return chainId;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/Authorizable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Authorizable is Ownable {\\r\\n    mapping(address => bool) public authorized;\\r\\n\\r\\n    modifier onlyAuthorized() {\\r\\n        require(authorized[msg.sender] || owner() == msg.sender);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function addAuthorized(address _toAdd) external onlyOwner {\\r\\n        authorized[_toAdd] = true;\\r\\n    }\\r\\n\\r\\n    function removeAuthorized(address _toRemove) external onlyOwner {\\r\\n        require(_toRemove != msg.sender);\\r\\n        authorized[_toRemove] = false;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract SatoruFiToken\",\"name\":\"_govToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_comfundaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_founderaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_halvingAfterBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userDepFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devDepFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_blockDeltaStartStage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_blockDeltaEndStage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_userFeeStage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_devFeeStage\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"BonusFinishUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comAddress\",\"type\":\"address\"}],\"name\":\"ComAddressUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositRevised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"}],\"name\":\"DevAddressChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devFeePerecnt\",\"type\":\"uint256\"}],\"name\":\"DevDepFeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"devFees\",\"type\":\"uint256[]\"}],\"name\":\"DevFeeStageUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"founderAddress\",\"type\":\"address\"}],\"name\":\"FounderAddressUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"block\",\"type\":\"uint256[]\"}],\"name\":\"HalvingUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PERCENT_LOCK_BONUS_REWARD\",\"type\":\"uint256\"}],\"name\":\"LockUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PERCENT_FOR_COM\",\"type\":\"uint256\"}],\"name\":\"LockcomUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PERCENT_FOR_DEV\",\"type\":\"uint256\"}],\"name\":\"LockdevUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PERCENT_FOR_FOUNDERS\",\"type\":\"uint256\"}],\"name\":\"LockfounderUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PERCENT_FOR_LP\",\"type\":\"uint256\"}],\"name\":\"LocklpUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"}],\"name\":\"LpAddressUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardMultiplier\",\"type\":\"uint256[]\"}],\"name\":\"RewardMulUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"name\":\"SendSatoruFiTokenReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"blockEnds\",\"type\":\"uint256[]\"}],\"name\":\"StageEndSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"blockStarts\",\"type\":\"uint256[]\"}],\"name\":\"StageStartSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"START_BLOCK\",\"type\":\"uint256\"}],\"name\":\"StarblockUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usrDepFees\",\"type\":\"uint256\"}],\"name\":\"UserDepFeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"userFees\",\"type\":\"uint256[]\"}],\"name\":\"UserFeeStageUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"WithdrawRevised\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FINISH_BONUS_AT_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"HALVING_AT_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_FOR_COM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_FOR_DEV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_FOR_FOUNDERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_FOR_LP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_LOCK_BONUS_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REWARD_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockDeltaEndStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockDeltaStartStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFinish\",\"type\":\"uint256\"}],\"name\":\"bonusFinishUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCom\",\"type\":\"address\"}],\"name\":\"comUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comfundaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devDepFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"devFeeStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFounder\",\"type\":\"address\"}],\"name\":\"founderUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founderaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getGlobalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getGlobalRefAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid1\",\"type\":\"uint256\"}],\"name\":\"getNewRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"getPoolReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"forDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forFarmer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forCom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forFounders\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user2\",\"type\":\"address\"}],\"name\":\"getRefValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalRefs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govToken\",\"outputs\":[{\"internalType\":\"contract SatoruFiToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newHalving\",\"type\":\"uint256[]\"}],\"name\":\"halvingUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newlock\",\"type\":\"uint256\"}],\"name\":\"lockUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newcomlock\",\"type\":\"uint256\"}],\"name\":\"lockcomUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newdevlock\",\"type\":\"uint256\"}],\"name\":\"lockdevUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newfounderlock\",\"type\":\"uint256\"}],\"name\":\"lockfounderUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newlplock\",\"type\":\"uint256\"}],\"name\":\"locklpUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLP\",\"type\":\"address\"}],\"name\":\"lpUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolId1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accGovTokenPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"reclaimTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toRemove\",\"type\":\"address\"}],\"name\":\"removeAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"reviseDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"reviseWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newMulReward\",\"type\":\"uint256[]\"}],\"name\":\"rewardMulUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newReward\",\"type\":\"uint256\"}],\"name\":\"rewardUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devDepFees\",\"type\":\"uint256\"}],\"name\":\"setDevDepFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_devFees\",\"type\":\"uint256[]\"}],\"name\":\"setDevFeeStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_blockEnds\",\"type\":\"uint256[]\"}],\"name\":\"setStageEnds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_blockStarts\",\"type\":\"uint256[]\"}],\"name\":\"setStageStarts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usrDepFees\",\"type\":\"uint256\"}],\"name\":\"setUserDepFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_userFees\",\"type\":\"uint256[]\"}],\"name\":\"setUserFeeStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newstarblock\",\"type\":\"uint256\"}],\"name\":\"starblockUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"userDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userDepFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userFeeStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userGlobalInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"globalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalRefAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebtAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstDepositBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockdelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MasterChef","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f4db0f33aa06f7f127030770ab00a032aa3c94dd00000000000000000000000077bcd8ef323142925538aa9c6c363d47d5dace11000000000000000000000000578a6afec0d83b894e5335e8b407b08433969119000000000000000000000000578a6afec0d83b894e5335e8b407b08433969119000000000000000000000000578a6afec0d83b894e5335e8b407b08433969119000000000000000000000000000000000000000000000001a055690d9db800000000000000000000000000000000000000000000000000000000000000d429ac000000000000000000000000000000000000000000000000000000000024e460000000000000000000000000000000000000000000000000000000000000004b00000000000000000000000000000000000000000000000000000000000026c500000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000004600000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000001c2000000000000000000000000000000000000000000000000000000000000054600000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000012b0000000000000000000000000000000000000000000000000000000000001c1f000000000000000000000000000000000000000000000000000000000000545f0000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000005cersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}