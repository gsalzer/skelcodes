{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\nabstract contract StabilityFeeTreasuryLike {\r\n    function modifyParameters(bytes32, uint256) virtual external;\r\n}\r\nabstract contract OracleRelayerLike {\r\n    function redemptionPrice() virtual public returns (uint256);\r\n}\r\n\r\ncontract SFTreasuryCoreParamAdjuster {\r\n    // --- Authorities ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"SFTreasuryCoreParamAdjuster/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Structs ---\r\n    struct FundedFunction {\r\n        // Amount of function calls for which a funded function should request payment\r\n        uint256 latestExpectedCalls;\r\n        // Max reward per call requested by a funded function\r\n        uint256 latestMaxReward;      // [wad]\r\n    }\r\n\r\n    // --- Variables ---\r\n    // Minimum delay between two consecutive recomputeTreasuryParameters calls\r\n    uint256                  public updateDelay;                       // [seconds]\r\n    // Last timestamp when setNewTreasuryParameters was called\r\n    uint256                  public lastUpdateTime;                    // [unit timestamp]\r\n    // The dynamically calculated max treasury capacity\r\n    uint256                  public dynamicRawTreasuryCapacity;        // [wad]\r\n    // Multiplier applied to dynamicRawTreasuryCapacity before setting the new treasury capacity in the SF treasury contract\r\n    uint256                  public treasuryCapacityMultiplier;        // [hundred]\r\n    // The smallest treasury capacity to set in the SF treasury\r\n    uint256                  public minTreasuryCapacity;               // [rad]\r\n    // Multiplier applied to dynamicRawTreasuryCapacity in order to determine the minimumFundsRequired value to set in the SF treasury\r\n    uint256                  public minimumFundsMultiplier;            // [hundred]\r\n    // The smallest value that can be set for the minimumFundsRequired var inside the SF treasury\r\n    uint256                  public minMinimumFunds;                   // [rad]\r\n    // Multiplier applied to dynamicRawTreasuryCapacity in order to determine the pullFundsMinThreshold value to set in the SF treasury\r\n    uint256                  public pullFundsMinThresholdMultiplier;   // [hundred]\r\n    // The smallest value that can be set for the pullFundsMinThreshold var inside the SF treasury\r\n    uint256                  public minPullFundsThreshold;             // [rad]\r\n\r\n    // Mapping of whitelisted reward adjusters that can call adjustMaxReward\r\n    mapping(address => uint256) public rewardAdjusters;\r\n\r\n    // Funded functions taken into account when computing the SF treasury params\r\n    mapping(address => mapping(bytes4 => FundedFunction)) public whitelistedFundedFunctions;\r\n\r\n    // The address of the treasury contract\r\n    StabilityFeeTreasuryLike public treasury;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event AddRewardAdjuster(address adjuster);\r\n    event RemoveRewardAdjuster(address adjuster);\r\n    event ModifyParameters(bytes32 parameter, uint256 val);\r\n    event ModifyParameters(bytes32 parameter, address addr);\r\n    event ModifyParameters(address targetContract, bytes4 targetFunction, bytes32 parameter, uint256 val);\r\n    event AddFundedFunction(address targetContract, bytes4 targetFunction, uint256 latestExpectedCalls);\r\n    event RemoveFundedFunction(address targetContract, bytes4 targetFunction);\r\n    event AdjustMaxReward(address targetContract, bytes4 targetFunction, uint256 newMaxReward, uint256 dynamicCapacity);\r\n    event UpdateTreasuryParameters(uint256 newMinPullFundsThreshold, uint256 newMinimumFunds, uint256 newTreasuryCapacity);\r\n\r\n    constructor(\r\n      address treasury_,\r\n      uint256 updateDelay_,\r\n      uint256 lastUpdateTime_,\r\n      uint256 treasuryCapacityMultiplier_,\r\n      uint256 minTreasuryCapacity_,\r\n      uint256 minimumFundsMultiplier_,\r\n      uint256 minMinimumFunds_,\r\n      uint256 pullFundsMinThresholdMultiplier_,\r\n      uint256 minPullFundsThreshold_\r\n    ) public {\r\n        require(treasury_ != address(0), \"SFTreasuryCoreParamAdjuster/null-treasury\");\r\n\r\n        require(updateDelay_ > 0, \"SFTreasuryCoreParamAdjuster/null-update-delay\");\r\n        require(lastUpdateTime_ > now, \"SFTreasuryCoreParamAdjuster/invalid-last-update-time\");\r\n        require(both(treasuryCapacityMultiplier_ >= HUNDRED, treasuryCapacityMultiplier_ <= THOUSAND), \"SFTreasuryCoreParamAdjuster/invalid-capacity-mul\");\r\n        require(minTreasuryCapacity_ > 0, \"SFTreasuryCoreParamAdjuster/invalid-min-capacity\");\r\n        require(both(minimumFundsMultiplier_ >= HUNDRED, minimumFundsMultiplier_ <= THOUSAND), \"SFTreasuryCoreParamAdjuster/invalid-min-funds-mul\");\r\n        require(minMinimumFunds_ > 0, \"SFTreasuryCoreParamAdjuster/null-min-minimum-funds\");\r\n        require(both(pullFundsMinThresholdMultiplier_ >= HUNDRED, pullFundsMinThresholdMultiplier_ <= THOUSAND), \"SFTreasuryCoreParamAdjuster/invalid-pull-funds-threshold-mul\");\r\n        require(minPullFundsThreshold_ > 0, \"SFTreasuryCoreParamAdjuster/null-min-pull-funds-threshold\");\r\n\r\n        authorizedAccounts[msg.sender]   = 1;\r\n\r\n        treasury                         = StabilityFeeTreasuryLike(treasury_);\r\n\r\n        updateDelay                      = updateDelay_;\r\n        lastUpdateTime                   = lastUpdateTime_;\r\n        treasuryCapacityMultiplier       = treasuryCapacityMultiplier_;\r\n        minTreasuryCapacity              = minTreasuryCapacity_;\r\n        minimumFundsMultiplier           = minimumFundsMultiplier_;\r\n        minMinimumFunds                  = minMinimumFunds_;\r\n        pullFundsMinThresholdMultiplier  = pullFundsMinThresholdMultiplier_;\r\n        minPullFundsThreshold            = minPullFundsThreshold_;\r\n\r\n        emit AddAuthorization(msg.sender);\r\n        emit ModifyParameters(\"treasury\", treasury_);\r\n        emit ModifyParameters(\"updateDelay\", updateDelay);\r\n        emit ModifyParameters(\"lastUpdateTime\", lastUpdateTime);\r\n        emit ModifyParameters(\"minTreasuryCapacity\", minTreasuryCapacity);\r\n        emit ModifyParameters(\"minMinimumFunds\", minMinimumFunds);\r\n        emit ModifyParameters(\"minPullFundsThreshold\", minPullFundsThreshold);\r\n        emit ModifyParameters(\"treasuryCapacityMultiplier\", treasuryCapacityMultiplier);\r\n        emit ModifyParameters(\"minimumFundsMultiplier\", minimumFundsMultiplier);\r\n        emit ModifyParameters(\"pullFundsMinThresholdMultiplier\", pullFundsMinThresholdMultiplier);\r\n    }\r\n\r\n    // --- Math ---\r\n    uint256 public constant RAY      = 10 ** 27;\r\n    uint256 public constant WAD      = 10 ** 18;\r\n    uint256 public constant HUNDRED  = 100;\r\n    uint256 public constant THOUSAND = 1000;\r\n    function addition(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"SFTreasuryCoreParamAdjuster/add-uint-uint-overflow\");\r\n    }\r\n    function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"SFTreasuryCoreParamAdjuster/sub-uint-uint-underflow\");\r\n    }\r\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"SFTreasuryCoreParamAdjuster/multiply-uint-uint-overflow\");\r\n    }\r\n    function maximum(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = (x >= y) ? x : y;\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- Administration ---\r\n    /*\r\n    * @notify Modify a uint256 parameter\r\n    * @param parameter The parameter name\r\n    * @param val The new parameter value\r\n    */\r\n    function modifyParameters(bytes32 parameter, uint256 val) external isAuthorized {\r\n        require(val > 0, \"SFTreasuryCoreParamAdjuster/null-value\");\r\n\r\n        if (parameter == \"updateDelay\") {\r\n            updateDelay = val;\r\n        }\r\n        else if (parameter == \"dynamicRawTreasuryCapacity\") {\r\n            dynamicRawTreasuryCapacity = val;\r\n        }\r\n        else if (parameter == \"treasuryCapacityMultiplier\") {\r\n            require(both(val >= HUNDRED, val <= THOUSAND), \"SFTreasuryCoreParamAdjuster/invalid-capacity-mul\");\r\n            treasuryCapacityMultiplier = val;\r\n        }\r\n        else if (parameter == \"minimumFundsMultiplier\") {\r\n            require(both(val >= HUNDRED, val <= THOUSAND), \"SFTreasuryCoreParamAdjuster/invalid-min-funds-mul\");\r\n            minimumFundsMultiplier = val;\r\n        }\r\n        else if (parameter == \"pullFundsMinThresholdMultiplier\") {\r\n            require(both(val >= HUNDRED, val <= THOUSAND), \"SFTreasuryCoreParamAdjuster/invalid-pull-funds-threshold-mul\");\r\n            pullFundsMinThresholdMultiplier = val;\r\n        }\r\n        else if (parameter == \"minTreasuryCapacity\") {\r\n            minTreasuryCapacity = val;\r\n        }\r\n        else if (parameter == \"minMinimumFunds\") {\r\n            minMinimumFunds = val;\r\n        }\r\n        else if (parameter == \"minPullFundsThreshold\") {\r\n            minPullFundsThreshold = val;\r\n        }\r\n        else revert(\"SFTreasuryCoreParamAdjuster/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, val);\r\n    }\r\n    /*\r\n    * @notify Modify the address of a contract integrated with this adjuster\r\n    * @param parameter The parameter/contract name\r\n    * @param addr The new address for the contract\r\n    */\r\n    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\r\n        require(addr != address(0), \"SFTreasuryCoreParamAdjuster/null-address\");\r\n\r\n        if (parameter == \"treasury\") {\r\n            treasury = StabilityFeeTreasuryLike(addr);\r\n        }\r\n        else revert(\"SFTreasuryCoreParamAdjuster/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, addr);\r\n    }\r\n    /*\r\n    * @notify Modify a parameter in a FundedFunction\r\n    * @param targetContract The contract where the funded function resides\r\n    * @param targetFunction The signature of the funded function\r\n    * @param parameter The name of the parameter to change\r\n    * @param val The new parameter value\r\n    */\r\n    function modifyParameters(address targetContract, bytes4 targetFunction, bytes32 parameter, uint256 val) external isAuthorized {\r\n        FundedFunction storage fundedFunction = whitelistedFundedFunctions[targetContract][targetFunction];\r\n        require(fundedFunction.latestExpectedCalls >= 1, \"SFTreasuryCoreParamAdjuster/inexistent-funded-function\");\r\n        require(val >= 1, \"SFTreasuryCoreParamAdjuster/invalid-value\");\r\n\r\n        if (parameter == \"latestExpectedCalls\") {\r\n            dynamicRawTreasuryCapacity = subtract(dynamicRawTreasuryCapacity, multiply(fundedFunction.latestExpectedCalls, fundedFunction.latestMaxReward));\r\n            fundedFunction.latestExpectedCalls = val;\r\n            dynamicRawTreasuryCapacity = addition(dynamicRawTreasuryCapacity, multiply(val, fundedFunction.latestMaxReward));\r\n        }\r\n        else revert(\"SFTreasuryCoreParamAdjuster/modify-unrecognized-param\");\r\n        emit ModifyParameters(targetContract, targetFunction, parameter, val);\r\n    }\r\n\r\n    // --- Reward Adjusters Management ---\r\n    /*\r\n    * @notify Add a new reward adjuster\r\n    * @param adjuster The address of the adjuster\r\n    */\r\n    function addRewardAdjuster(address adjuster) external isAuthorized {\r\n        require(rewardAdjusters[adjuster] == 0, \"SFTreasuryCoreParamAdjuster/adjuster-already-added\");\r\n        rewardAdjusters[adjuster] = 1;\r\n        emit AddRewardAdjuster(adjuster);\r\n    }\r\n    /*\r\n    * @notify Remove an existing reward adjuster\r\n    * @param adjuster The address of the adjuster\r\n    */\r\n    function removeRewardAdjuster(address adjuster) external isAuthorized {\r\n        require(rewardAdjusters[adjuster] == 1, \"SFTreasuryCoreParamAdjuster/adjuster-not-added\");\r\n        rewardAdjusters[adjuster] = 0;\r\n        emit RemoveRewardAdjuster(adjuster);\r\n    }\r\n\r\n    // --- Funded Function Management ---\r\n    /*\r\n    * @notify Add a new funded function\r\n    * @param targetContract The contract where the funded function resides\r\n    * @param targetFunction The signature of the funded function\r\n    * @param latestExpectedCalls Amount of function calls for which a funded function should request payment\r\n    */\r\n    function addFundedFunction(address targetContract, bytes4 targetFunction, uint256 latestExpectedCalls) external isAuthorized {\r\n        FundedFunction storage fundedFunction = whitelistedFundedFunctions[targetContract][targetFunction];\r\n        require(fundedFunction.latestExpectedCalls == 0, \"SFTreasuryCoreParamAdjuster/existent-funded-function\");\r\n\r\n        // Update the entry\r\n        require(latestExpectedCalls >= 1, \"SFTreasuryCoreParamAdjuster/invalid-expected-calls\");\r\n        fundedFunction.latestExpectedCalls = latestExpectedCalls;\r\n\r\n        // Emit the event\r\n        emit AddFundedFunction(targetContract, targetFunction, latestExpectedCalls);\r\n    }\r\n    /*\r\n    * @notify Remove an already existent funded function\r\n    * @param targetContract The contract where the funded function resides\r\n    * @param targetFunction The signature of the funded function\r\n    */\r\n    function removeFundedFunction(address targetContract, bytes4 targetFunction) external isAuthorized {\r\n        FundedFunction memory fundedFunction = whitelistedFundedFunctions[targetContract][targetFunction];\r\n        require(fundedFunction.latestExpectedCalls >= 1, \"SFTreasuryCoreParamAdjuster/inexistent-funded-function\");\r\n\r\n        // Update the dynamic capacity\r\n        dynamicRawTreasuryCapacity = subtract(\r\n          dynamicRawTreasuryCapacity,\r\n          multiply(fundedFunction.latestExpectedCalls, fundedFunction.latestMaxReward)\r\n        );\r\n\r\n        // Delete the entry from the mapping\r\n        delete(whitelistedFundedFunctions[targetContract][targetFunction]);\r\n\r\n        // Emit the event\r\n        emit RemoveFundedFunction(targetContract, targetFunction);\r\n    }\r\n\r\n    // --- Reward Adjuster Logic ---\r\n    /*\r\n    * @notify Adjust the latestMaxReward of a funded function\r\n    * @param targetContract The contract where the funded function resides\r\n    * @param targetFunction The signature of the funded function\r\n    * @param newMaxReward The new latestMaxReward for the funded function\r\n    */\r\n    function adjustMaxReward(address targetContract, bytes4 targetFunction, uint256 newMaxReward) external {\r\n        require(rewardAdjusters[msg.sender] == 1, \"SFTreasuryCoreParamAdjuster/invalid-caller\");\r\n        require(newMaxReward >= 1, \"SFTreasuryCoreParamAdjuster/invalid-value\");\r\n\r\n        // Check that the funded function exists\r\n        FundedFunction storage fundedFunction = whitelistedFundedFunctions[targetContract][targetFunction];\r\n        require(fundedFunction.latestExpectedCalls >= 1, \"SFTreasuryCoreParamAdjuster/inexistent-funded-function\");\r\n\r\n        // Update the dynamic capacity and store the new latestMaxReward\r\n        dynamicRawTreasuryCapacity = subtract(dynamicRawTreasuryCapacity, multiply(fundedFunction.latestExpectedCalls, fundedFunction.latestMaxReward));\r\n        fundedFunction.latestMaxReward = newMaxReward;\r\n        dynamicRawTreasuryCapacity = addition(dynamicRawTreasuryCapacity, multiply(fundedFunction.latestExpectedCalls, newMaxReward));\r\n\r\n        emit AdjustMaxReward(targetContract, targetFunction, newMaxReward, dynamicRawTreasuryCapacity);\r\n    }\r\n\r\n    // --- Core Logic ---\r\n    /*\r\n    * @notify Calculate and set new treasury params according to the latest dynamicRawTreasuryCapacity\r\n    */\r\n    function setNewTreasuryParameters() external {\r\n        require(subtract(now, lastUpdateTime) >= updateDelay, \"SFTreasuryCoreParamAdjuster/wait-more\");\r\n        lastUpdateTime = now;\r\n\r\n        // Calculate the amx treasury capacity\r\n        uint256 newMaxTreasuryCapacity = multiply(treasuryCapacityMultiplier, dynamicRawTreasuryCapacity) / HUNDRED;\r\n        newMaxTreasuryCapacity         = multiply(newMaxTreasuryCapacity, RAY);\r\n        newMaxTreasuryCapacity         = (newMaxTreasuryCapacity < minTreasuryCapacity) ? minTreasuryCapacity : newMaxTreasuryCapacity;\r\n\r\n        // Calculate the minimumFundsRequired and scale to RAD\r\n        uint256 newMinTreasuryCapacity = multiply(minimumFundsMultiplier, newMaxTreasuryCapacity) / HUNDRED;\r\n        newMinTreasuryCapacity         = (newMinTreasuryCapacity < minMinimumFunds) ? minMinimumFunds : newMinTreasuryCapacity;\r\n\r\n        // Calculate the new pullFundsMinThreshold\r\n        uint256 newPullFundsMinThreshold = multiply(pullFundsMinThresholdMultiplier, newMaxTreasuryCapacity) / HUNDRED;\r\n        newPullFundsMinThreshold         = (newPullFundsMinThreshold < minPullFundsThreshold) ? minPullFundsThreshold : newPullFundsMinThreshold;\r\n\r\n        // Set the params in the treasury contract\r\n        treasury.modifyParameters(\"treasuryCapacity\", newMaxTreasuryCapacity);\r\n        treasury.modifyParameters(\"minimumFundsRequired\", newMinTreasuryCapacity);\r\n        treasury.modifyParameters(\"pullFundsMinThreshold\", newPullFundsMinThreshold);\r\n\r\n        // Emit event\r\n        emit UpdateTreasuryParameters(newPullFundsMinThreshold, newMinTreasuryCapacity, newMaxTreasuryCapacity);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"updateDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryCapacityMultiplier_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTreasuryCapacity_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumFundsMultiplier_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMinimumFunds_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pullFundsMinThresholdMultiplier_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPullFundsThreshold_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"targetFunction\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"latestExpectedCalls\",\"type\":\"uint256\"}],\"name\":\"AddFundedFunction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adjuster\",\"type\":\"address\"}],\"name\":\"AddRewardAdjuster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"targetFunction\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dynamicCapacity\",\"type\":\"uint256\"}],\"name\":\"AdjustMaxReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"targetFunction\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"targetFunction\",\"type\":\"bytes4\"}],\"name\":\"RemoveFundedFunction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adjuster\",\"type\":\"address\"}],\"name\":\"RemoveRewardAdjuster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinPullFundsThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimumFunds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTreasuryCapacity\",\"type\":\"uint256\"}],\"name\":\"UpdateTreasuryParameters\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HUNDRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THOUSAND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"targetFunction\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"latestExpectedCalls\",\"type\":\"uint256\"}],\"name\":\"addFundedFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adjuster\",\"type\":\"address\"}],\"name\":\"addRewardAdjuster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"targetFunction\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"newMaxReward\",\"type\":\"uint256\"}],\"name\":\"adjustMaxReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicRawTreasuryCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMinimumFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPullFundsThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTreasuryCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumFundsMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"targetFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullFundsMinThresholdMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"targetFunction\",\"type\":\"bytes4\"}],\"name\":\"removeFundedFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adjuster\",\"type\":\"address\"}],\"name\":\"removeRewardAdjuster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardAdjusters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setNewTreasuryParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract StabilityFeeTreasuryLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryCapacityMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"whitelistedFundedFunctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"latestExpectedCalls\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestMaxReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SFTreasuryCoreParamAdjuster","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000083533fdd3285f48204215e9cf38c785371258e760000000000000000000000000000000000000000000000000000000000127500000000000000000000000000000000000000000000000000000000006169e23000000000000000000000000000000000000000000000000000000000000000960000000000000000000000446c3b15f9926687d2c40534fdb5640000000000000000000000000000000000000000000000000000000000000000000000000096000000000000000000000022361d8afcc93343e962029a7edab20000000000000000000000000000000000000000000000000000000000000000000000000096000000000000000000000022361d8afcc93343e962029a7edab2000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ba4a21e147054bf40d3d3dcb8e50583424b62bb1998ecfab27ed77dbf70800a7"}]}