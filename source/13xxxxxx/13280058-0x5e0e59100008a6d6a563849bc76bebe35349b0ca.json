{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/inf/CrowdSale/PointListAdapter.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\nimport \\\"./interfaces/IPointList.sol\\\";\\nimport \\\"../IINFPermissionManager.sol\\\";\\ncontract PointListAdapter is IPointList {\\n    IINFPermissionManager public immutable permissionManager;\\n\\n    constructor(IINFPermissionManager _permissionManager) {\\n        permissionManager = _permissionManager;\\n    }\\n\\n    /**\\n     * @notice Initializes point list with admin address.\\n     * @param _admin Admins address.\\n     */\\n    function initPointList(address _admin) public override {\\n        return;\\n    }\\n\\n    /**\\n     * @notice Checks if account address is in the list (has any points).\\n     * @param _account Account address.\\n     * @return exempt True or False.\\n     */\\n    function isInList(address _account) public view override returns (bool exempt) {\\n        (exempt, , , ) = permissionManager.getStatusAndFee(msg.sender, _account);\\n    }\\n\\n    /**\\n     * @notice Checks if account has more or equal points as the number given.\\n     * @param _account Account address.\\n     * @param _amount Desired amount of points.\\n     * @return exempt True or False.\\n     */\\n    function hasPoints(address _account, uint256 _amount) public view override returns (bool exempt) {\\n        (exempt, , , ) = permissionManager.getStatusAndFee(msg.sender, _account);\\n    }\\n\\n    /**\\n     * @notice Sets points to accounts in one batch.\\n     * @param _accounts An array of accounts.\\n     * @param _amounts An array of corresponding amounts.\\n     */\\n    function setPoints(address[] memory _accounts, uint256[] memory _amounts) external override {\\n        return;\\n    }\\n}\"\r\n    },\r\n    \"contracts/inf/CrowdSale/interfaces/IPointList.sol\": {\r\n      \"content\": \"pragma solidity >= 0.6.12;\\n\\n// ----------------------------------------------------------------------------\\n// White List interface\\n// ----------------------------------------------------------------------------\\n\\ninterface IPointList {\\n    function isInList(address account) external view returns (bool);\\n    function hasPoints(address account, uint256 amount) external view  returns (bool);\\n    function setPoints(\\n        address[] memory accounts,\\n        uint256[] memory amounts\\n    ) external; \\n    function initPointList(address accessControl) external ;\\n}\"\r\n    },\r\n    \"contracts/inf/IINFPermissionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IINFPermissionManager {\\n    event LogWhiteListInvestor(address indexed investor, bool approved);\\n    event LogSetFeeAndFeeRecipient(uint256 fee, address indexed feeRecipient);\\n    event LogSetTokenFee(uint256 fee, address indexed tokenId);\\n    event LogFeeExempt(address indexed user, uint256 status);\\n\\n    function getStatusAndFee(\\n        address sender,\\n        address receiver\\n    ) external view returns (bool exempt, uint256 fee, uint256 feePrecision, address feeRecipient);\\n\\n    function setFeeExempt(address user, bool senderExempt, bool recipientExempt) external;\\n\\n    function whitelistInvestor(address investor, bool approved) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 350\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IINFPermissionManager\",\"name\":\"_permissionManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"hasPoints\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initPointList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isInList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permissionManager\",\"outputs\":[{\"internalType\":\"contract IINFPermissionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PointListAdapter","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"350","ConstructorArguments":"000000000000000000000000a32fc9faca733065dd4f0dac8f837bc44b9c0c49","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}