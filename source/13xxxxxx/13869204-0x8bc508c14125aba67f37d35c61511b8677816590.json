{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CorruptionsBookOfElysiumMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\n// all interesting work below is by dom\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Base64.sol\\\";\\n\\ninterface ICorruptionsBookOfElysiumMetadata {\\n    function tokenURI(uint256 tokenId, uint256 style, uint32[] memory chapters, uint256 arete) external view returns (string memory);\\n}\\n\\ninterface ICorruptionsFont {\\n    function font() external view returns (string memory);\\n}\\n\\ncontract CorruptionsBookOfElysiumMetadata is Ownable, ICorruptionsBookOfElysiumMetadata {\\n\\n    string public description;\\n    ICorruptionsFont private font;\\n\\n    struct RandParts {\\n        string border;\\n        string corruptor;\\n        string phrase;\\n    }\\n\\n    constructor() Ownable() {\\n        description = \\\"Unknown\\\";\\n        font = ICorruptionsFont(0xdf8A48979F33f12952Ab4cF6f960EA4071fc656b);\\n    }\\n\\n    function setDescription(string memory desc) public onlyOwner {\\n        description = desc;\\n    }\\n\\n    function setFont(address fontAddress) public onlyOwner {\\n        font = ICorruptionsFont(fontAddress);\\n    }\\n\\n    function _blank(string[32] memory canvas) public pure returns (string[32] memory) {\\n        canvas[0] =  \\\"...............................   COLLECTED:          \\\";\\n        canvas[1] =  \\\"...............................                       \\\";\\n        canvas[2] =  \\\"...............................                       \\\";\\n        canvas[3] =  \\\"...............................                       \\\";\\n        canvas[4] =  \\\"...............................                       \\\";\\n        canvas[5] =  \\\"...............................                       \\\";\\n        canvas[6] =  \\\"...............................                       \\\";\\n        canvas[7] =  \\\"...............................                       \\\";\\n        canvas[8] =  \\\"...............................                       \\\";\\n        canvas[9] =  \\\"............./////////|........                       \\\";\\n        canvas[10] = \\\"............/////////.|........                       \\\";\\n        canvas[11] = \\\".........../////////..|........                       \\\";\\n        canvas[12] = \\\"........../////////...|........                       \\\";\\n        canvas[13] = \\\".........|~~~~~~~|....|........                       \\\";\\n        canvas[14] = \\\".........|=======|....|........                       \\\";\\n        canvas[15] = \\\".........|...E...|....|........                       \\\";\\n        canvas[16] = \\\".........|...L...|....|........                       \\\";\\n        canvas[17] = \\\".........|...Y...|....|........                       \\\";\\n        canvas[18] = \\\".........|...S...|....|........                       \\\";\\n        canvas[19] = \\\".........|...I...|....|........                       \\\";\\n        canvas[20] = \\\".........|...U...|.../.........                       \\\";\\n        canvas[21] = \\\".........|...M...|../..........                       \\\";\\n        canvas[22] = \\\".........|=======|./...........                       \\\";\\n        canvas[23] = \\\".........|_______|/............                       \\\";\\n        canvas[24] = \\\"...............................                       \\\";\\n        canvas[25] = \\\"...............................                       \\\";\\n        canvas[26] = \\\"...............................                       \\\";\\n        canvas[27] = \\\"...............................                       \\\";\\n        canvas[28] = \\\"...............................                       \\\";\\n        canvas[29] = \\\"...............................                       \\\";\\n        canvas[30] = \\\"...............................                       \\\";\\n        canvas[31] = \\\"...............................                       \\\";\\n        return canvas;\\n    }\\n\\n    function _box(string[32] memory canvas, string memory char, uint256 x, uint256 y, uint256 w, uint256 h) public pure returns (string[32] memory) {\\n        bytes1 byteChar = bytes(char)[0];\\n        for (uint256 iy = 0; iy < h; iy++) {\\n            for (uint256 ix = 0; ix < w; ix++) {\\n                bytes(canvas[iy + y])[ix + x] = byteChar;\\n            }\\n        }\\n        return canvas;\\n    }\\n\\n    function _text(string[32] memory canvas, string memory message, uint256 messageLength, uint256 x, uint256 y) public pure returns (string[32] memory) {\\n        for (uint256 i = 0; i < messageLength; i++) {\\n            bytes(canvas[y])[x + i] = bytes(message)[i];\\n        }\\n\\n        return canvas;\\n    }\\n\\n    function draw(uint256 style, uint32[] memory chapters, uint256 arete) public view returns (string memory) {\\n        string[31] memory lookup = [\\n            \\\"20\\\",\\n            \\\"30\\\",\\n            \\\"40\\\",\\n            \\\"50\\\",\\n            \\\"60\\\",\\n            \\\"70\\\",\\n            \\\"80\\\",\\n            \\\"90\\\",\\n            \\\"100\\\",\\n            \\\"110\\\",\\n            \\\"120\\\",\\n            \\\"130\\\",\\n            \\\"140\\\",\\n            \\\"150\\\",\\n            \\\"160\\\",\\n            \\\"170\\\",\\n            \\\"180\\\",\\n            \\\"190\\\",\\n            \\\"200\\\",\\n            \\\"210\\\",\\n            \\\"220\\\",\\n            \\\"230\\\",\\n            \\\"240\\\",\\n            \\\"250\\\",\\n            \\\"260\\\",\\n            \\\"270\\\",\\n            \\\"280\\\",\\n            \\\"290\\\",\\n            \\\"300\\\",\\n            \\\"310\\\",\\n            \\\"320\\\"\\n        ];\\n\\n        string[33] memory randomStrings = [\\n            \\\"/\\\",\\n            \\\"$\\\",\\n            \\\"|\\\",\\n            \\\"8\\\",\\n            \\\"_\\\",\\n            \\\"?\\\",\\n            \\\"#\\\",\\n            \\\"%\\\",\\n            \\\"^\\\",\\n            \\\"~\\\",\\n            \\\":\\\",\\n\\n            \\\"#022FB7\\\",\\n            \\\"#262A36\\\",\\n            \\\"#A802B7\\\",\\n            \\\"#3CB702\\\",\\n            \\\"#B76F02\\\",\\n            \\\"#B70284\\\",\\n\\n            \\\"#0D1302\\\",\\n            \\\"#020A13\\\",\\n            \\\"#130202\\\",\\n            \\\"#1A1616\\\",\\n            \\\"#000000\\\",\\n            \\\"#040A27\\\",\\n            \\n            \\\"GENERATION\\\",\\n            \\\"INDIVIDUAL\\\",\\n            \\\"TECHNOLOGY\\\",\\n            \\\"EVERYTHING\\\",\\n            \\\"EVERYWHERE\\\",\\n            \\\"UNDERWORLD\\\",\\n            \\\"ILLUMINATI\\\",\\n            \\\"TEMPTATION\\\",\\n            \\\"REVELATION\\\",\\n            \\\"CORRUPTION\\\"\\n        ];\\n\\n        RandParts memory randParts;\\n\\n        randParts.border = randomStrings[uint256(keccak256(abi.encodePacked(\\\"BORDER\\\", style))) % 11];\\n        randParts.corruptor = randomStrings[uint256(keccak256(abi.encodePacked(\\\"CORRUPTOR\\\", style))) % 11];\\n        randParts.phrase = randomStrings[23 + uint256(keccak256(abi.encodePacked(\\\"PHRASE\\\", style))) % 10];\\n\\n        string[32] memory canvas;\\n        canvas = _blank(canvas);\\n\\n        canvas = _box(canvas, randParts.border, 0, 0, 31, 1);\\n        canvas = _box(canvas, randParts.border, 0, 30, 31, 1);\\n        canvas = _box(canvas, randParts.border, 0, 0, 1, 31);\\n        canvas = _box(canvas, randParts.border, 30, 0, 1, 31);\\n\\n        uint256 iterations = uint256(keccak256(abi.encodePacked(\\\"CORRUPTION\\\", style))) % 1024;\\n        for (uint256 i = 0; i < iterations; i++) {\\n            canvas = _box(canvas, randParts.corruptor, uint256(keccak256(abi.encodePacked(\\\"X\\\", i, style))) % 30, uint256(keccak256(abi.encodePacked(\\\"Y\\\", i, style))) % 30, 1, 1);\\n        }\\n\\n        for (uint32 i = 0; i < chapters.length; i++) {\\n            uint256 length = 10 + bytes(toString(chapters[i])).length;\\n            canvas = _text(canvas, string(abi.encodePacked(\\\"+ CHAPTER \\\", toString(chapters[i]))), length, 34, 1 + i);\\n        }\\n\\n        uint256 areteLength = 6 + bytes(toString(arete)).length;\\n        canvas = _text(canvas, string(abi.encodePacked(\\\"ARETE \\\", toString(arete))), areteLength, 31 - areteLength, 30);\\n\\n        string memory output;\\n        for (uint8 i = 0; i < 31; i++) {\\n            output = string(abi.encodePacked(\\n                output, '<text x=\\\"10\\\" y=\\\"', lookup[i], '\\\" class=\\\"base\\\">', canvas[i], '</text>'\\n            ));\\n        }\\n\\n        string[9] memory parts;\\n        parts[0] = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 305 335\\\"><style>@font-face { font-family: CorruptionsFont; src: url(\\\"';\\n        parts[1] = font.font();\\n        parts[2] = '\\\") format(\\\"opentype\\\"); } .base { fill: ';\\n        parts[3] = randomStrings[11 + uint256(keccak256(abi.encodePacked(\\\"BGCOLOR\\\", style))) % 6];\\n        parts[4] = '; font-family: CorruptionsFont; font-size: 10px; }</style><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"';\\n        parts[5] = randomStrings[27 + uint256(keccak256(abi.encodePacked(\\\"FGCOLOR\\\", style))) % 6];\\n        parts[6] = '\\\" />';\\n        parts[7] = output;\\n        parts[8] = '</svg>';\\n\\n        return Base64.encode(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]));\\n    }\\n\\n    function tokenURI(uint256 tokenId, uint256 style, uint32[] memory chapters, uint256 arete) override external view returns (string memory) {\\n        quickSort(chapters, int32(0), int(chapters.length - 1));\\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\\\"name\\\": \\\"0x', toHexString(tokenId), '\\\", \\\"description\\\": \\\"', description, '\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', draw(style, chapters, arete), '\\\", \\\"attributes\\\": [{\\\"trait_type\\\": \\\"Chapters Collected\\\", \\\"value\\\": ', toString(chapters.length), '},{\\\"trait_type\\\": \\\"Arete\\\", \\\"value\\\": ', toString(arete), '}]}'))));\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT license\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint i) internal pure returns (string memory) {\\n        // https://stackoverflow.com/a/69302348/424107\\n        \\n        if (i == 0) return \\\"0\\\";\\n        uint j = i;\\n        uint length;\\n        while (j != 0) {\\n            length++;\\n            j = j >> 4;\\n        }\\n        uint mask = 15;\\n        bytes memory bstr = new bytes(length);\\n        uint k = length;\\n        while (i != 0) {\\n            uint curr = (i & mask);\\n            bstr[--k] = curr > 9 ?\\n                bytes1(uint8(55 + curr)) :\\n                bytes1(uint8(48 + curr)); // 55 = 65 - 10\\n            i = i >> 4;\\n        }\\n        return string(bstr);\\n    }\\n\\n}\\n\\nfunction quickSort(uint32[] memory arr, int left, int right) pure {\\n    // https://ethereum.stackexchange.com/a/1518 - MIT License\\n\\n    int i = left;\\n    int j = right;\\n    if (i == j) return;\\n    uint32 pivot = arr[uint(left + (right - left) / 2)];\\n    while (i <= j) {\\n        while (arr[uint(i)] < pivot) i++;\\n        while (pivot < arr[uint(j)]) j--;\\n        if (i <= j) {\\n            (arr[uint(i)], arr[uint(j)]) = (arr[uint(j)], arr[uint(i)]);\\n            i++;\\n            j--;\\n        }\\n    }\\n    if (left < j)\\n        quickSort(arr, left, j);\\n    if (i < right)\\n        quickSort(arr, i, right);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\npragma solidity ^0.8.0;\\n\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[32]\",\"name\":\"canvas\",\"type\":\"string[32]\"}],\"name\":\"_blank\",\"outputs\":[{\"internalType\":\"string[32]\",\"name\":\"\",\"type\":\"string[32]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[32]\",\"name\":\"canvas\",\"type\":\"string[32]\"},{\"internalType\":\"string\",\"name\":\"char\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"w\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"h\",\"type\":\"uint256\"}],\"name\":\"_box\",\"outputs\":[{\"internalType\":\"string[32]\",\"name\":\"\",\"type\":\"string[32]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[32]\",\"name\":\"canvas\",\"type\":\"string[32]\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"messageLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"_text\",\"outputs\":[{\"internalType\":\"string[32]\",\"name\":\"\",\"type\":\"string[32]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"style\",\"type\":\"uint256\"},{\"internalType\":\"uint32[]\",\"name\":\"chapters\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"arete\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"}],\"name\":\"setDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fontAddress\",\"type\":\"address\"}],\"name\":\"setFont\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"style\",\"type\":\"uint256\"},{\"internalType\":\"uint32[]\",\"name\":\"chapters\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"arete\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CorruptionsBookOfElysiumMetadata","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}