{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/contract/RocketStorage.sol\": {\r\n      \"content\": \"/**\\n  *       .\\n  *      / \\\\\\n  *     |.'.|\\n  *     |'.'|\\n  *   ,'|   |`.\\n  *  |,-'-|-'-.|\\n  *   __|_| |         _        _      _____           _\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\n  * +---------------------------------------------------+\\n  * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\n  * +---------------------------------------------------+\\n  *\\n  *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\n  *  be community-owned, decentralised, and trustless.\\n  *\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\n  *\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\n  *\\n  */\\n\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../interface/RocketStorageInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/// @title The primary persistent storage for Rocket Pool\\n/// @author David Rugendyke\\n\\ncontract RocketStorage is RocketStorageInterface {\\n\\n    // Events\\n    event NodeWithdrawalAddressSet(address indexed node, address indexed withdrawalAddress, uint256 time);\\n    event GuardianChanged(address oldGuardian, address newGuardian);\\n\\n    // Libraries\\n    using SafeMath for uint256;\\n\\n    // Storage maps\\n    mapping(bytes32 => string)     private stringStorage;\\n    mapping(bytes32 => bytes)      private bytesStorage;\\n    mapping(bytes32 => uint256)    private uintStorage;\\n    mapping(bytes32 => int256)     private intStorage;\\n    mapping(bytes32 => address)    private addressStorage;\\n    mapping(bytes32 => bool)       private booleanStorage;\\n    mapping(bytes32 => bytes32)    private bytes32Storage;\\n\\n    // Protected storage (not accessible by network contracts)\\n    mapping(address => address)    private withdrawalAddresses;\\n    mapping(address => address)    private pendingWithdrawalAddresses;\\n\\n    // Guardian address\\n    address guardian;\\n    address newGuardian;\\n\\n    // Flag storage has been initialised\\n    bool storageInit = false;\\n\\n    /// @dev Only allow access from the latest version of a contract in the Rocket Pool network after deployment\\n    modifier onlyLatestRocketNetworkContract() {\\n        if (storageInit == true) {\\n            // Make sure the access is permitted to only contracts in our Dapp\\n            require(booleanStorage[keccak256(abi.encodePacked(\\\"contract.exists\\\", msg.sender))], \\\"Invalid or outdated network contract\\\");\\n        } else {\\n            // Only Dapp and the guardian account are allowed access during initialisation.\\n            // tx.origin is only safe to use in this case for deployment since no external contracts are interacted with\\n            require((\\n                booleanStorage[keccak256(abi.encodePacked(\\\"contract.exists\\\", msg.sender))] || tx.origin == guardian\\n            ), \\\"Invalid or outdated network contract attempting access during deployment\\\");\\n        }\\n        _;\\n    }\\n\\n\\n    /// @dev Construct RocketStorage\\n    constructor() {\\n        // Set the guardian upon deployment\\n        guardian = msg.sender;\\n    }\\n\\n    // Get guardian address\\n    function getGuardian() external override view returns (address) {\\n        return guardian;\\n    }\\n\\n    // Transfers guardianship to a new address\\n    function setGuardian(address _newAddress) external override {\\n        // Check tx comes from current guardian\\n        require(msg.sender == guardian, \\\"Is not guardian account\\\");\\n        // Store new address awaiting confirmation\\n        newGuardian = _newAddress;\\n    }\\n\\n    // Confirms change of guardian\\n    function confirmGuardian() external override {\\n        // Check tx came from new guardian address\\n        require(msg.sender == newGuardian, \\\"Confirmation must come from new guardian address\\\");\\n        // Store old guardian for event\\n        address oldGuardian = guardian;\\n        // Update guardian and clear storage\\n        guardian = newGuardian;\\n        delete newGuardian;\\n        // Emit event\\n        emit GuardianChanged(oldGuardian, guardian);\\n    }\\n\\n    // Set this as being deployed now\\n    function getDeployedStatus() external override view returns (bool) {\\n        return storageInit;\\n    }\\n\\n    // Set this as being deployed now\\n    function setDeployedStatus() external {\\n        // Only guardian can lock this down\\n        require(msg.sender == guardian, \\\"Is not guardian account\\\");\\n        // Set it now\\n        storageInit = true;\\n    }\\n\\n    // Protected storage\\n\\n    // Get a node's withdrawal address\\n    function getNodeWithdrawalAddress(address _nodeAddress) public override view returns (address) {\\n        // If no withdrawal address has been set, return the nodes address\\n        address withdrawalAddress = withdrawalAddresses[_nodeAddress];\\n        if (withdrawalAddress == address(0)) {\\n            return _nodeAddress;\\n        }\\n        return withdrawalAddress;\\n    }\\n\\n    // Get a node's pending withdrawal address\\n    function getNodePendingWithdrawalAddress(address _nodeAddress) external override view returns (address) {\\n        return pendingWithdrawalAddresses[_nodeAddress];\\n    }\\n\\n    // Set a node's withdrawal address\\n    function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external override {\\n        // Check new withdrawal address\\n        require(_newWithdrawalAddress != address(0x0), \\\"Invalid withdrawal address\\\");\\n        // Confirm the transaction is from the node's current withdrawal address\\n        address withdrawalAddress = getNodeWithdrawalAddress(_nodeAddress);\\n        require(withdrawalAddress == msg.sender, \\\"Only a tx from a node's withdrawal address can update it\\\");\\n        // Update immediately if confirmed\\n        if (_confirm) {\\n            updateWithdrawalAddress(_nodeAddress, _newWithdrawalAddress);\\n        }\\n        // Set pending withdrawal address if not confirmed\\n        else {\\n            pendingWithdrawalAddresses[_nodeAddress] = _newWithdrawalAddress;\\n        }\\n    }\\n\\n    // Confirm a node's new withdrawal address\\n    function confirmWithdrawalAddress(address _nodeAddress) external override {\\n        // Get node by pending withdrawal address\\n        require(pendingWithdrawalAddresses[_nodeAddress] == msg.sender, \\\"Confirmation must come from the pending withdrawal address\\\");\\n        delete pendingWithdrawalAddresses[_nodeAddress];\\n        // Update withdrawal address\\n        updateWithdrawalAddress(_nodeAddress, msg.sender);\\n    }\\n\\n    // Update a node's withdrawal address\\n    function updateWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress) private {\\n        // Set new withdrawal address\\n        withdrawalAddresses[_nodeAddress] = _newWithdrawalAddress;\\n        // Emit withdrawal address set event\\n        emit NodeWithdrawalAddressSet(_nodeAddress, _newWithdrawalAddress, block.timestamp);\\n    }\\n\\n    /// @param _key The key for the record\\n    function getAddress(bytes32 _key) override external view returns (address r) {\\n        return addressStorage[_key];\\n    }\\n\\n    /// @param _key The key for the record\\n    function getUint(bytes32 _key) override external view returns (uint256 r) {\\n        return uintStorage[_key];\\n    }\\n\\n    /// @param _key The key for the record\\n    function getString(bytes32 _key) override external view returns (string memory) {\\n        return stringStorage[_key];\\n    }\\n\\n    /// @param _key The key for the record\\n    function getBytes(bytes32 _key) override external view returns (bytes memory) {\\n        return bytesStorage[_key];\\n    }\\n\\n    /// @param _key The key for the record\\n    function getBool(bytes32 _key) override external view returns (bool r) {\\n        return booleanStorage[_key];\\n    }\\n\\n    /// @param _key The key for the record\\n    function getInt(bytes32 _key) override external view returns (int r) {\\n        return intStorage[_key];\\n    }\\n\\n    /// @param _key The key for the record\\n    function getBytes32(bytes32 _key) override external view returns (bytes32 r) {\\n        return bytes32Storage[_key];\\n    }\\n\\n\\n    /// @param _key The key for the record\\n    function setAddress(bytes32 _key, address _value) onlyLatestRocketNetworkContract override external {\\n        addressStorage[_key] = _value;\\n    }\\n\\n    /// @param _key The key for the record\\n    function setUint(bytes32 _key, uint _value) onlyLatestRocketNetworkContract override external {\\n        uintStorage[_key] = _value;\\n    }\\n\\n    /// @param _key The key for the record\\n    function setString(bytes32 _key, string calldata _value) onlyLatestRocketNetworkContract override external {\\n        stringStorage[_key] = _value;\\n    }\\n\\n    /// @param _key The key for the record\\n    function setBytes(bytes32 _key, bytes calldata _value) onlyLatestRocketNetworkContract override external {\\n        bytesStorage[_key] = _value;\\n    }\\n\\n    /// @param _key The key for the record\\n    function setBool(bytes32 _key, bool _value) onlyLatestRocketNetworkContract override external {\\n        booleanStorage[_key] = _value;\\n    }\\n\\n    /// @param _key The key for the record\\n    function setInt(bytes32 _key, int _value) onlyLatestRocketNetworkContract override external {\\n        intStorage[_key] = _value;\\n    }\\n\\n    /// @param _key The key for the record\\n    function setBytes32(bytes32 _key, bytes32 _value) onlyLatestRocketNetworkContract override external {\\n        bytes32Storage[_key] = _value;\\n    }\\n\\n\\n    /// @param _key The key for the record\\n    function deleteAddress(bytes32 _key) onlyLatestRocketNetworkContract override external {\\n        delete addressStorage[_key];\\n    }\\n\\n    /// @param _key The key for the record\\n    function deleteUint(bytes32 _key) onlyLatestRocketNetworkContract override external {\\n        delete uintStorage[_key];\\n    }\\n\\n    /// @param _key The key for the record\\n    function deleteString(bytes32 _key) onlyLatestRocketNetworkContract override external {\\n        delete stringStorage[_key];\\n    }\\n\\n    /// @param _key The key for the record\\n    function deleteBytes(bytes32 _key) onlyLatestRocketNetworkContract override external {\\n        delete bytesStorage[_key];\\n    }\\n\\n    /// @param _key The key for the record\\n    function deleteBool(bytes32 _key) onlyLatestRocketNetworkContract override external {\\n        delete booleanStorage[_key];\\n    }\\n\\n    /// @param _key The key for the record\\n    function deleteInt(bytes32 _key) onlyLatestRocketNetworkContract override external {\\n        delete intStorage[_key];\\n    }\\n\\n    /// @param _key The key for the record\\n    function deleteBytes32(bytes32 _key) onlyLatestRocketNetworkContract override external {\\n        delete bytes32Storage[_key];\\n    }\\n\\n\\n    /// @param _key The key for the record\\n    /// @param _amount An amount to add to the record's value\\n    function addUint(bytes32 _key, uint256 _amount) onlyLatestRocketNetworkContract override external {\\n        uintStorage[_key] = uintStorage[_key].add(_amount);\\n    }\\n\\n    /// @param _key The key for the record\\n    /// @param _amount An amount to subtract from the record's value\\n    function subUint(bytes32 _key, uint256 _amount) onlyLatestRocketNetworkContract override external {\\n        uintStorage[_key] = uintStorage[_key].sub(_amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interface/RocketStorageInterface.sol\": {\r\n      \"content\": \"/**\\n  *       .\\n  *      / \\\\\\n  *     |.'.|\\n  *     |'.'|\\n  *   ,'|   |`.\\n  *  |,-'-|-'-.|\\n  *   __|_| |         _        _      _____           _\\n  *  | ___ \\\\|        | |      | |    | ___ \\\\         | |\\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\\n  *  |    // _ \\\\ / __| |/ / _ \\\\ __|  |  __/ _ \\\\ / _ \\\\| |\\n  *  | |\\\\ \\\\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\\n  *  \\\\_| \\\\_\\\\___/ \\\\___|_|\\\\_\\\\___|\\\\__|  \\\\_|  \\\\___/ \\\\___/|_|\\n  * +---------------------------------------------------+\\n  * |    DECENTRALISED STAKING PROTOCOL FOR ETHEREUM    |\\n  * +---------------------------------------------------+\\n  *\\n  *  Rocket Pool is a first-of-its-kind Ethereum staking pool protocol, designed to\\n  *  be community-owned, decentralised, and trustless.\\n  *\\n  *  For more information about Rocket Pool, visit https://rocketpool.net\\n  *\\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\\n  *\\n  */\\n\\npragma solidity 0.7.6;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\ninterface RocketStorageInterface {\\n\\n    // Deploy status\\n    function getDeployedStatus() external view returns (bool);\\n\\n    // Guardian\\n    function getGuardian() external view returns(address);\\n    function setGuardian(address _newAddress) external;\\n    function confirmGuardian() external;\\n\\n    // Getters\\n    function getAddress(bytes32 _key) external view returns (address);\\n    function getUint(bytes32 _key) external view returns (uint);\\n    function getString(bytes32 _key) external view returns (string memory);\\n    function getBytes(bytes32 _key) external view returns (bytes memory);\\n    function getBool(bytes32 _key) external view returns (bool);\\n    function getInt(bytes32 _key) external view returns (int);\\n    function getBytes32(bytes32 _key) external view returns (bytes32);\\n\\n    // Setters\\n    function setAddress(bytes32 _key, address _value) external;\\n    function setUint(bytes32 _key, uint _value) external;\\n    function setString(bytes32 _key, string calldata _value) external;\\n    function setBytes(bytes32 _key, bytes calldata _value) external;\\n    function setBool(bytes32 _key, bool _value) external;\\n    function setInt(bytes32 _key, int _value) external;\\n    function setBytes32(bytes32 _key, bytes32 _value) external;\\n\\n    // Deleters\\n    function deleteAddress(bytes32 _key) external;\\n    function deleteUint(bytes32 _key) external;\\n    function deleteString(bytes32 _key) external;\\n    function deleteBytes(bytes32 _key) external;\\n    function deleteBool(bytes32 _key) external;\\n    function deleteInt(bytes32 _key) external;\\n    function deleteBytes32(bytes32 _key) external;\\n\\n    // Arithmetic\\n    function addUint(bytes32 _key, uint256 _amount) external;\\n    function subUint(bytes32 _key, uint256 _amount) external;\\n\\n    // Protected storage\\n    function getNodeWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function getNodePendingWithdrawalAddress(address _nodeAddress) external view returns (address);\\n    function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external;\\n    function confirmWithdrawalAddress(address _nodeAddress) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 15000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"GuardianChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NodeWithdrawalAddressSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addUint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"}],\"name\":\"confirmWithdrawalAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteBytes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteBytes32\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteInt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteString\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteUint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"r\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getInt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"r\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"}],\"name\":\"getNodePendingWithdrawalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"}],\"name\":\"getNodeWithdrawalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_value\",\"type\":\"bytes\"}],\"name\":\"setBytes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setBytes32\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDeployedStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"_value\",\"type\":\"int256\"}],\"name\":\"setInt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"setString\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newWithdrawalAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_confirm\",\"type\":\"bool\"}],\"name\":\"setWithdrawalAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"subUint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RocketStorage","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"15000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]}