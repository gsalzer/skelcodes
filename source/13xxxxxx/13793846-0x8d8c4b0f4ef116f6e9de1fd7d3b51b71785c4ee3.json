{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MCCSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title MCCSwap\\n * @dev Swap MCC for ETH/OKLG on ETH\\n */\\ncontract MCCSwap is Ownable {\\n  IERC20 private mccV1 = IERC20(0x1a7981D87E3b6a95c1516EB820E223fE979896b3);\\n  IERC20 private mccV2 = IERC20(0x1454232149A0dC51e612b471fE6d3393e60D09Ad);\\n  IERC20 private mccV3 = IERC20(0x1454232149A0dC51e612b471fE6d3393e60D09Ad);\\n\\n  AggregatorV3Interface internal priceFeed;\\n\\n  mapping(address => bool) public v1WasSwapped;\\n  mapping(address => uint256) public v1SnapshotBalances;\\n  mapping(address => bool) public v2WasSwapped;\\n  mapping(address => uint256) public v2AirdropAmounts;\\n  mapping(address => uint256) public v2SnapshotBalances;\\n\\n  uint256 public v2AirdropETHPool;\\n  uint256 public v2TotalAirdropped = 842714586113970000000;\\n\\n  /**\\n   * Aggregator: ETH/USD\\n   */\\n  constructor() {\\n    // https://github.com/pcaversaccio/chainlink-price-feed/blob/main/README.md\\n    priceFeed = AggregatorV3Interface(\\n      0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\\n    );\\n  }\\n\\n  function swap() external {\\n    swapV1ForV3();\\n    swapV2ForETH();\\n  }\\n\\n  function swapV1ForV3() public {\\n    require(!v1WasSwapped[msg.sender], 'already swapped V1 for V3');\\n\\n    uint256 _amountV3ToReceive = v1SnapshotBalances[msg.sender];\\n    require(_amountV3ToReceive > 0, 'you did not have any V1 tokens');\\n    require(\\n      mccV3.balanceOf(address(this)) >= _amountV3ToReceive,\\n      'not enough V3 liquidity to complete swap'\\n    );\\n    v1WasSwapped[msg.sender] = true;\\n    mccV3.transfer(msg.sender, _amountV3ToReceive);\\n  }\\n\\n  function swapV2ForETH() public {\\n    require(!v2WasSwapped[msg.sender], 'already swapped V2 for ETH');\\n\\n    // 1. check and compensate for airdropped V2 tokens\\n    uint256 mccV2AirdroppedAmount = v2AirdropAmounts[msg.sender];\\n    if (mccV2AirdroppedAmount > 0) {\\n      msg.sender.call{\\n        value: (v2AirdropETHPool * mccV2AirdroppedAmount) / v2TotalAirdropped\\n      }('');\\n    }\\n\\n    // 2. check and compensate for currently held V2 tokens\\n    uint256 mccV2Balance = mccV2.balanceOf(msg.sender);\\n    if (mccV2Balance > 0) {\\n      mccV2.transferFrom(msg.sender, address(this), mccV2Balance);\\n    }\\n\\n    uint256 mccV2SnapshotBal = v2SnapshotBalances[msg.sender];\\n    if (mccV2SnapshotBal > 0) {\\n      uint256 weiToTransfer = getUserOwedETHFromV2(mccV2SnapshotBal);\\n      require(\\n        address(this).balance >= weiToTransfer,\\n        'not enough ETH liquidity to execute swap'\\n      );\\n      msg.sender.call{ value: weiToTransfer }('');\\n    }\\n\\n    v2WasSwapped[msg.sender] = true;\\n  }\\n\\n  function getUserOwedETHFromV2(uint256 v2Balance)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    // Creates a USD balance with 18 decimals\\n    // MCC has 9 decimals, so need to add 9 decimals to get USD balance to 18\\n    // Refund Rate = MCC * $0.00000825 * 30%\\n    uint256 balanceInUSD = (((v2Balance * 10**9 * 825) / 10**8) * 3) / 10;\\n\\n    // adding back 18 decimals to get returned value in wei\\n    return (10**18 * balanceInUSD) / getLatestETHPrice();\\n  }\\n\\n  /**\\n   * Returns the latest ETH/USD price with returned value at 18 decimals\\n   * https://docs.chain.link/docs/get-the-latest-price/\\n   */\\n  function getLatestETHPrice() public view returns (uint256) {\\n    uint8 decimals = priceFeed.decimals();\\n    (, int256 price, , , ) = priceFeed.latestRoundData();\\n    return uint256(price) * (10**18 / 10**decimals);\\n  }\\n\\n  function setV1WasSwapped(address _wallet, bool _didSwap) external onlyOwner {\\n    v1WasSwapped[_wallet] = _didSwap;\\n  }\\n\\n  function setV2WasSwapped(address _wallet, bool _didSwap) external onlyOwner {\\n    v2WasSwapped[_wallet] = _didSwap;\\n  }\\n\\n  function addETHToV2AirdropPool() external payable onlyOwner {\\n    require(msg.value > 0, 'must sent some ETH to add to pool');\\n    v2AirdropETHPool += msg.value;\\n    payable(address(this)).call{ value: msg.value }('');\\n  }\\n\\n  function removeETHFromV2AirdropPool() external onlyOwner {\\n    require(v2AirdropETHPool > 0, 'Need ETH in the pool to remove it');\\n\\n    uint256 _finalAmount = address(this).balance < v2AirdropETHPool\\n      ? address(this).balance\\n      : v2AirdropETHPool;\\n    if (_finalAmount > 0) {\\n      payable(owner()).call{ value: _finalAmount }('');\\n    }\\n    v2AirdropETHPool = 0;\\n  }\\n\\n  function seedV1Balances(address[] memory _wallets, uint256[] memory _amounts)\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      _wallets.length == _amounts.length,\\n      'must be same number of wallets and amounts'\\n    );\\n    for (uint256 _i = 0; _i < _wallets.length; _i++) {\\n      v1SnapshotBalances[_wallets[_i]] = _amounts[_i];\\n    }\\n  }\\n\\n  function seedV2AirdropAmounts(\\n    address[] memory _wallets,\\n    uint256[] memory _amounts\\n  ) external onlyOwner {\\n    require(\\n      _wallets.length == _amounts.length,\\n      'must be same number of wallets and amounts'\\n    );\\n    for (uint256 _i = 0; _i < _wallets.length; _i++) {\\n      v2AirdropAmounts[_wallets[_i]] = _amounts[_i];\\n    }\\n  }\\n\\n  function seedV2Balances(address[] memory _wallets, uint256[] memory _amounts)\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      _wallets.length == _amounts.length,\\n      'must be same number of wallets and amounts'\\n    );\\n    for (uint256 _i = 0; _i < _wallets.length; _i++) {\\n      v2SnapshotBalances[_wallets[_i]] = _amounts[_i];\\n    }\\n  }\\n\\n  function withdrawTokens(address _tokenAddy, uint256 _amount)\\n    external\\n    onlyOwner\\n  {\\n    IERC20 _token = IERC20(_tokenAddy);\\n    _amount = _amount > 0 ? _amount : _token.balanceOf(address(this));\\n    require(_amount > 0, 'make sure there is a balance available to withdraw');\\n    _token.transfer(owner(), _amount);\\n  }\\n\\n  function withdrawETH(uint256 _amount) external onlyOwner {\\n    _amount = _amount > 0 ? _amount : address(this).balance;\\n    require(_amount > 0, 'make sure there is ETH available to withdraw');\\n    payable(owner()).send(_amount);\\n  }\\n\\n  function setMCCV3(address v3) external onlyOwner {\\n    mccV3 = IERC20(v3);\\n  }\\n\\n  // to recieve ETH from external wallets\\n  receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addETHToV2AirdropPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestETHPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"v2Balance\",\"type\":\"uint256\"}],\"name\":\"getUserOwedETHFromV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeETHFromV2AirdropPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"seedV1Balances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"seedV2AirdropAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"seedV2Balances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"v3\",\"type\":\"address\"}],\"name\":\"setMCCV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_didSwap\",\"type\":\"bool\"}],\"name\":\"setV1WasSwapped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_didSwap\",\"type\":\"bool\"}],\"name\":\"setV2WasSwapped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapV1ForV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapV2ForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"v1SnapshotBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"v1WasSwapped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"v2AirdropAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2AirdropETHPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"v2SnapshotBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2TotalAirdropped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"v2WasSwapped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MCCSwap","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}