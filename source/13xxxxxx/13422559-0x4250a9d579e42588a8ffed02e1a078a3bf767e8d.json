{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0 <0.9.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: ado-contracts\\contracts\\interfaces\\IERC2362.sol\r\n/**\r\n* @dev EIP2362 Interface for pull oracles\r\n* https://github.com/adoracles/EIPs/blob/erc-2362/EIPS/eip-2362.md\r\n*/\r\ninterface IERC2362\r\n{\r\n\t/**\r\n\t * @dev Exposed function pertaining to EIP standards\r\n\t * @param _id bytes32 ID of the query\r\n\t * @return int,uint,uint returns the value, timestamp, and status code of query\r\n\t */\r\n\tfunction valueFor(bytes32 _id) external view returns(int256,uint256,uint256);\r\n}\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\interfaces\\IWitnetRequestBoardEvents.sol\r\n/// @title Witnet Request Board emitting events interface.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestBoardEvents {\r\n    /// Emitted when a Witnet Data Request is posted to the WRB.\r\n    event PostedRequest(uint256 queryId, address from);\r\n\r\n    /// Emitted when a Witnet-solved result is reported to the WRB.\r\n    event PostedResult(uint256 queryId, address from);\r\n\r\n    /// Emitted when all data related to given query is deleted from the WRB.\r\n    event DeletedQuery(uint256 queryId, address from);\r\n}\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\interfaces\\IWitnetRequestBoardReporter.sol\r\n/// @title The Witnet Request Board Reporter interface.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestBoardReporter {\r\n    /// Reports the Witnet-provided result to a previously posted request. \r\n    /// @dev Will assume `block.timestamp` as the timestamp at which the request was solved.\r\n    /// @dev Fails if:\r\n    /// @dev - the `_queryId` is not in 'Posted' status.\r\n    /// @dev - provided `_drTxHash` is zero;\r\n    /// @dev - length of provided `_result` is zero.\r\n    /// @param _queryId The unique identifier of the data request.\r\n    /// @param _drTxHash The hash of the solving tally transaction in Witnet.\r\n    /// @param _result The result itself as bytes.\r\n    function reportResult(uint256 _queryId, bytes32 _drTxHash, bytes calldata _result) external;\r\n\r\n    /// Reports the Witnet-provided result to a previously posted request.\r\n    /// @dev Fails if:\r\n    /// @dev - called from unauthorized address;\r\n    /// @dev - the `_queryId` is not in 'Posted' status.\r\n    /// @dev - provided `_drTxHash` is zero;\r\n    /// @dev - length of provided `_result` is zero.\r\n    /// @param _queryId The unique query identifier\r\n    /// @param _timestamp The timestamp of the solving tally transaction in Witnet.\r\n    /// @param _drTxHash The hash of the solving tally transaction in Witnet.\r\n    /// @param _result The result itself as bytes.\r\n    function reportResult(uint256 _queryId, uint256 _timestamp, bytes32 _drTxHash, bytes calldata _result) external;\r\n}\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\interfaces\\IWitnetRequest.sol\r\n/// @title The Witnet Data Request basic interface.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequest {\r\n    /// A `IWitnetRequest` is constructed around a `bytes` value containing \r\n    /// a well-formed Witnet Data Request using Protocol Buffers.\r\n    function bytecode() external view returns (bytes memory);\r\n\r\n    /// Returns SHA256 hash of Witnet Data Request as CBOR-encoded bytes.\r\n    function hash() external view returns (bytes32);\r\n}\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\libs\\Witnet.sol\r\nlibrary Witnet {\r\n\r\n    /// @notice Witnet function that computes the hash of a CBOR-encoded Data Request.\r\n    /// @param _bytecode CBOR-encoded RADON.\r\n    function hash(bytes memory _bytecode) internal pure returns (bytes32) {\r\n        return sha256(_bytecode);\r\n    }\r\n\r\n    /// Struct containing both request and response data related to every query posted to the Witnet Request Board\r\n    struct Query {\r\n        Request request;\r\n        Response response;\r\n    }\r\n\r\n    /// Possible status of a Witnet query.\r\n    enum QueryStatus {\r\n        Unknown,\r\n        Posted,\r\n        Reported,\r\n        Deleted\r\n    }\r\n\r\n    /// Data kept in EVM-storage for every Request posted to the Witnet Request Board.\r\n    struct Request {\r\n        IWitnetRequest addr;    // The contract containing the Data Request which execution has been requested.\r\n        address requester;      // Address from which the request was posted.\r\n        bytes32 hash;           // Hash of the Data Request whose execution has been requested.\r\n        uint256 gasprice;       // Minimum gas price the DR resolver should pay on the solving tx.\r\n        uint256 reward;         // Escrowed reward to be paid to the DR resolver.\r\n    }\r\n\r\n    /// Data kept in EVM-storage containing Witnet-provided response metadata and result.\r\n    struct Response {\r\n        address reporter;       // Address from which the result was reported.\r\n        uint256 timestamp;      // Timestamp of the Witnet-provided result.\r\n        bytes32 drTxHash;       // Hash of the Witnet transaction that solved the queried Data Request.\r\n        bytes   cborBytes;      // Witnet-provided result CBOR-bytes to the queried Data Request.\r\n    }\r\n\r\n    /// Data struct containing the Witnet-provided result to a Data Request.\r\n    struct Result {\r\n        bool success;           // Flag stating whether the request could get solved successfully, or not.\r\n        CBOR value;             // Resulting value, in CBOR-serialized bytes.\r\n    }\r\n\r\n    /// Data struct following the RFC-7049 standard: Concise Binary Object Representation.\r\n    struct CBOR {\r\n        Buffer buffer;\r\n        uint8 initialByte;\r\n        uint8 majorType;\r\n        uint8 additionalInformation;\r\n        uint64 len;\r\n        uint64 tag;\r\n    }\r\n\r\n    /// Iterable bytes buffer.\r\n    struct Buffer {\r\n        bytes data;\r\n        uint32 cursor;\r\n    }\r\n\r\n    /// Witnet error codes table.\r\n    enum ErrorCodes {\r\n        // 0x00: Unknown error. Something went really bad!\r\n        Unknown,\r\n        // Script format errors\r\n        /// 0x01: At least one of the source scripts is not a valid CBOR-encoded value.\r\n        SourceScriptNotCBOR,\r\n        /// 0x02: The CBOR value decoded from a source script is not an Array.\r\n        SourceScriptNotArray,\r\n        /// 0x03: The Array value decoded form a source script is not a valid Data Request.\r\n        SourceScriptNotRADON,\r\n        /// Unallocated\r\n        ScriptFormat0x04,\r\n        ScriptFormat0x05,\r\n        ScriptFormat0x06,\r\n        ScriptFormat0x07,\r\n        ScriptFormat0x08,\r\n        ScriptFormat0x09,\r\n        ScriptFormat0x0A,\r\n        ScriptFormat0x0B,\r\n        ScriptFormat0x0C,\r\n        ScriptFormat0x0D,\r\n        ScriptFormat0x0E,\r\n        ScriptFormat0x0F,\r\n        // Complexity errors\r\n        /// 0x10: The request contains too many sources.\r\n        RequestTooManySources,\r\n        /// 0x11: The script contains too many calls.\r\n        ScriptTooManyCalls,\r\n        /// Unallocated\r\n        Complexity0x12,\r\n        Complexity0x13,\r\n        Complexity0x14,\r\n        Complexity0x15,\r\n        Complexity0x16,\r\n        Complexity0x17,\r\n        Complexity0x18,\r\n        Complexity0x19,\r\n        Complexity0x1A,\r\n        Complexity0x1B,\r\n        Complexity0x1C,\r\n        Complexity0x1D,\r\n        Complexity0x1E,\r\n        Complexity0x1F,\r\n        // Operator errors\r\n        /// 0x20: The operator does not exist.\r\n        UnsupportedOperator,\r\n        /// Unallocated\r\n        Operator0x21,\r\n        Operator0x22,\r\n        Operator0x23,\r\n        Operator0x24,\r\n        Operator0x25,\r\n        Operator0x26,\r\n        Operator0x27,\r\n        Operator0x28,\r\n        Operator0x29,\r\n        Operator0x2A,\r\n        Operator0x2B,\r\n        Operator0x2C,\r\n        Operator0x2D,\r\n        Operator0x2E,\r\n        Operator0x2F,\r\n        // Retrieval-specific errors\r\n        /// 0x30: At least one of the sources could not be retrieved, but returned HTTP error.\r\n        HTTP,\r\n        /// 0x31: Retrieval of at least one of the sources timed out.\r\n        RetrievalTimeout,\r\n        /// Unallocated\r\n        Retrieval0x32,\r\n        Retrieval0x33,\r\n        Retrieval0x34,\r\n        Retrieval0x35,\r\n        Retrieval0x36,\r\n        Retrieval0x37,\r\n        Retrieval0x38,\r\n        Retrieval0x39,\r\n        Retrieval0x3A,\r\n        Retrieval0x3B,\r\n        Retrieval0x3C,\r\n        Retrieval0x3D,\r\n        Retrieval0x3E,\r\n        Retrieval0x3F,\r\n        // Math errors\r\n        /// 0x40: Math operator caused an underflow.\r\n        Underflow,\r\n        /// 0x41: Math operator caused an overflow.\r\n        Overflow,\r\n        /// 0x42: Tried to divide by zero.\r\n        DivisionByZero,\r\n        /// Unallocated\r\n        Math0x43,\r\n        Math0x44,\r\n        Math0x45,\r\n        Math0x46,\r\n        Math0x47,\r\n        Math0x48,\r\n        Math0x49,\r\n        Math0x4A,\r\n        Math0x4B,\r\n        Math0x4C,\r\n        Math0x4D,\r\n        Math0x4E,\r\n        Math0x4F,\r\n        // Other errors\r\n        /// 0x50: Received zero reveals\r\n        NoReveals,\r\n        /// 0x51: Insufficient consensus in tally precondition clause\r\n        InsufficientConsensus,\r\n        /// 0x52: Received zero commits\r\n        InsufficientCommits,\r\n        /// 0x53: Generic error during tally execution\r\n        TallyExecution,\r\n        /// Unallocated\r\n        OtherError0x54,\r\n        OtherError0x55,\r\n        OtherError0x56,\r\n        OtherError0x57,\r\n        OtherError0x58,\r\n        OtherError0x59,\r\n        OtherError0x5A,\r\n        OtherError0x5B,\r\n        OtherError0x5C,\r\n        OtherError0x5D,\r\n        OtherError0x5E,\r\n        OtherError0x5F,\r\n        /// 0x60: Invalid reveal serialization (malformed reveals are converted to this value)\r\n        MalformedReveal,\r\n        /// Unallocated\r\n        OtherError0x61,\r\n        OtherError0x62,\r\n        OtherError0x63,\r\n        OtherError0x64,\r\n        OtherError0x65,\r\n        OtherError0x66,\r\n        OtherError0x67,\r\n        OtherError0x68,\r\n        OtherError0x69,\r\n        OtherError0x6A,\r\n        OtherError0x6B,\r\n        OtherError0x6C,\r\n        OtherError0x6D,\r\n        OtherError0x6E,\r\n        OtherError0x6F,\r\n        // Access errors\r\n        /// 0x70: Tried to access a value from an index using an index that is out of bounds\r\n        ArrayIndexOutOfBounds,\r\n        /// 0x71: Tried to access a value from a map using a key that does not exist\r\n        MapKeyNotFound,\r\n        /// Unallocated\r\n        OtherError0x72,\r\n        OtherError0x73,\r\n        OtherError0x74,\r\n        OtherError0x75,\r\n        OtherError0x76,\r\n        OtherError0x77,\r\n        OtherError0x78,\r\n        OtherError0x79,\r\n        OtherError0x7A,\r\n        OtherError0x7B,\r\n        OtherError0x7C,\r\n        OtherError0x7D,\r\n        OtherError0x7E,\r\n        OtherError0x7F,\r\n        OtherError0x80,\r\n        OtherError0x81,\r\n        OtherError0x82,\r\n        OtherError0x83,\r\n        OtherError0x84,\r\n        OtherError0x85,\r\n        OtherError0x86,\r\n        OtherError0x87,\r\n        OtherError0x88,\r\n        OtherError0x89,\r\n        OtherError0x8A,\r\n        OtherError0x8B,\r\n        OtherError0x8C,\r\n        OtherError0x8D,\r\n        OtherError0x8E,\r\n        OtherError0x8F,\r\n        OtherError0x90,\r\n        OtherError0x91,\r\n        OtherError0x92,\r\n        OtherError0x93,\r\n        OtherError0x94,\r\n        OtherError0x95,\r\n        OtherError0x96,\r\n        OtherError0x97,\r\n        OtherError0x98,\r\n        OtherError0x99,\r\n        OtherError0x9A,\r\n        OtherError0x9B,\r\n        OtherError0x9C,\r\n        OtherError0x9D,\r\n        OtherError0x9E,\r\n        OtherError0x9F,\r\n        OtherError0xA0,\r\n        OtherError0xA1,\r\n        OtherError0xA2,\r\n        OtherError0xA3,\r\n        OtherError0xA4,\r\n        OtherError0xA5,\r\n        OtherError0xA6,\r\n        OtherError0xA7,\r\n        OtherError0xA8,\r\n        OtherError0xA9,\r\n        OtherError0xAA,\r\n        OtherError0xAB,\r\n        OtherError0xAC,\r\n        OtherError0xAD,\r\n        OtherError0xAE,\r\n        OtherError0xAF,\r\n        OtherError0xB0,\r\n        OtherError0xB1,\r\n        OtherError0xB2,\r\n        OtherError0xB3,\r\n        OtherError0xB4,\r\n        OtherError0xB5,\r\n        OtherError0xB6,\r\n        OtherError0xB7,\r\n        OtherError0xB8,\r\n        OtherError0xB9,\r\n        OtherError0xBA,\r\n        OtherError0xBB,\r\n        OtherError0xBC,\r\n        OtherError0xBD,\r\n        OtherError0xBE,\r\n        OtherError0xBF,\r\n        OtherError0xC0,\r\n        OtherError0xC1,\r\n        OtherError0xC2,\r\n        OtherError0xC3,\r\n        OtherError0xC4,\r\n        OtherError0xC5,\r\n        OtherError0xC6,\r\n        OtherError0xC7,\r\n        OtherError0xC8,\r\n        OtherError0xC9,\r\n        OtherError0xCA,\r\n        OtherError0xCB,\r\n        OtherError0xCC,\r\n        OtherError0xCD,\r\n        OtherError0xCE,\r\n        OtherError0xCF,\r\n        OtherError0xD0,\r\n        OtherError0xD1,\r\n        OtherError0xD2,\r\n        OtherError0xD3,\r\n        OtherError0xD4,\r\n        OtherError0xD5,\r\n        OtherError0xD6,\r\n        OtherError0xD7,\r\n        OtherError0xD8,\r\n        OtherError0xD9,\r\n        OtherError0xDA,\r\n        OtherError0xDB,\r\n        OtherError0xDC,\r\n        OtherError0xDD,\r\n        OtherError0xDE,\r\n        OtherError0xDF,\r\n        // Bridge errors: errors that only belong in inter-client communication\r\n        /// 0xE0: Requests that cannot be parsed must always get this error as their result.\r\n        /// However, this is not a valid result in a Tally transaction, because invalid requests\r\n        /// are never included into blocks and therefore never get a Tally in response.\r\n        BridgeMalformedRequest,\r\n        /// 0xE1: Witnesses exceeds 100\r\n        BridgePoorIncentives,\r\n        /// 0xE2: The request is rejected on the grounds that it may cause the submitter to spend or stake an\r\n        /// amount of value that is unjustifiably high when compared with the reward they will be getting\r\n        BridgeOversizedResult,\r\n        /// Unallocated\r\n        OtherError0xE3,\r\n        OtherError0xE4,\r\n        OtherError0xE5,\r\n        OtherError0xE6,\r\n        OtherError0xE7,\r\n        OtherError0xE8,\r\n        OtherError0xE9,\r\n        OtherError0xEA,\r\n        OtherError0xEB,\r\n        OtherError0xEC,\r\n        OtherError0xED,\r\n        OtherError0xEE,\r\n        OtherError0xEF,\r\n        OtherError0xF0,\r\n        OtherError0xF1,\r\n        OtherError0xF2,\r\n        OtherError0xF3,\r\n        OtherError0xF4,\r\n        OtherError0xF5,\r\n        OtherError0xF6,\r\n        OtherError0xF7,\r\n        OtherError0xF8,\r\n        OtherError0xF9,\r\n        OtherError0xFA,\r\n        OtherError0xFB,\r\n        OtherError0xFC,\r\n        OtherError0xFD,\r\n        OtherError0xFE,\r\n        // This should not exist:\r\n        /// 0xFF: Some tally error is not intercepted but should\r\n        UnhandledIntercept\r\n    }\r\n}\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\interfaces\\IWitnetRequestBoardRequestor.sol\r\n/// @title Witnet Requestor Interface\r\n/// @notice It defines how to interact with the Witnet Request Board in order to:\r\n///   - request the execution of Witnet Radon scripts (data request);\r\n///   - upgrade the resolution reward of any previously posted request, in case gas price raises in mainnet;\r\n///   - read the result of any previously posted request, eventually reported by the Witnet DON.\r\n///   - remove from storage all data related to past and solved data requests, and results.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestBoardRequestor {\r\n    /// Retrieves a copy of all Witnet-provided data related to a previously posted request, removing the whole query from the WRB storage.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status, or called from an address different to\r\n    /// @dev the one that actually posted the given request.\r\n    /// @param _queryId The unique query identifier.\r\n    function deleteQuery(uint256 _queryId) external returns (Witnet.Response memory);\r\n\r\n    /// Requests the execution of the given Witnet Data Request in expectation that it will be relayed and solved by the Witnet DON.\r\n    /// A reward amount is escrowed by the Witnet Request Board that will be transferred to the reporter who relays back the Witnet-provided \r\n    /// result to this request.\r\n    /// @dev Fails if:\r\n    /// @dev - provided reward is too low.\r\n    /// @dev - provided script is zero address.\r\n    /// @dev - provided script bytecode is empty.\r\n    /// @param _addr The address of the IWitnetRequest contract that can provide the actual Data Request bytecode.\r\n    /// @return _queryId An unique query identifier.\r\n    function postRequest(IWitnetRequest _addr) external payable returns (uint256 _queryId);\r\n\r\n    /// Increments the reward of a previously posted request by adding the transaction value to it.\r\n    /// @dev Updates request `gasPrice` in case this method is called with a higher \r\n    /// @dev gas price value than the one used in previous calls to `postRequest` or\r\n    /// @dev `upgradeReward`. \r\n    /// @dev Fails if the `_queryId` is not in 'Posted' status.\r\n    /// @dev Fails also in case the request `gasPrice` is increased, and the new \r\n    /// @dev reward value gets below new recalculated threshold. \r\n    /// @param _queryId The unique query identifier.\r\n    function upgradeReward(uint256 _queryId) external payable;\r\n}\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\interfaces\\IWitnetRequestBoardView.sol\r\n/// @title Witnet Request Board info interface.\r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestBoardView {\r\n    /// Estimates the amount of reward we need to insert for a given gas price.\r\n    /// @param _gasPrice The gas price for which we need to calculate the rewards.\r\n    function estimateReward(uint256 _gasPrice) external view returns (uint256);\r\n\r\n    /// Returns next query id to be generated by the Witnet Request Board.\r\n    function getNextQueryId() external view returns (uint256);\r\n\r\n    /// Gets the whole Query data contents, if any, no matter its current status.\r\n    function getQueryData(uint256 _queryId) external view returns (Witnet.Query memory);\r\n\r\n    /// Gets current status of given query.\r\n    function getQueryStatus(uint256 _queryId) external view returns (Witnet.QueryStatus);\r\n\r\n    /// Retrieves the whole `Witnet.Request` record referred to a previously posted Witnet Data Request.\r\n    /// @dev Fails if the `_queryId` is not valid or, if it has been deleted,\r\n    /// @dev or if the related script bytecode got changed after being posted.\r\n    /// @param _queryId The unique query identifier.\r\n    function readRequest(uint256 _queryId) external view returns (Witnet.Request memory);\r\n\r\n    /// Retrieves the serialized bytecode of a previously posted Witnet Data Request.\r\n    /// @dev Fails if the `_queryId` is not valid or, if it has been deleted,\r\n    /// @dev or if the related script bytecode got changed after being posted.\r\n    /// @param _queryId The unique query identifier.\r\n    function readRequestBytecode(uint256 _queryId) external view returns (bytes memory);\r\n\r\n    /// Retrieves the gas price that any assigned reporter will have to pay when reporting result \r\n    /// to the referred query.\r\n    /// @dev Fails if the `_queryId` is not valid or, if it has been deleted,\r\n    /// @dev or if the related script bytecode got changed after being posted.\r\n    /// @param _queryId The unique query identifier.\r\n    function readRequestGasPrice(uint256 _queryId) external view returns (uint256);\r\n\r\n    /// Retrieves the reward currently set for the referred query.\r\n    /// @dev Fails if the `_queryId` is not valid or, if it has been deleted,\r\n    /// @dev or if the related script bytecode got changed after being posted.\r\n    /// @param _queryId The unique query identifier.\r\n    function readRequestReward(uint256 _queryId) external view returns (uint256);\r\n\r\n    /// Retrieves the whole `Witnet.Response` record referred to a previously posted Witnet Data Request.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponse(uint256 _queryId) external view returns (Witnet.Response memory);\r\n\r\n    /// Retrieves the hash of the Witnet transaction hash that actually solved the referred query.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponseDrTxHash(uint256 _queryId) external view returns (bytes32);    \r\n\r\n    /// Retrieves the address that reported the result to a previously-posted request.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponseReporter(uint256 _queryId) external view returns (address);\r\n\r\n    /// Retrieves the Witnet-provided CBOR-bytes result of a previously posted request.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponseResult(uint256 _queryId) external view returns (Witnet.Result memory);\r\n\r\n    /// Retrieves the timestamp in which the result to the referred query was solved by the Witnet DON.\r\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\r\n    /// @param _queryId The unique query identifier.\r\n    function readResponseTimestamp(uint256 _queryId) external view returns (uint256);\r\n}\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\interfaces\\IWitnetRequestParser.sol\r\n/// @title The Witnet interface for decoding Witnet-provided request to Data Requests.\r\n/// This interface exposes functions to check for the success/failure of\r\n/// a Witnet-provided result, as well as to parse and convert result into\r\n/// Solidity types suitable to the application level. \r\n/// @author The Witnet Foundation.\r\ninterface IWitnetRequestParser {\r\n\r\n    /// Decode raw CBOR bytes into a Witnet.Result instance.\r\n    /// @param _cborBytes Raw bytes representing a CBOR-encoded value.\r\n    /// @return A `Witnet.Result` instance.\r\n    function resultFromCborBytes(bytes memory _cborBytes) external pure returns (Witnet.Result memory);\r\n\r\n    /// Decode a CBOR value into a Witnet.Result instance.\r\n    /// @param _cborValue An instance of `Witnet.CBOR`.\r\n    /// @return A `Witnet.Result` instance.\r\n    function resultFromCborValue(Witnet.CBOR memory _cborValue) external pure returns (Witnet.Result memory);\r\n\r\n    /// Tell if a Witnet.Result is successful.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return `true` if successful, `false` if errored.\r\n    function isOk(Witnet.Result memory _result) external pure returns (bool);\r\n\r\n    /// Tell if a Witnet.Result is errored.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return `true` if errored, `false` if successful.\r\n    function isError(Witnet.Result memory _result) external pure returns (bool);\r\n\r\n    /// Decode a bytes value from a Witnet.Result as a `bytes` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `bytes` decoded from the Witnet.Result.\r\n    function asBytes(Witnet.Result memory _result) external pure returns (bytes memory);\r\n\r\n    /// Decode an error code from a Witnet.Result as a member of `Witnet.ErrorCodes`.\r\n    /// @param _result An instance of `Witnet.Result`.\r\n    /// @return The `CBORValue.Error memory` decoded from the Witnet.Result.\r\n    function asErrorCode(Witnet.Result memory _result) external pure returns (Witnet.ErrorCodes);\r\n\r\n\r\n    /// Generate a suitable error message for a member of `Witnet.ErrorCodes` and its corresponding arguments.\r\n    /// @dev WARN: Note that client contracts should wrap this function into a try-catch foreseing potential errors generated in this function\r\n    /// @param _result An instance of `Witnet.Result`.\r\n    /// @return A tuple containing the `CBORValue.Error memory` decoded from the `Witnet.Result`, plus a loggable error message.\r\n    function asErrorMessage(Witnet.Result memory _result) external pure returns (Witnet.ErrorCodes, string memory);\r\n\r\n    /// Decode a raw error from a `Witnet.Result` as a `uint64[]`.\r\n    /// @param _result An instance of `Witnet.Result`.\r\n    /// @return The `uint64[]` raw error as decoded from the `Witnet.Result`.\r\n    function asRawError(Witnet.Result memory _result) external pure returns(uint64[] memory);\r\n\r\n    /// Decode a boolean value from a Witnet.Result as an `bool` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `bool` decoded from the Witnet.Result.\r\n    function asBool(Witnet.Result memory _result) external pure returns (bool);\r\n\r\n    /// Decode a fixed16 (half-precision) numeric value from a Witnet.Result as an `int32` value.\r\n    /// @dev Due to the lack of support for floating or fixed point arithmetic in the EVM, this method offsets all values.\r\n    /// by 5 decimal orders so as to get a fixed precision of 5 decimal positions, which should be OK for most `fixed16`.\r\n    /// use cases. In other words, the output of this method is 10,000 times the actual value, encoded into an `int32`.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128` decoded from the Witnet.Result.\r\n    function asFixed16(Witnet.Result memory _result) external pure returns (int32);\r\n\r\n    /// Decode an array of fixed16 values from a Witnet.Result as an `int128[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128[]` decoded from the Witnet.Result.\r\n    function asFixed16Array(Witnet.Result memory _result) external pure returns (int32[] memory);\r\n\r\n    /// Decode a integer numeric value from a Witnet.Result as an `int128` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128` decoded from the Witnet.Result.\r\n    function asInt128(Witnet.Result memory _result) external pure returns (int128);\r\n\r\n    /// Decode an array of integer numeric values from a Witnet.Result as an `int128[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `int128[]` decoded from the Witnet.Result.\r\n    function asInt128Array(Witnet.Result memory _result) external pure returns (int128[] memory);\r\n\r\n    /// Decode a string value from a Witnet.Result as a `string` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `string` decoded from the Witnet.Result.\r\n    function asString(Witnet.Result memory _result) external pure returns (string memory);\r\n\r\n    /// Decode an array of string values from a Witnet.Result as a `string[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `string[]` decoded from the Witnet.Result.\r\n    function asStringArray(Witnet.Result memory _result) external pure returns (string[] memory);\r\n\r\n    /// Decode a natural numeric value from a Witnet.Result as a `uint64` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `uint64` decoded from the Witnet.Result.\r\n    function asUint64(Witnet.Result memory _result) external pure returns(uint64);\r\n\r\n    /// Decode an array of natural numeric values from a Witnet.Result as a `uint64[]` value.\r\n    /// @param _result An instance of Witnet.Result.\r\n    /// @return The `uint64[]` decoded from the Witnet.Result.\r\n    function asUint64Array(Witnet.Result memory _result) external pure returns (uint64[] memory);\r\n\r\n}\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\WitnetRequestBoard.sol\r\n/// @title Witnet Request Board functionality base contract.\r\n/// @author The Witnet Foundation.\r\nabstract contract WitnetRequestBoard is\r\n    IWitnetRequestBoardEvents,\r\n    IWitnetRequestBoardReporter,\r\n    IWitnetRequestBoardRequestor,\r\n    IWitnetRequestBoardView,\r\n    IWitnetRequestParser\r\n{\r\n    receive() external payable {\r\n        revert(\"WitnetRequestBoard: no transfers accepted\");\r\n    }\r\n}\r\n// File: witnet-solidity-bridge\\contracts\\UsingWitnet.sol\r\n/// @title The UsingWitnet contract\r\n/// @dev Witnet-aware contracts can inherit from this contract in order to interact with Witnet.\r\n/// @author The Witnet Foundation.\r\nabstract contract UsingWitnet {\r\n\r\n    WitnetRequestBoard public immutable witnet;\r\n\r\n    /// Include an address to specify the WitnetRequestBoard entry point address.\r\n    /// @param _wrb The WitnetRequestBoard entry point address.\r\n    constructor(WitnetRequestBoard _wrb)\r\n    {\r\n        require(address(_wrb) != address(0), \"UsingWitnet: zero address\");\r\n        witnet = _wrb;\r\n    }\r\n\r\n    /// Provides a convenient way for client contracts extending this to block the execution of the main logic of the\r\n    /// contract until a particular request has been successfully solved and reported by Witnet.\r\n    modifier witnetRequestSolved(uint256 _id) {\r\n        require(\r\n                _witnetCheckResultAvailability(_id),\r\n                \"UsingWitnet: request not solved\"\r\n            );\r\n        _;\r\n    }\r\n\r\n    /// Check if a data request has been solved and reported by Witnet.\r\n    /// @dev Contracts depending on Witnet should not start their main business logic (e.g. receiving value from third.\r\n    /// parties) before this method returns `true`.\r\n    /// @param _id The unique identifier of a previously posted data request.\r\n    /// @return A boolean telling if the request has been already resolved or not. Returns `false` also, if the result was deleted.\r\n    function _witnetCheckResultAvailability(uint256 _id)\r\n        internal view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        return witnet.getQueryStatus(_id) == Witnet.QueryStatus.Reported;\r\n    }\r\n\r\n    /// Estimate the reward amount.\r\n    /// @param _gasPrice The gas price for which we want to retrieve the estimation.\r\n    /// @return The reward to be included when either posting a new request, or upgrading the reward of a previously posted one.\r\n    function _witnetEstimateReward(uint256 _gasPrice)\r\n        internal view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        return witnet.estimateReward(_gasPrice);\r\n    }\r\n\r\n    /// Estimates the reward amount, considering current transaction gas price.\r\n    /// @return The reward to be included when either posting a new request, or upgrading the reward of a previously posted one.\r\n    function _witnetEstimateReward()\r\n        internal view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        return witnet.estimateReward(tx.gasprice);\r\n    }\r\n\r\n    /// Send a new request to the Witnet network with transaction value as a reward.\r\n    /// @param _request An instance of `IWitnetRequest` contract.\r\n    /// @return _id Sequential identifier for the request included in the WitnetRequestBoard.\r\n    /// @return _reward Current reward amount escrowed by the WRB until a result gets reported.\r\n    function _witnetPostRequest(IWitnetRequest _request)\r\n        internal\r\n        virtual\r\n        returns (uint256 _id, uint256 _reward)\r\n    {\r\n        _reward = _witnetEstimateReward();\r\n        _id = witnet.postRequest{value: _reward}(_request);\r\n    }\r\n\r\n    /// Upgrade the reward for a previously posted request.\r\n    /// @dev Call to `upgradeReward` function in the WitnetRequestBoard contract.\r\n    /// @param _id The unique identifier of a request that has been previously sent to the WitnetRequestBoard.\r\n    /// @return Amount in which the reward has been increased.\r\n    function _witnetUpgradeReward(uint256 _id)\r\n        internal\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        uint256 _currentReward = witnet.readRequestReward(_id);        \r\n        uint256 _newReward = _witnetEstimateReward();\r\n        uint256 _fundsToAdd = 0;\r\n        if (_newReward > _currentReward) {\r\n            _fundsToAdd = (_newReward - _currentReward);\r\n        }\r\n        witnet.upgradeReward{value: _fundsToAdd}(_id); // Let Request.gasPrice be updated\r\n        return _fundsToAdd;\r\n    }\r\n\r\n    /// Read the Witnet-provided result to a previously posted request.\r\n    /// @param _id The unique identifier of a request that was posted to Witnet.\r\n    /// @return The result of the request as an instance of `Witnet.Result`.\r\n    function _witnetReadResult(uint256 _id)\r\n        internal view\r\n        virtual\r\n        returns (Witnet.Result memory)\r\n    {\r\n        return witnet.readResponseResult(_id);\r\n    }\r\n\r\n    /// Retrieves copy of all response data related to a previously posted request, removing the whole query from storage.\r\n    /// @param _id The unique identifier of a previously posted request.\r\n    /// @return The Witnet-provided result to the request.\r\n    function _witnetDeleteQuery(uint256 _id)\r\n        internal\r\n        virtual\r\n        returns (Witnet.Response memory)\r\n    {\r\n        return witnet.deleteQuery(_id);\r\n    }\r\n\r\n}\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\interfaces\\IERC20.sol\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /// Returns the amount of tokens in existence.\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /// Returns the amount of tokens owned by `_account`.\r\n    function balanceOf(address _account) external view returns (uint256);\r\n\r\n    /// Moves `_amount` tokens from the caller's account to `_recipient`.\r\n    /// Returns a boolean value indicating whether the operation succeeded.\r\n    /// Emits a {Transfer} event.\r\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\r\n\r\n    /// Returns the remaining number of tokens that `_spender` will be\r\n    /// allowed to spend on behalf of `_owner` through {transferFrom}. This is\r\n    /// zero by default.\r\n    /// This value changes when {approve} or {transferFrom} are called.\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n\r\n    /// Sets `_amount` as the allowance of `_spender` over the caller's tokens.\r\n    /// Returns a boolean value indicating whether the operation succeeded.\r\n    /// \r\n    /// IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n    /// that someone may use both the old and the new allowance by unfortunate\r\n    /// transaction ordering. One possible solution to mitigate this race\r\n    /// condition is to first reduce the spender's allowance to 0 and set the\r\n    /// desired value afterwards:\r\n    /// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    ///\r\n    /// Emits an {Approval} event.     \r\n    function approve(address _spender, uint256 _amount) external returns (bool);\r\n\r\n    /// Moves `amount` tokens from `_sender` to `_recipient` using the\r\n    /// allowance mechanism. `amount` is then deducted from the caller's\r\n    /// allowance.\r\n    /// Returns a boolean value indicating whether the operation succeeded.\r\n    /// Emits a {Transfer} event. \r\n    function transferFrom(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _amount\r\n    ) external returns (bool);\r\n\r\n    /// Emitted when `value` tokens are moved from one account (`from`) to\r\n    /// another (`to`).\r\n    /// Note that `:value` may be zero.\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /// Emitted when the allowance of a `spender` for an `owner` is set by\r\n    /// a call to {approve}. `value` is the new allowance.\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: witnet-solidity-bridge\\contracts\\patterns\\Payable.sol\r\nabstract contract Payable {\r\n    IERC20 public immutable currency;\r\n\r\n    event Received(address from, uint256 amount);\r\n    event Transfer(address to, uint256 amount);\r\n\r\n    constructor(address _currency) {\r\n        currency = IERC20(_currency);\r\n    }\r\n\r\n    /// Gets current transaction price.\r\n    function _getGasPrice() internal view virtual returns (uint256);\r\n\r\n    /// Gets current payment value.\r\n    function _getMsgValue() internal view virtual returns (uint256);\r\n\r\n    /// Perform safe transfer or whatever token is used for paying rewards.\r\n    function _safeTransferTo(address payable, uint256) internal virtual;\r\n}\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\requests\\WitnetRequestBase.sol\r\nabstract contract WitnetRequestBase\r\n    is\r\n        IWitnetRequest\r\n{\r\n    /// Contains a well-formed Witnet Data Request, encoded using Protocol Buffers.\r\n    bytes public override bytecode;\r\n\r\n    /// Returns SHA256 hash of Witnet Data Request as CBOR-encoded bytes.\r\n    bytes32 public override hash;\r\n}\r\n// File: node_modules\\witnet-solidity-bridge\\contracts\\patterns\\Initializable.sol\r\ninterface Initializable {\r\n    /// @dev Initialize contract's storage context.\r\n    function initialize(bytes calldata) external;\r\n}\r\n// File: witnet-solidity-bridge\\contracts\\requests\\WitnetRequestInitializableBase.sol\r\nabstract contract WitnetRequestInitializableBase\r\n    is\r\n        Initializable,\r\n        WitnetRequestBase\r\n{\r\n    using Witnet for bytes;\r\n    function initialize(bytes memory _bytecode)\r\n        public\r\n        virtual override\r\n    {\r\n        require(\r\n            bytecode.length == 0,\r\n            \"WitnetRequestInitializableBase: cannot change bytecode\"\r\n        );\r\n        bytecode = _bytecode;\r\n        hash = _bytecode.hash();\r\n    }\r\n}\r\n// File: contracts\\ERC2362PriceFeedBase.sol\r\n// Implements:\r\n\r\n\r\n\r\n\r\n\r\n// Your contract needs to inherit from UsingWitnet\r\nabstract contract ERC2362PriceFeedBase\r\n    is\r\n        IERC2362,\r\n        Payable,\r\n        UsingWitnet,\r\n        WitnetRequestInitializableBase\r\n{\r\n    using Witnet for bytes;\r\n\r\n    // /// Creator's address.\r\n    address public immutable creator;\r\n\r\n    /// Price decimals.\r\n    uint8 public decimals;\r\n\r\n    // The `keccak256` hash of the price feed, according to ERC2362 specs.`\r\n    bytes32 public immutable erc2362ID;\r\n\r\n    // The literal price feed name, according to ERC2362 specs.`\r\n    string public literal;\r\n\r\n    /// Stores the ID of the last Witnet request posting.\r\n    uint256 public requestId;\r\n\r\n    /// Tells if an update has been requested but not yet completed.\r\n    bool public pending;\r\n\r\n    /// The last received price point.\r\n    uint64 public lastPrice;\r\n\r\n    /// Stores the last Witnet-provided response data struct.\r\n    Witnet.Response public lastResponse;\r\n\r\n    /// Notifies when a new Radon script is set.\r\n    event DataRequestChanged(bytes32 erc2362ID, bytes32 codehash);\r\n    \r\n    /// Notifies when the price is updated.\r\n    event PriceUpdated(uint64 price, uint8 decimals, uint256 timestamp, bytes32 drTxHash);\r\n\r\n    /// Notifies when found an error decoding request result.\r\n    event ResultError(string reason);\r\n\r\n    /// Constructor.\r\n    /// @param _wrb WitnetRequestBoard instance, or proxy, address.\r\n    /// @param _erc2362str Price feed denomination, according to ERC2362 specs.\r\n    /// @param _decimals Fixed number of decimals.\r\n    constructor (\r\n            WitnetRequestBoard _wrb,\r\n            string memory _erc2362str,\r\n            uint8 _decimals\r\n        )\r\n        Payable(address(0))\r\n        UsingWitnet(_wrb)\r\n    {\r\n        creator = msg.sender;\r\n        decimals = _decimals;\r\n        literal = _erc2362str;\r\n        erc2362ID = keccak256(abi.encodePacked(_erc2362str));\r\n    }\r\n\r\n    /// Modifies the Witnet Data Request bytecode used when requesting a new price update.\r\n    /// @dev Fails if called when last request update was not yet completed, or if called\r\n    /// @dev from an address different to the one that deployed this contract.\r\n    function initialize(bytes memory _bytecode)\r\n        public\r\n        virtual override\r\n    {\r\n        require(msg.sender == creator, \"ERC2362PriceFeedBase: only creator\");\r\n        WitnetRequestInitializableBase.initialize(_bytecode);\r\n    }\r\n\r\n    // ================================================================================================================\r\n    // --- Overrides 'UsingWitnet' ------------------------------------------------------------------------------------\r\n\r\n    /// Estimate the reward amount.\r\n    /// @return The reward to be included for the given gas price.\r\n    function _witnetEstimateReward()\r\n        internal view\r\n        virtual override\r\n        returns (uint256)\r\n    {\r\n        return witnet.estimateReward(_getGasPrice());\r\n    }\r\n\r\n    // ================================================================================================================\r\n    // --- Implements 'IERC2362` --------------------------------------------------------------------------------------\r\n\r\n    /// @notice Exposes the public data point in an ERC2362 compliant way.\r\n    /// @dev Returns error `400` if queried for an unknown data point, and `404` if `completeUpdate` has never been called\r\n    /// @dev successfully before.  \r\n    function valueFor(bytes32 _erc2362id)\r\n        external view\r\n        override\r\n        returns (int256, uint256 _timestamp, uint256)\r\n    {\r\n        // Unsupported data point ID\r\n        if(_erc2362id != erc2362ID)\r\n            return(0, 0, 400);\r\n\r\n        _timestamp = lastResponse.timestamp;\r\n        return (\r\n            int256(uint256(lastPrice)),\r\n            _timestamp,\r\n            _timestamp == 0 ? 404 : 200\r\n        );\r\n    }\r\n\r\n    // ================================================================================================================\r\n    // --- Overrides 'Payable' ----------------------------------------------------------------------------------------\r\n\r\n    /// Gets current transaction's gas price.\r\n    function _getGasPrice()\r\n        internal view\r\n        virtual override\r\n        returns (uint256)\r\n    {\r\n        return tx.gasprice;\r\n    }\r\n\r\n    /// Gets current payment value.\r\n    function _getMsgValue()\r\n        internal view\r\n        virtual override\r\n        returns (uint256)\r\n    {\r\n        return msg.value;\r\n    }\r\n\r\n    /// Perform safe transfer or whatever token is used for paying rewards.\r\n    function _safeTransferTo(address payable _to, uint256 _amount)\r\n        internal\r\n        virtual override\r\n    {\r\n        _to.transfer(_amount);\r\n    }\r\n}\r\n// File: contracts\\ERC2362PriceFeed.sol\r\n// Your contract needs to inherit from UsingWitnet\r\ncontract ERC2362PriceFeed\r\n    is\r\n        ERC2362PriceFeedBase\r\n{\r\n    /// Constructor.\r\n    /// @param _wrb WitnetRequestBoard instance, or proxy, address.\r\n    /// @param _erc2362str Price feed denomination, according to ERC2362 specs.\r\n    /// @param _decimals Fixed number of decimals.\r\n    constructor (\r\n            WitnetRequestBoard _wrb,\r\n            string memory _erc2362str,\r\n            uint8 _decimals\r\n        )\r\n        ERC2362PriceFeedBase(_wrb, _erc2362str, _decimals)\r\n    {\r\n    }\r\n\r\n    /// @notice Sends `request` to the WitnetRequestBoard.\r\n    /// @dev This method will only succeed if `pending` is `false`.\r\n    function requestUpdate()\r\n        public payable\r\n        virtual\r\n    {\r\n        require(pending == false, \"ERC2362PriceFeed: pending update\");\r\n\r\n        // Send the request to Witnet and store the ID for later retrieval of the result:\r\n        uint256 _msgValue = _getMsgValue();\r\n        uint256 _reward;\r\n        (requestId, _reward) = _witnetPostRequest(this);\r\n\r\n        // Signal that there is already a pending request\r\n        pending = true;\r\n\r\n        // Transfers back unused funds:\r\n        if (_msgValue > _reward) {\r\n            _safeTransferTo(payable(msg.sender), _msgValue - _reward);\r\n        }\r\n    }\r\n\r\n    /// @notice Upgrade escrowed reward in the WRB, for currently pending request.\r\n    /// @dev This method will only succeed if `pending` is `false`.\r\n    function upgradeRequest()\r\n        public payable\r\n        virtual\r\n    {\r\n        require(pending == true, \"ERC2362PriceFeed: no pending update\");\r\n        uint256 _msgValue = _getMsgValue();\r\n        uint256 _added = _witnetUpgradeReward(requestId);\r\n        // Transfers back unused funds:\r\n        if (_msgValue > _added) {\r\n            _safeTransferTo(payable(msg.sender), _msgValue - _added);\r\n        }\r\n    }\r\n\r\n    /// @notice Reads the result, if ready, from the WitnetRequestBoard.\r\n    /// @dev The `witnetRequestSolved` modifier comes with `UsingWitnet` and allows to\r\n    /// @dev protect your methods from being called before the request has been successfully\r\n    /// @dev relayed into Witnet.\r\n    function completeUpdate()\r\n        public \r\n        witnetRequestSolved(requestId)\r\n    {\r\n        require(pending == true, \"ERC2362PriceFeed: request not solved\");\r\n\r\n        // Retrieves copy of all response data related to the last request, removing it from the WRB.\r\n        Witnet.Response memory _response = witnet.deleteQuery(requestId);\r\n        Witnet.Result memory _result = witnet.resultFromCborBytes(_response.cborBytes);\r\n\r\n        // If the Witnet request succeeded, decode the result and update the price point\r\n        // If it failed, revert the transaction with a pretty-printed error message\r\n        \r\n        if (witnet.isOk(_result)) {\r\n            lastPrice = witnet.asUint64(_result);\r\n            lastResponse = _response;\r\n            emit PriceUpdated(lastPrice, decimals, _response.timestamp, _response.drTxHash);\r\n        } else {\r\n            string memory errorMessage;\r\n            // Try to read the value as an error message, catch error bytes if read fails\r\n            try witnet.asErrorMessage(_result) returns (Witnet.ErrorCodes, string memory e) {\r\n                errorMessage = e;\r\n            }\r\n            catch (bytes memory errorBytes) {\r\n                errorMessage = string(errorBytes);\r\n            }\r\n            emit ResultError(errorMessage);\r\n        }\r\n        // In any case, set `pending` to false so a new update can be requested\r\n        pending = false;\r\n    }\r\n\r\n    // ================================================================================================================\r\n    // --- Overrides 'Payable' ----------------------------------------------------------------------------------------\r\n\r\n    /// Gets current transaction's gas price.\r\n    function _getGasPrice()\r\n        internal view\r\n        virtual override\r\n        returns (uint256)\r\n    {\r\n        return tx.gasprice;\r\n    }\r\n\r\n    /// Gets current payment value.\r\n    function _getMsgValue()\r\n        internal view\r\n        virtual override\r\n        returns (uint256)\r\n    {\r\n        return msg.value;\r\n    }\r\n\r\n    /// Perform safe transfer or whatever token is used for paying rewards.\r\n    function _safeTransferTo(address payable _to, uint256 _amount)\r\n        internal\r\n        virtual override\r\n    {\r\n        _to.transfer(_amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract WitnetRequestBoard\",\"name\":\"_wrb\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_erc2362str\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"erc2362ID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"codehash\",\"type\":\"bytes32\"}],\"name\":\"DataRequestChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"drTxHash\",\"type\":\"bytes32\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"ResultError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bytecode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc2362ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPrice\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastResponse\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"drTxHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"cborBytes\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"literal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestUpdate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_erc2362id\",\"type\":\"bytes32\"}],\"name\":\"valueFor\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"witnet\",\"outputs\":[{\"internalType\":\"contract WitnetRequestBoard\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ERC2362PriceFeed","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009e4fae1c7ac543a81e4e2a5486a0ddaad8194bda00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000f50726963652d4254432f5553442d360000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b4cf34e09d28a54f91b11b04368f3f8340e3f88165ef02c691bc15ae460152a9"}]}