{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/ianolson/code/brendan-fernandes/contracts/ProxyPayout.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Smart Contract Written by: Ian Olson\\n\\npragma solidity ^0.8.4;\\npragma abicoder v2;\\n\\ncontract ProxyPayout {\\n\\n    // ---\\n    // Properties\\n    // ---\\n    address public payoutAddress;\\n\\n    // ---\\n    // Mappings\\n    // ---\\n    mapping(address => bool) isAdmin;\\n\\n    // ---\\n    // Modifiers\\n    // ---\\n    modifier onlyAdmin() {\\n        require(isAdmin[msg.sender], \\\"Only admins.\\\");\\n        _;\\n    }\\n\\n    // ---\\n    // Constructor\\n    // ---\\n\\n    constructor() {\\n        payoutAddress = address(0x711c0385795624A338E0399863dfdad4523C46b3); // Brendan Fernandes Gnosis Safe\\n\\n        isAdmin[msg.sender] = true; // imnotArt Deployer Address\\n        isAdmin[address(0x12b66baFc99D351f7e24874B3e52B1889641D3f3)] = true; // imnotArt Gnosis Safe\\n        isAdmin[payoutAddress] = true; // Brendan Fernandes Address\\n    }\\n\\n    // ---\\n    // Receive Payments\\n    // ---\\n\\n    // @dev Royalty contract can receive ETH via transfer.\\n    // @author Ian Olson\\n    receive() payable external {\\n        (bool success, ) = payable(payoutAddress).call{value: msg.value}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n\\n    // ---\\n    // Update Functions\\n    // ---\\n\\n    // @dev Update the payout address.\\n    // @author Ian Olson\\n    function updatePayoutAddress(address _payoutAddress) public onlyAdmin {\\n        payoutAddress = _payoutAddress;\\n    }\\n\\n    // ---\\n    // Withdraw\\n    // ---\\n\\n    // @dev Withdraw the balance of the contract.\\n    // @author Ian Olson\\n    function withdraw() public onlyAdmin {\\n        uint256 amount = address(this).balance;\\n        require(amount > 0, \\\"Contract balance empty.\\\");\\n        (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"payoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutAddress\",\"type\":\"address\"}],\"name\":\"updatePayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ProxyPayout","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}