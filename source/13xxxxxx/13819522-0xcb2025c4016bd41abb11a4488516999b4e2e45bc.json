{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ExceedInfinity.sol\": {\r\n      \"content\": \"/**\\n\\nExceed Infinity ($XFIN) || ExceedInfinity.io\\n\\nBy the people, for the people.\\nWe invest and farm on the whole Defi ecosystem, bring infinity compound yield to $XFIN holders.\\n\\nFeatures: \\n- Treasury Wallet be protected by Multi-Sig Gnosis Safe.\\n- Ethereum Naming System setup up. (ExceedInfinity.eth)\\n- 100% LP will be locked on Team Finance at the launch.\\n- Contract will be renounced after the launch.\\n- No presale or team tokens\\n- Web3 DAPP publishing in hours after the launch.\\n\\nFairness Protection:\\n- First 2 blocks will be blacklisted to avoid Sniping Bot.\\n- Max transaction amount ?% - 2% of supply at the first 10 mins.\\n- Max Wallet Holding Amount is 2% of supply\\n\\nTax for Buying/Selling: 10%\\n- 4% of each transaction sent to holders as ETH rewards\\n- 3% of each transaction sent to Treasury Wallet\\n- 3% of each transaction sent to the Liquidity Pool\\n\\nSocials:\\nTwitter: https://twitter.com/0xceedInfinity\\nTelegram: https://t.me/exceedinfinity\\nWebsite: https://exceedinfinity.io\\nMedium: https://medium.com/@0xceedInfinity/\\n\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10 >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n\\tfunction _msgSender() internal view virtual returns (address) {\\n\\t\\treturn msg.sender;\\n\\t}\\n\\n\\tfunction _msgData() internal view virtual returns (bytes calldata) {\\n\\t\\treturn msg.data;\\n\\t}\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n\\taddress private _owner;\\n\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\t/**\\n\\t * @dev Initializes the contract setting the deployer as the initial owner.\\n\\t */\\n\\tconstructor() {\\n\\t\\t_transferOwnership(_msgSender());\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the current owner.\\n\\t */\\n\\tfunction owner() public view virtual returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the owner.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Leaves the contract without owner. It will not be possible to call\\n\\t * `onlyOwner` functions anymore. Can only be called by the current owner.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t */\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\t_transferOwnership(address(0));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Can only be called by the current owner.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n\\t\\t_transferOwnership(newOwner);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Internal function without access restriction.\\n\\t */\\n\\tfunction _transferOwnership(address newOwner) internal virtual {\\n\\t\\taddress oldOwner = _owner;\\n\\t\\t_owner = newOwner;\\n\\t\\temit OwnershipTransferred(oldOwner, newOwner);\\n\\t}\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n\\t/**\\n\\t * @dev Returns the amount of tokens in existence.\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the amount of tokens owned by `account`.\\n\\t */\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transfer(address recipient, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Returns the remaining number of tokens that `spender` will be\\n\\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n\\t * zero by default.\\n\\t *\\n\\t * This value changes when {approve} or {transferFrom} are called.\\n\\t */\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n\\t * that someone may use both the old and the new allowance by unfortunate\\n\\t * transaction ordering. One possible solution to mitigate this race\\n\\t * condition is to first reduce the spender's allowance to 0 and set the\\n\\t * desired value afterwards:\\n\\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t */\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n\\t * allowance mechanism. `amount` is then deducted from the caller's\\n\\t * allowance.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n\\t * another (`to`).\\n\\t *\\n\\t * Note that `value` may be zero.\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n\\t * a call to {approve}. `value` is the new allowance.\\n\\t */\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n\\t/**\\n\\t * @dev Returns the name of the token.\\n\\t */\\n\\tfunction name() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the symbol of the token.\\n\\t */\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the decimals places of the token.\\n\\t */\\n\\tfunction decimals() external view returns (uint8);\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n\\tmapping(address => uint256) private _balances;\\n\\n\\tmapping(address => mapping(address => uint256)) private _allowances;\\n\\n\\tuint256 private _totalSupply;\\n\\n\\tstring private _name;\\n\\tstring private _symbol;\\n\\n\\t/**\\n\\t * @dev Sets the values for {name} and {symbol}.\\n\\t *\\n\\t * The default value of {decimals} is 18. To select a different value for\\n\\t * {decimals} you should overload it.\\n\\t *\\n\\t * All two of these values are immutable: they can only be set once during\\n\\t * construction.\\n\\t */\\n\\tconstructor(string memory name_, string memory symbol_) {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the name of the token.\\n\\t */\\n\\tfunction name() public view virtual override returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the symbol of the token, usually a shorter version of the\\n\\t * name.\\n\\t */\\n\\tfunction symbol() public view virtual override returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the number of decimals used to get its user representation.\\n\\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n\\t * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n\\t *\\n\\t * Tokens usually opt for a value of 18, imitating the relationship between\\n\\t * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n\\t * overridden;\\n\\t *\\n\\t * NOTE: This information is only used for _display_ purposes: it in\\n\\t * no way affects any of the arithmetic of the contract, including\\n\\t * {IERC20-balanceOf} and {IERC20-transfer}.\\n\\t */\\n\\tfunction decimals() public view virtual override returns (uint8) {\\n\\t\\treturn 18;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-totalSupply}.\\n\\t */\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn _totalSupply;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-balanceOf}.\\n\\t */\\n\\tfunction balanceOf(address account) public view virtual override returns (uint256) {\\n\\t\\treturn _balances[account];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-transfer}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `recipient` cannot be the zero address.\\n\\t * - the caller must have a balance of at least `amount`.\\n\\t */\\n\\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n\\t\\t_transfer(_msgSender(), recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-allowance}.\\n\\t */\\n\\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\\n\\t\\treturn _allowances[owner][spender];\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-approve}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\\n\\t\\t_approve(_msgSender(), spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC20-transferFrom}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance. This is not\\n\\t * required by the EIP. See the note at the beginning of {ERC20}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `sender` and `recipient` cannot be the zero address.\\n\\t * - `sender` must have a balance of at least `amount`.\\n\\t * - the caller must have allowance for ``sender``'s tokens of at least\\n\\t * `amount`.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) public virtual override returns (bool) {\\n\\t\\t_transfer(sender, recipient, amount);\\n\\n\\t\\tuint256 currentAllowance = _allowances[sender][_msgSender()];\\n\\t\\trequire(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_approve(sender, _msgSender(), currentAllowance - amount);\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Atomically increases the allowance granted to `spender` by the caller.\\n\\t *\\n\\t * This is an alternative to {approve} that can be used as a mitigation for\\n\\t * problems described in {IERC20-approve}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n\\t\\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n\\t *\\n\\t * This is an alternative to {approve} that can be used as a mitigation for\\n\\t * problems described in {IERC20-approve}.\\n\\t *\\n\\t * Emits an {Approval} event indicating the updated allowance.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `spender` cannot be the zero address.\\n\\t * - `spender` must have allowance for the caller of at least\\n\\t * `subtractedValue`.\\n\\t */\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n\\t\\tuint256 currentAllowance = _allowances[_msgSender()][spender];\\n\\t\\trequire(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n\\t *\\n\\t * This internal function is equivalent to {transfer}, and can be used to\\n\\t * e.g. implement automatic token fees, slashing mechanisms, etc.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `sender` cannot be the zero address.\\n\\t * - `recipient` cannot be the zero address.\\n\\t * - `sender` must have a balance of at least `amount`.\\n\\t */\\n\\tfunction _transfer(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) internal virtual {\\n\\t\\trequire(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n\\t\\trequire(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(sender, recipient, amount);\\n\\n\\t\\tuint256 senderBalance = _balances[sender];\\n\\t\\trequire(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[sender] = senderBalance - amount;\\n\\t\\t}\\n\\t\\t_balances[recipient] += amount;\\n\\n\\t\\temit Transfer(sender, recipient, amount);\\n\\n\\t\\t_afterTokenTransfer(sender, recipient, amount);\\n\\t}\\n\\n\\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n\\t * the total supply.\\n\\t *\\n\\t * Emits a {Transfer} event with `from` set to the zero address.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `account` cannot be the zero address.\\n\\t */\\n\\tfunction _mint(address account, uint256 amount) internal virtual {\\n\\t\\trequire(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(address(0), account, amount);\\n\\n\\t\\t_totalSupply += amount;\\n\\t\\t_balances[account] += amount;\\n\\t\\temit Transfer(address(0), account, amount);\\n\\n\\t\\t_afterTokenTransfer(address(0), account, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys `amount` tokens from `account`, reducing the\\n\\t * total supply.\\n\\t *\\n\\t * Emits a {Transfer} event with `to` set to the zero address.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `account` cannot be the zero address.\\n\\t * - `account` must have at least `amount` tokens.\\n\\t */\\n\\tfunction _burn(address account, uint256 amount) internal virtual {\\n\\t\\trequire(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(account, address(0), amount);\\n\\n\\t\\tuint256 accountBalance = _balances[account];\\n\\t\\trequire(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n\\t\\tunchecked {\\n\\t\\t\\t_balances[account] = accountBalance - amount;\\n\\t\\t}\\n\\t\\t_totalSupply -= amount;\\n\\n\\t\\temit Transfer(account, address(0), amount);\\n\\n\\t\\t_afterTokenTransfer(account, address(0), amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n\\t *\\n\\t * This internal function is equivalent to `approve`, and can be used to\\n\\t * e.g. set automatic allowances for certain subsystems, etc.\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `owner` cannot be the zero address.\\n\\t * - `spender` cannot be the zero address.\\n\\t */\\n\\tfunction _approve(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 amount\\n\\t) internal virtual {\\n\\t\\trequire(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n\\t\\trequire(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n\\t\\t_allowances[owner][spender] = amount;\\n\\t\\temit Approval(owner, spender, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Hook that is called before any transfer of tokens. This includes\\n\\t * minting and burning.\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n\\t * will be transferred to `to`.\\n\\t * - when `from` is zero, `amount` tokens will be minted for `to`.\\n\\t * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n\\t * - `from` and `to` are never both zero.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) internal virtual {}\\n\\n\\t/**\\n\\t * @dev Hook that is called after any transfer of tokens. This includes\\n\\t * minting and burning.\\n\\t *\\n\\t * Calling conditions:\\n\\t *\\n\\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n\\t * has been transferred to `to`.\\n\\t * - when `from` is zero, `amount` tokens have been minted for `to`.\\n\\t * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n\\t * - `from` and `to` are never both zero.\\n\\t *\\n\\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n\\t */\\n\\tfunction _afterTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) internal virtual {}\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n\\t/**\\n\\t * @dev Returns true if `account` is a contract.\\n\\t *\\n\\t * [IMPORTANT]\\n\\t * ====\\n\\t * It is unsafe to assume that an address for which this function returns\\n\\t * false is an externally-owned account (EOA) and not a contract.\\n\\t *\\n\\t * Among others, `isContract` will return false for the following\\n\\t * types of addresses:\\n\\t *\\n\\t *  - an externally-owned account\\n\\t *  - a contract in construction\\n\\t *  - an address where a contract will be created\\n\\t *  - an address where a contract lived, but was destroyed\\n\\t * ====\\n\\t */\\n\\tfunction isContract(address account) internal view returns (bool) {\\n\\t\\t// This method relies on extcodesize, which returns 0 for contracts in\\n\\t\\t// construction, since the code is only stored at the end of the\\n\\t\\t// constructor execution.\\n\\n\\t\\tuint256 size;\\n\\t\\tassembly {\\n\\t\\t\\tsize := extcodesize(account)\\n\\t\\t}\\n\\t\\treturn size > 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n\\t * `recipient`, forwarding all available gas and reverting on errors.\\n\\t *\\n\\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n\\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n\\t * imposed by `transfer`, making them unable to receive funds via\\n\\t * `transfer`. {sendValue} removes this limitation.\\n\\t *\\n\\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n\\t *\\n\\t * IMPORTANT: because control is transferred to `recipient`, care must be\\n\\t * taken to not create reentrancy vulnerabilities. Consider using\\n\\t * {ReentrancyGuard} or the\\n\\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n\\t */\\n\\tfunction sendValue(address payable recipient, uint256 amount) internal {\\n\\t\\trequire(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n\\t\\t(bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n\\t\\trequire(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Performs a Solidity function call using a low level `call`. A\\n\\t * plain `call` is an unsafe replacement for a function call: use this\\n\\t * function instead.\\n\\t *\\n\\t * If `target` reverts with a revert reason, it is bubbled up by this\\n\\t * function (like regular Solidity function calls).\\n\\t *\\n\\t * Returns the raw returned data. To convert to the expected return value,\\n\\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `target` must be a contract.\\n\\t * - calling `target` with `data` must not revert.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n\\t\\treturn functionCall(target, data, \\\"Address: low-level call failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n\\t * `errorMessage` as a fallback revert reason when `target` reverts.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCall(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tstring memory errorMessage\\n\\t) internal returns (bytes memory) {\\n\\t\\treturn functionCallWithValue(target, data, 0, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n\\t * but also transferring `value` wei to `target`.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - the calling contract must have an ETH balance of at least `value`.\\n\\t * - the called Solidity function must be `payable`.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCallWithValue(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tuint256 value\\n\\t) internal returns (bytes memory) {\\n\\t\\treturn functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n\\t * with `errorMessage` as a fallback revert reason when `target` reverts.\\n\\t *\\n\\t * _Available since v3.1._\\n\\t */\\n\\tfunction functionCallWithValue(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tuint256 value,\\n\\t\\tstring memory errorMessage\\n\\t) internal returns (bytes memory) {\\n\\t\\trequire(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n\\t\\trequire(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n\\t\\t(bool success, bytes memory returndata) = target.call{ value: value }(data);\\n\\t\\treturn verifyCallResult(success, returndata, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n\\t * but performing a static call.\\n\\t *\\n\\t * _Available since v3.3._\\n\\t */\\n\\tfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n\\t\\treturn functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n\\t * but performing a static call.\\n\\t *\\n\\t * _Available since v3.3._\\n\\t */\\n\\tfunction functionStaticCall(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tstring memory errorMessage\\n\\t) internal view returns (bytes memory) {\\n\\t\\trequire(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n\\t\\t(bool success, bytes memory returndata) = target.staticcall(data);\\n\\t\\treturn verifyCallResult(success, returndata, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n\\t * but performing a delegate call.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n\\t\\treturn functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n\\t * but performing a delegate call.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction functionDelegateCall(\\n\\t\\taddress target,\\n\\t\\tbytes memory data,\\n\\t\\tstring memory errorMessage\\n\\t) internal returns (bytes memory) {\\n\\t\\trequire(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n\\t\\t(bool success, bytes memory returndata) = target.delegatecall(data);\\n\\t\\treturn verifyCallResult(success, returndata, errorMessage);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n\\t * revert reason using the provided one.\\n\\t *\\n\\t * _Available since v4.3._\\n\\t */\\n\\tfunction verifyCallResult(\\n\\t\\tbool success,\\n\\t\\tbytes memory returndata,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (bytes memory) {\\n\\t\\tif (success) {\\n\\t\\t\\treturn returndata;\\n\\t\\t} else {\\n\\t\\t\\t// Look for revert reason and bubble it up if present\\n\\t\\t\\tif (returndata.length > 0) {\\n\\t\\t\\t\\t// The easiest way to bubble the revert reason is using memory via assembly\\n\\n\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\tlet returndata_size := mload(returndata)\\n\\t\\t\\t\\t\\trevert(add(32, returndata), returndata_size)\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert(errorMessage);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n\\t/**\\n\\t * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\tuint256 c = a + b;\\n\\t\\t\\tif (c < a) return (false, 0);\\n\\t\\t\\treturn (true, c);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\tif (b > a) return (false, 0);\\n\\t\\t\\treturn (true, a - b);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\t\\t\\t// benefit is lost if 'b' is also tested.\\n\\t\\t\\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n\\t\\t\\tif (a == 0) return (true, 0);\\n\\t\\t\\tuint256 c = a * b;\\n\\t\\t\\tif (c / a != b) return (false, 0);\\n\\t\\t\\treturn (true, c);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\tif (b == 0) return (false, 0);\\n\\t\\t\\treturn (true, a / b);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n\\t *\\n\\t * _Available since v3.4._\\n\\t */\\n\\tfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\tif (b == 0) return (false, 0);\\n\\t\\t\\treturn (true, a % b);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the addition of two unsigned integers, reverting on\\n\\t * overflow.\\n\\t *\\n\\t * Counterpart to Solidity's `+` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Addition cannot overflow.\\n\\t */\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn a + b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting on\\n\\t * overflow (when the result is negative).\\n\\t *\\n\\t * Counterpart to Solidity's `-` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Subtraction cannot overflow.\\n\\t */\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn a - b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the multiplication of two unsigned integers, reverting on\\n\\t * overflow.\\n\\t *\\n\\t * Counterpart to Solidity's `*` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Multiplication cannot overflow.\\n\\t */\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn a * b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the integer division of two unsigned integers, reverting on\\n\\t * division by zero. The result is rounded towards zero.\\n\\t *\\n\\t * Counterpart to Solidity's `/` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn a / b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n\\t * reverting when dividing by zero.\\n\\t *\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\n\\t * invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn a % b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n\\t * overflow (when the result is negative).\\n\\t *\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\n\\t * message unnecessarily. For custom revert reasons use {trySub}.\\n\\t *\\n\\t * Counterpart to Solidity's `-` operator.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - Subtraction cannot overflow.\\n\\t */\\n\\tfunction sub(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(b <= a, errorMessage);\\n\\t\\t\\treturn a - b;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n\\t * division by zero. The result is rounded towards zero.\\n\\t *\\n\\t * Counterpart to Solidity's `/` operator. Note: this function uses a\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction div(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(b > 0, errorMessage);\\n\\t\\t\\treturn a / b;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n\\t * reverting with custom message when dividing by zero.\\n\\t *\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\n\\t * message unnecessarily. For custom revert reasons use {tryMod}.\\n\\t *\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\n\\t * invalid opcode to revert (consuming all remaining gas).\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - The divisor cannot be zero.\\n\\t */\\n\\tfunction mod(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(b > 0, errorMessage);\\n\\t\\t\\treturn a % b;\\n\\t\\t}\\n\\t}\\n}\\n\\n////// src/IUniswapV2Factory.sol\\n/* pragma solidity 0.8.10; */\\n/* pragma experimental ABIEncoderV2; */\\n\\ninterface IUniswapV2Factory {\\n\\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n\\tfunction feeTo() external view returns (address);\\n\\n\\tfunction feeToSetter() external view returns (address);\\n\\n\\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n\\tfunction allPairs(uint256) external view returns (address pair);\\n\\n\\tfunction allPairsLength() external view returns (uint256);\\n\\n\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n\\tfunction setFeeTo(address) external;\\n\\n\\tfunction setFeeToSetter(address) external;\\n}\\n\\n////// src/IUniswapV2Pair.sol\\n/* pragma solidity 0.8.10; */\\n/* pragma experimental ABIEncoderV2; */\\n\\ninterface IUniswapV2Pair {\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\tfunction name() external pure returns (string memory);\\n\\n\\tfunction symbol() external pure returns (string memory);\\n\\n\\tfunction decimals() external pure returns (uint8);\\n\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\tfunction balanceOf(address owner) external view returns (uint256);\\n\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\tfunction approve(address spender, uint256 value) external returns (bool);\\n\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) external returns (bool);\\n\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n\\tfunction nonces(address owner) external view returns (uint256);\\n\\n\\tfunction permit(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 value,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n\\tevent Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n\\tevent Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n\\tevent Sync(uint112 reserve0, uint112 reserve1);\\n\\n\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n\\tfunction factory() external view returns (address);\\n\\n\\tfunction token0() external view returns (address);\\n\\n\\tfunction token1() external view returns (address);\\n\\n\\tfunction getReserves()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint112 reserve0,\\n\\t\\t\\tuint112 reserve1,\\n\\t\\t\\tuint32 blockTimestampLast\\n\\t\\t);\\n\\n\\tfunction price0CumulativeLast() external view returns (uint256);\\n\\n\\tfunction price1CumulativeLast() external view returns (uint256);\\n\\n\\tfunction kLast() external view returns (uint256);\\n\\n\\tfunction mint(address to) external returns (uint256 liquidity);\\n\\n\\tfunction burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n\\tfunction swap(\\n\\t\\tuint256 amount0Out,\\n\\t\\tuint256 amount1Out,\\n\\t\\taddress to,\\n\\t\\tbytes calldata data\\n\\t) external;\\n\\n\\tfunction skim(address to) external;\\n\\n\\tfunction sync() external;\\n\\n\\tfunction initialize(address, address) external;\\n}\\n\\n////// src/IUniswapV2Router02.sol\\n/* pragma solidity 0.8.10; */\\n/* pragma experimental ABIEncoderV2; */\\n\\ninterface IUniswapV2Router02 {\\n\\tfunction factory() external pure returns (address);\\n\\n\\tfunction WETH() external pure returns (address);\\n\\n\\tfunction addLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 amountADesired,\\n\\t\\tuint256 amountBDesired,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t)\\n\\t\\texternal\\n\\t\\treturns (\\n\\t\\t\\tuint256 amountA,\\n\\t\\t\\tuint256 amountB,\\n\\t\\t\\tuint256 liquidity\\n\\t\\t);\\n\\n\\tfunction addLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint256 amountTokenDesired,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (\\n\\t\\t\\tuint256 amountToken,\\n\\t\\t\\tuint256 amountETH,\\n\\t\\t\\tuint256 liquidity\\n\\t\\t);\\n\\n\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external;\\n\\n\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable;\\n\\n\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external;\\n}\\n\\ncontract ExceedInfinity is Ownable, IERC20 {\\n\\taddress UNISWAPROUTER = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\taddress DEAD = 0x000000000000000000000000000000000000dEaD;\\n\\taddress ZERO = 0x0000000000000000000000000000000000000000;\\n\\n\\tstring private _name = \\\"Exceed Infinity\\\";\\n\\tstring private _symbol = \\\"XFIN\\\";\\n\\n\\tuint256 public treasuryFeeBPS = 300;\\n\\tuint256 public liquidityFeeBPS = 300;\\n\\tuint256 public dividendFeeBPS = 400;\\n\\tuint256 public totalFeeBPS = 1000;\\n\\n\\tuint256 public swapTokensAtAmount = 100000 * (10**18);\\n\\tuint256 public lastSwapTime;\\n\\tbool swapAllToken = true;\\n\\n\\tbool public swapEnabled = true;\\n\\tbool public taxEnabled = true;\\n\\tbool public compoundingEnabled = true;\\n\\n\\tuint256 private _totalSupply;\\n\\tbool private swapping;\\n\\n\\taddress marketingWallet;\\n\\taddress liquidityWallet;\\n\\n\\tmapping(address => uint256) private _balances;\\n\\tmapping(address => mapping(address => uint256)) private _allowances;\\n\\tmapping(address => bool) private _isExcludedFromFees;\\n\\tmapping(address => bool) public automatedMarketMakerPairs;\\n\\tmapping(address => bool) private _whiteList;\\n\\tmapping(address => bool) isBlacklisted;\\n\\n\\tevent SwapAndAddLiquidity(uint256 tokensSwapped, uint256 nativeReceived, uint256 tokensIntoLiquidity);\\n\\tevent SendDividends(uint256 tokensSwapped, uint256 amount);\\n\\tevent ExcludeFromFees(address indexed account, bool isExcluded);\\n\\tevent SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\n\\tevent UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\\n\\tevent SwapEnabled(bool enabled);\\n\\tevent TaxEnabled(bool enabled);\\n\\tevent CompoundingEnabled(bool enabled);\\n\\tevent BlacklistEnabled(bool enabled);\\n\\n\\tDividendTracker public dividendTracker;\\n\\tIUniswapV2Router02 public uniswapV2Router;\\n\\n\\taddress public uniswapV2Pair;\\n\\n\\tuint256 public maxTxBPS = 49;\\n\\tuint256 public maxWalletBPS = 200;\\n\\n\\tbool isOpen = false;\\n\\n\\tmapping(address => bool) private _isExcludedFromMaxTx;\\n\\tmapping(address => bool) private _isExcludedFromMaxWallet;\\n\\n\\tconstructor(\\n\\t\\taddress _marketingWallet,\\n\\t\\taddress _liquidityWallet,\\n\\t\\taddress[] memory whitelistAddress\\n\\t) {\\n\\t\\tmarketingWallet = _marketingWallet;\\n\\t\\tliquidityWallet = _liquidityWallet;\\n\\t\\tincludeToWhiteList(whitelistAddress);\\n\\n\\t\\tdividendTracker = new DividendTracker(address(this), UNISWAPROUTER);\\n\\n\\t\\tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(UNISWAPROUTER);\\n\\n\\t\\taddress _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\n\\n\\t\\tuniswapV2Router = _uniswapV2Router;\\n\\t\\tuniswapV2Pair = _uniswapV2Pair;\\n\\n\\t\\t_setAutomatedMarketMakerPair(_uniswapV2Pair, true);\\n\\n\\t\\tdividendTracker.excludeFromDividends(address(dividendTracker), true);\\n\\t\\tdividendTracker.excludeFromDividends(address(this), true);\\n\\t\\tdividendTracker.excludeFromDividends(owner(), true);\\n\\t\\tdividendTracker.excludeFromDividends(address(_uniswapV2Router), true);\\n\\n\\t\\texcludeFromFees(owner(), true);\\n\\t\\texcludeFromFees(address(this), true);\\n\\t\\texcludeFromFees(address(dividendTracker), true);\\n\\n\\t\\texcludeFromMaxTx(owner(), true);\\n\\t\\texcludeFromMaxTx(address(this), true);\\n\\t\\texcludeFromMaxTx(address(dividendTracker), true);\\n\\n\\t\\texcludeFromMaxWallet(owner(), true);\\n\\t\\texcludeFromMaxWallet(address(this), true);\\n\\t\\texcludeFromMaxWallet(address(dividendTracker), true);\\n\\n\\t\\t_mint(owner(), 10000000000 * (10**18));\\n\\t}\\n\\n\\treceive() external payable {}\\n\\n\\tfunction name() public view returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\tfunction symbol() public view returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\tfunction decimals() public pure returns (uint8) {\\n\\t\\treturn 18;\\n\\t}\\n\\n\\tfunction totalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn _totalSupply;\\n\\t}\\n\\n\\tfunction balanceOf(address account) public view virtual override returns (uint256) {\\n\\t\\treturn _balances[account];\\n\\t}\\n\\n\\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\\n\\t\\treturn _allowances[owner][spender];\\n\\t}\\n\\n\\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\\n\\t\\t_approve(_msgSender(), spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n\\t\\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n\\t\\tuint256 currentAllowance = _allowances[_msgSender()][spender];\\n\\t\\trequire(currentAllowance >= subtractedValue, \\\"ExceedInfinity: decreased allowance below zero\\\");\\n\\t\\t_approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n\\t\\t_transfer(_msgSender(), recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) public virtual override returns (bool) {\\n\\t\\t_transfer(sender, recipient, amount);\\n\\t\\tuint256 currentAllowance = _allowances[sender][_msgSender()];\\n\\t\\trequire(currentAllowance >= amount, \\\"ExceedInfinity: transfer amount exceeds allowance\\\");\\n\\t\\t_approve(sender, _msgSender(), currentAllowance - amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction openTrading() external onlyOwner {\\n\\t\\tisOpen = true;\\n\\t}\\n\\n\\tfunction _transfer(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) internal {\\n\\t\\trequire(isOpen || sender == owner() || recipient == owner() || _whiteList[sender] || _whiteList[recipient], \\\"Not Open\\\");\\n\\n\\t\\trequire(!isBlacklisted[sender], \\\"ExceedInfinity: Sender is blacklisted\\\");\\n\\t\\trequire(!isBlacklisted[recipient], \\\"ExceedInfinity: Recipient is blacklisted\\\");\\n\\n\\t\\trequire(sender != address(0), \\\"ExceedInfinity: transfer from the zero address\\\");\\n\\t\\trequire(recipient != address(0), \\\"ExceedInfinity: transfer to the zero address\\\");\\n\\n\\t\\tuint256 _maxTxAmount = (totalSupply() * maxTxBPS) / 10000;\\n\\t\\tuint256 _maxWallet = (totalSupply() * maxWalletBPS) / 10000;\\n\\t\\trequire(amount <= _maxTxAmount || _isExcludedFromMaxTx[sender], \\\"TX Limit Exceeded\\\");\\n\\n\\t\\tif (sender != owner() && recipient != address(this) && recipient != address(DEAD) && recipient != uniswapV2Pair) {\\n\\t\\t\\tuint256 currentBalance = balanceOf(recipient);\\n\\t\\t\\trequire(_isExcludedFromMaxWallet[recipient] || (currentBalance + amount <= _maxWallet));\\n\\t\\t}\\n\\n\\t\\tuint256 senderBalance = _balances[sender];\\n\\t\\trequire(senderBalance >= amount, \\\"ExceedInfinity: transfer amount exceeds balance\\\");\\n\\n\\t\\tuint256 contractTokenBalance = balanceOf(address(this));\\n\\t\\tuint256 contractNativeBalance = address(this).balance;\\n\\n\\t\\tbool canSwap = contractTokenBalance >= swapTokensAtAmount;\\n\\n\\t\\tif (\\n\\t\\t\\tswapEnabled && // True\\n\\t\\t\\tcanSwap && // true\\n\\t\\t\\t!swapping && // swapping=false !false true\\n\\t\\t\\t!automatedMarketMakerPairs[sender] && // no swap on remove liquidity step 1 or DEX buy\\n\\t\\t\\tsender != address(uniswapV2Router) && // no swap on remove liquidity step 2\\n\\t\\t\\tsender != owner() &&\\n\\t\\t\\trecipient != owner()\\n\\t\\t) {\\n\\t\\t\\tswapping = true;\\n\\n\\t\\t\\tif (!swapAllToken) {\\n\\t\\t\\t\\tcontractTokenBalance = swapTokensAtAmount;\\n\\t\\t\\t}\\n\\t\\t\\t_executeSwap(contractTokenBalance, contractNativeBalance);\\n\\n\\t\\t\\tlastSwapTime = block.timestamp;\\n\\t\\t\\tswapping = false;\\n\\t\\t}\\n\\n\\t\\tbool takeFee;\\n\\n\\t\\tif (sender == address(uniswapV2Pair) || recipient == address(uniswapV2Pair)) {\\n\\t\\t\\ttakeFee = true;\\n\\t\\t}\\n\\n\\t\\tif (_isExcludedFromFees[sender] || _isExcludedFromFees[recipient]) {\\n\\t\\t\\ttakeFee = false;\\n\\t\\t}\\n\\n\\t\\tif (swapping || !taxEnabled) {\\n\\t\\t\\ttakeFee = false;\\n\\t\\t}\\n\\n\\t\\tif (takeFee) {\\n\\t\\t\\tuint256 fees = (amount * totalFeeBPS) / 10000;\\n\\t\\t\\tamount -= fees;\\n\\t\\t\\t_executeTransfer(sender, address(this), fees);\\n\\t\\t}\\n\\n\\t\\t_executeTransfer(sender, recipient, amount);\\n\\n\\t\\tdividendTracker.setBalance(payable(sender), balanceOf(sender));\\n\\t\\tdividendTracker.setBalance(payable(recipient), balanceOf(recipient));\\n\\t}\\n\\n\\tfunction _executeTransfer(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) private {\\n\\t\\trequire(sender != address(0), \\\"ExceedInfinity: transfer from the zero address\\\");\\n\\t\\trequire(recipient != address(0), \\\"ExceedInfinity: transfer to the zero address\\\");\\n\\t\\tuint256 senderBalance = _balances[sender];\\n\\t\\trequire(senderBalance >= amount, \\\"ExceedInfinity: transfer amount exceeds balance\\\");\\n\\t\\t_balances[sender] = senderBalance - amount;\\n\\t\\t_balances[recipient] += amount;\\n\\t\\temit Transfer(sender, recipient, amount);\\n\\t}\\n\\n\\tfunction _approve(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 amount\\n\\t) private {\\n\\t\\trequire(owner != address(0), \\\"ExceedInfinity: approve from the zero address\\\");\\n\\t\\trequire(spender != address(0), \\\"ExceedInfinity: approve to the zero address\\\");\\n\\t\\t_allowances[owner][spender] = amount;\\n\\t\\temit Approval(owner, spender, amount);\\n\\t}\\n\\n\\tfunction _mint(address account, uint256 amount) private {\\n\\t\\trequire(account != address(0), \\\"ExceedInfinity: mint to the zero address\\\");\\n\\t\\t_totalSupply += amount;\\n\\t\\t_balances[account] += amount;\\n\\t\\temit Transfer(address(0), account, amount);\\n\\t}\\n\\n\\tfunction _burn(address account, uint256 amount) private {\\n\\t\\trequire(account != address(0), \\\"ExceedInfinity: burn from the zero address\\\");\\n\\t\\tuint256 accountBalance = _balances[account];\\n\\t\\trequire(accountBalance >= amount, \\\"ExceedInfinity: burn amount exceeds balance\\\");\\n\\t\\t_balances[account] = accountBalance - amount;\\n\\t\\t_totalSupply -= amount;\\n\\t\\temit Transfer(account, address(0), amount);\\n\\t}\\n\\n\\tfunction swapTokensForNative(uint256 tokens) private {\\n\\t\\taddress[] memory path = new address[](2);\\n\\t\\tpath[0] = address(this);\\n\\t\\tpath[1] = uniswapV2Router.WETH();\\n\\t\\t_approve(address(this), address(uniswapV2Router), tokens);\\n\\t\\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n\\t\\t\\ttokens,\\n\\t\\t\\t0, // accept any amount of native\\n\\t\\t\\tpath,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n\\n\\tfunction addLiquidity(uint256 tokens, uint256 native) private {\\n\\t\\t_approve(address(this), address(uniswapV2Router), tokens);\\n\\t\\tuniswapV2Router.addLiquidityETH{ value: native }(\\n\\t\\t\\taddress(this),\\n\\t\\t\\ttokens,\\n\\t\\t\\t0, // slippage unavoidable\\n\\t\\t\\t0, // slippage unavoidable\\n\\t\\t\\tliquidityWallet,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n\\n\\tfunction includeToWhiteList(address[] memory _users) private {\\n\\t\\tfor (uint8 i = 0; i < _users.length; i++) {\\n\\t\\t\\t_whiteList[_users[i]] = true;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _executeSwap(uint256 tokens, uint256 native) private {\\n\\t\\tif (tokens <= 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tuint256 swapTokensMarketing;\\n\\t\\tif (address(marketingWallet) != address(0)) {\\n\\t\\t\\tswapTokensMarketing = (tokens * treasuryFeeBPS) / totalFeeBPS;\\n\\t\\t}\\n\\n\\t\\tuint256 swapTokensDividends;\\n\\t\\tif (dividendTracker.totalSupply() > 0) {\\n\\t\\t\\tswapTokensDividends = (tokens * dividendFeeBPS) / totalFeeBPS;\\n\\t\\t}\\n\\n\\t\\tuint256 tokensForLiquidity = tokens - swapTokensMarketing - swapTokensDividends;\\n\\t\\tuint256 swapTokensLiquidity = tokensForLiquidity / 2;\\n\\t\\tuint256 addTokensLiquidity = tokensForLiquidity - swapTokensLiquidity;\\n\\t\\tuint256 swapTokensTotal = swapTokensMarketing + swapTokensDividends + swapTokensLiquidity;\\n\\n\\t\\tuint256 initNativeBal = address(this).balance;\\n\\t\\tswapTokensForNative(swapTokensTotal);\\n\\t\\tuint256 nativeSwapped = (address(this).balance - initNativeBal) + native;\\n\\n\\t\\tuint256 nativeMarketing = (nativeSwapped * swapTokensMarketing) / swapTokensTotal;\\n\\t\\tuint256 nativeDividends = (nativeSwapped * swapTokensDividends) / swapTokensTotal;\\n\\t\\tuint256 nativeLiquidity = nativeSwapped - nativeMarketing - nativeDividends;\\n\\n\\t\\tif (nativeMarketing > 0) {\\n\\t\\t\\tpayable(marketingWallet).transfer(nativeMarketing);\\n\\t\\t}\\n\\n\\t\\taddLiquidity(addTokensLiquidity, nativeLiquidity);\\n\\t\\temit SwapAndAddLiquidity(swapTokensLiquidity, nativeLiquidity, addTokensLiquidity);\\n\\n\\t\\tif (nativeDividends > 0) {\\n\\t\\t\\t(bool success, ) = address(dividendTracker).call{ value: nativeDividends }(\\\"\\\");\\n\\t\\t\\tif (success) {\\n\\t\\t\\t\\temit SendDividends(swapTokensDividends, nativeDividends);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction excludeFromFees(address account, bool excluded) public onlyOwner {\\n\\t\\trequire(_isExcludedFromFees[account] != excluded, \\\"ExceedInfinity: account is already set to requested state\\\");\\n\\t\\t_isExcludedFromFees[account] = excluded;\\n\\t\\temit ExcludeFromFees(account, excluded);\\n\\t}\\n\\n\\tfunction isExcludedFromFees(address account) public view returns (bool) {\\n\\t\\treturn _isExcludedFromFees[account];\\n\\t}\\n\\n\\tfunction manualSendDividend(uint256 amount, address holder) external onlyOwner {\\n\\t\\tdividendTracker.manualSendDividend(amount, holder);\\n\\t}\\n\\n\\tfunction excludeFromDividends(address account, bool excluded) public onlyOwner {\\n\\t\\tdividendTracker.excludeFromDividends(account, excluded);\\n\\t}\\n\\n\\tfunction isExcludedFromDividends(address account) public view returns (bool) {\\n\\t\\treturn dividendTracker.isExcludedFromDividends(account);\\n\\t}\\n\\n\\tfunction setWallet(address payable _marketingWallet, address payable _liquidityWallet) external onlyOwner {\\n\\t\\tmarketingWallet = _marketingWallet;\\n\\t\\tliquidityWallet = _liquidityWallet;\\n\\t}\\n\\n\\tfunction setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\\n\\t\\trequire(pair != uniswapV2Pair, \\\"ExceedInfinity: DEX pair can not be removed\\\");\\n\\t\\t_setAutomatedMarketMakerPair(pair, value);\\n\\t}\\n\\n\\tfunction setFee(\\n\\t\\tuint256 _treasuryFee,\\n\\t\\tuint256 _liquidityFee,\\n\\t\\tuint256 _dividendFee\\n\\t) external onlyOwner {\\n\\t\\ttreasuryFeeBPS = _treasuryFee;\\n\\t\\tliquidityFeeBPS = _liquidityFee;\\n\\t\\tdividendFeeBPS = _dividendFee;\\n\\t\\ttotalFeeBPS = _treasuryFee + _liquidityFee + _dividendFee;\\n\\t}\\n\\n\\tfunction _setAutomatedMarketMakerPair(address pair, bool value) private {\\n\\t\\trequire(automatedMarketMakerPairs[pair] != value, \\\"ExceedInfinity: automated market maker pair is already set to that value\\\");\\n\\t\\tautomatedMarketMakerPairs[pair] = value;\\n\\t\\tif (value) {\\n\\t\\t\\tdividendTracker.excludeFromDividends(pair, true);\\n\\t\\t}\\n\\t\\temit SetAutomatedMarketMakerPair(pair, value);\\n\\t}\\n\\n\\tfunction updateUniswapV2Router(address newAddress) public onlyOwner {\\n\\t\\trequire(newAddress != address(uniswapV2Router), \\\"ExceedInfinity: the router is already set to the new address\\\");\\n\\t\\temit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\\n\\t\\tuniswapV2Router = IUniswapV2Router02(newAddress);\\n\\t\\taddress _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\n\\t\\tuniswapV2Pair = _uniswapV2Pair;\\n\\t}\\n\\n\\tfunction claim() public {\\n\\t\\tdividendTracker.processAccount(payable(_msgSender()));\\n\\t}\\n\\n\\tfunction compound() public {\\n\\t\\trequire(compoundingEnabled, \\\"ExceedInfinity: compounding is not enabled\\\");\\n\\t\\tdividendTracker.compoundAccount(payable(_msgSender()));\\n\\t}\\n\\n\\tfunction withdrawableDividendOf(address account) public view returns (uint256) {\\n\\t\\treturn dividendTracker.withdrawableDividendOf(account);\\n\\t}\\n\\n\\tfunction withdrawnDividendOf(address account) public view returns (uint256) {\\n\\t\\treturn dividendTracker.withdrawnDividendOf(account);\\n\\t}\\n\\n\\tfunction totalDividendsWithdrawn() public view returns (uint256) {\\n\\t\\treturn dividendTracker.totalDividendsWithdrawn();\\n\\t}\\n\\n\\tfunction totalDividendsDistributed() public view returns (uint256) {\\n\\t\\treturn dividendTracker.totalDividendsDistributed();\\n\\t}\\n\\n\\tfunction accumulativeDividendOf(address account) public view returns (uint256) {\\n\\t\\treturn dividendTracker.accumulativeDividendOf(account);\\n\\t}\\n\\n\\tfunction getAccountInfo(address account)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256\\n\\t\\t)\\n\\t{\\n\\t\\treturn dividendTracker.getAccountInfo(account);\\n\\t}\\n\\n\\tfunction getLastClaimTime(address account) public view returns (uint256) {\\n\\t\\treturn dividendTracker.getLastClaimTime(account);\\n\\t}\\n\\n\\tfunction setSwapEnabled(bool _enabled) external onlyOwner {\\n\\t\\tswapEnabled = _enabled;\\n\\t\\temit SwapEnabled(_enabled);\\n\\t}\\n\\n\\tfunction setTaxEnabled(bool _enabled) external onlyOwner {\\n\\t\\ttaxEnabled = _enabled;\\n\\t\\temit TaxEnabled(_enabled);\\n\\t}\\n\\n\\tfunction setCompoundingEnabled(bool _enabled) external onlyOwner {\\n\\t\\tcompoundingEnabled = _enabled;\\n\\t\\temit CompoundingEnabled(_enabled);\\n\\t}\\n\\n\\tfunction updateDividendSettings(\\n\\t\\tbool _swapEnabled,\\n\\t\\tuint256 _swapTokensAtAmount,\\n\\t\\tbool _swapAllToken\\n\\t) external onlyOwner {\\n\\t\\tswapEnabled = _swapEnabled;\\n\\t\\tswapTokensAtAmount = _swapTokensAtAmount;\\n\\t\\tswapAllToken = _swapAllToken;\\n\\t}\\n\\n\\tfunction setMaxTxBPS(uint256 bps) external onlyOwner {\\n\\t\\trequire(bps >= 75 && bps <= 10000, \\\"BPS must be between 75 and 10000\\\");\\n\\t\\tmaxTxBPS = bps;\\n\\t}\\n\\n\\tfunction excludeFromMaxTx(address account, bool excluded) public onlyOwner {\\n\\t\\t_isExcludedFromMaxTx[account] = excluded;\\n\\t}\\n\\n\\tfunction isExcludedFromMaxTx(address account) public view returns (bool) {\\n\\t\\treturn _isExcludedFromMaxTx[account];\\n\\t}\\n\\n\\tfunction setMaxWalletBPS(uint256 bps) external onlyOwner {\\n\\t\\trequire(bps >= 175 && bps <= 10000, \\\"BPS must be between 175 and 10000\\\");\\n\\t\\tmaxWalletBPS = bps;\\n\\t}\\n\\n\\tfunction excludeFromMaxWallet(address account, bool excluded) public onlyOwner {\\n\\t\\t_isExcludedFromMaxWallet[account] = excluded;\\n\\t}\\n\\n\\tfunction isExcludedFromMaxWallet(address account) public view returns (bool) {\\n\\t\\treturn _isExcludedFromMaxWallet[account];\\n\\t}\\n\\n\\tfunction rescueToken(address _token, uint256 _amount) external onlyOwner {\\n\\t\\tIERC20(_token).transfer(msg.sender, _amount);\\n\\t}\\n\\n\\tfunction rescueETH(uint256 _amount) external onlyOwner {\\n\\t\\tpayable(msg.sender).transfer(_amount);\\n\\t}\\n\\n\\tfunction blackList(address _user) public onlyOwner {\\n\\t\\trequire(!isBlacklisted[_user], \\\"user already blacklisted\\\");\\n\\t\\tisBlacklisted[_user] = true;\\n\\t\\t// events?\\n\\t}\\n\\n\\tfunction removeFromBlacklist(address _user) public onlyOwner {\\n\\t\\trequire(isBlacklisted[_user], \\\"user already whitelisted\\\");\\n\\t\\tisBlacklisted[_user] = false;\\n\\t\\t//events?\\n\\t}\\n\\n\\tfunction blackListMany(address[] memory _users) public onlyOwner {\\n\\t\\tfor (uint8 i = 0; i < _users.length; i++) {\\n\\t\\t\\tisBlacklisted[_users[i]] = true;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction unBlackListMany(address[] memory _users) public onlyOwner {\\n\\t\\tfor (uint8 i = 0; i < _users.length; i++) {\\n\\t\\t\\tisBlacklisted[_users[i]] = false;\\n\\t\\t}\\n\\t}\\n}\\n\\ncontract DividendTracker is Ownable, IERC20 {\\n\\taddress UNISWAPROUTER;\\n\\n\\tstring private _name = \\\"ExceedInfinity_DividendTracker\\\";\\n\\tstring private _symbol = \\\"ExceedInfinity_DividendTracker\\\";\\n\\n\\tuint256 public lastProcessedIndex;\\n\\n\\tuint256 private _totalSupply;\\n\\tmapping(address => uint256) private _balances;\\n\\n\\tuint256 private constant magnitude = 2**128;\\n\\tuint256 public immutable minTokenBalanceForDividends;\\n\\tuint256 private magnifiedDividendPerShare;\\n\\tuint256 public totalDividendsDistributed;\\n\\tuint256 public totalDividendsWithdrawn;\\n\\n\\taddress public tokenAddress;\\n\\n\\tmapping(address => bool) public excludedFromDividends;\\n\\tmapping(address => int256) private magnifiedDividendCorrections;\\n\\tmapping(address => uint256) private withdrawnDividends;\\n\\tmapping(address => uint256) private lastClaimTimes;\\n\\n\\tevent DividendsDistributed(address indexed from, uint256 weiAmount);\\n\\tevent DividendWithdrawn(address indexed to, uint256 weiAmount);\\n\\tevent ExcludeFromDividends(address indexed account, bool excluded);\\n\\tevent Claim(address indexed account, uint256 amount);\\n\\tevent Compound(address indexed account, uint256 amount, uint256 tokens);\\n\\n\\tstruct AccountInfo {\\n\\t\\taddress account;\\n\\t\\tuint256 withdrawableDividends;\\n\\t\\tuint256 totalDividends;\\n\\t\\tuint256 lastClaimTime;\\n\\t}\\n\\n\\tconstructor(address _tokenAddress, address _uniswapRouter) {\\n\\t\\tminTokenBalanceForDividends = 10000 * (10**18);\\n\\t\\ttokenAddress = _tokenAddress;\\n\\t\\tUNISWAPROUTER = _uniswapRouter;\\n\\t}\\n\\n\\treceive() external payable {\\n\\t\\tdistributeDividends();\\n\\t}\\n\\n\\tfunction distributeDividends() public payable {\\n\\t\\trequire(_totalSupply > 0);\\n\\t\\tif (msg.value > 0) {\\n\\t\\t\\tmagnifiedDividendPerShare = magnifiedDividendPerShare + ((msg.value * magnitude) / _totalSupply);\\n\\t\\t\\temit DividendsDistributed(msg.sender, msg.value);\\n\\t\\t\\ttotalDividendsDistributed += msg.value;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setBalance(address payable account, uint256 newBalance) external onlyOwner {\\n\\t\\tif (excludedFromDividends[account]) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif (newBalance >= minTokenBalanceForDividends) {\\n\\t\\t\\t_setBalance(account, newBalance);\\n\\t\\t} else {\\n\\t\\t\\t_setBalance(account, 0);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction excludeFromDividends(address account, bool excluded) external onlyOwner {\\n\\t\\trequire(excludedFromDividends[account] != excluded, \\\"ExceedInfinity_DividendTracker: account already set to requested state\\\");\\n\\t\\texcludedFromDividends[account] = excluded;\\n\\t\\tif (excluded) {\\n\\t\\t\\t_setBalance(account, 0);\\n\\t\\t} else {\\n\\t\\t\\tuint256 newBalance = IERC20(tokenAddress).balanceOf(account);\\n\\t\\t\\tif (newBalance >= minTokenBalanceForDividends) {\\n\\t\\t\\t\\t_setBalance(account, newBalance);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t_setBalance(account, 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\temit ExcludeFromDividends(account, excluded);\\n\\t}\\n\\n\\tfunction isExcludedFromDividends(address account) public view returns (bool) {\\n\\t\\treturn excludedFromDividends[account];\\n\\t}\\n\\n\\tfunction manualSendDividend(uint256 amount, address holder) external onlyOwner {\\n\\t\\tuint256 contractETHBalance = address(this).balance;\\n\\t\\tpayable(holder).transfer(amount > 0 ? amount : contractETHBalance);\\n\\t}\\n\\n\\tfunction _setBalance(address account, uint256 newBalance) internal {\\n\\t\\tuint256 currentBalance = _balances[account];\\n\\t\\tif (newBalance > currentBalance) {\\n\\t\\t\\tuint256 addAmount = newBalance - currentBalance;\\n\\t\\t\\t_mint(account, addAmount);\\n\\t\\t} else if (newBalance < currentBalance) {\\n\\t\\t\\tuint256 subAmount = currentBalance - newBalance;\\n\\t\\t\\t_burn(account, subAmount);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _mint(address account, uint256 amount) private {\\n\\t\\trequire(account != address(0), \\\"ExceedInfinity_DividendTracker: mint to the zero address\\\");\\n\\t\\t_totalSupply += amount;\\n\\t\\t_balances[account] += amount;\\n\\t\\temit Transfer(address(0), account, amount);\\n\\t\\tmagnifiedDividendCorrections[account] = magnifiedDividendCorrections[account] - int256(magnifiedDividendPerShare * amount);\\n\\t}\\n\\n\\tfunction _burn(address account, uint256 amount) private {\\n\\t\\trequire(account != address(0), \\\"ExceedInfinity_DividendTracker: burn from the zero address\\\");\\n\\t\\tuint256 accountBalance = _balances[account];\\n\\t\\trequire(accountBalance >= amount, \\\"ExceedInfinity_DividendTracker: burn amount exceeds balance\\\");\\n\\t\\t_balances[account] = accountBalance - amount;\\n\\t\\t_totalSupply -= amount;\\n\\t\\temit Transfer(account, address(0), amount);\\n\\t\\tmagnifiedDividendCorrections[account] = magnifiedDividendCorrections[account] + int256(magnifiedDividendPerShare * amount);\\n\\t}\\n\\n\\tfunction processAccount(address payable account) public onlyOwner returns (bool) {\\n\\t\\tuint256 amount = _withdrawDividendOfUser(account);\\n\\t\\tif (amount > 0) {\\n\\t\\t\\tlastClaimTimes[account] = block.timestamp;\\n\\t\\t\\temit Claim(account, amount);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\tfunction _withdrawDividendOfUser(address payable account) private returns (uint256) {\\n\\t\\tuint256 _withdrawableDividend = withdrawableDividendOf(account);\\n\\t\\tif (_withdrawableDividend > 0) {\\n\\t\\t\\twithdrawnDividends[account] += _withdrawableDividend;\\n\\t\\t\\ttotalDividendsWithdrawn += _withdrawableDividend;\\n\\t\\t\\temit DividendWithdrawn(account, _withdrawableDividend);\\n\\t\\t\\t(bool success, ) = account.call{ value: _withdrawableDividend, gas: 3000 }(\\\"\\\");\\n\\t\\t\\tif (!success) {\\n\\t\\t\\t\\twithdrawnDividends[account] -= _withdrawableDividend;\\n\\t\\t\\t\\ttotalDividendsWithdrawn -= _withdrawableDividend;\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t}\\n\\t\\t\\treturn _withdrawableDividend;\\n\\t\\t}\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tfunction compoundAccount(address payable account) public onlyOwner returns (bool) {\\n\\t\\t(uint256 amount, uint256 tokens) = _compoundDividendOfUser(account);\\n\\t\\tif (amount > 0) {\\n\\t\\t\\tlastClaimTimes[account] = block.timestamp;\\n\\t\\t\\temit Compound(account, amount, tokens);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\tfunction _compoundDividendOfUser(address payable account) private returns (uint256, uint256) {\\n\\t\\tuint256 _withdrawableDividend = withdrawableDividendOf(account);\\n\\t\\tif (_withdrawableDividend > 0) {\\n\\t\\t\\twithdrawnDividends[account] += _withdrawableDividend;\\n\\t\\t\\ttotalDividendsWithdrawn += _withdrawableDividend;\\n\\t\\t\\temit DividendWithdrawn(account, _withdrawableDividend);\\n\\n\\t\\t\\tIUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(UNISWAPROUTER);\\n\\n\\t\\t\\taddress[] memory path = new address[](2);\\n\\t\\t\\tpath[0] = uniswapV2Router.WETH();\\n\\t\\t\\tpath[1] = address(tokenAddress);\\n\\n\\t\\t\\tbool success;\\n\\t\\t\\tuint256 tokens;\\n\\n\\t\\t\\tuint256 initTokenBal = IERC20(tokenAddress).balanceOf(account);\\n\\t\\t\\ttry uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: _withdrawableDividend }(0, path, address(account), block.timestamp) {\\n\\t\\t\\t\\tsuccess = true;\\n\\t\\t\\t\\ttokens = IERC20(tokenAddress).balanceOf(account) - initTokenBal;\\n\\t\\t\\t} catch Error(\\n\\t\\t\\t\\tstring memory /*err*/\\n\\t\\t\\t) {\\n\\t\\t\\t\\tsuccess = false;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!success) {\\n\\t\\t\\t\\twithdrawnDividends[account] -= _withdrawableDividend;\\n\\t\\t\\t\\ttotalDividendsWithdrawn -= _withdrawableDividend;\\n\\t\\t\\t\\treturn (0, 0);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn (_withdrawableDividend, tokens);\\n\\t\\t}\\n\\t\\treturn (0, 0);\\n\\t}\\n\\n\\tfunction withdrawableDividendOf(address account) public view returns (uint256) {\\n\\t\\treturn accumulativeDividendOf(account) - withdrawnDividends[account];\\n\\t}\\n\\n\\tfunction withdrawnDividendOf(address account) public view returns (uint256) {\\n\\t\\treturn withdrawnDividends[account];\\n\\t}\\n\\n\\tfunction accumulativeDividendOf(address account) public view returns (uint256) {\\n\\t\\tint256 a = int256(magnifiedDividendPerShare * balanceOf(account));\\n\\t\\tint256 b = magnifiedDividendCorrections[account]; // this is an explicit int256 (signed)\\n\\t\\treturn uint256(a + b) / magnitude;\\n\\t}\\n\\n\\tfunction getAccountInfo(address account)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256\\n\\t\\t)\\n\\t{\\n\\t\\tAccountInfo memory info;\\n\\t\\tinfo.account = account;\\n\\t\\tinfo.withdrawableDividends = withdrawableDividendOf(account);\\n\\t\\tinfo.totalDividends = accumulativeDividendOf(account);\\n\\t\\tinfo.lastClaimTime = lastClaimTimes[account];\\n\\t\\treturn (info.account, info.withdrawableDividends, info.totalDividends, info.lastClaimTime, totalDividendsWithdrawn);\\n\\t}\\n\\n\\tfunction getLastClaimTime(address account) public view returns (uint256) {\\n\\t\\treturn lastClaimTimes[account];\\n\\t}\\n\\n\\tfunction name() public view returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\tfunction symbol() public view returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\tfunction decimals() public pure returns (uint8) {\\n\\t\\treturn 18;\\n\\t}\\n\\n\\tfunction totalSupply() public view override returns (uint256) {\\n\\t\\treturn _totalSupply;\\n\\t}\\n\\n\\tfunction balanceOf(address account) public view override returns (uint256) {\\n\\t\\treturn _balances[account];\\n\\t}\\n\\n\\tfunction transfer(address, uint256) public pure override returns (bool) {\\n\\t\\trevert(\\\"ExceedInfinity_DividendTracker: method not implemented\\\");\\n\\t}\\n\\n\\tfunction allowance(address, address) public pure override returns (uint256) {\\n\\t\\trevert(\\\"ExceedInfinity_DividendTracker: method not implemented\\\");\\n\\t}\\n\\n\\tfunction approve(address, uint256) public pure override returns (bool) {\\n\\t\\trevert(\\\"ExceedInfinity_DividendTracker: method not implemented\\\");\\n\\t}\\n\\n\\tfunction transferFrom(\\n\\t\\taddress,\\n\\t\\taddress,\\n\\t\\tuint256\\n\\t) public pure override returns (bool) {\\n\\t\\trevert(\\\"ExceedInfinity_DividendTracker: method not implemented\\\");\\n\\t}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityWallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"whitelistAddress\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"BlacklistEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"CompoundingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndAddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TaxEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accumulativeDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"blackListMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSwapTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"manualSendDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setCompoundingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dividendFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"setMaxTxBPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletBPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTaxEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_liquidityWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividendsWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"unBlackListMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_swapTokensAtAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_swapAllToken\",\"type\":\"bool\"}],\"name\":\"updateDividendSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawnDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ExceedInfinity","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c1e2ce8cf2a8b9195a8e336a94c55e49aba13744000000000000000000000000c1e2ce8cf2a8b9195a8e336a94c55e49aba1374400000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}