{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.8.6;\r\n\r\nstruct UserInfo {\r\n    uint256 amount; // How many LP tokens the user has provided.\r\n    uint256 rewardDebt; // Reward debt. See explanation below.\r\n    uint256 remainingIceTokenReward;  // ICE Tokens that weren't distributed for user per pool.\r\n}\r\ninterface ISorbettiere {\r\n    function userInfo(uint256 pid, address account) external view returns (UserInfo memory user);\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\ninterface IBentoBoxV1BalanceAmount {\r\n    function balanceOf(IERC20, address) external view returns (uint256);\r\n    function toAmount(IERC20 token, uint256 share, bool roundUp) external view returns (uint256 amount);\r\n}\r\n\r\ninterface ICauldron {\r\n    function userCollateralShare(address user) external view returns(uint256);\r\n}\r\n\r\ncontract SpellPower {\r\n    ISorbettiere public constant sorbettiere = ISorbettiere(0xF43480afE9863da4AcBD4419A47D9Cc7d25A647F);\r\n    IERC20 public constant pair = IERC20(0x795065dCc9f64b5614C407a6EFDC400DA6221FB0);\r\n    IERC20 public constant spell = IERC20(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\r\n    IERC20 public constant sspell = IERC20(0xF256CC7847E919FAc9B808cC216cAc87CCF2f47a);\r\n    ICauldron public constant sspellCauldron = ICauldron(0xC319EEa1e792577C319723b5e60a15dA3857E7da);\r\n    IBentoBoxV1BalanceAmount public constant bento = IBentoBoxV1BalanceAmount(0xF5BCE5077908a1b7370B9ae04AdC565EBd643966);\r\n\r\n    function name() external pure returns (string memory) { return \"SPELLPOWER\"; }\r\n    function symbol() external pure returns (string memory) { return \"SPELLPOWER\"; }\r\n    function decimals() external pure returns (uint8) { return 18; }\r\n    function allowance(address, address) external pure returns (uint256) { return 0; }\r\n    function approve(address, uint256) external pure returns (bool) { return false; }\r\n    function transfer(address, uint256) external pure returns (bool) { return false; }\r\n    function transferFrom(address, address, uint256) external pure returns (bool) { return false; }\r\n\r\n    /// @notice Returns SUSHI voting 'powah' for `account`.\r\n    function balanceOf(address account) external view returns (uint256 powah) {\r\n        uint256 bento_balance = bento.toAmount(sspell, (bento.balanceOf(sspell, account) + sspellCauldron.userCollateralShare(account)), false); // get BENTO sSpell balance 'amount' (not shares)\r\n        uint256 collective_sSpell_balance = bento_balance +  sspell.balanceOf(account); // get collective sSpell staking balances\r\n        uint256 sSpell_powah = collective_sSpell_balance * spell.balanceOf(address(sspell)) / sspell.totalSupply(); // calculate sSpell weight\r\n        uint256 lp_stakedBalance = sorbettiere.userInfo(0, account).amount; // get LP balance staked in Sorbettiere\r\n        uint256 lp_balance = lp_stakedBalance + pair.balanceOf(account); // add staked LP balance & those held by `account`\r\n        uint256 lp_powah = lp_balance * spell.balanceOf(address(pair)) / pair.totalSupply() * 2; // calculate adjusted LP weight\r\n        powah = sSpell_powah + lp_powah; // add sSpell & LP weights for 'powah'\r\n    }\r\n\r\n    /// @notice Returns total 'powah' supply.\r\n    function totalSupply() external view returns (uint256 total) {\r\n        total = spell.balanceOf(address(sspell)) + spell.balanceOf(address(pair)) * 2;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"powah\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bento\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1BalanceAmount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sorbettiere\",\"outputs\":[{\"internalType\":\"contract ISorbettiere\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spell\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sspell\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sspellCauldron\",\"outputs\":[{\"internalType\":\"contract ICauldron\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"SpellPower","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"9000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b6cacfb02a31b1cbda23a7a73b78f086c213c0c4a6efee0c12020d8ad65288ec"}]}