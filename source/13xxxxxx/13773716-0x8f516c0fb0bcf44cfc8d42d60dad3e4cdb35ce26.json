{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/adapters/BalancerAdapter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.2;\\n\\nimport { SafeERC20, IERC20 } from \\\"../ecosystem/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./AbstractAdapter.sol\\\";\\n\\ninterface IBalancerPool {\\n    function getCurrentTokens() external view returns (address[] memory tokens);\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\\n}\\n\\n/// @title Balancer(Indexed + Powerpool) Vampire Attack Contract\\n/// @author Enso.finance (github.com/EnsoFinance)\\n/// @notice Adapter for redeeming the underlying assets from Indexed Protocol\\n\\ncontract BalancerAdapter is AbstractAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(address owner_) AbstractAdapter(owner_) {}\\n\\n    function outputTokens(address _lp)\\n        public\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        return IBalancerPool(_lp).getCurrentTokens();\\n    }\\n\\n    function encodeMigration(address _genericRouter, address _strategy, address _lp, uint256 _amount)\\n        public\\n        override\\n        view\\n        onlyWhitelisted(_lp)\\n        returns (Call[] memory calls)\\n    {\\n        address[] memory tokens = outputTokens(_lp);\\n        calls = new Call[](tokens.length + 1);\\n        calls[0] = encodeWithdraw(_lp, _amount)[0];\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            calls[i + 1] = Call(\\n                _genericRouter,\\n                abi.encodeWithSelector(\\n                    IGenericRouter(_genericRouter).settleTransfer.selector,\\n                    tokens[i],\\n                    _strategy\\n                )\\n            );\\n        }\\n        return calls;\\n    }\\n\\n    function encodeWithdraw(address _lp, uint256 _amount)\\n        public\\n        override\\n        view\\n        onlyWhitelisted(_lp)\\n        returns (Call[] memory calls)\\n    {\\n        uint256[] memory _min = new uint256[](outputTokens(_lp).length);\\n        calls = new Call[](1);\\n        calls[0] = Call(\\n            payable(_lp),\\n            abi.encodeWithSelector(\\n                IBalancerPool(_lp).exitPool.selector,\\n                _amount,\\n                _min\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ecosystem/openzeppelin/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: WTFPL\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/adapters/AbstractAdapter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.2;\\n\\nimport \\\"../interfaces/IAdapter.sol\\\";\\nimport \\\"../helpers/Whitelistable.sol\\\";\\n\\nimport \\\"../interfaces/IUniswapV2Router.sol\\\";\\nimport \\\"../interfaces/IUniswapV3Router.sol\\\";\\nimport \\\"../interfaces/IQuoter.sol\\\";\\n\\ninterface IGenericRouter {\\n    function settleTransfer(address token, address to) external;\\n\\n    function settleSwap(\\n        address adapter,\\n        address tokenIn,\\n        address tokenOut,\\n        address from,\\n        address to\\n    ) external;\\n}\\n\\n/// @title Token Sets Vampire Attack Contract\\n/// @author Enso.finance (github.com/EnsoFinance)\\n/// @notice Adapter for redeeming the underlying assets from Token Sets\\n\\nabstract contract AbstractAdapter is IAdapter, Whitelistable {\\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address public constant SUSHI = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\\n    address public constant UNI_V2 = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\\n    address public constant UNI_V3 = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\\n    address public constant QUOTER = 0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6;\\n\\n    /**\\n    * @dev Require exchange registered\\n    */\\n    modifier onlyExchange(address _exchange) {\\n        require(isExchange(_exchange), \\\"AbstractAdapter#buy: should be exchanges\\\");\\n        _;\\n    }\\n\\n    constructor(address owner_) {\\n        _setOwner(owner_);\\n    }\\n\\n    function outputTokens(address _lp)\\n        public\\n        view\\n        override\\n        virtual\\n        returns (address[] memory outputs);\\n\\n    function encodeMigration(address _genericRouter, address _strategy, address _lp, uint256 _amount)\\n        public\\n        override\\n        virtual\\n        view\\n        returns (Call[] memory calls);\\n\\n    function encodeWithdraw(address _lp, uint256 _amount)\\n        public\\n        override\\n        virtual\\n        view\\n        returns (Call[] memory calls);\\n\\n    function buy(address _lp, address _exchange, uint256 _minAmountOut, uint256 _deadline)\\n        public\\n        override\\n        virtual\\n        payable\\n        onlyExchange(_exchange)\\n        onlyWhitelisted(_lp)\\n    {\\n        if (_exchange == UNI_V3) {\\n            _buyV3(_lp, _minAmountOut, _deadline);\\n        } else {\\n            _buyV2(_lp, _exchange, _minAmountOut, _deadline);\\n        }\\n    }\\n\\n    function getAmountOut(\\n        address _lp,\\n        address _exchange,\\n        uint256 _amountIn\\n    )\\n        external\\n        override\\n        virtual\\n        onlyExchange(_exchange)\\n        onlyWhitelisted(_lp)\\n        returns (uint256)\\n    {\\n        if (_exchange == UNI_V3) {\\n            return _getV3(_lp, _amountIn);\\n        } else {\\n            return _getV2(_lp, _exchange, _amountIn);\\n        }\\n    }\\n\\n    function _buyV2(\\n        address _lp,\\n        address _exchange,\\n        uint256 _minAmountOut,\\n        uint256 _deadline\\n    )\\n        internal\\n    {\\n        address[] memory path = new address[](2);\\n        path[0] = WETH;\\n        path[1] = _lp;\\n        IUniswapV2Router(_exchange).swapExactETHForTokens{value: msg.value}(\\n            _minAmountOut,\\n            path,\\n            msg.sender,\\n            _deadline\\n        );\\n    }\\n\\n    function _buyV3(\\n        address _lp,\\n        uint256 _minAmountOut,\\n        uint256 _deadline\\n    )\\n        internal\\n    {\\n        IUniswapV3Router(UNI_V3).exactInputSingle{value: msg.value}(IUniswapV3Router.ExactInputSingleParams(\\n          WETH,\\n          _lp,\\n          3000,\\n          msg.sender,\\n          _deadline,\\n          msg.value,\\n          _minAmountOut,\\n          0\\n        ));\\n    }\\n\\n    function _getV2(address _lp, address _exchange, uint256 _amountIn)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        address[] memory path = new address[](2);\\n        path[0] = WETH;\\n        path[1] = _lp;\\n        return IUniswapV2Router(_exchange).getAmountsOut(_amountIn, path)[1];\\n    }\\n\\n    function _getV3(address _lp, uint256 _amountIn)\\n        internal\\n        returns (uint256)\\n    {\\n\\n        return IQuoter(QUOTER).quoteExactInputSingle(\\n            WETH,\\n            _lp,\\n            3000,\\n            _amountIn,\\n            0\\n        );\\n    }\\n\\n    /**\\n    * @param _lp to view pool token\\n    * @return if token in whitelist\\n    */\\n    function isWhitelisted(address _lp)\\n        public\\n        view\\n        override\\n        returns(bool)\\n    {\\n        return whitelisted[_lp];\\n    }\\n\\n    function isExchange(address _exchange)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        return(_exchange == SUSHI || _exchange == UNI_V2 || _exchange == UNI_V3);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ecosystem/openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: WTFPL\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/ecosystem/openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: WTFPL\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAdapter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.2;\\n\\ninterface IAdapter {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n\\n    function outputTokens(address inputToken) external view returns (address[] memory outputs);\\n\\n    function encodeMigration(address _genericRouter, address _strategy, address _lp, uint256 _amount)\\n        external view returns (Call[] memory calls);\\n\\n    function encodeWithdraw(address _lp, uint256 _amount) external view returns (Call[] memory calls);\\n\\n    function buy(address _lp, address _exchange, uint256 _minAmountOut, uint256 _deadline) external payable;\\n\\n    function getAmountOut(address _lp, address _exchange, uint256 _amountIn) external returns (uint256);\\n\\n    function isWhitelisted(address _token) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/Whitelistable.sol\": {\r\n      \"content\": \"import \\\"../helpers/Ownable.sol\\\";\\n\\n\\n// SPDX-License-Identifier: WTFPL\\n\\npragma solidity 0.8.2;\\n\\nabstract contract Whitelistable is Ownable {\\n\\n    mapping(address => bool) public whitelisted;\\n\\n    event Added(address token);\\n    event Removed(address token);\\n\\n    /**\\n    * @dev Require adapter registered\\n    */\\n    modifier onlyWhitelisted(address _lp) {\\n        require(whitelisted[_lp], \\\"Whitelistable#onlyWhitelisted: not whitelisted lp\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev add pool token to whitelist\\n    * @param _token pool address\\n    */\\n    function add(address _token)\\n        public\\n        onlyOwner\\n    {\\n        _add(_token);\\n    }\\n\\n    /**\\n    * @dev batch add pool token to whitelist\\n    * @param _tokens[] array of pool address\\n    */\\n    function addBatch(address[] memory _tokens)\\n        public\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _add(_tokens[i]);\\n        }\\n    }\\n\\n    /**\\n    * @dev remove pool token from whitelist\\n    * @param _token pool address\\n    */\\n    function remove(address _token)\\n        public\\n        onlyOwner\\n    {\\n        _remove(_token);\\n    }\\n\\n    /**\\n    * @dev batch remove pool token from whitelist\\n    * @param _tokens[] array of pool address\\n    */\\n    function removeBatch(address[] memory _tokens)\\n        public\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _remove(_tokens[i]);\\n        }\\n    }\\n\\n    function _add(address _token)\\n        internal\\n    {\\n        whitelisted[_token] = true;\\n        emit Added(_token);\\n    }\\n\\n    function _remove(address _token)\\n        internal\\n    {\\n        require(whitelisted[_token], 'Whitelistable#_Remove: not exist');\\n        whitelisted[_token] = false;\\n        emit Removed(_token);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\ninterface IUniswapV2Router {\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n          external\\n          payable\\n          returns (uint[] memory amounts);\\n\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3Router.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\ninterface IUniswapV3Router {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IQuoter.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\ninterface IQuoter {\\n  function quoteExactInputSingle(\\n      address tokenIn,\\n      address tokenOut,\\n      uint24 fee,\\n      uint256 amountIn,\\n      uint160 sqrtPriceLimitX96\\n  ) external returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: WTFPL\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ecosystem/openzeppelin/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function _setOwner(address owner_) \\n        internal\\n    {\\n        _owner = owner_;\\n        emit OwnershipTransferred(address(0), owner_);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ecosystem/openzeppelin/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: WTFPL\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Added\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Removed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"QUOTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUSHI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNI_V2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNI_V3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"addBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_genericRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"encodeMigration\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct IAdapter.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"encodeWithdraw\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct IAdapter.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"isExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"outputTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"removeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BalancerAdapter","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"00000000000000000000000058ce791454e62f6a5392706745cd863a4f1f52ac","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}