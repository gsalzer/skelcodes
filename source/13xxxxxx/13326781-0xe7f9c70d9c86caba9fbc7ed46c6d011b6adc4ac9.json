{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n*Submitted for verification at Etherscan.io on 2021-08-27\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n* @dev Interface of the ERC165 standard, as defined in the\r\n* https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n*\r\n* Implementers can declare support of contract interfaces, which can then be\r\n* queried by others ({ERC165Checker}).\r\n*\r\n* For an implementation, see {ERC165}.\r\n*/\r\ninterface IERC165 {\r\n                  /**\r\n* @dev Returns true if this contract implements the interface defined by\r\n                                                                      * `interfaceId`. See the corresponding\r\n                                                                                               * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n                                                                                                         * to learn more about how these ids are created.\r\n                                                                                                                                                 *\r\n                                                                                                                                                 * This function call must use less than 30 000 gas.\r\n                                                                                                                                                                                                */\r\n                                                                                                                                                                                                function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Required interface of an ERC721 compliant contract.\r\n*/\r\ninterface IERC721 is IERC165 {\r\n                             /**\r\n* @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n                                                                     */\r\n                                                                     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n/**\r\n* @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n                                                                       */\r\n                                                                       event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n/**\r\n* @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n                                                                                             */\r\n                                                                                             event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n/**\r\n* @dev Returns the number of tokens in ``owner``'s account.\r\n                                                */\r\n                                                function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n/**\r\n* @dev Returns the owner of the `tokenId` token.\r\n                                          *\r\n                                          * Requirements:\r\n*\r\n* - `tokenId` must exist.\r\n                   */\r\n                   function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n/**\r\n* @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n                                                                                          * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n                                                                                                                                                                  *\r\n                                                                                                                                                                  * Requirements:\r\n*\r\n* - `from` cannot be the zero address.\r\n                              * - `to` cannot be the zero address.\r\n                                                          * - `tokenId` token must exist and be owned by `from`.\r\n                                                                                                              * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n                                                                                                                                                                                                         * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n                                                                                                                                                                                                                                                                                                                                   *\r\n                                                                                                                                                                                                                                                                                                                                   * Emits a {Transfer} event.\r\n                                                                                                                                                                                                                                                                                                                                                        */\r\n                                                                                                                                                                                                                                                                                                                                                        function safeTransferFrom(\r\n    address from,\r\naddress to,\r\n        uint256 tokenId\r\n) external;\r\n\r\n/**\r\n* @dev Transfers `tokenId` token from `from` to `to`.\r\n                                                   *\r\n                                                   * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n                                                                                                                                   *\r\n                                                                                                                                   * Requirements:\r\n*\r\n* - `from` cannot be the zero address.\r\n                              * - `to` cannot be the zero address.\r\n                                                          * - `tokenId` token must be owned by `from`.\r\n                                                                                                    * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n                                                                                                                                                                                      *\r\n                                                                                                                                                                                      * Emits a {Transfer} event.\r\n                                                                                                                                                                                                           */\r\n                                                                                                                                                                                                           function transferFrom(\r\n    address from,\r\naddress to,\r\n        uint256 tokenId\r\n) external;\r\n\r\n/**\r\n* @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n                                                                       * The approval is cleared when the token is transferred.\r\n                                                                                                          *\r\n                                                                                                          * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n                                                                                                                                                                                                           *\r\n                                                                                                                                                                                                           * Requirements:\r\n*\r\n* - The caller must own the token or be an approved operator.\r\n                                                    * - `tokenId` must exist.\r\n                                                                       *\r\n                                                                       * Emits an {Approval} event.\r\n                                                                                             */\r\n                                                                                             function approve(address to, uint256 tokenId) external;\r\n\r\n/**\r\n* @dev Returns the account approved for `tokenId` token.\r\n                                                  *\r\n                                                  * Requirements:\r\n    *\r\n    * - `tokenId` must exist.\r\n                       */\r\n                       function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n/**\r\n* @dev Approve or remove `operator` as an operator for the caller.\r\n                                                           * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n*\r\n* Requirements:\r\n    *\r\n    * - The `operator` cannot be the caller.\r\n                                     *\r\n                                     * Emits an {ApprovalForAll} event.\r\n                                                                 */\r\n                                                                 function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n/**\r\n* @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n                                                                           *\r\n                                                                           * See {setApprovalForAll}\r\n                                                                                 */\r\n                                                                                 function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n/**\r\n* @dev Safely transfers `tokenId` token from `from` to `to`.\r\n                                                          *\r\n                                                          * Requirements:\r\n*\r\n* - `from` cannot be the zero address.\r\n                              * - `to` cannot be the zero address.\r\n                                                          * - `tokenId` token must exist and be owned by `from`.\r\n                                                                                                              * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n                                                                                                                                                                                                * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n                                                                                                                                                                                                                                                                                                                          *\r\n                                                                                                                                                                                                                                                                                                                          * Emits a {Transfer} event.\r\n                                                                                                                                                                                                                                                                                                                                               */\r\n                                                                                                                                                                                                                                                                                                                                               function safeTransferFrom(\r\n    address from,\r\naddress to,\r\n        uint256 tokenId,\r\n                bytes calldata data\r\n) external;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev String operations.\r\n*/\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n/**\r\n* @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n                                                          */\r\n                                                          function toString(uint256 value) internal pure returns (string memory) {\r\n                                                                                                                                 // Inspired by OraclizeAPI's implementation - MIT licence\r\n                                                                                                                                                           // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\nif (value == 0) {\r\nreturn \"0\";\r\n}\r\nuint256 temp = value;\r\nuint256 digits;\r\nwhile (temp != 0) {\r\ndigits++;\r\ntemp /= 10;\r\n}\r\nbytes memory buffer = new bytes(digits);\r\nwhile (value != 0) {\r\ndigits -= 1;\r\nbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\nvalue /= 10;\r\n}\r\nreturn string(buffer);\r\n}\r\n\r\n/**\r\n* @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n                                                              */\r\n                                                              function toHexString(uint256 value) internal pure returns (string memory) {\r\nif (value == 0) {\r\nreturn \"0x00\";\r\n}\r\nuint256 temp = value;\r\nuint256 length = 0;\r\nwhile (temp != 0) {\r\nlength++;\r\ntemp >>= 8;\r\n}\r\nreturn toHexString(value, length);\r\n}\r\n\r\n/**\r\n* @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n*/\r\nfunction toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\nbytes memory buffer = new bytes(2 * length + 2);\r\nbuffer[0] = \"0\";\r\nbuffer[1] = \"x\";\r\nfor (uint256 i = 2 * length + 1; i > 1; --i) {\r\n    buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\nvalue >>= 4;\r\n}\r\nrequire(value == 0, \"Strings: hex length insufficient\");\r\nreturn string(buffer);\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\n* @dev Provides information about the current execution context, including the\r\n                                                                           * sender of the transaction and its data. While these are generally available\r\n                                                                                                                                               * via msg.sender and msg.data, they should not be accessed in such a direct\r\n                                                                                                                                                                                                                    * manner, since when dealing with meta-transactions the account sending and\r\n* paying for execution may not be the actual sender (as far as an application\r\n* is concerned).\r\n*\r\n* This contract is only required for intermediate, library-like contracts.\r\n*/\r\nabstract contract Context {\r\nfunction _msgSender() internal view virtual returns (address) {\r\nreturn msg.sender;\r\n}\r\n\r\nfunction _msgData() internal view virtual returns (bytes calldata) {\r\nreturn msg.data;\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Contract module which provides a basic access control mechanism, where\r\n                                                             * there is an account (an owner) that can be granted exclusive access to\r\n                                                                                                                                   * specific functions.\r\n                                                                                                                                              *\r\n                                                                                                                                              * By default, the owner account will be the one that deploys the contract. This\r\n                                                                                                                                                                                                               * can later be changed with {transferOwnership}.\r\n                                                                                                                                                                                                                                           *\r\n                                                                                                                                                                                                                                           * This module is used through inheritance. It will make available the modifier\r\n* `onlyOwner`, which can be applied to your functions to restrict their use to\r\n* the owner.\r\n*/\r\nabstract contract Ownable is Context {\r\naddress private _owner;\r\n\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n/**\r\n* @dev Initializes the contract setting the deployer as the initial owner.\r\n*/\r\nconstructor() {\r\n_setOwner(_msgSender());\r\n}\r\n\r\n/**\r\n* @dev Returns the address of the current owner.\r\n                                          */\r\n                                          function owner() public view virtual returns (address) {\r\nreturn _owner;\r\n}\r\n\r\n/**\r\n* @dev Throws if called by any account other than the owner.\r\n                                                      */\r\n                                                      modifier onlyOwner() {\r\nrequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n_;\r\n}\r\n\r\n/**\r\n* @dev Leaves the contract without owner. It will not be possible to call\r\n                                                                     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n                                                                                                                                        *\r\n                                                                                                                                        * NOTE: Renouncing ownership will leave the contract without an owner,\r\n                                                                                                                                                                                                        * thereby removing any functionality that is only available to the owner.\r\n                                                                                                                                                                                                                                                                           */\r\n                                                                                                                                                                                                                                                                           function renounceOwnership() public virtual onlyOwner {\r\n_setOwner(address(0));\r\n}\r\n\r\n/**\r\n* @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n                                                    * Can only be called by the current owner.\r\n                                                                                        */\r\n                                                                                        function transferOwnership(address newOwner) public virtual onlyOwner {\r\nrequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n_setOwner(newOwner);\r\n}\r\n\r\nfunction _setOwner(address newOwner) private {\r\naddress oldOwner = _owner;\r\n_owner = newOwner;\r\nemit OwnershipTransferred(oldOwner, newOwner);\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Contract module that helps prevent reentrant calls to a function.\r\n                                                               *\r\n                                                               * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n                                                                                                                                * available, which can be applied to functions to make sure there are no nested\r\n                                                                                                                                                                                                         * (reentrant) calls to them.\r\n                                                                                                                                                                                                                                *\r\n                                                                                                                                                                                                                                * Note that because there is a single `nonReentrant` guard, functions marked as\r\n* `nonReentrant` may not call one another. This can be worked around by making\r\n                                                                        * those functions `private`, and then adding `external` `nonReentrant` entry\r\n                                                                                                                                               * points to them.\r\n                                                                                                                                                           *\r\n                                                                                                                                                           * TIP: If you would like to learn more about reentrancy and alternative ways\r\n                                                                                                                                                                                                                                   * to protect against it, check out our blog post\r\n                                                                                                                                                                                                                                                                               * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n                                                                                                                                                                                                                                                                                         */\r\n                                                                                                                                                                                                                                                                                         abstract contract ReentrancyGuard {\r\n                                                                                                                                                                                                                                                                                                                           // Booleans are more expensive than uint256 or any type that takes up a full\r\n                                                                                                                                                                                                                                                                                                                                                                                                   // word because each write operation emits an extra SLOAD to first read the\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                           // slot's contents, replace the bits taken up by the boolean, and then write\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  // back. This is the compiler's defense against contract upgrades and\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               // pointer aliasing, and it cannot be disabled.\r\n\r\nhe values being non-zero value makes deployment a bit more expensive,\r\n// but in exchange the refund on every call to nonReentrant will be lower in\r\n// amount. Since refunds are capped to a percentage of the total\r\n                                                           // transaction's gas, it is best to keep them low in cases like this one, to\r\n                                                                         // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\nuint256 private constant _ENTERED = 2;\r\n\r\nuint256 private _status;\r\n\r\nconstructor() {\r\n_status = _NOT_ENTERED;\r\n}\r\n\r\n/**\r\n* @dev Prevents a contract from calling itself, directly or indirectly.\r\n                                                            * Calling a `nonReentrant` function from another `nonReentrant`\r\n                                                                                                             * function is not supported. It is possible to prevent this from happening\r\n* by making the `nonReentrant` function external, and make it call a\r\n                                                                   * `private` function that does the actual work.\r\n                                                                                                             */\r\n                                                                                                             modifier nonReentrant() {\r\n// On the first call to nonReentrant, _notEntered will be true\r\nrequire(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n// Any calls to nonReentrant after this point will fail\r\n_status = _ENTERED;\r\n\r\n_;\r\n\r\n// By storing the original value once again, a refund is triggered (see\r\n                                                                    // https://eips.ethereum.org/EIPS/eip-2200)\r\n_status = _NOT_ENTERED;\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @title ERC721 token receiver interface\r\n                               * @dev Interface for any contract that wants to support safeTransfers\r\n* from ERC721 asset contracts.\r\n*/\r\ninterface IERC721Receiver {\r\n/**\r\n* @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n* by `operator` from `from`, this function is called.\r\n*\r\n* It must return its Solidity selector to confirm the token transfer.\r\n* If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n*\r\n* The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n    */\r\nfunction onERC721Received(\r\n    address operator,\r\n            address from,\r\nuint256 tokenId,\r\n        bytes calldata data\r\n) external returns (bytes4);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n                                                                * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n                                                                                   */\r\n                                                                                   interface IERC721Metadata is IERC721 {\r\n/**\r\n* @dev Returns the token collection name.\r\n*/\r\nfunction name() external view returns (string memory);\r\n\r\n/**\r\n* @dev Returns the token collection symbol.\r\n*/\r\nfunction symbol() external view returns (string memory);\r\n\r\n/**\r\n* @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n    */\r\nfunction tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Collection of functions related to the address type\r\n                                                      */\r\n                                                      library Address {\r\n/**\r\n* @dev Returns true if `account` is a contract.\r\n*\r\n* [IMPORTANT]\r\n* ====\r\n* It is unsafe to assume that an address for which this function returns\r\n* false is an externally-owned account (EOA) and not a contract.\r\n*\r\n* Among others, `isContract` will return false for the following\r\n    * types of addresses:\r\n*\r\n*  - an externally-owned account\r\n*  - a contract in construction\r\n*  - an address where a contract will be created\r\n*  - an address where a contract lived, but was destroyed\r\n* ====\r\n*/\r\nfunction isContract(address account) internal view returns (bool) {\r\n                                                                  // This method relies on extcodesize, which returns 0 for contracts in\r\n// construction, since the code is only stored at the end of the\r\n// constructor execution.\r\n\r\nuint256 size;\r\nassembly {\r\nsize := extcodesize(account)\r\n}\r\nreturn size > 0;\r\n}\r\n\r\n/**\r\n* @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n                               * `recipient`, forwarding all available gas and reverting on errors.\r\n*\r\n* https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n                                                                     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n                                                                                                                                          * imposed by `transfer`, making them unable to receive funds via\r\n                                                                                                                                                                                                       * `transfer`. {sendValue} removes this limitation.\r\n                                                                                                                                                                                                                                              *\r\n                                                                                                                                                                                                                                              * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n                                                                                                                                                                                                                                                                                            *\r\n                                                                                                                                                                                                                                                                                            * IMPORTANT: because control is transferred to `recipient`, care must be\r\n                                                                                                                                                                                                                                                                                                                                                                  * taken to not create reentrancy vulnerabilities. Consider using\r\n                                                                                                                                                                                                                                                                                                                                                                                                                             * {ReentrancyGuard} or the\r\n                                                                                                                                                                                                                                                                                                                                                                                                                             * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                      function sendValue(address payable recipient, uint256 amount) internal {\r\nrequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n(bool success, ) = recipient.call{value: amount}(\"\");\r\nrequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n}\r\n\r\n/**\r\n* @dev Performs a Solidity function call using a low level `call`. A\r\n                                                           * plain `call` is an unsafe replacement for a function call: use this\r\n                                                                                                                            * function instead.\r\n                                                                                                                                       *\r\n                                                                                                                                       * If `target` reverts with a revert reason, it is bubbled up by this\r\n* function (like regular Solidity function calls).\r\n*\r\n* Returns the raw returned data. To convert to the expected return value,\r\n* use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n*\r\n* Requirements:\r\n*\r\n* - `target` must be a contract.\r\n* - calling `target` with `data` must not revert.\r\n*\r\n* _Available since v3.1._\r\n*/\r\nfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\nreturn functionCall(target, data, \"Address: low-level call failed\");\r\n}\r\n\r\n/**\r\n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n* `errorMessage` as a fallback revert reason when `target` reverts.\r\n*\r\n* _Available since v3.1._\r\n*/\r\nfunction functionCall(\r\naddress target,\r\nbytes memory data,\r\nstring memory errorMessage\r\n) internal returns (bytes memory) {\r\nreturn functionCallWithValue(target, data, 0, errorMessage);\r\n}\r\n\r\n/**\r\n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n               * but also transferring `value` wei to `target`.\r\n                                                      *\r\n                                                      * Requirements:\r\n*\r\n* - the calling contract must have an ETH balance of at least `value`.\r\n                                                              * - the called Solidity function must be `payable`.\r\n                                                                                                       *\r\n                                                                                                       * _Available since v3.1._\r\n                                                                                                                            */\r\n                                                                                                                            function functionCallWithValue(\r\naddress target,\r\nbytes memory data,\r\nuint256 value\r\n) internal returns (bytes memory) {\r\nreturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n}\r\n\r\n/**\r\n* @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n               * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n*\r\n* _Available since v3.1._\r\n*/\r\nfunction functionCallWithValue(\r\naddress target,\r\nbytes memory data,\r\nuint256 value,\r\nstring memory errorMessage\r\n) internal returns (bytes memory) {\r\nrequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\nrequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n(bool success, bytes memory returndata) = target.call{value: value}(data);\r\nreturn _verifyCallResult(success, returndata, errorMessage);\r\n}\r\n\r\n/**\r\n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n               * but performing a static call.\r\n                                         *\r\n                                         * _Available since v3.3._\r\n                                                              */\r\n                                                              function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\nreturn functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n}\r\n\r\n/**\r\n* @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n               * but performing a static call.\r\n                                         *\r\n                                         * _Available since v3.3._\r\n                                                              */\r\n                                                              function functionStaticCall(\r\naddress target,\r\nbytes memory data,\r\nstring memory errorMessage\r\n) internal view returns (bytes memory) {\r\nrequire(isContract(target), \"Address: static call to non-contract\");\r\n\r\n(bool success, bytes memory returndata) = target.staticcall(data);\r\nreturn _verifyCallResult(success, returndata, errorMessage);\r\n}\r\n\r\n/**\r\n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n               * but performing a delegate call.\r\n                                           *\r\n                                           * _Available since v3.4._\r\n                                                                */\r\n                                                                function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\nreturn functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n}\r\n\r\n/**\r\n* @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n               * but performing a delegate call.\r\n                                           *\r\n                                           * _Available since v3.4._\r\n                                                                */\r\n                                                                function functionDelegateCall(\r\naddress target,\r\nbytes memory data,\r\nstring memory errorMessage\r\n) internal returns (bytes memory) {\r\nrequire(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n(bool success, bytes memory returndata) = target.delegatecall(data);\r\nreturn _verifyCallResult(success, returndata, errorMessage);\r\n}\r\n\r\nfunction _verifyCallResult(\r\nbool success,\r\nbytes memory returndata,\r\nstring memory errorMessage\r\n) private pure returns (bytes memory) {\r\nif (success) {\r\nreturn returndata;\r\n} else {\r\n// Look for revert reason and bubble it up if present\r\nif (returndata.length > 0) {\r\n// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\nassembly {\r\nlet returndata_size := mload(returndata)\r\nrevert(add(32, returndata), returndata_size)\r\n}\r\n} else {\r\nrevert(errorMessage);\r\n}\r\n}\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @dev Implementation of the {IERC165} interface.\r\n                                       *\r\n                                       * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n                                                                                                                                                       * for the additional interface id that will be supported. For example:\r\n    *\r\n    * ```solidity\r\n         * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n    *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n* }\r\n* ```\r\n    *\r\n    * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n                                                                                  */\r\n                                                                                  abstract contract ERC165 is IERC165 {\r\n/**\r\n* @dev See {IERC165-supportsInterface}.\r\n*/\r\nfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\nreturn interfaceId == type(IERC165).interfaceId;\r\n}\r\n}\r\n\r\n\r\n/**\r\n* @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n                                                                                           * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n* {ERC721Enumerable}.\r\n  */\r\n  contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\nusing Strings for uint256;\r\n\r\n// Token name\r\nstring private _name;\r\n\r\n// Token symbol\r\nstring private _symbol;\r\n\r\n// Mapping from token ID to owner address\r\nmapping(uint256 => address) private _owners;\r\n\r\n// Mapping owner address to token count\r\nmapping(address => uint256) private _balances;\r\n\r\n// Mapping from token ID to approved address\r\nmapping(uint256 => address) private _tokenApprovals;\r\n\r\n// Mapping from owner to operator approvals\r\nmapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n/**\r\n* @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n*/\r\nconstructor(string memory name_, string memory symbol_) {\r\n_name = name_;\r\n_symbol = symbol_;\r\n}\r\n\r\n/**\r\n* @dev See {IERC165-supportsInterface}.\r\n           */\r\n           function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\nreturn\r\ninterfaceId == type(IERC721).interfaceId ||\r\ninterfaceId == type(IERC721Metadata).interfaceId ||\r\nsuper.supportsInterface(interfaceId);\r\n}\r\n\r\n/**\r\n* @dev See {IERC721-balanceOf}.\r\n           */\r\n           function balanceOf(address owner) public view virtual override returns (uint256) {\r\nrequire(owner != address(0), \"ERC721: balance query for the zero address\");\r\nreturn _balances[owner];\r\n}\r\n\r\n/**\r\n* @dev See {IERC721-ownerOf}.\r\n           */\r\n           function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\naddress owner = _owners[tokenId];\r\nrequire(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\nreturn owner;\r\n}\r\n\r\n/**\r\n* @dev See {IERC721Metadata-name}.\r\n           */\r\n           function name() public view virtual override returns (string memory) {\r\nreturn _name;\r\n}\r\n\r\n/**\r\n* @dev See {IERC721Metadata-symbol}.\r\n           */\r\n           function symbol() public view virtual override returns (string memory) {\r\nreturn _symbol;\r\n}\r\n\r\n/**\r\n* @dev See {IERC721Metadata-tokenURI}.\r\n           */\r\n           function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\nrequire(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\nstring memory baseURI = _baseURI();\r\nreturn bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n}\r\n\r\n/**\r\n* @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n* token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n* by default, can be overriden in child contracts.\r\n*/\r\nfunction _baseURI() internal view virtual returns (string memory) {\r\nreturn \"\";\r\n}\r\n\r\n/**\r\n* @dev See {IERC721-approve}.\r\n           */\r\n           function approve(address to, uint256 tokenId) public virtual override {\r\naddress owner = ERC721.ownerOf(tokenId);\r\nrequire(to != owner, \"ERC721: approval to current owner\");\r\n\r\nrequire(\r\n    _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n    \"ERC721: approve caller is not owner nor approved for all\"\r\n);\r\n\r\n_approve(to, tokenId);\r\n}\r\n\r\n/**\r\n* @dev See {IERC721-getApproved}.\r\n           */\r\n           function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\nrequire(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\nreturn _tokenApprovals[tokenId];\r\n}\r\n\r\n/**\r\n* @dev See {IERC721-setApprovalForAll}.\r\n           */\r\n           function setApprovalForAll(address operator, bool approved) public virtual override {\r\nrequire(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n_operatorApprovals[_msgSender()][operator] = approved;\r\nemit ApprovalForAll(_msgSender(), operator, approved);\r\n}\r\n\r\n/**\r\n* @dev See {IERC721-isApprovedForAll}.\r\n           */\r\n           function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\nreturn _operatorApprovals[owner][operator];\r\n}\r\n\r\n/**\r\n* @dev See {IERC721-transferFrom}.\r\n           */\r\n           function transferFrom(\r\naddress from,\r\naddress to,\r\nuint256 tokenId\r\n) public virtual override {\r\n//solhint-disable-next-line max-line-length\r\nrequire(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n_transfer(from, to, tokenId);\r\n}\r\n\r\n/**\r\n* @dev See {IERC721-safeTransferFrom}.\r\n           */\r\n           function safeTransferFrom(\r\naddress from,\r\naddress to,\r\nuint256 tokenId\r\n) public virtual override {\r\nsafeTransferFrom(from, to, tokenId, \"\");\r\n}\r\n\r\n/**\r\n* @dev See {IERC721-safeTransferFrom}.\r\n           */\r\n           function safeTransferFrom(\r\naddress from,\r\naddress to,\r\nuint256 tokenId,\r\nbytes memory _data\r\n) public virtual override {\r\nrequire(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n_safeTransfer(from, to, tokenId, _data);\r\n}\r\n\r\n/**\r\n* @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n                                                                                          * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n                                                                                                                                                                  *\r\n                                                                                                                                                                  * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n                                                                                                                                                                                                                                                     *\r\n                                                                                                                                                                                                                                                     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n                                                                                                                                                                                                                                                                                                                                      * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n                                                                                                                                                                                                                                                                                                                                                                                                            *\r\n                                                                                                                                                                                                                                                                                                                                                                                                            * Requirements:\r\n*\r\n* - `from` cannot be the zero address.\r\n                              * - `to` cannot be the zero address.\r\n                                                          * - `tokenId` token must exist and be owned by `from`.\r\n                                                                                                              * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n                                                                                                                                                                                                                                        *\r\n                                                                                                                                                                                                                                        * Emits a {Transfer} event.\r\n                                                                                                                                                                                                                                                             */\r\n                                                                                                                                                                                                                                                             function _safeTransfer(\r\naddress from,\r\naddress to,\r\nuint256 tokenId,\r\nbytes memory _data\r\n) internal virtual {\r\n_transfer(from, to, tokenId);\r\nrequire(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n}\r\n\r\n/**\r\n* @dev Returns whether `tokenId` exists.\r\n                                 *\r\n                                 * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n                                                                                                 *\r\n                                                                                                 * Tokens start existing when they are minted (`_mint`),\r\n* and stop existing when they are burned (`_burn`).\r\n                                  */\r\n                                  function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\nreturn _owners[tokenId] != address(0);\r\n}\r\n\r\n/**\r\n* @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n                                                      *\r\n                                                      * Requirements:\r\n*\r\n* - `tokenId` must exist.\r\n                   */\r\n                   function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\nrequire(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\naddress owner = ERC721.ownerOf(tokenId);\r\nreturn (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n}\r\n\r\n/**\r\n* @dev Safely mints `tokenId` and transfers it to `to`.\r\n                                                  *\r\n                                                  * Requirements:\r\n*\r\n* - `tokenId` must not exist.\r\n                       * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n                                                                                                                                                 *\r\n                                                                                                                                                 * Emits a {Transfer} event.\r\n                                                                                                                                                                      */\r\n                                                                                                                                                                      function _safeMint(address to, uint256 tokenId) internal virtual {\r\n_safeMint(to, tokenId, \"\");\r\n}\r\n\r\n/**\r\n* @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n* forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n*/\r\nfunction _safeMint(\r\naddress to,\r\nuint256 tokenId,\r\nbytes memory _data\r\n) internal virtual {\r\n_mint(to, tokenId);\r\nrequire(\r\n    _checkOnERC721Received(address(0), to, tokenId, _data),\r\n    \"ERC721: transfer to non ERC721Receiver implementer\"\r\n);\r\n}\r\n\r\n/**\r\n* @dev Mints `tokenId` and transfers it to `to`.\r\n                                           *\r\n                                           * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n                                                                                                                    *\r\n                                                                                                                    * Requirements:\r\n*\r\n* - `tokenId` must not exist.\r\n                       * - `to` cannot be the zero address.\r\n                                                   *\r\n                                                   * Emits a {Transfer} event.\r\n                                                                        */\r\n                                                                        function _mint(address to, uint256 tokenId) internal virtual {\r\nrequire(to != address(0), \"ERC721: mint to the zero address\");\r\nrequire(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n_beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n_balances[to] += 1;\r\n_owners[tokenId] = to;\r\n\r\nemit Transfer(address(0), to, tokenId);\r\n}\r\n\r\n/**\r\n* @dev Destroys `tokenId`.\r\n                * The approval is cleared when the token is burned.\r\n                                                   *\r\n                                                   * Requirements:\r\n*\r\n* - `tokenId` must exist.\r\n                   *\r\n                   * Emits a {Transfer} event.\r\n                                        */\r\n                                        function _burn(uint256 tokenId) internal virtual {\r\naddress owner = ERC721.ownerOf(tokenId);\r\n\r\n_beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n// Clear approvals\r\n_approve(address(0), tokenId);\r\n\r\n_balances[owner] -= 1;\r\ndelete _owners[tokenId];\r\n\r\nemit Transfer(owner, address(0), tokenId);\r\n}\r\n\r\n/**\r\n* @dev Transfers `tokenId` from `from` to `to`.\r\n                                             *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n                                                                                                              *\r\n                                                                                                              * Requirements:\r\n*\r\n* - `to` cannot be the zero address.\r\n                            * - `tokenId` token must be owned by `from`.\r\n                                                                      *\r\n                                                                      * Emits a {Transfer} event.\r\n                                                                                           */\r\n                                                                                           function _transfer(\r\naddress from,\r\naddress to,\r\nuint256 tokenId\r\n) internal virtual {\r\nrequire(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\nrequire(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n_beforeTokenTransfer(from, to, tokenId);\r\n\r\n// Clear approvals from the previous owner\r\n_approve(address(0), tokenId);\r\n\r\n_balances[from] -= 1;\r\n_balances[to] += 1;\r\n_owners[tokenId] = to;\r\n\r\nemit Transfer(from, to, tokenId);\r\n}\r\n\r\n/**\r\n* @dev Approve `to` to operate on `tokenId`\r\n                                  *\r\n                                  * Emits a {Approval} event.\r\n                                                       */\r\n                                                       function _approve(address to, uint256 tokenId) internal virtual {\r\n_tokenApprovals[tokenId] = to;\r\nemit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n}\r\n\r\n/**\r\n* @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n                                                                                  * The call is not executed if the target address is not a contract.\r\n                                                                                                                                            *\r\n                                                                                                                                            * @param from address representing the previous owner of the given token ID\r\n                                                                                                                                                                                                                     * @param to target address that will receive the tokens\r\n                                                                                                                                                                                                                                                                      * @param tokenId uint256 ID of the token to be transferred\r\n                                                                                                                                                                                                                                                                                                                     * @param _data bytes optional data to send along with the call\r\n* @return bool whether the call correctly returned the expected magic value\r\n*/\r\nfunction _checkOnERC721Received(\r\n    address from,\r\naddress to,\r\n        uint256 tokenId,\r\n                bytes memory _data\r\n) private returns (bool) {\r\nif (to.isContract()) {\r\ntry IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\nreturn retval == IERC721Receiver(to).onERC721Received.selector;\r\n} catch (bytes memory reason) {\r\nif (reason.length == 0) {\r\nrevert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n} else {\r\nassembly {\r\nrevert(add(32, reason), mload(reason))\r\n}\r\n}\r\n}\r\n} else {\r\nreturn true;\r\n}\r\n}\r\n\r\n/**\r\n* @dev Hook that is called before any token transfer. This includes minting\r\n                                                                    * and burning.\r\n                                                                    *\r\n                                                                    * Calling conditions:\r\n*\r\n* - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n                                                    * transferred to `to`.\r\n                                                                     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n                                                                                                                           * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n* - `from` and `to` are never both zero.\r\n*\r\n* To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n                                               */\r\n                                               function _beforeTokenTransfer(\r\n    address from,\r\naddress to,\r\n        uint256 tokenId\r\n) internal virtual {}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n                                                                   * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n                                                                                      */\r\n                                                                                      interface IERC721Enumerable is IERC721 {\r\n                                                                                                                             /**\r\n* @dev Returns the total amount of tokens stored by the contract.\r\n                                                        */\r\n                                                        function totalSupply() external view returns (uint256);\r\n\r\n/**\r\n* @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n                                                                           * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n*/\r\nfunction tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n/**\r\n* @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n* Use along with {totalSupply} to enumerate all tokens.\r\n*/\r\nfunction tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n* @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n* enumerability of all the token ids in the contract as well as all token ids owned by each\r\n* account.\r\n*/\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n// Mapping from owner to list of owned token IDs\r\nmapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n// Mapping from token ID to index of the owner tokens list\r\nmapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n// Array with all token ids, used for enumeration\r\nuint256[] private _allTokens;\r\n\r\n// Mapping from token id to position in the allTokens array\r\nmapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n/**\r\n* @dev See {IERC165-supportsInterface}.\r\n*/\r\nfunction supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\nreturn interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n}\r\n\r\n/**\r\n* @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n           */\r\n           function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\nrequire(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\nreturn _ownedTokens[owner][index];\r\n}\r\n\r\n/**\r\n* @dev See {IERC721Enumerable-totalSupply}.\r\n           */\r\n           function totalSupply() public view virtual override returns (uint256) {\r\nreturn _allTokens.length;\r\n}\r\n\r\n/**\r\n* @dev See {IERC721Enumerable-tokenByIndex}.\r\n           */\r\n           function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\nrequire(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\nreturn _allTokens[index];\r\n}\r\n\r\n/**\r\n* @dev Hook that is called before any token transfer. This includes minting\r\n                                                                    * and burning.\r\n                                                                    *\r\n                                                                    * Calling conditions:\r\n*\r\n* - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n                                                    * transferred to `to`.\r\n                                                                     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n                                                                                                                           * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n* - `from` cannot be the zero address.\r\n* - `to` cannot be the zero address.\r\n*\r\n* To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n                                               */\r\n                                               function _beforeTokenTransfer(\r\naddress from,\r\naddress to,\r\nuint256 tokenId\r\n) internal virtual override {\r\nsuper._beforeTokenTransfer(from, to, tokenId);\r\n\r\nif (from == address(0)) {\r\n_addTokenToAllTokensEnumeration(tokenId);\r\n} else if (from != to) {\r\n_removeTokenFromOwnerEnumeration(from, tokenId);\r\n}\r\nif (to == address(0)) {\r\n_removeTokenFromAllTokensEnumeration(tokenId);\r\n} else if (to != from) {\r\n_addTokenToOwnerEnumeration(to, tokenId);\r\n}\r\n}\r\n\r\n/**\r\n* @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n                                                        * @param to address representing the new owner of the given token ID\r\n                                                                                                                          * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n                                                                                                                                                                                                               */\r\n                                                                                                                                                                                                               function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\nuint256 length = ERC721.balanceOf(to);\r\n_ownedTokens[to][length] = tokenId;\r\n_ownedTokensIndex[tokenId] = length;\r\n}\r\n\r\n/**\r\n* @dev Private function to add a token to this extension's token tracking data structures.\r\n                                                        * @param tokenId uint256 ID of the token to be added to the tokens list\r\n                                                                                                                           */\r\n                                                                                                                           function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n_allTokensIndex[tokenId] = _allTokens.length;\r\n_allTokens.push(tokenId);\r\n}\r\n\r\n/**\r\n* @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n                                                             * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n    * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n    * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n    * @param from address representing the previous owner of the given token ID\r\n    * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n    */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n                                                                                     // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n                                                                                                                // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n    uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n    // When the token to delete is the last token, the swap operation is unnecessary\r\n    if (tokenIndex != lastTokenIndex) {\r\n        uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n    _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n    _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n    }\r\n\r\n    // This also deletes the contents at the last position of the array\r\n    delete _ownedTokensIndex[tokenId];\r\n    delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n    * @dev Private function to remove a token from this extension's token tracking data structures.\r\n    * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n    * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n    */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n                                                                           // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n    uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n    // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n                                                                                                                 // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n                                                                                                                                                                                                                         // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n    uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n    _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n    _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n                                                                        // This also deletes the contents at the last position of the array\r\n    delete _allTokensIndex[tokenId];\r\n    _allTokens.pop();\r\n    }\r\n}\r\n\r\ninterface SewerRats {\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\ncontract Trash is ERC721Enumerable, ReentrancyGuard, Ownable {\r\n    \r\n    address public sewerRatsAddress=0xd21a23606D2746f086f6528Cd6873bAD3307b903;\r\n    SewerRats ratsContract=SewerRats(sewerRatsAddress);\r\n\r\n    string[] private clothing = [\r\n        \"Toupe\", \"Left foot Air Jordan\", \"Two left Birkenstock sandals\", \"Bloody bandana\", \"Booty shorts\", \"Cheddaz hat pin\", \"Construction helmet\", \"Counterfeit Rolex\", \"Several mismatched crocs\", \"Fur coat\", \"GI Joe underwear\", \"Kilt\", \"Lampshade\", \"Leather vest\", \"Metal cleats\", \"Oven mitts\", \"Rain jacket\", \"Ski mask\", \"Stained underwear\", \"Steel toed boots\", \"Stinky tube sock\"];\r\n    \r\n    string[] private defence = [\r\n       \"Bagpipes\", \"Bar of soap\", \"Bloody bandages\", \"Bulletproof vest\", \"Can of beans\", \"Can of cat food\", \"Duct tape\", \"Life jacket\", \"Manhole cover\", \"Rolled-up newspaper\", \"Sardine can armor\", \"Scuba mask\", \"Shin guards\", \"Shopping cart\", \"Skateboard\", \"Smoke bomb\", \"Tombstone\", \"Turtle shell\", \"Whiskey\", \"Used facemask\"\r\n    ];\r\n    \r\n    string[] private junk = [\r\n      \"Boombox\", \"Briefcase\", \"Broken ash tray\", \"Broken clock\", \"Can of spray paint\", \"Can opener\", \"Candy wrapper\", \"Compact disc\", \"Ceramic plates\", \"Crack pipe\", \"Dirty diaper\", \"Dirty syringes\", \"Dirty teddy bear\", \"Electronic keyboard\", \"Hornet's nest\", \"Human finger bone\", \"two I <3 NY shot glasses\", \"iPod\", \"Jar of toenail clippings\", \"Lost wedding ring\", \"3 glass marbles\", \"Piece of mirror\", \"n64 controller\", \"Oxygen tank\", \"Paperclip\", \"Pickled beets\", \"Picture frame\", \"Piece of copper wire\", \"Pigeon poop\", \"Plastic turtle choker\", \"Pocket sand\", \"Polaroid camera\", \"Rotten apple cores\", \"Rubber ducky\", \"Rubber snake\", \"Rubik's cube\", \"Soggy cracker\", \"Steel lighter\", \"Subway token\", \"Toothpick \", \"Toy pistol\", \"Traffic cones\", \"Trick hand buzzer\", \"Tv antenna\", \"Ukelele\", \"Used band-aid\", \"Used toothbrush\", \"Wad of cash\", \"Cow bell\", \"Wad of gum\", \"Chewing tobacco\", \"Ball of hair\"\r\n    ];\r\n    \r\n    string[] private magic = [\r\n      \"20 sided die\", \"Bloodstained police badge\", \"Cheese that heals\", \"Cheese whiz\", \"Chicken noodle soup\", \"Chocolate lava cake\", \"Coffin\", \"Fake ID\", \"Fondue\", \"Holy water\", \"Love potion\", \"Magic wand\", \"Mushrooms\", \"Open bag of m&m's\", \"Pizza slice \", \"Rabbit foot\", \"Satanic pendant\", \"Unicorn dust\", \"Uranium\", \"Warm green slime\"\r\n    ];\r\n    \r\n    string[] private weapon = [\r\n       \"Baseball bat\", \"Bottle rockets\", \"Brass knuckles\", \"Broken glass bottle\", \"Broken umbrella\", \"Burning trash can\", \"Live cockroaches\", \"Cursed panda golf club\", \"Fanny pack with flash powder\", \"Fence post\", \"Fire cracker\", \"Fishing line\", \"Folding chair\", \"a frying pan\", \"a glitter bomb\", \"one golden candlestick\", \"a hammer\", \"a hockey stick\", \"a jelly fishing net\", \"a katana\", \"a molotov cocktail\", \"a nerf gun\", \"Nunchucks\", \"Pellet gun\", \"Pitchfork\", \"Pool stick\", \"Potato gun\", \"Razor whip\", \"Rusted switchblade\", \"Rusty morningstar\", \"Sack of pennies\", \"Shiv\", \"Thong slingshot\", \"Vial of poison\", \"Walking stick\", \"Ping pong paddle\", \"Spoon\", \"Ball python in a burlap sack\"\r\n    ];\r\n\r\nstring[] private suffixes = [\r\n    \"of Might\",\r\n    \"of Tang\",\r\n    \"of Death\",\r\n    \"of Life\",\r\n    \"of Pollution\",\r\n    \"of Power\",\r\n    \"of Giants\",\r\n    \"of Titans\",\r\n    \"of Skill\",\r\n    \"of Perfection\",\r\n    \"of Brilliance\",\r\n    \"of Enlightenment\",\r\n    \"of Protection\",\r\n    \"of Anger\",\r\n    \"of Rage\",\r\n    \"of Fury\",\r\n    \"of Vitriol\",\r\n    \"of the Fox\",\r\n    \"of Detection\",\r\n    \"of Reflection\",\r\n    \"of the Twins\",\r\n    \"of the Smog\",\r\n    \"of the Dragon\",\r\n    \"of the Sewer\",\r\n    \"of Stench\",\r\n    \"of Pain\",\r\n    \"of Degeneration\",\r\n    \"of Ballers\",\r\n    \"of Making it\",\r\n    \"of Aping\",\r\n    \"of the Rat\",\r\n    \"of CHIZ\"\r\n];\r\n\r\nstring[] private namePrefixes = [\r\n    \"Agony\", \"Apocalypse\", \"Armageddon\", \"Beast\", \"Behemoth\", \"Blight\", \"Blood\", \"Bramble\",\r\n    \"Brimstone\", \"Brood\", \"Carrion\", \"Cataclysm\", \"Chimeric\", \"Corpse\", \"Corruption\", \"Damnation\",\r\n    \"Death\", \"Demon\", \"Dire\", \"Dragon\", \"Dread\", \"Doom\", \"Dusk\", \"Eagle\", \"Empyrean\", \"Fate\", \"Foe\",\r\n    \"Gale\", \"Ghoul\", \"Gloom\", \"Glyph\", \"Golem\", \"Grim\", \"Hate\", \"Havoc\", \"Honour\", \"Horror\", \"Hypnotic\",\r\n    \"Kraken\", \"Loath\", \"Maelstrom\", \"Mind\", \"Miracle\", \"Morbid\", \"Oblivion\", \"Onslaught\", \"Pain\",\r\n    \"Pandemonium\", \"Phoenix\", \"Plague\", \"Rage\", \"Rapture\", \"Rune\", \"Skull\", \"Sol\", \"Soul\", \"Sorrow\",\r\n    \"Spirit\", \"Storm\", \"Tempest\", \"Torment\", \"Vengeance\", \"Victory\", \"Viper\", \"Vortex\", \"Woe\", \"Wrath\",\r\n    \"Light's\", \"Shimmering\", \"Stink\", \"Chedda\", \"Strong Hand\"\r\n];\r\n\r\nstring[] private nameSuffixes = [\r\n    \"Bane\",\r\n    \"Root\",\r\n    \"Bite\",\r\n    \"Song\",\r\n    \"Roar\",\r\n    \"Grasp\",\r\n    \"Instrument\",\r\n    \"Glow\",\r\n    \"Bender\",\r\n    \"Shadow\",\r\n    \"Whisper\",\r\n    \"Shout\",\r\n    \"Growl\",\r\n    \"Tear\",\r\n    \"Peak\",\r\n    \"Form\",\r\n    \"Sun\",\r\n    \"Moon\",\r\n    \"Rat\"\r\n];\r\n\r\nfunction random(string memory input) internal pure returns (uint256) {\r\nreturn uint256(keccak256(abi.encodePacked(input)));\r\n}\r\n\r\nfunction getClothing(uint256 tokenId) public view returns (string memory) {\r\n    return pluck(tokenId, \"clothing\", clothing);\r\n}\r\n\r\nfunction getDefence(uint256 tokenId) public view returns (string memory) {\r\n    return pluck(tokenId, \"defence\", defence);\r\n}\r\n\r\nfunction getWeapon(uint256 tokenId) public view returns (string memory) {\r\n    return pluck(tokenId, \"weapon\", clothing);\r\n}\r\n\r\nfunction getMagic(uint256 tokenId) public view returns (string memory) {\r\n    return pluck(tokenId, \"magic\", magic);\r\n}\r\n\r\nfunction getJunk(uint256 tokenId) public view returns (string memory) {\r\n    return pluck(tokenId, \"junk\", junk);\r\n}\r\n\r\n\r\n\r\nfunction pluck(uint256 tokenId, string memory keyPrefix, string[] memory sourceArray) internal view returns (string memory) {\r\n    uint256 rand = random(string(abi.encodePacked(keyPrefix, toString(tokenId))));\r\n    string memory output = sourceArray[rand % sourceArray.length];\r\n    uint256 greatness = rand % 21;\r\n    if (greatness > 14) {\r\n        output = string(abi.encodePacked(output, \" \", suffixes[rand % suffixes.length]));\r\n    }\r\n    if (greatness >= 19) {\r\n        string[2] memory name;\r\n        name[0] = namePrefixes[rand % namePrefixes.length];\r\n        name[1] = nameSuffixes[rand % nameSuffixes.length];\r\n        if (greatness == 19) {\r\n            output = string(abi.encodePacked('\"', name[0], ' ', name[1], '\" ', output));\r\n        } else {\r\n            output = string(abi.encodePacked('\"', name[0], ' ', name[1], '\" ', output, \" +1\"));\r\n        }\r\n    }\r\n    return output;\r\n}\r\n\r\nfunction tokenURI(uint256 tokenId) override public view returns (string memory) {\r\nstring[17] memory parts;\r\nparts[0] = '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 350 350\"><style>.base { fill: black; font-family: serif; font-size: 14px; }</style><rect width=\"100%\" height=\"100%\" fill=\"#dbd642\" /><text x=\"10\" y=\"20\" class=\"base\">';\r\n\r\nparts[1] = getClothing(tokenId);\r\n\r\nparts[2] = '</text><text x=\"10\" y=\"40\" class=\"base\">';\r\n\r\nparts[3] = getDefence(tokenId);\r\n\r\nparts[4] = '</text><text x=\"10\" y=\"60\" class=\"base\">';\r\n\r\nparts[5] = getWeapon(tokenId);\r\n\r\nparts[6] = '</text><text x=\"10\" y=\"80\" class=\"base\">';\r\n\r\nparts[7] = getMagic(tokenId);\r\n\r\nparts[8] = '</text><text x=\"10\" y=\"100\" class=\"base\">';\r\n\r\nparts[9] = getJunk(tokenId);\r\n\r\nparts[13] = '</text></svg>';\r\n\r\nstring memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]));\r\n        output = string(abi.encodePacked(output, parts[9], parts[10], parts[11], parts[12], parts[13]));\r\n\r\nstring memory json = Base64.encode(bytes(string(abi.encodePacked('{\"name\": \"Trash #', toString(tokenId), '\", \"description\": \"Trash are randomized items found in the sewers. generated and stored on chain. Smells, Stats, images, and other functionality are intentionally omitted for rats to abuse.\", \"image\": \"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\"}'))));\r\noutput = string(abi.encodePacked('data:application/json;base64,', json));\r\n\r\nreturn output;\r\n}\r\n\r\nfunction mintWithRat(uint256 ratId) public nonReentrant {\r\n    require(ratsContract.ownerOf(ratId) == msg.sender, \"Not the owner of this rat\");\r\n    require(!_exists(ratId),\"Already Minted!\");\r\n\r\n    _safeMint(msg.sender, ratId);\r\n}\r\n\r\n\r\n\r\nfunction toString(uint256 value) internal pure returns (string memory) {\r\n// Inspired by OraclizeAPI's implementation - MIT license\r\n// https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\nif (value == 0) {\r\nreturn \"0\";\r\n}\r\nuint256 temp = value;\r\nuint256 digits;\r\nwhile (temp != 0) {\r\ndigits++;\r\ntemp /= 10;\r\n}\r\nbytes memory buffer = new bytes(digits);\r\nwhile (value != 0) {\r\ndigits -= 1;\r\nbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\nvalue /= 10;\r\n}\r\nreturn string(buffer);\r\n}\r\n\r\nfunction withdrawAll() public payable onlyOwner {\r\n    require(payable(_msgSender()).send(address(this).balance));\r\n}\r\n\r\n\r\nconstructor() ERC721(\"Trash\", \"TRASH\") Ownable() {}\r\n}\r\n\r\n/// [MIT License]\r\n    /// @title Base64\r\n               /// @notice Provides a function for encoding some bytes in base64\r\n/// @author Brecht Devos <brecht@loopring.org>\r\nlibrary Base64 {\r\nbytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n/// @notice Encodes some bytes to the base64 representation\r\nfunction encode(bytes memory data) internal pure returns (string memory) {\r\nuint256 len = data.length;\r\nif (len == 0) return \"\";\r\n\r\n// multiply by 4/3 rounded up\r\nuint256 encodedLen = 4 * ((len + 2) / 3);\r\n\r\n// Add some extra buffer at the end\r\nbytes memory result = new bytes(encodedLen + 32);\r\n\r\nbytes memory table = TABLE;\r\n\r\nassembly {\r\n    let tablePtr := add(table, 1)\r\nlet resultPtr := add(result, 32)\r\n\r\nfor {\r\n    let i := 0\r\n} lt(i, len) {\r\n\r\n} {\r\ni := add(i, 3)\r\nlet input := and(mload(add(data, i)), 0xffffff)\r\n\r\nlet out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\r\nout := shl(8, out)\r\nout := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\r\nout := shl(8, out)\r\nout := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\r\nout := shl(8, out)\r\nout := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\r\nout := shl(224, out)\r\n\r\nmstore(resultPtr, out)\r\n\r\nresultPtr := add(resultPtr, 4)\r\n}\r\n\r\nswitch mod(len, 3)\r\ncase 1 {\r\nmstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n}\r\ncase 2 {\r\nmstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n}\r\n\r\nmstore(result, encodedLen)\r\n}\r\n\r\nreturn string(result);\r\n}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getClothing\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDefence\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getJunk\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMagic\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getWeapon\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratId\",\"type\":\"uint256\"}],\"name\":\"mintWithRat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sewerRatsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"Trash","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://06e987cc574396f2f19d3866e98a72af58483615708c9202afa22bb5c0ab0e9b"}]}