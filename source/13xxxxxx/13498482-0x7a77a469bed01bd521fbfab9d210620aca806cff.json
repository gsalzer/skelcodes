{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ERC721 {\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n}\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n}\r\n\r\ninterface Token {\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    event OwnerUpdate(address _prevOwner, address _newOwner);\r\n\r\n    function changeOwnerForce(address _newOwner) public isOwner {\r\n        require(_newOwner != owner);\r\n        owner = _newOwner;\r\n        emit OwnerUpdate(owner, _newOwner);\r\n    }\r\n\r\n}\r\n\r\ncontract Controlled is Owned {\r\n\r\n    bool public transferEnable = true;\r\n\r\n    bool public lockFlag = true;\r\n\r\n    constructor() {\r\n        setExclude(msg.sender);\r\n    }\r\n\r\n    mapping(address => bool) public locked;\r\n\r\n    mapping(address => bool) public exclude;\r\n\r\n    function enableTransfer(bool _enable) public isOwner{\r\n        transferEnable = _enable;\r\n    }\r\n\r\n    function disableLock(bool _enable) public isOwner returns (bool success){\r\n        lockFlag = _enable;\r\n        return true;\r\n    }\r\n\r\n    function addLock(address _addr) public isOwner returns (bool success){\r\n        require(_addr != msg.sender);\r\n        locked[_addr] = true;\r\n        return true;\r\n    }\r\n\r\n    function setExclude(address _addr) public isOwner returns (bool success){\r\n        exclude[_addr] = true;\r\n        return true;\r\n    }\r\n\r\n    function removeLock(address _addr) public isOwner returns (bool success){\r\n        locked[_addr] = false;\r\n        return true;\r\n    }\r\n\r\n    modifier transferAllowed(address _addr) {\r\n        if (!exclude[_addr]) {\r\n            assert(transferEnable);\r\n            if(lockFlag){\r\n                assert(!locked[_addr]);\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier validAddress(address _addr) {\r\n        assert(address(0x0) != _addr && address(0x0) != msg.sender);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract StandardToken is Token, Controlled {\r\n\r\n    string public name = \"\";\r\n    string public symbol = \"\";\r\n    uint8 public decimals = 18;\r\n\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    constructor (string memory name_, string memory symbol_) {\r\n        name = name_;\r\n        symbol = symbol_;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view override returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public override transferAllowed(msg.sender) validAddress(_to) returns (bool success) {\r\n        require(_value > 0);\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            emit Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public override transferAllowed(_from) validAddress(_to) returns (bool success) {\r\n        require(_value > 0);\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            emit Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public override transferAllowed(_spender) returns (bool success) {\r\n        require(_value > 0);\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public override view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(totalSupply + amount > totalSupply);\r\n        require(balances[account] + amount > balances[account]);\r\n\r\n        balances[account] += amount;\r\n        totalSupply += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(totalSupply >= amount);\r\n        require(balances[account] >= amount);\r\n\r\n        totalSupply -= amount;\r\n        balances[account] -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n}\r\n\r\ncontract LizardToken is StandardToken {\r\n\r\n    ERC721 public lizardContract;\r\n    ERC721 public dragonContract;\r\n\r\n    uint256 public immutable PER_DAY_PER_LIZARD_REWARD = 10 ether;\r\n    uint256 public immutable PER_DAY_PER_DRAGON_REWARD = 50 ether;\r\n    uint256 private MINE_PERIOD = 86400;\r\n    uint256 public GENESIS = 1635379200;\r\n\r\n    bool public mineIsActive = true;\r\n\r\n    mapping(uint256 => uint256) public last;\r\n    mapping(uint256 => uint256) public lastDragon;\r\n\r\n    constructor(address lizard, address dragon) StandardToken(\"SCALE\",\"SCALE\"){\r\n        lizardContract = ERC721(lizard);\r\n        dragonContract = ERC721(dragon);\r\n    }\r\n\r\n    function closeMineState() public isOwner {\r\n        require(mineIsActive, \"Mining is currently unavailable\");\r\n        mineIsActive = false;\r\n    }\r\n\r\n    function openMineState(uint256 timestamp) public isOwner {\r\n        require(!mineIsActive, \"Mining is currently on\");\r\n        mineIsActive = true;\r\n        GENESIS = timestamp;\r\n    }\r\n\r\n    function claim(address user) external {\r\n        require(mineIsActive, \"Mining is currently unavailable\");\r\n        require(block.timestamp > GENESIS, \"Mining is currently unavailable\");\r\n        uint256 owed = 0;\r\n        uint256 total = lizardContract.balanceOf(user);\r\n        for (uint256 i = 0; i < total; i++) {\r\n            uint256 id = lizardContract.tokenOfOwnerByIndex(user, i);\r\n            uint256 minePeriods = minePeriod(last[id]);\r\n            owed += (minePeriods * PER_DAY_PER_LIZARD_REWARD);\r\n            last[id] = block.timestamp;\r\n        }\r\n        total = dragonContract.balanceOf(user);\r\n        for (uint256 i = 0; i < total; i++) {\r\n            uint256 id = dragonContract.tokenOfOwnerByIndex(user, i);\r\n            uint256 minePeriods = minePeriod(lastDragon[id]);\r\n            owed += (minePeriods * PER_DAY_PER_DRAGON_REWARD);\r\n            lastDragon[id] = block.timestamp;\r\n        }\r\n        _mint(user, owed);\r\n    }\r\n\r\n    function getTotalClaimable(address user)  external view returns(uint256) {\r\n        if (!mineIsActive) {\r\n            return 0;\r\n        }\r\n        if (block.timestamp < GENESIS) {\r\n            return 0;\r\n        }\r\n        uint256 owed = 0;\r\n        uint256 total = lizardContract.balanceOf(user);\r\n        for (uint256 i = 0; i < total; i++) {\r\n            uint256 id = lizardContract.tokenOfOwnerByIndex(user, i);\r\n            uint256 minePeriods = minePeriod(last[id]);\r\n            owed += (minePeriods * PER_DAY_PER_LIZARD_REWARD);\r\n        }\r\n        total = dragonContract.balanceOf(user);\r\n        for (uint256 i = 0; i < total; i++) {\r\n            uint256 id = dragonContract.tokenOfOwnerByIndex(user, i);\r\n            uint256 minePeriods = minePeriod(lastDragon[id]);\r\n            owed += (minePeriods * PER_DAY_PER_DRAGON_REWARD);\r\n        }\r\n        return owed;\r\n    }\r\n\r\n    function minePeriod(uint256 claimedTime) internal view returns (uint256) {\r\n        uint256 lastTime = Math.max(claimedTime, GENESIS);\r\n        return (block.timestamp - lastTime / MINE_PERIOD * MINE_PERIOD) / MINE_PERIOD;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lizard\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dragon\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GENESIS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PER_DAY_PER_DRAGON_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PER_DAY_PER_LIZARD_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerForce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeMineState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"disableLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dragonContract\",\"outputs\":[{\"internalType\":\"contract ERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exclude\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"last\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastDragon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lizardContract\",\"outputs\":[{\"internalType\":\"contract ERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mineIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"openMineState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setExclude\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LizardToken","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000086f6bf16f495afc065da4095ac12ccd5e83a8c8500000000000000000000000017eb3b4954d36d5c14ee9990b479d063286153f5","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a959afda5334498da1285559b8409b3d168c1ab7538451c2b64d4dcd0006a77a"}]}