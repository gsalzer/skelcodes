{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Munch single asset staking contract.\r\n *\r\n * Visit https://munchproject.io\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * \r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// Stake Munch tokens to earn more as rewards.\r\n//\r\n// \r\n//\r\ncontract MunchSAStaking is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct Pool {\r\n        uint256 remainingBalance;   // Funds available for new stakers\r\n        uint256 attributed;         // Funds taken from balance for stakers\r\n        uint256 paidOut;            // Rewards claimed, therefore paidOut <= attributed\r\n        uint256 minStake;\r\n        uint256 maxStake;\r\n        uint stakingDuration;\r\n        uint minPercentToCharity;   // minimum % of rewards being given to charity - 50% is stored as 50\r\n        uint apy;                   // integer percentage - 50% is stored as 50\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint256 amountDeposited;\r\n        uint256 remainingRewards;   // Amount not claimed yet\r\n        uint256 rewardsDonated;     // Out of claimed rewards, amount sent to charity\r\n        uint stakingStartTime;      // Timestamp when user started staking\r\n        uint lastRewardTime;        // Last time rewards were claimed\r\n        uint256 rewardDebt;         // Rewards to ignore in redis computation based on when user joined pool\r\n        uint percentToCharity;      // as an int: 50% is stored as 50\r\n    }\r\n\r\n    // Address of the ERC20 Token contract.\r\n    IERC20 _munchToken;\r\n    // Address where the sell of the tokens for charity will happen\r\n    address _charityAddress;\r\n\r\n    // Counting the accumulated rewards received by the contract so we can\r\n    // redistribute them to users.\r\n    uint256 _accRedisTokensPerShare;\r\n    uint256 _lastRedisTotal;\r\n    uint256 _stakedAndFunds; // Sum of all MUNCH tokens staked or funded for pools\r\n    uint256 _staked; // Sum of all MUNCH tokens staked - used to get redis share of a user\r\n\r\n    // All pools added to the contract.\r\n    Pool[] public pools;\r\n\r\n    // Info of each user that stakes tokens.\r\n    mapping(uint => mapping(address => UserInfo)) public userInfo;\r\n\r\n    event Deposit(uint poolIdx, address indexed user, uint256 amount);\r\n    event Withdraw(uint poolIdx, address indexed user, uint256 amount);\r\n\r\n    constructor(address munchToken) {\r\n        _munchToken = IERC20(munchToken);\r\n        _charityAddress = address(_munchToken);\r\n    }\r\n\r\n    function addPool(uint stakingDurationInDays, uint256 minStake, uint maxStake, uint apy) public onlyOwner {\r\n        pools.push(Pool({\r\n            remainingBalance: 0,\r\n            attributed: 0,\r\n            paidOut: 0,\r\n            minStake: minStake,\r\n            maxStake: maxStake,\r\n            stakingDuration: stakingDurationInDays * 1 days,\r\n            minPercentToCharity: 50,\r\n            apy: apy\r\n        }));\r\n    }\r\n\r\n    // Fund a pool to allow users to participate\r\n    function fund(uint poolIdx, uint256 amount) public onlyOwner {\r\n        Pool storage pool = pools[poolIdx];\r\n        _munchToken.safeTransferFrom(address(msg.sender), address(this), amount);\r\n        pool.remainingBalance = pool.remainingBalance.add(amount);\r\n        _stakedAndFunds = _stakedAndFunds.add(amount);\r\n    }\r\n\r\n    // Allows to unlock a pool for any emergency reason. Only accumulated rewards can be redeemed.\r\n    function unlockPool(uint poolIdx) public onlyOwner {\r\n        pools[poolIdx].stakingDuration = 0;\r\n    }\r\n\r\n    function setMinPercentToCharity(uint poolIdx, uint minPercentToCharity) public onlyOwner {\r\n        Pool storage pool = pools[poolIdx];\r\n        pool.minPercentToCharity = minPercentToCharity;\r\n    }\r\n\r\n    function setCharityAddress(address addy) public onlyOwner {\r\n        _charityAddress = addy;\r\n    }\r\n\r\n    // View function to see the expected total rewards for a given address.\r\n    function totalRewards(uint poolIdx, address wallet) external view returns (uint256) {\r\n        UserInfo storage user = userInfo[poolIdx][wallet];\r\n        Pool storage pool = pools[poolIdx];\r\n        return user.amountDeposited.mul(pool.apy).mul(pool.stakingDuration).div(365 days).div(100);\r\n    }\r\n\r\n    // View function to see how much can currently be redeemed.\r\n    function pending(uint poolIdx, address wallet) public view returns (uint256) {\r\n        UserInfo storage user = userInfo[poolIdx][wallet];\r\n        Pool storage pool = pools[poolIdx];\r\n\r\n        uint timeSinceLastReward = block.timestamp - user.lastRewardTime;\r\n        uint timeFromLastRewardToEnd = user.stakingStartTime + pool.stakingDuration - user.lastRewardTime;\r\n        uint256 pendingReward = user.remainingRewards.mul(timeSinceLastReward).div(timeFromLastRewardToEnd);\r\n        return pendingReward > user.remainingRewards ? user.remainingRewards : pendingReward;\r\n    }\r\n\r\n    // View function to see how much redistribution token can currently be redeemed.\r\n    function redisCount(uint poolIdx, address wallet) public view returns (uint256) {\r\n        if (_accRedisTokensPerShare == 0 || _staked == 0) {\r\n            return 0;\r\n        }\r\n        UserInfo storage user = userInfo[poolIdx][wallet];\r\n        return user.amountDeposited.mul(_accRedisTokensPerShare).div(1e36).sub(user.rewardDebt);\r\n    }\r\n\r\n    // Update the count of redistribution tokens (coming from MUNCH tx tax)\r\n    // To call BEFORE every change made to the contract balance.\r\n    function updateRedisCount() internal {\r\n        uint256 munchBal = _munchToken.balanceOf(address(this));\r\n        if (munchBal == 0 || _staked == 0) {\r\n            return;\r\n        }\r\n\r\n        // Whatever is not part of staked and funded tokens is redistribution.\r\n        // We have not had changes to the total amount between the last call and now.\r\n        uint256 totalRedis = munchBal.sub(_stakedAndFunds);\r\n        uint256 toAccountFor = totalRedis.sub(_lastRedisTotal);\r\n        _lastRedisTotal = totalRedis;\r\n\r\n        _accRedisTokensPerShare = _accRedisTokensPerShare.add(toAccountFor.mul(1e36).div(_staked));\r\n    }\r\n\r\n    // Deposit tokens to start a staking period.\r\n    // If some tokens are already there, rewards are returned and staking lock starts over with sum of deposits\r\n    //\r\n    // To change the percentage given out to charity, you need to call this function with amount = 0\r\n    // This has the effect of reseting your lock time and withdrawing your rewards.\r\n    function deposit(uint poolIdx, uint256 amount, uint percentToCharity) public {\r\n        UserInfo storage user = userInfo[poolIdx][msg.sender];\r\n        Pool storage pool = pools[poolIdx];\r\n        require(percentToCharity >= pool.minPercentToCharity && percentToCharity <= 100, \"Invalid percentage to give to charity\");\r\n        uint256 totalDeposit = user.amountDeposited.add(amount);\r\n        require(pool.minStake <= totalDeposit && pool.maxStake >= totalDeposit, \"Unauthorized amount\");\r\n\r\n        if (user.amountDeposited > 0) {\r\n            transferMunchRewards(poolIdx); // this calls updateRedisCount()\r\n        } else {\r\n            updateRedisCount();\r\n        }\r\n\r\n        if (amount > 0) {\r\n            uint256 newRewards = amount.mul(pool.apy).mul(pool.stakingDuration).div(365 days).div(100);\r\n            require(pool.remainingBalance >= newRewards, \"Pool is full\");\r\n\r\n            userInfo[poolIdx][msg.sender] = UserInfo({\r\n                amountDeposited: totalDeposit,\r\n                remainingRewards: user.remainingRewards.add(newRewards),\r\n                rewardsDonated: user.rewardsDonated,\r\n                lastRewardTime: block.timestamp,\r\n                stakingStartTime: block.timestamp,\r\n                percentToCharity: percentToCharity,\r\n                rewardDebt: totalDeposit.mul(_accRedisTokensPerShare).div(1e36)\r\n            });\r\n            pool.remainingBalance = pool.remainingBalance.sub(newRewards);\r\n            pool.attributed = pool.attributed.add(newRewards);\r\n\r\n            _stakedAndFunds = _stakedAndFunds.add(amount);\r\n            _staked = _staked.add(amount);\r\n\r\n            _munchToken.safeTransferFrom(address(msg.sender), address(this), amount);\r\n\r\n            emit Deposit(poolIdx, msg.sender, amount);\r\n        } else {\r\n            user.percentToCharity = percentToCharity;\r\n        }\r\n    }\r\n\r\n    // Withdraw all staked tokens from a given pool.\r\n    function withdraw(uint poolIdx) public {\r\n        UserInfo storage user = userInfo[poolIdx][msg.sender];\r\n        Pool storage pool = pools[poolIdx];\r\n\r\n        require(block.timestamp - user.stakingStartTime > pool.stakingDuration, \"Lock period not over\");\r\n\r\n        // Rewards\r\n        transferMunchRewards(poolIdx); // this calls updateRedisCount()\r\n\r\n        // Clean up\r\n        _stakedAndFunds = _stakedAndFunds.sub(user.amountDeposited);\r\n        _staked = _staked.sub(user.amountDeposited);\r\n        user.remainingRewards = 0;\r\n        uint256 amountToWithdraw = user.amountDeposited;\r\n        user.amountDeposited = 0;\r\n\r\n        // Withdraw\r\n        _munchToken.safeTransfer(address(msg.sender), amountToWithdraw);\r\n        emit Withdraw(poolIdx, msg.sender, amountToWithdraw);\r\n    }\r\n\r\n    // Called both internally and directly to claim rewards for a given wallet.\r\n    // HAS TO call updateRedisCount()\r\n    function transferMunchRewards(uint poolIdx) public {\r\n        UserInfo storage user = userInfo[poolIdx][msg.sender];\r\n        Pool storage pool = pools[poolIdx];\r\n        uint256 pendingRewards = pending(poolIdx, msg.sender);\r\n\r\n        updateRedisCount();\r\n\r\n        if(pendingRewards > 0) {\r\n            // account for redistribution tokens coming from tx tax on MUNCH token.\r\n            uint256 redis = redisCount(poolIdx, msg.sender);\r\n            uint256 pendingAmount = pendingRewards.add(redis);\r\n\r\n            uint256 toCharity = pendingAmount.mul(user.percentToCharity).div(100);\r\n            uint256 toHolder = pendingAmount.sub(toCharity);\r\n\r\n            if (toCharity > 0) {\r\n                // send share to charity\r\n                _munchToken.transfer(_charityAddress, toCharity);\r\n            }\r\n\r\n            if (toHolder > 0) {\r\n                // send share to holder\r\n                _munchToken.transfer(msg.sender, toHolder);\r\n            }\r\n\r\n            // mark as paid out, redeemed, and write down how much was donated to charity\r\n            _stakedAndFunds = _stakedAndFunds.sub(pendingRewards);\r\n            _lastRedisTotal = _lastRedisTotal.sub(redis);\r\n            pool.paidOut = pool.paidOut.add(pendingRewards);\r\n            user.remainingRewards = user.remainingRewards.sub(pendingRewards);\r\n            user.rewardsDonated = user.rewardsDonated.add(toCharity); // includes redis\r\n            user.lastRewardTime = block.timestamp;\r\n        }\r\n    }\r\n\r\n    // Withdraw Munch tokens from the funds deposited in a given pool\r\n    // This functions does not allow owner to withdraw funds deposited by or attributed to holders,\r\n    // only remaining funds.\r\n    function fundWithdraw(uint poolIdx, uint256 amount) onlyOwner public {\r\n        Pool storage pool = pools[poolIdx];\r\n        require(pool.remainingBalance >= amount, \"Cannot withdraw more than remaining pool balance\");\r\n        updateRedisCount();\r\n        _munchToken.transfer(msg.sender, amount);\r\n        _stakedAndFunds = _stakedAndFunds.sub(amount);\r\n    }\r\n\r\n    // Withdraw any ETH sent to the contract\r\n    function ethWithdraw() onlyOwner public {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"Balance is zero.\");\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"munchToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolIdx\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolIdx\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingDurationInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentToCharity\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attributed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentToCharity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"redisCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"setCharityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentToCharity\",\"type\":\"uint256\"}],\"name\":\"setMinPercentToCharity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIdx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIdx\",\"type\":\"uint256\"}],\"name\":\"transferMunchRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIdx\",\"type\":\"uint256\"}],\"name\":\"unlockPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsDonated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentToCharity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIdx\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MunchSAStaking","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000944eee930933be5e23b690c8589021ec8619a301","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://920f56d2a0530b8e195858dcd021dadcee4173f0fda666889580b1e11a84b597"}]}