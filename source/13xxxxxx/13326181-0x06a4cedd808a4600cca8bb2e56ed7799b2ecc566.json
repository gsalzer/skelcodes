{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PrivateSaleV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./utils/Context.sol\\\";\\n\\ncontract PrivateSaleV2 is Context {\\n    /**\\n     * @dev `_usdt` represents the USDT smart contract address.\\n     * @dev `_usdc` represents the USDC smart contract address.\\n     * @dev `_busd` represents the BUSD smart contract address.\\n     * @dev `_bollycoin` represents the Bollycoin token contract.\\n     * @dev `_settlementWallet` represents the wallet address to which tokens are sent during purcahse.\\n\\n     * `_admin` is the account that controls the sale.\\n     */\\n    address private _usdt;\\n    address private _usdc;\\n    address private _busd;\\n    address private _bollycoin;\\n    address private _admin;\\n    address private _settlementWallet;\\n\\n    uint256 public bollycoinPrice = 0.1 * 10**18; // 0.1 USD\\n    /**\\n     * @dev checks if `caller` is `_admin`\\n     * reverts if the `caller` is not the `_admin` account.\\n     */\\n    modifier onlyAdmin() {\\n        require(_admin == msgSender(), \\\"Error: caller not admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev is emitted when a successful purchase is made.\\n     */\\n    event Purchase(\\n        address indexed buyer,\\n        string uid,\\n        uint256 amount,\\n        uint256 usdValue,\\n        bytes32 currency\\n    );\\n\\n    constructor(\\n        address _usdtAddress,\\n        address _usdcAddress,\\n        address _busdAddress,\\n        address _bollyAddress,\\n        address _settlementAddress\\n    ) {\\n        _admin = _settlementAddress;\\n        _usdt = _usdtAddress;\\n        _usdc = _usdcAddress;\\n        _busd = _busdAddress;\\n        _bollycoin = _bollyAddress;\\n        _settlementWallet = _settlementAddress;\\n    }\\n\\n    /**\\n     * @dev used to purchase bollycoin using USDT. Tokens are sent to the buyer.\\n     * @param _amount - The number of bollycoin tokens to purchase\\n     */\\n    function purchaseWithUSDT(uint256 _amount, string memory uid)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 balance = IERC20(_usdt).balanceOf(msgSender());\\n        uint256 allowance = IERC20(_usdt).allowance(msgSender(), address(this));\\n\\n        uint256 totalCostInUSDT = (bollycoinPrice) * _amount;\\n        totalCostInUSDT = totalCostInUSDT / 10**12;\\n        require(balance >= totalCostInUSDT, \\\"Error: insufficient USDT Balance\\\");\\n        require(\\n            allowance >= totalCostInUSDT,\\n            \\\"Error: allowance less than spending\\\"\\n        );\\n\\n        IERC20(_usdt).transferFrom(\\n            msgSender(),\\n            _settlementWallet,\\n            totalCostInUSDT\\n        );\\n        IERC20(_bollycoin).transfer(msgSender(), _amount * 10**18);\\n        emit Purchase(\\n            msgSender(),\\n            uid,\\n            _amount,\\n            totalCostInUSDT,\\n            bytes32(\\\"USDT\\\")\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev used to purchase bollycoin using USDC. Tokens are sent to the buyer.\\n     * @param _amount - The number of bollycoin tokens to purchase\\n     */\\n    function purchaseWithUSDC(uint256 _amount, string memory uid)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 balance = IERC20(_usdc).balanceOf(msgSender());\\n        uint256 allowance = IERC20(_usdc).allowance(msgSender(), address(this));\\n\\n        uint256 usdValue = (bollycoinPrice) * _amount;\\n\\n        uint256 totalCostInUSDC = (bollycoinPrice) * _amount;\\n        totalCostInUSDC = totalCostInUSDC / 10**12;\\n        require(balance >= totalCostInUSDC, \\\"Error: insufficient USDC Balance\\\");\\n        require(\\n            allowance >= totalCostInUSDC,\\n            \\\"Error: allowance less than spending\\\"\\n        );\\n\\n        IERC20(_usdc).transferFrom(\\n            msgSender(),\\n            _settlementWallet,\\n            totalCostInUSDC\\n        );\\n        IERC20(_bollycoin).transfer(msgSender(), _amount * 10**18);\\n        emit Purchase(msgSender(), uid, _amount, usdValue, bytes32(\\\"USDC\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev used to purchase bollycoin using BUSD. Tokens are sent to the buyer.\\n     * @param _amount - The number of bollycoin tokens to purchase\\n     */\\n    function purchaseWithBUSD(uint256 _amount, string memory uid)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 balance = IERC20(_busd).balanceOf(msgSender());\\n        uint256 allowance = IERC20(_busd).allowance(msgSender(), address(this));\\n\\n        uint256 totalCostInBUSD = (bollycoinPrice) * _amount;\\n        require(balance >= totalCostInBUSD, \\\"Error: insufficient BUSD Balance\\\");\\n        require(\\n            allowance >= totalCostInBUSD,\\n            \\\"Error: allowance less than spending\\\"\\n        );\\n\\n        IERC20(_busd).transferFrom(\\n            msgSender(),\\n            _settlementWallet,\\n            totalCostInBUSD\\n        );\\n        IERC20(_bollycoin).transfer(msgSender(), _amount * 10**18);\\n        emit Purchase(\\n            msgSender(),\\n            uid,\\n            _amount,\\n            totalCostInBUSD,\\n            bytes32(\\\"BUSD\\\")\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev returns the usdt smart contract used for purchase.\\n     */\\n    function usdt() public view returns (address) {\\n        return _usdt;\\n    }\\n\\n    /**\\n     * @dev returns the usdc smart contract used for purchase.\\n     */\\n    function usdc() public view returns (address) {\\n        return _usdc;\\n    }\\n\\n    /**\\n     * @dev returns the busd smart contract used for purchase.\\n     */\\n    function busd() public view returns (address) {\\n        return _busd;\\n    }\\n\\n    /**\\n     * @dev returns the bollycoin smart contract used for purchase.\\n     */\\n    function bolly() public view returns (address) {\\n        return _bollycoin;\\n    }\\n\\n    /**\\n     * @dev returns the admin account used for purchase.\\n     */\\n    function admin() public view returns (address) {\\n        return _admin;\\n    }\\n\\n    /**\\n     * @dev returns the settlement address used for purchase.\\n     */\\n    function settlementAddress() public view returns (address) {\\n        return _settlementWallet;\\n    }\\n\\n    /**\\n     * @dev transfers ownership to a different account.\\n     *\\n     * Requirements:\\n     * `newAdmin` cannot be a zero address.\\n     * `caller` should be current admin.\\n     */\\n    function transferControl(address newAdmin) public virtual onlyAdmin {\\n        require(newAdmin != address(0), \\\"Error: owner cannot be zero\\\");\\n        _admin = newAdmin;\\n    }\\n\\n    /**\\n     * @dev updates the usdt sc address.\\n     *\\n     * Requirements:\\n     * `newAddress` cannot be a zero address.\\n     * `caller` should be current admin.\\n     */\\n    function updateUsdt(address newAddress) public virtual onlyAdmin {\\n        require(newAddress != address(0), \\\"Error: address cannot be zero\\\");\\n        _usdt = newAddress;\\n    }\\n\\n    /**\\n     * @dev updates the usdc sc address.\\n     *\\n     * Requirements:\\n     * `newAddress` cannot be a zero address.\\n     * `caller` should be current admin.\\n     */\\n    function updateUsdc(address newAddress) public virtual onlyAdmin {\\n        require(newAddress != address(0), \\\"Error: address cannot be zero\\\");\\n        _usdc = newAddress;\\n    }\\n\\n    /**\\n     * @dev updates the bollycoin token address.\\n     *\\n     * Requirements:\\n     * `newAddress` cannot be a zero address.\\n     * `caller` should be current admin.\\n     */\\n    function updateBolly(address newAddress) public virtual onlyAdmin {\\n        require(newAddress != address(0), \\\"Error: address cannot be zero\\\");\\n        _bollycoin = newAddress;\\n    }\\n\\n    /**\\n     * @dev updates the busd sc address.\\n     *\\n     * Requirements:\\n     * `newAddress` cannot be a zero address.\\n     * `caller` should be current admin.\\n     */\\n    function updateBusd(address newAddress) public virtual onlyAdmin {\\n        require(newAddress != address(0), \\\"Error: address cannot be zero\\\");\\n        _busd = newAddress;\\n    }\\n\\n    /**\\n     * @dev updates the bollycoin token price.\\n     *\\n     * Requirements:\\n     * `newPrice` cannot be zero.\\n     * `caller` should be current admin.\\n     */\\n    function updateBollycoinPrice(uint256 newPrice) public virtual onlyAdmin {\\n        require(newPrice > 0, \\\"Error: price cannot be zero\\\");\\n        bollycoinPrice = newPrice;\\n    }\\n\\n    /**\\n     * @dev updates the settlement wallet address\\n     *\\n     * Requirements:\\n     * `settlementWallet` cannot be a zero address.\\n     * `caller` should be current admin.\\n     */\\n    function updateSettlementWallet(address newAddress)\\n        public\\n        virtual\\n        onlyAdmin\\n    {\\n        require(newAddress != address(0), \\\"Error: not a valid address\\\");\\n        _settlementWallet = newAddress;\\n    }\\n\\n    /**\\n     * @dev withdraw bollycoin from SC to any EOA.\\n     *\\n     * `caller` should be admin account.\\n     * `to` cannot be zero address.\\n     */\\n    function withdrawBolly(address to, uint256 amount)\\n        public\\n        virtual\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        require(to != address(0), \\\"Error: cannot send to zero addresss\\\");\\n        IERC20(_bollycoin).transfer(to, amount);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.4;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev returns the tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev returns the decimal places of a token\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev returns the remaining number of tokens the `spender' can spend\\n     * on behalf of the owner.\\n     *\\n     * This value changes when {approve} or {transferFrom} is executed.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev transfers the `amount` of tokens from caller's account\\n     * to the `recipient` account.\\n     *\\n     * returns boolean value indicating the operation status.\\n     *\\n     * Emits a {Transfer} event\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev transfers the `amount` on behalf of `spender` to the `recipient` account.\\n     *\\n     * returns a boolean indicating the operation status.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * Library Like Contract. Not Required for deployment\\n */\\nabstract contract Context {\\n\\n    function msgSender() internal view virtual returns(address) {\\n        return msg.sender;\\n    }\\n\\n    function msgData() internal view virtual returns(bytes calldata) {\\n        this;\\n        return msg.data;\\n    }\\n\\n    function msgValue() internal view virtual returns(uint256) {\\n        return msg.value;\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_busdAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bollyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_settlementAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bolly\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bollycoinPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uid\",\"type\":\"string\"}],\"name\":\"purchaseWithBUSD\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uid\",\"type\":\"string\"}],\"name\":\"purchaseWithUSDC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uid\",\"type\":\"string\"}],\"name\":\"purchaseWithUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateBolly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateBollycoinPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateBusd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateSettlementWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUsdc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBolly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PrivateSaleV2","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000004fabb145d64652a948d72533023f6e7a623c7c530000000000000000000000006bd361e10c1afed0d95259e7c0115f3a60e4ea99000000000000000000000000098cbfb267e3d74c17ab17f94a1da0e79b913239","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}