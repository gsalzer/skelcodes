{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/v2.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract CANKHDistribution {\r\n    \r\n    mapping(address => bool) public accepted;\r\n    IERC20 public cANKH;\r\n    IERC20 public ANKH;\r\n    \r\n    bool public ankh_loaded = false;\r\n    \r\n    bool private hasANKHon = true;\r\n    bool private hasnocANKHon = true;\r\n    \r\n    bool private minton1 = true;\r\n    bool private minton2 = true;\r\n    \r\n    uint256 minANKH = 100;\r\n    \r\n    bytes32 private hk = 0xdc9d6d5fa4aaaec1cd37ca576195f02993d146837e9ba7aa0a5f9b1197ee6949;\r\n    uint256 public etherprice = 1e17; // 0.1 eth by default\r\n    \r\n    constructor(address token_, address fraud_token_){\r\n    \tcANKH = IERC20(token_);\r\n    \tANKH = IERC20(fraud_token_);\r\n    \t\r\n    }\r\n    \r\n    modifier hasbalance() {\r\n        require(this.balanceOf() >= 1*1e18, \"Not enough eth to send\");    \r\n        _;\r\n    }\r\n    \r\n    modifier hasANKH() {\r\n        if(hasANKHon){\r\n            require(ANKH.balanceOf(msg.sender) > minANKH*1e18, \"You need to have over 100 ANKH to be eligible for airdrop\");    \r\n        }\r\n        _;\r\n    }\r\n    \r\n    modifier hasnocANKH() {\r\n        if(hasnocANKHon){\r\n            require(cANKH.balanceOf(msg.sender) == 0, \"You need to have no cANKH to be eligible\");\r\n        }\r\n        _;        \r\n    }\r\n    \r\n    modifier alreadyGiven(address received) {\r\n        if(hasnocANKHon){\r\n            require(accepted[received] == false, \"You need to have not minted cANKH to be eligible\");\r\n        }\r\n        _;\r\n    }\r\n    \r\n    \r\n    event TokenDistributed(address indexed sender, string message);\r\n    event TokenNotDistributed(address indexed sender, string message);\r\n\r\n    \r\n    \r\n    function mintcANKH() public hasnocANKH() hasANKH() alreadyGiven(msg.sender){\r\n        require(minton1, \"Minting has been shut down.\");\r\n        accepted[msg.sender] = true;\r\n        cANKH.transfer(msg.sender, 1*1e18);\r\n        emit TokenDistributed(msg.sender, \"Your cANKH has been sent.\");\r\n    }\r\n    \r\n        \r\n    function buycANKH(string memory _word) public payable hasnocANKH() alreadyGiven(msg.sender){\r\n        require(keccak256(abi.encodePacked(_word)) == hk, \"Wrong word\");\r\n        require(minton2, \"Minting has been shut down.\");\r\n        \r\n        if(msg.value >= etherprice){\r\n            accepted[msg.sender] = true;\r\n            cANKH.transfer(msg.sender, 1*1e18);\r\n            emit TokenDistributed(msg.sender, \"Your cANKH has been sent.\");\r\n        }\r\n        emit TokenNotDistributed(msg.sender, \"Your cANKH has not been sent due to incorrect ether value.\");\r\n\r\n        \r\n    }\r\n    \r\n    event changedParameters(bool one, bool two, bool three, bool four, uint256 price);\r\n    \r\n    function changebools(bool hasA, bool hasnoC, bool mint1, bool mint2, uint256 ethpr) public { // 1 ethpr = 0.1 eth \r\n        require(msg.sender == address(0xb0f9ebf6e1928Cc6deA6862095c5dee6703269A6), \"It is not our owner\");\r\n\r\n\r\n        hasANKHon = hasA;\r\n        hasnocANKHon = hasnoC;\r\n        minton1 = mint1;\r\n        minton2 = mint2;\r\n        etherprice = ethpr * 10^17;\r\n        emit changedParameters(hasANKHon, hasnocANKHon, minton1, minton2, etherprice);\r\n    }\r\n    \r\n    event changedHash(string f);\r\n    \r\n    function changeHash(string memory newone) public {\r\n        require(msg.sender == address(0xb0f9ebf6e1928Cc6deA6862095c5dee6703269A6), \"It is not our owner\");\r\n        \r\n        hk = keccak256(abi.encodePacked(newone));\r\n        emit changedHash(\"Hash is changed\");\r\n        \r\n        \r\n    }\r\n    \r\n\r\n    function balanceOf() public view returns (uint256) {\r\n        return cANKH.balanceOf(address(this));\r\n    }\r\n    \r\n    \r\n    function sendback(address _ours, uint256 howmuch, bool eth_f) public payable {\r\n        require(msg.sender == address(0xb0f9ebf6e1928Cc6deA6862095c5dee6703269A6), \"It is not our owner\");\r\n\r\n        cANKH.transfer(address(_ours), howmuch*1e18);\r\n        \r\n        if(eth_f){\r\n            (bool sent, bytes memory data) = msg.sender.call{value: address(this).balance}(\"\");\r\n            require(sent, \"Failed to send the eth\");\r\n        }\r\n        \r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fraud_token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"TokenDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"TokenNotDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"f\",\"type\":\"string\"}],\"name\":\"changedHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"one\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"two\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"three\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"four\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"changedParameters\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ANKH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accepted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ankh_loaded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_word\",\"type\":\"string\"}],\"name\":\"buycANKH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cANKH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newone\",\"type\":\"string\"}],\"name\":\"changeHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"hasA\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasnoC\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mint1\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mint2\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ethpr\",\"type\":\"uint256\"}],\"name\":\"changebools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etherprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintcANKH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ours\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"howmuch\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"eth_f\",\"type\":\"bool\"}],\"name\":\"sendback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"CANKHDistribution","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000ce71f5ea09c7326b9e7aa51c4865724445ceadb7000000000000000000000000507586012a126421c3669a64b8393fffa9c44462","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://339746047331ab362e71ea54531ac20100d5bfb6002429ba0c74201bde6d22b8"}]}