{"status":"1","message":"OK","result":[{"SourceCode":"// File: IOwned.sol\r\n\r\npragma solidity ^0.4.25;\r\n\r\ninterface IOwned {\r\n  function owner (  ) external view returns ( address );\r\n  function transferOwnership ( address newOwner ) external;\r\n}\r\n\r\n// File: Owned.sol\r\n\r\npragma solidity ^0.4.25;\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    constructor() \r\n    public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) \r\n        onlyOwner \r\n    external {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: IRealitio.sol\r\n\r\npragma solidity ^0.4.25;\r\n\r\ninterface IRealitio {\r\n  function claimWinnings ( bytes32 question_id, bytes32[] history_hashes, address[] addrs, uint256[] bonds, bytes32[] answers ) external;\r\n  function getFinalAnswerIfMatches ( bytes32 question_id, bytes32 content_hash, address arbitrator, uint32 min_timeout, uint256 min_bond ) external view returns ( bytes32 );\r\n  function getBounty ( bytes32 question_id ) external view returns ( uint256 );\r\n  function getArbitrator ( bytes32 question_id ) external view returns ( address );\r\n  function getBond ( bytes32 question_id ) external view returns ( uint256 );\r\n  function claimMultipleAndWithdrawBalance ( bytes32[] question_ids, uint256[] lengths, bytes32[] hist_hashes, address[] addrs, uint256[] bonds, bytes32[] answers ) external;\r\n  function withdraw (  ) external;\r\n  function submitAnswerReveal ( bytes32 question_id, bytes32 answer, uint256 nonce, uint256 bond ) external;\r\n  function setQuestionFee ( uint256 fee ) external;\r\n  function template_hashes ( uint256 ) external view returns ( bytes32 );\r\n  function getContentHash ( bytes32 question_id ) external view returns ( bytes32 );\r\n  function question_claims ( bytes32 ) external view returns ( address payee, uint256 last_bond, uint256 queued_funds );\r\n  function fundAnswerBounty ( bytes32 question_id ) external payable;\r\n  function arbitrator_question_fees ( address ) external view returns ( uint256 );\r\n  function balanceOf ( address ) external view returns ( uint256 );\r\n  function askQuestion ( uint256 template_id, string question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce ) external payable returns ( bytes32 );\r\n  function submitAnswer ( bytes32 question_id, bytes32 answer, uint256 max_previous ) external payable;\r\n  function submitAnswerFor ( bytes32 question_id, bytes32 answer, uint256 max_previous, address answerer ) external payable; // Only available from v2.1\r\n  function isFinalized ( bytes32 question_id ) external view returns ( bool );\r\n  function getHistoryHash ( bytes32 question_id ) external view returns ( bytes32 );\r\n  function commitments ( bytes32 ) external view returns ( uint32 reveal_ts, bool is_revealed, bytes32 revealed_answer );\r\n  function createTemplate ( string content ) external returns ( uint256 );\r\n  function getBestAnswer ( bytes32 question_id ) external view returns ( bytes32 );\r\n  function isPendingArbitration ( bytes32 question_id ) external view returns ( bool );\r\n  function questions ( bytes32 ) external view returns ( bytes32 content_hash, address arbitrator, uint32 opening_ts, uint32 timeout, uint32 finalize_ts, bool is_pending_arbitration, uint256 bounty, bytes32 best_answer, bytes32 history_hash, uint256 bond );\r\n  function getOpeningTS ( bytes32 question_id ) external view returns ( uint32 );\r\n  function getTimeout ( bytes32 question_id ) external view returns ( uint32 );\r\n  function createTemplateAndAskQuestion ( string content, string question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce ) external payable returns ( bytes32 );\r\n  function getFinalAnswer ( bytes32 question_id ) external view returns ( bytes32 );\r\n  function getFinalizeTS ( bytes32 question_id ) external view returns ( uint32 );\r\n  function templates ( uint256 ) external view returns ( uint256 );\r\n  function resultFor ( bytes32 question_id ) external view returns ( bytes32 );\r\n  function submitAnswerCommitment ( bytes32 question_id, bytes32 answer_hash, uint256 max_previous, address _answerer ) external payable;\r\n  function notifyOfArbitrationRequest ( bytes32 question_id, address requester, uint256 max_previous ) external;\r\n  function submitAnswerByArbitrator ( bytes32 question_id, bytes32 answer, address answerer ) external;\r\n  function assignWinnerAndSubmitAnswerByArbitrator( bytes32 question_id, bytes32 answer, address payee_if_wrong, bytes32 last_history_hash, bytes32 last_answer_or_commitment_id, address last_answerer ) external;\r\n  function cancelArbitration(bytes32 question_id) external; // Only available from v2.1\r\n}\r\n\r\n// File: IERC20.sol\r\n\r\npragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: IArbitrator.sol\r\n\r\npragma solidity ^0.4.25;\r\n\r\n\r\n\r\n\r\ninterface IArbitrator {\r\n  function metadata (  ) external view returns ( string );\r\n  function owner (  ) external view returns ( address );\r\n  function arbitration_bounties ( bytes32 ) external view returns ( uint256 );\r\n  function realitio (  ) external view returns ( IRealitio );\r\n  function realitycheck (  ) external view returns ( IRealitio );\r\n  function setRealitio ( address addr ) external;\r\n  function setDisputeFee ( uint256 fee ) external;\r\n  function setCustomDisputeFee ( bytes32 question_id, uint256 fee ) external;\r\n  function getDisputeFee ( bytes32 question_id ) external view returns ( uint256 );\r\n  function setQuestionFee ( uint256 fee ) external;\r\n  function submitAnswerByArbitrator ( bytes32 question_id, bytes32 answer, address answerer ) external;\r\n  function requestArbitration ( bytes32 question_id, uint256 max_previous ) external payable returns ( bool );\r\n  function withdraw ( address addr ) external;\r\n  function withdrawERC20 ( IERC20 _token, address addr ) external;\r\n  function callWithdraw (  ) external;\r\n  function setMetaData ( string _metadata ) external;\r\n}\r\n\r\n// File: Arbitrator.sol\r\n\r\npragma solidity ^0.4.25;\r\n\r\n\r\n\r\n\r\n\r\ncontract Arbitrator is Owned {\r\n\r\n    IRealitio public realitio;\r\n\r\n    mapping(bytes32 => uint256) public arbitration_bounties;\r\n\r\n    uint256 dispute_fee;\r\n    mapping(bytes32 => uint256) custom_dispute_fees;\r\n\r\n    string public metadata;\r\n\r\n    // Guardian address\r\n    address public guardian;\r\n\r\n    event LogRequestArbitration(\r\n        bytes32 indexed question_id,\r\n        uint256 fee_paid,\r\n        address requester,\r\n        uint256 remaining\r\n    );\r\n\r\n    event LogSetRealitio(\r\n        address realitio\r\n    );\r\n\r\n    event LogSetQuestionFee(\r\n        uint256 fee\r\n    );\r\n\r\n\r\n    event LogSetDisputeFee(\r\n        uint256 fee\r\n    );\r\n\r\n    event LogSetCustomDisputeFee(\r\n        bytes32 indexed question_id,\r\n        uint256 fee\r\n    );\r\n\r\n    /// @notice Constructor. Sets the deploying address as owner.\r\n    constructor() \r\n    public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice Modifier checks if msg.sender is guardian\r\n    modifier onlyGuardian {\r\n        require(msg.sender == guardian);\r\n        _;\r\n    }\r\n\r\n    /// @notice Returns the Realitio contract address - deprecated in favour of realitio()\r\n    function realitycheck() \r\n    external view returns(IRealitio) {\r\n        return realitio;\r\n    }\r\n\r\n    /// @notice Set the Reality Check contract address\r\n    /// @param addr The address of the Reality Check contract\r\n    function setRealitio(address addr) \r\n        onlyOwner \r\n    public {\r\n        realitio = IRealitio(addr);\r\n        emit LogSetRealitio(addr);\r\n    }\r\n\r\n    /// @notice Set the default fee\r\n    /// @param fee The default fee amount\r\n    function setDisputeFee(uint256 fee) \r\n        onlyOwner \r\n    public {\r\n        dispute_fee = fee;\r\n        emit LogSetDisputeFee(fee);\r\n    }\r\n\r\n    /// @notice Set a custom fee for this particular question\r\n    /// @param question_id The question in question\r\n    /// @param fee The fee amount\r\n    function setCustomDisputeFee(bytes32 question_id, uint256 fee) \r\n        onlyOwner \r\n    public {\r\n        custom_dispute_fees[question_id] = fee;\r\n        emit LogSetCustomDisputeFee(question_id, fee);\r\n    }\r\n\r\n    /// @notice Return the dispute fee for the specified question. 0 indicates that we won't arbitrate it.\r\n    /// @param question_id The question in question\r\n    /// @dev Uses a general default, but can be over-ridden on a question-by-question basis.\r\n    function getDisputeFee(bytes32 question_id) \r\n    public view returns (uint256) {\r\n        return (custom_dispute_fees[question_id] > 0) ? custom_dispute_fees[question_id] : dispute_fee;\r\n    }\r\n\r\n    /// @notice Set a fee for asking a question with us as the arbitrator\r\n    /// @param fee The fee amount\r\n    /// @dev Default is no fee. Unlike the dispute fee, 0 is an acceptable setting.\r\n    /// You could set an impossibly high fee if you want to prevent us being used as arbitrator unless we submit the question.\r\n    /// (Submitting the question ourselves is not implemented here.)\r\n    /// This fee can be used as a revenue source, an anti-spam measure, or both.\r\n    function setQuestionFee(uint256 fee) \r\n        onlyOwner \r\n    public {\r\n        realitio.setQuestionFee(fee);\r\n        emit LogSetQuestionFee(fee);\r\n    }\r\n\r\n    /// @notice Submit the arbitrator's answer to a question.\r\n    /// @param question_id The question in question\r\n    /// @param answer The answer\r\n    /// @param answerer The answerer. If arbitration changed the answer, it should be the payer. If not, the old answerer.\r\n    function submitAnswerByArbitrator(bytes32 question_id, bytes32 answer, address answerer) \r\n        onlyOwner \r\n    public {\r\n        delete arbitration_bounties[question_id];\r\n        realitio.submitAnswerByArbitrator(question_id, answer, answerer);\r\n    }\r\n\r\n    /// @notice Submit the arbitrator's answer to a question, assigning the winner automatically.\r\n    /// @param question_id The question in question\r\n    /// @param answer The answer\r\n    /// @param payee_if_wrong The account to by credited as winner if the last answer given is wrong, usually the account that paid the arbitrator\r\n    /// @param last_history_hash The history hash before the final one\r\n    /// @param last_answer_or_commitment_id The last answer given, or the commitment ID if it was a commitment.\r\n    /// @param last_answerer The address that supplied the last answer\r\n    function assignWinnerAndSubmitAnswerByArbitrator(bytes32 question_id, bytes32 answer, address payee_if_wrong, bytes32 last_history_hash, bytes32 last_answer_or_commitment_id, address last_answerer) \r\n        onlyOwner \r\n    public {\r\n        delete arbitration_bounties[question_id];\r\n        realitio.assignWinnerAndSubmitAnswerByArbitrator(question_id, answer, payee_if_wrong, last_history_hash, last_answer_or_commitment_id, last_answerer);\r\n    }\r\n\r\n    /// @notice Cancel a previous arbitration request\r\n    /// @dev This is intended for situations where the arbitration is happening non-atomically and the fee or something change.\r\n    /// @param question_id The question in question\r\n    function cancelArbitration(bytes32 question_id) \r\n        onlyOwner \r\n    public {\r\n        realitio.cancelArbitration(question_id);\r\n    }\r\n\r\n    /// @notice Request arbitration, freezing the question until we send submitAnswerByArbitrator\r\n    /// @dev The bounty can be paid only in part, in which case the last person to pay will be considered the payer\r\n    /// Will trigger an error if the notification fails, eg because the question has already been finalized\r\n    /// @param question_id The question in question\r\n    /// @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction.\r\n    function requestArbitration(bytes32 question_id, uint256 max_previous) \r\n    external payable returns (bool) {\r\n\r\n        uint256 arbitration_fee = getDisputeFee(question_id);\r\n        require(arbitration_fee > 0, \"The arbitrator must have set a non-zero fee for the question\");\r\n\r\n        arbitration_bounties[question_id] += msg.value;\r\n        uint256 paid = arbitration_bounties[question_id];\r\n\r\n        if (paid >= arbitration_fee) {\r\n            realitio.notifyOfArbitrationRequest(question_id, msg.sender, max_previous);\r\n            emit LogRequestArbitration(question_id, msg.value, msg.sender, 0);\r\n            return true;\r\n        } else {\r\n            require(!realitio.isFinalized(question_id), \"The question must not have been finalized\");\r\n            emit LogRequestArbitration(question_id, msg.value, msg.sender, arbitration_fee - paid);\r\n            return false;\r\n        }\r\n\r\n    }\r\n    \r\n    /// @notice Request arbitration for free by Guardian, freezing the question until we send submitAnswerByArbitrator\r\n    /// @dev Will trigger an error if the notification fails, eg because the question has already been finalized\r\n    /// @param question_id The question in question\r\n    /// @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction.\r\n    function requestArbitrationByGuardian(bytes32 question_id, uint256 max_previous) \r\n        onlyGuardian \r\n    external returns (bool) {\r\n        realitio.notifyOfArbitrationRequest(question_id, msg.sender, max_previous);\r\n        emit LogRequestArbitration(question_id, 0, msg.sender, 0);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Withdraw any accumulated ETH fees to the specified address\r\n    /// @param addr The address to which the balance should be sent\r\n    function withdraw(address addr) \r\n        onlyOwner \r\n    public {\r\n        addr.transfer(address(this).balance); \r\n    }\r\n\r\n    /// @notice Withdraw any accumulated token fees to the specified address\r\n    /// @param addr The address to which the balance should be sent\r\n    /// @dev Only needed if the Realitio contract used is using an ERC20 token\r\n    /// @dev Also only normally useful if a per-question fee is set, otherwise we only have ETH.\r\n    function withdrawERC20(IERC20 _token, address addr) \r\n        onlyOwner \r\n    public {\r\n        uint256 bal = _token.balanceOf(address(this));\r\n        IERC20(_token).transfer(addr, bal); \r\n    }\r\n\r\n    function() \r\n    external payable {\r\n    }\r\n\r\n    /// @notice Withdraw any accumulated question fees from the specified address into this contract\r\n    /// @dev Funds can then be liberated from this contract with our withdraw() function\r\n    /// @dev This works in the same way whether the realitio contract is using ETH or an ERC20 token\r\n    function callWithdraw() \r\n        onlyOwner \r\n    public {\r\n        realitio.withdraw(); \r\n    }\r\n\r\n    /// @notice Set a metadata string, expected to be JSON, containing things like arbitrator TOS address\r\n    function setMetaData(string _metadata) \r\n        onlyOwner\r\n    external {\r\n        metadata = _metadata;\r\n    }\r\n\r\n    /// @notice Set a guardian address\r\n    function setGuardian(address newGuardian) \r\n        onlyOwner\r\n    external {\r\n        guardian = newGuardian;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"realitycheck\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setDisputeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"metadata\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"question_id\",\"type\":\"bytes32\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setCustomDisputeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setQuestionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setRealitio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"arbitration_bounties\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"question_id\",\"type\":\"bytes32\"}],\"name\":\"getDisputeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"question_id\",\"type\":\"bytes32\"},{\"name\":\"max_previous\",\"type\":\"uint256\"}],\"name\":\"requestArbitration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"realitio\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"question_id\",\"type\":\"bytes32\"},{\"name\":\"answer\",\"type\":\"bytes32\"},{\"name\":\"payee_if_wrong\",\"type\":\"address\"},{\"name\":\"last_history_hash\",\"type\":\"bytes32\"},{\"name\":\"last_answer_or_commitment_id\",\"type\":\"bytes32\"},{\"name\":\"last_answerer\",\"type\":\"address\"}],\"name\":\"assignWinnerAndSubmitAnswerByArbitrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"setMetaData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"callWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"question_id\",\"type\":\"bytes32\"},{\"name\":\"max_previous\",\"type\":\"uint256\"}],\"name\":\"requestArbitrationByGuardian\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"question_id\",\"type\":\"bytes32\"}],\"name\":\"cancelArbitration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"question_id\",\"type\":\"bytes32\"},{\"name\":\"answer\",\"type\":\"bytes32\"},{\"name\":\"answerer\",\"type\":\"address\"}],\"name\":\"submitAnswerByArbitrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"question_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"fee_paid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"LogRequestArbitration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"realitio\",\"type\":\"address\"}],\"name\":\"LogSetRealitio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogSetQuestionFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogSetDisputeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"question_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogSetCustomDisputeFee\",\"type\":\"event\"}]","ContractName":"Arbitrator","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d297375f47ae72488b02f3e394d6dee36d6b65933ad64ba51a354d909ebcc3b0"}]}