{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IFactory {\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IRouter {\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n    \\n    function removeLiquidityWithPermit(\\n      address tokenA,\\n      address tokenB,\\n      uint liquidity,\\n      uint amountAMin,\\n      uint amountBMin,\\n      address to,\\n      uint deadline,\\n      bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    \\n    function removeLiquidityETHWithPermit(\\n      address token,\\n      uint liquidity,\\n      uint amountTokenMin,\\n      uint amountETHMin,\\n      address to,\\n      uint deadline,\\n      bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n    \\n    function getAmountsOut(\\n        uint256 amountIn, \\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IWrapper {\\n\\n    struct WrapParams {\\n        address sourceToken;\\n        address [] destinationTokens;\\n        address [] path1;\\n        address [] path2;\\n        uint256 amount;\\n        uint256 [] userSlippageToleranceAmounts;\\n        uint256 deadline;\\n    }\\n\\n    struct UnwrapParams {\\n        address lpTokenPairAddress;\\n        address destinationToken;\\n        address [] path1;\\n        address [] path2;\\n        uint256 amount;\\n        uint256 [] userSlippageToleranceAmounts;\\n        uint256 [] minUnwrapAmounts;\\n        uint256 deadline;\\n    }\\n\\n    struct RemixWrapParams {\\n        address [] sourceTokens;\\n        address [] destinationTokens;\\n        address [] path1;\\n        address [] path2;\\n        uint256 amount1;\\n        uint256 amount2;\\n        uint256 [] userSlippageToleranceAmounts;\\n        uint256 deadline;\\n    }\\n\\n    struct RemixParams {\\n        address lpTokenPairAddress;\\n        address [] destinationTokens;\\n        address [] wrapPath1;\\n        address [] wrapPath2;\\n        uint256 amount;\\n        uint256 [] remixWrapSlippageToleranceAmounts;\\n        uint256 [] minUnwrapAmounts;\\n        uint256 deadline;\\n        bool crossDexRemix;\\n    }\\n\\n    function wrap(WrapParams memory params) \\n        external \\n        payable \\n        returns (address, uint256);\\n\\n    function unwrap(UnwrapParams memory params) \\n        external \\n        payable \\n        returns (uint256);\\n\\n    function remix(RemixParams memory params) \\n        external \\n        payable \\n        returns (address, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/token/ILPERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface ILPERC20 {\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/token/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/wrapper/WrapAndUnWrap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/token/IWETH.sol\\\";\\nimport \\\"../interfaces/token/ILPERC20.sol\\\";\\nimport \\\"../interfaces/IWrapper.sol\\\";\\nimport \\\"../interfaces/IRouter.sol\\\";\\nimport \\\"../interfaces/IFactory.sol\\\";\\n\\n/// @title Plexus LP Wrapper Contract\\n/// @author Team Plexus\\ncontract WrapAndUnWrap is IWrapper {\\n    using SafeERC20 for IERC20;\\n\\n    // Contract state variables\\n    bool public changeRecipientIsOwner;\\n    address public WETH_TOKEN_ADDRESS; // Contract address for WETH tokens\\n    address public uniAddress;\\n    address public sushiAddress;\\n    address public uniFactoryAddress;\\n    address public sushiFactoryAddress;\\n    address public owner;\\n    uint256 public fee;\\n    uint256 public maxfee;\\n    IRouter public uniswapExchange;\\n    IFactory public factory;\\n\\n    // events\\n    event WrapV2(address lpTokenPairAddress, uint256 amount);\\n    event UnWrapV2(uint256 amount);\\n    event LpTokenRemixWrap(address lpTokenPairAddress, uint256 amount);\\n\\n    constructor(\\n        address _weth,\\n        address _uniAddress,\\n        address _sushiAddress,\\n        address _uniFactoryAddress,\\n        address _sushiFactoryAddress\\n\\n    )\\n        payable\\n    {\\n        // init the addresses\\n        WETH_TOKEN_ADDRESS = _weth;\\n        uniAddress = _uniAddress;\\n        sushiAddress = _sushiAddress;\\n        uniFactoryAddress = _uniFactoryAddress;\\n        sushiFactoryAddress = _sushiFactoryAddress;\\n        \\n        // init the router and factories\\n        uniswapExchange = IRouter(uniAddress);\\n        factory = IFactory(uniFactoryAddress);\\n\\n        // init the fees params\\n        fee = 0;\\n        maxfee = 0;\\n        changeRecipientIsOwner = false;\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner {\\n      require(msg.sender == owner, \\\"Not contract owner!\\\");\\n      _;\\n    }\\n\\n    /**\\n     * @notice Executed on a call to the contract if none of the other\\n     * functions match the given function signature, or if no data was\\n     * supplied at all and there is no receive Ether function\\n     */\\n    fallback() external payable {\\n    }\\n\\n    /**\\n     * @notice Function executed on plain ether transfers and on a call to the\\n     * contract with empty calldata\\n     */\\n    receive() external payable {\\n    }\\n\\n    /**\\n     * @notice Allow owner to collect a small fee from trade imbalances on\\n     * LP conversions\\n     * @param changeRecipientIsOwnerBool If set to true, allows owner to collect\\n     * fees from pair imbalances\\n     */\\n    function updateChangeRecipientBool(\\n        bool changeRecipientIsOwnerBool\\n    )\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        changeRecipientIsOwner = changeRecipientIsOwnerBool;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Update the Uniswap exchange contract address\\n     * @param newAddress Uniswap exchange contract address to be updated\\n     */\\n    function updateUniswapExchange(address newAddress) external onlyOwner returns (bool) {\\n        uniswapExchange = IRouter(newAddress);\\n        uniAddress = newAddress;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Update the Uniswap factory contract address\\n     * @param newAddress Uniswap factory contract address to be updated\\n     */\\n    function updateUniswapFactory(address newAddress) external onlyOwner returns (bool) {\\n        factory = IFactory(newAddress);\\n        uniFactoryAddress = newAddress;\\n        return true;\\n    }\\n\\n    /**\\n    * @notice Allow admins to withdraw accidentally deposited tokens\\n    * @param token Address to the token to be withdrawn\\n    * @param amount Amount of specified token to be withdrawn\\n    * @param destination Address where the withdrawn tokens should be\\n    * transferred\\n    */\\n    function adminEmergencyWithdrawTokens(\\n        address token,\\n        uint256 amount,\\n        address payable destination\\n    )\\n        public\\n        onlyOwner\\n        returns (bool)\\n    {\\n        if (address(token) == address(0x0)) {\\n            destination.transfer(amount);\\n        } else {\\n            IERC20 token_ = IERC20(token);\\n            token_.safeTransfer(destination, amount);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Update the protocol fee rate\\n     * @param newFee Updated fee rate to be charged\\n     */\\n    function setFee(uint256 newFee) public onlyOwner returns (bool) {\\n        require(\\n            newFee <= maxfee,\\n            \\\"Admin cannot set the fee higher than the current maxfee\\\"\\n        );\\n        fee = newFee;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Set the max protocol fee rate\\n     * @param newMax Updated maximum fee rate value\\n     */\\n    function setMaxFee(uint256 newMax) public onlyOwner returns (bool) {\\n        require(maxfee == 0, \\\"Admin can only set max fee once and it is perm\\\");\\n        maxfee = newMax;\\n        return true;\\n    }\\n\\n    function swap(\\n        address sourceToken,\\n        address destinationToken,\\n        address[] memory path,\\n        uint256 amount,\\n        uint256 userSlippageToleranceAmount,\\n        uint256 deadline\\n    ) private returns (uint256) {\\n        if (sourceToken != address(0x0)) {\\n            IERC20(sourceToken).safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n\\n        conductUniswap(sourceToken, destinationToken, path, amount, userSlippageToleranceAmount, deadline);\\n        uint256 thisBalance = IERC20(destinationToken).balanceOf(address(this));\\n        IERC20(destinationToken).safeTransfer(msg.sender, thisBalance);\\n        return thisBalance;\\n    }\\n\\n    function chargeFees(address token1, address token2) private {\\n\\n        address thisPairAddress = factory.getPair(token1, token2);\\n\\n        // if we get a zero address for the pair address, then we we assume,\\n        // we're using the wrong factory and so we switch to the sushi one\\n        if (thisPairAddress == address(0)) {\\n            IFactory fct = IFactory(sushiFactoryAddress);\\n            thisPairAddress = fct.getPair(token1, token2);\\n        }\\n        IERC20 lpToken = IERC20(thisPairAddress);\\n        uint256 thisBalance = lpToken.balanceOf(address(this));\\n\\n        IERC20 dToken1 = IERC20(token1);\\n        IERC20 dToken2 = IERC20(token2);\\n\\n        if (fee > 0) {\\n            uint256 totalFee = (thisBalance * fee) / 10000;\\n            if (totalFee > 0) {\\n                lpToken.safeTransfer(owner, totalFee);\\n            }\\n            thisBalance = lpToken.balanceOf(address(this));\\n            lpToken.safeTransfer(msg.sender, thisBalance);\\n        } else {\\n            lpToken.safeTransfer(msg.sender, thisBalance);\\n        }\\n\\n        // Transfer any change to changeRecipient\\n        // (from a pair imbalance. Should never be more than a few basis points)\\n        address changeRecipient = msg.sender;\\n        if (changeRecipientIsOwner == true) {\\n            changeRecipient = owner;\\n        }\\n        if (dToken1.balanceOf(address(this)) > 0) {\\n            dToken1.safeTransfer(changeRecipient, dToken1.balanceOf(address(this)));\\n        }\\n        if (dToken2.balanceOf(address(this)) > 0) {\\n            dToken2.safeTransfer(changeRecipient, dToken2.balanceOf(address(this)));\\n        }\\n\\n    }\\n\\n    function createRemixWrap(RemixWrapParams memory params, bool crossDexRemix) private returns (address, uint256) {\\n\\n        IRouter router = uniswapExchange;\\n        IFactory fct = factory;\\n \\n        // for a cross-dex remix we init both the router and the factory to the sushi router and factory addresses respectively\\n        if(crossDexRemix) {\\n            router = IRouter(sushiAddress);\\n            fct = IFactory(sushiFactoryAddress);\\n        }\\n\\n        if (params.sourceTokens[0] != params.destinationTokens[0]) {\\n            conductSwapT4TRemix(\\n                router,\\n                params.path1,\\n                params.amount1,\\n                params.userSlippageToleranceAmounts[0],\\n                params.deadline\\n            );\\n        }\\n        if (params.sourceTokens[1] != params.destinationTokens[1]) {\\n            conductSwapT4TRemix(\\n                router,\\n                params.path2,\\n                params.amount2,\\n                params.userSlippageToleranceAmounts[1],\\n                params.deadline\\n            );\\n        }\\n\\n        // then finally add liquidity to that pool in the respective dex\\n        IERC20 dToken1 = IERC20(params.destinationTokens[0]);\\n        IERC20 dToken2 = IERC20(params.destinationTokens[1]);\\n        uint256 dTokenBalance1 = dToken1.balanceOf(address(this));\\n        uint256 dTokenBalance2 = dToken2.balanceOf(address(this));\\n\\n        if (crossDexRemix) {\\n\\n            if (dToken1.allowance(address(this), sushiAddress) < dTokenBalance1 * 2) {\\n                dToken1.safeIncreaseAllowance(sushiAddress, dTokenBalance1 * 3);\\n            }\\n\\n            if (dToken2.allowance(address(this), sushiAddress) < dTokenBalance2 * 2) {\\n                dToken2.safeIncreaseAllowance(sushiAddress, dTokenBalance2 * 3);\\n            }\\n\\n        } else {\\n            if (dToken1.allowance(address(this), uniAddress) < dTokenBalance1 * 2) {\\n                dToken1.safeIncreaseAllowance(uniAddress, dTokenBalance1 * 3);\\n            }\\n\\n            if (dToken2.allowance(address(this), uniAddress) < dTokenBalance2 * 2) {\\n                dToken2.safeIncreaseAllowance(uniAddress, dTokenBalance2 * 3);\\n            }\\n\\n        }\\n\\n        // we add the remixed liquidity here\\n        router.addLiquidity(\\n            params.destinationTokens[0],\\n            params.destinationTokens[1],\\n            dTokenBalance1,\\n            dTokenBalance2,\\n            1,\\n            1,\\n            address(this),\\n            1000000000000000000000000000\\n        );\\n\\n        address thisPairAddress = fct.getPair(params.destinationTokens[0], params.destinationTokens[1]);\\n        IERC20 lpToken = IERC20(thisPairAddress);\\n        uint256 thisBalance = lpToken.balanceOf(address(this));\\n\\n        // charge the necesssary fees if available and also transfer change \\n        chargeFees(params.destinationTokens[0], params.destinationTokens[1]);\\n\\n        return (thisPairAddress, thisBalance);\\n    }\\n\\n    function createWrap(WrapParams memory params) private returns (address, uint256) {\\n        uint256 amount = params.amount;\\n        if (params.sourceToken == address(0x0)) {\\n            IWETH(WETH_TOKEN_ADDRESS).deposit{value: msg.value}();\\n            amount = msg.value;\\n        } else {\\n            IERC20(params.sourceToken).safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n\\n        if (params.destinationTokens[0] == address(0x0)) {\\n            params.destinationTokens[0] = WETH_TOKEN_ADDRESS;\\n        }\\n        if (params.destinationTokens[1] == address(0x0)) {\\n            params.destinationTokens[1] = WETH_TOKEN_ADDRESS;\\n        }\\n\\n        if (params.sourceToken != params.destinationTokens[0]) {\\n            conductUniswap(\\n                params.sourceToken,\\n                params.destinationTokens[0],\\n                params.path1,\\n                (amount / 2),\\n                params.userSlippageToleranceAmounts[0],\\n                params.deadline\\n            );\\n        }\\n        if (params.sourceToken != params.destinationTokens[1]) {\\n            conductUniswap(\\n                params.sourceToken,\\n                params.destinationTokens[1],\\n                params.path2,\\n                (amount / 2),\\n                params.userSlippageToleranceAmounts[1],\\n                params.deadline\\n            );\\n        }\\n\\n        IERC20 dToken1 = IERC20(params.destinationTokens[0]);\\n        IERC20 dToken2 = IERC20(params.destinationTokens[1]);\\n        uint256 dTokenBalance1 = dToken1.balanceOf(address(this));\\n        uint256 dTokenBalance2 = dToken2.balanceOf(address(this));\\n\\n        if (dToken1.allowance(address(this), uniAddress) < dTokenBalance1 * 2) {\\n            dToken1.safeIncreaseAllowance(uniAddress, dTokenBalance1 * 3);\\n        }\\n\\n        if (dToken2.allowance(address(this), uniAddress) < dTokenBalance2 * 2) {\\n            dToken2.safeIncreaseAllowance(uniAddress, dTokenBalance2 * 3);\\n        }\\n\\n        uniswapExchange.addLiquidity(\\n            params.destinationTokens[0],\\n            params.destinationTokens[1],\\n            dTokenBalance1,\\n            dTokenBalance2,\\n            1,\\n            1,\\n            address(this),\\n            1000000000000000000000000000\\n        );\\n\\n        address thisPairAddress = factory.getPair(params.destinationTokens[0], params.destinationTokens[1]);\\n        IERC20 lpToken = IERC20(thisPairAddress);\\n        uint256 thisBalance = lpToken.balanceOf(address(this));\\n\\n        // charge the necesssary fees if available and also transfer change \\n        chargeFees(params.destinationTokens[0], params.destinationTokens[1]);\\n\\n        return (thisPairAddress, thisBalance);\\n    }\\n\\n    /**\\n     * @notice Wrap a source token based on the specified\\n     * @param params params of struct WrapParams\\n     * // contains following properties\\n       // sourceToken Address to the source token contract\\n       // destinationTokens Array describing the token(s) which the source\\n       // paths Paths for uniswap\\n       // amount Amount of source token to be wrapped\\n       // userSlippageTolerance Maximum permissible user slippage tolerance\\n     * @return Address to the token contract for the destination token and the\\n     * amount of wrapped tokens\\n     */\\n    function wrap(\\n        WrapParams memory params\\n    )\\n        override\\n        external\\n        payable\\n        returns (address, uint256)\\n    {\\n        if (params.destinationTokens.length == 1) {\\n            uint256 swapAmount = swap(params.sourceToken, params.destinationTokens[0], params.path1, params.amount, params.userSlippageToleranceAmounts[0], params.deadline);\\n            return (params.destinationTokens[0], swapAmount);\\n        } else {\\n            (address lpTokenPairAddress, uint256 lpTokenAmount) = createWrap(params);\\n            emit WrapV2(lpTokenPairAddress, lpTokenAmount);\\n            return (lpTokenPairAddress, lpTokenAmount);\\n        }\\n    }\\n    \\n    // the function that does the actual liquidity removal\\n    function removePoolLiquidity(\\n        address lpTokenAddress,\\n        uint256 amount,\\n        uint256 minUnwrapAmount1,\\n        uint256 minUnwrapAmount2,\\n        uint256 deadline\\n    )\\n    private returns (uint256, uint256){\\n\\n        ILPERC20 lpTokenInfo = ILPERC20(lpTokenAddress);\\n        address token0 = lpTokenInfo.token0();\\n        address token1 = lpTokenInfo.token1();\\n\\n        uniswapExchange.removeLiquidity(\\n            token0,\\n            token1,\\n            amount,\\n            minUnwrapAmount1,\\n            minUnwrapAmount2,\\n            address(this),\\n            deadline\\n        );\\n\\n        uint256 pTokenBalance = IERC20(token0).balanceOf(address(this));\\n        uint256 pTokenBalance2 = IERC20(token1).balanceOf(address(this));\\n\\n        return (pTokenBalance, pTokenBalance2);\\n\\n    }\\n\\n    // Function that does the actual unwrapping and converts the 2 pool tokens to the output token\\n    function removeWrap(UnwrapParams memory params) private returns (uint256){\\n        address originalDestinationToken = params.destinationToken;\\n\\n        IERC20 sToken = IERC20(params.lpTokenPairAddress);\\n        if (params.destinationToken == address(0x0)) {\\n            params.destinationToken = WETH_TOKEN_ADDRESS;\\n        }\\n\\n        if (params.lpTokenPairAddress != address(0x0)) {\\n            sToken.safeTransferFrom(msg.sender, address(this), params.amount);\\n        }\\n\\n        ILPERC20 thisLpInfo = ILPERC20(params.lpTokenPairAddress);\\n        address token0 = thisLpInfo.token0();\\n        address token1 = thisLpInfo.token1();\\n\\n        if (sToken.allowance(address(this), uniAddress) < params.amount * 2) {\\n            sToken.safeIncreaseAllowance(uniAddress, params.amount * 3);\\n        }\\n\\n        // unwrap the LP token to get the constituent tokens\\n        ( uint256  pTokenBalance,  uint256 pTokenBalance2 )= removePoolLiquidity(\\n            params.lpTokenPairAddress,\\n            params.amount,\\n            params.minUnwrapAmounts[0],\\n            params.minUnwrapAmounts[1],\\n            params.deadline\\n        );\\n\\n        if (token0 != params.destinationToken) {\\n            conductUniswap(\\n                token0,\\n                params.destinationToken,\\n                params.path1,\\n                pTokenBalance,\\n                params.userSlippageToleranceAmounts[0],\\n                params.deadline\\n            );\\n        }\\n\\n        if (token1 != params.destinationToken) {\\n            conductUniswap(\\n                token1,\\n                params.destinationToken,\\n                params.path2,\\n                pTokenBalance2,\\n                params.userSlippageToleranceAmounts[1],\\n                params.deadline\\n            );\\n        }\\n\\n        IERC20 dToken = IERC20(params.destinationToken);\\n        uint256 destinationTokenBalance = dToken.balanceOf(address(this));\\n\\n        if (originalDestinationToken == address(0x0)) {\\n            IWETH(WETH_TOKEN_ADDRESS).withdraw(destinationTokenBalance);\\n            if (fee > 0) {\\n                uint256 totalFee = (address(this).balance * fee) / 10000;\\n                if (totalFee > 0) {\\n                    payable(owner).transfer(totalFee);\\n                }\\n                    payable(msg.sender).transfer(address(this).balance);\\n            } else {\\n                payable(msg.sender).transfer(address(this).balance);\\n            }\\n        } else {\\n            if (fee > 0) {\\n                uint256 totalFee = (destinationTokenBalance * fee) / 10000;\\n                if (totalFee > 0) {\\n                    dToken.safeTransfer(owner, totalFee);\\n                }\\n                destinationTokenBalance = dToken.balanceOf(address(this));\\n                dToken.safeTransfer(msg.sender, destinationTokenBalance);\\n            } else {\\n                dToken.safeTransfer(msg.sender, destinationTokenBalance);\\n            }\\n\\n        }\\n\\n        emit UnWrapV2(destinationTokenBalance);\\n\\n    \\n        return destinationTokenBalance;\\n    }\\n\\n    /**\\n     * @notice Unwrap a source token based to the specified destination token\\n     * @param params params of struct UnwrapParams\\n        it contains following properties\\n        // param lpTokenPairAddress address for lp token\\n        // destinationToken Address of the destination token contract\\n        // paths Paths for uniswap\\n        // amount Amount of source token to be unwrapped\\n        // userSlippageToleranceAmounts Maximum permissible user slippage tolerance\\n     * @return Amount of the destination token returned from unwrapping the\\n     * source token\\n     */\\n    function unwrap(\\n        UnwrapParams memory params\\n    )\\n        override\\n        public\\n        payable\\n        returns (uint256)\\n    {\\n        uint256 destAmount = removeWrap(params);\\n        return destAmount;\\n    }\\n\\n    /**\\n     * @notice Unwrap a source token and wrap it into a different destination token\\n     * @param params Remix params having following properties\\n        // lpTokenPairAddress Address for the LP pair to remix\\n        // unwrapOutputToken Address for the initial output token of remix\\n        // destinationTokens Address to the destination tokens to be remixed to\\n        // unwrapPaths Paths best uniswap trade paths for doing the unwrapping\\n        // wrapPaths Paths best uniswap trade paths for doing the wrapping to the new LP token\\n        // amount Amount of LP Token to be remixed\\n        // userSlippageToleranceAmounts Maximum permissible user slippage tolerance\\n        // deadline Timeout after which the txn should revert\\n        // crossDexRemix Indicates whether this is a cross-dex remix or not\\n     * @return Address of the LP token returned from unwrapping the source LP token\\n     * @return Amount of the LP token returned from unwrapping the source LP token\\n    */\\n    function remix(RemixParams memory params)\\n        override\\n        public\\n        payable\\n        returns (address, uint256)\\n    {\\n        uint lpTokenAmount = 0;\\n        address lpTokenAddress = address(0);\\n\\n        // first of all we remove liquidity from the pool\\n        IERC20 lpToken = IERC20(params.lpTokenPairAddress);\\n       \\n        if (params.lpTokenPairAddress != address(0x0)) {\\n            lpToken.safeTransferFrom(msg.sender, address(this), params.amount);\\n        }\\n\\n        if (lpToken.allowance(address(this), uniAddress) < params.amount * 2) {\\n            lpToken.safeIncreaseAllowance(uniAddress, params.amount * 3);\\n        }\\n\\n        if (lpToken.allowance(address(this), sushiAddress) < params.amount * 2) {\\n            lpToken.safeIncreaseAllowance(sushiAddress, params.amount * 3);\\n        }\\n\\n        ILPERC20 lpTokenInfo = ILPERC20(params.lpTokenPairAddress);\\n        address token0 = lpTokenInfo.token0();\\n        address token1 = lpTokenInfo.token1();\\n\\n        // the actual liquidity removal from the pool\\n        (uint256  pTokenBalance1, uint256 pTokenBalance2) = removePoolLiquidity(\\n            params.lpTokenPairAddress,\\n            params.amount,\\n            params.minUnwrapAmounts[0],\\n            params.minUnwrapAmounts[1],\\n            params.deadline\\n        );\\n\\n        // if pool liquidity removal is successful, then proceed with the remix wrap\\n        if (pTokenBalance1 > 0 && pTokenBalance2 > 0) {\\n\\n            address[] memory sTokens = new address[](2);\\n            sTokens[0] = token0;\\n            sTokens[1] = token1;\\n\\n            if (params.crossDexRemix) {\\n\\n                IERC20 sToken0 = IERC20(sTokens[0]);\\n                if (sToken0.allowance(address(this), sushiAddress) < pTokenBalance1 * 2) {\\n                    sToken0.safeIncreaseAllowance(sushiAddress, pTokenBalance1 * 3);\\n                }\\n\\n                IERC20 sToken1 = IERC20(sTokens[1]);\\n                if (sToken1.allowance(address(this), sushiAddress) < pTokenBalance2 * 2) {\\n                    sToken1.safeIncreaseAllowance(sushiAddress, pTokenBalance2 * 3);\\n                }\\n\\n            } else {\\n                IERC20 sToken0 = IERC20(sTokens[0]);\\n                if (sToken0.allowance(address(this), uniAddress) < pTokenBalance1 * 2) {\\n                    sToken0.safeIncreaseAllowance(uniAddress, pTokenBalance1 * 3);\\n                }\\n\\n                IERC20 sToken1 = IERC20(sTokens[1]);\\n                if (sToken1.allowance(address(this), uniAddress) < pTokenBalance2 * 2) {\\n                    sToken1.safeIncreaseAllowance(uniAddress, pTokenBalance2 * 3);\\n                }\\n            }\\n\\n            // then now we create the new LP token\\n            RemixWrapParams memory remixParams = RemixWrapParams({\\n                sourceTokens: sTokens,\\n                destinationTokens: params.destinationTokens,\\n                path1: params.wrapPath1,\\n                path2: params.wrapPath2,\\n                amount1: pTokenBalance1,\\n                amount2: pTokenBalance2,\\n                userSlippageToleranceAmounts: params.remixWrapSlippageToleranceAmounts,\\n                deadline:  params.deadline\\n            });\\n\\n            // do the actual remix\\n            (lpTokenAddress, lpTokenAmount) = createRemixWrap(remixParams, params.crossDexRemix);\\n\\n            emit LpTokenRemixWrap(lpTokenAddress, lpTokenAmount);\\n        }\\n\\n        \\n        return (lpTokenAddress, lpTokenAmount);\\n\\n    }\\n\\n\\n    /**\\n     * @notice Given an input asset amount and an array of token addresses,\\n     * calculates all subsequent maximum output token amounts for each pair of\\n     * token addresses in the path.\\n     * @param theAddresses Array of addresses that form the Routing swap path\\n     * @param amount Amount of input asset token\\n     * @return amounts1 Array with maximum output token amounts for all token\\n     * pairs in the swap path\\n     */\\n    function getAmountsOut(address[] memory theAddresses, uint256 amount)\\n        public\\n        view\\n        returns (uint256[] memory amounts1) {\\n        try uniswapExchange.getAmountsOut(\\n            amount,\\n            theAddresses\\n        ) returns (uint256[] memory amounts) {\\n            return amounts;\\n        } catch {\\n            uint256[] memory amounts2 = new uint256[](2);\\n            amounts2[0] = 0;\\n            amounts2[1] = 0;\\n            return amounts2;\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieve the LP token address for a given pair of tokens\\n     * @param token1 Address to the first token in the LP pair\\n     * @param token2 Address to the second token in the LP pair\\n     * @return lpAddr Address to the LP token contract composed of the given  token pair\\n     */\\n    function getLPTokenByPair(\\n        address token1,\\n        address token2\\n    )\\n        public\\n        view\\n        returns (address lpAddr)\\n    {\\n        address thisPairAddress = factory.getPair(token1, token2);\\n        return thisPairAddress;\\n    }\\n\\n    /**\\n     * @notice Retrieve the details of the constituent tokens in an LP Token/Pair\\n     * @param lpTokenAddress Address to the LP token\\n     * @return token0Name Name of token 0\\n     * @return token0Symbol Symbol of token 0\\n     * @return token0Decimals Decimal of token 0\\n     * @return token1Name Namme of token 1\\n     * @return token1Symbol Symbol of token 1\\n     * @return token1Decimals Symbol of token 1\\n     */\\n    function getPoolTokensDetails(address lpTokenAddress)\\n        external\\n        view\\n        returns (string memory token0Name, string memory token0Symbol, uint256 token0Decimals, \\n            string memory token1Name, string memory token1Symbol, uint256 token1Decimals)\\n    {\\n        // get the pool token addresses\\n        address token0 = ILPERC20(lpTokenAddress).token0();\\n        address token1 = ILPERC20(lpTokenAddress).token1();\\n\\n        // Then get the pool token  details\\n        string memory t0Name = ERC20(token0).name();\\n        string memory t0Symbol = ERC20(token0).symbol();\\n        uint256 t0Decimals = ERC20(token0).decimals();\\n        string memory t1Name = ERC20(token0).name();\\n        string memory t1Symbol = ERC20(token1).symbol();\\n        uint256 t1Decimals = ERC20(token1).decimals();\\n\\n        return (t0Name, t0Symbol, t0Decimals, t1Name, t1Symbol, t1Decimals);\\n    }\\n\\n    /**\\n     * @notice Retrieve the balance of a given token for a specified user\\n     * @param userAddress Address to the user's wallet\\n     * @param tokenAddress Address to the token for which the balance is to be\\n     * retrieved\\n     * @return Balance of the given token in the specified user wallet\\n     */\\n    function getUserTokenBalance(\\n        address userAddress,\\n        address tokenAddress\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        IERC20 token = IERC20(tokenAddress);\\n        return token.balanceOf(userAddress);\\n    }\\n\\n    /**\\n     * @notice Perform a Uniswap transaction to swap between a given pair of\\n     * tokens of the specified amount\\n     * @param sellToken Address to the token being sold as part of the swap\\n     * @param buyToken Address to the token being bought as part of the swap\\n     * @param path Path for uniswap\\n     * @param amount Transaction amount denoted in terms of the token sold\\n     * @param userSlippageToleranceAmount Maximum permissible slippage limit\\n     * @return amounts1 Tokens received once the swap is completed\\n     */\\n    function conductUniswap(\\n        address sellToken,\\n        address buyToken,\\n        address[] memory path,\\n        uint256 amount,\\n        uint256 userSlippageToleranceAmount,\\n        uint256 deadline\\n    )\\n        internal\\n        returns (uint256 amounts1)\\n    {\\n        if (sellToken == address(0x0) && buyToken == WETH_TOKEN_ADDRESS) {\\n            IWETH(buyToken).deposit{value: msg.value}();\\n            return amount;\\n        }\\n\\n        if (sellToken == address(0x0)) {\\n            // addresses[0] = WETH_TOKEN_ADDRESS;\\n            // addresses[1] = buyToken;\\n            uniswapExchange.swapExactETHForTokens{value: msg.value}(\\n                userSlippageToleranceAmount,\\n                path,\\n                address(this),\\n                deadline\\n            );\\n        } else {\\n            IERC20 sToken = IERC20(sellToken);\\n            if (sToken.allowance(address(this), uniAddress) < amount * 2) {\\n                sToken.safeIncreaseAllowance(uniAddress, amount * 3);\\n            }\\n\\n            uint256[] memory amounts = conductUniswapT4T(\\n                path,\\n                amount,\\n                userSlippageToleranceAmount,\\n                deadline\\n            );\\n            uint256 resultingTokens = amounts[amounts.length - 1];\\n            return resultingTokens;\\n        }\\n    }\\n\\n    /**\\n     * @notice Using Uniswap, exchange an exact amount of input tokens for as\\n     * many output tokens as possible, along the route determined by the path.\\n     * @param paths Array of addresses representing the path where the\\n     * first address is the input token and the last address is the output\\n     * token\\n     * @param amount Amount of input tokens to be swapped\\n     * @param userSlippageToleranceAmount Maximum permissible slippage tolerance\\n     * @return amounts_ The input token amount and all subsequent output token\\n     * amounts\\n     */\\n    function conductUniswapT4T(\\n        address[] memory paths,\\n        uint256 amount,\\n        uint256 userSlippageToleranceAmount,\\n        uint256 deadline\\n    )\\n        internal\\n        returns (uint256[] memory amounts_)\\n    {\\n        uint256[] memory amounts =\\n            uniswapExchange.swapExactTokensForTokens(\\n                amount,\\n                userSlippageToleranceAmount,\\n                paths,\\n                address(this),\\n                deadline\\n            );\\n        return amounts;\\n    }\\n\\n     /**\\n     * @notice Using either Uniswap or Sushiswap, exchange an exact amount of input tokens for as\\n     * many output tokens as possible, along the route determined by the path.\\n     * @param path Array of addresses representing the path where the\\n     * first address is the input token and the last address is the output\\n     * token\\n     * @param amount Amount of input tokens to be swapped\\n     * @param userSlippageToleranceAmount Maximum permissible slippage tolerance\\n     * @return amounts_ The input token amount and all subsequent output token\\n     * amounts\\n     */\\n    function conductSwapT4TRemix(\\n        IRouter router,\\n        address[] memory path,\\n        uint256 amount,\\n        uint256 userSlippageToleranceAmount,\\n        uint256 deadline\\n    )\\n        internal\\n        returns (uint256[] memory amounts_)\\n    {\\n        uint256[] memory amounts =\\n            router.swapExactTokensForTokens(\\n                amount,\\n                userSlippageToleranceAmount,\\n                path,\\n                address(this),\\n                deadline\\n            );\\n        return amounts;\\n    }\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiFactoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpTokenPairAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LpTokenRemixWrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnWrapV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpTokenPairAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WrapV2\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"WETH_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"adminEmergencyWithdrawTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeRecipientIsOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"theAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts1\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"}],\"name\":\"getLPTokenByPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpTokenAddress\",\"type\":\"address\"}],\"name\":\"getPoolTokensDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"token0Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token0Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token0Decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"token1Name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token1Decimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getUserTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpTokenPairAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"destinationTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"wrapPath1\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"wrapPath2\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"remixWrapSlippageToleranceAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minUnwrapAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"crossDexRemix\",\"type\":\"bool\"}],\"internalType\":\"struct IWrapper.RemixParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"remix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"setMaxFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapExchange\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpTokenPairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destinationToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path2\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"userSlippageToleranceAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minUnwrapAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IWrapper.UnwrapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"changeRecipientIsOwnerBool\",\"type\":\"bool\"}],\"name\":\"updateChangeRecipientBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"destinationTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path1\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path2\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"userSlippageToleranceAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IWrapper.WrapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"WrapAndUnWrap","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000d9e1ce17f2641f24ae83637ab66a2cca9c378b9f0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f000000000000000000000000c0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}