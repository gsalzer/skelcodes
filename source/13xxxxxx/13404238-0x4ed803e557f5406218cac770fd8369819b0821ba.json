{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Crypto stamp 2 Minter Delegate\r\n * Delegates minting calls from the bridge to the actual CS2 contract.\r\n *\r\n * Developed by Capacity Blockchain Solutions GmbH <capacity.at>\r\n * for Ã–sterreichische Post AG <post.at>\r\n *\r\n * Any usage of or interaction with this set of contracts is subject to the\r\n * Terms & Conditions available at https://crypto.post.at/\r\n */\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: contracts/ENSReverseRegistrarI.sol\r\n\r\n/*\r\n * Interfaces for ENS Reverse Registrar\r\n * See https://github.com/ensdomains/ens/blob/master/contracts/ReverseRegistrar.sol for full impl\r\n * Also see https://github.com/wealdtech/wealdtech-solidity/blob/master/contracts/ens/ENSReverseRegister.sol\r\n *\r\n * Use this as follows (registryAddress is the address of the ENS registry to use):\r\n * -----\r\n * // This hex value is caclulated by namehash('addr.reverse')\r\n * bytes32 public constant ENS_ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\r\n * function registerReverseENS(address registryAddress, string memory calldata) external {\r\n *     require(registryAddress != address(0), \"need a valid registry\");\r\n *     address reverseRegistrarAddress = ENSRegistryOwnerI(registryAddress).owner(ENS_ADDR_REVERSE_NODE)\r\n *     require(reverseRegistrarAddress != address(0), \"need a valid reverse registrar\");\r\n *     ENSReverseRegistrarI(reverseRegistrarAddress).setName(name);\r\n * }\r\n * -----\r\n * or\r\n * -----\r\n * function registerReverseENS(address reverseRegistrarAddress, string memory calldata) external {\r\n *    require(reverseRegistrarAddress != address(0), \"need a valid reverse registrar\");\r\n *     ENSReverseRegistrarI(reverseRegistrarAddress).setName(name);\r\n * }\r\n * -----\r\n * ENS deployments can be found at https://docs.ens.domains/ens-deployments\r\n * E.g. Etherscan can be used to look up that owner on those contracts.\r\n * namehash.hash(\"addr.reverse\") == \"0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2\"\r\n * Ropsten: ens.owner(namehash.hash(\"addr.reverse\")) == \"0x6F628b68b30Dc3c17f345c9dbBb1E483c2b7aE5c\"\r\n * Mainnet: ens.owner(namehash.hash(\"addr.reverse\")) == \"0x084b1c3C81545d370f3634392De611CaaBFf8148\"\r\n */\r\n\r\ninterface ENSRegistryOwnerI {\r\n    function owner(bytes32 node) external view returns (address);\r\n}\r\n\r\ninterface ENSReverseRegistrarI {\r\n    event NameChanged(bytes32 indexed node, string name);\r\n    /**\r\n     * @dev Sets the `name()` record for the reverse ENS record associated with\r\n     * the calling account.\r\n     * @param name The name to set for this address.\r\n     * @return The ENS node hash of the reverse record.\r\n     */\r\n    function setName(string calldata name) external returns (bytes32);\r\n}\r\n\r\n// File: contracts/BridgeDataI.sol\r\n\r\n/*\r\n * Interface for data storage of the bridge.\r\n */\r\n\r\ninterface BridgeDataI {\r\n\r\n    event AddressChanged(string name, address previousAddress, address newAddress);\r\n    event ConnectedChainChanged(string previousConnectedChainName, string newConnectedChainName);\r\n    event TokenURIBaseChanged(string previousTokenURIBase, string newTokenURIBase);\r\n    event TokenSunsetAnnounced(uint256 indexed timestamp);\r\n\r\n    /**\r\n     * @dev The name of the chain connected to / on the other side of this bridge head.\r\n     */\r\n    function connectedChainName() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev The name of our own chain, used in token URIs handed to deployed tokens.\r\n     */\r\n    function ownChainName() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev The base of ALL token URIs, e.g. https://example.com/\r\n     */\r\n    function tokenURIBase() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev The sunset timestamp for all deployed tokens.\r\n     * If 0, no sunset is in place. Otherwise, if older than block timestamp,\r\n     * all transfers of the tokens are frozen.\r\n     */\r\n    function tokenSunsetTimestamp() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Set a token sunset timestamp.\r\n     */\r\n    function setTokenSunsetTimestamp(uint256 _timestamp) external;\r\n\r\n    /**\r\n     * @dev Set an address for a name.\r\n     */\r\n    function setAddress(string memory name, address newAddress) external;\r\n\r\n    /**\r\n     * @dev Get an address for a name.\r\n     */\r\n    function getAddress(string memory name) external view returns (address);\r\n}\r\n\r\n// File: contracts/ERC721ExistsI.sol\r\n\r\n/*\r\n * Interface for an ERC721 compliant contract with an exists() function.\r\n */\r\n\r\n/**\r\n * @dev ERC721 compliant contract with an exists() function.\r\n */\r\ninterface ERC721ExistsI is IERC721 {\r\n\r\n    // Returns whether the specified token exists\r\n    function exists(uint256 tokenId) external view returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/CS2PropertiesI.sol\r\n\r\n/*\r\n * Interface for CS2 properties.\r\n */\r\n\r\ninterface CS2PropertiesI {\r\n\r\n    enum AssetType {\r\n        Honeybadger,\r\n        Llama,\r\n        Panda,\r\n        Doge\r\n    }\r\n\r\n    enum Colors {\r\n        Black,\r\n        Green,\r\n        Blue,\r\n        Yellow,\r\n        Red\r\n    }\r\n\r\n    function getType(uint256 tokenId) external view returns (AssetType);\r\n    function getColor(uint256 tokenId) external view returns (Colors);\r\n\r\n}\r\n\r\n// File: contracts/CS2MintI.sol\r\n\r\n/*\r\n * Interface for minting CS2 with properties\r\n */\r\n\r\ninterface CS2MintI is CS2PropertiesI,ERC721ExistsI {\r\n\r\n    function create(uint256 _tokenId, address _owner, AssetType _type, Colors _color) external;\r\n\r\n    function createMulti(uint256 _tokenIdStart, address[] memory _owners, AssetType[] memory _types, Colors[] memory _colors) external;\r\n\r\n    function transferCreateControl(address _newCreateControl) external;\r\n\r\n    function setUpgradeMaximum(uint256 _newUpgradeMaximum) external;\r\n\r\n}\r\n\r\n// File: contracts/CS2MinterDelegate.sol\r\n\r\n/*\r\n * Implements a minter delegate for CS2 that we can use for exiting unminted tokens.\r\n */\r\n\r\ncontract CS2MinterDelegate {\r\n\r\n    BridgeDataI public bridgeData;\r\n    CS2MintI public CS2;\r\n\r\n    event BridgeDataChanged(address indexed previousBridgeData, address indexed newBridgeData);\r\n\r\n    constructor(address _bridgeDataAddress, address CS2Address)\r\n    {\r\n        bridgeData = BridgeDataI(_bridgeDataAddress);\r\n        require(address(bridgeData) != address(0x0), \"You need to provide an actual bridge data contract.\");\r\n        CS2 = CS2MintI(CS2Address);\r\n        require(address(CS2) != address(0x0), \"You need to provide an actual CS2 contract.\");\r\n    }\r\n\r\n    modifier onlyBridgeControl()\r\n    {\r\n        require(msg.sender == bridgeData.getAddress(\"bridgeControl\"), \"bridgeControl key required for this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyBridge()\r\n    {\r\n        require(msg.sender == bridgeData.getAddress(\"bridgeControl\") || msg.sender == bridgeData.getAddress(\"bridgeHead\"), \"bridgeControl key or bridge head required for this function.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTokenAssignmentControl() {\r\n        require(msg.sender == bridgeData.getAddress(\"tokenAssignmentControl\"), \"tokenAssignmentControl key required for this function.\");\r\n        _;\r\n    }\r\n\r\n    /*** Enable adjusting variables after deployment ***/\r\n\r\n    function setBridgeData(BridgeDataI _newBridgeData)\r\n    external\r\n    onlyBridgeControl\r\n    {\r\n        require(address(_newBridgeData) != address(0x0), \"You need to provide an actual bridge data contract.\");\r\n        emit BridgeDataChanged(address(bridgeData), address(_newBridgeData));\r\n        bridgeData = _newBridgeData;\r\n    }\r\n\r\n    /*** Functions needed for minting via bridge exit ***/\r\n\r\n    function safeMintWithData(address _to, uint256 _tokenId, bytes calldata _propdata)\r\n    public\r\n    onlyBridge\r\n    {\r\n        require(_propdata.length == 2, \"Need correct length of properties data\");\r\n        CS2PropertiesI.AssetType aType = CS2PropertiesI.AssetType(uint8(_propdata[0]));\r\n        CS2PropertiesI.Colors color = CS2PropertiesI.Colors(uint8(_propdata[1]));\r\n        CS2.create(_tokenId, _to, aType, color);\r\n    }\r\n\r\n    // Returns whether the specified token exists in CS2.\r\n    function exists(uint256 tokenId)\r\n    public view\r\n    returns (bool) {\r\n        return CS2.exists(tokenId);\r\n    }\r\n\r\n    /*** Function that createControl has to call on CS2 and that we want to be accessible ***/\r\n\r\n    function transferCreateControl(address _newCreateControl)\r\n    public\r\n    onlyBridgeControl\r\n    {\r\n        CS2.transferCreateControl(_newCreateControl);\r\n    }\r\n\r\n    function setUpgradeMaximum(uint256 _newUpgradeMaximum)\r\n    public\r\n    onlyBridgeControl\r\n    {\r\n        CS2.setUpgradeMaximum(_newUpgradeMaximum);\r\n    }\r\n\r\n    /*** Enable reverse ENS registration ***/\r\n\r\n    // Call this with the address of the reverse registrar for the respective network and the ENS name to register.\r\n    // The reverse registrar can be found as the owner of 'addr.reverse' in the ENS system.\r\n    // For Mainnet, the address needed is 0x9062c0a6dbd6108336bcbe4593a3d1ce05512069\r\n    function registerReverseENS(address _reverseRegistrarAddress, string calldata _name)\r\n    external\r\n    onlyTokenAssignmentControl\r\n    {\r\n        require(_reverseRegistrarAddress != address(0), \"need a valid reverse registrar\");\r\n        ENSReverseRegistrarI(_reverseRegistrarAddress).setName(_name);\r\n    }\r\n\r\n    /*** Make sure currency or NFT doesn't get stranded in this contract ***/\r\n\r\n    // If this contract gets a balance in some ERC20 contract after it's finished, then we can rescue it.\r\n    function rescueToken(IERC20 _foreignToken, address _to)\r\n    external\r\n    onlyTokenAssignmentControl\r\n    {\r\n        _foreignToken.transfer(_to, _foreignToken.balanceOf(address(this)));\r\n    }\r\n\r\n    // If this contract gets a balance in some ERC721 contract after it's finished, then we can rescue it.\r\n    function approveNFTrescue(IERC721 _foreignNFT, address _to)\r\n    external\r\n    onlyTokenAssignmentControl\r\n    {\r\n        _foreignNFT.setApprovalForAll(_to, true);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeDataAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"CS2Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousBridgeData\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBridgeData\",\"type\":\"address\"}],\"name\":\"BridgeDataChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CS2\",\"outputs\":[{\"internalType\":\"contract CS2MintI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_foreignNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"approveNFTrescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeData\",\"outputs\":[{\"internalType\":\"contract BridgeDataI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reverseRegistrarAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"registerReverseENS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_foreignToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_propdata\",\"type\":\"bytes\"}],\"name\":\"safeMintWithData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BridgeDataI\",\"name\":\"_newBridgeData\",\"type\":\"address\"}],\"name\":\"setBridgeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newUpgradeMaximum\",\"type\":\"uint256\"}],\"name\":\"setUpgradeMaximum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCreateControl\",\"type\":\"address\"}],\"name\":\"transferCreateControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CS2MinterDelegate","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000884fc15e31b1b634732e140cb3f94b3cbfdd1c5000000000000000000000000a7f87e8d193e29bf1ed050fdd511b79fe0264d8b","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7ba98a4b0ed20f7b9f5726847643b352e591fe05ac3fa4a5ea908f504a88ff2b"}]}