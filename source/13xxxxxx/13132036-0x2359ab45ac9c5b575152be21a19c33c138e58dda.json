{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FeeCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./interfaces/IFeeCollector.sol\\\";\\nimport \\\"./utils/BalanceAccounting.sol\\\";\\n\\n\\ncontract FeeCollector is IFeeCollector, BalanceAccounting {\\n    using SafeERC20 for IERC20;\\n\\n    event Trade(address indexed token, address indexed trader, uint256 amount, uint256 boughtAmount);\\n    event UpdateReward(address indexed token, address indexed receiver, uint256 amount);\\n    event ClaimFrozen(address indexed token, address indexed receiver, uint256 tokenAmount, uint256 swappedTokenAmount);\\n    event ClaimCurrent(address indexed receiver, uint256 amount);\\n\\n    struct EpochBalance {\\n        mapping(address => uint256) balances;\\n        uint256 totalSupply;\\n        uint256 traded;\\n        uint256 tokenBalance;\\n    }\\n\\n    struct TokenInfo {\\n        uint40 lastTime;\\n        uint216 lastValue;\\n        mapping(uint256 => EpochBalance) epochBalance;\\n        uint256 firstUnprocessedEpoch;\\n        uint256 currentEpoch;\\n        mapping(address => uint256) firstUserUnprocessedEpoch;\\n    }\\n\\n    uint256 private constant _MAX_TIME = 0xfffff;\\n\\n    mapping(IERC20 => TokenInfo) public tokenInfo;\\n    IERC20 public immutable token;\\n    uint256 public immutable minValue;\\n    uint8 public immutable decimals;\\n\\n    constructor(\\n        IERC20 _token,\\n        uint256 _minValue\\n    ) {\\n        token = _token;\\n        minValue = _minValue;\\n        decimals = IERC20Metadata(address(_token)).decimals();\\n    }\\n\\n    function name() external view returns(string memory) {\\n        return string(abi.encodePacked(\\\"FeeCollector: \\\", IERC20Metadata(address(token)).name()));\\n    }\\n\\n    function symbol() external view returns(string memory) {\\n        return string(abi.encodePacked(\\\"fee-\\\", IERC20Metadata(address(token)).symbol()));\\n    }\\n\\n    function getEpochBalance(IERC20 _token, uint256 epoch) external view returns(uint256 totalSupply, uint256 traded, uint256 tokenBalance) {\\n        EpochBalance storage epochBalance = tokenInfo[_token].epochBalance[epoch];\\n        (totalSupply, traded, tokenBalance) = (epochBalance.totalSupply, epochBalance.traded, epochBalance.tokenBalance);\\n    }\\n\\n    function getUserEpochBalance(IERC20 _token, uint256 epoch, address user) external view returns(uint256 balance) {\\n        balance = tokenInfo[_token].epochBalance[epoch].balances[user];\\n    }\\n\\n    function getFirstUserUnprocessedEpoch(IERC20 _token, address user) external view returns(uint256 firstUserUnprocessedEpoch) {\\n        firstUserUnprocessedEpoch = tokenInfo[_token].firstUserUnprocessedEpoch[user];\\n    }\\n\\n    function decelerationTable() external pure returns(uint256[20] memory ret) {\\n        ret[0] = 0.9999e36;\\n        for (uint256 i = 1; i < 20; ++i) {\\n            ret[i] = ret[i-1] * ret[i-1] / 1e36;\\n        }\\n    }\\n\\n    function value(IERC20 _token) public view returns(uint256 result) {\\n        return valueForTime(block.timestamp, _token);\\n    }\\n\\n    function valueForTime(uint256 time, IERC20 _token) public view returns(uint256 result) {\\n        uint256 secs = tokenInfo[_token].lastTime;\\n        result = tokenInfo[_token].lastValue;\\n\\n        secs = time - secs;\\n        if (secs > _MAX_TIME) {\\n            secs = _MAX_TIME;\\n        }\\n        if (result < minValue) {\\n            result = minValue;\\n        }\\n\\n        uint256 minValue_ = minValue;\\n        assembly { // solhint-disable-line no-inline-assembly\\n            if and(secs, 0x00000F) {\\n                if and(secs, 0x000001) {\\n                    result := div(mul(result, 999900000000000000000000000000000000), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x000002) {\\n                    result := div(mul(result, 999800010000000000000000000000000000), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x000004) {\\n                    result := div(mul(result, 999600059996000100000000000000000000), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x000008) {\\n                    result := div(mul(result, 999200279944006999440027999200010000), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n            }\\n\\n            if and(secs, 0x0000F0) {\\n                if and(secs, 0x000010) {\\n                    result := div(mul(result, 998401199440181956328006856128688560), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x000020) {\\n                    result := div(mul(result, 996804955043593987145855519554957648), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x000040) {\\n                    result := div(mul(result, 993620118399461429792290614928235372), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x000080) {\\n                    result := div(mul(result, 987280939688159750172898466482272707), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n            }\\n\\n            if and(secs, 0x000F00) {\\n                if and(secs, 0x000100) {\\n                    result := div(mul(result, 974723653871535730138973062438582481), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x000200) {\\n                    result := div(mul(result, 950086201416677390961738571086337286), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x000400) {\\n                    result := div(mul(result, 902663790122371280016479918855854806), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x000800) {\\n                    result := div(mul(result, 814801917998084346828628782199508463), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n            }\\n\\n            if and(secs, 0x00F000) {\\n                if and(secs, 0x001000) {\\n                    result := div(mul(result, 663902165573356968243491567819400493), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x002000) {\\n                    result := div(mul(result, 440766085452993090398118811102456830), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x004000) {\\n                    result := div(mul(result, 194274742085555207178862579417407102), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x008000) {\\n                    result := div(mul(result, 37742675412408995610179844414960649), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n            }\\n\\n            if and(secs, 0x0F0000) {\\n                if and(secs, 0x010000) {\\n                    result := div(mul(result, 1424509547286462546864068778806188), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x020000) {\\n                    result := div(mul(result, 2029227450310282474813662564103), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x040000) {\\n                    result := div(mul(result, 4117764045092769930387910), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n\\n                if and(secs, 0x080000) {\\n                    result := div(mul(result, 16955980731058), 1000000000000000000000000000000000000)\\n                    if lt(result, minValue_) {\\n                        result := minValue_\\n                        secs := 0\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external override {\\n        for (uint i = 0; i < receivers.length; i++) {\\n            _updateReward(IERC20(msg.sender), receivers[i], amounts[i]);\\n        }\\n    }\\n\\n    function updateReward(address receiver, uint256 amount) external override {\\n        _updateReward(IERC20(msg.sender), receiver, amount);\\n    }\\n\\n    function updateRewardNonLP(IERC20 erc20, address receiver, uint256 amount) external override {\\n        _updateReward(erc20, receiver, amount);\\n        erc20.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function trade(IERC20 erc20, uint256 amount, uint256 minReturn) external {\\n        TokenInfo storage _token = tokenInfo[erc20];\\n        uint256 currentEpoch = _token.currentEpoch;\\n        uint256 firstUnprocessedEpoch = _token.firstUnprocessedEpoch;\\n        EpochBalance storage epochBalance = _token.epochBalance[firstUnprocessedEpoch];\\n        EpochBalance storage currentEpochBalance = _token.epochBalance[currentEpoch];\\n\\n        uint256 currentEpochStored = currentEpoch;\\n\\n        uint256 unprocessedTotalSupply = epochBalance.totalSupply;\\n        uint256 unprocessedTokenBalance = unprocessedTotalSupply - epochBalance.traded;\\n        uint256 tokenBalance = unprocessedTokenBalance;\\n        if (firstUnprocessedEpoch != currentEpoch) {\\n            tokenBalance += currentEpochBalance.totalSupply;\\n        }\\n\\n        uint256 returnAmount = amount * tokenBalance / value(erc20);\\n        require(tokenBalance >= returnAmount, \\\"not enough tokens\\\");\\n        require(returnAmount >= minReturn, \\\"minReturn not met\\\");\\n\\n        if (firstUnprocessedEpoch == currentEpoch) {\\n            currentEpoch += 1;\\n        }\\n\\n        _updateTokenState(erc20, -int256(returnAmount), currentEpochStored, firstUnprocessedEpoch);\\n\\n        if (returnAmount <= unprocessedTokenBalance) {\\n            if (returnAmount == unprocessedTokenBalance) {\\n                _token.firstUnprocessedEpoch += 1;\\n            }\\n\\n            epochBalance.traded += returnAmount;\\n            epochBalance.tokenBalance += amount;\\n        } else {\\n            uint256 amountPart = unprocessedTokenBalance * amount / returnAmount;\\n\\n            epochBalance.traded = unprocessedTotalSupply;\\n            epochBalance.tokenBalance += amountPart;\\n\\n            currentEpochBalance.traded += returnAmount - unprocessedTokenBalance;\\n            currentEpochBalance.tokenBalance += amount - amountPart;\\n\\n            _token.firstUnprocessedEpoch += 1;\\n            currentEpoch += 1;\\n        }\\n\\n        if (currentEpoch != currentEpochStored) {\\n            _token.currentEpoch = currentEpoch;\\n        }\\n\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        erc20.safeTransfer(msg.sender, returnAmount);\\n        emit Trade(address(erc20), msg.sender, amount, returnAmount);\\n    }\\n\\n    function claim(IERC20[] memory pools) external {\\n        for (uint256 i = 0; i < pools.length; ++i) {\\n            TokenInfo storage _token = tokenInfo[pools[i]];\\n            _collectProcessedEpochs(msg.sender, _token, _token.currentEpoch, _token.firstUnprocessedEpoch);\\n        }\\n\\n        uint256 userBalance = balanceOf(msg.sender);\\n        if (userBalance > 1) {\\n            // Avoid erasing storage to decrease gas footprint for payments\\n            unchecked {\\n                uint256 withdrawn = userBalance - 1;\\n                _burn(msg.sender, withdrawn);\\n                token.safeTransfer(msg.sender, withdrawn);\\n            }\\n        }\\n    }\\n\\n    function claimCurrentEpoch(IERC20 erc20) external {\\n        TokenInfo storage _token = tokenInfo[erc20];\\n        EpochBalance storage _epochBalance = _token.epochBalance[_token.currentEpoch];\\n        uint256 userBalance = _epochBalance.balances[msg.sender];\\n        if (userBalance > 0) {\\n            _epochBalance.balances[msg.sender] = 0;\\n            _epochBalance.totalSupply -= userBalance;\\n            erc20.safeTransfer(msg.sender, userBalance);\\n            emit ClaimCurrent(msg.sender, userBalance);\\n        }\\n    }\\n\\n    function claimFrozenEpoch(IERC20 erc20) external {\\n        TokenInfo storage _token = tokenInfo[erc20];\\n        uint256 firstUnprocessedEpoch = _token.firstUnprocessedEpoch;\\n        uint256 currentEpoch = _token.currentEpoch;\\n\\n        require(firstUnprocessedEpoch + 1 == currentEpoch, \\\"Epoch already finalized\\\");\\n        require(_token.firstUserUnprocessedEpoch[msg.sender] == firstUnprocessedEpoch, \\\"Epoch funds already claimed\\\");\\n\\n        _token.firstUserUnprocessedEpoch[msg.sender] = currentEpoch;\\n        EpochBalance storage epochBalance = _token.epochBalance[firstUnprocessedEpoch];\\n        uint256 share = epochBalance.balances[msg.sender];\\n\\n        if (share > 0) {\\n            uint256 totalSupply = epochBalance.totalSupply;\\n            epochBalance.balances[msg.sender] = 0;\\n            epochBalance.totalSupply = totalSupply - share;\\n            uint256 withdrawnERC20 = _transferTokenShare(erc20, totalSupply - epochBalance.traded, share, totalSupply);\\n            uint256 withdrawnToken = _transferTokenShare(token, epochBalance.tokenBalance, share, totalSupply);\\n            epochBalance.tokenBalance -= withdrawnToken;\\n            emit ClaimFrozen(address(erc20), msg.sender, withdrawnERC20, withdrawnToken);\\n        }\\n    }\\n\\n    function _updateReward(IERC20 erc20, address receiver, uint256 amount) private {\\n        TokenInfo storage _token = tokenInfo[erc20];\\n        uint256 currentEpoch = _token.currentEpoch;\\n        uint256 firstUnprocessedEpoch = _token.firstUnprocessedEpoch;\\n\\n        _updateTokenState(erc20, int256(amount), currentEpoch, firstUnprocessedEpoch);\\n\\n        // Add new reward to current epoch\\n        _token.epochBalance[currentEpoch].balances[receiver] += amount;\\n        _token.epochBalance[currentEpoch].totalSupply += amount;\\n\\n        // Collect all processed epochs and advance user token epoch\\n        _collectProcessedEpochs(receiver, _token, currentEpoch, firstUnprocessedEpoch);\\n        emit UpdateReward(address(erc20), receiver, amount);\\n    }\\n\\n    function _updateTokenState(IERC20 erc20, int256 amount, uint256 currentEpoch, uint256 firstUnprocessedEpoch) private {\\n        TokenInfo storage _token = tokenInfo[erc20];\\n\\n        uint256 fee = _token.epochBalance[firstUnprocessedEpoch].totalSupply - _token.epochBalance[firstUnprocessedEpoch].traded;\\n        if (firstUnprocessedEpoch != currentEpoch) {\\n            fee += _token.epochBalance[currentEpoch].totalSupply;\\n        }\\n\\n        uint256 feeWithAmount = (amount >= 0 ? fee + uint256(amount) : fee - uint256(-amount));\\n        (\\n            tokenInfo[erc20].lastTime,\\n            tokenInfo[erc20].lastValue\\n        ) = (\\n            uint40(block.timestamp),\\n            uint216(valueForTime(block.timestamp, erc20) * feeWithAmount / (fee == 0 ? 1 : fee))\\n        );\\n    }\\n\\n    function _transferTokenShare(IERC20 _token, uint256 balance, uint256 share, uint256 totalSupply) private returns(uint256 amount) {\\n        amount = balance * share / totalSupply;\\n        if (amount > 0) {\\n            _token.safeTransfer(msg.sender, amount);\\n        }\\n    }\\n\\n    function _collectProcessedEpochs(address user, TokenInfo storage _token, uint256 currentEpoch, uint256 tokenEpoch) private {\\n        uint256 userEpoch = _token.firstUserUnprocessedEpoch[user];\\n\\n        if (tokenEpoch <= userEpoch) {\\n            return;\\n        }\\n\\n        // Early return for the new users\\n        if (_token.epochBalance[userEpoch].balances[user] == 0) {\\n            _token.firstUserUnprocessedEpoch[user] = currentEpoch;\\n            return;\\n        }\\n\\n        uint256 epochCount = Math.min(2, tokenEpoch - userEpoch); // 1 or 2 epochs\\n\\n        // Claim 1 or 2 processed epochs for the user\\n        uint256 collected = _collectEpoch(user, _token, userEpoch);\\n        if (epochCount > 1) {\\n            collected += _collectEpoch(user, _token, userEpoch + 1);\\n        }\\n        _mint(user, collected);\\n\\n        // Update user token epoch counter\\n        bool emptySecondEpoch = _token.epochBalance[userEpoch + 1].balances[user] == 0;\\n        _token.firstUserUnprocessedEpoch[user] = (epochCount == 2 || emptySecondEpoch) ? currentEpoch : userEpoch + 1;\\n    }\\n\\n    function _collectEpoch(address user, TokenInfo storage _token, uint256 epoch) private returns(uint256 collected) {\\n        uint256 share = _token.epochBalance[epoch].balances[user];\\n        if (share > 0) {\\n            uint256 tokenBalance = _token.epochBalance[epoch].tokenBalance;\\n            uint256 totalSupply = _token.epochBalance[epoch].totalSupply;\\n\\n            collected = tokenBalance * share / totalSupply;\\n\\n            _token.epochBalance[epoch].balances[user] = 0;\\n            _token.epochBalance[epoch].totalSupply = totalSupply - share;\\n            _token.epochBalance[epoch].tokenBalance = tokenBalance - collected;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IFeeCollector {\\n    function updateReward(address receiver, uint256 amount) external;\\n    function updateRewardNonLP(IERC20 erc20, address receiver, uint256 amount) external;\\n    function updateRewards(address[] calldata receivers, uint256[] calldata amounts) external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/BalanceAccounting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\ncontract BalanceAccounting {\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        _totalSupply += amount;\\n        unchecked {\\n            _balances[account] += amount;\\n        }\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _balances[account] -= amount;\\n        unchecked {\\n            _totalSupply -= amount;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimCurrent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swappedTokenAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateReward\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"claimCurrentEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"claimFrozenEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decelerationTable\",\"outputs\":[{\"internalType\":\"uint256[20]\",\"name\":\"ret\",\"type\":\"uint256[20]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getEpochBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFirstUserUnprocessedEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstUserUnprocessedEpoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserEpochBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"lastTime\",\"type\":\"uint40\"},{\"internalType\":\"uint216\",\"name\":\"lastValue\",\"type\":\"uint216\"},{\"internalType\":\"uint256\",\"name\":\"firstUnprocessedEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentEpoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateRewardNonLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"valueForTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FeeCollector","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"000000000000000000000000111111111117dc0aa78b770fa6a738034120c3020000000000000000000000000000000000000000000000056bc75e2d63100000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}