{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract TokenERC20 {\r\n    // Общедоступные переменные маркера\r\n    string public name;\r\n    string public symbol;\r\n    //uint8 public decimals = 18;\r\n    uint8 public decimals;\r\n    // 18 десятичных знаков-настоятельно рекомендуется использовать по умолчанию, избегая его изменения\r\n    uint256 public totalSupply;\r\n    address public owner;\r\n    address public owner2 = 0x9D2b4Bb791fC992781839B1A94961A6923ccd902;\r\n    // Здесь создается массив со всеми балансами\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // Это создает публичное событя на blockchain, которые будут уведомлять клиентов\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // Это уведомляет клиентов о сожженной сумме\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n/** \r\n* Функция конструктора \r\n* \r\n* Инициализирует контракт с начальными маркерами поставок для создателя договора \r\n*/\r\n    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol, uint8 tokendecimals) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Обновить общее предложение с десятичной суммой\r\n        balanceOf[msg.sender] = totalSupply;                // Отдаем создателю все начальные маркеры\r\n        name = tokenName;                                   // Задайте имя для отображения\r\n        symbol = tokenSymbol;                               // Установить символ для отображения\r\n        decimals = tokendecimals;\r\n        owner = msg.sender;\r\n    }\r\n\r\n/** \r\n* Внутренняя передача, только может быть вызвана этим контрактом \r\n*/\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0); // Предотвращение передачи по адресу 0x0. Вместо этого используйте burn()\r\n        require(balanceOf[_from] >= _value); // Проверка, достаточно ли у отправителя\r\n        require(balanceOf[_to] + _value > balanceOf[_to]); // Проверка на переполнение\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to]; // Сохранить для утверждения в будущем\r\n        balanceOf[_from] -= _value; // Вычитать из отправителя\r\n        balanceOf[_to] += _value; // Добавить то же самое к получателю\r\n        Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances); // Утверждает используются на использование статического анализа для поиска ошибок в коде. Они никогда не должны терпеть неудачу\r\n    }\r\n\r\n/** \r\n* Перенос маркеров \r\n* \r\n* Отправить маркеры \"_value` на\" _to` с вашего счета \r\n* \r\n* @param _to адрес получателя \r\n* @param _value сумма для отправки \r\n*/\r\n\r\n    function transfer(address _to, uint256 _value) public onlyOwner {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner || msg.sender == owner2);\r\n        _;\r\n    }\r\n\r\n/** \r\n* Перенос маркеров с другого адреса \r\n* \r\n* Отправьте маркеры ' _value` в `_to` от имени `_from` \r\n* \r\n* @param _from адрес отправителя \r\n* @param _to адрес получателя \r\n* @param _value сумма для отправки \r\n*/\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n/** \r\n* Установите норму для другого адреса \r\n* \r\n* Позволяет \"_spender\" тратить не более чем \"_value\" маркеры в вашем имени \r\n* \r\n* @param _spender адрес уполномоченного проводить \r\n* @param _value максимальная сумма, которую они могут потратить \r\n*/\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n/** \r\n* Установить разрешение на другой адрес и уведомить \r\n* \r\n* Позволяет _spender тратить не более `пределах _value` маркеры в вашем имени, а потом пинг договор об этом \r\n* \r\n* @param _spender адрес уполномоченного проводить \r\n* @param _value максимальная сумма, которую они могут потратить \r\n* @param _extraData некоторую дополнительную информацию, чтобы отправить утвержденному договору \r\n*/\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n/** \r\n* Уничтожение токенов \r\n* \r\n* Удалить мдокенов \" _value` из системы необратимо \r\n* \r\n* @param _value количество токенов, чтобы сжечь \r\n*/\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Проверьте, достаточно ли у отправителя\r\n        balanceOf[msg.sender] -= _value;            // Вычитать из отправителя\r\n        totalSupply -= _value;                      // Обновления totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n/** \r\n* Уничтожение Токенов из другого аккаунта \r\n* \r\n* Удалить маркеры \"_value\" из системы необратимо от имени \"_from\". \r\n* \r\n* @param _from адрес отправителя * @парам пределах _value количество денег, чтобы сжечь \r\n*/\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Проверьте, достаточно ли целевого баланса\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Вычитать из основного баланса\r\n        allowance[_from][msg.sender] -= _value;             // Вычитать из резерва отправителя\r\n        totalSupply -= _value;                              // Обновление totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"tokendecimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"TokenERC20","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e537072696e74204469616d6f6e640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006535254444d440000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://3ec379266ae9d7434a458e91468bcf0568f4f03a8dc76d9cdb261a6fe0ed0881"}]}