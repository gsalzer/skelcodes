{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"BrookInu.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.6;\\n \\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n \\n        return c;\\n    }\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n \\n        return c;\\n    }\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n \\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n \\n        return c;\\n    }\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n \\n        return c;\\n    }\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n \\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n \\n/**\\n * BEP20 standard interface.\\n */\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function decimals() external view returns (uint8);\\n    function symbol() external view returns (string memory);\\n    function name() external view returns (string memory);\\n    function getOwner() external view returns (address);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n \\n/**\\n * Allows for contract ownership along with multi-address authorization\\n */\\nabstract contract Auth {\\n    address internal owner;\\n    mapping (address => bool) internal authorizations;\\n \\n    constructor(address _owner) {\\n        owner = _owner;\\n        authorizations[_owner] = true;\\n    }\\n \\n    /**\\n     * Function modifier to require caller to be contract owner\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(msg.sender), \\\"!OWNER\\\"); _;\\n    }\\n \\n    /**\\n     * Function modifier to require caller to be authorized\\n     */\\n    modifier authorized() {\\n        require(isAuthorized(msg.sender), \\\"!AUTHORIZED\\\"); _;\\n    }\\n \\n    /**\\n     * Authorize address. Owner only\\n     */\\n    function authorize(address adr) public onlyOwner {\\n        authorizations[adr] = true;\\n    }\\n \\n    /**\\n     * Remove address' authorization. Owner only\\n     */\\n    function unauthorize(address adr) public onlyOwner {\\n        authorizations[adr] = false;\\n    }\\n \\n    /**\\n     * Check if address is owner\\n     */\\n    function isOwner(address account) public view returns (bool) {\\n        return account == owner;\\n    }\\n \\n    /**\\n     * Return address' authorization status\\n     */\\n    function isAuthorized(address adr) public view returns (bool) {\\n        return authorizations[adr];\\n    }\\n \\n    /**\\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\\n     */\\n    function transferOwnership(address payable adr) public onlyOwner {\\n        owner = adr;\\n        authorizations[adr] = true;\\n        emit OwnershipTransferred(adr);\\n    }\\n \\n    event OwnershipTransferred(address owner);\\n}\\n \\ninterface IDEXFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n \\ninterface IDEXRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n \\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n \\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n \\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n \\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n \\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n \\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n \\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n \\ncontract BrookInu is IERC20, Auth {\\n    using SafeMath for uint256;\\n \\n    address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    string constant _name = 'BrookInu';\\n    string constant _symbol = 'BROOK';\\n    uint8 constant _decimals = 9;\\n    uint256 _totalSupply = 1000000000000000 * (10 ** _decimals);\\n    uint256 _maxTxAmount = _totalSupply / 100;\\n    uint256 _maxWalletAmount = _totalSupply / 25;\\n    mapping (address => uint256) _balances;\\n    mapping (address => mapping (address => uint256)) _allowances;\\n    mapping (address => bool) isFeeExempt;\\n    mapping (address => bool) isTxLimitExempt;\\n    mapping(address => uint256) _holderLastTransferTimestamp;\\n \\n    uint256 liquidityFee = 40;\\n    uint256 marketingFee = 40;\\n    uint256 teamFee = 20;\\n    uint256 totalFee = 100;\\n    uint256 feeDenominator = 1000;\\n \\n    address public autoLiquidityReceiver;\\n    address public marketingFeeReceiver;\\n    address public teamFeeReceiver;\\n \\n    IDEXRouter public router;\\n    address public pair;\\n    uint256 public launchedAt;\\n    uint256 public launchedTime;\\n    bool public swapEnabled = true;\\n \\n    uint256 public swapThreshold = _totalSupply / 10000; // 0.01%\\n    bool inSwap;\\n    modifier swapping() { inSwap = true; _; inSwap = false; }\\n \\n    constructor () Auth(msg.sender) {\\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\\n        _allowances[address(this)][address(router)] = uint256(-1);\\n \\n        isFeeExempt[owner] = true;\\n        isTxLimitExempt[owner] = true;\\n        isTxLimitExempt[address(this)] = true;\\n        autoLiquidityReceiver = msg.sender;\\n\\t    marketingFeeReceiver = address(0xa11C52486dF175393ad06Ba4870061F6AfFe0424);\\n\\t    teamFeeReceiver = address(0x505d09160703134e08E63Af12be6a90a119F7739);\\n        _balances[owner] = _totalSupply;\\n        emit Transfer(address(0), owner, _totalSupply);\\n    }\\n \\n    receive() external payable { }\\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\\n    function decimals() external pure override returns (uint8) { return _decimals; }\\n    function symbol() external pure override returns (string memory) { return _symbol; }\\n    function name() external pure override returns (string memory) { return _name; }\\n    function getOwner() external view override returns (address) { return owner; }\\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\n \\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _allowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n \\n    function approveMax(address spender) external returns (bool) {\\n        return approve(spender, uint256(-1));\\n    }\\n \\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        return _transferFrom(msg.sender, recipient, amount);\\n    }\\n \\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        if(_allowances[sender][msg.sender] != uint256(-1)){\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \\\"Insufficient Allowance\\\");\\n        }\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n \\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        if(shouldSwapBack()){ swapBack(); }\\n        if(!launched() && recipient == pair){ require(_balances[sender] > 0); launch(); }\\n        _balances[sender] = _balances[sender].sub(amount, \\\"Insufficient Balance\\\");\\n\\t    if(launchMode() && recipient != pair){require (_balances[recipient] + amount <= _maxWalletAmount);}\\n\\t    if(launchMode() && recipient != pair && block.timestamp < _holderLastTransferTimestamp[recipient] + 20){\\n        _holderLastTransferTimestamp[recipient] = block.timestamp;\\n\\t    _balances[address(this)] = _balances[address(this)].add(amount);\\n\\t    emit Transfer(sender, recipient, 0);\\n\\t    emit Transfer(sender, address(this), amount);\\n\\t    return true;}\\n \\n        _holderLastTransferTimestamp[recipient] = block.timestamp;\\n\\t    uint256 amountReceived;\\n        if(!isFeeExempt[recipient]){amountReceived= shouldTakeFee(sender) ? takeFee(sender, amount) : amount;}else{amountReceived = amount;}\\n        _balances[recipient] = _balances[recipient].add(amountReceived);\\n        emit Transfer(sender, recipient, amountReceived);\\n        return true;\\n    }\\n \\n    function getTotalFee() public view returns (uint256) {\\n        if(launchedAt + 6 > block.number){ return feeDenominator.sub(1); }\\n        return totalFee;\\n    }\\n \\n    function shouldTakeFee(address sender) internal view returns (bool) {\\n       return !isFeeExempt[sender];\\n    }\\n \\n    function takeFee(address sender,uint256 amount) internal returns (uint256) {\\n\\t    uint256 feeAmount;\\n\\t    if(launchMode() && amount > _maxTxAmount){\\n\\t    feeAmount = amount.sub(_maxTxAmount);       \\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\\n        emit Transfer(sender, address(this), feeAmount);\\n        return amount.sub(feeAmount);}\\n \\n        feeAmount = amount.mul(getTotalFee()).div(feeDenominator);\\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\\n        emit Transfer(sender, address(this), feeAmount);\\n        return amount.sub(feeAmount);\\n    }\\n \\n    function shouldSwapBack() internal view returns (bool) {\\n        return msg.sender != pair\\n        && !inSwap\\n        && swapEnabled\\n        && _balances[address(this)] >= swapThreshold;\\n    }\\n \\n    function swapBack() internal swapping {\\n        uint256 amountToLiquify = balanceOf(address(this)).mul(liquidityFee).div(totalFee).div(2);\\n        uint256 amountToSwap = balanceOf(address(this)).sub(amountToLiquify);\\n \\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = WETH;\\n \\n        uint256 balanceBefore = address(this).balance;\\n \\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp+360\\n        );\\n \\n        uint256 amountETH = address(this).balance.sub(balanceBefore);\\n        uint256 totalETHFee = totalFee.sub(liquidityFee.div(2));\\n        uint256 amountETHLiquidity = amountETH.mul(liquidityFee).div(totalETHFee).div(2);\\n        uint256 amountETHTeam = amountETH.mul(teamFee).div(totalETHFee);\\n        uint256 amountETHMarketing = amountETH.mul(marketingFee).div(totalETHFee);\\n    \\tpayable(marketingFeeReceiver).transfer(amountETHMarketing);\\n    \\tpayable(teamFeeReceiver).transfer(amountETHTeam);\\n \\n \\n        if(amountToLiquify > 0){\\n            router.addLiquidityETH{value: amountETHLiquidity}(\\n                address(this),\\n                amountToLiquify,\\n                0,\\n                0,\\n                autoLiquidityReceiver,\\n                block.timestamp+360\\n            );\\n            emit AutoLiquify(amountETHLiquidity, amountToLiquify);\\n        }\\n    }\\n \\n    function launched() internal view returns (bool) {\\n        return launchedAt != 0;\\n    }\\n \\n    function launch() internal{\\n\\t    require(!launched());\\n        launchedAt = block.number;\\n\\t    launchedTime = block.timestamp;\\n    }\\n \\n    function manuallySwap()external authorized{\\n        swapBack();\\n    }\\n \\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\\n        isFeeExempt[holder] = exempt;\\n    }\\n \\n    function setFeeReceivers(address _autoLiquidityReceiver, address _teamFeeReceiver, address _marketingFeeReceiver) external onlyOwner {\\n        autoLiquidityReceiver = _autoLiquidityReceiver;\\n        teamFeeReceiver = _teamFeeReceiver;\\n        marketingFeeReceiver = _marketingFeeReceiver;\\n    }\\n \\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external onlyOwner {\\n        swapEnabled = _enabled;\\n        swapThreshold =_totalSupply.div(_amount);\\n    }\\n \\n    function setFees(uint256 _liquidityFee, uint256 _teamFee, uint256 _marketingFee, uint256 _feeDenominator) external authorized {\\n        liquidityFee = _liquidityFee;\\n        teamFee = _teamFee;\\n        marketingFee = _marketingFee;\\n        totalFee = _liquidityFee.add(teamFee).add(_marketingFee);\\n        feeDenominator = _feeDenominator;\\n        require(totalFee < feeDenominator/5);\\n    }\\n \\n    function launchModeStatus() external view returns(bool) {\\n        return launchMode();\\n    }\\n \\n    function launchMode() internal view returns(bool) {\\n        return launchedAt !=0 && launchedAt + 6 < block.number && launchedTime + 10 minutes >= block.timestamp ;\\n    }\\n \\n    function recoverEth() external onlyOwner() {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n \\n    function recoverToken(address _token, uint256 amount) external authorized returns (bool _sent){\\n        _sent = IERC20(_token).transfer(msg.sender, amount);\\n    }\\n \\n    event AutoLiquify(uint256 amountETH, uint256 amountToken);\\n \\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchModeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manuallySwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BrookInu","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}