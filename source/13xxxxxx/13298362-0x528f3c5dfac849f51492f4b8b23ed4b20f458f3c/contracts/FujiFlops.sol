// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";

import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - a minter role that allows for token minting (creation)
 *  - ability for holders to burn (destroy) their tokens
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
contract FujiFlops is
  Initializable, ContextUpgradeable,
  AccessControlEnumerableUpgradeable,
  ERC721EnumerableUpgradeable,
  ERC721BurnableUpgradeable,
  OwnableUpgradeable
{
  function initialize(
    string memory name,
    string memory symbol,
    string memory baseTokenURI,
    uint256 maxSupply_
  ) public virtual initializer {
    __ERC721PresetMinterAutoId_init(name, symbol, baseTokenURI, maxSupply_);
  }

  using CountersUpgradeable for CountersUpgradeable.Counter;

  bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");

  CountersUpgradeable.Counter private _tokenIdTracker;

  uint256 public maxSupply;

  string private _baseTokenURI;

  string public contractURI;

  /**
   * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
   * account that deploys the contract.
   *
   * Token URIs will be autogenerated based on `baseURI` and their token IDs.
   * See {ERC721-tokenURI}.
   */
  function __ERC721PresetMinterAutoId_init(
      string memory name,
      string memory symbol,
      string memory baseTokenURI,
      uint256 maxSupply_
      ) internal initializer {
    __Context_init_unchained();
    __ERC165_init_unchained();
    __AccessControl_init_unchained();
    __AccessControlEnumerable_init_unchained();
    __ERC721_init_unchained(name, symbol);
    __ERC721Enumerable_init_unchained();
    __ERC721Burnable_init_unchained();
    __Ownable_init();
    __ERC721PresetMinterAutoId_init_unchained(baseTokenURI, maxSupply_);
  }

  function __ERC721PresetMinterAutoId_init_unchained(
    string memory baseTokenURI,
    uint256 maxSupply_
  ) internal initializer {
    _baseTokenURI = baseTokenURI;
    maxSupply = maxSupply_;

    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
    _setupRole(MINTER_ROLE, _msgSender());
    _setRoleAdmin(MINTER_ROLE, DEFAULT_ADMIN_ROLE);
  }

  function _baseURI() internal view virtual override returns (string memory) {
    return _baseTokenURI;
  }

  // The following are DEFAULT_ADMIN_ROLE only

  function setBaseURI(string calldata newURI) external {
    require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),"Must have admin role");
    _baseTokenURI = newURI;
  }

  function setContractURI(string calldata newURI) external {
    require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),"Must have admin role");
    contractURI = newURI;
  }

  function setMaxSupply(uint256 newMaxSupply) external {
    require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),"Must have admin role");
    maxSupply = newMaxSupply;
  }

  // The following are MINTER_ROLE only

  /**
   * @dev Creates a new token for `to`. Its token ID will be automatically
   * assigned (and available on the emitted {IERC721-Transfer} event), and the token
   * URI autogenerated based on the base URI passed at construction.
   *
   * See {ERC721-_mint}.
   *
   * Requirements:
   *
   * - the caller must have the `MINTER_ROLE`.
   */
  function mint(address to) public virtual returns(bool success) {
    require(hasRole(MINTER_ROLE, _msgSender()), "Must have minter role to mint");
    require(_tokenIdTracker._value < maxSupply, "Max Supply reached");

    // We cannot just use balanceOf to create the new tokenId because tokens
    // can be burned (destroyed), so we need a separate counter.
    _mint(to, _tokenIdTracker.current());
    _tokenIdTracker.increment();
    success = true;
  }

  function _beforeTokenTransfer(
    address from,
    address to,
    uint256 tokenId
  ) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {
    super._beforeTokenTransfer(from, to, tokenId);
  }

  /**
   * @dev See {IERC165-supportsInterface}.
   */
  function supportsInterface(bytes4 interfaceId)
    public
    view
    virtual
    override(AccessControlEnumerableUpgradeable, ERC721Upgradeable, ERC721EnumerableUpgradeable)
    returns (bool)
  {
      return super.supportsInterface(interfaceId);
  }
  uint256[48] private __gap;
}

