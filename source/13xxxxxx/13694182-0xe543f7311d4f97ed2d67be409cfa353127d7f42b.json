{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Satoshis.sol\": {\r\n      \"content\": \"//Contract based on https://docs.openzeppelin.com/contracts/3.x/erc721\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Mintpass.sol\\\";\\n\\n\\ncontract Satoshis is ERC721URIStorage, Ownable, Pausable, ERC721Enumerable, Mintpass {\\n\\n    using Counters for Counters.Counter;\\n\\tCounters.Counter private _tokenIds;\\n\\n\\n    //Ensure unique tokenURIs are used\\n    mapping (string => bool) private _mintedTokenUris;\\n\\n\\n    //Collection limits and counters\\n\\tuint256 public tokensLimit;\\n\\tuint256 public tokensMinted;\\n\\tuint256 public tokensAvailable;\\n\\n    uint256 public mintPassTokensLimit;\\n    uint256 public mintPassTokensMinted;\\n\\n    uint256 public wlOneTokensLimit;\\n    uint256 public wlOneTokensMinted;    \\n\\n    //Mint stages\\n    bool public wlOneStatus;\\n    bool public mintPassStatus;\\n    bool public publicMintStatus;\\n    bool public gloablMintStatus; //allows for minting to happen even if the contratc is paused & vice versa\\n\\n\\n    //Destination addresses\\n\\taddress payable teamOne;\\n    address payable teamTwo;\\n\\n\\n    //Load mint passes\\n    mapping(uint256 => address) private _mintPasses;\\n\\n\\n    //Mint prices\\n    uint256 public publicMintPrice;\\n    uint256 public wlMintPrice;\\n    \\n    //whooray, new Satoshi is minted\\n\\tevent UpdateTokenCounts(uint256 tokensMintedNew,uint256 tokensAvailableNew);\\n\\n\\n    //Contract constructor\\n\\tconstructor(uint256 tokensLimitInit, uint256 wlOneTokensLimitInit, uint256 mintPassTokensLimitInit, address payable destAddOne, address payable destAddTwo) public ERC721(\\\"We Are Satoshis\\\",\\\"W.A.S.\\\") \\n    {\\n\\n\\t\\t//Set global collection size & initial number of available tokens\\n        tokensLimit = tokensLimitInit;\\n\\t\\ttokensAvailable = tokensLimitInit;\\n\\t\\ttokensMinted = 0;\\n\\n        //Set destination addresses\\n\\t\\tteamOne = destAddOne;\\n        teamTwo = destAddTwo;\\n\\n        //Set initial mint stages\\n        wlOneStatus = true;\\n        mintPassStatus = true;\\n        publicMintStatus = false;\\n        gloablMintStatus = true;\\n\\n        //Set token availability per stage\\n        wlOneTokensLimit = wlOneTokensLimitInit;\\n        mintPassTokensLimit = mintPassTokensLimitInit;\\n\\n        //Set counters for whitelists and mintpasses\\n        mintPassTokensMinted = 0;\\n        wlOneTokensMinted = 0;\\n\\n        publicMintPrice = 80000000000000000;\\n        wlMintPrice = 60000000000000000;\\n\\n\\t}\\n\\n\\n\\n\\nfunction masterMint(address to)\\n    internal\\n    virtual\\n    returns (uint256)\\n    {\\n        require(tokensAvailable >= 1,\\\"All tokens have been minted\\\");\\n        require(gloablMintStatus,\\\"Minting is disabled\\\");\\n\\n        _tokenIds.increment();\\n        uint256 newItemId = _tokenIds.current();\\n        _mint(to,newItemId);\\n\\n        tokensMinted = newItemId;\\n        tokensAvailable = tokensLimit - newItemId;\\n\\n\\n        emit UpdateTokenCounts(tokensMinted,tokensAvailable);\\n        return newItemId;\\n    }\\n\\n\\n//Minting methods : Mint pass\\n\\nfunction mintSingleMintPass (address to, uint256 mintPass)\\n    public\\n    virtual\\n    returns (uint256)\\n    {\\n        require(verifyMintPass(mintPass,to),\\\"This mint pass was used already\\\");\\n        require(mintPassStatus,\\\"Mint pass minting is disabled\\\");\\n        require(mintPassTokensMinted <= mintPassTokensLimit,\\\"All Mint Pass tokens have already been minted\\\");\\n\\n        uint256 newTokenId = masterMint(to);\\n        mintPassTokensMinted++;\\n        invalidateMintPass(mintPass);\\n\\n        return newTokenId;\\n    }\\n\\n\\n\\nfunction multiMintPassMint(address to, uint256 quantity, uint[] memory mintPases)\\n    public\\n    virtual\\n    {\\n        require(quantity <= 10,\\\"Can not mint that many tokens at once\\\");\\n        uint256 i;\\n        for(i = 0; i < quantity; i++) {\\n            mintSingleMintPass(to, mintPases[i]);\\n        }\\n    }\\n\\n\\n\\n\\n//Minting methods : Whitelist\\n\\nfunction wlOneMintToken(address to, uint256 quantity) \\n\\tpublic \\n\\tvirtual \\n\\tpayable \\n    {\\n        require(msg.value >= (wlMintPrice*quantity),\\\"Not enough ETH sent\\\");\\n        require(tokensAvailable >= quantity,\\\"All tokens have been minted\\\");\\n        require(wlOneStatus,\\\"Whitelist one is not minting anymore\\\");\\n        require(wlOneTokensMinted <= wlOneTokensLimit,\\\"All whitelist #1 tokens have been minted\\\");\\n        require(quantity <= 10,\\\"Can not mint that many tokens at once\\\");\\n\\n        passOnEth(msg.value);\\n\\n        uint256 i;\\n        for(i = 0; i < quantity; i++) {\\n            masterMint(to);\\n            wlOneTokensMinted++;\\n        }\\n    }\\n\\n//Minting methods : Public\\n\\nfunction publicMintToken(address to, uint256 quantity) \\n    public \\n    virtual \\n    payable \\n    {\\n        require(msg.value >= (publicMintPrice*quantity),\\\"Not enough ETH sent\\\");\\n        require(tokensAvailable >= quantity,\\\"All tokens have been minted\\\");\\n        require(publicMintStatus,\\\"The General Public Mint is not active at the moment\\\");\\n        require(quantity <= 10,\\\"Can not mint that many tokens at once\\\");\\n\\n        passOnEth(msg.value);\\n\\n        uint256 i;\\n        for(i = 0; i < quantity; i++) {\\n            masterMint(to);\\n        }\\n    }\\n\\n//Honorary mint\\nfunction honoraryMint(address to, uint256 quantity) \\n    public \\n    virtual \\n    onlyOwner\\n    {\\n        require(tokensAvailable >= quantity,\\\"All tokens have been minted\\\");\\n        require(quantity <= 10,\\\"Can not mint that many tokens at once\\\");\\n        uint256 i;\\n        for(i = 0; i < quantity; i++) {\\n            masterMint(to);\\n        }\\n    }\\n\\n\\n\\n/*\\n    General methods, utilities.\\n    Utilities are onlyOwner.\\n*/\\n\\n//Update collection size\\nfunction setCollectionSize (uint256 newCollectionSize)\\n    public\\n    onlyOwner\\n    virtual\\n    returns (uint256)\\n    {\\n        require(newCollectionSize >= tokensMinted,\\\"Cant set the collection size this low\\\");\\n        tokensLimit = newCollectionSize;\\n        tokensAvailable = tokensLimit - tokensMinted;\\n        return tokensLimit;\\n    }\\n\\n//Modify the limits for WL1, emergency use only\\nfunction setWlOneLimit (uint256 newWlOneLimit)\\n    public\\n    onlyOwner\\n    virtual\\n    returns (uint256)\\n    {\\n        wlOneTokensLimit = newWlOneLimit;\\n        return wlOneTokensLimit;\\n    }\\n\\n//Modify public sale price\\nfunction setPublicSalePrice (uint256 newPublicPrice)\\n    public\\n    onlyOwner\\n    virtual\\n    returns (uint256)\\n    {\\n        publicMintPrice = newPublicPrice;\\n        return publicMintPrice;\\n    }\\n\\n\\n//Toggle global minting\\nfunction toggleGlobalMinting ()\\n    public\\n    onlyOwner\\n    virtual\\n    {\\n        gloablMintStatus = !gloablMintStatus;\\n    }\\n\\n//Toggle Wl1 minting\\nfunction toggleWlOneMinting ()\\n    public\\n    onlyOwner\\n    virtual\\n    {\\n        wlOneStatus = !wlOneStatus;\\n    }\\n\\n//Toggle Public minting\\nfunction togglePublicMinting ()\\n    public\\n    onlyOwner\\n    virtual\\n    {\\n        publicMintStatus = !publicMintStatus;\\n    }\\n\\n//Toggle Mint Pass minting\\nfunction toggleMintPassMinting ()\\n    public\\n    onlyOwner\\n    virtual\\n    {\\n        mintPassStatus = !mintPassStatus;\\n    }\\n\\n\\nfunction pauseContract() public onlyOwner whenNotPaused \\n{\\n\\n\\t_pause();\\n}\\n\\nfunction unPauseContract() public onlyOwner whenPaused \\n{\\n\\t_unpause();\\n}\\n\\n function passOnEth(uint256 amount) public payable {\\n    uint singleAmount = amount/2;\\n\\n    (bool sentToAddressOne, bytes memory dataToAddressOne) = teamOne.call{value: singleAmount}(\\\"\\\");\\n    (bool sentToAddressTwo, bytes memory dataToAddressTwo) = teamTwo.call{value: singleAmount}(\\\"\\\");\\n\\n\\n    require(sentToAddressOne, \\\"Failed to send Ether to Team Address One\\\");\\n    require(sentToAddressTwo, \\\"Failed to send Ether to Team Address Two\\\");\\n\\n}\\n\\n\\nfunction _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n) internal virtual override (ERC721,ERC721Enumerable)  {\\n    super._beforeTokenTransfer(from, to, tokenId);\\n    require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n\\n}\\n\\n\\nfunction _burn(uint256 tokenId) \\n\\tinternal \\n\\tvirtual \\n\\toverride (ERC721, ERC721URIStorage) \\n{\\n    super._burn(tokenId);\\n\\n}\\n\\n\\nfunction tokenURI(uint256 tokenId)\\npublic \\nview \\nvirtual \\noverride (ERC721, ERC721URIStorage)\\n\\treturns (string memory) \\n\\t{\\n\\n    return super.tokenURI(tokenId);\\n}\\n\\nfunction _baseURI() \\ninternal \\nview \\nvirtual \\noverride (ERC721) \\nreturns (string memory) \\n{\\n    return \\\"https://meta.wearesatoshis.com/\\\";\\n}\\n\\nfunction supportsInterface(bytes4 interfaceId) \\npublic \\nview \\nvirtual \\noverride(ERC721, ERC721Enumerable) returns (bool) \\n{\\n    return super.supportsInterface(interfaceId);\\n}\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Mintpass.sol\": {\r\n      \"content\": \"//Contract based on https://docs.openzeppelin.com/contracts/3.x/erc721\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\ncontract Mintpass {\\n    mapping(uint256 => address) private _mintPasses;\\n\\tconstructor() {\\n        //Available mintpasses\\n        _mintPasses[3628] = 0x4e1b83Dbc5F77faF3B3d450c2ea30BCD441d67b2;\\n        _mintPasses[3629] = 0x4e1b83Dbc5F77faF3B3d450c2ea30BCD441d67b2;\\n        _mintPasses[3630] = 0x4e1b83Dbc5F77faF3B3d450c2ea30BCD441d67b2;\\n        _mintPasses[3631] = 0x4e1b83Dbc5F77faF3B3d450c2ea30BCD441d67b2;\\n        _mintPasses[3632] = 0x4e1b83Dbc5F77faF3B3d450c2ea30BCD441d67b2;\\n        _mintPasses[3633] = 0x826ae03F697BbD3dAD37E9b34e7a8989d9317fc4;\\n        _mintPasses[3634] = 0x826ae03F697BbD3dAD37E9b34e7a8989d9317fc4;\\n        _mintPasses[3635] = 0x79dbBF34F0158E3497dAd620E40b904a6a5C7F67;\\n        _mintPasses[3636] = 0x79dbBF34F0158E3497dAd620E40b904a6a5C7F67;\\n        _mintPasses[3637] = 0x79dbBF34F0158E3497dAd620E40b904a6a5C7F67;\\n        _mintPasses[3638] = 0x0eCddcF41754360AB129d7Ca4c8ABf220F9c32BD;\\n        _mintPasses[3639] = 0x0eCddcF41754360AB129d7Ca4c8ABf220F9c32BD;\\n        _mintPasses[3640] = 0x0eCddcF41754360AB129d7Ca4c8ABf220F9c32BD;\\n        _mintPasses[3641] = 0xE38ada1fd757915a5B7458b828e00A7416CB8ed7;\\n        _mintPasses[3642] = 0xE38ada1fd757915a5B7458b828e00A7416CB8ed7;\\n        _mintPasses[3643] = 0xA613e95408dbEfc3aeCB4630BDE04E757Bc46fD8;\\n        _mintPasses[3644] = 0xA613e95408dbEfc3aeCB4630BDE04E757Bc46fD8;\\n        _mintPasses[3645] = 0x5c5D1c68957EF6E9e46303e3CB02a0e3AecE1678;\\n        _mintPasses[3646] = 0x5c5D1c68957EF6E9e46303e3CB02a0e3AecE1678;\\n        _mintPasses[3647] = 0xF8f18ff9969aB94299e763e038902262002341CD;\\n        _mintPasses[3648] = 0xF8f18ff9969aB94299e763e038902262002341CD;\\n        _mintPasses[3649] = 0x5f0Fa6E54B9296622235CC146E02aaEaC667325a;\\n        _mintPasses[3650] = 0x5f0Fa6E54B9296622235CC146E02aaEaC667325a;\\n        _mintPasses[3651] = 0x5f0Fa6E54B9296622235CC146E02aaEaC667325a;\\n        _mintPasses[3652] = 0x5f0Fa6E54B9296622235CC146E02aaEaC667325a;\\n        _mintPasses[3653] = 0x5f0Fa6E54B9296622235CC146E02aaEaC667325a;\\n        _mintPasses[3654] = 0xE7bFCE6D3613D20ea879430EA78279Ec3eeCB473;\\n        _mintPasses[3655] = 0xE7bFCE6D3613D20ea879430EA78279Ec3eeCB473;\\n        _mintPasses[3656] = 0xc8c626980f06e95825cf2e12F762D2eaB8CA7b46;\\n        _mintPasses[3657] = 0xc8c626980f06e95825cf2e12F762D2eaB8CA7b46;\\n        _mintPasses[3658] = 0xc8c626980f06e95825cf2e12F762D2eaB8CA7b46;\\n        _mintPasses[3659] = 0x4384293860C81Dc6a8A248a648B6dCa35fF3aA33;\\n        _mintPasses[3660] = 0x4384293860C81Dc6a8A248a648B6dCa35fF3aA33;\\n        _mintPasses[3661] = 0x4384293860C81Dc6a8A248a648B6dCa35fF3aA33;\\n        _mintPasses[3662] = 0x72988B423c86afed473278E8d19a79456C404995;\\n        _mintPasses[3663] = 0x72988B423c86afed473278E8d19a79456C404995;\\n        _mintPasses[3664] = 0x72988B423c86afed473278E8d19a79456C404995;\\n        _mintPasses[3665] = 0x72988B423c86afed473278E8d19a79456C404995;\\n        _mintPasses[3666] = 0x72988B423c86afed473278E8d19a79456C404995;\\n        _mintPasses[3667] = 0x6F14AFA784Ff0c764ecCB5F7A133403D5b7a4D34;\\n        _mintPasses[3668] = 0x6F14AFA784Ff0c764ecCB5F7A133403D5b7a4D34;\\n        _mintPasses[3669] = 0x6F14AFA784Ff0c764ecCB5F7A133403D5b7a4D34;\\n        _mintPasses[3670] = 0x6F14AFA784Ff0c764ecCB5F7A133403D5b7a4D34;\\n        _mintPasses[3671] = 0x6F14AFA784Ff0c764ecCB5F7A133403D5b7a4D34;\\n        _mintPasses[3672] = 0x513E8473FC9658c50EA01D4a0D358458b15932c5;\\n        _mintPasses[3673] = 0x513E8473FC9658c50EA01D4a0D358458b15932c5;\\n        _mintPasses[3674] = 0x513E8473FC9658c50EA01D4a0D358458b15932c5;\\n        _mintPasses[3675] = 0x513E8473FC9658c50EA01D4a0D358458b15932c5;\\n        _mintPasses[3676] = 0x513E8473FC9658c50EA01D4a0D358458b15932c5;\\n        _mintPasses[3677] = 0x399190C47dD486A553dEDCbD5465f811ab15C32B;\\n        _mintPasses[3678] = 0x399190C47dD486A553dEDCbD5465f811ab15C32B;\\n        _mintPasses[3679] = 0x399190C47dD486A553dEDCbD5465f811ab15C32B;\\n        _mintPasses[3680] = 0x399190C47dD486A553dEDCbD5465f811ab15C32B;\\n        _mintPasses[3681] = 0x399190C47dD486A553dEDCbD5465f811ab15C32B;\\n        _mintPasses[3682] = 0x72988B423c86afed473278E8d19a79456C404995;\\n        _mintPasses[3683] = 0x72988B423c86afed473278E8d19a79456C404995;\\n        _mintPasses[3684] = 0x6F14AFA784Ff0c764ecCB5F7A133403D5b7a4D34;\\n        _mintPasses[3685] = 0x6F14AFA784Ff0c764ecCB5F7A133403D5b7a4D34;\\n        _mintPasses[3686] = 0x5f0Fa6E54B9296622235CC146E02aaEaC667325a;\\n        _mintPasses[3687] = 0x5f0Fa6E54B9296622235CC146E02aaEaC667325a;\\n        _mintPasses[3688] = 0x822166Dc6A1ADc21ae1B7fbA3b700167cf0f0a6c;\\n        _mintPasses[3689] = 0x822166Dc6A1ADc21ae1B7fbA3b700167cf0f0a6c;\\n        _mintPasses[3691] = 0x822166Dc6A1ADc21ae1B7fbA3b700167cf0f0a6c;\\n        _mintPasses[3692] = 0x56E712FC5bc7B92aE2DD96585a5d4985913Bfd23;\\n        _mintPasses[3693] = 0x56E712FC5bc7B92aE2DD96585a5d4985913Bfd23;\\n        _mintPasses[3694] = 0x876b32129a32B21d86c82b0630fb3c6DDBB0e7B8;\\n        _mintPasses[3695] = 0x876b32129a32B21d86c82b0630fb3c6DDBB0e7B8;\\n        _mintPasses[3696] = 0x995418c315Ff98763dCe8e57695f1C05548b4eF5;\\n        _mintPasses[3697] = 0x995418c315Ff98763dCe8e57695f1C05548b4eF5;\\n        _mintPasses[3698] = 0x015732d3b7cda5826Ae3177a5A16ca0e271eA13F;\\n        _mintPasses[3699] = 0x015732d3b7cda5826Ae3177a5A16ca0e271eA13F;\\n        _mintPasses[3700] = 0x75AbF28b9CAe8edb0c1209efF172f9420CC63549;\\n        _mintPasses[3701] = 0x75AbF28b9CAe8edb0c1209efF172f9420CC63549;\\n        _mintPasses[3702] = 0x75AbF28b9CAe8edb0c1209efF172f9420CC63549;\\n        _mintPasses[3703] = 0xF8f18ff9969aB94299e763e038902262002341CD;\\n        _mintPasses[3704] = 0x56a68181A1358AF92C680610B5fD7e2d2cF6BF65;\\n        _mintPasses[3705] = 0x56a68181A1358AF92C680610B5fD7e2d2cF6BF65;\\n        _mintPasses[3706] = 0x56a68181A1358AF92C680610B5fD7e2d2cF6BF65;\\n        _mintPasses[3707] = 0x5A6bdC17B9F89Cb52b38dad319dF293b037a43d4;\\n        _mintPasses[3708] = 0x5A6bdC17B9F89Cb52b38dad319dF293b037a43d4;\\n        _mintPasses[3709] = 0x5A6bdC17B9F89Cb52b38dad319dF293b037a43d4;\\n        _mintPasses[3710] = 0x175F02F6473EcD2E87d450Ef33400C4eE673C387;\\n        _mintPasses[3711] = 0x175F02F6473EcD2E87d450Ef33400C4eE673C387;\\n        _mintPasses[3712] = 0xDF1e3abB229d42A182aD61ce8a63355a8A3EB0F8;\\n        _mintPasses[3713] = 0xDF1e3abB229d42A182aD61ce8a63355a8A3EB0F8;\\n        _mintPasses[3714] = 0xED721dC63328be92A08b6b7D677e11100C945eA9;\\n        _mintPasses[3715] = 0xED721dC63328be92A08b6b7D677e11100C945eA9;\\n        _mintPasses[3716] = 0xb6ddE9a985c77d7bC62B171582819D995a51C3bf;\\n        _mintPasses[3717] = 0xb6ddE9a985c77d7bC62B171582819D995a51C3bf;\\n        _mintPasses[3718] = 0xd469CD19CEFA18e4eb9112e57A47e09398d98766;\\n        _mintPasses[3719] = 0xd469CD19CEFA18e4eb9112e57A47e09398d98766;\\n        _mintPasses[3720] = 0x682ae71bae517bcc4179a1d66223fcDfFb186581;\\n        _mintPasses[3721] = 0x682ae71bae517bcc4179a1d66223fcDfFb186581;\\n        _mintPasses[3722] = 0x682ae71bae517bcc4179a1d66223fcDfFb186581;\\n        _mintPasses[3723] = 0xE495C36e756Ba677D5Ae8fb868f8c8A41cc51611;\\n        _mintPasses[3724] = 0xE495C36e756Ba677D5Ae8fb868f8c8A41cc51611;\\n        _mintPasses[3725] = 0xE495C36e756Ba677D5Ae8fb868f8c8A41cc51611;\\n        _mintPasses[3726] = 0xE495C36e756Ba677D5Ae8fb868f8c8A41cc51611;\\n        _mintPasses[3727] = 0xE495C36e756Ba677D5Ae8fb868f8c8A41cc51611;\\n        _mintPasses[3728] = 0x2eea4706F85b9A2D5DD9e9ff007F27C07443EAB1;\\n        _mintPasses[3729] = 0x2eea4706F85b9A2D5DD9e9ff007F27C07443EAB1;\\n        _mintPasses[3730] = 0xD77D92f3C97B5ce6430560bd1Ab298E82ed4E058;\\n        _mintPasses[3731] = 0xD77D92f3C97B5ce6430560bd1Ab298E82ed4E058;\\n        _mintPasses[3732] = 0xD77D92f3C97B5ce6430560bd1Ab298E82ed4E058;\\n        _mintPasses[3733] = 0x2c1a74debC7f797972EdbdA51554BE887594008F;\\n        _mintPasses[3734] = 0x2c1a74debC7f797972EdbdA51554BE887594008F;\\n        _mintPasses[3735] = 0x215867219e590352f50f5c3B8cE2587236138494;\\n        _mintPasses[3736] = 0x215867219e590352f50f5c3B8cE2587236138494;\\n        _mintPasses[3737] = 0xE57b245a1b403A56669f3F30b8db4ea94051E25D;\\n        _mintPasses[3738] = 0x667B2a94Dd4053508C7440EA1F902694336B9814;\\n        _mintPasses[3739] = 0x667B2a94Dd4053508C7440EA1F902694336B9814;\\n        _mintPasses[3740] = 0x667B2a94Dd4053508C7440EA1F902694336B9814;\\n        _mintPasses[3741] = 0x667B2a94Dd4053508C7440EA1F902694336B9814;\\n        _mintPasses[3742] = 0x667B2a94Dd4053508C7440EA1F902694336B9814;\\n        _mintPasses[3743] = 0x81083379a8c41501B39986D5C74428Dd618EB440;\\n        _mintPasses[3744] = 0x81083379a8c41501B39986D5C74428Dd618EB440;\\n        _mintPasses[3745] = 0x81083379a8c41501B39986D5C74428Dd618EB440;\\n        _mintPasses[3746] = 0x81083379a8c41501B39986D5C74428Dd618EB440;\\n        _mintPasses[3747] = 0x81083379a8c41501B39986D5C74428Dd618EB440;\\n        _mintPasses[3748] = 0x369DCD945f2ec96EFC489D9541b47cCa9594E9Fc;\\n        _mintPasses[3749] = 0x369DCD945f2ec96EFC489D9541b47cCa9594E9Fc;\\n        _mintPasses[3750] = 0x3C132E2d16f7452bdfAEFaE6C37b81e0FF83e749;\\n        _mintPasses[3751] = 0x3C132E2d16f7452bdfAEFaE6C37b81e0FF83e749;\\n        _mintPasses[3752] = 0x3C132E2d16f7452bdfAEFaE6C37b81e0FF83e749;\\n        _mintPasses[3753] = 0x5c5D1c68957EF6E9e46303e3CB02a0e3AecE1678;\\n        _mintPasses[3754] = 0x97874cf634457f07E7f1888C5C47D70DFAA542cb;\\n        _mintPasses[3755] = 0x97874cf634457f07E7f1888C5C47D70DFAA542cb;\\n        _mintPasses[3756] = 0xb261F055621fb3D19b86CD87d499b5aD9a561115;\\n        _mintPasses[3757] = 0xb261F055621fb3D19b86CD87d499b5aD9a561115;\\n        _mintPasses[3758] = 0xEd62B641dB277c9C6A2bA6D7246A1d76E483C11C;\\n        _mintPasses[3759] = 0xEd62B641dB277c9C6A2bA6D7246A1d76E483C11C;\\n        _mintPasses[3760] = 0x4384293860C81Dc6a8A248a648B6dCa35fF3aA33;\\n        _mintPasses[3761] = 0xec7dA9b90713B119969a8309607197e5A8606493;\\n        _mintPasses[3762] = 0xec7dA9b90713B119969a8309607197e5A8606493;\\n        _mintPasses[3763] = 0x0e0bDf28A0324dD3639520Cd189983F194132825;\\n        _mintPasses[3764] = 0x0e0bDf28A0324dD3639520Cd189983F194132825;\\n        _mintPasses[3765] = 0x0e0bDf28A0324dD3639520Cd189983F194132825;\\n        _mintPasses[3766] = 0x1e27F3175a52877CC8C4e3115B2669037381DeDc;\\n        _mintPasses[3767] = 0x1e27F3175a52877CC8C4e3115B2669037381DeDc;\\n        _mintPasses[3768] = 0x1e27F3175a52877CC8C4e3115B2669037381DeDc;\\n        _mintPasses[3769] = 0x1e27F3175a52877CC8C4e3115B2669037381DeDc;\\n        _mintPasses[3770] = 0x1e27F3175a52877CC8C4e3115B2669037381DeDc;\\n        _mintPasses[3771] = 0x1FC9aD1d4b2Ec8D78CfDA9FC35Cf729b9B49E7B6;\\n        _mintPasses[3772] = 0x1FC9aD1d4b2Ec8D78CfDA9FC35Cf729b9B49E7B6;\\n        _mintPasses[3773] = 0x1877e5A2B21dBC2EB73eC1b8838461e080932A9f;\\n        _mintPasses[3774] = 0x1877e5A2B21dBC2EB73eC1b8838461e080932A9f;\\n        _mintPasses[3775] = 0xA219F044dc6d726f61249c7279EcFa457D6Aaea2;\\n        _mintPasses[3776] = 0xA219F044dc6d726f61249c7279EcFa457D6Aaea2;\\n        _mintPasses[3777] = 0x0F683E30E71Ba4B5c1f610b675c8A48BB7cB1530;\\n        _mintPasses[3778] = 0x0F683E30E71Ba4B5c1f610b675c8A48BB7cB1530;\\n        _mintPasses[3779] = 0x2eE88422FBC9Ed5C4689089b05154887d737d76B;\\n        _mintPasses[3780] = 0x2eE88422FBC9Ed5C4689089b05154887d737d76B;\\n        _mintPasses[3781] = 0x2eE88422FBC9Ed5C4689089b05154887d737d76B;\\n        _mintPasses[3782] = 0xC294E0a06076EbB0ee3C4831e4a3C1C31A6A2484;\\n        _mintPasses[3783] = 0xC294E0a06076EbB0ee3C4831e4a3C1C31A6A2484;\\n        _mintPasses[3784] = 0xC294E0a06076EbB0ee3C4831e4a3C1C31A6A2484;\\n        _mintPasses[3785] = 0xC294E0a06076EbB0ee3C4831e4a3C1C31A6A2484;\\n        _mintPasses[3786] = 0xC294E0a06076EbB0ee3C4831e4a3C1C31A6A2484;\\n        _mintPasses[3787] = 0xb1D610fB451b5cdee4eADcA4538816122ad40E1d;\\n        _mintPasses[3788] = 0xb1D610fB451b5cdee4eADcA4538816122ad40E1d;\\n        _mintPasses[3791] = 0x4B9fC228C687f8Ae3C7889579c9723b65882Ebd9;\\n        _mintPasses[3792] = 0x635123F0a1e192B03F69b3d082e79C969A5eE9b0;\\n        _mintPasses[3793] = 0x635123F0a1e192B03F69b3d082e79C969A5eE9b0;\\n        _mintPasses[3794] = 0x635123F0a1e192B03F69b3d082e79C969A5eE9b0;\\n        _mintPasses[3795] = 0x635123F0a1e192B03F69b3d082e79C969A5eE9b0;\\n        _mintPasses[3796] = 0x635123F0a1e192B03F69b3d082e79C969A5eE9b0;\\n        _mintPasses[3797] = 0xeFf626B4beBBd3f26cbA77b47e9ae6C9326cfebB;\\n        _mintPasses[3798] = 0xeFf626B4beBBd3f26cbA77b47e9ae6C9326cfebB;\\n        _mintPasses[3799] = 0xeFf626B4beBBd3f26cbA77b47e9ae6C9326cfebB;\\n        _mintPasses[3800] = 0xeFf626B4beBBd3f26cbA77b47e9ae6C9326cfebB;\\n        _mintPasses[3801] = 0xeFf626B4beBBd3f26cbA77b47e9ae6C9326cfebB;\\n        _mintPasses[3802] = 0xE7bFCE6D3613D20ea879430EA78279Ec3eeCB473;\\n        _mintPasses[3804] = 0x6cb603c1967a32bb7b0726EcbCbB8c3A16b1c299;\\n        _mintPasses[3805] = 0x6cb603c1967a32bb7b0726EcbCbB8c3A16b1c299;\\n        _mintPasses[3806] = 0x6cb603c1967a32bb7b0726EcbCbB8c3A16b1c299;\\n        _mintPasses[3807] = 0x6cb603c1967a32bb7b0726EcbCbB8c3A16b1c299;\\n        _mintPasses[3808] = 0x6cb603c1967a32bb7b0726EcbCbB8c3A16b1c299;\\n        _mintPasses[3809] = 0x2BEa720a5fe5e7738d775e8BfD3a37Fa072Cd46c;\\n        _mintPasses[3810] = 0x2BEa720a5fe5e7738d775e8BfD3a37Fa072Cd46c;\\n        _mintPasses[3811] = 0x2BEa720a5fe5e7738d775e8BfD3a37Fa072Cd46c;\\n        _mintPasses[3812] = 0xe4b52ecE9903d8a1995dd4ebf1d16D1a5D51D58D;\\n        _mintPasses[3813] = 0xe4b52ecE9903d8a1995dd4ebf1d16D1a5D51D58D;\\n        _mintPasses[3814] = 0xe4b52ecE9903d8a1995dd4ebf1d16D1a5D51D58D;\\n        _mintPasses[3815] = 0xe4b52ecE9903d8a1995dd4ebf1d16D1a5D51D58D;\\n        _mintPasses[3816] = 0xe4b52ecE9903d8a1995dd4ebf1d16D1a5D51D58D;\\n        _mintPasses[3817] = 0xc564D44045a70646BeEf777469E7Aa4E4B6e692A;\\n        _mintPasses[3818] = 0xc564D44045a70646BeEf777469E7Aa4E4B6e692A;\\n        _mintPasses[3819] = 0x7255FE6f25ecaED72E85338c131D0daA60724Ecc;\\n        _mintPasses[3820] = 0x7255FE6f25ecaED72E85338c131D0daA60724Ecc;\\n        _mintPasses[3821] = 0x2ee963A7B3d9f14D9F748026055C15528fB87f30;\\n        _mintPasses[3822] = 0x2ee963A7B3d9f14D9F748026055C15528fB87f30;\\n        _mintPasses[3823] = 0x3908176C1802C43Cf5F481f53243145AcaA76bcc;\\n        _mintPasses[3824] = 0x3908176C1802C43Cf5F481f53243145AcaA76bcc;\\n        _mintPasses[3825] = 0x3f6a989786FD0FDAE539F356d99944e5aA4fBae1;\\n        _mintPasses[3826] = 0x3f6a989786FD0FDAE539F356d99944e5aA4fBae1;\\n        _mintPasses[3827] = 0x4d140380DE92396cE3Fa583393257a7024a2b653;\\n        _mintPasses[3828] = 0x4d140380DE92396cE3Fa583393257a7024a2b653;\\n        _mintPasses[3829] = 0x4d140380DE92396cE3Fa583393257a7024a2b653;\\n        _mintPasses[3830] = 0x4d140380DE92396cE3Fa583393257a7024a2b653;\\n        _mintPasses[3831] = 0x4d140380DE92396cE3Fa583393257a7024a2b653;\\n        _mintPasses[3832] = 0x64C9fb6C978f0f5dd46CB36325b56c04243bAB75;\\n        _mintPasses[3833] = 0x64C9fb6C978f0f5dd46CB36325b56c04243bAB75;\\n        _mintPasses[3834] = 0x64C9fb6C978f0f5dd46CB36325b56c04243bAB75;\\n        _mintPasses[3835] = 0xA01481b6fBE54BE00661290f1cE49e14E3Af82Ef;\\n        _mintPasses[3836] = 0xA01481b6fBE54BE00661290f1cE49e14E3Af82Ef;\\n        _mintPasses[3837] = 0xA01481b6fBE54BE00661290f1cE49e14E3Af82Ef;\\n        _mintPasses[3838] = 0xA01481b6fBE54BE00661290f1cE49e14E3Af82Ef;\\n        _mintPasses[3839] = 0xA01481b6fBE54BE00661290f1cE49e14E3Af82Ef;\\n        _mintPasses[6010] = 0xFeF49F32fB60ea475b8cf7193AC32C3DA8a05B7E;\\n        _mintPasses[6011] = 0xFeF49F32fB60ea475b8cf7193AC32C3DA8a05B7E;\\n        _mintPasses[6012] = 0x5c4668d494C6Af375a20782727Ec2084605DDB64;\\n        _mintPasses[6013] = 0x5c4668d494C6Af375a20782727Ec2084605DDB64;\\n        _mintPasses[6014] = 0xA613e95408dbEfc3aeCB4630BDE04E757Bc46fD8;\\n        _mintPasses[6019] = 0x7C8A576941E14934643Bb22f3f5eAD4771f7E3Af;\\n        _mintPasses[6020] = 0x7C8A576941E14934643Bb22f3f5eAD4771f7E3Af;\\n        _mintPasses[6021] = 0xA7bD22BcFC1eAE5f9944978d81ff71Bd5f5eAF42;\\n        _mintPasses[6022] = 0xA7bD22BcFC1eAE5f9944978d81ff71Bd5f5eAF42;\\n        _mintPasses[6023] = 0x1105bF50bE63cdaD34Ff7ac9425C1645e6275E1e;\\n        _mintPasses[6024] = 0x1105bF50bE63cdaD34Ff7ac9425C1645e6275E1e;\\n        _mintPasses[6025] = 0x0E54FD21F4eae61A9594393b237bA6de3eDb93D1;\\n        _mintPasses[6026] = 0x0E54FD21F4eae61A9594393b237bA6de3eDb93D1;\\n        _mintPasses[6027] = 0x2B7cD3Fec35fb21eFc8913E7383639adb088384B;\\n        _mintPasses[6028] = 0x2B7cD3Fec35fb21eFc8913E7383639adb088384B;\\n        _mintPasses[6029] = 0xa4D26fC0814a8dacef55A79166291DD0898a8194;\\n        _mintPasses[6030] = 0xa4D26fC0814a8dacef55A79166291DD0898a8194;\\n        _mintPasses[6031] = 0x79122374eCBaD9cbA0dDF0e0A5F1B676462677B4;\\n        _mintPasses[6032] = 0x79122374eCBaD9cbA0dDF0e0A5F1B676462677B4;\\n        _mintPasses[6033] = 0x79122374eCBaD9cbA0dDF0e0A5F1B676462677B4;\\n        _mintPasses[6034] = 0x79122374eCBaD9cbA0dDF0e0A5F1B676462677B4;\\n        _mintPasses[6036] = 0x79122374eCBaD9cbA0dDF0e0A5F1B676462677B4;\\n        _mintPasses[6037] = 0xaEabe7513BB61325E22c0D7Fd7B2804b3e2C9C28;\\n        _mintPasses[6038] = 0xaEabe7513BB61325E22c0D7Fd7B2804b3e2C9C28;\\n        _mintPasses[6039] = 0xaEabe7513BB61325E22c0D7Fd7B2804b3e2C9C28;\\n        _mintPasses[6040] = 0xDCC15c04963095154aBa0131462C5F4b5284b7c0;\\n        _mintPasses[6041] = 0xDCC15c04963095154aBa0131462C5F4b5284b7c0;\\n        _mintPasses[6042] = 0xDCC15c04963095154aBa0131462C5F4b5284b7c0;\\n        _mintPasses[6043] = 0x1215731ACF43E83E5dAbE1fe342eD79160e85366;\\n        _mintPasses[6044] = 0x1215731ACF43E83E5dAbE1fe342eD79160e85366;\\n        _mintPasses[6045] = 0xF2E81438e26FcE88cC8deBf8C178b80A506cE435;\\n        _mintPasses[6046] = 0xF2E81438e26FcE88cC8deBf8C178b80A506cE435;\\n        _mintPasses[6047] = 0xF2E81438e26FcE88cC8deBf8C178b80A506cE435;\\n        _mintPasses[6048] = 0x28e58A14A39c6BD994e4864119A0348f233992c0;\\n        _mintPasses[6049] = 0x28e58A14A39c6BD994e4864119A0348f233992c0;\\n        _mintPasses[6050] = 0x28e58A14A39c6BD994e4864119A0348f233992c0;\\n        _mintPasses[6051] = 0x4e1b83Dbc5F77faF3B3d450c2ea30BCD441d67b2;\\n        _mintPasses[6052] = 0x4e1b83Dbc5F77faF3B3d450c2ea30BCD441d67b2;\\n        _mintPasses[6053] = 0x826ae03F697BbD3dAD37E9b34e7a8989d9317fc4;\\n        _mintPasses[6055] = 0x0eCddcF41754360AB129d7Ca4c8ABf220F9c32BD;\\n        _mintPasses[6058] = 0x405EB35A58a0C88d9E193D4cB7e61c4Adf2fbcdF;\\n        _mintPasses[6059] = 0x405EB35A58a0C88d9E193D4cB7e61c4Adf2fbcdF;\\n        _mintPasses[6060] = 0xD39EbDa59a76EfF9df72C37F8260e53E073bd7BC;\\n        _mintPasses[6061] = 0xD39EbDa59a76EfF9df72C37F8260e53E073bd7BC;\\n        _mintPasses[6062] = 0xC93e7FEc09E54ECbbAE66754159989E44FB12aD2;\\n        _mintPasses[6063] = 0xC93e7FEc09E54ECbbAE66754159989E44FB12aD2;\\n        _mintPasses[6064] = 0x53851a72902197865EFA99Edc0f73d89990863A9;\\n        _mintPasses[6065] = 0x53851a72902197865EFA99Edc0f73d89990863A9;\\n        _mintPasses[6066] = 0x53851a72902197865EFA99Edc0f73d89990863A9;\\n        _mintPasses[6067] = 0x53851a72902197865EFA99Edc0f73d89990863A9;\\n        _mintPasses[6068] = 0x53851a72902197865EFA99Edc0f73d89990863A9;\\n        _mintPasses[6069] = 0xA14B8d5E0687e63F9991E85DC17287f17d858731;\\n        _mintPasses[6070] = 0xA14B8d5E0687e63F9991E85DC17287f17d858731;\\n        _mintPasses[6071] = 0xF2E81438e26FcE88cC8deBf8C178b80A506cE435;\\n        _mintPasses[6072] = 0x828cDcDc2a006E5EBCA06EEd673BFa8DF897852D;\\n        _mintPasses[6073] = 0x828cDcDc2a006E5EBCA06EEd673BFa8DF897852D;\\n        _mintPasses[6074] = 0x828cDcDc2a006E5EBCA06EEd673BFa8DF897852D;\\n        _mintPasses[6075] = 0x828cDcDc2a006E5EBCA06EEd673BFa8DF897852D;\\n        _mintPasses[6076] = 0x828cDcDc2a006E5EBCA06EEd673BFa8DF897852D;\\n        _mintPasses[6077] = 0x3723DDeC18A8F59CFC2bED4AEDe5e5Bebdf21712;\\n        _mintPasses[6078] = 0x3723DDeC18A8F59CFC2bED4AEDe5e5Bebdf21712;\\n        _mintPasses[6079] = 0x4A90601B49605B3998A5339833763931D9BD4918;\\n        _mintPasses[6080] = 0x4A90601B49605B3998A5339833763931D9BD4918;\\n        _mintPasses[6081] = 0x7358B3dD144332377c14D8A47844E05A1b6f50aC;\\n        _mintPasses[6082] = 0x7358B3dD144332377c14D8A47844E05A1b6f50aC;\\n        _mintPasses[6084] = 0x7358B3dD144332377c14D8A47844E05A1b6f50aC;\\n        _mintPasses[6085] = 0x7358B3dD144332377c14D8A47844E05A1b6f50aC;\\n        _mintPasses[6086] = 0x7358B3dD144332377c14D8A47844E05A1b6f50aC;\\n        _mintPasses[6087] = 0xDf3759cc2277aDcDB0a97b8AC1469a6EddBC6A8d;\\n        _mintPasses[6088] = 0xDf3759cc2277aDcDB0a97b8AC1469a6EddBC6A8d;\\n        _mintPasses[6089] = 0xDf3759cc2277aDcDB0a97b8AC1469a6EddBC6A8d;\\n        _mintPasses[6090] = 0xe29fb0952a8FA002B353e255dD7EE45527084240;\\n        _mintPasses[6091] = 0xe29fb0952a8FA002B353e255dD7EE45527084240;\\n        _mintPasses[6092] = 0x087e269f123F479aE3Cf441657A8739236d36aEe;\\n        _mintPasses[6093] = 0x087e269f123F479aE3Cf441657A8739236d36aEe;\\n        _mintPasses[6094] = 0x60F444A38d8792EeD42E6E091E64216F93ceEeb8;\\n        _mintPasses[6095] = 0x60F444A38d8792EeD42E6E091E64216F93ceEeb8;\\n        _mintPasses[6096] = 0x386c2f5aAB7392F86e5aF3de097673b7BFc4aE64;\\n        _mintPasses[6097] = 0x386c2f5aAB7392F86e5aF3de097673b7BFc4aE64;\\n        _mintPasses[6098] = 0x386c2f5aAB7392F86e5aF3de097673b7BFc4aE64;\\n        _mintPasses[6099] = 0x386c2f5aAB7392F86e5aF3de097673b7BFc4aE64;\\n        _mintPasses[6100] = 0x386c2f5aAB7392F86e5aF3de097673b7BFc4aE64;\\n        _mintPasses[6101] = 0x62182A2Ca7879E2440ca3f5c5c5E1EbdC4fC7c17;\\n        _mintPasses[6102] = 0x62182A2Ca7879E2440ca3f5c5c5E1EbdC4fC7c17;\\n        _mintPasses[6103] = 0x8Bf52d54578d06724A989906D47c7B021612E502;\\n        _mintPasses[6104] = 0x8Bf52d54578d06724A989906D47c7B021612E502;\\n        _mintPasses[6105] = 0x8EaC156f7df9245F360AE39c47879c2919317402;\\n        _mintPasses[6106] = 0x8EaC156f7df9245F360AE39c47879c2919317402;\\n        _mintPasses[6107] = 0x38c05b9B18f8B512CFDCE9bCFD0e57030344f602;\\n        _mintPasses[6108] = 0x38c05b9B18f8B512CFDCE9bCFD0e57030344f602;\\n        _mintPasses[6109] = 0xC15f55d4381473A51830196d0307c2987e9A39d9;\\n        _mintPasses[6110] = 0xC15f55d4381473A51830196d0307c2987e9A39d9;\\n        _mintPasses[6111] = 0xC15f55d4381473A51830196d0307c2987e9A39d9;\\n        _mintPasses[6112] = 0x8951A87Adf50b555034B47D103875A1613B003B6;\\n        _mintPasses[6113] = 0x8951A87Adf50b555034B47D103875A1613B003B6;\\n        _mintPasses[6114] = 0x4Cb18005A1586F3A743B59bcAc574A01B73B0a18;\\n        _mintPasses[6115] = 0x4Cb18005A1586F3A743B59bcAc574A01B73B0a18;\\n        _mintPasses[6116] = 0x8aF0B9A9B751E086122bC340188Bd9d99b8C7ec1;\\n        _mintPasses[6117] = 0x8aF0B9A9B751E086122bC340188Bd9d99b8C7ec1;\\n        _mintPasses[6118] = 0x8aF0B9A9B751E086122bC340188Bd9d99b8C7ec1;\\n        _mintPasses[6119] = 0x8aF0B9A9B751E086122bC340188Bd9d99b8C7ec1;\\n        _mintPasses[6120] = 0x8aF0B9A9B751E086122bC340188Bd9d99b8C7ec1;\\n        _mintPasses[6121] = 0x8aF0B9A9B751E086122bC340188Bd9d99b8C7ec1;\\n        _mintPasses[6122] = 0x8aF0B9A9B751E086122bC340188Bd9d99b8C7ec1;\\n        _mintPasses[6123] = 0x8aF0B9A9B751E086122bC340188Bd9d99b8C7ec1;\\n        _mintPasses[6124] = 0x8aF0B9A9B751E086122bC340188Bd9d99b8C7ec1;\\n        _mintPasses[6125] = 0x8aF0B9A9B751E086122bC340188Bd9d99b8C7ec1;\\n        _mintPasses[6126] = 0xeb77045939E3FaFB19eCa0389f343fB19a052DFe;\\n        _mintPasses[6127] = 0xeb77045939E3FaFB19eCa0389f343fB19a052DFe;\\n        _mintPasses[6128] = 0x2A17068BC37705fA1710dC8bFd1EE49Bc0b432b0;\\n        _mintPasses[6129] = 0x2A17068BC37705fA1710dC8bFd1EE49Bc0b432b0;\\n        _mintPasses[6130] = 0x2A17068BC37705fA1710dC8bFd1EE49Bc0b432b0;\\n        _mintPasses[6131] = 0x2A17068BC37705fA1710dC8bFd1EE49Bc0b432b0;\\n        _mintPasses[6132] = 0x2A17068BC37705fA1710dC8bFd1EE49Bc0b432b0;\\n        _mintPasses[6133] = 0x554DDFABaB2524A229070E01e9FaaD627e4Ac513;\\n        _mintPasses[6134] = 0x554DDFABaB2524A229070E01e9FaaD627e4Ac513;\\n        _mintPasses[6135] = 0x554DDFABaB2524A229070E01e9FaaD627e4Ac513;\\n        _mintPasses[6136] = 0x554DDFABaB2524A229070E01e9FaaD627e4Ac513;\\n        _mintPasses[6137] = 0x554DDFABaB2524A229070E01e9FaaD627e4Ac513;\\n        _mintPasses[6138] = 0xbdF53Fe485928d2F269cb344864d539C5862AeAb;\\n        _mintPasses[6139] = 0xbdF53Fe485928d2F269cb344864d539C5862AeAb;\\n        _mintPasses[6140] = 0x03CCeA443bF78E52bB01c737A00A793CdB7e53d8;\\n        _mintPasses[6141] = 0x03CCeA443bF78E52bB01c737A00A793CdB7e53d8;\\n        _mintPasses[6142] = 0xF6d4A41579BF6069A369eA56a72C29fB7D710664;\\n        _mintPasses[6143] = 0xF6d4A41579BF6069A369eA56a72C29fB7D710664;\\n        _mintPasses[6144] = 0x9309F2Ed55De312FDf51368593db75dE39369173;\\n        _mintPasses[6145] = 0x9309F2Ed55De312FDf51368593db75dE39369173;\\n        _mintPasses[6148] = 0xE4324E43Ae3e8a611E927dF10795D3A20152aE4a;\\n        _mintPasses[6149] = 0xE4324E43Ae3e8a611E927dF10795D3A20152aE4a;\\n        _mintPasses[6150] = 0xC992c764a5dD14dd5Bd6F662a14377E1Cf7e31df;\\n        _mintPasses[6151] = 0xC992c764a5dD14dd5Bd6F662a14377E1Cf7e31df;\\n        _mintPasses[6152] = 0xC992c764a5dD14dd5Bd6F662a14377E1Cf7e31df;\\n        _mintPasses[6153] = 0xC992c764a5dD14dd5Bd6F662a14377E1Cf7e31df;\\n        _mintPasses[6154] = 0xC992c764a5dD14dd5Bd6F662a14377E1Cf7e31df;\\n        _mintPasses[6155] = 0x01C9a2bbb109a24E86535bB41007cd15a0177C11;\\n        _mintPasses[6156] = 0x01C9a2bbb109a24E86535bB41007cd15a0177C11;\\n        _mintPasses[6157] = 0x01C9a2bbb109a24E86535bB41007cd15a0177C11;\\n        _mintPasses[6158] = 0xbcD8F6a884efde5Da425A3DD5032b3681e3ec0D8;\\n        _mintPasses[6159] = 0xbcD8F6a884efde5Da425A3DD5032b3681e3ec0D8;\\n        _mintPasses[6160] = 0x208Eff61de4d585bf1983fdaA5eE9E6c0A92D938;\\n        _mintPasses[6161] = 0x208Eff61de4d585bf1983fdaA5eE9E6c0A92D938;\\n        _mintPasses[6162] = 0xdD4127C80F8E59b2a8a9A64dC9d62dd7caa5C339;\\n        _mintPasses[6163] = 0xdD4127C80F8E59b2a8a9A64dC9d62dd7caa5C339;\\n        _mintPasses[6164] = 0xdD4127C80F8E59b2a8a9A64dC9d62dd7caa5C339;\\n        _mintPasses[6165] = 0x8869583E848b60F934C84AB6BC157f9e02A65C4a;\\n        _mintPasses[6166] = 0x8869583E848b60F934C84AB6BC157f9e02A65C4a;\\n        _mintPasses[6167] = 0x004196E84C7320EbB2e90e8dC4e0a766d3aaC8Db;\\n        _mintPasses[6168] = 0x004196E84C7320EbB2e90e8dC4e0a766d3aaC8Db;\\n        _mintPasses[6169] = 0xA27E6a2e557587e9ca321351ac6Fa09892ec971E;\\n        _mintPasses[6170] = 0xA27E6a2e557587e9ca321351ac6Fa09892ec971E;\\n        _mintPasses[6171] = 0xA27E6a2e557587e9ca321351ac6Fa09892ec971E;\\n        _mintPasses[6226] = 0x01C9a2bbb109a24E86535bB41007cd15a0177C11;\\n        _mintPasses[6227] = 0x01C9a2bbb109a24E86535bB41007cd15a0177C11;\\n        _mintPasses[6228] = 0x87689C4e28200de1f0313A98080B4428490F7285;\\n        _mintPasses[6229] = 0xedE6D8113CF88bbA583a905241abdf23089b312D;\\n        _mintPasses[6230] = 0xedE6D8113CF88bbA583a905241abdf23089b312D;\\n        _mintPasses[6231] = 0xd9FCBf56aD6793E10181c28B6E418208656f21C2;\\n        _mintPasses[6232] = 0x59DC8eE69a7e57b42D25cd13C0Cd8d6665Aa70B2;\\n        _mintPasses[6233] = 0x59DC8eE69a7e57b42D25cd13C0Cd8d6665Aa70B2;\\n        _mintPasses[6234] = 0x59DC8eE69a7e57b42D25cd13C0Cd8d6665Aa70B2;\\n        _mintPasses[6235] = 0x59DC8eE69a7e57b42D25cd13C0Cd8d6665Aa70B2;\\n        _mintPasses[6236] = 0x59DC8eE69a7e57b42D25cd13C0Cd8d6665Aa70B2;\\n        _mintPasses[6237] = 0x59DC8eE69a7e57b42D25cd13C0Cd8d6665Aa70B2;\\n        _mintPasses[6238] = 0x59DC8eE69a7e57b42D25cd13C0Cd8d6665Aa70B2;\\n        _mintPasses[6239] = 0x59DC8eE69a7e57b42D25cd13C0Cd8d6665Aa70B2;\\n        _mintPasses[6240] = 0x59DC8eE69a7e57b42D25cd13C0Cd8d6665Aa70B2;\\n        _mintPasses[6241] = 0x59DC8eE69a7e57b42D25cd13C0Cd8d6665Aa70B2;\\n        _mintPasses[6242] = 0x4e1b83Dbc5F77faF3B3d450c2ea30BCD441d67b2;\\n        _mintPasses[6243] = 0x4e1b83Dbc5F77faF3B3d450c2ea30BCD441d67b2;\\n        _mintPasses[6244] = 0x4e1b83Dbc5F77faF3B3d450c2ea30BCD441d67b2;\\n        _mintPasses[6245] = 0x667B2a94Dd4053508C7440EA1F902694336B9814;\\n        _mintPasses[6246] = 0x667B2a94Dd4053508C7440EA1F902694336B9814;\\n        _mintPasses[6247] = 0x667B2a94Dd4053508C7440EA1F902694336B9814;\\n        _mintPasses[6248] = 0x667B2a94Dd4053508C7440EA1F902694336B9814;\\n        _mintPasses[6249] = 0x667B2a94Dd4053508C7440EA1F902694336B9814;\\n        _mintPasses[6250] = 0x298A8fF8128D8427781B44F7e64657548768E3D4;\\n        _mintPasses[6251] = 0x298A8fF8128D8427781B44F7e64657548768E3D4;\\n        _mintPasses[6252] = 0x298A8fF8128D8427781B44F7e64657548768E3D4;\\n        _mintPasses[6253] = 0x298A8fF8128D8427781B44F7e64657548768E3D4;\\n        _mintPasses[6254] = 0x298A8fF8128D8427781B44F7e64657548768E3D4;\\n        _mintPasses[6255] = 0x944266ac7c1BcE8b0bF307a060D42A1B9Baa6Ca9;\\n        _mintPasses[6256] = 0x944266ac7c1BcE8b0bF307a060D42A1B9Baa6Ca9;\\n        _mintPasses[6257] = 0x944266ac7c1BcE8b0bF307a060D42A1B9Baa6Ca9;\\n        _mintPasses[6258] = 0x944266ac7c1BcE8b0bF307a060D42A1B9Baa6Ca9;\\n        _mintPasses[6259] = 0x6DFaEA023567DF25E4b1f0E05EF5443aC5C26Ed9;\\n        _mintPasses[6260] = 0x6DFaEA023567DF25E4b1f0E05EF5443aC5C26Ed9;\\n        _mintPasses[6261] = 0x6DFaEA023567DF25E4b1f0E05EF5443aC5C26Ed9;\\n        _mintPasses[6262] = 0x6DFaEA023567DF25E4b1f0E05EF5443aC5C26Ed9;\\n        _mintPasses[6263] = 0x6DFaEA023567DF25E4b1f0E05EF5443aC5C26Ed9;\\n        _mintPasses[6264] = 0x6DFaEA023567DF25E4b1f0E05EF5443aC5C26Ed9;\\n\\t}\\n\\n    function verifyMintPass(uint mintPass, address to) \\n    internal \\n    view\\n    returns (bool)\\n    {\\n        if (_mintPasses[mintPass] == to) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function invalidateMintPass(uint mintPass) \\n    internal\\n    {\\n        delete _mintPasses[mintPass];\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensLimitInit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wlOneTokensLimitInit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintPassTokensLimitInit\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"destAddOne\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"destAddTwo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMintedNew\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAvailableNew\",\"type\":\"uint256\"}],\"name\":\"UpdateTokenCounts\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gloablMintStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"honoraryMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPassStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPassTokensLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPassTokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintPass\",\"type\":\"uint256\"}],\"name\":\"mintSingleMintPass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"mintPases\",\"type\":\"uint256[]\"}],\"name\":\"multiMintPassMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"passOnEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"publicMintToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCollectionSize\",\"type\":\"uint256\"}],\"name\":\"setCollectionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPublicPrice\",\"type\":\"uint256\"}],\"name\":\"setPublicSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newWlOneLimit\",\"type\":\"uint256\"}],\"name\":\"setWlOneLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleGlobalMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMintPassMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePublicMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleWlOneMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wlMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"wlOneMintToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wlOneStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wlOneTokensLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wlOneTokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Satoshis","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000000190000000000000000000000000805b86040e072124de4733b0ab1b1091cf602e6a0000000000000000000000004be4b37d9f75d3cc8fa50f91161998e5094fc89f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}