{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n// Part: RiperNFT\r\n\r\ninterface RiperNFT {\r\n\tfunction balanceOf(address _user) external view returns(uint256);\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);    \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId                \r\n    ) external;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev Ownable has an owner address to simplify \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /**\r\n   * Ownable\r\n   * @dev Ownable constructor sets the `owner` of the contract to sender\r\n   */\r\n  constructor() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * ownerOnly\r\n   * @dev Throws an error if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * transferOwnership\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), 'Pausable: paused');\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), 'Pausable: not paused');\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ncontract RiperAuction is Ownable, Pausable {\r\n    RiperNFT public  RiperNFTContract;\r\n    uint256 public startTimeAuction;\r\n    uint256 public endTimeAuction;\r\n    uint256 public minAuctionAmount=0;    \r\n    uint256[3] public nftTokenIds;\r\n    mapping (uint256 => uint256) public maxBids;\r\n    mapping(uint256 => address) public winners;      \r\n\r\n    struct Auction { // Struct        \r\n        mapping (uint256 => uint256) info;\r\n    }\r\n\r\n    mapping(address => Auction) endedAuctions;  \r\n    mapping(address => Auction) auctions;\r\n\r\n    constructor() {                \r\n        RiperNFTContract = RiperNFT(0xe5863D4a57b1E2D7031F7969fEE4F56Bb04C0f17);\r\n    }\r\n\r\n    function getWinner(uint256 _tokenId) external view returns (address) {\r\n        return winners[_tokenId];\r\n    }\r\n\r\n    function getAuctionPeriod() external view returns (uint256, uint256) {\r\n        return (startTimeAuction, endTimeAuction);\r\n    }\r\n\r\n    function setAuctionPeriod(uint256 _startTimeAuction, uint256 _endTimeAuction) external onlyOwner {\r\n        startTimeAuction = _startTimeAuction;\r\n        endTimeAuction = _endTimeAuction;\r\n    }\r\n\r\n    function setAuctionMinAmount(uint256 _minAuctionAmount) external onlyOwner {\r\n        minAuctionAmount = _minAuctionAmount;\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function withdraw(uint256 tokenId, address _to) external onlyOwner {\r\n        RiperNFTContract.transferFrom(address(this), _to, tokenId);     \r\n    }\r\n\r\n    function tokenOfOwnerByIndex(uint256 index) external view returns (uint256) {\r\n        uint256 tokenId = RiperNFTContract.tokenOfOwnerByIndex(address(this), index);\r\n        return tokenId;\r\n    }\r\n\r\n    function balanceOfNFT() external view returns (uint256) {\r\n        uint256 tokenCount = RiperNFTContract.balanceOf(address(this));\r\n        return tokenCount;\r\n    }\r\n\r\n    function withdrawAll(address _to) external onlyOwner {\r\n        uint256 tokenCount = RiperNFTContract.balanceOf(address(this));\r\n        for (uint256 i=0; i < tokenCount; i++){\r\n            uint256 tokenId = RiperNFTContract.tokenOfOwnerByIndex(address(this), i);\r\n            RiperNFTContract.transferFrom(address(this), _to, tokenId);     \r\n        }\r\n    }   \r\n\r\n    function startAuction(uint256 tokenId1, uint256 tokenId2, uint256 tokenId3) external onlyOwner {    \r\n       require(startTimeAuction > 0, \"AuctionTime need to be set up.\");\r\n       require(endTimeAuction > 0, \"AuctionTime need to be set up.\");\r\n       uint256 tokenCount = RiperNFTContract.balanceOf(address(this));\r\n       require(tokenCount >= 3, \"Contract is not ready for auction assets\");       \r\n       require(RiperNFTContract.ownerOf(tokenId1) == address(this), \"Asset tokenId1 is not exist on the contract\");\r\n       require(RiperNFTContract.ownerOf(tokenId2) == address(this), \"Asset tokenId2 is not exist on the contract\");\r\n       require(RiperNFTContract.ownerOf(tokenId3) == address(this), \"Asset tokenId3 is not exist on the contract\");\r\n       nftTokenIds[0] = tokenId1;\r\n       nftTokenIds[1] = tokenId2;\r\n       nftTokenIds[2] = tokenId3;       \r\n       if (paused()) _unpause();\r\n    }\r\n\r\n    function endAuction(uint256 tokenId) external whenNotPaused {\r\n        require(block.timestamp >= endTimeAuction, \"Auction should be ended.\");        \r\n        require(endedAuctions[msg.sender].info[tokenId] != 1, \"You already ended auction.\");\r\n        if (winners[tokenId] == msg.sender){\r\n            RiperNFTContract.transferFrom(address(this), msg.sender, tokenId);                    \r\n        } else {\r\n            require(auctions[msg.sender].info[tokenId] > 0, \"You are not bidder for this NFT\");\r\n            payable(msg.sender).transfer(auctions[msg.sender].info[tokenId]);            \r\n        }\r\n        endedAuctions[msg.sender].info[tokenId] = 1;    \r\n    }\r\n\r\n    function bidAuction(uint256 tokenId) external whenNotPaused payable {\r\n        require(msg.value >= minAuctionAmount, \"Auction Amount should be higher than min amount.\");           \r\n        require(block.timestamp >= startTimeAuction, \"Auction should be started.\");        \r\n        require(block.timestamp <= endTimeAuction, \"Auction should be started.\");        \r\n        require(msg.value > maxBids[tokenId], \"Auction Amount should be higher than past bids.\");\r\n        auctions[msg.sender].info[tokenId] = auctions[msg.sender].info[tokenId] + msg.value;        \r\n        maxBids[tokenId] = msg.value;\r\n        winners[tokenId] = msg.sender;\r\n    }   \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RiperNFTContract\",\"outputs\":[{\"internalType\":\"contract RiperNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"bidAuction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimeAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxBids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAuctionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftTokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAuctionAmount\",\"type\":\"uint256\"}],\"name\":\"setAuctionMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTimeAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimeAuction\",\"type\":\"uint256\"}],\"name\":\"setAuctionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId3\",\"type\":\"uint256\"}],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimeAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RiperAuction","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://02f0efdc1303b70bcaad7e447e950406a8d458928273eea70908a9889da85c7f"}]}