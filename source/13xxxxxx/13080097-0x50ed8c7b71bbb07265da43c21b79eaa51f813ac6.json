{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/libraries/details/MaskDetail.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\npragma abicoder v2;\\n\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"./constants/Colors.sol\\\";\\n\\n/// @title Masks SVG generator\\nlibrary MaskDetail {\\n    /// @dev Mask N°1 => Maskless\\n    function item_1() public pure returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /// @dev Mask N°2 => Classic\\n    function item_2() public pure returns (string memory) {\\n        return base(classicMask(\\\"575673\\\"));\\n    }\\n\\n    /// @dev Mask N°3 => Blue\\n    function item_3() public pure returns (string memory) {\\n        return base(classicMask(Colors.BLUE));\\n    }\\n\\n    /// @dev Mask N°4 => Pink\\n    function item_4() public pure returns (string memory) {\\n        return base(classicMask(Colors.PINK));\\n    }\\n\\n    /// @dev Mask N°5 => Black\\n    function item_5() public pure returns (string memory) {\\n        return base(classicMask(Colors.BLACK));\\n    }\\n\\n    /// @dev Mask N°6 => Bandage White\\n    function item_6() public pure returns (string memory) {\\n        return base(string(abi.encodePacked(classicMask(\\\"F5F5F5\\\"), bandage())));\\n    }\\n\\n    /// @dev Mask N°7 => Bandage Classic\\n    function item_7() public pure returns (string memory) {\\n        return base(string(abi.encodePacked(classicMask(\\\"575673\\\"), bandage())));\\n    }\\n\\n    /// @dev Mask N°8 => Nihon\\n    function item_8() public pure returns (string memory) {\\n        return\\n            base(\\n                string(\\n                    abi.encodePacked(\\n                        classicMask(\\\"F5F5F5\\\"),\\n                        '<ellipse opacity=\\\"0.87\\\" fill=\\\"#FF0039\\\" cx=\\\"236.1\\\" cy=\\\"259.8\\\" rx=\\\"13.4\\\" ry=\\\"14.5\\\"/>'\\n                    )\\n                )\\n            );\\n    }\\n\\n    /// @dev Generate classic mask SVG with the given color\\n    function classicMask(string memory color) public pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<path fill=\\\"#',\\n                    color,\\n                    '\\\" stroke=\\\"#000000\\\" stroke-miterlimit=\\\"10\\\" d=\\\" M175.7,317.7c0,0,20,15.1,82.2,0c0,0-1.2-16.2,3.7-46.8l14-18.7c0,0-41.6-27.8-77.6-37.1c-1.1-0.3-3-0.7-4-0.2 c-19.1,8.1-51.5,33-51.5,33s7.5,20.9,9.9,22.9s24.8,19.4,24.8,19.4s0,0,0,0.1C177.3,291.2,178,298.3,175.7,317.7z\\\"/>',\\n                    '<path fill=\\\"none\\\" stroke=\\\"#000000\\\" stroke-linecap=\\\"round\\\" stroke-miterlimit=\\\"10\\\" d=\\\"M177.1,290.1 c0,0,18.3,14.7,26.3,15s15.1-3.8,15.9-4.3c0.9-0.4,11.6-4.5,25.2-14.1\\\"/>',\\n                    '<line fill=\\\"none\\\" stroke=\\\"#000000\\\" stroke-linecap=\\\"round\\\" stroke-miterlimit=\\\"10\\\" x1=\\\"266.6\\\" y1=\\\"264.4\\\" x2=\\\"254.5\\\" y2=\\\"278.7\\\"/>',\\n                    '<path opacity=\\\"0.21\\\" d=\\\"M197.7,243.5l-7.9-3.5c-0.4-0.2-0.5-0.7-0.2-1.1l3.2-3.3 c0.4-0.4,1-0.5,1.5-0.3l12.7,4.6c0.6,0.2,0.6,1.1-0.1,1.3l-8.7,2.4C198,243.6,197.8,243.6,197.7,243.5z\\\"/>',\\n                    '<path opacity=\\\"0.24\\\" fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M177.2,291.1 c0,0,23,32.3,39.1,28.1s41.9-20.9,41.9-20.9c1.2-8.7,2.1-18.9,3.2-27.6c-4.6,4.7-12.8,13.2-20.9,18.3c-5,3.1-21.2,14.5-34.9,16 C198.3,305.8,177.2,291.1,177.2,291.1z\\\"/>'\\n                )\\n            );\\n    }\\n\\n    /// @dev Generate bandage SVG\\n    function bandage() public pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<path fill=\\\"none\\\" stroke=\\\"#000000\\\" stroke-miterlimit=\\\"10\\\" d=\\\"M142.9,247.9c34.3-21.9,59.3-27.4,92.4-18.5 M266.1,264.1c-21-16.2-60.8-36.4-73.9-29.1c-12.8,7.1-36.4,15.6-45.8,22.7 M230.9,242.8c-32.4,2.5-54.9,0.1-81.3,22.7 M259.8,272.3c-19.7-13.9-46.1-24.1-70.3-25.9 M211.6,250.1c-18.5,1.9-41.8,11.2-56.7,22 M256.7,276.1c-46-11.9-50.4-25.6-94,2.7 M229,267.5c-19.9,0.3-42,9.7-60.6,15.9 M238.4,290.6c-11-3.9-39.3-14.6-51.2-14 M214.5,282.5c-10.3-2.8-23,7.6-30.7,12.6 M221.6,299.8c-3.8-5.5-22.1-7.1-27-11.4 M176.2,312.4c8.2,7.3,65.1,6.4,81.2-2.6 M177.3,305.3c11.1,3.6,15.5,4.2,34.6,2.9 c14.5-1,33.2-2.7,46.2-9.2 M224.4,298.4c9,0,25.6-3.3,34.1-6 M249,285.8c3.6-0.2,7.1-1,10.5-2.3 M215.1,225.7 c-6-1.3-11.9-2.3-17.9-3.6c-4.8-1-9.8-2.1-14.7-1.3\\\"/>'\\n                )\\n            );\\n    }\\n\\n    /// @notice Return the mask name of the given id\\n    /// @param id The mask Id\\n    function getItemNameById(uint8 id) public pure returns (string memory name) {\\n        name = \\\"\\\";\\n        if (id == 1) {\\n            name = \\\"Maskless\\\";\\n        } else if (id == 2) {\\n            name = \\\"Classic\\\";\\n        } else if (id == 3) {\\n            name = \\\"Blue\\\";\\n        } else if (id == 4) {\\n            name = \\\"Pink\\\";\\n        } else if (id == 5) {\\n            name = \\\"Black\\\";\\n        } else if (id == 6) {\\n            name = \\\"Bandage White\\\";\\n        } else if (id == 7) {\\n            name = \\\"Bandage Classic\\\";\\n        } else if (id == 8) {\\n            name = \\\"Nihon\\\";\\n        }\\n    }\\n\\n    /// @dev The base SVG for the eyes\\n    function base(string memory children) private pure returns (string memory) {\\n        return string(abi.encodePacked('<g id=\\\"Mask\\\">', children, \\\"</g>\\\"));\\n    }\\n}\\n\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/details/constants/Colors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\npragma abicoder v2;\\n\\n/// @title Color constants\\nlibrary Colors {\\n    string internal constant BLACK = \\\"33333D\\\";\\n    string internal constant BLACK_DEEP = \\\"000000\\\";\\n    string internal constant BLUE = \\\"7FBCFF\\\";\\n    string internal constant BROWN = \\\"735742\\\";\\n    string internal constant GRAY = \\\"7F8B8C\\\";\\n    string internal constant GREEN = \\\"2FC47A\\\";\\n    string internal constant PINK = \\\"FF78A9\\\";\\n    string internal constant PURPLE = \\\"A839A4\\\";\\n    string internal constant RED = \\\"D9005E\\\";\\n    string internal constant SAIKI = \\\"F02AB6\\\";\\n    string internal constant WHITE = \\\"F7F7F7\\\";\\n    string internal constant YELLOW = \\\"EFED8F\\\";\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"bandage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"name\":\"classicMask\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getItemNameById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_1\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_2\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_3\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_4\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_5\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_6\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_7\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_8\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"MaskDetail","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}