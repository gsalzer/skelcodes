{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/eth2pool/ETHPoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IETHPool.sol\\\";\\nimport \\\"./IStrongPool.sol\\\";\\nimport \\\"./PlatformFees.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ncontract ETHPoolV2 is IETHPool, IStrongPool, ReentrancyGuard, PlatformFees {\\n\\n    using SafeMath for uint256;\\n    bool public initialized;\\n\\n    uint256 public epochId;\\n    uint256 public totalStaked;\\n    mapping(address => bool) public poolContracts;\\n\\n    mapping(uint256 => address) public stakeOwner;\\n    mapping(uint256 => uint256) public stakeAmount;\\n    mapping(uint256 => uint256) public stakeTimestamp;\\n    mapping(uint256 => bool) public stakeStatus;\\n\\n    uint256 private stakeId;\\n    IERC20 private strongTokenContract;\\n    mapping(address => mapping(uint256 => uint256)) private _ownerIdIndex;\\n    mapping(address => uint256[]) private _ownerIds;\\n\\n    event FallBackLog(address sender, uint256 value);\\n    event PaymentProcessed(address receiver, uint256 amount);\\n\\n    function init(\\n        address strongAddress_,\\n        uint256 stakeFeeNumerator_,\\n        uint256 stakeFeeDenominator_,\\n        uint256 unstakeFeeNumerator_,\\n        uint256 unstakeFeeDenominator_,\\n        uint256 minStakeAmount_,\\n        uint256 stakeTxLimit_,\\n        address payable feeWallet_,\\n        address serviceAdmin_\\n    ) external {\\n        require(!initialized, \\\"ETH2.0Pool: init done\\\");\\n        PlatformFees.init(\\n            stakeFeeNumerator_,\\n            stakeFeeDenominator_,\\n            unstakeFeeNumerator_,\\n            unstakeFeeDenominator_,\\n            minStakeAmount_,\\n            stakeTxLimit_,\\n            feeWallet_,\\n            serviceAdmin_\\n        );\\n        ReentrancyGuard.init();\\n\\n        epochId = 1;\\n        stakeId = 1;\\n        strongTokenContract = IERC20(strongAddress_);\\n        initialized = true;\\n    }\\n\\n    function stake(uint256 amount_) external payable nonReentrant override {\\n        require(amount_.mul(stakeFeeNumerator).div(stakeFeeDenominator) == msg.value, \\\"ETH2.0Pool: Value can not be greater or less than staking fee\\\");\\n        stake_(amount_, msg.sender);\\n        require(strongTokenContract.transferFrom(msg.sender, address(this), amount_), \\\"ETH2.0Pool: Insufficient funds\\\");\\n        processPayment(feeWallet, msg.value);\\n    }\\n\\n    function mineFor(address userAddress_, uint256 amount_) external override {\\n        require(poolContracts[msg.sender], \\\"ETH2.0Pool: Caller not authorised to call this function\\\");\\n        stake_(amount_, userAddress_);\\n        require(strongTokenContract.transferFrom(msg.sender, address(this), amount_), \\\"ETH2.0Pool: Insufficient funds\\\");\\n    }\\n\\n    function unStake(uint256[] memory stakeIds_) external payable nonReentrant override {\\n        require(stakeIds_.length <= stakeTxLimit, \\\"ETH2.0Pool: Input array length is greater than approved length\\\");\\n        uint256 userTokens = 0;\\n\\n        for (uint256 i = 0; i < stakeIds_.length; i++) {\\n            require(stakeOwner[stakeIds_[i]] == msg.sender, \\\"ETH2.0Pool: Only owner can unstake\\\");\\n            require(stakeStatus[stakeIds_[i]], \\\"ETH2.0Pool: Transaction already unStaked\\\");\\n\\n            stakeStatus[stakeIds_[i]] = false;\\n            userTokens = userTokens.add(stakeAmount[stakeIds_[i]]);\\n            if (_ownerIdExists(msg.sender, stakeIds_[i])) {\\n                _deleteOwnerId(msg.sender, stakeIds_[i]);\\n            }\\n            emit Unstaked(msg.sender, stakeIds_[i], stakeAmount[stakeIds_[i]], block.timestamp);\\n        }\\n\\n        if (userTokens.mul(unstakeFeeNumerator).div(unstakeFeeDenominator) != msg.value) {\\n            revert(\\\"ETH2.0Pool: Value can not be greater or less than unstaking fee\\\");\\n        }\\n\\n        totalStaked = totalStaked.sub(userTokens);\\n        require(strongTokenContract.transfer(msg.sender, userTokens), \\\"ETH2.0Pool: Insufficient Strong tokens\\\");\\n        processPayment(feeWallet, userTokens.mul(unstakeFeeNumerator).div(unstakeFeeDenominator));\\n    }\\n\\n    function stake_(uint256 amount_, address userAddress_) internal {\\n        require(_ownerIds[userAddress_].length < stakeTxLimit, \\\"ETH2.0Pool: User can not exceed stake tx limit\\\");\\n        require(amount_ >= minStakeAmount, \\\"ETH2.0Pool: Amount can not be less than minimum staking amount\\\");\\n        require(userAddress_ != address(0), \\\"ETH2.0Pool: Invalid user address\\\");\\n\\n        stakeOwner[stakeId] = userAddress_;\\n        stakeAmount[stakeId] = amount_;\\n        stakeTimestamp[stakeId] = block.timestamp;\\n        stakeStatus[stakeId] = true;\\n        totalStaked = totalStaked.add(amount_);\\n\\n        if (!_ownerIdExists(userAddress_, stakeId)) {\\n            _addOwnerId(userAddress_, stakeId);\\n        }\\n        emit Staked(userAddress_,stakeId, amount_, block.timestamp);\\n        incrementStakeId();\\n    }\\n\\n    function addVerifiedContract(address contractAddress_) external anyAdmin {\\n        require(contractAddress_ != address(0), \\\"ETH2.0Pool: Invalid contract address\\\");\\n        poolContracts[contractAddress_] = true;\\n    }\\n\\n    function removeVerifiedContract(address contractAddress_) external anyAdmin {\\n        require(poolContracts[contractAddress_], \\\"ETH2.0Pool: Contract address not verified\\\");\\n        poolContracts[contractAddress_] = false;\\n    }\\n\\n    function getUserIds(address user_) external view returns (uint256[] memory) {\\n        return _ownerIds[user_];\\n    }\\n\\n    function getUserIdIndex(address user_, uint256 id_) external view returns (uint256) {\\n        return _ownerIdIndex[user_][id_];\\n    }\\n\\n    // function to transfer eth to recipient account.\\n    function processPayment(address payable recipient_, uint256 amount_) private {\\n        (bool sent,) = recipient_.call{value : amount_}(\\\"\\\");\\n        require(sent, \\\"ETH2.0Pool: Failed to send Ether\\\");\\n\\n        emit PaymentProcessed(recipient_, amount_);\\n    }\\n\\n    // function to increment the id counter of Staking entries\\n    function incrementStakeId() private {\\n        stakeId = stakeId.add(1);\\n    }\\n\\n    function _deleteOwnerId(address owner_, uint256 id_) internal {\\n        uint256 lastIndex = _ownerIds[owner_].length.sub(1);\\n        uint256 lastId = _ownerIds[owner_][lastIndex];\\n\\n        if (id_ == lastId) {\\n            _ownerIdIndex[owner_][id_] = 0;\\n            _ownerIds[owner_].pop();\\n        } else {\\n            uint256 indexOfId = _ownerIdIndex[owner_][id_];\\n            _ownerIdIndex[owner_][id_] = 0;\\n            _ownerIds[owner_][indexOfId] = lastId;\\n            _ownerIdIndex[owner_][lastId] = indexOfId;\\n            _ownerIds[owner_].pop();\\n        }\\n    }\\n\\n    function _addOwnerId(address owner, uint256 id) internal {\\n        uint256 len = _ownerIds[owner].length;\\n        _ownerIdIndex[owner][id] = len;\\n        _ownerIds[owner].push(id);\\n    }\\n\\n    function _ownerIdExists(address owner, uint256 id) internal view returns (bool) {\\n        if (_ownerIds[owner].length == 0) return false;\\n\\n        uint256 index = _ownerIdIndex[owner][id];\\n        return id == _ownerIds[owner][index];\\n    }\\n\\n    fallback() external payable {\\n        emit FallBackLog(msg.sender, msg.value);\\n    }\\n\\n    receive() external nonReentrant payable {\\n        processPayment(feeWallet, msg.value);\\n        emit FallBackLog(msg.sender, msg.value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/eth2pool/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/eth2pool/IETHPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IETHPool {\\n\\n    event Staked(address user, uint256 stakeId, uint256 amount, uint256 timestamp);\\n\\n    event Unstaked(address user, uint256 stakeId, uint256 amount, uint256 timestamp);\\n\\n    function stake(uint256 amount) external payable;\\n\\n    function unStake(uint256[] memory stakeIds) external payable;\\n\\n}\"\r\n    },\r\n    \"contracts/eth2pool/IStrongPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStrongPool {\\n\\n    function mineFor(address miner, uint256 amount) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/eth2pool/PlatformFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^ 0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IPlatformFees.sol\\\";\\n\\ncontract PlatformFees is Ownable, IPlatformFees {\\n\\n    uint256 public stakeFeeNumerator;\\n    uint256 public stakeFeeDenominator;\\n    uint256 public unstakeFeeNumerator;\\n    uint256 public unstakeFeeDenominator;\\n    uint256 public minStakeAmount;\\n    uint256 public stakeTxLimit;\\n\\n    address payable public feeWallet;\\n    bool private initDone;\\n\\n    function init(\\n        uint256 stakeFeeNumerator_,\\n        uint256 stakeFeeDenominator_,\\n        uint256 unstakeFeeNumerator_,\\n        uint256 unstakeFeeDenominator_,\\n        uint256 minStakeAmount_,\\n        uint256 stakeTxLimit_,\\n        address payable feeWallet_,\\n        address serviceAdmin\\n    ) internal {\\n        require(!initDone, \\\"PlatformFee: init done\\\");\\n\\n        stakeFeeNumerator = stakeFeeNumerator_;\\n        stakeFeeDenominator = stakeFeeDenominator_;\\n        unstakeFeeNumerator = unstakeFeeNumerator_;\\n        unstakeFeeDenominator = unstakeFeeDenominator_;\\n        minStakeAmount = minStakeAmount_;\\n        stakeTxLimit = stakeTxLimit_;\\n        feeWallet = feeWallet_;\\n\\n        Ownable.init(serviceAdmin);\\n        initDone = true;\\n    }\\n\\n    function setStakeFeeNumerator(uint256 numerator_) external override anyAdmin {\\n        stakeFeeNumerator = numerator_;\\n    }\\n\\n    function setStakeFeeDenominator(uint256 denominator_) external override anyAdmin {\\n        require(denominator_ > 0, \\\"PlatformFee: denominator can not be zero\\\");\\n        stakeFeeDenominator = denominator_;\\n    }\\n\\n    function setUnstakeFeeNumerator(uint256 numerator_) external override anyAdmin {\\n        unstakeFeeNumerator = numerator_;\\n    }\\n\\n    function setUnstakeFeeDenominator(uint256 denominator_) external override anyAdmin {\\n        require(denominator_ > 0, \\\"PlatformFee: denominator can not be zero\\\");\\n        unstakeFeeDenominator = denominator_;\\n    }\\n\\n    function setMinStakeAmount(uint256 amount_) external override anyAdmin {\\n        require(amount_ > 0, \\\"PlatformFee: amount can not be zero\\\");\\n        minStakeAmount = amount_;\\n    }\\n\\n    function setStakeTxLimit(uint256 limit_) external override anyAdmin {\\n        require(limit_ > 0, \\\"PlatformFee: limit can not zero\\\");\\n        stakeTxLimit = limit_;\\n    }\\n\\n    function setFeeWallet(address payable feeWallet_) external override anyAdmin {\\n        require(feeWallet_ != address(0), \\\"PlatformFee: address can not be zero address\\\");\\n        feeWallet = feeWallet_;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/eth2pool/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n    bool private init_;\\n\\n    function init()internal{\\n        require(!init_, \\\"ReentrancyGuard: init done\\\");\\n        _status = _NOT_ENTERED;\\n        init_ = true;        \\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/eth2pool/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/eth2pool/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n    address private _serviceAdmin;\\n    bool private initialized;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event NewServiceAdmin(address indexed previousServiceAdmin, address indexed newServiceAdmin);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function init(address serviceAdmin_) internal {\\n        require(!initialized, \\\"Ownable: init done\\\");\\n        _setOwner(_msgSender());\\n        _setServiceAdmin(serviceAdmin_);\\n        initialized = true;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current service admin.\\n     */\\n    function serviceAdmin() public view virtual returns (address) {\\n        return _serviceAdmin;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the service Admin.\\n     */\\n    modifier onlyServiceAdmin() {\\n        require(serviceAdmin() == _msgSender(), \\\"Ownable: caller is not the serviceAdmin\\\");\\n        _;\\n    }\\n\\n    modifier anyAdmin(){\\n        require(serviceAdmin() == _msgSender() || owner() == _msgSender(), \\\"Ownable: Caller is not authorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    function _setServiceAdmin(address newServiceAdmin) private {\\n        address oldServiceAdmin = _serviceAdmin;\\n        _serviceAdmin = newServiceAdmin;\\n        emit NewServiceAdmin(oldServiceAdmin, newServiceAdmin);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/eth2pool/IPlatformFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPlatformFees {\\n\\n  function setStakeFeeNumerator(uint256 numerator_) external;\\n\\n  function setStakeFeeDenominator(uint256 denominator_) external;\\n\\n  function setUnstakeFeeNumerator(uint256 numerator_) external;\\n\\n  function setUnstakeFeeDenominator(uint256 denominator_) external;\\n\\n  function setMinStakeAmount(uint256 _amount) external;\\n\\n  function setStakeTxLimit(uint256 limit_) external;\\n\\n  function setFeeWallet(address payable feeWallet_) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/eth2pool/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FallBackLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousServiceAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newServiceAdmin\",\"type\":\"address\"}],\"name\":\"NewServiceAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"}],\"name\":\"addVerifiedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"getUserIdIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getUserIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strongAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeFeeNumerator_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeFeeDenominator_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeFeeNumerator_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeFeeDenominator_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakeAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTxLimit_\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"feeWallet_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"serviceAdmin_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mineFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"}],\"name\":\"removeVerifiedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeWallet_\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"setMinStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"denominator_\",\"type\":\"uint256\"}],\"name\":\"setStakeFeeDenominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator_\",\"type\":\"uint256\"}],\"name\":\"setStakeFeeNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"setStakeTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"denominator_\",\"type\":\"uint256\"}],\"name\":\"setUnstakeFeeDenominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator_\",\"type\":\"uint256\"}],\"name\":\"setUnstakeFeeNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeTxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakeIds_\",\"type\":\"uint256[]\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeFeeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ETHPoolV2","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}