{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FeesCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IFeesCalculator.sol\\\";\\r\\n\\r\\ncontract FeesCalculator is IFeesCalculator, Ownable {\\r\\n\\r\\n    uint256 private constant PRECISION_DECIMALS = 1e10;\\r\\n\\r\\n    uint256 private constant FUNDING_FEE_MIN_RATE = 2000;\\r\\n    uint256 private constant FUNDING_FEE_MAX_RATE = 100000;\\r\\n    uint256 private constant FUNDING_FEE_BASE_PERIOD = 1 days;\\r\\n\\r\\n    uint256 private constant MAX_FUNDING_FEE_PERCENTAGE = 1000000;\\r\\n    uint16 private constant CVI_DECIMALS = 100;\\r\\n\\r\\n    uint16 private constant MAX_FUNDING_FEE_CVI_THRESHOLD = 55;\\r\\n    uint16 private constant MIN_FUDNING_FEE_CVI_THRESHOLD = 150;\\r\\n    uint16 private constant FUNDING_FEE_DIVISION_FACTOR = 5;\\r\\n\\r\\n    uint16 private constant MAX_PERCENTAGE = 10000;\\r\\n\\r\\n    uint16 private constant COLATERAL_VALUES_NUM = 101; // From 0.00 to 1.00 inclusive\\r\\n\\r\\n    uint16 public maxCVIValue;\\r\\n\\r\\n    uint16 public override depositFeePercent = 0;\\r\\n    uint16 public override withdrawFeePercent = 0;\\r\\n    uint16 public override openPositionFeePercent = 15;\\r\\n    uint16 public override openPositionLPFeePercent = 15;\\r\\n    uint16 public override closePositionLPFeePercent = 0;\\r\\n    uint16 public buyingPremiumFeeMaxPercent = 1000;\\r\\n    uint16 public closingPremiumFeeMaxPercent = 1000;\\r\\n    uint16 public override closePositionFeePercent = 30;\\r\\n\\r\\n    uint16 public buyingPremiumThreshold = 6500; // 1.0 is MAX_PERCENTAGE = 10000\\r\\n\\r\\n    uint16 public closePositionMaxFeePercent = 300;\\r\\n\\r\\n    uint16 public maxTurbulenceFeePercentToTrim = 100;\\r\\n    uint16 public turbulenceStepPercent = 1000;\\r\\n    uint16 public override turbulenceIndicatorPercent = 0;\\r\\n\\r\\n    uint32 public adjustedVolumeTimestamp;\\r\\n    uint16 public volumeTimeWindow = 2 hours;\\r\\n    uint16 public volumeFeeTimeWindow = 1 hours;\\r\\n    uint16 public maxVolumeFeeDeltaCollateral = 400; // 100% is MAX_PERCENTAGE = 10000\\r\\n    uint16 public midVolumeFee = 0; // 100% is MAX_PERCENTAGE = 10000\\r\\n    uint16 public maxVolumeFee = 130; // 100% is MAX_PERCENTAGE = 10000\\r\\n\\r\\n    uint32 public closeAdjustedVolumeTimestamp;\\r\\n    uint16 public closeVolumeTimeWindow = 2 hours;\\r\\n    uint16 public closeVolumeFeeTimeWindow = 1 hours;\\r\\n    uint16 public closeMaxVolumeFeeDeltaCollateral = 400; // 100% is MAX_PERCENTAGE = 10000\\r\\n    uint16 public closeMidVolumeFee = 0; // 100% is MAX_PERCENTAGE = 10000\\r\\n    uint16 public closeMaxVolumeFee = 80; // 100% is MAX_PERCENTAGE = 10000\\r\\n\\r\\n    uint256 public oracleHeartbeatPeriod = 55 minutes;\\r\\n    uint256 public closePositionFeeDecayPeriod = 24 hours;\\r\\n    uint256 public fundingFeeConstantRate = 3000;\\r\\n\\r\\n    uint16 public turbulenceDeviationThresholdPercent = 7000; // 1.0 is MAX_PERCENTAGE = 10000\\r\\n    uint16 public turbulenceDeviationPercentage = 500; // 1.0 is MAX_PERCENTAGE = 10000\\r\\n\\r\\n    uint16[] public collateralToBuyingPremiumMapping = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 8, 9, 11, 14, 16, 20, 24, 29, 35, 42, 52, 63, 77, 94, 115, 140, 172, 212, 261, 323, 399, 495, 615, 765, 953, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000];\\r\\n\\r\\n    ICVIOracle public cviOracle;\\r\\n    address public stateUpdator;\\r\\n\\r\\n    modifier onlyStateUpdator {\\r\\n        require(msg.sender == stateUpdator, \\\"Not allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(ICVIOracle _cviOracle, uint16 _maxCVIValue) {\\r\\n        maxCVIValue = _maxCVIValue;\\r\\n        cviOracle = _cviOracle;\\r\\n    }\\r\\n\\r\\n    function updateTurbulenceIndicatorPercent(uint256 _totalTime, uint256 _newRounds, uint16 _lastCVIValue, uint16 _currCVIValue) external override onlyStateUpdator {\\r\\n        uint16 updatedTurbulenceIndicatorPercent = calculateTurbulenceIndicatorPercent(_totalTime, _newRounds, _lastCVIValue, _currCVIValue);\\r\\n\\r\\n        if (updatedTurbulenceIndicatorPercent != turbulenceIndicatorPercent) {\\r\\n            turbulenceIndicatorPercent = updatedTurbulenceIndicatorPercent;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateAdjustedTimestamp(uint256 _collateralRatio, uint256 _lastCollateralRatio) external override onlyStateUpdator {\\r\\n        uint256 deltaCollateral = _collateralRatio - _lastCollateralRatio; // Note: must be greater than 0\\r\\n        adjustedVolumeTimestamp = getAdjustedTimestamp(adjustedVolumeTimestamp, deltaCollateral, volumeTimeWindow, maxVolumeFeeDeltaCollateral);\\r\\n    }\\r\\n\\r\\n    function updateCloseAdjustedTimestamp(uint256 _collateralRatio, uint256 _lastCollateralRatio) external override onlyStateUpdator {\\r\\n        uint256 deltaCollateral = _lastCollateralRatio - _collateralRatio; // Note: must be greater than 0\\r\\n        closeAdjustedVolumeTimestamp = getAdjustedTimestamp(closeAdjustedVolumeTimestamp, deltaCollateral, closeVolumeTimeWindow, closeMaxVolumeFeeDeltaCollateral);\\r\\n    }\\r\\n\\r\\n    function setOracle(ICVIOracle _cviOracle) external override onlyOwner {\\r\\n        cviOracle = _cviOracle;\\r\\n    }\\r\\n\\r\\n    function setStateUpdator(address _newUpdator) external override onlyOwner {\\r\\n        stateUpdator = _newUpdator;\\r\\n    }\\r\\n\\r\\n    function setDepositFee(uint16 _newDepositFeePercentage) external override onlyOwner {\\r\\n        require(_newDepositFeePercentage < MAX_PERCENTAGE, \\\"Fee exceeds maximum\\\");\\r\\n        depositFeePercent = _newDepositFeePercentage;\\r\\n    }\\r\\n\\r\\n    function setWithdrawFee(uint16 _newWithdrawFeePercentage) external override onlyOwner {\\r\\n        require(_newWithdrawFeePercentage < MAX_PERCENTAGE, \\\"Fee exceeds maximum\\\");\\r\\n        withdrawFeePercent = _newWithdrawFeePercentage;\\r\\n    }\\r\\n\\r\\n    function setOpenPositionFee(uint16 _newOpenPositionFeePercentage) external override onlyOwner {\\r\\n        require(_newOpenPositionFeePercentage < MAX_PERCENTAGE, \\\"Fee exceeds maximum\\\");\\r\\n        openPositionFeePercent = _newOpenPositionFeePercentage;\\r\\n    }\\r\\n\\r\\n    function setClosePositionFee(uint16 _newClosePositionFeePercentage) external override onlyOwner {\\r\\n        require(_newClosePositionFeePercentage < MAX_PERCENTAGE, \\\"Fee exceeds maximum\\\");\\r\\n        require(_newClosePositionFeePercentage <= closePositionMaxFeePercent, \\\"Min fee above max fee\\\");\\r\\n        closePositionFeePercent = _newClosePositionFeePercentage;\\r\\n    }\\r\\n\\r\\n    function setOpenPositionLPFee(uint16 _newOpenPositionLPFeePercent) external override onlyOwner {\\r\\n        require(_newOpenPositionLPFeePercent < MAX_PERCENTAGE, \\\"Fee exceeds maximum\\\");\\r\\n        openPositionLPFeePercent = _newOpenPositionLPFeePercent;\\r\\n    }\\r\\n\\r\\n    function setClosePositionLPFee(uint16 _newClosePositionLPFeePercent) external override onlyOwner {\\r\\n        require(_newClosePositionLPFeePercent < MAX_PERCENTAGE, \\\"Fee exceeds maximum\\\");\\r\\n        closePositionLPFeePercent = _newClosePositionLPFeePercent;\\r\\n    }\\r\\n\\r\\n    function setClosePositionMaxFee(uint16 _newClosePositionMaxFeePercentage) external override onlyOwner {\\r\\n        require(_newClosePositionMaxFeePercentage < MAX_PERCENTAGE, \\\"Fee exceeds maximum\\\");\\r\\n        require(_newClosePositionMaxFeePercentage >= closePositionFeePercent, \\\"Max fee below min fee\\\");\\r\\n        closePositionMaxFeePercent = _newClosePositionMaxFeePercentage;\\r\\n    }\\r\\n\\r\\n    function setClosePositionFeeDecay(uint256 _newClosePositionFeeDecayPeriod) external override onlyOwner {\\r\\n        require(_newClosePositionFeeDecayPeriod > 0, \\\"Period must be positive\\\");\\r\\n        closePositionFeeDecayPeriod = _newClosePositionFeeDecayPeriod;\\r\\n    }\\r\\n\\r\\n    function setOracleHeartbeatPeriod(uint256 _newOracleHeartbeatPeriod) external override onlyOwner {\\r\\n        require(_newOracleHeartbeatPeriod > 0, \\\"Heartbeat must be positive\\\");\\r\\n        oracleHeartbeatPeriod = _newOracleHeartbeatPeriod;\\r\\n    }\\r\\n\\r\\n    function setBuyingPremiumFeeMax(uint16 _newBuyingPremiumFeeMaxPercentage) external override onlyOwner {\\r\\n        require(_newBuyingPremiumFeeMaxPercentage < MAX_PERCENTAGE, \\\"Fee exceeds maximum\\\");\\r\\n        buyingPremiumFeeMaxPercent = _newBuyingPremiumFeeMaxPercentage;\\r\\n    }\\r\\n\\r\\n    function setBuyingPremiumThreshold(uint16 _newBuyingPremiumThreshold) external override onlyOwner {\\r\\n        require(_newBuyingPremiumThreshold < MAX_PERCENTAGE, \\\"Threshold exceeds maximum\\\");\\r\\n        buyingPremiumThreshold = _newBuyingPremiumThreshold;   \\r\\n    }\\r\\n\\r\\n    function setClosingPremiumFeeMax(uint16 _newClosingPremiumFeeMaxPercentage) external override onlyOwner {\\r\\n        require(_newClosingPremiumFeeMaxPercentage < MAX_PERCENTAGE, \\\"Fee exceeds maximum\\\");\\r\\n        closingPremiumFeeMaxPercent = _newClosingPremiumFeeMaxPercentage;\\r\\n    }\\r\\n\\r\\n    function setCollateralToBuyingPremiumMapping(uint16[] calldata _newCollateralToBuyingPremiumMapping) external override onlyOwner {\\r\\n        require(_newCollateralToBuyingPremiumMapping.length == COLATERAL_VALUES_NUM, \\\"Bad mapping size\\\");\\r\\n        collateralToBuyingPremiumMapping = _newCollateralToBuyingPremiumMapping;\\r\\n    }\\r\\n\\r\\n    function setFundingFeeConstantRate(uint16 _newfundingFeeConstantRate) external override onlyOwner {\\r\\n        require(_newfundingFeeConstantRate < FUNDING_FEE_MAX_RATE, \\\"Fee exceeds maximum\\\");\\r\\n        fundingFeeConstantRate = _newfundingFeeConstantRate;\\r\\n    }\\r\\n\\r\\n    function setTurbulenceStep(uint16 _newTurbulenceStepPercentage) external override onlyOwner {\\r\\n        require(_newTurbulenceStepPercentage < MAX_PERCENTAGE, \\\"Step exceeds maximum\\\");\\r\\n        turbulenceStepPercent = _newTurbulenceStepPercentage;\\r\\n    }\\r\\n    \\r\\n    function setMaxTurbulenceFeePercentToTrim(uint16 _newMaxTurbulenceFeePercentToTrim) external override onlyOwner {\\r\\n        require(_newMaxTurbulenceFeePercentToTrim < MAX_PERCENTAGE, \\\"Fee exceeds maximum\\\");\\r\\n        maxTurbulenceFeePercentToTrim = _newMaxTurbulenceFeePercentToTrim;\\r\\n    }\\r\\n\\r\\n     function setTurbulenceDeviationThresholdPercent(uint16 _newTurbulenceDeviationThresholdPercent) external override onlyOwner {\\r\\n        require(_newTurbulenceDeviationThresholdPercent < MAX_PERCENTAGE, \\\"Threshold exceeds maximum\\\");\\r\\n        turbulenceDeviationThresholdPercent = _newTurbulenceDeviationThresholdPercent;\\r\\n    }\\r\\n\\r\\n    function setTurbulenceDeviationPercent(uint16 _newTurbulenceDeviationPercentage) external override onlyOwner {\\r\\n        require(_newTurbulenceDeviationPercentage < MAX_PERCENTAGE, \\\"Deviation exceeds maximum\\\");\\r\\n        turbulenceDeviationPercentage = _newTurbulenceDeviationPercentage;\\r\\n    }\\r\\n\\r\\n    function setVolumeTimeWindow(uint16 _newVolumeTimeWindow) external override onlyOwner {\\r\\n        volumeTimeWindow = _newVolumeTimeWindow;\\r\\n    }\\r\\n\\r\\n    function setVolumeFeeTimeWindow(uint16 _newVolumeFeeTimeWindow) external override onlyOwner {\\r\\n        volumeFeeTimeWindow = _newVolumeFeeTimeWindow;\\r\\n    }\\r\\n\\r\\n    function setMaxVolumeFeeDeltaCollateral(uint16 _newMaxVolumeFeeDeltaCollateral) external override onlyOwner {\\r\\n        maxVolumeFeeDeltaCollateral = _newMaxVolumeFeeDeltaCollateral;\\r\\n    }\\r\\n\\r\\n    function setMidVolumeFee(uint16 _newMidVolumeFee) external override onlyOwner {\\r\\n        midVolumeFee = _newMidVolumeFee;\\r\\n    }\\r\\n\\r\\n    function setMaxVolumeFee(uint16 _newMaxVolumeFee) external override onlyOwner {\\r\\n        maxVolumeFee = _newMaxVolumeFee;\\r\\n    }\\r\\n\\r\\n    function setCloseVolumeTimeWindow(uint16 _newCloseVolumeTimeWindow) external override onlyOwner {\\r\\n        closeVolumeTimeWindow = _newCloseVolumeTimeWindow;\\r\\n    }\\r\\n\\r\\n    function setCloseVolumeFeeTimeWindow(uint16 _newCloseVolumeFeeTimeWindow) external override onlyOwner {\\r\\n        closeVolumeFeeTimeWindow = _newCloseVolumeFeeTimeWindow;\\r\\n    }\\r\\n\\r\\n    function setCloseMaxVolumeFeeDeltaCollateral(uint16 _newCloseMaxVolumeFeeDeltaCollateral) external override onlyOwner {\\r\\n        closeMaxVolumeFeeDeltaCollateral = _newCloseMaxVolumeFeeDeltaCollateral;\\r\\n    }\\r\\n\\r\\n    function setCloseMidVolumeFee(uint16 _newCloseMidVolumeFee) external override onlyOwner {\\r\\n        closeMidVolumeFee = _newCloseMidVolumeFee;\\r\\n    }\\r\\n\\r\\n    function setCloseMaxVolumeFee(uint16 _newCloseMaxVolumeFee) external override onlyOwner {\\r\\n        closeMaxVolumeFee = _newCloseMaxVolumeFee;\\r\\n    }\\r\\n\\r\\n    function calculateTurbulenceIndicatorPercent(uint256 totalTime, uint256 newRounds, uint16 _lastCVIValue, uint16 _currCVIValue) public view override returns (uint16) {\\r\\n        uint16 updatedTurbulenceIndicatorPercent = turbulenceIndicatorPercent;\\r\\n\\r\\n        uint256 CVIDeltaPercent = uint256(_currCVIValue > _lastCVIValue ? (_currCVIValue - _lastCVIValue) : (_lastCVIValue - _currCVIValue)) * MAX_PERCENTAGE / _lastCVIValue;\\r\\n        uint256 maxAllowedTurbulenceTimes = CVIDeltaPercent * MAX_PERCENTAGE / (uint256(turbulenceDeviationThresholdPercent) * turbulenceDeviationPercentage);\\r\\n\\r\\n        uint256 decayTimes = 0;\\r\\n        uint256 turbulenceTimes = 0;\\r\\n        uint256 totalHeartbeats = totalTime / oracleHeartbeatPeriod;\\r\\n        if (newRounds > totalHeartbeats) {\\r\\n            turbulenceTimes = newRounds - totalHeartbeats;\\r\\n            turbulenceTimes = turbulenceTimes >  maxAllowedTurbulenceTimes ? maxAllowedTurbulenceTimes : turbulenceTimes;\\r\\n            decayTimes = newRounds - turbulenceTimes;\\r\\n        } else {\\r\\n            decayTimes = newRounds;\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < decayTimes; i++) {\\r\\n            updatedTurbulenceIndicatorPercent = updatedTurbulenceIndicatorPercent / 2;\\r\\n        }\\r\\n\\r\\n        if (updatedTurbulenceIndicatorPercent < maxTurbulenceFeePercentToTrim) {\\r\\n            updatedTurbulenceIndicatorPercent = 0;\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < turbulenceTimes; i++) {\\r\\n            updatedTurbulenceIndicatorPercent = updatedTurbulenceIndicatorPercent + uint16(uint256(buyingPremiumFeeMaxPercent) * turbulenceStepPercent / MAX_PERCENTAGE);\\r\\n        }\\r\\n\\r\\n        if (updatedTurbulenceIndicatorPercent > buyingPremiumFeeMaxPercent) {\\r\\n            updatedTurbulenceIndicatorPercent = buyingPremiumFeeMaxPercent;\\r\\n        }\\r\\n\\r\\n        return updatedTurbulenceIndicatorPercent;\\r\\n    }\\r\\n\\r\\n    function calculateBuyingPremiumFee(uint168 _tokenAmount, uint8 _leverage, uint256 _collateralRatio, uint256 _lastCollateralRatio, bool _withVolumeFee) external view override returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage) {\\r\\n        (buyingPremiumFee, combinedPremiumFeePercentage) =  _calculateBuyingPremiumFeeWithParameters(_tokenAmount, _leverage, _collateralRatio, _lastCollateralRatio, _withVolumeFee, turbulenceIndicatorPercent, adjustedVolumeTimestamp);\\r\\n    }\\r\\n    \\r\\n    function calculateBuyingPremiumFeeWithAddendum(uint168 _tokenAmount, uint8 _leverage, uint256 _collateralRatio, uint256 _lastCollateralRatio, bool _withVolumeFee, uint16 _turbulenceIndicatorPercent) external view override returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage) {\\r\\n        (buyingPremiumFee, combinedPremiumFeePercentage) = _calculateBuyingPremiumFeeWithParameters(_tokenAmount, _leverage, _collateralRatio, _lastCollateralRatio, _withVolumeFee, \\r\\n            _turbulenceIndicatorPercent, getAdjustedTimestamp(adjustedVolumeTimestamp, _collateralRatio - _lastCollateralRatio, volumeTimeWindow, maxVolumeFeeDeltaCollateral));\\r\\n    }\\r\\n\\r\\n    function calculateClosingPremiumFee(uint256 /*_tokenAmount*/, uint256 /*_collateralRatio*/, uint256 /*_lastCollateralRatio*/, bool _withVolumeFee) external view override returns (uint16 combinedPremiumFeePercentage) {\\r\\n        return _calculateClosingPremiumFee(_withVolumeFee, closeAdjustedVolumeTimestamp);\\r\\n    }\\r\\n\\r\\n    function calculateClosingPremiumFeeWithAddendum(uint256 _collateralRatio, uint256 _lastCollateralRatio, bool _withVolumeFee) external view override returns (uint16 combinedPremiumFeePercentage) {\\r\\n        return _calculateClosingPremiumFee(_withVolumeFee,\\r\\n            getAdjustedTimestamp(closeAdjustedVolumeTimestamp, _lastCollateralRatio - _collateralRatio, closeVolumeTimeWindow, closeMaxVolumeFeeDeltaCollateral));\\r\\n    }\\r\\n\\r\\n    function calculateSingleUnitFundingFee(CVIValue[] memory _cviValues) public override view returns (uint256 fundingFee) {\\r\\n        for (uint8 i = 0; i < _cviValues.length; i++) {\\r\\n            fundingFee = fundingFee + calculateSingleUnitPeriodFundingFee(_cviValues[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateSnapshots(uint256 _latestTimestamp, uint256 _blockTimestampSnapshot, uint256 _latestTimestampSnapshot, uint80 latestOracleRoundId) external override view returns (SnapshotUpdate memory snapshotUpdate) {\\r\\n        (uint16 cviValue, uint80 periodEndRoundId, uint256 periodEndTimestamp) = cviOracle.getCVILatestRoundData();\\r\\n        snapshotUpdate.cviValue = cviValue;\\r\\n        snapshotUpdate.cviValueTimestamp = periodEndTimestamp;\\r\\n\\r\\n        snapshotUpdate.latestSnapshot = _blockTimestampSnapshot;\\r\\n        if (snapshotUpdate.latestSnapshot != 0) { // Block was already updated\\r\\n            snapshotUpdate.singleUnitFundingFee = 0;\\r\\n            return snapshotUpdate;\\r\\n        }\\r\\n\\r\\n        if (_latestTimestamp == 0) { // For first recorded block\\r\\n            snapshotUpdate.latestSnapshot = PRECISION_DECIMALS;\\r\\n            snapshotUpdate.updatedSnapshot = true;\\r\\n            snapshotUpdate.newLatestRoundId = periodEndRoundId;\\r\\n            snapshotUpdate.updatedLatestRoundId = true;\\r\\n            snapshotUpdate.updatedLatestTimestamp = true;\\r\\n            snapshotUpdate.singleUnitFundingFee = 0;\\r\\n            return snapshotUpdate;\\r\\n        }\\r\\n\\r\\n        uint80 periodStartRoundId = latestOracleRoundId;\\r\\n        require(periodEndRoundId >= periodStartRoundId, \\\"Bad round id\\\");\\r\\n\\r\\n        snapshotUpdate.totalRounds = periodEndRoundId - periodStartRoundId;\\r\\n\\r\\n        uint256 cviValuesNum = snapshotUpdate.totalRounds > 0 ? 2 : 1;\\r\\n        IFeesCalculator.CVIValue[] memory cviValues = new IFeesCalculator.CVIValue[](cviValuesNum);\\r\\n        \\r\\n        if (snapshotUpdate.totalRounds > 0) {\\r\\n            (uint16 periodStartCVIValue, uint256 periodStartTimestamp) = cviOracle.getCVIRoundData(periodStartRoundId);\\r\\n            cviValues[0] = IFeesCalculator.CVIValue(periodEndTimestamp - _latestTimestamp, periodStartCVIValue);\\r\\n            cviValues[1] = IFeesCalculator.CVIValue(block.timestamp - periodEndTimestamp, cviValue);\\r\\n\\r\\n            snapshotUpdate.newLatestRoundId = periodEndRoundId;\\r\\n            snapshotUpdate.updatedLatestRoundId = true;\\r\\n\\r\\n            snapshotUpdate.totalTime = periodEndTimestamp - periodStartTimestamp;\\r\\n            snapshotUpdate.updatedTurbulenceData = true;\\r\\n        } else {\\r\\n            cviValues[0] = IFeesCalculator.CVIValue(block.timestamp - _latestTimestamp, cviValue);\\r\\n        }\\r\\n\\r\\n        snapshotUpdate.singleUnitFundingFee = calculateSingleUnitFundingFee(cviValues);\\r\\n        snapshotUpdate.latestSnapshot = _latestTimestampSnapshot + snapshotUpdate.singleUnitFundingFee;\\r\\n        snapshotUpdate.updatedSnapshot = true;\\r\\n        snapshotUpdate.updatedLatestTimestamp = true;\\r\\n    }\\r\\n\\r\\n    function calculateClosePositionFeePercent(uint256 _creationTimestamp, bool _isNoLockPositionAddress) external view override returns (uint16) {\\r\\n        if (block.timestamp - _creationTimestamp >= closePositionFeeDecayPeriod || _isNoLockPositionAddress) {\\r\\n            return closePositionFeePercent;\\r\\n        }\\r\\n\\r\\n        uint16 decay = uint16((closePositionMaxFeePercent - closePositionFeePercent) * (block.timestamp - _creationTimestamp) / \\r\\n            closePositionFeeDecayPeriod);\\r\\n        return closePositionMaxFeePercent - decay;\\r\\n    }\\r\\n\\r\\n    function calculateWithdrawFeePercent(uint256) external view override returns (uint16) {\\r\\n        return withdrawFeePercent;\\r\\n    }\\r\\n\\r\\n    function openPositionFees() external view override returns (uint16 openPositionFeePercentResult, uint16 buyingPremiumFeeMaxPercentResult) {\\r\\n        openPositionFeePercentResult = openPositionFeePercent;\\r\\n        buyingPremiumFeeMaxPercentResult = buyingPremiumFeeMaxPercent;\\r\\n    }\\r\\n\\r\\n    function calculateSingleUnitPeriodFundingFee(CVIValue memory _cviValue) private view returns (uint256 fundingFee) {\\r\\n        if (_cviValue.cviValue == 0 || _cviValue.period == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 fundingFeeRatePercents = FUNDING_FEE_MAX_RATE;\\r\\n        uint16 integerCVIValue = _cviValue.cviValue / CVI_DECIMALS;\\r\\n        if (integerCVIValue > MAX_FUNDING_FEE_CVI_THRESHOLD) {\\r\\n            if (integerCVIValue >= MIN_FUDNING_FEE_CVI_THRESHOLD) {\\r\\n                fundingFeeRatePercents = FUNDING_FEE_MIN_RATE;\\r\\n            } else {\\r\\n                // Defining as memory to keep function pure and save storage space + reads\\r\\n                uint24[5] memory fundingFeeCoefficients = [100000, 114869, 131950, 151571, 174110];\\r\\n\\r\\n                uint256 exponent = (integerCVIValue - MAX_FUNDING_FEE_CVI_THRESHOLD) / FUNDING_FEE_DIVISION_FACTOR;\\r\\n                uint256 coefficientIndex = (integerCVIValue - MAX_FUNDING_FEE_CVI_THRESHOLD) % FUNDING_FEE_DIVISION_FACTOR;\\r\\n\\r\\n                // Note: overflow is not possible as the exponent can only get larger, and other parts are constants\\r\\n                // However, 2 ** exponent can overflow if cvi value is wrong\\r\\n\\r\\n                require(exponent < 256, \\\"exponent overflow\\\");\\r\\n                fundingFeeRatePercents = PRECISION_DECIMALS / (2 ** exponent) / fundingFeeCoefficients[coefficientIndex] + fundingFeeConstantRate;\\r\\n\\r\\n                if (fundingFeeRatePercents > FUNDING_FEE_MAX_RATE) {\\r\\n                    fundingFeeRatePercents = FUNDING_FEE_MAX_RATE;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return PRECISION_DECIMALS * _cviValue.cviValue * fundingFeeRatePercents * _cviValue.period /\\r\\n            FUNDING_FEE_BASE_PERIOD / maxCVIValue / MAX_FUNDING_FEE_PERCENTAGE;\\r\\n    }\\r\\n\\r\\n    function _calculateBuyingPremiumFeeWithParameters(uint168 _tokenAmount, uint8 _leverage, uint256 _collateralRatio, uint256 _lastCollateralRatio, bool _withVolumeFee, uint16 _turbulenceIndicatorPercent, uint32 _adjustedVolumeTimestamp) private view returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage) {\\r\\n        require(_collateralRatio >= _lastCollateralRatio);\\r\\n\\r\\n        uint16 buyingPremiumFeePercentage = 0;\\r\\n        if (_collateralRatio >= PRECISION_DECIMALS) {\\r\\n            buyingPremiumFeePercentage = calculateRelativePercentage(buyingPremiumFeeMaxPercent, _collateralRatio, _lastCollateralRatio);\\r\\n        } else {\\r\\n            if (_collateralRatio >= buyingPremiumThreshold * PRECISION_DECIMALS / MAX_PERCENTAGE) {\\r\\n                buyingPremiumFeePercentage = calculateRelativePercentage(collateralToBuyingPremiumMapping[_collateralRatio * 10**2 / PRECISION_DECIMALS], _collateralRatio, _lastCollateralRatio);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint16 volumeFeePercentage = calculateVolumeFee(_withVolumeFee, _adjustedVolumeTimestamp, volumeTimeWindow, volumeFeeTimeWindow, midVolumeFee, maxVolumeFee);\\r\\n\\r\\n        combinedPremiumFeePercentage = openPositionLPFeePercent + _turbulenceIndicatorPercent + buyingPremiumFeePercentage + volumeFeePercentage;\\r\\n        if (combinedPremiumFeePercentage > buyingPremiumFeeMaxPercent) {\\r\\n            combinedPremiumFeePercentage = buyingPremiumFeeMaxPercent;\\r\\n        }\\r\\n\\r\\n        uint256 __buyingPremiumFee = uint256(_tokenAmount) * _leverage * combinedPremiumFeePercentage / MAX_PERCENTAGE;\\r\\n        buyingPremiumFee = uint168(__buyingPremiumFee);\\r\\n        require(__buyingPremiumFee == buyingPremiumFee, \\\"Too much tokens\\\");\\r\\n    }\\r\\n\\r\\n    function _calculateClosingPremiumFee(bool _withVolumeFee, uint32 _adjustedCloseVolumeTimestamp) private view returns (uint16 combinedPremiumFeePercentage) {\\r\\n        uint16 closingPremiumFeePercentage = calculateVolumeFee(_withVolumeFee, _adjustedCloseVolumeTimestamp, closeVolumeTimeWindow, closeVolumeFeeTimeWindow, closeMidVolumeFee, closeMaxVolumeFee);\\r\\n\\r\\n        combinedPremiumFeePercentage = closePositionLPFeePercent + closingPremiumFeePercentage;\\r\\n        if (combinedPremiumFeePercentage > closingPremiumFeeMaxPercent) {\\r\\n            combinedPremiumFeePercentage = closingPremiumFeeMaxPercent;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateVolumeFee(bool _withVolumeFee, uint32 _adjustedVolumeTimestamp, uint16 _volumeTimeWindow, uint16 _volumeFeeTimeWindow, uint16 _midVolumeFee, uint16 _maxVolumeFee) private view returns (uint16 volumeFeePercentage) {\\r\\n        if (_withVolumeFee) {\\r\\n            if (_adjustedVolumeTimestamp < block.timestamp - _volumeFeeTimeWindow) {\\r\\n                volumeFeePercentage = uint16(uint256(_midVolumeFee) * (_adjustedVolumeTimestamp - (block.timestamp - _volumeTimeWindow)) / (_volumeTimeWindow - _volumeFeeTimeWindow));\\r\\n            } else {\\r\\n                volumeFeePercentage = uint16(uint256(_midVolumeFee) + (_maxVolumeFee - _midVolumeFee) * (_adjustedVolumeTimestamp - (block.timestamp - _volumeFeeTimeWindow)) / _volumeFeeTimeWindow);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateRelativePercentage(uint16 _percentage, uint256 _collateralRatio, uint256 _lastCollateralRatio) private view returns (uint16) {\\r\\n        if (_lastCollateralRatio >= buyingPremiumThreshold * PRECISION_DECIMALS / MAX_PERCENTAGE || _collateralRatio == _lastCollateralRatio) {\\r\\n            return _percentage;\\r\\n        }\\r\\n\\r\\n        return uint16(_percentage * (_collateralRatio - buyingPremiumThreshold * PRECISION_DECIMALS / MAX_PERCENTAGE) / (_collateralRatio - _lastCollateralRatio));\\r\\n    }\\r\\n\\r\\n    function getAdjustedTimestamp(uint32 _currAdjustedTimetamp, uint256 _deltaCollateral, uint16 _volumeTimeWindow, uint16 _maxVolumeFeeDeltaCollateral) private view returns (uint32 newAdjustedTimestamp) {\\r\\n        newAdjustedTimestamp = _currAdjustedTimetamp;\\r\\n\\r\\n        if (newAdjustedTimestamp < block.timestamp - _volumeTimeWindow) {\\r\\n            newAdjustedTimestamp = uint32(block.timestamp) - _volumeTimeWindow;\\r\\n        }\\r\\n\\r\\n        newAdjustedTimestamp = uint32(newAdjustedTimestamp + uint256(_volumeTimeWindow) * _deltaCollateral / (_maxVolumeFeeDeltaCollateral * PRECISION_DECIMALS / MAX_PERCENTAGE));\\r\\n\\r\\n        if (newAdjustedTimestamp > block.timestamp) {\\r\\n            newAdjustedTimestamp = uint32(block.timestamp);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeesCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport \\\"./ICVIOracle.sol\\\";\\r\\n\\r\\ninterface IFeesCalculator {\\r\\n\\r\\n    struct CVIValue {\\r\\n        uint256 period;\\r\\n        uint16 cviValue;\\r\\n    }\\r\\n\\r\\n    struct SnapshotUpdate {\\r\\n        uint256 latestSnapshot;\\r\\n        uint256 singleUnitFundingFee;\\r\\n        uint256 totalTime;\\r\\n        uint256 totalRounds;\\r\\n        uint256 cviValueTimestamp;\\r\\n        uint80 newLatestRoundId;\\r\\n        uint16 cviValue;\\r\\n        bool updatedSnapshot;\\r\\n        bool updatedLatestRoundId;\\r\\n        bool updatedLatestTimestamp;\\r\\n        bool updatedTurbulenceData;\\r\\n    }\\r\\n\\r\\n    function updateTurbulenceIndicatorPercent(uint256 totalTime, uint256 newRounds, uint16 lastCVIValue, uint16 currCVIValue) external;\\r\\n    function updateAdjustedTimestamp(uint256 collateralRatio, uint256 lastCollateralRatio) external;\\r\\n    function updateCloseAdjustedTimestamp(uint256 collateralRatio, uint256 lastCollateralRatio) external;\\r\\n\\r\\n    function setOracle(ICVIOracle cviOracle) external;\\r\\n\\r\\n    function setStateUpdator(address newUpdator) external;\\r\\n\\r\\n    function setDepositFee(uint16 newDepositFeePercentage) external;\\r\\n    function setWithdrawFee(uint16 newWithdrawFeePercentage) external;\\r\\n    function setOpenPositionFee(uint16 newOpenPositionFeePercentage) external;\\r\\n    function setOpenPositionLPFee(uint16 newOpenPositionLPFeePercent) external;\\r\\n    function setClosePositionLPFee(uint16 newClosePositionLPFeePercent) external;\\r\\n    function setClosePositionFee(uint16 newClosePositionFeePercentage) external;\\r\\n    function setClosePositionMaxFee(uint16 newClosePositionMaxFeePercentage) external;\\r\\n    function setClosePositionFeeDecay(uint256 newClosePositionFeeDecayPeriod) external;\\r\\n    \\r\\n    function setOracleHeartbeatPeriod(uint256 newOracleHeartbeatPeriod) external;\\r\\n    function setBuyingPremiumFeeMax(uint16 newBuyingPremiumFeeMaxPercentage) external;\\r\\n    function setBuyingPremiumThreshold(uint16 newBuyingPremiumThreshold) external;\\r\\n    function setClosingPremiumFeeMax(uint16 newClosingPremiumFeeMaxPercentage) external;\\r\\n    function setCollateralToBuyingPremiumMapping(uint16[] calldata newCollateralToBuyingPremiumMapping) external;\\r\\n    function setFundingFeeConstantRate(uint16 newfundingFeeConstantRate) external;\\r\\n    function setTurbulenceStep(uint16 newTurbulenceStepPercentage) external;\\r\\n    function setMaxTurbulenceFeePercentToTrim(uint16 newMaxTurbulenceFeePercentToTrim) external;\\r\\n    function setTurbulenceDeviationThresholdPercent(uint16 newTurbulenceDeviationThresholdPercent) external;\\r\\n    function setTurbulenceDeviationPercent(uint16 newTurbulenceDeviationPercentage) external;\\r\\n\\r\\n    function setVolumeTimeWindow(uint16 newVolumeTimeWindow) external;\\r\\n    function setVolumeFeeTimeWindow(uint16 newVolumeFeeTimeWindow) external;\\r\\n    function setMaxVolumeFeeDeltaCollateral(uint16 newMaxVolumeFeeDeltaCollateral) external;\\r\\n    function setMidVolumeFee(uint16 newMidVolumeFee) external;\\r\\n    function setMaxVolumeFee(uint16 newMaxVolumeFee) external;\\r\\n\\r\\n    function setCloseVolumeTimeWindow(uint16 newCloseVolumeTimeWindow) external;\\r\\n    function setCloseVolumeFeeTimeWindow(uint16 newCloseVolumeFeeTimeWindow) external;\\r\\n    function setCloseMaxVolumeFeeDeltaCollateral(uint16 newCloseMaxVolumeFeeDeltaCollateral) external;\\r\\n    function setCloseMidVolumeFee(uint16 newCloseMidVolumeFee) external;\\r\\n    function setCloseMaxVolumeFee(uint16 newCloseMaxVolumeFee) external;\\r\\n\\r\\n    function calculateTurbulenceIndicatorPercent(uint256 totalTime, uint256 newRounds, uint16 _lastCVIValue, uint16 _currCVIValue) external view returns (uint16);\\r\\n\\r\\n    function calculateBuyingPremiumFee(uint168 tokenAmount, uint8 leverage, uint256 collateralRatio, uint256 lastCollateralRatio, bool withVolumeFee) external view returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage);\\r\\n    function calculateBuyingPremiumFeeWithAddendum(uint168 tokenAmount, uint8 leverage, uint256 collateralRatio, uint256 lastCollateralRatio, bool withVolumeFee, uint16 _turbulenceIndicatorPercent) external view returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage);\\r\\n\\r\\n    function calculateClosingPremiumFee(uint256 tokenAmount, uint256 collateralRatio, uint256 lastCollateralRatio, bool withVolumeFee) external view returns (uint16 combinedPremiumFeePercentage);\\r\\n    function calculateClosingPremiumFeeWithAddendum(uint256 collateralRatio, uint256 lastCollateralRatio, bool withVolumeFee) external view returns (uint16 combinedPremiumFeePercentage);\\r\\n\\r\\n    function calculateSingleUnitFundingFee(CVIValue[] memory cviValues) external view returns (uint256 fundingFee);\\r\\n    function updateSnapshots(uint256 latestTimestamp, uint256 blockTimestampSnapshot, uint256 latestTimestampSnapshot, uint80 latestOracleRoundId) external view returns (SnapshotUpdate memory snapshotUpdate);\\r\\n\\r\\n    function calculateClosePositionFeePercent(uint256 creationTimestamp, bool isNoLockPositionAddress) external view returns (uint16);\\r\\n    function calculateWithdrawFeePercent(uint256 lastDepositTimestamp) external view returns (uint16);\\r\\n\\r\\n    function depositFeePercent() external view returns (uint16);\\r\\n    function withdrawFeePercent() external view returns (uint16);\\r\\n    function openPositionFeePercent() external view returns (uint16);\\r\\n    function closePositionFeePercent() external view returns (uint16);\\r\\n    function openPositionLPFeePercent() external view returns (uint16);\\r\\n    function closePositionLPFeePercent() external view returns (uint16);\\r\\n\\r\\n    function openPositionFees() external view returns (uint16 openPositionFeePercentResult, uint16 buyingPremiumFeeMaxPercentResult);\\r\\n\\r\\n    function turbulenceIndicatorPercent() external view returns (uint16);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICVIOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8;\\r\\n\\r\\ninterface ICVIOracle {\\r\\n    function getCVIRoundData(uint80 roundId) external view returns (uint16 cviValue, uint256 cviTimestamp);\\r\\n    function getCVILatestRoundData() external view returns (uint16 cviValue, uint80 cviRoundId, uint256 cviTimestamp);\\r\\n\\r\\n    function setDeviationCheck(bool newDeviationCheck) external;\\r\\n    function setMaxDeviation(uint16 newMaxDeviation) external;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ICVIOracle\",\"name\":\"_cviOracle\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_maxCVIValue\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adjustedVolumeTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyingPremiumFeeMaxPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyingPremiumThreshold\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint168\",\"name\":\"_tokenAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint8\",\"name\":\"_leverage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withVolumeFee\",\"type\":\"bool\"}],\"name\":\"calculateBuyingPremiumFee\",\"outputs\":[{\"internalType\":\"uint168\",\"name\":\"buyingPremiumFee\",\"type\":\"uint168\"},{\"internalType\":\"uint16\",\"name\":\"combinedPremiumFeePercentage\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint168\",\"name\":\"_tokenAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint8\",\"name\":\"_leverage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withVolumeFee\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"_turbulenceIndicatorPercent\",\"type\":\"uint16\"}],\"name\":\"calculateBuyingPremiumFeeWithAddendum\",\"outputs\":[{\"internalType\":\"uint168\",\"name\":\"buyingPremiumFee\",\"type\":\"uint168\"},{\"internalType\":\"uint16\",\"name\":\"combinedPremiumFeePercentage\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isNoLockPositionAddress\",\"type\":\"bool\"}],\"name\":\"calculateClosePositionFeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withVolumeFee\",\"type\":\"bool\"}],\"name\":\"calculateClosingPremiumFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"combinedPremiumFeePercentage\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withVolumeFee\",\"type\":\"bool\"}],\"name\":\"calculateClosingPremiumFeeWithAddendum\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"combinedPremiumFeePercentage\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"cviValue\",\"type\":\"uint16\"}],\"internalType\":\"struct IFeesCalculator.CVIValue[]\",\"name\":\"_cviValues\",\"type\":\"tuple[]\"}],\"name\":\"calculateSingleUnitFundingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fundingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRounds\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_lastCVIValue\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_currCVIValue\",\"type\":\"uint16\"}],\"name\":\"calculateTurbulenceIndicatorPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawFeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeAdjustedVolumeTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeMaxVolumeFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeMaxVolumeFeeDeltaCollateral\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeMidVolumeFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePositionFeeDecayPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePositionFeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePositionLPFeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePositionMaxFeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeVolumeFeeTimeWindow\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeVolumeTimeWindow\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closingPremiumFeeMaxPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralToBuyingPremiumMapping\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cviOracle\",\"outputs\":[{\"internalType\":\"contract ICVIOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingFeeConstantRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCVIValue\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTurbulenceFeePercentToTrim\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxVolumeFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxVolumeFeeDeltaCollateral\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"midVolumeFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openPositionFeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openPositionFees\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"openPositionFeePercentResult\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buyingPremiumFeeMaxPercentResult\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openPositionLPFeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleHeartbeatPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newBuyingPremiumFeeMaxPercentage\",\"type\":\"uint16\"}],\"name\":\"setBuyingPremiumFeeMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newBuyingPremiumThreshold\",\"type\":\"uint16\"}],\"name\":\"setBuyingPremiumThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newCloseMaxVolumeFee\",\"type\":\"uint16\"}],\"name\":\"setCloseMaxVolumeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newCloseMaxVolumeFeeDeltaCollateral\",\"type\":\"uint16\"}],\"name\":\"setCloseMaxVolumeFeeDeltaCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newCloseMidVolumeFee\",\"type\":\"uint16\"}],\"name\":\"setCloseMidVolumeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newClosePositionFeePercentage\",\"type\":\"uint16\"}],\"name\":\"setClosePositionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newClosePositionFeeDecayPeriod\",\"type\":\"uint256\"}],\"name\":\"setClosePositionFeeDecay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newClosePositionLPFeePercent\",\"type\":\"uint16\"}],\"name\":\"setClosePositionLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newClosePositionMaxFeePercentage\",\"type\":\"uint16\"}],\"name\":\"setClosePositionMaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newCloseVolumeFeeTimeWindow\",\"type\":\"uint16\"}],\"name\":\"setCloseVolumeFeeTimeWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newCloseVolumeTimeWindow\",\"type\":\"uint16\"}],\"name\":\"setCloseVolumeTimeWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newClosingPremiumFeeMaxPercentage\",\"type\":\"uint16\"}],\"name\":\"setClosingPremiumFeeMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_newCollateralToBuyingPremiumMapping\",\"type\":\"uint16[]\"}],\"name\":\"setCollateralToBuyingPremiumMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newDepositFeePercentage\",\"type\":\"uint16\"}],\"name\":\"setDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newfundingFeeConstantRate\",\"type\":\"uint16\"}],\"name\":\"setFundingFeeConstantRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newMaxTurbulenceFeePercentToTrim\",\"type\":\"uint16\"}],\"name\":\"setMaxTurbulenceFeePercentToTrim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newMaxVolumeFee\",\"type\":\"uint16\"}],\"name\":\"setMaxVolumeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newMaxVolumeFeeDeltaCollateral\",\"type\":\"uint16\"}],\"name\":\"setMaxVolumeFeeDeltaCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newMidVolumeFee\",\"type\":\"uint16\"}],\"name\":\"setMidVolumeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newOpenPositionFeePercentage\",\"type\":\"uint16\"}],\"name\":\"setOpenPositionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newOpenPositionLPFeePercent\",\"type\":\"uint16\"}],\"name\":\"setOpenPositionLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICVIOracle\",\"name\":\"_cviOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newOracleHeartbeatPeriod\",\"type\":\"uint256\"}],\"name\":\"setOracleHeartbeatPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newUpdator\",\"type\":\"address\"}],\"name\":\"setStateUpdator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newTurbulenceDeviationPercentage\",\"type\":\"uint16\"}],\"name\":\"setTurbulenceDeviationPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newTurbulenceDeviationThresholdPercent\",\"type\":\"uint16\"}],\"name\":\"setTurbulenceDeviationThresholdPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newTurbulenceStepPercentage\",\"type\":\"uint16\"}],\"name\":\"setTurbulenceStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newVolumeFeeTimeWindow\",\"type\":\"uint16\"}],\"name\":\"setVolumeFeeTimeWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newVolumeTimeWindow\",\"type\":\"uint16\"}],\"name\":\"setVolumeTimeWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newWithdrawFeePercentage\",\"type\":\"uint16\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateUpdator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turbulenceDeviationPercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turbulenceDeviationThresholdPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turbulenceIndicatorPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turbulenceStepPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"updateAdjustedTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"updateCloseAdjustedTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_latestTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockTimestampSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_latestTimestampSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"latestOracleRoundId\",\"type\":\"uint80\"}],\"name\":\"updateSnapshots\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"latestSnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"singleUnitFundingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRounds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cviValueTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"newLatestRoundId\",\"type\":\"uint80\"},{\"internalType\":\"uint16\",\"name\":\"cviValue\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"updatedSnapshot\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"updatedLatestRoundId\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"updatedLatestTimestamp\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"updatedTurbulenceData\",\"type\":\"bool\"}],\"internalType\":\"struct IFeesCalculator.SnapshotUpdate\",\"name\":\"snapshotUpdate\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRounds\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_lastCVIValue\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_currCVIValue\",\"type\":\"uint16\"}],\"name\":\"updateTurbulenceIndicatorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volumeFeeTimeWindow\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volumeTimeWindow\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FeesCalculator","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"00000000000000000000000044f671c28454d8f490088fa77f564a06a8caeba20000000000000000000000000000000000000000000000000000000000004e20","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}