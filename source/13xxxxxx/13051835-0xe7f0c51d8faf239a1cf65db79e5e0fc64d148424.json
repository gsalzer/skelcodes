{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/farm/facets/SeasonFacet/SeasonFacet.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Sun.sol\\\";\\nimport \\\"../../../interfaces/IOracle.sol\\\";\\nimport \\\"../../../libraries/LibCheck.sol\\\";\\nimport \\\"../../../libraries/LibIncentive.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Season holds the sunrise function and handles all logic for Season changes.\\n**/\\ncontract SeasonFacet is Sun {\\n\\n    using SafeMath for uint256;\\n    using Decimal for Decimal.D256;\\n\\n    event Sunrise(uint256 indexed season);\\n    event Incentivization(address indexed account, uint256 beans);\\n    event SeasonSnapshot(\\n        uint32 indexed season,\\n        uint256 price,\\n        uint256 supply,\\n        uint256 stalk,\\n        uint256 seeds,\\n        uint256 podIndex,\\n        uint256 harvestableIndex\\n    );\\n\\n    /**\\n     * Sunrise\\n    **/\\n\\n    function sunrise() external {\\n        require(!paused(), \\\"Season: Paused.\\\");\\n        require(seasonTime() > season(), \\\"Season: Still current Season.\\\");\\n\\n        (\\n            Decimal.D256 memory beanPrice,\\n            Decimal.D256 memory usdcPrice\\n        ) = IOracle(address(this)).capture();\\n        uint256 price = beanPrice.mul(1e18).div(usdcPrice).asUint256();\\n\\n        stepGovernance();\\n        stepSeason();\\n        snapshotSeason(price);\\n        stepWeather(price, s.f.soil);\\n        uint256 increase = stepSun(beanPrice, usdcPrice);\\n        stepSilo(increase);\\n        incentivize(msg.sender, C.getAdvanceIncentive());\\n\\n        LibCheck.balanceCheck();\\n\\n        emit Sunrise(season());\\n    }\\n\\n    function stepSeason() private {\\n        s.season.current += 1;\\n    }\\n\\n    function snapshotSeason(uint256 price) private {\\n        s.season.timestamp = block.timestamp;\\n        emit SeasonSnapshot(\\n            s.season.current,\\n            price,\\n            bean().totalSupply(),\\n            s.s.stalk,\\n            s.s.seeds,\\n            s.f.pods,\\n            s.f.harvestable\\n        );\\n    }\\n\\n    function incentivize(address account, uint256 amount) private {\\n        uint256 incentive = LibIncentive.fracExp(amount, 100, incentiveTime(), 1);\\n        mintToAccount(account, incentive);\\n        emit Incentivization(account, incentive);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/farm/facets/SeasonFacet/Sun.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Weather.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Sun\\n**/\\ncontract Sun is Weather {\\n\\n    using SafeMath for uint256;\\n    using Decimal for Decimal.D256;\\n\\n    event SupplyIncrease(\\n        uint256 indexed season,\\n        uint256 price,\\n        uint256 newHarvestable,\\n        uint256 newSilo,\\n        int256 newSoil\\n    );\\n    event SupplyDecrease(uint256 indexed season, uint256 price, int256 newSoil);\\n    event SupplyNeutral(uint256 indexed season, int256 newSoil);\\n\\n    /**\\n     * Internal\\n    **/\\n\\n    // Sun\\n\\n    function stepSun(Decimal.D256 memory beanPrice, Decimal.D256 memory usdcPrice)\\n        internal\\n        returns\\n        (uint256)\\n    {\\n        (uint256 eth_reserve, uint256 bean_reserve) = reserves();\\n\\n        uint256 currentBeans = sqrt(\\n            bean_reserve.mul(eth_reserve).mul(1e6).div(beanPrice.mul(1e18).asUint256())\\n        );\\n        uint256 targetBeans = sqrt(\\n            bean_reserve.mul(eth_reserve).mul(1e6).div(usdcPrice.mul(1e18).asUint256())\\n        );\\n\\n        uint256 price = beanPrice.mul(1e18).div(usdcPrice).asUint256();\\n        uint256 newSilo;\\n\\n        if (currentBeans < targetBeans) {\\n            newSilo = growSupply(targetBeans.sub(currentBeans), price);\\n        } else if (currentBeans > targetBeans) {\\n            shrinkSupply(currentBeans.sub(targetBeans), price);\\n        } else {\\n            int256 newSoil = ensureSoilBounds();\\n            emit SupplyNeutral(season(), newSoil);\\n        }\\n        s.w.startSoil = s.f.soil;\\n        return newSilo;\\n    }\\n\\n    function shrinkSupply(uint256 beans, uint256 price) private {\\n        int256 newSoil = increaseSoil(beans);\\n        emit SupplyDecrease(season(), price, newSoil);\\n    }\\n\\n    function growSupply(uint256 beans, uint256 price) private returns (uint256) {\\n        (uint256 newHarvestable, uint256 newSilo) = increaseSupply(beans);\\n        int256 newSoil = ensureSoilBounds();\\n        emit SupplyIncrease(season(), price, newHarvestable, newSilo, newSoil);\\n        return newSilo;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libraries/Decimal.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Oracle Interface\\n**/\\ninterface IOracle {\\n\\n  function capture() external returns (Decimal.D256 memory, Decimal.D256 memory);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibCheck.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./LibAppStorage.sol\\\";\\nimport \\\"../interfaces/IBean.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Check Library verifies Beanstalk's balances are correct.\\n**/\\nlibrary LibCheck {\\n\\n    using SafeMath for uint256;\\n\\n    function beanBalanceCheck() internal view {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(\\n            IBean(s.c.bean).balanceOf(address(this)) >=\\n                s.f.harvestable.sub(s.f.harvested).add(s.bean.deposited).add(s.bean.withdrawn),\\n            \\\"Check: Bean balance fail.\\\"\\n        );\\n    }\\n\\n    function lpBalanceCheck() internal view {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(\\n            IUniswapV2Pair(s.c.pair).balanceOf(address(this)) >= s.lp.deposited.add(s.lp.withdrawn),\\n            \\\"Check: LP balance fail.\\\"\\n        );\\n    }\\n\\n    function balanceCheck() internal view {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(\\n            IBean(s.c.bean).balanceOf(address(this)) >=\\n                s.f.harvestable.sub(s.f.harvested).add(s.bean.deposited).add(s.bean.withdrawn),\\n            \\\"Check: Bean balance fail.\\\"\\n        );\\n        require(\\n            IUniswapV2Pair(s.c.pair).balanceOf(address(this)) >= s.lp.deposited.add(s.lp.withdrawn),\\n            \\\"Check: LP balance fail.\\\"\\n        );\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibIncentive.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Publius\\n * @title Incentive Library calculates the exponential incentive rewards efficiently.\\n**/\\nlibrary LibIncentive {\\n\\n    function fracExp(uint k, uint q, uint n, uint x) internal pure returns (uint) {\\n        uint p = log_two(n) + 1 + x * n / q;\\n        uint s = 0;\\n        uint N = 1;\\n        uint B = 1;\\n        for (uint i = 0; i < p; ++i){\\n            s += k * N / B / (q**i);\\n            N = N * (n-i);\\n            B = B * (i+1);\\n        }\\n        return s;\\n    }\\n\\n    function log_two(uint x) private pure returns (uint y) {\\n        assembly {\\n            let arg := x\\n            x := sub(x,1)\\n            x := or(x, div(x, 0x02))\\n            x := or(x, div(x, 0x04))\\n            x := or(x, div(x, 0x10))\\n            x := or(x, div(x, 0x100))\\n            x := or(x, div(x, 0x10000))\\n            x := or(x, div(x, 0x100000000))\\n            x := or(x, div(x, 0x10000000000000000))\\n            x := or(x, div(x, 0x100000000000000000000000000000000))\\n            x := add(x, 1)\\n            let m := mload(0x40)\\n            mstore(m, 0xf8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd)\\n            mstore(add(m,0x20), 0xf5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe)\\n            mstore(add(m,0x40), 0xf6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616)\\n            mstore(add(m,0x60), 0xc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff)\\n            mstore(add(m,0x80), 0xf7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e)\\n            mstore(add(m,0xa0), 0xe39ed557db96902cd38ed14fad815115c786af479b7e83247363534337271707)\\n            mstore(add(m,0xc0), 0xc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d2362422606)\\n            mstore(add(m,0xe0), 0x753a6d1b65325d0c552a4d1345224105391a310b29122104190a110309020100)\\n            mstore(0x40, add(m, 0x100))\\n            let magic := 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff\\n            let shift := 0x100000000000000000000000000000000000000000000000000000000000000\\n            let a := div(mul(x, magic), shift)\\n            y := div(mload(add(m,sub(255,a))), shift)\\n            y := add(y, mul(256, gt(arg, 0x8000000000000000000000000000000000000000000000000000000000000000)))\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/farm/facets/SeasonFacet/Weather.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../libraries/Decimal.sol\\\";\\nimport \\\"../../../libraries/LibMarket.sol\\\";\\nimport \\\"./Silo.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Weather\\n**/\\ncontract Weather is Silo {\\n\\n    using SafeMath for uint256;\\n    using SafeMath for uint32;\\n    using Decimal for Decimal.D256;\\n\\n    event WeatherChange(uint256 indexed season, uint256 caseId, int8 change);\\n    event SeasonOfPlenty(uint256 indexed season, uint256 eth, uint256 harvestable);\\n\\n    uint32 private constant MAX_UINT32 = 2**32-1;\\n\\n    /**\\n     * Getters\\n    **/\\n\\n    // Weather\\n\\n    function weather() public view returns (Storage.Weather memory) {\\n        return s.w;\\n    }\\n\\n    function rain() public view returns (Storage.Rain memory) {\\n        return s.r;\\n    }\\n\\n    function yield() public view returns (uint32) {\\n        return s.w.yield;\\n    }\\n\\n    // Reserves\\n\\n    // (ethereum, beans)\\n    function reserves() public view returns (uint256, uint256) {\\n        (uint112 reserve0, uint112 reserve1,) = pair().getReserves();\\n        return (s.index == 0 ? reserve1 : reserve0, s.index == 0 ? reserve0 : reserve1);\\n    }\\n\\n    // (ethereum, usdc)\\n    function pegReserves() public view returns (uint256, uint256) {\\n        (uint112 reserve0, uint112 reserve1,) = pegPair().getReserves();\\n        return (reserve1, reserve0);\\n    }\\n\\n    /**\\n     * Internal\\n    **/\\n\\n    function stepWeather(uint256 int_price, uint256 endSoil) internal {\\n\\n        if (bean().totalSupply() == 0) {\\n            s.w.yield = 1;\\n            return;\\n        }\\n\\n        Decimal.D256 memory podRate = Decimal.ratio(\\n            s.f.pods.sub(s.f.harvestable),\\n            bean().totalSupply()\\n        );\\n\\n        uint256 dsoil = s.w.startSoil.sub(endSoil);\\n\\n        Decimal.D256 memory deltaPodDemand;\\n        uint256 lastDSoil = s.w.lastDSoil;\\n        if (dsoil == 0) deltaPodDemand = Decimal.zero();\\n        else if (lastDSoil == 0) deltaPodDemand = Decimal.from(1e18);\\n        else deltaPodDemand = Decimal.ratio(dsoil, lastDSoil);\\n\\n        uint8 caseId = 0;\\n        if (podRate.greaterThanOrEqualTo(C.getUpperBoundPodRate())) caseId = 24;\\n        else if (podRate.greaterThanOrEqualTo(C.getOptimalPodRate())) caseId = 16;\\n        else if (podRate.greaterThanOrEqualTo(C.getLowerBoundPodRate())) caseId = 8;\\n\\n        if (\\n            int_price > 1e18 || (int_price == 1e18 &&\\n            podRate.lessThanOrEqualTo(C.getOptimalPodRate()))\\n        ) {\\n            caseId += 4;\\n        }\\n\\n        if (deltaPodDemand.greaterThanOrEqualTo(C.getUpperBoundDPD())) {\\n            caseId += 2;\\n        } else if (deltaPodDemand.greaterThanOrEqualTo(C.getLowerBoundDPD())) {\\n            if (s.w.lastSowTime == MAX_UINT32 || !s.w.didSowBelowMin) {\\n                caseId += 1;\\n            }\\n            else if (s.w.didSowFaster) {\\n                caseId += 2;\\n                s.w.didSowFaster = false;\\n            }\\n        }\\n        s.w.lastDSoil = dsoil;\\n        handleExtremeWeather(endSoil);\\n        changeWeather(caseId);\\n        handleRain(caseId);\\n    }\\n\\n    function handleExtremeWeather(uint256 endSoil) private {\\n        if (s.w.didSowBelowMin) {\\n            s.w.didSowBelowMin = false;\\n            s.w.lastSoilPercent = uint96(endSoil.mul(1e18).div(bean().totalSupply()));\\n            s.w.lastSowTime = s.w.nextSowTime;\\n            s.w.nextSowTime = MAX_UINT32;\\n        }\\n        else if (s.w.lastSowTime != MAX_UINT32) {\\n            s.w.lastSowTime = MAX_UINT32;\\n        }\\n    }\\n\\n    function changeWeather(uint256 caseId) private {\\n        int8 change = s.cases[caseId];\\n        if (change < 0) {\\n                if (yield() <= (uint32(-change))) {\\n                    change = 1 - int8(yield());\\n                    s.w.yield = 1;\\n                }\\n                else s.w.yield = yield()-(uint32(-change));\\n        }\\n        else s.w.yield = yield()+(uint32(change));\\n\\n        emit WeatherChange(season(), caseId, change);\\n    }\\n\\n    function handleRain(uint256 caseId) internal {\\n        if (caseId < 4 || caseId > 7) {\\n            if (s.r.raining) s.r.raining = false;\\n            return;\\n        }\\n        else if (!s.r.raining) {\\n            s.r.raining = true;\\n            s.sops[season()] = s.sops[s.r.start];\\n            s.r.start = season();\\n            s.r.pods = s.f.pods;\\n            s.r.roots = s.s.roots;\\n        }\\n        else if (season() >= s.r.start.add(C.getRainTime())) {\\n            if (s.r.roots > 0) sop();\\n        }\\n    }\\n\\n    function sop() private {\\n        (uint256 newBeans, uint256 newEth) = calculateSopBeansAndEth();\\n        if (\\n            newEth <= s.s.roots.div(1e20) ||\\n            (s.sop.base > 0 && newBeans.mul(s.sop.base).div(s.sop.weth).div(s.r.roots) == 0)\\n        )\\n            return;\\n\\n        mintToSilo(newBeans);\\n        uint256 ethBought = LibMarket.sellToWETH(newBeans, 0);\\n        uint256 newHarvestable = 0;\\n        if (s.f.harvestable < s.r.pods) {\\n            newHarvestable = s.r.pods.sub(s.f.harvestable);\\n            mintToHarvestable(newHarvestable);\\n        }\\n        if (ethBought == 0) return;\\n        rewardEther(ethBought);\\n        emit SeasonOfPlenty(season(), ethBought, newHarvestable);\\n    }\\n\\n    function calculateSopBeansAndEth() private view returns (uint256, uint256) {\\n        (uint256 ethBeanPool, uint256 beansBeanPool) = reserves();\\n        (uint256 ethUSDCPool, uint256 usdcUSDCPool) = pegReserves();\\n\\n        uint256 newBeans = sqrt(ethBeanPool.mul(beansBeanPool).mul(usdcUSDCPool).div(ethUSDCPool));\\n        if (newBeans <= beansBeanPool) return (0,0);\\n        uint256 beans = newBeans.sub(beansBeanPool);\\n        beans = beans.mul(10000).div(9985).add(1);\\n\\n        uint256 beansWithFee = beans.mul(997);\\n        uint256 numerator = beansWithFee.mul(ethBeanPool);\\n        uint256 denominator = beansBeanPool.mul(1000).add(beansWithFee);\\n        uint256 eth = numerator / denominator;\\n\\n        return (beans, eth);\\n    }\\n\\n    /**\\n     * Shed\\n    **/\\n\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Decimal.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Decimal\\n * @author dYdX\\n *\\n * Library that defines a fixed-point number with 18 decimal places.\\n */\\nlibrary Decimal {\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 constant BASE = 10**18;\\n\\n    // ============ Structs ============\\n\\n\\n    struct D256 {\\n        uint256 value;\\n    }\\n\\n    // ============ Static Functions ============\\n\\n    function zero()\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: 0 });\\n    }\\n\\n    function one()\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: BASE });\\n    }\\n\\n    function from(\\n        uint256 a\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: a.mul(BASE) });\\n    }\\n\\n    function ratio(\\n        uint256 a,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(a, BASE, b) });\\n    }\\n\\n    // ============ Self Functions ============\\n\\n    function add(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.add(b.mul(BASE)) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.mul(BASE)) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        uint256 b,\\n        string memory reason\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.mul(BASE), reason) });\\n    }\\n\\n    function mul(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.mul(b) });\\n    }\\n\\n    function div(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.div(b) });\\n    }\\n\\n    function pow(\\n        D256 memory self,\\n        uint256 b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        if (b == 0) {\\n            return from(1);\\n        }\\n\\n        D256 memory temp = D256({ value: self.value });\\n        for (uint256 i = 1; i < b; i++) {\\n            temp = mul(temp, self);\\n        }\\n\\n        return temp;\\n    }\\n\\n    function add(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.add(b.value) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.value) });\\n    }\\n\\n    function sub(\\n        D256 memory self,\\n        D256 memory b,\\n        string memory reason\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: self.value.sub(b.value, reason) });\\n    }\\n\\n    function mul(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(self.value, b.value, BASE) });\\n    }\\n\\n    function div(\\n        D256 memory self,\\n        D256 memory b\\n    )\\n    internal\\n    pure\\n    returns (D256 memory)\\n    {\\n        return D256({ value: getPartial(self.value, BASE, b.value) });\\n    }\\n\\n    function equals(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return self.value == b.value;\\n    }\\n\\n    function greaterThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) == 2;\\n    }\\n\\n    function lessThan(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) == 0;\\n    }\\n\\n    function greaterThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) > 0;\\n    }\\n\\n    function lessThanOrEqualTo(D256 memory self, D256 memory b) internal pure returns (bool) {\\n        return compareTo(self, b) < 2;\\n    }\\n\\n    function isZero(D256 memory self) internal pure returns (bool) {\\n        return self.value == 0;\\n    }\\n\\n    function asUint256(D256 memory self) internal pure returns (uint256) {\\n        return self.value.div(BASE);\\n    }\\n\\n    // ============ Core Methods ============\\n\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    )\\n    private\\n    pure\\n    returns (uint256)\\n    {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    function compareTo(\\n        D256 memory a,\\n        D256 memory b\\n    )\\n    private\\n    pure\\n    returns (uint256)\\n    {\\n        if (a.value == b.value) {\\n            return 1;\\n        }\\n        return a.value > b.value ? 2 : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibMarket.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../interfaces/IBean.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Market Library handles swapping, addinga and removing LP on Uniswap for Beanstalk.\\n**/\\nlibrary LibMarket {\\n\\n    struct DiamondStorage {\\n        address bean;\\n        address weth;\\n        address router;\\n    }\\n\\n    struct AddLiquidity {\\n        uint256 beanAmount;\\n        uint256 minBeanAmount;\\n        uint256 minEthAmount;\\n    }\\n\\n    using SafeMath for uint256;\\n\\n    bytes32 private constant MARKET_STORAGE_POSITION = keccak256(\\\"diamond.standard.market.storage\\\");\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = MARKET_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function initMarket(address bean, address weth, address router) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        ds.bean = bean;\\n        ds.weth = weth;\\n        ds.router = router;\\n    }\\n\\n    /**\\n     * Swap\\n    **/\\n\\n    function buy(uint256 buyBeanAmount) internal returns (uint256 amount) {\\n        (uint256 ethAmount, uint256 beanAmount) = _buy(buyBeanAmount, msg.value, msg.sender);\\n        (bool success,) = msg.sender.call{ value: msg.value.sub(ethAmount) }(\\\"\\\");\\n        require(success, \\\"Market: Refund failed.\\\");\\n        return beanAmount;\\n    }\\n\\n    function buyAndDeposit(uint256 buyBeanAmount) internal returns (uint256 amount) {\\n        (uint256 ethAmount, uint256 beanAmount) = _buy(buyBeanAmount, msg.value, address(this));\\n        (bool success,) = msg.sender.call{ value: msg.value.sub(ethAmount) }(\\\"\\\");\\n        require(success, \\\"Market: Refund failed.\\\");\\n        return beanAmount;\\n    }\\n\\n    function sellToWETH(uint256 sellBeanAmount, uint256 minBuyEthAmount)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        (,uint256 outAmount) = _sell(sellBeanAmount, minBuyEthAmount, address(this));\\n        return outAmount;\\n    }\\n\\n    /**\\n     *  Liquidity\\n    **/\\n\\n    function addLiquidity(AddLiquidity calldata al) internal returns (uint256, uint256) {\\n        (uint256 beansDeposited, uint256 ethDeposited, uint256 liquidity) = _addLiquidity(\\n            msg.value,\\n            al.beanAmount,\\n            al.minEthAmount,\\n            al.minBeanAmount\\n        );\\n        (bool success,) = msg.sender.call{ value: msg.value.sub(ethDeposited) }(\\\"\\\");\\n        require(success, \\\"Market: Refund failed.\\\");\\n        return (beansDeposited, liquidity);\\n    }\\n\\n    function removeLiquidity(uint256 liqudity, uint256 minBeanAmount,uint256 minEthAmount)\\n        internal\\n        returns (uint256 beanAmount, uint256 ethAmount)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        return IUniswapV2Router02(ds.router).removeLiquidityETH(\\n            ds.bean,\\n            liqudity,\\n            minBeanAmount,\\n            minEthAmount,\\n            msg.sender,\\n            block.timestamp.add(1));\\n    }\\n\\n    function addAndDepositLiquidity(AddLiquidity calldata al) internal returns (uint256) {\\n        DiamondStorage storage ds = diamondStorage();\\n        IBean(ds.bean).transferFrom(msg.sender, address(this), al.beanAmount);\\n        (uint256 beans, uint256 liquidity) = addLiquidity(al);\\n        if (al.beanAmount > beans) IBean(ds.bean).transfer(msg.sender, al.beanAmount.sub(beans));\\n        return liquidity;\\n    }\\n\\n    function swapAndAddLiquidity(\\n        uint256 buyBeanAmount,\\n        uint256 buyEthAmount,\\n        LibMarket.AddLiquidity calldata al\\n    )\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 boughtLP;\\n        if (buyBeanAmount > 0)\\n            boughtLP = LibMarket.buyBeansAndAddLiquidity(buyBeanAmount, al);\\n        else if (buyEthAmount > 0)\\n            boughtLP = LibMarket.buyEthAndAddLiquidity(buyEthAmount, al);\\n        else\\n            boughtLP = LibMarket.addAndDepositLiquidity(al);\\n        return boughtLP;\\n    }\\n\\n\\n    function buyBeansAndAddLiquidity(uint256 buyBeanAmount, AddLiquidity calldata al)\\n        internal\\n        returns (uint256)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        address[] memory path = new address[](2);\\n        path[0] = ds.weth;\\n        path[1] = ds.bean;\\n        uint256[] memory amounts = IUniswapV2Router02(ds.router).getAmountsIn(buyBeanAmount, path);\\n        (uint256 ethSold, uint256 beans) = _buy(buyBeanAmount, amounts[0], address(this));\\n        if (al.beanAmount > buyBeanAmount) {\\n            IBean(ds.bean).transferFrom(msg.sender, address(this), al.beanAmount.sub(buyBeanAmount));\\n            beans = beans.add(al.beanAmount.sub(buyBeanAmount));\\n        }\\n        uint256 liquidity; uint256 ethAdded;\\n        (beans, ethAdded, liquidity) = _addLiquidity(\\n            msg.value.sub(ethSold),\\n            beans,\\n            al.minEthAmount,\\n            al.minBeanAmount\\n        );\\n        if (al.beanAmount > beans) IBean(ds.bean).transfer(msg.sender, al.beanAmount.sub(beans));\\n        if (msg.value > ethAdded.add(ethSold)) {\\n            (bool success,) = msg.sender.call{ value: msg.value.sub(ethAdded).sub(ethSold) }(\\\"\\\");\\n            require(success, \\\"Market: Refund failed.\\\");\\n        }\\n        return liquidity;\\n    }\\n\\n    function buyEthAndAddLiquidity(uint256 buyWethAmount, AddLiquidity calldata al)\\n        internal\\n        returns (uint256)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 sellBeans = _amountIn(buyWethAmount);\\n        IBean(ds.bean).transferFrom(msg.sender, address(this), al.beanAmount.add(sellBeans));\\n        (uint256 beansSold, uint256 wethBought) = _sell(sellBeans, buyWethAmount, address(this));\\n        if (msg.value > 0) IWETH(ds.weth).deposit{value: msg.value}();\\n        (uint256 beans, uint256 ethAdded, uint256 liquidity) = _addLiquidityWETH(\\n            msg.value.add(wethBought),\\n            al.beanAmount,\\n            al.minEthAmount,\\n            al.minBeanAmount\\n        );\\n\\n        if (al.beanAmount.add(sellBeans) > beans.add(beansSold))\\n            IBean(ds.bean).transfer(\\n                msg.sender,\\n                al.beanAmount.add(sellBeans).sub(beans.add(beansSold))\\n            );\\n\\n        if (ethAdded < wethBought.add(msg.value)) {\\n            uint256 eth = wethBought.add(msg.value).sub(ethAdded);\\n            IWETH(ds.weth).withdraw(eth);\\n            (bool success, ) = msg.sender.call{value: eth}(\\\"\\\");\\n            require(success, \\\"Market: Ether transfer failed.\\\");\\n        }\\n        return liquidity;\\n    }\\n\\n    /**\\n     *  Shed\\n    **/\\n\\n    function _sell(uint256 sellBeanAmount, uint256 minBuyEthAmount, address to)\\n        private\\n        returns (uint256 inAmount, uint256 outAmount)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        address[] memory path = new address[](2);\\n        path[0] = ds.bean;\\n        path[1] = ds.weth;\\n        uint[] memory amounts = IUniswapV2Router02(ds.router).swapExactTokensForTokens(\\n            sellBeanAmount,\\n            minBuyEthAmount,\\n            path,\\n            to,\\n            block.timestamp.add(1)\\n        );\\n        return (amounts[0], amounts[1]);\\n    }\\n\\n    function _buy(uint256 beanAmount, uint256 ethAmount, address to)\\n        private\\n        returns (uint256 inAmount, uint256 outAmount)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        address[] memory path = new address[](2);\\n        path[0] = ds.weth;\\n        path[1] = ds.bean;\\n\\n        uint[] memory amounts = IUniswapV2Router02(ds.router).swapExactETHForTokens{value: ethAmount}(\\n            beanAmount,\\n            path,\\n            to,\\n            block.timestamp.add(1)\\n        );\\n        return (amounts[0], amounts[1]);\\n    }\\n\\n    function _addLiquidity(uint256 ethAmount, uint256 beanAmount, uint256 minEthAmount, uint256 minBeanAmount)\\n        private\\n        returns (uint256, uint256, uint256)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        return IUniswapV2Router02(ds.router).addLiquidityETH{value: ethAmount}(\\n            ds.bean,\\n            beanAmount,\\n            minBeanAmount,\\n            minEthAmount,\\n            address(this),\\n            block.timestamp.add(1));\\n    }\\n\\n    function _addLiquidityWETH(uint256 wethAmount, uint256 beanAmount, uint256 minWethAmount, uint256 minBeanAmount)\\n        private\\n        returns (uint256, uint256, uint256)\\n    {\\n        DiamondStorage storage ds = diamondStorage();\\n        return IUniswapV2Router02(ds.router).addLiquidity(\\n            ds.bean,\\n            ds.weth,\\n            beanAmount,\\n            wethAmount,\\n            minBeanAmount,\\n            minWethAmount,\\n            address(this),\\n            block.timestamp.add(1));\\n    }\\n\\n    function _amountIn(uint256 buyWethAmount) private view returns (uint256) {\\n        DiamondStorage storage ds = diamondStorage();\\n        address[] memory path = new address[](2);\\n        path[0] = ds.bean;\\n        path[1] = ds.weth;\\n        uint256[] memory amounts = IUniswapV2Router02(ds.router).getAmountsIn(buyWethAmount, path);\\n        return amounts[0];\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/farm/facets/SeasonFacet/Silo.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Life.sol\\\";\\nimport \\\"../../../libraries/LibInternal.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Silo\\n**/\\ncontract Silo is Life {\\n\\n    using SafeMath for uint256;\\n    using SafeMath for uint32;\\n    using Decimal for Decimal.D256;\\n\\n    uint256 private constant BASE = 1e12;\\n    uint256 private constant BURN_BASE = 1e20;\\n    uint256 private constant BIG_BASE = 1e24;\\n\\n    /**\\n     * Getters\\n    **/\\n\\n    function seasonOfPlenty(uint32 _s) external view returns (uint256) {\\n        return s.sops[_s];\\n    }\\n\\n    function paused() public view returns (bool) {\\n        return s.paused;\\n    }\\n\\n    /**\\n     * Internal\\n    **/\\n\\n    // Silo\\n\\n    function stepSilo(uint256 amount) internal {\\n        rewardStalk();\\n        rewardBeans(amount);\\n    }\\n\\n    function rewardStalk() private {\\n        if (s.si.beans == 0) return;\\n        uint256 newStalk = s.si.beans.mul(C.getSeedsPerBean());\\n        s.s.stalk = s.s.stalk.add(newStalk);\\n        s.si.stalk = s.si.stalk.add(newStalk);\\n    }\\n\\n    function rewardBeans(uint256 amount) private {\\n        if (s.s.stalk == 0 || amount == 0) return;\\n        s.s.stalk = s.s.stalk.add(amount.mul(C.getStalkPerBean()));\\n        s.si.beans = s.si.beans.add(amount);\\n        s.bean.deposited = s.bean.deposited.add(amount);\\n        s.s.seeds = s.s.seeds.add(amount.mul(C.getSeedsPerBean()));\\n    }\\n\\n    // Season of Plenty\\n\\n    function rewardEther(uint256 amount) internal {\\n        uint256 base;\\n        if (s.sop.base == 0) {\\n            base = amount.mul(BIG_BASE);\\n            s.sop.base = BURN_BASE;\\n        }\\n        else base = amount.mul(s.sop.base).div(s.sop.weth);\\n\\n        // Award ether to claimed stalk holders\\n        uint256 basePerStalk = base.div(s.r.roots);\\n        base = basePerStalk.mul(s.r.roots);\\n        s.sops[s.r.start] = s.sops[s.r.start].add(basePerStalk);\\n\\n        // Update total state\\n        s.sop.weth = s.sop.weth.add(amount);\\n        s.sop.base = s.sop.base.add(base);\\n        if (base > 0) s.sop.last = s.r.start;\\n\\n    }\\n\\n    // Governance\\n\\n    function stepGovernance() internal {\\n        for (uint256 i; i < s.g.activeBips.length; i++) {\\n            uint32 bip = s.g.activeBips[i];\\n            if (season() >= s.g.bips[bip].start.add(s.g.bips[bip].period)) {\\n                endBip(bip, i);\\n                i--;\\n            }\\n        }\\n    }\\n\\n    function endBip(uint32 bipId, uint256 i) private {\\n        s.g.bips[bipId].timestamp = uint128(block.timestamp);\\n        s.g.bips[bipId].endTotalRoots = s.s.roots;\\n        if (i < s.g.activeBips.length-1)\\n            s.g.activeBips[i] = s.g.activeBips[s.g.activeBips.length-1];\\n        s.g.activeBips.pop();\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBean.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Bean Interface\\n**/\\nabstract contract IBean is IERC20 {\\n\\n    function burn(uint256 amount) public virtual;\\n    function burnFrom(address account, uint256 amount) public virtual;\\n    function mint(address account, uint256 amount) public virtual returns (bool);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title WETH Interface\\n**/\\ninterface IWETH is IERC20 {\\n\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/farm/facets/SeasonFacet/Life.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n**/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../../AppStorage.sol\\\";\\nimport \\\"../../../C.sol\\\";\\nimport \\\"../../../interfaces/IBean.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title Life\\n**/\\ncontract Life {\\n\\n    using SafeMath for uint256;\\n    using SafeMath for uint32;\\n\\n    AppStorage internal s;\\n\\n    /**\\n     * Getters\\n    **/\\n\\n    // Contracts\\n\\n    function bean() public view returns (IBean) {\\n        return IBean(s.c.bean);\\n    }\\n\\n    function pair() public view returns (IUniswapV2Pair) {\\n        return IUniswapV2Pair(s.c.pair);\\n    }\\n\\n    function pegPair() public view returns (IUniswapV2Pair) {\\n        return IUniswapV2Pair(s.c.pegPair);\\n    }\\n\\n    // Time\\n\\n     function time() external view returns (Storage.Season memory) {\\n         return s.season;\\n     }\\n\\n    function season() public view returns (uint32) {\\n        return s.season.current;\\n    }\\n\\n    function seasonTime() public virtual view returns (uint32) {\\n        if (block.timestamp < s.season.start) return 0;\\n        if (s.season.period == 0) return uint32(-1);\\n        return uint32((block.timestamp.sub(s.season.start).div(s.season.period)));\\n    }\\n\\n    function incentiveTime() internal view returns (uint256) {\\n        uint256 timestamp = block.timestamp.sub(\\n            s.season.start.add(s.season.period.mul(season()))\\n        );\\n        if (timestamp > 300) timestamp = 300;\\n        return timestamp;\\n    }\\n\\n    /**\\n     * Internal\\n    **/\\n\\n    function increaseSupply(uint256 newSupply) internal returns (uint256, uint256) {\\n        (uint256 newHarvestable, uint256 siloReward) = (0, 0);\\n\\n        if (s.f.harvestable < s.f.pods) {\\n            uint256 notHarvestable = s.f.pods.sub(s.f.harvestable);\\n            newHarvestable = newSupply.mul(C.getHarvestPercentage()).div(1e18);\\n            newHarvestable = newHarvestable > notHarvestable ? notHarvestable : newHarvestable;\\n            mintToHarvestable(newHarvestable);\\n        }\\n\\n        if (s.s.seeds == 0 && s.s.stalk == 0) return (newHarvestable,0);\\n        siloReward = newSupply.sub(newHarvestable);\\n        if (siloReward > 0) {\\n            mintToSilo(siloReward);\\n        }\\n        return (newHarvestable, siloReward);\\n    }\\n\\n    function mintToSilo(uint256 amount) internal {\\n        if (amount > 0) {\\n            bean().mint(address(this), amount);\\n        }\\n    }\\n\\n    function mintToHarvestable(uint256 amount) internal {\\n        bean().mint(address(this), amount);\\n        s.f.harvestable = s.f.harvestable.add(amount);\\n    }\\n\\n    function mintToAccount(address account, uint256 amount) internal {\\n        bean().mint(account, amount);\\n    }\\n\\n    /**\\n     * Soil\\n    **/\\n\\n    function increaseSoil(uint256 amount) internal returns (int256) {\\n        uint256 maxTotalSoil = C.getMaxSoilRatioCap().mul(bean().totalSupply()).div(1e18);\\n        uint256 minTotalSoil = C.getMinSoilRatioCap().mul(bean().totalSupply()).div(1e18);\\n        if (s.f.soil > maxTotalSoil) {\\n            amount = s.f.soil.sub(maxTotalSoil);\\n            decrementTotalSoil(amount);\\n            return -int256(amount);\\n        }\\n        uint256 newTotalSoil = s.f.soil + amount;\\n        amount = newTotalSoil <= maxTotalSoil ? amount : maxTotalSoil.sub(s.f.soil);\\n        amount = newTotalSoil >= minTotalSoil ? amount : minTotalSoil.sub(s.f.soil);\\n\\n        incrementTotalSoil(amount);\\n        return int256(amount);\\n    }\\n\\n    function decreaseSoil(uint256 amount) internal {\\n        decrementTotalSoil(amount);\\n    }\\n\\n    function ensureSoilBounds() internal returns (int256) {\\n        uint256 minTotalSoil = C.getMinSoilRatioCap().mul(bean().totalSupply()).div(1e18);\\n        if (s.f.soil < minTotalSoil) {\\n            uint256 amount = minTotalSoil.sub(s.f.soil);\\n            incrementTotalSoil(amount);\\n            return int256(amount);\\n        }\\n        uint256 maxTotalSoil = C.getMaxSoilRatioCap().mul(bean().totalSupply()).div(1e18);\\n        if (s.f.soil > maxTotalSoil) {\\n            uint256 amount = s.f.soil.sub(maxTotalSoil);\\n            decrementTotalSoil(amount);\\n            return -int256(amount);\\n        }\\n        return 0;\\n    }\\n\\n    function incrementTotalSoil(uint256 amount) internal {\\n        s.f.soil = s.f.soil.add(amount);\\n    }\\n\\n    function decrementTotalSoil(uint256 amount) internal {\\n        s.f.soil = s.f.soil.sub(amount, \\\"Season: Not enough Soil.\\\");\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibInternal.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Publius\\n * @title Internal Library handles gas efficient function calls between facets.\\n**/\\nlibrary LibInternal {\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        address[] facetAddresses;\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    struct Claim {\\n        uint32[] beanWithdrawals;\\n        uint32[] lpWithdrawals;\\n        uint256[] plots;\\n        bool claimEth;\\n        bool convertLP;\\n        uint256 minBeanAmount;\\n        uint256 minEthAmount;\\n    }\\n\\n    function updateSilo(address account) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        bytes4 functionSelector = bytes4(keccak256(\\\"updateSilo(address)\\\"));\\n        address facet = ds.selectorToFacetAndPosition[functionSelector].facetAddress;\\n        bytes memory myFunctionCall = abi.encodeWithSelector(functionSelector, account);\\n        (bool success,) = address(facet).delegatecall(myFunctionCall);\\n        require(success, \\\"Silo: updateSilo failed.\\\");\\n    }\\n\\n    function updateBip(uint32 bip) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        bytes4 functionSelector = bytes4(keccak256(\\\"updateBip(uint32)\\\"));\\n        address facet = ds.selectorToFacetAndPosition[functionSelector].facetAddress;\\n        bytes memory myFunctionCall = abi.encodeWithSelector(functionSelector, bip);\\n        (bool success,) = address(facet).delegatecall(myFunctionCall);\\n        require(success, \\\"Silo: updateBip failed.\\\");\\n    }\\n\\n    function stalkFor(uint32 bip) internal returns (uint256) {\\n        DiamondStorage storage ds = diamondStorage();\\n        bytes4 functionSelector = bytes4(keccak256(\\\"stalkFor(uint32)\\\"));\\n        address facet = ds.selectorToFacetAndPosition[functionSelector].facetAddress;\\n        bytes memory myFunctionCall = abi.encodeWithSelector(functionSelector, bip);\\n        (bool success, bytes memory data) = address(facet).delegatecall(myFunctionCall);\\n        require(success, \\\"Governance: stalkFor failed.\\\");\\n        uint stalk;\\n        assembly { stalk := mload(add(data, add(0x20, 0))) }\\n        return stalk;\\n    }\\n\\n    function claim(Claim calldata c) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        bytes4 functionSelector = bytes4(keccak256(\\\"claim((uint32[],uint32[],uint256[],bool,bool,uint256,uint256))\\\"));\\n        address facet = ds.selectorToFacetAndPosition[functionSelector].facetAddress;\\n        bytes memory myFunctionCall = abi.encodeWithSelector(functionSelector, c);\\n        (bool success,) = address(facet).delegatecall(myFunctionCall);\\n        require(success, \\\"Claim: claim failed.\\\");\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/farm/AppStorage.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title App Storage defines the state object for Beanstalk.\\n**/\\ncontract Account {\\n\\n    struct Field {\\n        mapping(uint256 => uint256) plots;\\n        mapping(address => uint256) podAllowances;\\n    }\\n\\n    struct AssetSilo {\\n        mapping(uint32 => uint256) withdrawals;\\n        mapping(uint32 => uint256) deposits;\\n        mapping(uint32 => uint256) depositSeeds;\\n    }\\n\\n    struct Silo {\\n        uint256 stalk;\\n        uint256 seeds;\\n    }\\n\\n    struct SeasonOfPlenty {\\n        uint256 base;\\n        uint256 roots;\\n        uint256 basePerRoot;\\n    }\\n\\n    struct State {\\n        Field field;\\n        AssetSilo bean;\\n        AssetSilo lp;\\n        Silo s;\\n        uint32 lockedUntil;\\n        uint32 lastUpdate;\\n        uint32 lastSop;\\n        uint32 lastRain;\\n        SeasonOfPlenty sop;\\n        uint256 roots;\\n    }\\n}\\n\\ncontract Storage {\\n    struct Contracts {\\n        address bean;\\n        address pair;\\n        address pegPair;\\n        address weth;\\n    }\\n\\n    // Field\\n\\n    struct Field {\\n        uint256 soil;\\n        uint256 pods;\\n        uint256 harvested;\\n        uint256 harvestable;\\n    }\\n\\n    // Governance\\n\\n    struct Bip {\\n        address proposer;\\n        uint32 start;\\n        uint32 period;\\n        bool executed;\\n        int pauseOrUnpause;\\n        uint128 timestamp;\\n        uint256 roots;\\n        uint256 endTotalRoots;\\n    }\\n\\n    struct DiamondCut {\\n        IDiamondCut.FacetCut[] diamondCut;\\n        address initAddress;\\n        bytes initData;\\n    }\\n\\n    struct Governance {\\n        uint32[] activeBips;\\n        uint32 bipIndex;\\n        mapping(uint32 => DiamondCut) diamondCuts;\\n        mapping(uint32 => mapping(address => bool)) voted;\\n        mapping(uint32 => Bip) bips;\\n    }\\n\\n    // Silo\\n\\n    struct AssetSilo {\\n        uint256 deposited;\\n        uint256 withdrawn;\\n    }\\n\\n    struct IncreaseSilo {\\n        uint256 beans;\\n        uint256 stalk;\\n    }\\n\\n    struct SeasonOfPlenty {\\n        uint256 weth;\\n        uint256 base;\\n        uint32 last;\\n    }\\n\\n    struct Silo {\\n        uint256 stalk;\\n        uint256 seeds;\\n        uint256 roots;\\n    }\\n\\n    // Season\\n\\n    struct Oracle {\\n        bool initialized;\\n        uint256 cumulative;\\n        uint256 pegCumulative;\\n        uint32 timestamp;\\n        uint32 pegTimestamp;\\n    }\\n\\n    struct Rain {\\n        uint32 start;\\n        bool raining;\\n        uint256 pods;\\n        uint256 roots;\\n    }\\n\\n    struct Season {\\n        uint32 current;\\n        uint256 start;\\n        uint256 period;\\n        uint256 timestamp;\\n    }\\n\\n    struct Weather {\\n        uint256 startSoil;\\n        uint256 lastDSoil;\\n        uint96 lastSoilPercent;\\n        uint32 lastSowTime;\\n        uint32 nextSowTime;\\n        uint32 yield;\\n        bool didSowBelowMin;\\n        bool didSowFaster;\\n    }\\n}\\n\\nstruct AppStorage {\\n    uint8 index;\\n    int8[32] cases;\\n    bool paused;\\n    uint128 pausedAt;\\n    Storage.Season season;\\n    Storage.Contracts c;\\n    Storage.Field f;\\n    Storage.Governance g;\\n    Storage.Oracle o;\\n    Storage.Rain r;\\n    Storage.Silo s;\\n    uint256 depreciated1;\\n    Storage.Weather w;\\n    Storage.AssetSilo bean;\\n    Storage.AssetSilo lp;\\n    Storage.IncreaseSilo si;\\n    Storage.SeasonOfPlenty sop;\\n    uint256 depreciated2;\\n    uint256 depreciated3;\\n    uint256 depreciated4;\\n    uint256 depreciated5;\\n    uint256 depreciated6;\\n    mapping (uint32 => uint256) sops;\\n    mapping (address => Account.State) a;\\n    uint32 bip0Start;\\n}\\n\"\r\n    },\r\n    \"contracts/C.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./libraries/Decimal.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title C holds the contracts for Beanstalk.\\n**/\\nlibrary C {\\n\\n    using Decimal for Decimal.D256;\\n    using SafeMath for uint256;\\n\\n    // Chain\\n    uint256 private constant CHAIN_ID = 1; // Mainnet\\n\\n    // Season\\n    uint256 private constant CURRENT_SEASON_PERIOD = 3600; // 1 hour\\n\\n    // Sun\\n    uint256 private constant HARVESET_PERCENTAGE = 5e17; // 50%\\n\\n    // Weather\\n    uint256 private constant POD_RATE_LOWER_BOUND = 5e16; // 5%\\n    uint256 private constant OPTIMAL_POD_RATE = 15e16; // 15%\\n    uint256 private constant POD_RATE_UPPER_BOUND = 25e16; // 25%\\n\\n    uint256 private constant DELTA_POD_DEMAND_LOWER_BOUND = 95e16; // 95%\\n    uint256 private constant DELTA_POD_DEMAND_UPPER_BOUND = 105e16; // 105%\\n\\n    uint256 private constant STEADY_SOW_TIME = 60; // 1 minute\\n    uint256 private constant RAIN_TIME = 24; // 24 seasons = 1 day\\n\\n    // Governance\\n    uint32 private constant GOVERNANCE_PERIOD = 168; // 168 seasons = 7 days\\n    uint32 private constant GOVERNANCE_EMERGENCY_PERIOD = 86400; // 1 day\\n    uint256 private constant GOVERNANCE_PASS_THRESHOLD = 5e17; // 1/2\\n    uint256 private constant GOVERNANCE_EMERGENCY_THRESHOLD_NUMERATOR = 2; // 2/3\\n    uint256 private constant GOVERNANCE_EMERGENCY_THRESHOLD_DEMONINATOR = 3; // 2/3\\n    uint32 private constant GOVERNANCE_EXPIRATION = 24; // 24 seasons = 1 day\\n    uint256 private constant GOVERNANCE_PROPOSAL_THRESHOLD = 1e15; // 0.1%\\n    uint256 private constant BASE_COMMIT_INCENTIVE = 1e8; // 100 beans\\n    uint256 private constant MAX_PROPOSITIONS = 5;\\n\\n    // Silo\\n    uint256 private constant BASE_ADVANCE_INCENTIVE = 1e8; // 100 beans\\n    uint32 private constant WITHDRAW_TIME = 25; // 24 + 1 seasons\\n    uint256 private constant SEEDS_PER_BEAN = 2;\\n    uint256 private constant SEEDS_PER_LP_BEAN = 4;\\n    uint256 private constant STALK_PER_BEAN = 10000;\\n    uint256 private constant ROOTS_BASE = 1e12;\\n\\n    // Field\\n    uint256 private constant SOIL_MAX_RATIO_CAP = 25e16; // 25%\\n    uint256 private constant SOIL_MIN_RATIO_CAP = 1e15; // 0.1%\\n\\n\\n    /**\\n     * Getters\\n    **/\\n\\n    function getSeasonPeriod() internal pure returns (uint256) {\\n        return CURRENT_SEASON_PERIOD;\\n    }\\n\\n    function getGovernancePeriod() internal pure returns (uint32) {\\n        return GOVERNANCE_PERIOD;\\n    }\\n\\n    function getGovernanceEmergencyPeriod() internal pure returns (uint32) {\\n        return GOVERNANCE_EMERGENCY_PERIOD;\\n    }\\n\\n    function getGovernanceExpiration() internal pure returns (uint256) {\\n        return GOVERNANCE_EXPIRATION;\\n    }\\n\\n    function getGovernancePassThreshold() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: GOVERNANCE_PASS_THRESHOLD});\\n    }\\n\\n    function getGovernanceEmergencyThreshold() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(GOVERNANCE_EMERGENCY_THRESHOLD_NUMERATOR,GOVERNANCE_EMERGENCY_THRESHOLD_DEMONINATOR);\\n    }\\n\\n    function getGovernanceProposalThreshold() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.D256({value: GOVERNANCE_PROPOSAL_THRESHOLD});\\n    }\\n\\n    function getAdvanceIncentive() internal pure returns (uint256) {\\n        return BASE_ADVANCE_INCENTIVE;\\n    }\\n\\n    function getCommitIncentive() internal pure returns (uint256) {\\n        return BASE_COMMIT_INCENTIVE;\\n    }\\n\\n    function getSiloWithdrawSeasons() internal pure returns (uint32) {\\n        return WITHDRAW_TIME;\\n    }\\n\\n    function getMinSoilRatioCap() internal pure returns (uint256) {\\n        return SOIL_MIN_RATIO_CAP;\\n    }\\n\\n    function getMaxSoilRatioCap() internal pure returns (uint256) {\\n        return SOIL_MAX_RATIO_CAP;\\n    }\\n\\n    function getHarvestPercentage() internal pure returns (uint256) {\\n        return HARVESET_PERCENTAGE;\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        return CHAIN_ID;\\n    }\\n\\n    function getOptimalPodRate() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(OPTIMAL_POD_RATE,1e18);\\n    }\\n\\n    function getUpperBoundPodRate() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(POD_RATE_UPPER_BOUND,1e18);\\n    }\\n\\n    function getLowerBoundPodRate() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(POD_RATE_LOWER_BOUND,1e18);\\n    }\\n\\n    function getUpperBoundDPD() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(DELTA_POD_DEMAND_UPPER_BOUND,1e18);\\n    }\\n\\n    function getLowerBoundDPD() internal pure returns (Decimal.D256 memory) {\\n        return Decimal.ratio(DELTA_POD_DEMAND_LOWER_BOUND,1e18);\\n    }\\n\\n    function getSteadySowTime() internal pure returns (uint256) {\\n        return STEADY_SOW_TIME;\\n    }\\n\\n    function getRainTime() internal pure returns (uint256) {\\n        return RAIN_TIME;\\n    }\\n\\n    function getMaxPropositions() internal pure returns (uint256) {\\n      return MAX_PROPOSITIONS;\\n    }\\n\\n    function getSeedsPerBean() internal pure returns (uint256) {\\n        return SEEDS_PER_BEAN;\\n    }\\n\\n    function getSeedsPerLPBean() internal pure returns (uint256) {\\n        return SEEDS_PER_LP_BEAN;\\n    }\\n\\n    function getStalkPerBean() internal pure returns (uint256) {\\n      return STALK_PER_BEAN;\\n    }\\n\\n    function getStalkPerLPSeed() internal pure returns (uint256) {\\n      return STALK_PER_BEAN/SEEDS_PER_LP_BEAN;\\n    }\\n\\n    function getRootsBase() internal pure returns (uint256) {\\n        return ROOTS_BASE;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibAppStorage.sol\": {\r\n      \"content\": \"/*\\n SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../farm/AppStorage.sol\\\";\\n\\n/**\\n * @author Publius\\n * @title App Storage Library allows libaries to access Beanstalk's state.\\n**/\\nlibrary LibAppStorage {\\n\\n    function diamondStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beans\",\"type\":\"uint256\"}],\"name\":\"Incentivization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestable\",\"type\":\"uint256\"}],\"name\":\"SeasonOfPlenty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"season\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stalk\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seeds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"podIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestableIndex\",\"type\":\"uint256\"}],\"name\":\"SeasonSnapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"}],\"name\":\"Sunrise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newSoil\",\"type\":\"int256\"}],\"name\":\"SupplyDecrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newHarvestable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSilo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newSoil\",\"type\":\"int256\"}],\"name\":\"SupplyIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newSoil\",\"type\":\"int256\"}],\"name\":\"SupplyNeutral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"season\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"caseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"change\",\"type\":\"int8\"}],\"name\":\"WeatherChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bean\",\"outputs\":[{\"internalType\":\"contract IBean\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegPair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rain\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"raining\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pods\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roots\",\"type\":\"uint256\"}],\"internalType\":\"struct Storage.Rain\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"season\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_s\",\"type\":\"uint32\"}],\"name\":\"seasonOfPlenty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seasonTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sunrise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"current\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Storage.Season\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weather\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startSoil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDSoil\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"lastSoilPercent\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"lastSowTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextSowTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"yield\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"didSowBelowMin\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"didSowFaster\",\"type\":\"bool\"}],\"internalType\":\"struct Storage.Weather\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yield\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SeasonFacet","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}