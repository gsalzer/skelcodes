{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocols/convex/migration/Zap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IZap} from \\\"contracts/lpaccount/Imports.sol\\\";\\nimport {IERC20} from \\\"contracts/common/Imports.sol\\\";\\nimport {SafeERC20} from \\\"contracts/libraries/Imports.sol\\\";\\nimport {\\n    ILiquidityGauge\\n} from \\\"contracts/protocols/curve/common/interfaces/Imports.sol\\\";\\nimport {\\n    IBooster,\\n    IBaseRewardPool\\n} from \\\"contracts/protocols/convex/common/interfaces/Imports.sol\\\";\\n\\ncontract ConvexMigrationZap is IZap {\\n    using SafeERC20 for IERC20;\\n\\n    string public constant override NAME = \\\"convex-migration\\\";\\n    address internal constant BOOSTER_ADDRESS =\\n        0xF403C135812408BFbE8713b5A23a04b3D48AAE31;\\n\\n    function deployLiquidity(uint256[] calldata) external override {\\n        revert(\\\"NOT_IMPLEMENTED\\\");\\n    }\\n\\n    /**\\n     * @param amount LP token amount\\n     * @param pid Convex Booster PID\\n     */\\n    function unwindLiquidity(uint256 amount, uint8 pid) external override {\\n        IBooster booster = IBooster(BOOSTER_ADDRESS);\\n        IBooster.PoolInfo memory poolInfo = booster.poolInfo(pid);\\n        address lpToken = poolInfo.lptoken;\\n        address gauge = poolInfo.gauge;\\n\\n        ILiquidityGauge liquidityGauge = ILiquidityGauge(gauge);\\n        liquidityGauge.withdraw(amount);\\n\\n        uint256 lpBalance = IERC20(lpToken).balanceOf(address(this));\\n        IERC20(lpToken).safeApprove(BOOSTER_ADDRESS, 0);\\n        IERC20(lpToken).safeApprove(BOOSTER_ADDRESS, lpBalance);\\n        // deposit and mint staking tokens 1:1; bool is to stake\\n        booster.deposit(pid, lpBalance, true);\\n    }\\n\\n    function claim() external override {\\n        revert(\\\"NOT_IMPLEMENTED\\\");\\n    }\\n\\n    function getLpTokenBalance(address)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        revert(\\\"NOT_IMPLEMENTED\\\");\\n    }\\n\\n    function sortedSymbols() external view override returns (string[] memory) {\\n        revert(\\\"NOT_IMPLEMENTED\\\");\\n    }\\n\\n    function assetAllocations() public view override returns (string[] memory) {\\n        return new string[](0);\\n    }\\n\\n    function erc20Allocations() public view override returns (IERC20[] memory) {\\n        return new IERC20[](0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lpaccount/Imports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IZap} from \\\"./IZap.sol\\\";\\nimport {ISwap} from \\\"./ISwap.sol\\\";\\nimport {ILpAccount} from \\\"./ILpAccount.sol\\\";\\nimport {IZapRegistry} from \\\"./IZapRegistry.sol\\\";\\nimport {ISwapRegistry} from \\\"./ISwapRegistry.sol\\\";\\nimport {IStableSwap3Pool} from \\\"./IStableSwap3Pool.sol\\\";\\n\"\r\n    },\r\n    \"contracts/common/Imports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {IDetailedERC20} from \\\"./IDetailedERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {\\n    ReentrancyGuard\\n} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport {AccessControl} from \\\"./AccessControl.sol\\\";\\nimport {INameIdentifier} from \\\"./INameIdentifier.sol\\\";\\nimport {IAssetAllocation} from \\\"./IAssetAllocation.sol\\\";\\nimport {IEmergencyExit} from \\\"./IEmergencyExit.sol\\\";\\n\"\r\n    },\r\n    \"contracts/libraries/Imports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {SignedSafeMath} from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\nimport {NamedAddressSet} from \\\"./NamedAddressSet.sol\\\";\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/Imports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {CTokenInterface} from \\\"./CTokenInterface.sol\\\";\\nimport {ITokenMinter} from \\\"./ITokenMinter.sol\\\";\\nimport {IStableSwap, IStableSwap3} from \\\"./IStableSwap.sol\\\";\\nimport {IStableSwap2} from \\\"./IStableSwap2.sol\\\";\\nimport {IStableSwap4} from \\\"./IStableSwap4.sol\\\";\\nimport {IOldStableSwap2} from \\\"./IOldStableSwap2.sol\\\";\\nimport {IOldStableSwap3} from \\\"./IOldStableSwap3.sol\\\";\\nimport {IOldStableSwap4} from \\\"./IOldStableSwap4.sol\\\";\\nimport {ILiquidityGauge} from \\\"./ILiquidityGauge.sol\\\";\\nimport {IStakingRewards} from \\\"./IStakingRewards.sol\\\";\\nimport {IDepositZap} from \\\"./IDepositZap.sol\\\";\\nimport {IDepositZap3} from \\\"./IDepositZap3.sol\\\";\\n\"\r\n    },\r\n    \"contracts/protocols/convex/common/interfaces/Imports.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IBaseRewardPool, IRewardPool} from \\\"./IBaseRewardPool.sol\\\";\\nimport {IBooster} from \\\"./IBooster.sol\\\";\\n\"\r\n    },\r\n    \"contracts/lpaccount/IZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    IAssetAllocation,\\n    INameIdentifier,\\n    IERC20\\n} from \\\"contracts/common/Imports.sol\\\";\\n\\n/**\\n * @notice Used to define how an LP Account farms an external protocol\\n */\\ninterface IZap is INameIdentifier {\\n    /**\\n     * @notice Deploy liquidity to a protocol (i.e. enter a farm)\\n     * @dev Implementation should add liquidity and stake LP tokens\\n     * @param amounts Amount of each token to deploy\\n     */\\n    function deployLiquidity(uint256[] calldata amounts) external;\\n\\n    /**\\n     * @notice Unwind liquidity from a protocol (i.e exit a farm)\\n     * @dev Implementation should unstake LP tokens and remove liquidity\\n     * @dev If there is only one token to unwind, `index` should be 0\\n     * @param amount Amount of liquidity to unwind\\n     * @param index Which token should be unwound\\n     */\\n    function unwindLiquidity(uint256 amount, uint8 index) external;\\n\\n    /**\\n     * @notice Claim accrued rewards from the protocol (i.e. harvest yield)\\n     */\\n    function claim() external;\\n\\n    /**\\n     * @notice Retrieves the LP token balance\\n     */\\n    function getLpTokenBalance(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Order of tokens for deploy `amounts` and unwind `index`\\n     * @dev Implementation should use human readable symbols\\n     * @dev Order should be the same for deploy and unwind\\n     * @return The array of symbols in order\\n     */\\n    function sortedSymbols() external view returns (string[] memory);\\n\\n    /**\\n     * @notice Asset allocations to include in TVL\\n     * @dev Requires all allocations that track value deployed to the protocol\\n     * @return An array of the asset allocation names\\n     */\\n    function assetAllocations() external view returns (string[] memory);\\n\\n    /**\\n     * @notice ERC20 asset allocations to include in TVL\\n     * @dev Should return addresses for all tokens that get deployed or unwound\\n     * @return The array of ERC20 token addresses\\n     */\\n    function erc20Allocations() external view returns (IERC20[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/lpaccount/ISwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    IAssetAllocation,\\n    INameIdentifier,\\n    IERC20\\n} from \\\"contracts/common/Imports.sol\\\";\\n\\n/**\\n * @notice Used to define a token swap that can be performed by an LP Account\\n */\\ninterface ISwap is INameIdentifier {\\n    /**\\n     * @dev Implementation should perform a token swap\\n     * @param amount The amount of the input token to swap\\n     * @param minAmount The minimum amount of the output token to accept\\n     */\\n    function swap(uint256 amount, uint256 minAmount) external;\\n\\n    /**\\n     * @notice ERC20 asset allocations to include in TVL\\n     * @dev Should return addresses for all tokens going in and out of the swap\\n     * @return The array of ERC20 token addresses\\n     */\\n    function erc20Allocations() external view returns (IERC20[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/lpaccount/ILpAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\n/**\\n * @notice For contracts that provide liquidity to external protocols\\n */\\ninterface ILpAccount {\\n    /**\\n     * @notice Deploy liquidity with a registered `IZap`\\n     * @dev The order of token amounts should match `IZap.sortedSymbols`\\n     * @param name The name of the `IZap`\\n     * @param amounts The token amounts to deploy\\n     */\\n    function deployStrategy(string calldata name, uint256[] calldata amounts)\\n        external;\\n\\n    /**\\n     * @notice Unwind liquidity with a registered `IZap`\\n     * @dev The index should match the order of `IZap.sortedSymbols`\\n     * @param name The name of the `IZap`\\n     * @param amount The amount of the token to unwind\\n     * @param index The index of the token to unwind into\\n     */\\n    function unwindStrategy(\\n        string calldata name,\\n        uint256 amount,\\n        uint8 index\\n    ) external;\\n\\n    /**\\n     * @notice Return liquidity to a pool\\n     * @notice Typically used to refill a liquidity pool's reserve\\n     * @dev This should only be callable by the `MetaPoolToken`\\n     * @param pool The `IReservePool` to transfer to\\n     * @param amount The amount of the pool's underlyer token to transer\\n     */\\n    function transferToPool(address pool, uint256 amount) external;\\n\\n    /**\\n     * @notice Swap tokens with a registered `ISwap`\\n     * @notice Used to compound reward tokens\\n     * @notice Used to rebalance underlyer tokens\\n     * @param name The name of the `IZap`\\n     * @param amount The amount of tokens to swap\\n     * @param minAmount The minimum amount of tokens to receive from the swap\\n     */\\n    function swap(\\n        string calldata name,\\n        uint256 amount,\\n        uint256 minAmount\\n    ) external;\\n\\n    /**\\n     * @notice Claim reward tokens with a registered `IZap`\\n     * @param name The name of the `IZap`\\n     */\\n    function claim(string calldata name) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lpaccount/IZapRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {IZap} from \\\"./IZap.sol\\\";\\n\\n/**\\n * @notice For managing a collection of `IZap` contracts\\n */\\ninterface IZapRegistry {\\n    /** @notice Log when a new `IZap` is registered */\\n    event ZapRegistered(IZap zap);\\n\\n    /** @notice Log when an `IZap` is removed */\\n    event ZapRemoved(string name);\\n\\n    /**\\n     * @notice Add a new `IZap` to the registry\\n     * @dev Should not allow duplicate swaps\\n     * @param zap The new `IZap`\\n     */\\n    function registerZap(IZap zap) external;\\n\\n    /**\\n     * @notice Remove an `IZap` from the registry\\n     * @param name The name of the `IZap` (see `INameIdentifier`)\\n     */\\n    function removeZap(string calldata name) external;\\n\\n    /**\\n     * @notice Get the names of all registered `IZap`\\n     * @return An array of `IZap` names\\n     */\\n    function zapNames() external view returns (string[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/lpaccount/ISwapRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {ISwap} from \\\"./ISwap.sol\\\";\\n\\n/**\\n * @notice For managing a collection of `ISwap` contracts\\n */\\ninterface ISwapRegistry {\\n    /** @notice Log when a new `ISwap` is registered */\\n    event SwapRegistered(ISwap swap);\\n\\n    /** @notice Log when an `ISwap` is removed */\\n    event SwapRemoved(string name);\\n\\n    /**\\n     * @notice Add a new `ISwap` to the registry\\n     * @dev Should not allow duplicate swaps\\n     * @param swap The new `ISwap`\\n     */\\n    function registerSwap(ISwap swap) external;\\n\\n    /**\\n     * @notice Remove an `ISwap` from the registry\\n     * @param name The name of the `ISwap` (see `INameIdentifier`)\\n     */\\n    function removeSwap(string calldata name) external;\\n\\n    /**\\n     * @notice Get the names of all registered `ISwap`\\n     * @return An array of `ISwap` names\\n     */\\n    function swapNames() external view returns (string[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/lpaccount/IStableSwap3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\n/**\\n * @notice the stablecoin pool contract\\n */\\ninterface IStableSwap3Pool {\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy // solhint-disable-line func-param-name-mixedcase\\n    ) external;\\n\\n    function coins(uint256 coin) external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/IDetailedERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDetailedERC20 is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.6.11;\\n\\nimport {\\n    AccessControl as OZAccessControl\\n} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @notice Extends OpenZeppelin AccessControl contract with modifiers\\n * @dev This contract and AccessControlUpgradeSafe are essentially duplicates.\\n */\\ncontract AccessControl is OZAccessControl {\\n    /** @notice access control roles **/\\n    bytes32 public constant CONTRACT_ROLE = keccak256(\\\"CONTRACT_ROLE\\\");\\n    bytes32 public constant LP_ROLE = keccak256(\\\"LP_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant EMERGENCY_ROLE = keccak256(\\\"EMERGENCY_ROLE\\\");\\n\\n    modifier onlyLpRole() {\\n        require(hasRole(LP_ROLE, _msgSender()), \\\"NOT_LP_ROLE\\\");\\n        _;\\n    }\\n\\n    modifier onlyContractRole() {\\n        require(hasRole(CONTRACT_ROLE, _msgSender()), \\\"NOT_CONTRACT_ROLE\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminRole() {\\n        require(hasRole(ADMIN_ROLE, _msgSender()), \\\"NOT_ADMIN_ROLE\\\");\\n        _;\\n    }\\n\\n    modifier onlyEmergencyRole() {\\n        require(hasRole(EMERGENCY_ROLE, _msgSender()), \\\"NOT_EMERGENCY_ROLE\\\");\\n        _;\\n    }\\n\\n    modifier onlyLpOrContractRole() {\\n        require(\\n            hasRole(LP_ROLE, _msgSender()) ||\\n                hasRole(CONTRACT_ROLE, _msgSender()),\\n            \\\"NOT_LP_OR_CONTRACT_ROLE\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAdminOrContractRole() {\\n        require(\\n            hasRole(ADMIN_ROLE, _msgSender()) ||\\n                hasRole(CONTRACT_ROLE, _msgSender()),\\n            \\\"NOT_ADMIN_OR_CONTRACT_ROLE\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/INameIdentifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\n/**\\n * @notice Used by the `NamedAddressSet` library to store sets of contracts\\n */\\ninterface INameIdentifier {\\n    /// @notice Should be implemented as a constant value\\n    // solhint-disable-next-line func-name-mixedcase\\n    function NAME() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/common/IAssetAllocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport {INameIdentifier} from \\\"./INameIdentifier.sol\\\";\\n\\n/**\\n * @notice For use with the `TvlManager` to track the value locked in a protocol\\n */\\ninterface IAssetAllocation is INameIdentifier {\\n    struct TokenData {\\n        address token;\\n        string symbol;\\n        uint8 decimals;\\n    }\\n\\n    /**\\n     * @notice Get data for the underlying tokens stored in the protocol\\n     * @return The array of `TokenData`\\n     */\\n    function tokens() external view returns (TokenData[] memory);\\n\\n    /**\\n     * @notice Get the number of different tokens stored in the protocol\\n     * @return The number of tokens\\n     */\\n    function numberOfTokens() external view returns (uint256);\\n\\n    /**\\n     * @notice Get an account's balance for a token stored in the protocol\\n     * @dev The token index should be ordered the same as the `tokens()` array\\n     * @param account The account to get the balance for\\n     * @param tokenIndex The index of the token to get the balance for\\n     * @return The account's balance\\n     */\\n    function balanceOf(address account, uint8 tokenIndex)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get the symbol of a token stored in the protocol\\n     * @dev The token index should be ordered the same as the `tokens()` array\\n     * @param tokenIndex The index of the token\\n     * @return The symbol of the token\\n     */\\n    function symbolOf(uint8 tokenIndex) external view returns (string memory);\\n\\n    /**\\n     * @notice Get the decimals of a token stored in the protocol\\n     * @dev The token index should be ordered the same as the `tokens()` array\\n     * @param tokenIndex The index of the token\\n     * @return The decimals of the token\\n     */\\n    function decimalsOf(uint8 tokenIndex) external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/common/IEmergencyExit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {IERC20} from \\\"./Imports.sol\\\";\\n\\n/**\\n * @notice Used for contracts that need an emergency escape hatch\\n * @notice Should only be used in an emergency to keep funds safu\\n */\\ninterface IEmergencyExit {\\n    /**\\n     * @param emergencySafe The address the tokens were escaped to\\n     * @param token The token escaped\\n     * @param balance The amount of tokens escaped\\n     */\\n    event EmergencyExit(address emergencySafe, IERC20 token, uint256 balance);\\n\\n    /**\\n     * @notice Transfer all tokens to the emergency Safe\\n     * @dev Should only be callable by the emergency Safe\\n     * @dev Should only transfer tokens to the emergency Safe\\n     * @param token The token to transfer\\n     */\\n    function emergencyExit(address token) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/NamedAddressSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\nimport {IAssetAllocation, INameIdentifier} from \\\"contracts/common/Imports.sol\\\";\\nimport {IZap, ISwap} from \\\"contracts/lpaccount/Imports.sol\\\";\\n\\n/**\\n * @notice Stores a set of addresses that can be looked up by name\\n * @notice Addresses can be added or removed dynamically\\n * @notice Useful for keeping track of unique deployed contracts\\n * @dev Each address must be a contract with a `NAME` constant for lookup\\n */\\n// solhint-disable ordering\\nlibrary NamedAddressSet {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct Set {\\n        EnumerableSet.AddressSet _namedAddresses;\\n        mapping(string => INameIdentifier) _nameLookup;\\n    }\\n\\n    struct AssetAllocationSet {\\n        Set _inner;\\n    }\\n\\n    struct ZapSet {\\n        Set _inner;\\n    }\\n\\n    struct SwapSet {\\n        Set _inner;\\n    }\\n\\n    function _add(Set storage set, INameIdentifier namedAddress) private {\\n        require(Address.isContract(address(namedAddress)), \\\"INVALID_ADDRESS\\\");\\n        require(\\n            !set._namedAddresses.contains(address(namedAddress)),\\n            \\\"DUPLICATE_ADDRESS\\\"\\n        );\\n\\n        string memory name = namedAddress.NAME();\\n        require(bytes(name).length != 0, \\\"INVALID_NAME\\\");\\n        require(address(set._nameLookup[name]) == address(0), \\\"DUPLICATE_NAME\\\");\\n\\n        set._namedAddresses.add(address(namedAddress));\\n        set._nameLookup[name] = namedAddress;\\n    }\\n\\n    function _remove(Set storage set, string memory name) private {\\n        address namedAddress = address(set._nameLookup[name]);\\n        require(namedAddress != address(0), \\\"INVALID_NAME\\\");\\n\\n        set._namedAddresses.remove(namedAddress);\\n        delete set._nameLookup[name];\\n    }\\n\\n    function _contains(Set storage set, INameIdentifier namedAddress)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._namedAddresses.contains(address(namedAddress));\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._namedAddresses.length();\\n    }\\n\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (INameIdentifier)\\n    {\\n        return INameIdentifier(set._namedAddresses.at(index));\\n    }\\n\\n    function _get(Set storage set, string memory name)\\n        private\\n        view\\n        returns (INameIdentifier)\\n    {\\n        return set._nameLookup[name];\\n    }\\n\\n    function _names(Set storage set) private view returns (string[] memory) {\\n        uint256 length_ = set._namedAddresses.length();\\n        string[] memory names_ = new string[](length_);\\n\\n        for (uint256 i = 0; i < length_; i++) {\\n            INameIdentifier namedAddress =\\n                INameIdentifier(set._namedAddresses.at(i));\\n            names_[i] = namedAddress.NAME();\\n        }\\n\\n        return names_;\\n    }\\n\\n    function add(\\n        AssetAllocationSet storage set,\\n        IAssetAllocation assetAllocation\\n    ) internal {\\n        _add(set._inner, assetAllocation);\\n    }\\n\\n    function remove(AssetAllocationSet storage set, string memory name)\\n        internal\\n    {\\n        _remove(set._inner, name);\\n    }\\n\\n    function contains(\\n        AssetAllocationSet storage set,\\n        IAssetAllocation assetAllocation\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, assetAllocation);\\n    }\\n\\n    function length(AssetAllocationSet storage set)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _length(set._inner);\\n    }\\n\\n    function at(AssetAllocationSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (IAssetAllocation)\\n    {\\n        return IAssetAllocation(address(_at(set._inner, index)));\\n    }\\n\\n    function get(AssetAllocationSet storage set, string memory name)\\n        internal\\n        view\\n        returns (IAssetAllocation)\\n    {\\n        return IAssetAllocation(address(_get(set._inner, name)));\\n    }\\n\\n    function names(AssetAllocationSet storage set)\\n        internal\\n        view\\n        returns (string[] memory)\\n    {\\n        return _names(set._inner);\\n    }\\n\\n    function add(ZapSet storage set, IZap zap) internal {\\n        _add(set._inner, zap);\\n    }\\n\\n    function remove(ZapSet storage set, string memory name) internal {\\n        _remove(set._inner, name);\\n    }\\n\\n    function contains(ZapSet storage set, IZap zap)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, zap);\\n    }\\n\\n    function length(ZapSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(ZapSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (IZap)\\n    {\\n        return IZap(address(_at(set._inner, index)));\\n    }\\n\\n    function get(ZapSet storage set, string memory name)\\n        internal\\n        view\\n        returns (IZap)\\n    {\\n        return IZap(address(_get(set._inner, name)));\\n    }\\n\\n    function names(ZapSet storage set) internal view returns (string[] memory) {\\n        return _names(set._inner);\\n    }\\n\\n    function add(SwapSet storage set, ISwap swap) internal {\\n        _add(set._inner, swap);\\n    }\\n\\n    function remove(SwapSet storage set, string memory name) internal {\\n        _remove(set._inner, name);\\n    }\\n\\n    function contains(SwapSet storage set, ISwap swap)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, swap);\\n    }\\n\\n    function length(SwapSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(SwapSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (ISwap)\\n    {\\n        return ISwap(address(_at(set._inner, index)));\\n    }\\n\\n    function get(SwapSet storage set, string memory name)\\n        internal\\n        view\\n        returns (ISwap)\\n    {\\n        return ISwap(address(_get(set._inner, name)));\\n    }\\n\\n    function names(SwapSet storage set)\\n        internal\\n        view\\n        returns (string[] memory)\\n    {\\n        return _names(set._inner);\\n    }\\n}\\n// solhint-enable ordering\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/CTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD 3-Clause\\n/*\\n * https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\\n */\\npragma solidity 0.6.11;\\n\\ninterface CTokenInterface {\\n    function symbol() external returns (string memory);\\n\\n    function decimals() external returns (uint8);\\n\\n    function totalSupply() external returns (uint256);\\n\\n    function isCToken() external returns (bool);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function accrueInterest() external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function borrowBalanceStored(address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/ITokenMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n/**\\n * @notice the Curve token minter\\n * @author Curve Finance\\n * @dev translated from vyper\\n * license MIT\\n * version 0.2.4\\n */\\n\\n// solhint-disable func-name-mixedcase, func-param-name-mixedcase\\ninterface ITokenMinter {\\n    /**\\n     * @notice Mint everything which belongs to `msg.sender` and send to them\\n     * @param gauge_addr `LiquidityGauge` address to get mintable amount from\\n     */\\n    function mint(address gauge_addr) external;\\n\\n    /**\\n     * @notice Mint everything which belongs to `msg.sender` across multiple gauges\\n     * @param gauge_addrs List of `LiquidityGauge` addresses\\n     */\\n    function mint_many(address[8] calldata gauge_addrs) external;\\n\\n    /**\\n     * @notice Mint tokens for `_for`\\n     * @dev Only possible when `msg.sender` has been approved via `toggle_approve_mint`\\n     * @param gauge_addr `LiquidityGauge` address to get mintable amount from\\n     * @param _for Address to mint to\\n     */\\n    function mint_for(address gauge_addr, address _for) external;\\n\\n    /**\\n     * @notice allow `minting_user` to mint for `msg.sender`\\n     * @param minting_user Address to toggle permission for\\n     */\\n    function toggle_approve_mint(address minting_user) external;\\n}\\n// solhint-enable\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/IStableSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\n/**\\n * @notice the stablecoin pool contract\\n */\\ninterface IStableSwap {\\n    function balances(uint256 coin) external view returns (uint256);\\n\\n    function coins(uint256 coin) external view returns (address);\\n\\n    // solhint-disable-next-line\\n    function underlying_coins(uint256 coin) external view returns (address);\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount)\\n        external;\\n\\n    // solhint-disable-next-line\\n    function add_liquidity(\\n        uint256[3] memory amounts,\\n        uint256 minMinAmount,\\n        bool useUnderlyer\\n    ) external;\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts)\\n        external;\\n\\n    // solhint-disable-next-line\\n    function remove_liquidity_one_coin(\\n        uint256 tokenAmount,\\n        int128 tokenIndex,\\n        uint256 minAmount\\n    ) external;\\n\\n    // solhint-disable-next-line\\n    function remove_liquidity_one_coin(\\n        uint256 tokenAmount,\\n        int128 tokenIndex,\\n        uint256 minAmount,\\n        bool useUnderlyer\\n    ) external;\\n\\n    // solhint-disable-next-line\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\\n// solhint-disable-next-line no-empty-blocks\\ninterface IStableSwap3 is IStableSwap {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/IStableSwap2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice the stablecoin pool contract\\n */\\ninterface IStableSwap2 {\\n    function balances(uint256 coin) external view returns (uint256);\\n\\n    function coins(uint256 coin) external view returns (address);\\n\\n    // solhint-disable-next-line\\n    function underlying_coins(uint256 coin) external view returns (address);\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount)\\n        external;\\n\\n    // solhint-disable-next-line\\n    function add_liquidity(\\n        uint256[2] memory amounts,\\n        uint256 minMinAmount,\\n        bool useUnderlyer\\n    ) external;\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts)\\n        external;\\n\\n    // solhint-disable-next-line\\n    function remove_liquidity_one_coin(\\n        uint256 tokenAmount,\\n        int128 tokenIndex,\\n        uint256 minAmount\\n    ) external;\\n\\n    // solhint-disable-next-line\\n    function remove_liquidity_one_coin(\\n        uint256 tokenAmount,\\n        int128 tokenIndex,\\n        uint256 minAmount,\\n        bool useUnderlyer\\n    ) external;\\n\\n    // solhint-disable-next-line\\n    function get_virtual_price() external view returns (uint256);\\n\\n    /**\\n     * @dev For newest curve pools like aave; older pools refer to a private `token` variable.\\n     */\\n    // function lp_token() external view returns (address); // solhint-disable-line func-name-mixedcase\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/IStableSwap4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice the stablecoin pool contract\\n */\\ninterface IStableSwap4 {\\n    function balances(uint256 coin) external view returns (uint256);\\n\\n    function coins(uint256 coin) external view returns (address);\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function add_liquidity(uint256[4] memory amounts, uint256 min_mint_amount)\\n        external;\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function remove_liquidity(uint256 _amount, uint256[4] memory min_amounts)\\n        external;\\n\\n    // solhint-disable-next-line\\n    function remove_liquidity_one_coin(\\n        uint256 tokenAmount,\\n        int128 tokenIndex,\\n        uint256 minAmount\\n    ) external;\\n\\n    // solhint-disable-next-line\\n    function get_virtual_price() external view returns (uint256);\\n\\n    /**\\n     * @dev For newest curve pools like aave; older pools refer to a private `token` variable.\\n     */\\n    // function lp_token() external view returns (address); // solhint-disable-line func-name-mixedcase\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/IOldStableSwap2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice the stablecoin pool contract\\n */\\ninterface IOldStableSwap2 {\\n    function balances(int128 coin) external view returns (uint256);\\n\\n    function coins(int128 coin) external view returns (address);\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount)\\n        external;\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts)\\n        external;\\n\\n    /// @dev need this due to lack of `remove_liquidity_one_coin`\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy // solhint-disable-line func-param-name-mixedcase\\n    ) external;\\n\\n    // solhint-disable-next-line\\n    function get_virtual_price() external view returns (uint256);\\n\\n    /**\\n     * @dev For newest curve pools like aave; older pools refer to a private `token` variable.\\n     */\\n    // function lp_token() external view returns (address); // solhint-disable-line func-name-mixedcase\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/IOldStableSwap3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice the stablecoin pool contract\\n */\\ninterface IOldStableSwap3 {\\n    function balances(int128 coin) external view returns (uint256);\\n\\n    function coins(int128 coin) external view returns (address);\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount)\\n        external;\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts)\\n        external;\\n\\n    /// @dev need this due to lack of `remove_liquidity_one_coin`\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy // solhint-disable-line func-param-name-mixedcase\\n    ) external;\\n\\n    // solhint-disable-next-line\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/IOldStableSwap4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice the stablecoin pool contract\\n */\\ninterface IOldStableSwap4 {\\n    function balances(int128 coin) external view returns (uint256);\\n\\n    function coins(int128 coin) external view returns (address);\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function add_liquidity(uint256[4] memory amounts, uint256 min_mint_amount)\\n        external;\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function remove_liquidity(uint256 _amount, uint256[4] memory min_amounts)\\n        external;\\n\\n    /// @dev need this due to lack of `remove_liquidity_one_coin`\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy // solhint-disable-line func-param-name-mixedcase\\n    ) external;\\n\\n    // solhint-disable-next-line\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/ILiquidityGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-1.1\\npragma solidity 0.6.11;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice the liquidity gauge, i.e. staking contract, for the stablecoin pool\\n */\\ninterface ILiquidityGauge {\\n    function deposit(uint256 _value) external;\\n\\n    function deposit(uint256 _value, address _addr) external;\\n\\n    function withdraw(uint256 _value) external;\\n\\n    /**\\n     * @notice Claim available reward tokens for msg.sender\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function claim_rewards() external;\\n\\n    /**\\n     * @notice Get the number of claimable reward tokens for a user\\n     * @dev This function should be manually changed to \\\"view\\\" in the ABI\\n     *      Calling it via a transaction will claim available reward tokens\\n     * @param _addr Account to get reward amount for\\n     * @param _token Token to get reward amount for\\n     * @return uint256 Claimable reward token amount\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function claimable_reward(address _addr, address _token)\\n        external\\n        returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/IStakingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n/*\\n * Synthetix: StakingRewards.sol\\n *\\n * Docs: https://docs.synthetix.io/\\n *\\n *\\n * MIT License\\n * ===========\\n *\\n * Copyright (c) 2020 Synthetix\\n *\\n */\\n\\ninterface IStakingRewards {\\n    // Mutative\\n    function stake(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function getReward() external;\\n\\n    function exit() external;\\n\\n    // Views\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getRewardForDuration() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/IDepositZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-2.1\\npragma solidity 0.6.11;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice deposit contract used for pools such as Compound and USDT\\n */\\ninterface IDepositZap {\\n    // solhint-disable-next-line\\n    function underlying_coins(int128 coin) external view returns (address);\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount)\\n        external;\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function remove_liquidity_one_coin(\\n        uint256 _amount,\\n        int128 i,\\n        uint256 minAmount\\n    ) external;\\n\\n    function curve() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/common/interfaces/IDepositZap3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSDL-2.1\\npragma solidity 0.6.11;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice deposit contract used for pools such as Compound and USDT\\n */\\ninterface IDepositZap3 {\\n    // solhint-disable-next-line\\n    function underlying_coins(int128 coin) external view returns (address);\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount)\\n        external;\\n\\n    /**\\n     * @dev the number of coins is hard-coded in curve contracts\\n     */\\n    // solhint-disable-next-line\\n    function remove_liquidity_one_coin(\\n        uint256 _amount,\\n        int128 i,\\n        uint256 minAmount\\n    ) external;\\n\\n    function curve() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/convex/common/interfaces/IBaseRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\ninterface IRewardPool {\\n    /// @notice withdraw to a convex tokenized deposit\\n    function withdraw(uint256 _amount, bool _claim) external returns (bool);\\n\\n    /// @notice claim rewards\\n    function getReward() external returns (bool);\\n\\n    /// @notice stake a convex tokenized deposit\\n    function stake(uint256 _amount) external returns (bool);\\n\\n    /// @notice Return how much rewards an address will receive if they claim their rewards now.\\n    function earned(address account) external view returns (uint256);\\n\\n    /// @notice get balance of an address\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    /// @notice get reward period end time\\n    /// @dev since this is based on the unipool contract, `notifyRewardAmount`\\n    /// must be called in order for a new period to begin.\\n    function periodFinish() external view returns (uint256);\\n}\\n\\ninterface IBaseRewardPool is IRewardPool {\\n    /// @notice withdraw directly to curve LP token\\n    function withdrawAndUnwrap(uint256 _amount, bool _claim)\\n        external\\n        returns (bool);\\n\\n    /// @notice Return the number of extra rewards.\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    /** @notice array of child reward contracts\\n     * You can query the number of extra rewards via baseRewardPool.extraRewardsLength().\\n     * This array holds a list of VirtualBalanceRewardPool contracts which are similar in\\n     * nature to the base reward contract but without actual control of staked tokens.\\n     *\\n     * This means that if a pool has CRV rewards as well as SNX rewards, the pool's main\\n     * reward contract (BaseRewardPool) will distribute the CRV and the child contract\\n     * (VirtualBalanceRewardPool) will distribute the SNX.\\n     */\\n    function extraRewards(uint256 index) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/convex/common/interfaces/IBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\ninterface IBooster {\\n    struct PoolInfo {\\n        address lptoken;\\n        address token;\\n        address gauge;\\n        address crvRewards;\\n        address stash;\\n        bool shutdown;\\n    }\\n\\n    /**\\n     * @notice deposit into convex, receive a tokenized deposit.\\n     * Parameter to stake immediately.\\n     */\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    /// @notice burn a tokenized deposit to receive curve lp tokens back\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function poolInfo(uint256 index) external view returns (PoolInfo memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetAllocations\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"deployLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Allocations\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getLpTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedSymbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"}],\"name\":\"unwindLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ConvexMigrationZap","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}