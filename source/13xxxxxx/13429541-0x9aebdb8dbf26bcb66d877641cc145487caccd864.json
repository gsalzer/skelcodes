{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.6.4 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.2\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol@v4.3.2\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 currentAllowance = allowance(account, _msgSender());\r\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(account, _msgSender(), currentAllowance - amount);\r\n        }\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/LuckyCoin.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract LuckyCoin is ERC20Burnable {\r\n    //The weekly interest rate: 0.25%\r\n    uint256 constant WEEKLY_INTEREST_RATE_X10000 = 25;\r\n\r\n    //The minimum random mint rate: 100% = 1x\r\n    uint256 constant MINIMUM_MINT_RATE_X100 = 100;\r\n\r\n    //The maximum random mint rate: 100,000% = 1,000x\r\n    uint256 constant MAXIMUM_MINT_RATE_X100 = 100000;\r\n\r\n    //The maximum random mint amount relative to the total coin amount: 50%\r\n    uint256 constant MAX_MINT_TOTAL_AMOUNT_RATE_X100 = 50;\r\n\r\n    //The maximum coin amount for the initial minting: 10,000,000\r\n    uint256 constant INITIAL_MINT_MAX_AMOUNT = 1e25;\r\n\r\n    //Time interval for random mint\r\n    uint256 constant RANDOM_MINT_MIN_INTERVAL = 1 weeks - 10 minutes;\r\n\r\n    //Initial value for the timestamp of the last random mint\r\n    //It is in the future to avoid random mint during ICO\r\n    //2022-01-01 00.00.00\r\n    uint256 constant RANDOM_MINT_DEFAULT_LAST_TIMESTAMP = 1640995200;\r\n\r\n    //Number of bits for the random number generation\r\n    uint8 constant RANDOM_NUM_BITS = 32;\r\n\r\n    //Total number of addresses with amount > 0\r\n    uint256 public totalAddresses;\r\n\r\n    //Mapping from index to address\r\n    mapping(uint256 => address) private indexToAddress;\r\n\r\n    //Mapping from addresso to index\r\n    mapping(address => uint256) private addressToIndex;\r\n\r\n    //Timestamp of the start of last random mint\r\n    uint256 public randomMintLastTimeStamp;\r\n\r\n    //Block number of the start of last random mint\r\n    uint256 public randomMintStartBlockNumber;\r\n\r\n    //Owner addresses to exclude from the random mint\r\n    address[10] public owner;\r\n\r\n    //Exchange rate for the ICO\r\n    uint32 public buyExchangeRate;\r\n\r\n    //Constructor\r\n    constructor() ERC20(\"LuckyCoin\", \"LCK\") {\r\n        totalAddresses = 0;\r\n        randomMintLastTimeStamp = RANDOM_MINT_DEFAULT_LAST_TIMESTAMP;\r\n        randomMintStartBlockNumber = 0;\r\n        owner[0] = msg.sender;\r\n        for (uint8 i = 1; i < owner.length; i++) owner[i] = address(0);\r\n        buyExchangeRate = 0;\r\n    }\r\n\r\n    //Function for ICO\r\n    //It lets the customer buy coins at a fixed price\r\n    function buy() external payable {\r\n        require(buyExchangeRate > 0, \"Purchases are closed\");\r\n        require(\r\n            block.timestamp < RANDOM_MINT_DEFAULT_LAST_TIMESTAMP,\r\n            \"ICO period ended\"\r\n        );\r\n        require(\r\n            totalSupply() + msg.value * buyExchangeRate <=\r\n                INITIAL_MINT_MAX_AMOUNT,\r\n            \"Total coin amount has been reached\"\r\n        );\r\n        _mint(msg.sender, msg.value * buyExchangeRate);\r\n    }\r\n\r\n    //Function for ICO\r\n    //It lets the owner change the exchange rate between ETH and LCK\r\n    function setBuyExchangeRate(uint32 newBuyExchangeRate) external {\r\n        require(\r\n            msg.sender == owner[0],\r\n            \"This function can only be called by the owner\"\r\n        );\r\n        buyExchangeRate = newBuyExchangeRate;\r\n    }\r\n\r\n    //Function for ICO\r\n    //It lets the owner mint coins\r\n    function mint(address to, uint256 amount) external {\r\n        require(\r\n            msg.sender == owner[0],\r\n            \"This function can only be called by the owner\"\r\n        );\r\n        require(\r\n            totalSupply() + amount <= INITIAL_MINT_MAX_AMOUNT,\r\n            \"Total coin amount has been reached\"\r\n        );\r\n        require(\r\n            block.timestamp < RANDOM_MINT_DEFAULT_LAST_TIMESTAMP,\r\n            \"ICO period ended\"\r\n        );\r\n        _mint(to, amount);\r\n    }\r\n\r\n    //Function for ICO\r\n    //It lets the owner withdraw ETH stored in the contract\r\n    function withdraw(address to) external {\r\n        require(\r\n            msg.sender == owner[0],\r\n            \"This function can only be called by the owner\"\r\n        );\r\n        payable(to).transfer(address(this).balance);\r\n    }\r\n\r\n    //Function for ICO\r\n    //It lets the owner to set the last random mint timestamp\r\n    //It will be called at the end of the ICO\r\n    function setRandomMintLastTimeStamp(uint256 newRandomMintLastTimeStamp)\r\n        external\r\n    {\r\n        require(\r\n            msg.sender == owner[0],\r\n            \"This function can only be called by the owner\"\r\n        );\r\n        require(\r\n            block.timestamp < RANDOM_MINT_DEFAULT_LAST_TIMESTAMP,\r\n            \"ICO period ended\"\r\n        );\r\n        require(\r\n            newRandomMintLastTimeStamp <= RANDOM_MINT_DEFAULT_LAST_TIMESTAMP,\r\n            \"Value has to be set earlier than 2022-01-01\"\r\n        );\r\n        randomMintLastTimeStamp = newRandomMintLastTimeStamp;\r\n    }\r\n\r\n    //Public function to start the random mint\r\n    //It checks the requirements and starts the private function\r\n    function randomMintStart() external {\r\n        require(\r\n            block.timestamp >\r\n                randomMintLastTimeStamp + RANDOM_MINT_MIN_INTERVAL,\r\n            \"You have to wait one week after the last random mint\"\r\n        );\r\n        require(randomMintStartBlockNumber == 0, \"Random mint already started\");\r\n        _randomMintStart();\r\n    }\r\n\r\n    //Private function to start the random mint\r\n    //It just sets the initial timestamp and block number\r\n    //(this will stop all transactions until the end of random mint)\r\n    function _randomMintStart() internal {\r\n        randomMintLastTimeStamp = block.timestamp;\r\n        randomMintStartBlockNumber = block.number;\r\n    }\r\n\r\n    //Public function to end the random mint\r\n    //It checks the requirements and starts the private function\r\n    function randomMintEnd() external {\r\n        require(randomMintStartBlockNumber > 0, \"Random mint not started\");\r\n        require(\r\n            block.number > randomMintStartBlockNumber + RANDOM_NUM_BITS,\r\n            \"You have to wait 32 blocks after start\"\r\n        );\r\n        _randomMintEnd();\r\n    }\r\n\r\n    //Private function to end the random mint\r\n    //Generation of random wallet index, computation of the mint amount and mint operation\r\n    function _randomMintEnd() internal {\r\n        //reset state\r\n        randomMintStartBlockNumber = 0;\r\n        //check timeout\r\n        if (block.timestamp > randomMintLastTimeStamp + 1 days) return;\r\n        //calculate random number\r\n        uint256 randomNumer = uint256(blockhash(block.number - RANDOM_NUM_BITS - 1)) <<\r\n                RANDOM_NUM_BITS;\r\n        for (uint8 i = 0; i < RANDOM_NUM_BITS; i++)\r\n            randomNumer |=\r\n                (uint256(blockhash(block.number - i - 1)) & 0x01) <<\r\n                i;\r\n        //clculate random wallet index\r\n        uint256 randomIndex = (uint256(\r\n            keccak256(abi.encodePacked(randomNumer))\r\n        ) % totalAddresses) + 1;\r\n        //calculate mint rate\r\n        uint256 mintRateX100 = (totalAddresses * WEEKLY_INTEREST_RATE_X10000) /\r\n            100;\r\n        //calculate number of extractions\r\n        uint256 numExctractions = (mintRateX100 - 1) /\r\n            MAXIMUM_MINT_RATE_X100 +\r\n            1;\r\n        while (mintRateX100 > 0) {\r\n            //get random wallet address\r\n            address randomAddress = indexToAddress[randomIndex];\r\n            //calculate mint amount\r\n            uint256 mintAmount = (balanceOf(randomAddress) *\r\n                min(\r\n                    max(mintRateX100, MINIMUM_MINT_RATE_X100),\r\n                    MAXIMUM_MINT_RATE_X100\r\n                )) / 100;\r\n            //limit max mint amont\r\n            mintAmount = min(\r\n                mintAmount,\r\n                (totalSupply() * MAX_MINT_TOTAL_AMOUNT_RATE_X100) / 100\r\n            );\r\n            //mint\r\n            _mint(randomAddress, mintAmount);\r\n            //next address\r\n            randomIndex =\r\n                ((randomIndex - 1 + totalAddresses / numExctractions) %\r\n                    totalAddresses) +\r\n                1;\r\n            //decrease mint rate\r\n            mintRateX100 -= min(mintRateX100, MAXIMUM_MINT_RATE_X100);\r\n        }\r\n    }\r\n\r\n    //Callback function before token transfer\r\n    //It checks if the random mint is in progress and it automatically starts/stops it\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        if (randomMintStartBlockNumber == 0) {\r\n            //random mint not in progress\r\n            if (\r\n                block.timestamp >\r\n                randomMintLastTimeStamp + RANDOM_MINT_MIN_INTERVAL\r\n            ) {\r\n                //start random mint\r\n                _randomMintStart();\r\n            }\r\n        } else {\r\n            //random mint in progress\r\n            if (block.number > randomMintStartBlockNumber + RANDOM_NUM_BITS) {\r\n                //end random mint\r\n                _randomMintEnd();\r\n            } else {\r\n                //error\r\n                revert(\"Random mint in progress, transactions are suspended\");\r\n            }\r\n        }\r\n    }\r\n\r\n    //Callback function after token transfer\r\n    //It updates the wallet count and the mapping from index to address and from address to index\r\n    //It removes a wallet if it becames empty and add add a new wallet it becames full\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        super._afterTokenTransfer(from, to, amount);\r\n\r\n        if (amount == 0 || from == to) return;\r\n\r\n        // insert receiver in mapping\r\n        if (to != address(0) && !_isOwnerAddress(to) && balanceOf(to) == amount)\r\n            _insertInMapping(to);\r\n\r\n        // remove sender from mapping\r\n        if (from != address(0) && !_isOwnerAddress(from) && balanceOf(from) == 0)\r\n            _removeFromMapping(from);\r\n    }\r\n\r\n    //It inserts a new address in indexToAddress and addressToIndex\r\n    function _insertInMapping(address a) internal {\r\n        // increment number of addresses\r\n        totalAddresses++;\r\n        // insert address in mapping\r\n        indexToAddress[totalAddresses] = a;\r\n        addressToIndex[a] = totalAddresses;\r\n    }\r\n\r\n    //It removes an address from indexToAddress and addressToIndex\r\n    function _removeFromMapping(address a) internal {\r\n        // remove address from mapping\r\n        indexToAddress[addressToIndex[a]] = indexToAddress[totalAddresses];\r\n        addressToIndex[indexToAddress[totalAddresses]] = addressToIndex[a];\r\n        // decrement number of addresses\r\n        totalAddresses--;\r\n    }\r\n\r\n    //It tells if an address is in indexToAddress and addressToIndex\r\n    function _isInMapping(address a) internal view returns (bool) {\r\n        uint256 index = addressToIndex[a];\r\n        return\r\n            index > 0 && index <= totalAddresses && indexToAddress[index] == a;\r\n    }\r\n\r\n    //It tells if the supplied addres is property of contract owner\r\n    function _isOwnerAddress(address a) internal view returns (bool) {\r\n        for (uint8 i = 0; i < owner.length; i++) {\r\n            if (owner[i] == address(0)) return false;\r\n            if (owner[i] == a) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //It lets the owner add a new address\r\n    function addOwnerAddress(address a) external {\r\n        require(\r\n            msg.sender == owner[0],\r\n            \"This function can only be called by the owner\"\r\n        );\r\n        require(randomMintStartBlockNumber == 0, \"Random mint in progress\");\r\n        for (uint8 i = 0; i < owner.length; i++) {\r\n            if (owner[i] == a) revert(\"Duplicate address\");\r\n            if (owner[i] == address(0)) {\r\n                //insert address in array\r\n                owner[i] = a;\r\n                //remove from mapping\r\n                if (balanceOf(a) > 0 && _isInMapping(a)) _removeFromMapping(a);\r\n                //end\r\n                return;\r\n            }\r\n        }\r\n        revert(\"Too many owners\");\r\n    }\r\n\r\n    //It lets the owner remove an address\r\n    function removeOwnerAddress(address a) external {\r\n        require(\r\n            msg.sender == owner[0],\r\n            \"This function can only be called by the owner\"\r\n        );\r\n        require(randomMintStartBlockNumber == 0, \"Random mint in progress\");\r\n        for (uint8 i = 1; i < owner.length; i++) {\r\n            if (owner[i] == address(0)) revert(\"Address not found\");\r\n            if (owner[i] == a) {\r\n                for (uint8 j = i + 1; j < owner.length; j++) {\r\n                    if (owner[j] == address(0)) {\r\n                        //remove address from array\r\n                        owner[i] = owner[j - 1];\r\n                        owner[j - 1] = address(0);\r\n                        //insert address in mapping\r\n                        if (balanceOf(a) > 0 && !_isInMapping(a))\r\n                            _insertInMapping(a);\r\n                        //end\r\n                        return;\r\n                    }\r\n                }\r\n                //remove address from array\r\n                owner[i] = owner[owner.length - 1];\r\n                owner[owner.length - 1] = address(0);\r\n                //insert address in mapping\r\n                if (balanceOf(a) > 0 && !_isInMapping(a)) _insertInMapping(a);\r\n                //end\r\n                return;\r\n            }\r\n        }\r\n        revert(\"Address not found\");\r\n    }\r\n\r\n    //It lets the owner change its address\r\n    function changeOwnerAddress(address a) external {\r\n        require(\r\n            msg.sender == owner[0],\r\n            \"This function can only be called by the owner\"\r\n        );\r\n        require(randomMintStartBlockNumber == 0, \"Random mint in progress\");\r\n        for (uint8 i = 0; i < owner.length; i++) {\r\n            if (owner[i] == a) {\r\n                //swap addresses\r\n                owner[i] = owner[0];\r\n                owner[0] = a;\r\n                //end\r\n                return;\r\n            }\r\n            if (owner[i] == address(0)) {\r\n                //insert address in array\r\n                owner[i] = owner[0];\r\n                owner[0] = a;\r\n                //remove from mapping\r\n                if (balanceOf(a) > 0 && _isInMapping(a)) _removeFromMapping(a);\r\n                //end\r\n                return;\r\n            }\r\n        }\r\n        revert(\"Too many owners\");\r\n    }\r\n\r\n    //It calculates the minimum of two numbers\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    //It calculates the maximum of two numbers\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"addOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyExchangeRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"changeOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomMintEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomMintLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomMintStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomMintStartBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"removeOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newBuyExchangeRate\",\"type\":\"uint32\"}],\"name\":\"setBuyExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRandomMintLastTimeStamp\",\"type\":\"uint256\"}],\"name\":\"setRandomMintLastTimeStamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LuckyCoin","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://64d610c52be2afd8753aa70e97d254e513aac835ba8b7c1e19a222000a33e579"}]}