{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Whitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2021 Enjinstarter\\npragma solidity ^0.7.6;\\n\\nimport \\\"./interfaces/IWhitelist.sol\\\";\\n\\n/**\\n * @title Whitelist\\n * @author Enjinstarter\\n */\\ncontract Whitelist is IWhitelist {\\n    uint256 public constant BATCH_MAX_NUM = 500;\\n\\n    address public governanceAccount;\\n    address public whitelistAdmin;\\n\\n    mapping(address => bool) private _whitelisteds;\\n\\n    constructor() {\\n        governanceAccount = msg.sender;\\n        whitelistAdmin = msg.sender;\\n    }\\n\\n    modifier onlyBy(address account) {\\n        require(msg.sender == account, \\\"Whitelist: sender unauthorized\\\");\\n        _;\\n    }\\n\\n    function addWhitelisted(address account)\\n        external\\n        override\\n        onlyBy(whitelistAdmin)\\n    {\\n        _addWhitelisted(account);\\n    }\\n\\n    function removeWhitelisted(address account)\\n        external\\n        override\\n        onlyBy(whitelistAdmin)\\n    {\\n        _removeWhitelisted(account);\\n    }\\n\\n    function addWhitelistedBatch(address[] memory accounts)\\n        external\\n        override\\n        onlyBy(whitelistAdmin)\\n    {\\n        require(accounts.length > 0, \\\"Whitelist: empty\\\");\\n        require(accounts.length <= BATCH_MAX_NUM, \\\"Whitelist: exceed max\\\");\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _addWhitelisted(accounts[i]);\\n        }\\n    }\\n\\n    function removeWhitelistedBatch(address[] memory accounts)\\n        external\\n        override\\n        onlyBy(whitelistAdmin)\\n    {\\n        require(accounts.length > 0, \\\"Whitelist: empty\\\");\\n        require(accounts.length <= BATCH_MAX_NUM, \\\"Whitelist: exceed max\\\");\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _removeWhitelisted(accounts[i]);\\n        }\\n    }\\n\\n    function setGovernanceAccount(address account)\\n        external\\n        override\\n        onlyBy(governanceAccount)\\n    {\\n        require(account != address(0), \\\"Whitelist: zero account\\\");\\n\\n        governanceAccount = account;\\n    }\\n\\n    function setWhitelistAdmin(address account)\\n        external\\n        override\\n        onlyBy(governanceAccount)\\n    {\\n        require(account != address(0), \\\"Whitelist: zero account\\\");\\n\\n        whitelistAdmin = account;\\n    }\\n\\n    function isWhitelisted(address account)\\n        external\\n        view\\n        override\\n        returns (bool isWhitelisted_)\\n    {\\n        require(account != address(0), \\\"Whitelist: zero account\\\");\\n\\n        isWhitelisted_ = _whitelisteds[account];\\n    }\\n\\n    function _addWhitelisted(address account) internal {\\n        require(account != address(0), \\\"Whitelist: zero account\\\");\\n        require(!_whitelisteds[account], \\\"Whitelist: already whitelisted\\\");\\n\\n        _whitelisteds[account] = true;\\n\\n        emit WhitelistedAdded(account);\\n    }\\n\\n    function _removeWhitelisted(address account) internal {\\n        require(account != address(0), \\\"Whitelist: zero account\\\");\\n        require(_whitelisteds[account], \\\"Whitelist: not whitelisted\\\");\\n\\n        _whitelisteds[account] = false;\\n\\n        emit WhitelistedRemoved(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2021 Enjinstarter\\npragma solidity ^0.7.6;\\n\\n/**\\n * @title IWhitelist\\n * @author Enjinstarter\\n */\\ninterface IWhitelist {\\n    function addWhitelisted(address account) external;\\n\\n    function removeWhitelisted(address account) external;\\n\\n    function addWhitelistedBatch(address[] memory accounts) external;\\n\\n    function removeWhitelistedBatch(address[] memory accounts) external;\\n\\n    function setGovernanceAccount(address account) external;\\n\\n    function setWhitelistAdmin(address account) external;\\n\\n    function isWhitelisted(address account)\\n        external\\n        view\\n        returns (bool isWhitelisted_);\\n\\n    event WhitelistedAdded(address indexed account);\\n    event WhitelistedRemoved(address indexed account);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BATCH_MAX_NUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addWhitelistedBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWhitelisted_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"removeWhitelistedBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setGovernanceAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setWhitelistAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Whitelist","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}