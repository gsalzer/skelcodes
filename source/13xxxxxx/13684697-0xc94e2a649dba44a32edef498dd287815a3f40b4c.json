{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: Unlicensed\r\n\r\n/**\r\n *  \r\n *  You buy $DFC. We farm on Degen protocols with insanely high APR across multiple chains and return profits to holders.\r\n *  \r\n *  https://t.me/DegenFarmCapital\r\n *  \r\n *  https://degenfarm.capital\r\n *  \r\n *  13% Slippage\r\n *  \r\n */\r\n\r\npragma solidity ^0.8.9;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract Auth is Context {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract deployer\r\n     */\r\n    modifier onlyDeployer() {\r\n        require(isOwner(_msgSender()), \"!D\"); _;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(authorizations[_msgSender()], \"!OWNER\"); _;\r\n    }\r\n\r\n    /**\r\n     * Authorize address. Owner only\r\n     */\r\n    function authorize(address adr, bool allow) public onlyDeployer {\r\n        authorizations[adr] = allow;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be deployer. Leaves old deployer authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyDeployer {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ncontract DFC is Context, IERC20, Auth {\r\n    using SafeMath for uint256;\r\n    string private constant _name = \"Degen Farm Capital | t.me/DegenFarmCapital\";\r\n    string private constant _symbol = \"DFC\";\r\n    uint8 private constant _decimals = 9;\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 1000000000000 * (10**_decimals); // 1T Supply\r\n    uint256 public swapLimit;\r\n    uint256 public maxSwapLimit = _tTotal / 2000;\r\n    bool private swapEnabled = true;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _launchBlock;\r\n    uint256 private _protectionBlocks;\r\n\r\n    uint256 private _buyLPFee = 4;\r\n    uint256 private _buyMarketingFee = 4;\r\n    uint256 private _buyReflectionFee = 4;\r\n\r\n    uint256 private _sellLPFee = 4;\r\n    uint256 private _sellMarketingFee = 4;\r\n    uint256 private _sellReflectionFee = 4;\r\n\r\n    struct FeeBreakdown {\r\n        uint256 tTransferAmount;\r\n        uint256 tLP;\r\n        uint256 tMarketing;\r\n        uint256 tReflection;\r\n    }\r\n    \r\n    struct Fee {\r\n        uint256 buyMarketingFee;\r\n        uint256 buyReflectionFee;\r\n        uint256 buyLPFee;\r\n        \r\n        uint256 sellMarketingFee;\r\n        uint256 sellReflectionFee;\r\n        uint256 sellLPFee;\r\n    }\r\n    \r\n    mapping(address => bool) private wreck;\r\n    \r\n    address payable private _marketingAddress;\r\n    address payable private _LPAddress;\r\n    address payable constant private _burnAddress = payable(0x000000000000000000000000000000000000dEaD);\r\n    \r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    \r\n    uint256 private _maxBuyTxAmount = _tTotal;\r\n    uint256 private _maxSellTxAmount = _tTotal;\r\n\r\n    bool private tradingOpen = false;\r\n    bool private inSwap = false;\r\n    bool private pairSwapped = false;\r\n    \r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    \r\n    constructor(uint256 perc) Auth(_msgSender()) {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);\r\n\r\n        address owner = _msgSender();\r\n        \r\n        _marketingAddress = payable(owner);\r\n        _LPAddress = payable(owner);\r\n        \r\n        swapLimit = _tTotal.div(100).mul(100 - perc);\r\n        \r\n        authorize(_marketingAddress, true);\r\n        authorize(_LPAddress, true);\r\n\r\n        _rOwned[owner] = _rTotal.div(100).mul(perc);\r\n        _rOwned[address(this)] = _rTotal.sub(_rOwned[owner]);\r\n        _isExcludedFromFee[owner] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_marketingAddress] = true;\r\n        _isExcludedFromFee[_LPAddress] = true;\r\n        emit Transfer(address(0), owner, _tTotal);\r\n    }\r\n\r\n    function name() override external pure returns (string memory) {return _name;}\r\n    function symbol() override external pure returns (string memory) {return _symbol;}\r\n    function decimals() override external pure returns (uint8) {return _decimals;}\r\n    function totalSupply() external pure override returns (uint256) {return _tTotal;}\r\n    function balanceOf(address account) public view override returns (uint256) {return tokenFromReflection(_rOwned[account]);}\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) external view override returns (uint256) {return _allowances[owner][spender];}\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) private view returns (uint256) {\r\n        require(rAmount <= _rTotal,\"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n    \r\n    function getFee() internal view returns (Fee memory) {\r\n        Fee memory currentFee;\r\n        \r\n        currentFee.buyMarketingFee = _buyMarketingFee;\r\n        currentFee.buyLPFee = _buyLPFee;\r\n        currentFee.buyReflectionFee = _buyReflectionFee;\r\n        \r\n        currentFee.sellMarketingFee = _sellMarketingFee;\r\n        currentFee.sellLPFee = _sellLPFee;\r\n        currentFee.sellReflectionFee = _sellReflectionFee;\r\n        \r\n        return currentFee;\r\n    }\r\n\r\n    function removeAllFee() internal pure returns (Fee memory) {\r\n        Fee memory currentFee;\r\n        \r\n        currentFee.buyMarketingFee = 0;\r\n        currentFee.buyLPFee = 0;\r\n        currentFee.buyReflectionFee = 0;\r\n        \r\n        currentFee.sellMarketingFee = 0;\r\n        currentFee.sellLPFee = 0;\r\n        currentFee.sellReflectionFee = 0;\r\n        \r\n        return currentFee;\r\n    }\r\n    \r\n    function setWreckFee() internal pure returns (Fee memory) {\r\n        Fee memory currentFee;\r\n        \r\n        currentFee.buyMarketingFee = 98;\r\n        currentFee.buyLPFee = 1;\r\n        currentFee.buyReflectionFee = 0;\r\n        \r\n        currentFee.sellMarketingFee = 98;\r\n        currentFee.sellLPFee = 1;\r\n        currentFee.sellReflectionFee = 0;\r\n        \r\n        return currentFee;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        bool takeFee = true;\r\n        \r\n        Fee memory currentFee = getFee();\r\n            \r\n        if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to]) {\r\n            require(amount <= _maxBuyTxAmount, \"Max Buy Limit\");\r\n            \r\n            if (block.number <= _launchBlock.add(_protectionBlocks) || !tradingOpen) {\r\n                wreck[to] = true;\r\n            }\r\n        } else if (!inSwap && from != uniswapV2Pair && !_isExcludedFromFee[from]) { //sells, transfers (except for buys)\r\n            require(amount <= _maxSellTxAmount, \"Max Sell Limit\");\r\n            \r\n            if (block.number <= _launchBlock.add(_protectionBlocks) || !tradingOpen) {\r\n                wreck[from] = true;\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            \r\n            if (contractTokenBalance > swapLimit && swapEnabled) {\r\n                if (contractTokenBalance >= swapLimit + maxSwapLimit) {\r\n                    convertTokensForFee(maxSwapLimit);\r\n                } else {\r\n                    convertTokensForFee(contractTokenBalance.sub(swapLimit));\r\n                }\r\n            }\r\n\r\n            \r\n            uint256 contractETHBalance = address(this).balance;\r\n            if (contractETHBalance > 0) {\r\n                distributeFee(address(this).balance);\r\n            }\r\n        }  else {\r\n            takeFee = false;\r\n        }\r\n\r\n        if (wreck[from] || wreck[to]) {\r\n            currentFee = setWreckFee();\r\n            takeFee = true;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, currentFee);\r\n    }\r\n\r\n    function convertTokensForFee(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n\r\n    function distributeFee(uint256 amount) private {\r\n        _marketingAddress.transfer(amount.div(2));\r\n        _LPAddress.transfer(amount.div(2));\r\n    }\r\n\r\n    function openTrading(uint256 protectionBlocks) external onlyOwner {\r\n        _launchBlock = block.number;\r\n        _protectionBlocks = protectionBlocks;\r\n        tradingOpen = true;\r\n    }\r\n    \r\n    function updateProtection(uint256 protectionBlocks) external onlyOwner {\r\n        _protectionBlocks = protectionBlocks;\r\n    }\r\n\r\n    function triggerSwap(uint256 perc) external onlyOwner {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        convertTokensForFee(contractBalance.mul(perc).div(100));\r\n        swapLimit = contractBalance.mul(100-perc).div(100);\r\n    }\r\n    \r\n    function manuallyCollectFee(uint256 amount) external onlyOwner {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        distributeFee(amount > 0 ? amount : contractETHBalance);\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee, Fee memory currentFee) private {\r\n        if (!takeFee) currentFee = removeAllFee();\r\n        if (sender == uniswapV2Pair){\r\n            _transferStandardBuy(sender, recipient, amount, currentFee);\r\n        }\r\n        else {\r\n            _transferStandardSell(sender, recipient, amount, currentFee);\r\n        }\r\n    }\r\n\r\n    function _transferStandardBuy(address sender, address recipient, uint256 tAmount, Fee memory currentFee) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rReflection, uint256 tTransferAmount, uint256 tLP, uint256 tMarketing) = _getValuesBuy(tAmount, currentFee);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _processFee(tLP, tMarketing);\r\n        _rTotal = _rTotal.sub(rReflection);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferStandardSell(address sender, address recipient, uint256 tAmount, Fee memory currentFee) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rReflection, uint256 tTransferAmount, uint256 tLP, uint256 tMarketing) = _getValuesSell(tAmount, currentFee);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        if (recipient == _burnAddress) {\r\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        }\r\n        _processFee(tLP, tMarketing);\r\n        _rTotal = _rTotal.sub(rReflection);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    function _processFee(uint256 tLP, uint256 tMarketing) internal {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rLP = tLP.mul(currentRate);\r\n        uint256 rMarketing = tMarketing.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLP).add(rMarketing);\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function _getValuesBuy(uint256 tAmount, Fee memory currentFee) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        FeeBreakdown memory buyFees;\r\n        (buyFees.tTransferAmount, buyFees.tLP, buyFees.tMarketing, buyFees.tReflection) = _getTValues(tAmount, currentFee.buyLPFee, currentFee.buyMarketingFee, currentFee.buyReflectionFee);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rReflection) = _getRValues(tAmount, buyFees.tLP, buyFees.tMarketing, buyFees.tReflection, currentRate);\r\n        return (rAmount, rTransferAmount, rReflection, buyFees.tTransferAmount, buyFees.tLP, buyFees.tMarketing);\r\n    }\r\n\r\n    function _getValuesSell(uint256 tAmount, Fee memory currentFee) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        FeeBreakdown memory sellFees;\r\n        (sellFees.tTransferAmount, sellFees.tLP, sellFees.tMarketing, sellFees.tReflection) = _getTValues(tAmount, currentFee.sellLPFee, currentFee.sellMarketingFee, currentFee.sellReflectionFee);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rReflection) = _getRValues(tAmount, sellFees.tLP, sellFees.tMarketing, sellFees.tReflection, currentRate);\r\n        return (rAmount, rTransferAmount, rReflection, sellFees.tTransferAmount, sellFees.tLP, sellFees.tMarketing);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 LPFee, uint256 marketingFee, uint256 reflectionFee) private pure returns (uint256, uint256, uint256, uint256) {\r\n        uint256 tLP = tAmount.mul(LPFee).div(100);\r\n        uint256 tMarketing = tAmount.mul(marketingFee).div(100);\r\n        uint256 tReflection = tAmount.mul(reflectionFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tLP).sub(tMarketing);\r\n        tTransferAmount = tTransferAmount.sub(tReflection);\r\n        return (tTransferAmount, tLP, tMarketing, tReflection);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tLP, uint256 tMarketing, uint256 tReflection, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rLP = tLP.mul(currentRate);\r\n        uint256 rMarketing = tMarketing.mul(currentRate);\r\n        uint256 rReflection = tReflection.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rLP).sub(rMarketing).sub(rReflection);\r\n        return (rAmount, rTransferAmount, rReflection);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (_rOwned[_burnAddress] > rSupply || _tOwned[_burnAddress] > tSupply) return (_rTotal, _tTotal);\r\n        rSupply = rSupply.sub(_rOwned[_burnAddress]);\r\n        tSupply = tSupply.sub(_tOwned[_burnAddress]);\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function setIsExcludedFromFee(address account, bool toggle) external onlyOwner {\r\n        _isExcludedFromFee[account] = toggle;\r\n    }\r\n\r\n    function manageWreck(address account, bool isWreck) external onlyOwner {\r\n        wreck[account] = isWreck;\r\n    }\r\n\r\n    function setMaxBuyTxLimit(uint256 maxTxLimit) external onlyOwner {\r\n        _maxBuyTxAmount = maxTxLimit;\r\n    }\r\n\r\n    function updateSwapLimit(uint256 amount, uint256 maxAmount) external onlyOwner {\r\n        swapLimit = amount;\r\n        maxSwapLimit = maxAmount;\r\n    }    \r\n    \r\n    function setMaxSellTxLimit(uint256 maxTxLimit) external onlyOwner {\r\n        _maxSellTxAmount = maxTxLimit;\r\n    }\r\n\r\n    function setTaxes(uint256 buyMarketingFee, uint256 buyLPFee, uint256 buyReflectionFee, uint256 sellMarketingFee, uint256 sellLPFee, uint256 sellReflectionFee) external onlyOwner {\r\n        require(buyMarketingFee.add(buyLPFee).add(buyReflectionFee) < 50, \"Sum of sell fees must be less than 50\");\r\n        require(sellMarketingFee.add(sellLPFee).add(sellReflectionFee) < 50, \"Sum of buy fees must be less than 50\");\r\n        _buyMarketingFee = buyMarketingFee;\r\n        _buyLPFee = buyLPFee;\r\n        _buyReflectionFee = buyReflectionFee;\r\n        _sellMarketingFee = sellMarketingFee;\r\n        _sellLPFee = sellLPFee;\r\n        _sellReflectionFee = sellReflectionFee;\r\n    }\r\n    \r\n    function updateSwapLimit(uint256 amount) external onlyOwner {\r\n        swapLimit = amount;\r\n    }\r\n    \r\n    function updateSwap(bool _swapEnabled) external onlyOwner {\r\n        swapEnabled = _swapEnabled;\r\n    }\r\n    \r\n    function setFeeReceivers(address payable LPAddress, address payable marketingAddress) external onlyOwner {\r\n        _LPAddress = LPAddress;\r\n        _marketingAddress = marketingAddress;\r\n    }\r\n    \r\n    function transferOtherTokens(address addr, uint amount) external onlyOwner {\r\n        IERC20(addr).transfer(_msgSender(), amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perc\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWreck\",\"type\":\"bool\"}],\"name\":\"manageWreck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manuallyCollectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwapLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protectionBlocks\",\"type\":\"uint256\"}],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"LPAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"marketingAddress\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toggle\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxSellTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLPFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyReflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLPFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellReflectionFee\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferOtherTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perc\",\"type\":\"uint256\"}],\"name\":\"triggerSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protectionBlocks\",\"type\":\"uint256\"}],\"name\":\"updateProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"updateSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateSwapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DFC","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000046","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e00a85061cd08b96bf90a9f5445656582fe241a5d776cc82347557cdc6b18d73"}]}