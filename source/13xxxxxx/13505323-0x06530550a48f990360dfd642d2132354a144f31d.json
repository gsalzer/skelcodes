{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: Unlicense\r\npragma solidity =0.6.8;\r\n\r\nenum PairType {Common, LiquidityLocked, SweepableToken0, SweepableToken1}\r\n\r\ninterface IEmpirePair {\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function sweptAmount() external view returns (uint256);\r\n\r\n    function sweepableToken() external view returns (address);\r\n\r\n    function liquidityLocked() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(\r\n        address,\r\n        address,\r\n        PairType,\r\n        uint256\r\n    ) external;\r\n\r\n    function sweep(uint256 amount, bytes calldata data) external;\r\n\r\n    function unsweep(uint256 amount) external;\r\n\r\n    function getMaxSweepable() external view returns (uint256);\r\n}\r\ninterface IEmpireFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB,\r\n        PairType pairType,\r\n        uint256 unlockTime\r\n    ) external returns (address pair);\r\n\r\n    function createEmpirePair(\r\n        address tokenA,\r\n        address tokenB,\r\n        PairType pairType,\r\n        uint256 unlockTime\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IEmpireCallee {\r\n    function empireCall(\r\n        address sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function empireSweepCall(uint256 amountSwept, bytes calldata data) external;\r\n}\r\nlibrary UQ112x112 {\r\n    uint224 private constant Q112 = 2**112;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 y) internal pure returns (uint224 z) {\r\n        z = uint224(y) * Q112; // never overflows\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\r\n        z = x / uint224(y);\r\n    }\r\n}\r\ninterface IEmpireERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\nlibrary EmpireMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\ncontract EmpireERC20 is IEmpireERC20 {\r\n    using EmpireMath for uint256;\r\n\r\n    string public constant override name = \"Empire LP\";\r\n    string public constant override symbol = \"EMP-LP\";\r\n    uint8 public constant override decimals = 18;\r\n    uint256 public override totalSupply;\r\n    mapping(address => uint256) public override balanceOf;\r\n    mapping(address => mapping(address => uint256)) public override allowance;\r\n\r\n    uint256 private immutable CACHED_CHAIN_ID;\r\n    bytes32 private immutable CACHED_DOMAIN_SEPARATOR;\r\n    bytes32 private constant EIP712_DOMAIN =\r\n        keccak256(\r\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n        );\r\n    bytes32 private constant PERMIT_TYPEHASH =\r\n        keccak256(\r\n            \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\r\n        );\r\n    mapping(address => uint256) public override nonces;\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    constructor() public {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        CACHED_CHAIN_ID = chainId;\r\n        CACHED_DOMAIN_SEPARATOR = _computeSeparator(chainId);\r\n    }\r\n\r\n    function _mint(address to, uint256 value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint256 value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 value\r\n    ) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external override returns (bool) {\r\n        if (allowance[from][msg.sender] != uint256(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(\r\n                value\r\n            );\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _computeSeparator(uint256 chainId)\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    EIP712_DOMAIN,\r\n                    keccak256(bytes(name)),\r\n                    keccak256(bytes(\"1\")),\r\n                    chainId,\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n    function _getDigest(bytes32 payload) internal view returns (bytes32) {\r\n        uint256 chainId;\r\n\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n\r\n        bytes32 domainSeparator =\r\n            chainId != CACHED_CHAIN_ID\r\n                ? _computeSeparator(chainId)\r\n                : CACHED_DOMAIN_SEPARATOR;\r\n\r\n        return\r\n            keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, payload));\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external override {\r\n        require(deadline >= block.timestamp, \"Empire: EXPIRED\");\r\n        bytes32 digest =\r\n            _getDigest(\r\n                keccak256(\r\n                    abi.encode(\r\n                        PERMIT_TYPEHASH,\r\n                        owner,\r\n                        spender,\r\n                        value,\r\n                        nonces[owner]++,\r\n                        deadline\r\n                    )\r\n                )\r\n            );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(\r\n            recoveredAddress != address(0) && recoveredAddress == owner,\r\n            \"Empire: INVALID_SIGNATURE\"\r\n        );\r\n        _approve(owner, spender, value);\r\n    }\r\n}\r\ncontract EmpirePair is IEmpirePair, EmpireERC20 {\r\n    using UQ112x112 for uint224;\r\n\r\n    uint256 private constant MINIMUM_LIQUIDITY = 10**3;\r\n    bytes4 private constant TRANSFER_SELECTOR =\r\n        bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\r\n    bytes4 private constant TRANSFER_FROM_SELECTOR =\r\n        bytes4(keccak256(bytes(\"transferFrom(address,address,uint256)\")));\r\n\r\n    address public immutable override factory;\r\n    address public override token0;\r\n    address public override token1;\r\n\r\n    uint112 private override reserve0; // uses single storage slot, accessible via getReserves\r\n    uint112 private override reserve1; // uses single storage slot, accessible via getReserves\r\n    uint32 private override blockTimestampLast; // uses single storage slot, accessible via getReserves\r\n\r\n    uint256 public override price0CumulativeLast;\r\n    uint256 public override price1CumulativeLast;\r\n    uint256 public override kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\r\n\r\n    uint256 public override liquidityLocked; // By default, liquidity is not locked (timestamp is 0)\r\n    address public override sweepableToken; // By default, no token is sweepable\r\n    uint256 public override sweptAmount; // Tracks how many tokens were swept based on the floor price\r\n    PairType public empirePairType; // Tracks pair type\r\n    uint256 public empireLockTime; // Tracks lock time\r\n\r\n    uint256 private unlocked = 1;\r\n\r\n    modifier lock() {\r\n        require(unlocked == 1, \"Empire: LOCKED\");\r\n        unlocked = 2;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    function getReserves()\r\n        public\r\n        view\r\n        override\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint32 _blockTimestampLast\r\n        )\r\n    {\r\n        _reserve0 = reserve0;\r\n        _reserve1 = reserve1;\r\n        _blockTimestampLast = blockTimestampLast;\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        _safeCall(token, abi.encodeWithSelector(TRANSFER_SELECTOR, to, value));\r\n    }\r\n\r\n    function _safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        _safeCall(\r\n            token,\r\n            abi.encodeWithSelector(TRANSFER_FROM_SELECTOR, from, to, value)\r\n        );\r\n    }\r\n\r\n    function _safeCall(address token, bytes memory payload) private {\r\n        (bool success, bytes memory data) = token.call(payload);\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"Empire: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    event Swept(uint256 amount);\r\n    event Unswept(uint256 amount);\r\n\r\n    constructor() public {\r\n        factory = msg.sender;\r\n    }\r\n\r\n    // called once by the factory at time of deployment\r\n    function initialize(\r\n        address _token0,\r\n        address _token1,\r\n        PairType pairType,\r\n        uint256 unlockTime\r\n    ) external override {\r\n        require(msg.sender == factory, \"Empire: FORBIDDEN\"); // sufficient check\r\n        token0 = _token0;\r\n        token1 = _token1;\r\n\r\n        if (pairType != PairType.Common) {\r\n            liquidityLocked = unlockTime;\r\n            empirePairType = pairType;\r\n\r\n            if (pairType == PairType.SweepableToken0) {\r\n                sweepableToken = _token0;\r\n            } else if (pairType == PairType.SweepableToken1) {\r\n                sweepableToken = _token1;\r\n            }\r\n        }\r\n\r\n        empireLockTime = unlockTime;\r\n    }\r\n\r\n    // update reserves and, on the first call per block, price accumulators\r\n    function _update(\r\n        uint256 balance0,\r\n        uint256 balance1,\r\n        uint112 _reserve0,\r\n        uint112 _reserve1\r\n    ) private {\r\n        require(\r\n            balance0 <= uint112(-1) && balance1 <= uint112(-1),\r\n            \"Empire: OVERFLOW\"\r\n        );\r\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\r\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\r\n            // * never overflows, and + overflow is desired\r\n            price0CumulativeLast +=\r\n                uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\r\n                timeElapsed;\r\n            price1CumulativeLast +=\r\n                uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\r\n                timeElapsed;\r\n        }\r\n        reserve0 = uint112(balance0);\r\n        reserve1 = uint112(balance1);\r\n        blockTimestampLast = blockTimestamp;\r\n        emit Sync(reserve0, reserve1);\r\n    }\r\n\r\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\r\n    function _mintFee(uint112 _reserve0, uint112 _reserve1)\r\n        private\r\n        returns (bool feeOn)\r\n    {\r\n        address feeTo = IEmpireFactory(factory).feeTo();\r\n        feeOn = feeTo != address(0);\r\n        uint256 _kLast = kLast; // gas savings\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = uint256(_reserve0).mul(_reserve1).sqrt();\r\n                uint256 rootKLast = _kLast.sqrt();\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));\r\n                    uint256 denominator = rootK.mul(5).add(rootKLast);\r\n                    uint256 liquidity = numerator / denominator;\r\n                    if (liquidity > 0) _mint(feeTo, liquidity);\r\n                }\r\n            }\r\n        } else if (_kLast != 0) {\r\n            kLast = 0;\r\n        }\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function mint(address to)\r\n        external\r\n        override\r\n        lock\r\n        returns (uint256 liquidity)\r\n    {\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        uint256 balance0 = _balanceOfSelf(token0);\r\n        uint256 balance1 = _balanceOfSelf(token1);\r\n        uint256 amount0 = balance0.sub(_reserve0);\r\n        uint256 amount1 = balance1.sub(_reserve1);\r\n\r\n        bool feeOn = _mintFee(_reserve0, _reserve1);\r\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        if (_totalSupply == 0) {\r\n            liquidity = amount0.mul(amount1).sqrt().sub(MINIMUM_LIQUIDITY);\r\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\r\n        } else {\r\n            liquidity = (amount0.mul(_totalSupply) / _reserve0).min(\r\n                amount1.mul(_totalSupply) / _reserve1\r\n            );\r\n        }\r\n        require(liquidity > 0, \"Empire: INSUFFICIENT_LIQUIDITY_MINTED\");\r\n        _mint(to, liquidity);\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\r\n        emit Mint(msg.sender, amount0, amount1);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function burn(address to)\r\n        external\r\n        override\r\n        lock\r\n        returns (uint256 amount0, uint256 amount1)\r\n    {\r\n        require(block.timestamp >= liquidityLocked, \"Empire: LIQUIDITY_LOCKED\");\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        address _token0 = token0; // gas savings\r\n        address _token1 = token1; // gas savings\r\n        uint256 balance0 = _balanceOfSelf(_token0);\r\n        uint256 balance1 = _balanceOfSelf(_token1);\r\n        uint256 liquidity = balanceOf[address(this)];\r\n\r\n        bool feeOn = _mintFee(_reserve0, _reserve1);\r\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\r\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\r\n        require(\r\n            amount0 > 0 && amount1 > 0,\r\n            \"Empire: INSUFFICIENT_LIQUIDITY_BURNED\"\r\n        );\r\n        _burn(address(this), liquidity);\r\n        _safeTransfer(_token0, to, amount0);\r\n        _safeTransfer(_token1, to, amount1);\r\n        balance0 = _balanceOfSelf(_token0);\r\n        balance1 = _balanceOfSelf(_token1);\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\r\n        emit Burn(msg.sender, amount0, amount1, to);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external override lock {\r\n        require(\r\n            amount0Out > 0 || amount1Out > 0,\r\n            \"Empire: INSUFFICIENT_OUTPUT_AMOUNT\"\r\n        );\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        require(\r\n            amount0Out < _reserve0 && amount1Out < _reserve1,\r\n            \"Empire: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n\r\n        uint256 balance0;\r\n        uint256 balance1;\r\n        {\r\n            // scope for _token{0,1}, avoids stack too deep errors\r\n            address _token0 = token0;\r\n            address _token1 = token1;\r\n            require(to != _token0 && to != _token1, \"Empire: INVALID_TO\");\r\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\r\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\r\n            if (data.length > 0)\r\n                IEmpireCallee(to).empireCall(\r\n                    msg.sender,\r\n                    amount0Out,\r\n                    amount1Out,\r\n                    data\r\n                );\r\n            balance0 = _balanceOfSelf(_token0);\r\n            balance1 = _balanceOfSelf(_token1);\r\n        }\r\n        uint256 amount0In =\r\n            balance0 > _reserve0 - amount0Out\r\n                ? balance0 - (_reserve0 - amount0Out)\r\n                : 0;\r\n        uint256 amount1In =\r\n            balance1 > _reserve1 - amount1Out\r\n                ? balance1 - (_reserve1 - amount1Out)\r\n                : 0;\r\n        require(\r\n            amount0In > 0 || amount1In > 0,\r\n            \"Empire: INSUFFICIENT_INPUT_AMOUNT\"\r\n        );\r\n        {\r\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\r\n            uint256 balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\r\n            uint256 balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\r\n            require(\r\n                balance0Adjusted.mul(balance1Adjusted) >=\r\n                    uint256(_reserve0).mul(_reserve1).mul(1000**2),\r\n                \"Empire: K\"\r\n            );\r\n        }\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\r\n    }\r\n\r\n    // force balances to match reserves\r\n    function skim(address to) external override lock {\r\n        address _token0 = token0; // gas savings\r\n        address _token1 = token1; // gas savings\r\n        _safeTransfer(_token0, to, _balanceOfSelf(_token0).sub(reserve0));\r\n        _safeTransfer(_token1, to, _balanceOfSelf(_token1).sub(reserve1));\r\n    }\r\n\r\n    // force reserves to match balances\r\n    function sync() external override lock {\r\n        _update(\r\n            _balanceOfSelf(token0),\r\n            _balanceOfSelf(token1),\r\n            reserve0,\r\n            reserve1\r\n        );\r\n    }\r\n\r\n    // wrapper ensuring sweeps are accounted for\r\n    function _balanceOfSelf(address token)\r\n        internal\r\n        view\r\n        returns (uint256 balance)\r\n    {\r\n        if (token == sweepableToken) {\r\n            balance = sweptAmount;\r\n        }\r\n        return balance.add(IERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    // allow sweeping if enabled\r\n    function sweep(uint256 amount, bytes calldata data) external override lock {\r\n        address _token0 = token0;\r\n        address _token1 = token1;\r\n        uint256 _reserveSwept;\r\n        uint256 _reserveSweeper;\r\n        if (msg.sender == _token0) {\r\n            require(sweepableToken == _token1, \"Empire: INCORRECT_CALLER\");\r\n            _reserveSwept = reserve1;\r\n            _reserveSweeper = reserve0;\r\n        } else {\r\n            require(\r\n                msg.sender == _token1 && sweepableToken == _token0,\r\n                \"Empire: INCORRECT_CALLER\"\r\n            );\r\n            _reserveSwept = reserve0;\r\n            _reserveSweeper = reserve1;\r\n        }\r\n\r\n        // Calculate necessary sweepable token amount for pool to contain full token supply\r\n        uint256 amountIn = IERC20(msg.sender).totalSupply() - _reserveSweeper;\r\n        uint256 numerator = amountIn.mul(_reserveSwept);\r\n        uint256 denominator = _reserveSweeper.mul(1000).add(amountIn);\r\n        uint256 amountOut = numerator / denominator;\r\n        uint256 maxSweepable = _reserveSwept - amountOut;\r\n\r\n        uint256 _sweptAmount = sweptAmount.add(amount);\r\n\r\n        require(_sweptAmount <= maxSweepable, \"Empire: INCORRECT_SWEEP_AMOUNT\");\r\n\r\n        sweptAmount = _sweptAmount;\r\n\r\n        _safeTransfer(sweepableToken, msg.sender, amount);\r\n\r\n        IEmpireCallee(msg.sender).empireSweepCall(amount, data);\r\n\r\n        emit Swept(amount);\r\n    }\r\n\r\n    function unsweep(uint256 amount) external override lock {\r\n        address _token0 = token0;\r\n        address _token1 = token1;\r\n        if (msg.sender == _token0) {\r\n            require(sweepableToken == _token1, \"Empire: INCORRECT_CALLER\");\r\n        } else {\r\n            require(\r\n                msg.sender == _token1 && sweepableToken == _token0,\r\n                \"Empire: INCORRECT_CALLER\"\r\n            );\r\n        }\r\n\r\n        _safeTransferFrom(sweepableToken, msg.sender, address(this), amount);\r\n        sweptAmount = sweptAmount.sub(amount);\r\n\r\n        emit Unswept(amount);\r\n    }\r\n\r\n    function getMaxSweepable() external view override returns (uint256) {\r\n        address _token0 = token0;\r\n        address _token1 = token1;\r\n        address _sweeper;\r\n        uint256 _reserveIn;\r\n        uint256 _reserveOut;\r\n        if (sweepableToken == _token0) {\r\n            _sweeper = _token1;\r\n            _reserveIn = reserve1;\r\n            _reserveOut = reserve0;\r\n        } else {\r\n            require(sweepableToken == token1, \"Empire: NON_SWEEPABLE_POOL\");\r\n            _sweeper = _token0;\r\n            _reserveIn = reserve0;\r\n            _reserveOut = reserve1;\r\n        }\r\n\r\n        uint256 amountIn = IERC20(_sweeper).totalSupply() - _reserveIn;\r\n        uint256 amountOut = getAmountOut(amountIn, _reserveIn, _reserveOut);\r\n        return _reserveOut - amountOut;\r\n    }\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountOut) {\r\n        if (amountIn == 0) return 0;\r\n\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        uint256 numerator = amountInWithFee.mul(reserveOut);\r\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n}\r\n\r\ncontract EmpireFactory is IEmpireFactory {\r\n    address public override feeTo;\r\n    address public override feeToSetter;\r\n\r\n    mapping(address => mapping(address => address)) public override getPair;\r\n    address[] public override allPairs;\r\n\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    constructor(address _feeToSetter) public {\r\n        feeToSetter = _feeToSetter;\r\n    }\r\n\r\n    function allPairsLength() external view override returns (uint256) {\r\n        return allPairs.length;\r\n    }\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB,\r\n        PairType pairType,\r\n        uint256 unlockTime\r\n    ) public override returns (address pair) {\r\n        require(tokenA != tokenB, \"Empire: IDENTICAL_ADDRESSES\");\r\n        (address token0, address token1) =\r\n            tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), \"Empire: ZERO_ADDRESS\");\r\n        require(getPair[token0][token1] == address(0), \"Empire: PAIR_EXISTS\"); // single check is sufficient\r\n        bytes memory bytecode = type(EmpirePair).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\r\n        assembly {\r\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n\r\n        if (pairType != PairType.Common) {\r\n            require(msg.sender == token0 || msg.sender == token1, \"EmpireFactory::createPair: Insufficient Privileges\");\r\n            if (pairType == PairType.SweepableToken0 || pairType == PairType.SweepableToken1) unlockTime = ~uint256(0);\r\n        }\r\n\r\n        IEmpirePair(pair).initialize(token0, token1, pairType, unlockTime);\r\n        getPair[token0][token1] = pair;\r\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\r\n        allPairs.push(pair);\r\n        emit PairCreated(token0, token1, pair, allPairs.length);\r\n    }\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        override\r\n        returns (address pair)\r\n    {\r\n        return createPair(tokenA, tokenB, PairType.Common, 0);\r\n    }\r\n\r\n    function createEmpirePair(address tokenA, address tokenB, PairType pairType, uint256 unlockTime)\r\n        external\r\n        override\r\n        returns (address pair)\r\n    {\r\n        return createPair(tokenA, tokenB, pairType, unlockTime);\r\n    }\r\n\r\n    function setFeeTo(address _feeTo) external override {\r\n        require(msg.sender == feeToSetter, \"Empire: FORBIDDEN\");\r\n        feeTo = _feeTo;\r\n    }\r\n\r\n    function setFeeToSetter(address _feeToSetter) external override {\r\n        require(msg.sender == feeToSetter, \"Empire: FORBIDDEN\");\r\n        feeToSetter = _feeToSetter;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"enum PairType\",\"name\":\"pairType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"createEmpirePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"enum PairType\",\"name\":\"pairType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EmpireFactory","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005abbd94bb0561938130d83fda22e672110e12528","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a26dffdd6634b34889557bf86b4cb6835a5ef5e764c6d9b2b645702da63d3632"}]}