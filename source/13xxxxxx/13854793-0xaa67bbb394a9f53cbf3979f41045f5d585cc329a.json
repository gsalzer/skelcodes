{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Maintainer/v0/MaintainerV0.sol\": {\r\n      \"content\": \"/**\\n * Submitted for verification at Etherscan.io on 2021-12-23\\n */\\n\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../../InitializableUpgrades.sol\\\";\\nimport \\\"./ToonTokenMaintainerAccess.sol\\\";\\n\\ncontract MaintainerV0 is\\n    OwnableUpgradeable,\\n    InitializableUpgrades,\\n    ToonTokenMaintainerAccess\\n{\\n    function upgrade(address newImplementation) external onlyOwner {\\n        _upgradeTo(newImplementation);\\n    }\\n\\n    function initialize()\\n        external\\n        virtual\\n        override\\n        initializer\\n        implementationInitializer\\n    {\\n        __Ownable_init();\\n    }\\n\\n    function onlyAuthorized() public virtual override returns (bool) {\\n        return owner() == _msgSender();\\n    }\\n}\\n\\n// Copyright 2021 ToonCoin.COM\\n// http://tooncoin.com/license\\n// Full source code: http://tooncoin.com/sourcecode\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/InitializableUpgrades.sol\": {\r\n      \"content\": \"/**\\n * Submitted for verification at Etherscan.io on 2021-12-23\\n */\\n\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"./EIP1967/EIP1967Reader.sol\\\";\\nimport \\\"./EIP1967/EIP1967Writer.sol\\\";\\n\\nabstract contract InitializableUpgrades is EIP1967Reader, EIP1967Writer {\\n    address private _implementationInitialized;\\n\\n    modifier implementationInitializer() {\\n        require(\\n            _implementationInitialized != implementation(),\\n            \\\"already upgraded\\\"\\n        );\\n\\n        _;\\n\\n        _implementationInitialized = implementation();\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function initialize() external virtual implementationInitializer {}\\n\\n    function implementation() public view returns (address) {\\n        return _implementationAddress();\\n    }\\n\\n    // solhint-disable-next-line ordering\\n    uint256[49] private __gap;\\n}\\n\\n// Copyright 2021 ToonCoin.COM\\n// http://tooncoin.com/license\\n// Full source code: http://tooncoin.com/sourcecode\\n\"\r\n    },\r\n    \"contracts/Maintainer/v0/ToonTokenMaintainerAccess.sol\": {\r\n      \"content\": \"/**\\n * Submitted for verification at Etherscan.io on 2021-12-23\\n */\\n\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../v0Extended/ToonTokenV0Extended.sol\\\";\\n\\nabstract contract ToonTokenMaintainerAccess {\\n    address payable private _toonTokenContractAddress;\\n\\n    modifier maintainerAuthorized() {\\n        require(onlyAuthorized(), \\\"you shall not pass\\\");\\n\\n        _;\\n    }\\n\\n    function setToonTokenContractAddress(\\n        address payable nextToonTokenContractAddress\\n    ) external maintainerAuthorized {\\n        _toonTokenContractAddress = nextToonTokenContractAddress;\\n    }\\n\\n    function setWallets(address nextMaintainerWallet, address nextBountyWallet)\\n        external\\n        maintainerAuthorized\\n    {\\n        ToonTokenV0Extended(_toonTokenContractAddress).setWallets(\\n            nextMaintainerWallet,\\n            nextBountyWallet\\n        );\\n    }\\n\\n    function setBountyObligationReferencePrice(uint256 referencePrice)\\n        external\\n        maintainerAuthorized\\n    {\\n        ToonTokenV0Extended(_toonTokenContractAddress)\\n            .setBountyObligationReferencePrice(referencePrice);\\n    }\\n\\n    function proposeDistribution(\\n        address payable nextProposedDistributionAddress,\\n        uint256 nextProposedDistributionAmount\\n    ) external maintainerAuthorized {\\n        ToonTokenV0Extended(_toonTokenContractAddress).proposeDistribution(\\n            nextProposedDistributionAddress,\\n            nextProposedDistributionAmount\\n        );\\n    }\\n\\n    function proposeUpgrade(address nextProposedUpgradeImpl)\\n        external\\n        maintainerAuthorized\\n    {\\n        ToonTokenV0Extended(_toonTokenContractAddress).proposeUpgrade(\\n            nextProposedUpgradeImpl\\n        );\\n    }\\n\\n    function holdElectionsAndUpdate() external maintainerAuthorized {\\n        ToonTokenV0Extended(_toonTokenContractAddress).holdElectionsAndUpdate();\\n    }\\n\\n    function confirmConsensusAndUpdate(\\n        address winningCandidate,\\n        address[] memory voters,\\n        address[] memory abstainedVoters\\n    ) external {\\n        ToonTokenV0Extended(_toonTokenContractAddress)\\n            .confirmConsensusAndUpdate(\\n                winningCandidate,\\n                voters,\\n                abstainedVoters\\n            );\\n    }\\n\\n    function onlyAuthorized() public virtual returns (bool);\\n\\n    function getToonTokenContractAddress()\\n        public\\n        view\\n        returns (address payable)\\n    {\\n        return _toonTokenContractAddress;\\n    }\\n\\n    // solhint-disable-next-line ordering\\n    uint256[49] private __gap;\\n}\\n\\n// Copyright 2021 ToonCoin.COM\\n// http://tooncoin.com/license\\n// Full source code: http://tooncoin.com/sourcecode\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/EIP1967/EIP1967Reader.sol\": {\r\n      \"content\": \"/**\\n * Submitted for verification at Etherscan.io on 2021-12-23\\n */\\n\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nabstract contract EIP1967Reader {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1);\\n\\n    bytes4 internal constant _INITIALIZE_CALL =\\n        bytes4(keccak256(\\\"initialize()\\\"));\\n\\n    function _implementationAddress() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n}\\n\\n// Copyright 2021 ToonCoin.COM\\n// http://tooncoin.com/license\\n// Full source code: http://tooncoin.com/sourcecode\\n\"\r\n    },\r\n    \"contracts/EIP1967/EIP1967Writer.sol\": {\r\n      \"content\": \"/**\\n * Submitted for verification at Etherscan.io on 2021-12-23\\n */\\n\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\nimport \\\"./EIP1967Reader.sol\\\";\\n\\nabstract contract EIP1967Writer is EIP1967Reader {\\n    event Upgraded(address implementation);\\n\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        _initializeImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    function _setImplementation(address newImplementation) private {\\n        require(\\n            Address.isContract(newImplementation),\\n            \\\"implementation is not a contract\\\"\\n        );\\n        StorageSlot\\n            .getAddressSlot(_IMPLEMENTATION_SLOT)\\n            .value = newImplementation;\\n    }\\n\\n    function _initializeImplementation(address newImplementation) private {\\n        bytes memory data = abi.encodePacked(_INITIALIZE_CALL);\\n        Address.functionDelegateCall(newImplementation, data);\\n    }\\n}\\n\\n// Copyright 2021 ToonCoin.COM\\n// http://tooncoin.com/license\\n// Full source code: http://tooncoin.com/sourcecode\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v0Extended/ToonTokenV0Extended.sol\": {\r\n      \"content\": \"/**\\n * Submitted for verification at Etherscan.io on 2021-12-23\\n */\\n\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../v0/ToonTokenV0.sol\\\";\\nimport \\\"./Obligations.sol\\\";\\n\\ncontract ToonTokenV0Extended is ToonTokenV0, Obligations {\\n    uint256 private constant _UNMINTED_RESERVE_LIMIT = 10000 * 10**18;\\n\\n    uint256 public maintainerBonusReserve;\\n\\n\\n    uint256 public bountyBonusReserve;\\n\\n    uint256 public bountyObligationReferencePrice;\\n\\n    event BountyObligationReferencePriceUpdated(uint256 referencePrice);\\n\\n    function setBountyObligationReferencePrice(uint256 referencePrice)\\n        external\\n        onlyMaintainer\\n    {\\n        require(\\n            referencePrice > (currentPricePerToken * 2),\\n            \\\"twice the current price\\\"\\n        );\\n        bountyObligationReferencePrice = referencePrice;\\n\\n        emit BountyObligationReferencePriceUpdated(referencePrice);\\n    }\\n\\n    function lockTokens(\\n        uint256 amount,\\n        address recipient,\\n        uint256 releaseTime,\\n        uint256 targetPrice\\n    ) external {\\n        _createObligation(\\n            _msgSender(),\\n            amount,\\n            recipient,\\n            releaseTime,\\n            targetPrice\\n        );\\n    }\\n\\n    function mintAndLockMaintainerBonusReserves() public {\\n        _mint(maintainerWallet, maintainerBonusReserve);\\n        _createObligation(\\n            maintainerWallet,\\n            maintainerBonusReserve,\\n            maintainerWallet,\\n            block.timestamp + 365 days,\\n            currentPricePerToken * 2\\n        );\\n        maintainerBonusReserve = 0;\\n    }\\n\\n    function mintAndLockBountyBonusReserves() public {\\n        _mint(bountyWallet, bountyBonusReserve);\\n\\n        uint256 targetPrice = currentPricePerToken * 2;\\n        if (currentPricePerToken < bountyObligationReferencePrice) {\\n            targetPrice = Math.min(bountyObligationReferencePrice, targetPrice);\\n        }\\n\\n        _createObligation(\\n            bountyWallet,\\n            bountyBonusReserve,\\n            bountyWallet,\\n            block.timestamp + 36500 days,\\n            targetPrice\\n        );\\n        bountyBonusReserve = 0;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return\\n            super.totalSupply() + maintainerBonusReserve + bountyBonusReserve;\\n    }\\n\\n    function _transferTokens(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        _transfer(sender, recipient, amount);\\n    }\\n\\n    function _mintMaintainerBonus(uint256 maintainerBonusTokensAmount)\\n        internal\\n        virtual\\n        override\\n    {\\n        maintainerBonusReserve += maintainerBonusTokensAmount;\\n\\n        if (maintainerBonusReserve > _UNMINTED_RESERVE_LIMIT) {\\n            mintAndLockMaintainerBonusReserves();\\n        }\\n    }\\n\\n    function _mintBountyBonus(uint256 bountyBonusTokensAmount)\\n        internal\\n        virtual\\n        override\\n    {\\n        bountyBonusReserve += bountyBonusTokensAmount;\\n\\n        if (bountyBonusReserve > _UNMINTED_RESERVE_LIMIT) {\\n            mintAndLockBountyBonusReserves();\\n        }\\n    }\\n\\n    function _currentPricePerToken()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return currentPricePerToken;\\n    }\\n\\n    // solhint-disable-next-line ordering\\n    uint256[47] private __gap;\\n}\\n\\n// Copyright 2021 ToonCoin.COM\\n// http://tooncoin.com/license\\n// Full source code: http://tooncoin.com/sourcecode\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v0/ToonTokenV0.sol\": {\r\n      \"content\": \"/**\\n * Submitted for verification at Etherscan.io on 2021-12-23\\n */\\n\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport \\\"./libraries/Calculator.sol\\\";\\nimport \\\"./libraries/Elections.sol\\\";\\nimport \\\"./libraries/ElectionsPrincipal.sol\\\";\\nimport \\\"./libraries/Proposals.sol\\\";\\n\\nimport \\\"../InitializableUpgrades.sol\\\";\\n\\nimport \\\"./LUTs.sol\\\";\\nimport \\\"./Voting.sol\\\";\\nimport \\\"./ChainlinkETHUSD.sol\\\";\\n\\n// solhint-disable ordering\\nabstract contract ToonTokenV0 is\\n    ERC20Upgradeable,\\n    InitializableUpgrades,\\n    LUTs,\\n    Voting,\\n    ChainlinkETHUSD,\\n    ElectionsPrincipal\\n{\\n    uint256 public currentPricePerToken;\\n\\n    bool public consensus;\\n\\n    address public maintainer;\\n\\n    address public maintainerWallet;\\n\\n    address public bountyWallet;\\n\\n    address payable public proposedDistributionAddress;\\n\\n    uint256 public proposedDistributionAmount;\\n\\n    uint256 public distributionProposedAt;\\n\\n    address public proposedUpgradeImpl;\\n\\n    uint256 public upgradeProposedAt;\\n\\n    string private _overriddenName;\\n\\n    event ConsensusChanged(bool newValue);\\n\\n    event MaintainerChanged(address newValue);\\n\\n    event MaintainerBonusWalletChanged(address nextMaintainerWallet);\\n\\n    event BountyBonusWalletChanged(address nextBountyWallet);\\n\\n    event DistributionProposed(\\n        address payable nextProposedDistributionAddress,\\n        uint256 nextProposedDistributionAmount\\n    );\\n\\n    event UpgradeProposed(address nextProposedUpgradeImpl);\\n\\n    event ProposedDistributionExecuted(uint256 amount, address recipient);\\n\\n    event ProposedUpgradeExecuted(address newImplementation);\\n\\n    function _onlyMaintainer() private view {\\n        require(_msgSender() == maintainer, \\\"only maintainer\\\");\\n    }\\n\\n    modifier onlyMaintainer() {\\n        _onlyMaintainer();\\n        _;\\n    }\\n\\n    function _hasConsensus() private view {\\n        require(consensus == true, \\\"community must reach consensus\\\");\\n    }\\n\\n    modifier hasConsensus() {\\n        _hasConsensus();\\n        _;\\n    }\\n\\n    function initialize()\\n        external\\n        virtual\\n        override\\n        initializer\\n        implementationInitializer\\n    {\\n        __ToonTokenV0_init();\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ToonTokenV0_init()\\n        internal\\n        initializer\\n        implementationInitializer\\n    {\\n        __ERC20_init(\\\"Toon Token (ToonCoin)\\\", \\\"TOON\\\");\\n        __ToonTokenV0_init_unchained();\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __ToonTokenV0_init_unchained()\\n        internal\\n        initializer\\n        implementationInitializer\\n    {\\n        consensus = true;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        if (bytes(_overriddenName).length == 0) return super.name();\\n        return _overriddenName;\\n    }\\n\\n    function overrideName(string memory overriddenName_) external {\\n        require(\\n            address(0) == maintainer || _msgSender() == maintainer,\\n            \\\"not authorized\\\"\\n        );\\n        _overriddenName = overriddenName_;\\n    }\\n\\n    function vote(address candidate) external {\\n        require(votesOf(_msgSender()) > 0, \\\"voting for tokenholders\\\");\\n\\n        _vote(_msgSender(), candidate);\\n    }\\n\\n    function candidateOf(address voter) public view override returns (address) {\\n        return _votersDecisions[voter];\\n    }\\n\\n    function holdElectionsAndUpdate() external {\\n        (\\n            address winningCandidate,\\n            uint256 winningCandidateVotes,\\n            uint256 runnerUpCandidateVotes,\\n            uint256 totalVotes\\n        ) = Elections.findTop2(_voters, ElectionsPrincipal(this));\\n\\n        bool newConsensus = Elections.calcConsensus(\\n            winningCandidateVotes,\\n            totalVotes\\n        );\\n\\n        if (false == consensus && true == newConsensus) {\\n            require(\\n                msg.sender == winningCandidate,\\n                \\\"only a winner can allow consensus to be restored\\\"\\n            );\\n        }\\n\\n        _finishElections(\\n            newConsensus,\\n            winningCandidate,\\n            runnerUpCandidateVotes,\\n            totalVotes\\n        );\\n    }\\n\\n    function confirmConsensusAndUpdate(\\n        address winningCandidate,\\n        address[] memory voters,\\n        address[] memory abstainedVoters\\n    ) external {\\n        uint256 winningCandidateVotes = Elections.sumVotesFor(\\n            winningCandidate,\\n            voters,\\n            ElectionsPrincipal(this)\\n        );\\n\\n        uint256 abstainedVotes = Elections.sumVotesFor(\\n            address(0),\\n            abstainedVoters,\\n            ElectionsPrincipal(this)\\n        );\\n\\n        uint256 totalVotes = totalSupply() - abstainedVotes;\\n\\n        if (Elections.calcConsensus(winningCandidateVotes, totalVotes)) {\\n            if (false == consensus) {\\n                require(\\n                    msg.sender == winningCandidate,\\n                    \\\"only a winner can allow consensus to be restored\\\"\\n                );\\n            }\\n\\n            uint256 runnerUpCandidateVotes = totalVotes - winningCandidateVotes;\\n            _finishElections(\\n                true,\\n                winningCandidate,\\n                runnerUpCandidateVotes,\\n                totalVotes\\n            );\\n        }\\n    }\\n\\n    function breakConsensus(\\n        address[] memory alternativeCandidateVoters,\\n        address[] memory abstainedVoters\\n    ) external hasConsensus {\\n        uint256 votes = Elections.sumVotesExceptZeroAnd(\\n            maintainer,\\n            alternativeCandidateVoters,\\n            ElectionsPrincipal(this)\\n        );\\n\\n        uint256 abstainedVotes = Elections.sumVotesFor(\\n            address(0),\\n            abstainedVoters,\\n            ElectionsPrincipal(this)\\n        );\\n\\n        uint256 totalVotes = totalSupply() - abstainedVotes;\\n        uint256 maintainerVotes = totalVotes - votes;\\n\\n        if (!Elections.calcConsensus(maintainerVotes, totalVotes)) {\\n            _finishElections(false, maintainer, votes, totalVotes);\\n        }\\n    }\\n\\n    function _finishElections(\\n        bool newConsensus,\\n        address winningCandidate,\\n        uint256 runnerUpCandidateVotes,\\n        uint256 totalVotes\\n    ) private {\\n        if (consensus != newConsensus) {\\n            consensus = newConsensus;\\n            emit ConsensusChanged(newConsensus);\\n        }\\n\\n        if (maintainer != winningCandidate) {\\n            _dropProposals();\\n            maintainer = winningCandidate;\\n            emit MaintainerChanged(winningCandidate);\\n        }\\n\\n        if (consensus) {\\n            _performProposedDistribution(runnerUpCandidateVotes, totalVotes);\\n            _performProposedUpgrade(runnerUpCandidateVotes, totalVotes);\\n        }\\n    }\\n\\n    function _performProposedDistribution(\\n        uint256 runnerUpCandidateVotes,\\n        uint256 totalVotes\\n    ) private {\\n        if (\\n            consensus &&\\n            proposedDistributionAddress != address(0) &&\\n            Proposals.isExecutionAllowed(\\n                distributionProposedAt,\\n                runnerUpCandidateVotes,\\n                totalVotes\\n            )\\n        ) {\\n            address payable recipient = proposedDistributionAddress;\\n            uint256 amount = proposedDistributionAmount;\\n\\n            proposedDistributionAddress = payable(0);\\n            proposedDistributionAmount = 0;\\n\\n            (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n            require(success, \\\"proposed distribution failed\\\");\\n\\n            emit ProposedDistributionExecuted(amount, recipient);\\n        }\\n    }\\n\\n    function _performProposedUpgrade(\\n        uint256 runnerUpCandidateVotes,\\n        uint256 totalVotes\\n    ) private {\\n        if (\\n            consensus &&\\n            proposedUpgradeImpl != address(0) &&\\n            Proposals.isExecutionAllowed(\\n                upgradeProposedAt,\\n                runnerUpCandidateVotes,\\n                totalVotes\\n            )\\n        ) {\\n            address impl = proposedUpgradeImpl;\\n            proposedUpgradeImpl = address(0);\\n\\n            _upgradeTo(impl);\\n            emit ProposedUpgradeExecuted(impl);\\n        }\\n    }\\n\\n    function setWallets(address nextMaintainerWallet, address nextBountyWallet)\\n        external\\n        onlyMaintainer\\n    {\\n        if (maintainerWallet != nextMaintainerWallet) {\\n            maintainerWallet = nextMaintainerWallet;\\n            emit MaintainerBonusWalletChanged(maintainerWallet);\\n        }\\n\\n        if (bountyWallet != nextBountyWallet) {\\n            bountyWallet = nextBountyWallet;\\n            emit BountyBonusWalletChanged(bountyWallet);\\n        }\\n    }\\n\\n    function proposeDistribution(\\n        address payable nextProposedDistributionAddress,\\n        uint256 nextProposedDistributionAmount\\n    ) external onlyMaintainer {\\n        require(\\n            address(this).balance >= nextProposedDistributionAmount,\\n            \\\"too much\\\"\\n        );\\n\\n        proposedDistributionAddress = nextProposedDistributionAddress;\\n        proposedDistributionAmount = nextProposedDistributionAmount;\\n        distributionProposedAt = block.timestamp;\\n\\n        emit DistributionProposed(\\n            proposedDistributionAddress,\\n            proposedDistributionAmount\\n        );\\n    }\\n\\n    function proposeUpgrade(address nextProposedUpgradeImpl)\\n        external\\n        onlyMaintainer\\n    {\\n        proposedUpgradeImpl = nextProposedUpgradeImpl;\\n        upgradeProposedAt = block.timestamp;\\n        emit UpgradeProposed(proposedUpgradeImpl);\\n    }\\n\\n    function _dropProposals() private {\\n        proposedDistributionAddress = payable(0);\\n        proposedUpgradeImpl = address(0);\\n    }\\n\\n    function votesOf(address account) public view override returns (uint256) {\\n        return balanceOf(account);\\n    }\\n\\n    receive() external payable hasConsensus {\\n        address buyer = _msgSender();\\n        _purchase(buyer, _convertEthToUsd(msg.value));\\n\\n        if (\\n            candidateOf(buyer) == address(0) &&\\n            balanceOf(buyer) > (1000 * 10**decimals())\\n        ) {\\n            _vote(buyer, maintainer);\\n        }\\n    }\\n\\n    function purchase() external payable hasConsensus {\\n        _purchase(_msgSender(), _convertEthToUsd(msg.value));\\n    }\\n\\n    function purchaseAndVote(address candidate) external payable hasConsensus {\\n        _purchase(_msgSender(), _convertEthToUsd(msg.value));\\n        _vote(_msgSender(), candidate);\\n    }\\n\\n    function _purchase(address account, uint256 usdAmount) internal {\\n        require(account != address(0), \\\"purchase from the zero address\\\");\\n        require(usdAmount > 0, \\\"no funds\\\");\\n\\n        Calculator.Result memory r = Calculator.calcTokens(\\n            usdAmount,\\n            totalSupply(),\\n            _nodeId,\\n            address(0) == maintainerWallet,\\n            address(0) == bountyWallet,\\n            _supplyLUT,\\n            _priceLUT\\n        );\\n\\n        _nodeId = r.nextNodeId;\\n        currentPricePerToken = r.nextPricePerToken;\\n\\n        _mint(account, r.tokensAmount);\\n\\n        if (r.maintainerBonusTokensAmount > 0)\\n            _mintMaintainerBonus(r.maintainerBonusTokensAmount);\\n\\n        if (r.bountyBonusTokensAmount > 0)\\n            _mintBountyBonus(r.bountyBonusTokensAmount);\\n    }\\n\\n    function _mintMaintainerBonus(uint256 amount) internal virtual;\\n\\n    function _mintBountyBonus(uint256 amount) internal virtual;\\n\\n    uint256[40] private __gap;\\n}\\n\\n// Copyright 2021 ToonCoin.COM\\n// http://tooncoin.com/license\\n// Full source code: http://tooncoin.com/sourcecode\\n\"\r\n    },\r\n    \"contracts/v0Extended/Obligations.sol\": {\r\n      \"content\": \"/**\\n * Submitted for verification at Etherscan.io on 2021-12-23\\n */\\n\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nabstract contract Obligations {\\n    mapping(address => mapping(uint256 => mapping(uint256 => uint256)))\\n        private _obligations;\\n\\n    event ObligationCreated(\\n        uint256 amount,\\n        address recipient,\\n        uint256 releaseTime,\\n        uint256 targetPrice\\n    );\\n\\n    event ObligationPaidOff(\\n        uint256 amount,\\n        address recipient,\\n        uint256 releaseTime,\\n        uint256 targetPrice\\n    );\\n\\n    function payOffObligation(\\n        address recipient,\\n        uint256 releaseTime,\\n        uint256 targetPrice\\n    ) public {\\n        require(\\n            block.timestamp >= releaseTime ||\\n                _currentPricePerToken() >= targetPrice,\\n            \\\"too early\\\"\\n        );\\n        require(\\n            _obligations[recipient][releaseTime][targetPrice] > 0,\\n            \\\"nothing to pay off\\\"\\n        );\\n\\n        uint256 amount = _obligations[recipient][releaseTime][targetPrice];\\n        _obligations[recipient][releaseTime][targetPrice] = 0;\\n\\n        _transferTokens(address(this), recipient, amount);\\n        emit ObligationPaidOff(amount, recipient, releaseTime, targetPrice);\\n    }\\n\\n    function obligation(\\n        address recipient,\\n        uint256 releaseTime,\\n        uint256 targetPrice\\n    ) public view returns (uint256) {\\n        return _obligations[recipient][releaseTime][targetPrice];\\n    }\\n\\n    function _transferTokens(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function _currentPricePerToken() internal virtual returns (uint256);\\n\\n    function _createObligation(\\n        address account,\\n        uint256 amount,\\n        address recipient,\\n        uint256 releaseTime,\\n        uint256 targetPrice\\n    ) internal {\\n        _transferTokens(account, address(this), amount);\\n        _obligations[recipient][releaseTime][targetPrice] += amount;\\n        emit ObligationCreated(\\n            _obligations[recipient][releaseTime][targetPrice],\\n            recipient,\\n            releaseTime,\\n            targetPrice\\n        );\\n    }\\n\\n    // solhint-disable-next-line ordering\\n    uint256[49] private __gap;\\n}\\n\\n// Copyright 2021 ToonCoin.COM\\n// http://tooncoin.com/license\\n// Full source code: http://tooncoin.com/sourcecode\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/v0/libraries/Calculator.sol\": {\r\n      \"content\": \"/**\\n * Submitted for verification at Etherscan.io on 2021-12-23\\n */\\n\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nlibrary Calculator {\\n    struct Result {\\n        uint256 tokensAmount;\\n        uint256 maintainerBonusTokensAmount;\\n        uint256 bountyBonusTokensAmount;\\n        uint256 nextNodeId;\\n        uint256 nextPricePerToken;\\n    }\\n\\n    // solhint-disable-next-line contract-name-camelcase\\n    struct _LoopState {\\n        uint256 prev;\\n        uint256 curr;\\n        uint256 next;\\n    }\\n\\n    uint8 public constant DECIMALS = 18;\\n\\n    uint256 public constant MAINTAINER_BONUS_PRICE_THRESHOLD =\\n        10 * 10**DECIMALS;\\n\\n    uint256 public constant BOUNTY_BONUS_PRICE_THRESHOLD = 20 * 10**DECIMALS;\\n\\n    function adjustNodeId(\\n        uint256 nodeId,\\n        uint256 supply,\\n        uint256[] storage supplyLUT\\n    ) public view returns (uint256) {\\n        if (supply < supplyLUT[nodeId + 1]) {\\n            if (supply < supplyLUT[nodeId]) {\\n                while (true) {\\n                    nodeId -= 1;\\n                    if (supply >= supplyLUT[nodeId]) {\\n                        return nodeId;\\n                    }\\n                }\\n            }\\n        } else {\\n            while (true) {\\n                nodeId += 1;\\n                if (supply < supplyLUT[nodeId + 1]) {\\n                    return nodeId;\\n                }\\n            }\\n        }\\n\\n        return nodeId;\\n    }\\n\\n    // solhint-disable-next-line function-max-lines\\n    function calcTokens(\\n        uint256 usdAmount,\\n        uint256 supply,\\n        uint256 nodeId,\\n        bool suppressMaintainerBonus,\\n        bool suppressBountyBonus,\\n        uint256[] storage supplyLUT,\\n        uint256[] storage priceLUT\\n    ) public view returns (Result memory r) {\\n        require(\\n            supply >= supplyLUT[nodeId] && supply < supplyLUT[nodeId + 1],\\n            \\\"nodeId is out of sync\\\"\\n        );\\n\\n        r.nextNodeId = nodeId;\\n\\n        _LoopState memory supplyNode = _LoopState(0, supply, 0);\\n        _LoopState memory priceNode = _LoopState(0, 0, 0);\\n\\n        while (true) {\\n            supplyNode.prev = supplyLUT[r.nextNodeId];\\n            supplyNode.next = supplyLUT[r.nextNodeId + 1];\\n\\n            priceNode.prev = priceLUT[r.nextNodeId];\\n            priceNode.next = priceLUT[r.nextNodeId + 1];\\n\\n            priceNode.curr = _approxPricePerToken(supplyNode, priceNode);\\n\\n            uint256 usdAmountMaxed = usdAmount * 10**DECIMALS;\\n            uint256 tokensByIteration;\\n\\n            if (\\n                supplyNode.next - supplyNode.curr >\\n                (2 * usdAmountMaxed) / (priceNode.next + priceNode.curr)\\n            ) {\\n                _LoopState memory adjustedSupplyNode = _LoopState(\\n                    supplyNode.prev,\\n                    supplyNode.curr +\\n                        usdAmountMaxed /\\n                        (priceNode.next + priceNode.curr),\\n                    supplyNode.next\\n                );\\n\\n                tokensByIteration =\\n                    usdAmountMaxed /\\n                    _approxPricePerToken(adjustedSupplyNode, priceNode);\\n\\n                r.tokensAmount += tokensByIteration;\\n                supplyNode.curr += tokensByIteration;\\n\\n                usdAmount = 0;\\n            }\\n            else {\\n                tokensByIteration = supplyNode.next - supplyNode.curr;\\n\\n                r.tokensAmount += tokensByIteration;\\n                supplyNode.curr = supplyNode.next;\\n                r.nextNodeId += 1;\\n\\n                usdAmount -=\\n                    (tokensByIteration *\\n                        ((priceNode.curr + priceNode.next) / 2)) /\\n                    10**DECIMALS;\\n            }\\n\\n            if (\\n                false == suppressMaintainerBonus &&\\n                priceNode.curr >= MAINTAINER_BONUS_PRICE_THRESHOLD\\n            ) {\\n                r.maintainerBonusTokensAmount += tokensByIteration / 10;\\n                supplyNode.curr += tokensByIteration / 10;\\n            }\\n\\n            if (\\n                false == suppressBountyBonus &&\\n                priceNode.curr >= BOUNTY_BONUS_PRICE_THRESHOLD\\n            ) {\\n                r.bountyBonusTokensAmount += tokensByIteration / 10;\\n                supplyNode.curr += tokensByIteration / 10;\\n            }\\n\\n            r.nextNodeId = adjustNodeId(\\n                r.nextNodeId,\\n                supplyNode.curr,\\n                supplyLUT\\n            );\\n\\n            if (usdAmount == 0) break;\\n        }\\n\\n        r.nextPricePerToken = _approxPricePerToken(supplyNode, priceNode);\\n    }\\n\\n    function _approxPricePerToken(\\n        _LoopState memory supplyNode,\\n        _LoopState memory priceNode\\n    ) private pure returns (uint256) {\\n        return\\n            ((supplyNode.curr - supplyNode.prev) *\\n                (priceNode.next - priceNode.prev)) /\\n            (supplyNode.next - supplyNode.prev) +\\n            priceNode.prev;\\n    }\\n}\\n\\n// Copyright 2021 ToonCoin.COM\\n// http://tooncoin.com/license\\n// Full source code: http://tooncoin.com/sourcecode\\n\"\r\n    },\r\n    \"contracts/v0/libraries/Elections.sol\": {\r\n      \"content\": \"/**\\n * Submitted for verification at Etherscan.io on 2021-12-23\\n */\\n\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./ElectionsPrincipal.sol\\\";\\n\\nlibrary Elections {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    function findTop2(\\n        EnumerableSet.AddressSet storage voters,\\n        ElectionsPrincipal principal\\n    )\\n        public\\n        view\\n        returns (\\n            address winningCandidate,\\n            uint256 winningCandidateVotes,\\n            uint256 runnerUpCandidateVotes,\\n            uint256 totalVotes\\n        )\\n    {\\n        (\\n            address[2500] memory candidatesList,\\n            uint256[2500] memory candidatesVotes,\\n            uint256 candidatesCount,\\n            uint256 totalVotes_\\n        ) = _convertVotersList(voters, principal);\\n\\n        require(candidatesCount > 0, \\\"no candidates\\\");\\n\\n        totalVotes = totalVotes_;\\n\\n        for (uint256 j = 0; j < candidatesCount; j++) {\\n            uint256 votes = candidatesVotes[j];\\n\\n            if (votes > winningCandidateVotes) {\\n                runnerUpCandidateVotes = winningCandidateVotes;\\n\\n                winningCandidate = candidatesList[j];\\n                winningCandidateVotes = votes;\\n            } else if (votes > runnerUpCandidateVotes) {\\n                runnerUpCandidateVotes = votes;\\n            }\\n        }\\n    }\\n\\n    function sumVotesFor(\\n        address expectedCandidate,\\n        address[] memory selectedVoters,\\n        ElectionsPrincipal principal\\n    ) public view returns (uint256 votes) {\\n        address prevVoter;\\n        for (uint256 j = 0; j < selectedVoters.length; j++) {\\n            address voter = selectedVoters[j];\\n            address candidate = principal.candidateOf(voter);\\n            if (\\n                candidate == expectedCandidate &&\\n                prevVoter < voter\\n            ) {\\n                votes += principal.votesOf(voter);\\n                prevVoter = voter;\\n            }\\n        }\\n    }\\n\\n    function sumVotesExceptZeroAnd(\\n        address excludedCandidate,\\n        address[] memory selectedVoters,\\n        ElectionsPrincipal principal\\n    ) public view returns (uint256 votes) {\\n        address prevVoter;\\n        for (uint256 i = 0; i < selectedVoters.length; i++) {\\n            address voter = selectedVoters[i];\\n            address candidate = principal.candidateOf(voter);\\n            if (\\n                candidate != excludedCandidate &&\\n                candidate != address(0) &&\\n                prevVoter < voter\\n            ) {\\n                votes += principal.votesOf(voter);\\n                prevVoter = voter;\\n            }\\n        }\\n    }\\n\\n    function calcConsensus(uint256 votes, uint256 totalVotes)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        return votes > (totalVotes / 2);\\n    }\\n\\n    function _convertVotersList(\\n        EnumerableSet.AddressSet storage voters,\\n        ElectionsPrincipal principal\\n    )\\n        private\\n        view\\n        returns (\\n            address[2500] memory candidatesList,\\n            uint256[2500] memory candidatesVotes,\\n            uint256 candidatesCount,\\n            uint256 totalVotes\\n        )\\n    {\\n        for (uint256 i = 0; i < voters.length(); i++) {\\n            address voter = voters.at(i);\\n            uint256 voterBalance = principal.votesOf(voter);\\n            address candidate = principal.candidateOf(voter);\\n\\n            if (voterBalance > 0 && candidate != address(0)) {\\n                totalVotes += voterBalance;\\n\\n                (bool found, uint256 foundIndex) = _findIndex(\\n                    candidate,\\n                    candidatesList,\\n                    candidatesCount\\n                );\\n\\n                if (found) {\\n                    candidatesVotes[foundIndex] += voterBalance;\\n                } else {\\n                    candidatesList[candidatesCount] = candidate;\\n                    candidatesVotes[candidatesCount] = voterBalance;\\n                    candidatesCount++;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _findIndex(\\n        address predicate,\\n        address[2500] memory array,\\n        uint256 length\\n    ) private pure returns (bool found, uint256 index) {\\n        for (uint256 j = 0; j < length; j++) {\\n            if (predicate == array[j]) {\\n                return (true, j);\\n            }\\n        }\\n    }\\n}\\n\\n// Copyright 2021 ToonCoin.COM\\n// http://tooncoin.com/license\\n// Full source code: http://tooncoin.com/sourcecode\\n\"\r\n    },\r\n    \"contracts/v0/libraries/ElectionsPrincipal.sol\": {\r\n      \"content\": \"/**\\n * Submitted for verification at Etherscan.io on 2021-12-23\\n */\\n\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface ElectionsPrincipal {\\n    function candidateOf(address account) external view returns (address);\\n\\n    function votesOf(address account) external view returns (uint256);\\n}\\n\\n// Copyright 2021 ToonCoin.COM\\n// http://tooncoin.com/license\\n// Full source code: http://tooncoin.com/sourcecode\\n\"\r\n    },\r\n    \"contracts/v0/libraries/Proposals.sol\": {\r\n      \"content\": \"/**\\n * Submitted for verification at Etherscan.io on 2021-12-23\\n */\\n\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nlibrary Proposals {\\n    function isExecutionAllowed(\\n        uint256 proposedAt,\\n        uint256 runnerUpCandidateVotes,\\n        uint256 totalVotes\\n    ) public view returns (bool) {\\n        if (\\n            proposedAt < (block.timestamp - 14 days) &&\\n            runnerUpCandidateVotes < (totalVotes / 10)\\n        ) return true;\\n\\n        if (\\n            proposedAt < (block.timestamp - 30 days) &&\\n            runnerUpCandidateVotes < (totalVotes / 5)\\n        ) return true;\\n\\n        if (\\n            proposedAt < (block.timestamp - 90 days) &&\\n            runnerUpCandidateVotes < ((totalVotes * 3) / 10)\\n        ) return true;\\n\\n        if (proposedAt < (block.timestamp - 180 days)) return true;\\n\\n        return false;\\n    }\\n}\\n\\n// Copyright 2021 ToonCoin.COM\\n// http://tooncoin.com/license\\n// Full source code: http://tooncoin.com/sourcecode\\n\"\r\n    },\r\n    \"contracts/v0/LUTs.sol\": {\r\n      \"content\": \"/**\\n * Submitted for verification at Etherscan.io on 2021-12-23\\n */\\n\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"./libraries/LUTsLoader.sol\\\";\\n\\nabstract contract LUTs {\\n    uint256[] internal _supplyLUT;\\n\\n    uint256[] internal _priceLUT;\\n\\n    uint256 internal _nodeId;\\n\\n    function initSupplyLUT0() external {\\n        LUTsLoader.fillSupplyNodes0(_supplyLUT);\\n    }\\n\\n    function initSupplyLUT1() external {\\n        LUTsLoader.fillSupplyNodes1(_supplyLUT);\\n    }\\n\\n    function initSupplyLUT2() external {\\n        LUTsLoader.fillSupplyNodes2(_supplyLUT);\\n    }\\n\\n    function initSupplyLUT3() external {\\n        LUTsLoader.fillSupplyNodes3(_supplyLUT);\\n    }\\n\\n    function initPriceLUT0() external {\\n        LUTsLoader.fillPriceNodes0(_priceLUT);\\n    }\\n\\n    function initPriceLUT1() external {\\n        LUTsLoader.fillPriceNodes1(_priceLUT);\\n    }\\n\\n    function initPriceLUT2() external {\\n        LUTsLoader.fillPriceNodes2(_priceLUT);\\n    }\\n\\n    function initPriceLUT3() external {\\n        LUTsLoader.fillPriceNodes3(_priceLUT);\\n    }\\n\\n    // solhint-disable-next-line ordering\\n    uint256[47] private __gap;\\n}\\n\\n// Copyright 2021 ToonCoin.COM\\n// http://tooncoin.com/license\\n// Full source code: http://tooncoin.com/sourcecode\\n\"\r\n    },\r\n    \"contracts/v0/Voting.sol\": {\r\n      \"content\": \"/**\\n * Submitted for verification at Etherscan.io on 2021-12-23\\n */\\n\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nabstract contract Voting {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(address => address) internal _votersDecisions;\\n\\n    EnumerableSet.AddressSet internal _voters;\\n\\n    event Vote(address voter, address candidate);\\n\\n    function _vote(address voter, address candidate) internal {\\n        require(voter != address(0), \\\"vote from the zero address\\\");\\n\\n        if (_votersDecisions[voter] != candidate) {\\n            _votersDecisions[voter] = candidate;\\n\\n            if (candidate == address(0)) {\\n                _voters.remove(voter);\\n            } else {\\n                _voters.add(voter);\\n            }\\n\\n            emit Vote(voter, candidate);\\n        }\\n    }\\n\\n    // solhint-disable-next-line ordering\\n    uint256[48] private __gap;\\n}\\n\\n// Copyright 2021 ToonCoin.COM\\n// http://tooncoin.com/license\\n// Full source code: http://tooncoin.com/sourcecode\\n\"\r\n    },\r\n    \"contracts/v0/ChainlinkETHUSD.sol\": {\r\n      \"content\": \"/**\\n * Submitted for verification at Etherscan.io on 2021-12-23\\n */\\n\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nabstract contract ChainlinkETHUSD {\\n    address private _chainlinkDataFeed;\\n\\n    function setChainlinkDataFeed(address dataFeed) external {\\n        require(_chainlinkDataFeed == address(0), \\\"already set\\\");\\n\\n        _chainlinkDataFeed = dataFeed;\\n    }\\n\\n    function getChainlinkDataFeed() external view returns (address) {\\n        return _chainlinkDataFeed;\\n    }\\n\\n    function _convertEthToUsd(uint256 ethAmount)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        (\\n            uint80 roundId,\\n            int256 price,\\n            ,\\n            ,\\n            uint80 answeredInRound\\n        ) = AggregatorV3Interface(_chainlinkDataFeed).latestRoundData();\\n\\n        require(answeredInRound == roundId, \\\"ChainLink ETHUSD outdated\\\");\\n\\n        require(price != 0, \\\"ChainLink ETHUSD is not working\\\");\\n\\n        return (ethAmount * uint256(price)) / 10**8;\\n    }\\n\\n    // solhint-disable-next-line ordering\\n    uint256[49] private __gap;\\n}\\n\\n// Copyright 2021 ToonCoin.COM\\n// http://tooncoin.com/license\\n// Full source code: http://tooncoin.com/sourcecode\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v0/libraries/LUTsLoader.sol\": {\r\n      \"content\": \"/**\\n * Submitted for verification at Etherscan.io on 2021-12-23\\n */\\n\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\n// solhint-disable function-max-lines\\nlibrary LUTsLoader {\\n    function fillPriceNodes0(uint256[] storage table) public {\\n        require(table.length == 0, \\\"fillPriceNodes0 initialized\\\");\\n        table.push(1000000000000000000);\\n        table.push(1000000000000000000);\\n        table.push(1033606645623224470);\\n        table.push(1068342697876493930);\\n        table.push(1104246112328188820);\\n        table.push(1141356120106025580);\\n        table.push(1179713270764327210);\\n        table.push(1219359476591919000);\\n        table.push(1260338058409064100);\\n        table.push(1302693792903480290);\\n        table.push(1346472961557161720);\\n        table.push(1391723401217466800);\\n        table.push(1438494556367730870);\\n        table.push(1486837533154518710);\\n        table.push(1536805155230551890);\\n        table.push(1588452021474329500);\\n        table.push(1641834565649511820);\\n        table.push(1697011118069255650);\\n        table.push(1754041969332881080);\\n        table.push(1812989436204514000);\\n        table.push(1873917929705688630);\\n        table.push(1936894025496314190);\\n        table.push(2001986536620909530);\\n        table.push(2069266588699594950);\\n        table.push(2138807697646000820);\\n        table.push(2210685849997014580);\\n        table.push(2284979585942141040);\\n        table.push(2361770085143200780);\\n        table.push(2441141255438141000);\\n        table.push(2523179824525883880);\\n        table.push(2607975434732394970);\\n        table.push(2695620740961521310);\\n        table.push(2786211511937628940);\\n        table.push(2879846734850665300);\\n        table.push(2976628723517991680);\\n        table.push(3076663230181171820);\\n        table.push(3180059561059875540);\\n        table.push(3286930695789161540);\\n        table.push(3397393410870646550);\\n        table.push(3511568407272454180);\\n        table.push(3629580442317370290);\\n        table.push(3751558466003316470);\\n        table.push(3877635761905097530);\\n        table.push(4007950092811384140);\\n        table.push(4142643851256065920);\\n        table.push(4281864215108458380);\\n        table.push(4425763308392374480);\\n        table.push(4574498367509786500);\\n        table.push(4728231913050706700);\\n        table.push(4887131927377022510);\\n        table.push(5051372038174328040);\\n        table.push(5221131708172317770);\\n        table.push(5396596431241045490);\\n        table.push(5577957935077321170);\\n        table.push(5765414390702717620);\\n        table.push(5959170629002102420);\\n        table.push(6159438364539303700);\\n        table.push(6366436426894469410);\\n        table.push(6580390999775899300);\\n        table.push(6801535868167623740);\\n        table.push(7030112673782783500);\\n        table.push(7266371179101940510);\\n        table.push(7510569540284831100);\\n        table.push(7762974589253767290);\\n        table.push(8023862125256915240);\\n        table.push(8293517216230037150);\\n        table.push(8572234510285991150);\\n        table.push(8860318557672347560);\\n        table.push(9158084143548921540);\\n        table.push(9465856631948841370);\\n        table.push(9783972321298995170);\\n        table.push(10000000000000000000);\\n        table.push(10112778811888327300);\\n        table.push(10452635385685511300);\\n        table.push(10803913398921020600);\\n        table.push(11166996687862565900);\\n        table.push(11542281988227284500);\\n        table.push(11930179368688965600);\\n        table.push(12331112678953999500);\\n        table.push(12745520012895656700);\\n        table.push(13173854187252756300);\\n        table.push(13616583236415791500);\\n        table.push(14074190923841156000);\\n        table.push(14547177270652287900);\\n        table.push(15036059102005325000);\\n        table.push(15541370611816276600);\\n        table.push(16063663946466781400);\\n        table.push(16603509808126258000);\\n        table.push(17161498078349688800);\\n        table.push(17738238462632434500);\\n        table.push(18334361156626372800);\\n        table.push(18950517534745327200);\\n        table.push(19587380861912214700);\\n        table.push(20000000000000000000);\\n        table.push(20245647029225627600);\\n        table.push(20926035314349700600);\\n        table.push(21629289167458131500);\\n        table.push(22356177023591144600);\\n        table.push(23107493142313045200);\\n        table.push(23884058475587849400);\\n    }\\n\\n    function fillPriceNodes1(uint256[] storage table) public {\\n        require(\\n            table[table.length - 1] < 24686721564821301100,\\n            \\\"fillPriceNodes1 initialized\\\"\\n        );\\n        table.push(24686721564821301100);\\n        table.push(25516359468049464100);\\n        table.push(26373878718287010700);\\n        table.push(27260216314082384000);\\n        table.push(28176340743362192900);\\n        table.push(29123253041683587000);\\n        table.push(30101987886050941400);\\n        table.push(31113614725492051300);\\n        table.push(32159238949629201000);\\n        table.push(33240003096521987000);\\n        table.push(34357088101101685300);\\n        table.push(35511714585561311700);\\n        table.push(36705144193111362400);\\n        table.push(37938680966558611200);\\n        table.push(39213672773214317400);\\n        table.push(40531512777688816900);\\n        table.push(41893640964181799500);\\n        table.push(43301545709931656800);\\n        table.push(44756765411543185700);\\n        table.push(46260890165970707900);\\n        table.push(47815563507993395200);\\n        table.push(49422484206081313100);\\n        table.push(51083408118614496100);\\n        table.push(52800150112483321000);\\n        table.push(54574586046166603400);\\n        table.push(56408654819454295500);\\n        table.push(58304360492054489000);\\n        table.push(60263774473399693700);\\n        table.push(62289037786045157700);\\n        table.push(64382363405132415600);\\n        table.push(66546038676474356100);\\n        table.push(68782427815904019300);\\n        table.push(71093974492618123100);\\n        table.push(73483204499338099900);\\n        table.push(75952728512206289100);\\n        table.push(78505244943432982500);\\n        table.push(81143542889811369200);\\n        table.push(83870505180322175600);\\n        table.push(86689111526158074600);\\n        table.push(89602441776609853000);\\n        table.push(92613679284371983900);\\n        table.push(95726114383944838100);\\n        table.push(98943147986934323100);\\n        table.push(102268295298177480000);\\n        table.push(105705189656754604000);\\n        table.push(109257586506084889000);\\n        table.push(112929367497443675000);\\n        table.push(116724544731385148000);\\n        table.push(120647265141705021000);\\n        table.push(124701815026733504000);\\n        table.push(128892624732909825000);\\n        table.push(133224273495755982000);\\n        table.push(137701494443539389000);\\n        table.push(142329179769091831000);\\n        table.push(147112386075435909000);\\n        table.push(152056339901060065000);\\n        table.push(157166443430879556000);\\n        table.push(162448280399123681000);\\n        table.push(167907622190599232000);\\n        table.push(173550434146996961000);\\n        table.push(179382882085131842000);\\n        table.push(185411339034239529000);\\n        table.push(191642392199690743000);\\n        table.push(198082850160732746000);\\n        table.push(204739750310122763000);\\n        table.push(211620366543782521000);\\n        table.push(218732217208876287000);\\n        table.push(226083073318997154000);\\n        table.push(233680967045438166000);\\n        table.push(241534200493826601000);\\n        table.push(249651354775711479000);\\n        table.push(258041299385016702000);\\n        table.push(266713201889605328000);\\n        table.push(275676537948544816000);\\n        table.push(284941101666018954000);\\n        table.push(294517016293200027000);\\n        table.push(304414745289775026000);\\n        table.push(314645103757212635000);\\n        table.push(325219270256263972000);\\n        table.push(336148799021609901000);\\n        table.push(347445632587001648000);\\n        table.push(359122114834690064000);\\n        table.push(371191004483402416000);\\n        table.push(383665489029604845000);\\n        table.push(396559199157283890000);\\n        table.push(409886223631992424000);\\n        table.push(423661124695434528000);\\n        table.push(437898953977410708000);\\n        table.push(452615268942510229000);\\n        table.push(467826149889521607000);\\n        table.push(483548217522136250000);\\n        table.push(499798651110144543000);\\n        table.push(516595207260968775000);\\n        table.push(533956239322044348000);\\n        table.push(551900717435249925000);\\n        table.push(570448249265299711000);\\n        table.push(589619101424747455000);\\n        table.push(609434221619012988000);\\n        table.push(629915261535628802000);\\n        table.push(651084600502717438000);\\n    }\\n\\n    function fillPriceNodes2(uint256[] storage table) public {\\n        require(\\n            table[table.length - 1] < 672965369942550938000,\\n            \\\"fillPriceNodes2 initialized\\\"\\n        );\\n        table.push(672965369942550938000);\\n        table.push(695581478646912403000);\\n        table.push(718957638901877666000);\\n        table.push(743119393490563251000);\\n        table.push(768093143603346110000);\\n        table.push(793906177686052224000);\\n        table.push(820586701257636059000);\\n        table.push(848163867729932198000);\\n        table.push(876667810263155459000);\\n        table.push(906129674691957509000);\\n        table.push(936581653558017793000);\\n        table.push(968057021286355684000);\\n        table.push(1000590170543800500000);\\n        table.push(1034216649819347740000);\\n        table.push(1068973202267465000000);\\n        table.push(1104897805856791140000);\\n        table.push(1142029714868098590000);\\n        table.push(1180409502786862860000);\\n        table.push(1220079106637307550000);\\n        table.push(1261081872806367850000);\\n        table.push(1303462604407643680000);\\n        table.push(1347267610237096590000);\\n        table.push(1392544755373983200000);\\n        table.push(1439343513482316460000);\\n        table.push(1487715020870003480000);\\n        table.push(1537712132364729680000);\\n        table.push(1589389479067643980000);\\n        table.push(1642803528047951630000);\\n        table.push(1698012644043642040000);\\n        table.push(1755077153235771110000);\\n        table.push(1814059409165983300000);\\n        table.push(1875023860869300450000);\\n        table.push(1938037123296625170000);\\n        table.push(2003168050103908240000);\\n        table.push(2070487808887515830000);\\n        table.push(2140069958948005110000);\\n        table.push(2211990531667279270000);\\n        table.push(2286328113586949370000);\\n        table.push(2363163932278681310000);\\n        table.push(2442581945100356580000);\\n        table.push(2524668930935030560000);\\n        table.push(2609514585012929080000);\\n        table.push(2697211616920094230000);\\n        table.push(2787855851900772070000);\\n        table.push(2881546335564233860000);\\n        table.push(2978385442110442160000);\\n        table.push(3078478986192818510000);\\n        table.push(3181936338540343850000);\\n        table.push(3288870545465329570000);\\n        table.push(3399398452387443850000);\\n        table.push(3513640831508966390000);\\n        table.push(3631722513780779960000);\\n        table.push(3753772525303296530000);\\n        table.push(3879924228311360810000);\\n        table.push(4010315466897183390000);\\n        table.push(4145088717630532970000);\\n        table.push(4284391245240768280000);\\n        table.push(4428375263530820180000);\\n        table.push(4577198101698953770000);\\n        table.push(4731022376250046190000);\\n        table.push(4890016168684226850000);\\n        table.push(5054353209157035560000);\\n        table.push(5224213066311783450000);\\n        table.push(5399781343491542420000);\\n        table.push(5581249881545161590000);\\n        table.push(5768816968448913440000);\\n        table.push(5962687555972820090000);\\n        table.push(6163073483628409100000);\\n        table.push(6370193710142600580000);\\n        table.push(6584274552710656450000);\\n        table.push(6805549934289618220000);\\n        table.push(7034261639202447910000);\\n        table.push(7270659577332166550000);\\n        table.push(7515002057194671620000);\\n        table.push(7767556068188615790000);\\n        table.push(8028597572330757370000);\\n        table.push(8298411805795557410000);\\n        table.push(8577293590588510880000);\\n        table.push(8865547656693773630000);\\n        table.push(9163488975048089380000);\\n        table.push(9471443101704854970000);\\n        table.push(9789746533564384110000);\\n        table.push(10118747076059072500000);\\n        table.push(10458804223195228600000);\\n        table.push(10810289550366834100000);\\n        table.push(11173587120370458900000);\\n        table.push(11549093903064974000000);\\n        table.push(11937220209134620900000);\\n        table.push(12338390138429401400000);\\n        table.push(12753042043372685900000);\\n        table.push(13181629007942394300000);\\n        table.push(13624619342749130300000);\\n        table.push(14082497096752229700000);\\n        table.push(14555762586172869400000);\\n        table.push(15044932941182170300000);\\n        table.push(15550542670961655800000);\\n        table.push(16073144247753494600000);\\n        table.push(16613308710538715200000);\\n        table.push(17171626289003018000000);\\n        table.push(17748707048471987500000);\\n    }\\n\\n    function fillPriceNodes3(uint256[] storage table) public {\\n        require(\\n            table[table.length - 1] < 18345181556520411900000,\\n            \\\"fillPriceNodes3 initialized\\\"\\n        );\\n        table.push(18345181556520411900000);\\n        table.push(18961701571984106700000);\\n        table.push(19598940757127115000000);\\n        table.push(20257595413742456400000);\\n        table.push(20938385243990756400000);\\n        table.push(21642054136808106000000);\\n        table.push(22369370980742455200000);\\n        table.push(23121130504106708000000);\\n        table.push(23898154143366547500000);\\n        table.push(24701290940711860400000);\\n        table.push(25531418471792529100000);\\n        table.push(26389443804632307700000);\\n        table.push(27276304490768581900000);\\n        table.push(28192969589701007700000);\\n        table.push(29140440727768433500000);\\n        table.push(30119753192611124600000);\\n        table.push(31131977064414190600000);\\n        table.push(32178218385168310200000);\\n        table.push(33259620367225387900000);\\n        table.push(34377364642469710500000);\\n        table.push(35532672553469556900000);\\n        table.push(36726806488020082600000);\\n        table.push(37961071258535714700000);\\n        table.push(39236815527799296200000);\\n        table.push(40555433282625878000000);\\n        table.push(41918365357051409000000);\\n        table.push(43327101006710684900000);\\n        table.push(44783179536124862800000);\\n        table.push(46288191980676648900000);\\n        table.push(47843782845111029500000);\\n        table.push(49451651900461181700000);\\n        table.push(51113556041363035200000);\\n        table.push(52831311205787946800000);\\n        table.push(54606794359291150300000);\\n        table.push(56441945545944141100000);\\n        table.push(58338770008192018300000);\\n        table.push(60299340377952123400000);\\n        table.push(62325798941348150400000);\\n        table.push(64420359979554376500000);\\n        table.push(66585312188307812300000);\\n        table.push(68823021178732041900000);\\n        table.push(71135932062205361600000);\\n        table.push(73526572122097668300000);\\n        table.push(75997553575295459800000);\\n        table.push(78551576426532429900000);\\n    }\\n\\n    function fillSupplyNodes0(uint256[] storage table) public {\\n        require(table.length == 0, \\\"fillSupplyNodes0 initialized\\\");\\n        table.push(0);\\n        table.push(1000000000000000000000000);\\n        table.push(1010000000000000000000000);\\n        table.push(1020100000000000000000000);\\n        table.push(1030301000000000000000000);\\n        table.push(1040604010000000000000000);\\n        table.push(1051010050100000000000000);\\n        table.push(1061520150601000000000000);\\n        table.push(1072135352107010000000000);\\n        table.push(1082856705628080100000000);\\n        table.push(1093685272684360900000000);\\n        table.push(1104622125411204510000000);\\n        table.push(1115668346665316560000000);\\n        table.push(1126825030131969730000000);\\n        table.push(1138093280433289430000000);\\n        table.push(1149474213237622320000000);\\n        table.push(1160968955369998540000000);\\n        table.push(1172578644923698530000000);\\n        table.push(1184304431372935520000000);\\n        table.push(1196147475686664880000000);\\n        table.push(1208108950443531530000000);\\n        table.push(1220190039947966850000000);\\n        table.push(1232391940347446520000000);\\n        table.push(1244715859750920990000000);\\n        table.push(1257163018348430200000000);\\n        table.push(1269734648531914500000000);\\n        table.push(1282431995017233650000000);\\n        table.push(1295256314967405990000000);\\n        table.push(1308208878117080050000000);\\n        table.push(1321290966898250850000000);\\n        table.push(1334503876567233360000000);\\n        table.push(1347848915332905690000000);\\n        table.push(1361327404486234750000000);\\n        table.push(1374940678531097100000000);\\n        table.push(1388690085316408070000000);\\n        table.push(1402576986169572150000000);\\n        table.push(1416602756031267870000000);\\n        table.push(1430768783591580550000000);\\n        table.push(1445076471427496360000000);\\n        table.push(1459527236141771320000000);\\n        table.push(1474122508503189030000000);\\n        table.push(1488863733588220920000000);\\n        table.push(1503752370924103130000000);\\n        table.push(1518789894633344160000000);\\n        table.push(1533977793579677600000000);\\n        table.push(1549317571515474380000000);\\n        table.push(1564810747230629120000000);\\n        table.push(1580458854702935410000000);\\n        table.push(1596263443249964760000000);\\n        table.push(1612226077682464410000000);\\n        table.push(1628348338459289050000000);\\n        table.push(1644631821843881940000000);\\n        table.push(1661078140062320760000000);\\n        table.push(1677688921462943970000000);\\n        table.push(1694465810677573410000000);\\n        table.push(1711410468784349140000000);\\n        table.push(1728524573472192630000000);\\n        table.push(1745809819206914560000000);\\n        table.push(1763267917398983710000000);\\n        table.push(1780900596572973550000000);\\n        table.push(1798709602538703290000000);\\n        table.push(1816696698564090320000000);\\n        table.push(1834863665549731220000000);\\n        table.push(1853212302205228530000000);\\n        table.push(1871744425227280820000000);\\n        table.push(1890461869479553630000000);\\n        table.push(1909366488174349170000000);\\n        table.push(1928460153056092660000000);\\n        table.push(1947744754586653590000000);\\n        table.push(1967222202132520130000000);\\n        table.push(1986894424153845330000000);\\n        table.push(2000000000000000000000000);\\n        table.push(2006763368395383780000000);\\n        table.push(2026831002079337620000000);\\n        table.push(2047099312100131000000000);\\n        table.push(2067570305221132310000000);\\n        table.push(2088246008273343630000000);\\n        table.push(2109128468356077070000000);\\n        table.push(2130219753039637840000000);\\n        table.push(2151521950570034220000000);\\n        table.push(2173037170075734560000000);\\n        table.push(2194767541776491910000000);\\n        table.push(2216715217194256830000000);\\n        table.push(2238882369366199400000000);\\n        table.push(2261271193059861390000000);\\n        table.push(2283883904990460000000000);\\n        table.push(2306722744040364600000000);\\n        table.push(2329789971480768250000000);\\n        table.push(2353087871195575930000000);\\n        table.push(2376618749907531690000000);\\n        table.push(2400384937406607010000000);\\n        table.push(2424388786780673080000000);\\n        table.push(2448632674648479810000000);\\n        table.push(2464047377378012230000000);\\n        table.push(2473119001394964610000000);\\n        table.push(2497850191408914260000000);\\n        table.push(2522828693323003400000000);\\n        table.push(2548056980256233430000000);\\n        table.push(2573537550058795760000000);\\n        table.push(2599272925559383720000000);\\n    }\\n\\n    function fillSupplyNodes1(uint256[] storage table) public {\\n        require(\\n            table[table.length - 1] < 2625265654814977560000000,\\n            \\\"fillSupplyNodes1 initialized\\\"\\n        );\\n        table.push(2625265654814977560000000);\\n        table.push(2651518311363127340000000);\\n        table.push(2678033494476758610000000);\\n        table.push(2704813829421526200000000);\\n        table.push(2731861967715741460000000);\\n        table.push(2759180587392898870000000);\\n        table.push(2786772393266827860000000);\\n        table.push(2814640117199496140000000);\\n        table.push(2842786518371491100000000);\\n        table.push(2871214383555206010000000);\\n        table.push(2899926527390758070000000);\\n        table.push(2928925792664665650000000);\\n        table.push(2958215050591312310000000);\\n        table.push(2987797201097225430000000);\\n        table.push(3017675173108197680000000);\\n        table.push(3047851924839279660000000);\\n        table.push(3078330444087672460000000);\\n        table.push(3109113748528549180000000);\\n        table.push(3140204886013834670000000);\\n        table.push(3171606934873973020000000);\\n        table.push(3203323004222712750000000);\\n        table.push(3235356234264939880000000);\\n        table.push(3267709796607589280000000);\\n        table.push(3300386894573665170000000);\\n        table.push(3333390763519401820000000);\\n        table.push(3366724671154595840000000);\\n        table.push(3400391917866141800000000);\\n        table.push(3434395837044803220000000);\\n        table.push(3468739795415251250000000);\\n        table.push(3503427193369403760000000);\\n        table.push(3538461465303097800000000);\\n        table.push(3573846079956128780000000);\\n        table.push(3609584540755690070000000);\\n        table.push(3645680386163246970000000);\\n        table.push(3682137190024879440000000);\\n        table.push(3718958561925128230000000);\\n        table.push(3756148147544379510000000);\\n        table.push(3793709629019823310000000);\\n        table.push(3831646725310021540000000);\\n        table.push(3869963192563121760000000);\\n        table.push(3908662824488752980000000);\\n        table.push(3947749452733640510000000);\\n        table.push(3987226947260976920000000);\\n        table.push(4027099216733586690000000);\\n        table.push(4067370208900922560000000);\\n        table.push(4108043910989931790000000);\\n        table.push(4149124350099831110000000);\\n        table.push(4190615593600829420000000);\\n        table.push(4232521749536837710000000);\\n        table.push(4274846967032206090000000);\\n        table.push(4317595436702528150000000);\\n        table.push(4360771391069553430000000);\\n        table.push(4404379104980248960000000);\\n        table.push(4448422896030051450000000);\\n        table.push(4492907124990351960000000);\\n        table.push(4537836196240255480000000);\\n        table.push(4583214558202658030000000);\\n        table.push(4629046703784684610000000);\\n        table.push(4675337170822531460000000);\\n        table.push(4722090542530756770000000);\\n        table.push(4769311447956064340000000);\\n        table.push(4817004562435624980000000);\\n        table.push(4865174608059981230000000);\\n        table.push(4913826354140581040000000);\\n        table.push(4962964617681986850000000);\\n        table.push(5012594263858806720000000);\\n        table.push(5062720206497394790000000);\\n        table.push(5113347408562368740000000);\\n        table.push(5164480882647992430000000);\\n        table.push(5216125691474472350000000);\\n        table.push(5268286948389217070000000);\\n        table.push(5320969817873109240000000);\\n        table.push(5374179516051840330000000);\\n        table.push(5427921311212358730000000);\\n        table.push(5482200524324482320000000);\\n        table.push(5537022529567727140000000);\\n        table.push(5592392754863404410000000);\\n        table.push(5648316682412038450000000);\\n        table.push(5704799849236158830000000);\\n        table.push(5761847847728520420000000);\\n        table.push(5819466326205805620000000);\\n        table.push(5877660989467863680000000);\\n        table.push(5936437599362542320000000);\\n        table.push(5995801975356167740000000);\\n        table.push(6055759995109729420000000);\\n        table.push(6116317595060826710000000);\\n        table.push(6177480771011434980000000);\\n        table.push(6239255578721549330000000);\\n        table.push(6301648134508764820000000);\\n        table.push(6364664615853852470000000);\\n        table.push(6428311262012390990000000);\\n        table.push(6492594374632514900000000);\\n        table.push(6557520318378840050000000);\\n        table.push(6623095521562628450000000);\\n        table.push(6689326476778254730000000);\\n        table.push(6756219741546037280000000);\\n        table.push(6823781938961497650000000);\\n        table.push(6892019758351112630000000);\\n        table.push(6960939955934623760000000);\\n        table.push(7030549355493970000000000);\\n    }\\n\\n    function fillSupplyNodes2(uint256[] storage table) public {\\n        require(\\n            table[table.length - 1] < 7100854849048909700000000,\\n            \\\"fillSupplyNodes2 initialized\\\"\\n        );\\n        table.push(7100854849048909700000000);\\n        table.push(7171863397539398800000000);\\n        table.push(7243582031514792790000000);\\n        table.push(7316017851829940720000000);\\n        table.push(7389178030348240130000000);\\n        table.push(7463069810651722530000000);\\n        table.push(7537700508758239760000000);\\n        table.push(7613077513845822160000000);\\n        table.push(7689208288984280380000000);\\n        table.push(7766100371874123180000000);\\n        table.push(7843761375592864410000000);\\n        table.push(7922198989348793050000000);\\n        table.push(8001420979242280980000000);\\n        table.push(8081435189034703790000000);\\n        table.push(8162249540925050830000000);\\n        table.push(8243872036334301340000000);\\n        table.push(8326310756697644350000000);\\n        table.push(8409573864264620790000000);\\n        table.push(8493669602907267000000000);\\n        table.push(8578606298936339670000000);\\n        table.push(8664392361925703070000000);\\n        table.push(8751036285544960100000000);\\n        table.push(8838546648400409700000000);\\n        table.push(8926932114884413800000000);\\n        table.push(9016201436033257940000000);\\n        table.push(9106363450393590520000000);\\n        table.push(9197427084897526430000000);\\n        table.push(9289401355746501690000000);\\n        table.push(9382295369303966710000000);\\n        table.push(9476118322997006380000000);\\n        table.push(9570879506226976440000000);\\n        table.push(9666588301289246200000000);\\n        table.push(9763254184302138660000000);\\n        table.push(9860886726145160050000000);\\n        table.push(9959495593406611650000000);\\n        table.push(10059090549340677800000000);\\n        table.push(10159681454834084600000000);\\n        table.push(10261278269382425400000000);\\n        table.push(10363891052076249700000000);\\n        table.push(10467529962597012200000000);\\n        table.push(10572205262222982300000000);\\n        table.push(10677927314845212100000000);\\n        table.push(10784706587993664200000000);\\n        table.push(10892553653873600800000000);\\n        table.push(11001479190412336800000000);\\n        table.push(11111493982316460200000000);\\n        table.push(11222608922139624800000000);\\n        table.push(11334835011361021000000000);\\n        table.push(11448183361474631200000000);\\n        table.push(11562665195089377500000000);\\n        table.push(11678291847040271300000000);\\n        table.push(11795074765510674000000000);\\n        table.push(11913025513165780700000000);\\n        table.push(12032155768297438500000000);\\n        table.push(12152477325980412900000000);\\n        table.push(12274002099240217000000000);\\n        table.push(12396742120232619200000000);\\n        table.push(12520709541434945400000000);\\n        table.push(12645916636849294900000000);\\n        table.push(12772375803217787800000000);\\n        table.push(12900099561249965700000000);\\n        table.push(13029100556862465400000000);\\n        table.push(13159391562431090100000000);\\n        table.push(13290985478055401000000000);\\n        table.push(13423895332835955000000000);\\n        table.push(13558134286164314600000000);\\n        table.push(13693715629025957700000000);\\n        table.push(13830652785316217300000000);\\n        table.push(13968959313169379500000000);\\n        table.push(14108648906301073300000000);\\n        table.push(14249735395364084000000000);\\n        table.push(14392232749317724800000000);\\n        table.push(14536155076810902000000000);\\n        table.push(14681516627579011000000000);\\n        table.push(14828331793854801100000000);\\n        table.push(14976615111793349100000000);\\n        table.push(15126381262911282600000000);\\n        table.push(15277645075540395400000000);\\n        table.push(15430421526295799400000000);\\n        table.push(15584725741558757400000000);\\n        table.push(15740572998974345000000000);\\n        table.push(15897978728964088500000000);\\n        table.push(16056958516253729400000000);\\n        table.push(16217528101416266700000000);\\n        table.push(16379703382430429400000000);\\n        table.push(16543500416254733700000000);\\n        table.push(16708935420417281000000000);\\n        table.push(16876024774621453800000000);\\n        table.push(17044785022367668300000000);\\n        table.push(17215232872591345000000000);\\n        table.push(17387385201317258500000000);\\n        table.push(17561259053330431100000000);\\n        table.push(17736871643863735400000000);\\n        table.push(17914240360302372800000000);\\n        table.push(18093382763905396500000000);\\n        table.push(18274316591544450500000000);\\n        table.push(18457059757459895000000000);\\n        table.push(18641630355034494000000000);\\n        table.push(18828046658584838900000000);\\n        table.push(19016327125170687300000000);\\n    }\\n\\n    function fillSupplyNodes3(uint256[] storage table) public {\\n        require(\\n            table[table.length - 1] < 19206490396422394200000000,\\n            \\\"fillSupplyNodes3 initialized\\\"\\n        );\\n        table.push(19206490396422394200000000);\\n        table.push(19398555300386618100000000);\\n        table.push(19592540853390484300000000);\\n        table.push(19788466261924389100000000);\\n        table.push(19986350924543633000000000);\\n        table.push(20186214433789069300000000);\\n        table.push(20388076578126960000000000);\\n        table.push(20591957343908229600000000);\\n        table.push(20797876917347311900000000);\\n        table.push(21005855686520785000000000);\\n        table.push(21215914243385992900000000);\\n        table.push(21428073385819852800000000);\\n        table.push(21642354119678051300000000);\\n        table.push(21858777660874831800000000);\\n        table.push(22077365437483580100000000);\\n        table.push(22298139091858415900000000);\\n        table.push(22521120482777000100000000);\\n        table.push(22746331687604770100000000);\\n        table.push(22973795004480817800000000);\\n        table.push(23203532954525626000000000);\\n        table.push(23435568284070882300000000);\\n        table.push(23669923966911591100000000);\\n        table.push(23906623206580707000000000);\\n        table.push(24145689438646514100000000);\\n        table.push(24387146333032979200000000);\\n        table.push(24631017796363309000000000);\\n        table.push(24877327974326942100000000);\\n        table.push(25126101254070211500000000);\\n        table.push(25377362266610913600000000);\\n        table.push(25631135889277022700000000);\\n        table.push(25887447248169792900000000);\\n        table.push(26146321720651490800000000);\\n        table.push(26407784937858005700000000);\\n        table.push(26671862787236585800000000);\\n        table.push(26938581415108951700000000);\\n        table.push(27207967229260041200000000);\\n        table.push(27480046901552641600000000);\\n        table.push(27754847370568168000000000);\\n        table.push(28032395844273849700000000);\\n        table.push(28312719802716588200000000);\\n        table.push(28595847000743754100000000);\\n        table.push(28881805470751191600000000);\\n        table.push(29170623525458703500000000);\\n        table.push(29462329760713290500000000);\\n        table.push(29756953058320423400000000);\\n    }\\n}\\n// solhint-enable\\n\\n// Copyright 2021 ToonCoin.COM\\n// http://tooncoin.com/license\\n// Full source code: http://tooncoin.com/sourcecode\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"winningCandidate\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"abstainedVoters\",\"type\":\"address[]\"}],\"name\":\"confirmConsensusAndUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToonTokenContractAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdElectionsAndUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"nextProposedDistributionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nextProposedDistributionAmount\",\"type\":\"uint256\"}],\"name\":\"proposeDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextProposedUpgradeImpl\",\"type\":\"address\"}],\"name\":\"proposeUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referencePrice\",\"type\":\"uint256\"}],\"name\":\"setBountyObligationReferencePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"nextToonTokenContractAddress\",\"type\":\"address\"}],\"name\":\"setToonTokenContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextMaintainerWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nextBountyWallet\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MaintainerV0","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}