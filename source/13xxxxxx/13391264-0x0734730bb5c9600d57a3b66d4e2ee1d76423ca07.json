{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IFroyoCat {\r\n    function adminMint(address[] calldata _toAddresses) external;\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n    \r\n    function update(\r\n        uint256 _nftId,\r\n        address _owner,\r\n        bool _claimed\r\n    ) external;\r\n\r\n    function get(uint256 _nftId)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            bool,\r\n            uint256\r\n        );\r\n}\r\n\r\ninterface IFroyoCatMachine {\r\n    function claim(uint256 _nftId) external;\r\n\r\n    function adminClaim(uint256 _nftId) external;\r\n}\r\n\r\ncontract FroyoCatMachine is IFroyoCatMachine, Ownable {\r\n    event Claim(address user, address to, uint256 nftId, uint256 time);\r\n\r\n    IFroyoCat froyoCat;\r\n\r\n    constructor(IFroyoCat _froyoCat) {\r\n        froyoCat = _froyoCat;\r\n    }\r\n\r\n    function updateFroyoCat(IFroyoCat _froyoCat) external onlyOwner {\r\n        froyoCat = _froyoCat;\r\n    }\r\n\r\n    function claim(uint256 _nftId) external override {\r\n        address nftOwner;\r\n        bool claimed;\r\n        (nftOwner, claimed, ) = froyoCat.get(_nftId);\r\n        require(_msgSender() == nftOwner, \"Error: not owner of NFT\");\r\n        require(!claimed, \"Error: NFT claimed already\");\r\n\r\n        froyoCat.transferFrom(address(this), nftOwner, _nftId);\r\n        froyoCat.update(_nftId, nftOwner, true);\r\n\r\n        emit Claim(_msgSender(), nftOwner, _nftId, block.timestamp);\r\n    }\r\n\r\n    function adminClaim(uint256 _nftId) external override onlyOwner {\r\n        address nftOwner;\r\n        bool claimed;\r\n        (nftOwner, claimed, ) = froyoCat.get(_nftId);\r\n        require(owner() != address(0), \"Error: NFT invalid\"); //NFT not exist\r\n        require(!claimed, \"Error: NFT claimed already\");\r\n\r\n        froyoCat.transferFrom(address(this), nftOwner, _nftId);\r\n        froyoCat.update(_nftId, nftOwner, true);\r\n\r\n        emit Claim(_msgSender(), nftOwner, _nftId, block.timestamp);\r\n    }\r\n\r\n    function get(uint256 _nftId)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            bool,\r\n            uint256\r\n        )\r\n    {\r\n        return froyoCat.get(_nftId);\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IFroyoCat\",\"name\":\"_froyoCat\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"adminClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFroyoCat\",\"name\":\"_froyoCat\",\"type\":\"address\"}],\"name\":\"updateFroyoCat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FroyoCatMachine","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004c5841e654a2ec5621007477419d78c8630f3680","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://01b82abc6f2a229a035fffffddd939c108be527d69259d3e50805c54a3a18b10"}]}