{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/flattened/ProtectedMultiPath.sol\": {\r\n      \"content\": \"// File: original_contracts/routers/IRouter.sol\\n\\npragma solidity 0.7.5;\\n\\ninterface IRouter {\\n\\n    /**\\n    * @dev Certain routers/exchanges needs to be initialized.\\n    * This method will be called from Augustus\\n    */\\n    function initialize(bytes calldata data) external;\\n\\n    /**\\n    * @dev Returns unique identifier for the router\\n    */\\n    function getKey() external pure returns(bytes32);\\n\\n    event Swapped(\\n        bytes16 uuid,\\n        address initiator,\\n        address indexed beneficiary,\\n        address indexed srcToken,\\n        address indexed destToken,\\n        uint256 srcAmount,\\n        uint256 receivedAmount,\\n        uint256 expectedAmount\\n    );\\n\\n    event Bought(\\n        bytes16 uuid,\\n        address initiator,\\n        address indexed beneficiary,\\n        address indexed srcToken,\\n        address indexed destToken,\\n        uint256 srcAmount,\\n        uint256 receivedAmount\\n    );\\n\\n    event FeeTaken(\\n        uint256 fee,\\n        uint256 partnerShare,\\n        uint256 paraswapShare\\n    );\\n}\\n\\n// File: original_contracts/IAugustusSwapperV5.sol\\n\\npragma solidity 0.7.5;\\n\\ninterface IAugustusSwapperV5 {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n}\\n\\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/utils/Address.sol\\n\\n\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n// File: original_contracts/ITokenTransferProxy.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ninterface ITokenTransferProxy {\\n\\n    function transferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        external;\\n}\\n\\n// File: original_contracts/lib/Utils.sol\\n\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n\\n\\ninterface IERC20Permit {\\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\\nlibrary Utils {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address constant ETH_ADDRESS = address(\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\n    );\\n    \\n    uint256 constant MAX_UINT = type(uint256).max;\\n\\n    /**\\n   * @param fromToken Address of the source token\\n   * @param fromAmount Amount of source tokens to be swapped\\n   * @param toAmount Minimum destination token amount expected out of this swap\\n   * @param expectedAmount Expected amount of destination tokens without slippage\\n   * @param beneficiary Beneficiary address\\n   * 0 then 100% will be transferred to beneficiary. Pass 10000 for 100%\\n   * @param path Route to be taken for this swap to take place\\n\\n   */\\n    struct SellData {\\n        address fromToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        Utils.Path[] path;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct MegaSwapSellData {\\n        address fromToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        Utils.MegaSwapPath[] path;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct SimpleData {\\n        address fromToken;\\n        address toToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address[] callees;\\n        bytes exchangeData;\\n        uint256[] startIndexes;\\n        uint256[] values;\\n        address payable beneficiary;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct Adapter {\\n        address payable adapter;\\n        uint256 percent;\\n        uint256 networkFee;\\n        Route[] route;\\n    }\\n\\n    struct Route {\\n        uint256 index;//Adapter at which index needs to be used\\n        address targetExchange;\\n        uint percent;\\n        bytes payload;\\n        uint256 networkFee;//Network fee is associated with 0xv3 trades\\n    }\\n\\n    struct MegaSwapPath {\\n        uint256 fromAmountPercent;\\n        Path[] path;\\n    }\\n\\n    struct Path {\\n        address to;\\n        uint256 totalNetworkFee;//Network fee is associated with 0xv3 trades\\n        Adapter[] adapters;\\n    }\\n\\n    function ethAddress() internal pure returns (address) {return ETH_ADDRESS;}\\n\\n    function maxUint() internal pure returns (uint256) {return MAX_UINT;}\\n\\n    function approve(\\n        address addressToApprove,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        if (token != ETH_ADDRESS) {\\n            IERC20 _token = IERC20(token);\\n\\n            uint allowance = _token.allowance(address(this), addressToApprove);\\n\\n            if (allowance < amount) {\\n                _token.safeApprove(addressToApprove, 0);\\n                _token.safeIncreaseAllowance(addressToApprove, MAX_UINT);\\n            }\\n        }\\n    }\\n\\n    function transferTokens(\\n        address token,\\n        address payable destination,\\n        uint256 amount\\n    )\\n    internal\\n    {\\n        if (amount > 0) {\\n            if (token == ETH_ADDRESS) {\\n                (bool result, ) = destination.call{value: amount, gas: 10000}(\\\"\\\");\\n                require(result, \\\"Failed to transfer Ether\\\");\\n            }\\n            else {\\n                IERC20(token).safeTransfer(destination, amount);\\n            }\\n        }\\n\\n    }\\n\\n    function tokenBalance(\\n        address token,\\n        address account\\n    )\\n    internal\\n    view\\n    returns (uint256)\\n    {\\n        if (token == ETH_ADDRESS) {\\n            return account.balance;\\n        } else {\\n            return IERC20(token).balanceOf(account);\\n        }\\n    }\\n\\n    function permit(\\n        address token,\\n        bytes memory permit\\n    )\\n        internal\\n    {\\n        if (permit.length == 32 * 7) {\\n            (bool success,) = token.call(abi.encodePacked(IERC20Permit.permit.selector, permit));\\n            require(success, \\\"Permit failed\\\");\\n        }\\n    }\\n\\n}\\n\\n// File: original_contracts/adapters/IAdapter.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\ninterface IAdapter {\\n\\n    /**\\n    * @dev Certain adapters needs to be initialized.\\n    * This method will be called from Augustus\\n    */\\n    function initialize(bytes calldata data) external;\\n\\n    /**\\n   * @dev The function which performs the swap on an exchange.\\n   * @param fromToken Address of the source token\\n   * @param toToken Address of the destination token\\n   * @param fromAmount Amount of source tokens to be swapped\\n   * @param networkFee Network fee to be used in this router\\n   * @param route Route to be followed\\n   */\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 networkFee,\\n        Utils.Route[] calldata route\\n    )\\n        external\\n        payable;\\n}\\n\\n// File: original_contracts/AugustusStorage.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ncontract AugustusStorage {\\n\\n    struct FeeStructure {\\n        uint256 partnerShare;\\n        bool noPositiveSlippage;\\n        bool positiveSlippageToUser;\\n        uint16 feePercent;\\n        string partnerId;\\n        bytes data;\\n    }\\n\\n    ITokenTransferProxy internal tokenTransferProxy;\\n    address payable internal feeWallet;\\n    \\n    mapping(address => FeeStructure) internal registeredPartners;\\n\\n    mapping (bytes4 => address) internal selectorVsRouter;\\n    mapping (bytes32 => bool) internal adapterInitialized;\\n    mapping (bytes32 => bytes) internal adapterVsData;\\n\\n    mapping (bytes32 => bytes) internal routerData;\\n    mapping (bytes32 => bool) internal routerInitialized;\\n\\n\\n    bytes32 public constant WHITELISTED_ROLE = keccak256(\\\"WHITELISTED_ROLE\\\");\\n\\n    bytes32 public constant ROUTER_ROLE = keccak256(\\\"ROUTER_ROLE\\\");\\n\\n}\\n\\n// File: original_contracts/fee/FeeModel.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\n\\ncontract FeeModel is AugustusStorage {\\n    using SafeMath for uint256;\\n\\n    uint256 public immutable partnerSharePercent;\\n    uint256 public immutable maxFeePercent;\\n\\n    constructor(\\n        uint256 _partnerSharePercent,\\n        uint256 _maxFeePercent\\n    )\\n        public\\n    {\\n        partnerSharePercent = _partnerSharePercent;\\n        maxFeePercent = _maxFeePercent;\\n    }\\n\\n    function takeFeeAndTransferTokens(\\n        address toToken,\\n        uint256 expectedAmount,\\n        uint256 receivedAmount,\\n        address payable beneficiary,\\n        address payable partner,\\n        uint256 feePercent\\n\\n    )\\n        internal\\n    {\\n        uint256 remainingAmount = 0;\\n        uint256 fee = 0;\\n        \\n        if ( feePercent > 0 ) {\\n            FeeStructure memory feeStructure = registeredPartners[partner];\\n            \\n            if (feeStructure.partnerShare > 0) {\\n                fee = _takeFee(\\n                    feePercent > maxFeePercent ? maxFeePercent : feePercent,\\n                    toToken,\\n                    receivedAmount,\\n                    expectedAmount,\\n                    feeStructure.partnerShare,\\n                    feeStructure.noPositiveSlippage,\\n                    feeStructure.positiveSlippageToUser,\\n                    partner\\n                );\\n            }\\n            else if (partner != address(0)) {\\n                fee = _takeFee(\\n                    feePercent > maxFeePercent ? maxFeePercent : feePercent,\\n                    toToken,\\n                    receivedAmount,\\n                    expectedAmount,\\n                    partnerSharePercent,\\n                    false,\\n                    true,\\n                    partner\\n                );\\n            }\\n        }\\n\\n        remainingAmount = receivedAmount.sub(fee);\\n\\n        //If there is a positive slippage and no partner fee then 50% goes to paraswap and 50% to the user\\n        if ((remainingAmount > expectedAmount) && fee == 0) {\\n            uint256 positiveSlippageShare = remainingAmount.sub(expectedAmount).div(2);\\n            remainingAmount = remainingAmount.sub(positiveSlippageShare);\\n            Utils.transferTokens(toToken, feeWallet, positiveSlippageShare);\\n        }\\n\\n        Utils.transferTokens(toToken, beneficiary, remainingAmount);\\n    }\\n\\n    function _takeFee(\\n        uint256 feePercent,\\n        address toToken,\\n        uint256 receivedAmount,\\n        uint256 expectedAmount,\\n        uint256 partnerSharePercent,\\n        bool noPositiveSlippage,\\n        bool positiveSlippageToUser,\\n        address payable partner\\n    )\\n        private\\n        returns(uint256 fee)\\n    {\\n\\n        uint256 partnerShare = 0;\\n        uint256 paraswapShare = 0;\\n\\n        if (!noPositiveSlippage && feePercent <= 50 && receivedAmount > expectedAmount) {\\n            uint256 halfPositiveSlippage = receivedAmount.sub(expectedAmount).div(2);\\n            //Calculate total fee to be taken\\n            fee = expectedAmount.mul(feePercent).div(10000);\\n            //Calculate partner's share\\n            partnerShare = fee.mul(partnerSharePercent).div(10000);\\n            //All remaining fee is paraswap's share\\n            paraswapShare = fee.sub(partnerShare);\\n            paraswapShare = paraswapShare.add(halfPositiveSlippage);\\n\\n            fee = fee.add(halfPositiveSlippage);\\n\\n            if (!positiveSlippageToUser) {\\n                partnerShare = partnerShare.add(halfPositiveSlippage);\\n                fee = fee.add(halfPositiveSlippage);\\n            }\\n        }\\n        else {\\n            //Calculate total fee to be taken\\n            fee = receivedAmount.mul(feePercent).div(10000);\\n            //Calculate partner's share\\n            partnerShare = fee.mul(partnerSharePercent).div(10000);\\n            //All remaining fee is paraswap's share\\n            paraswapShare = fee.sub(partnerShare);\\n        }\\n        Utils.transferTokens(toToken, partner, partnerShare);\\n        Utils.transferTokens(toToken, feeWallet, paraswapShare);\\n\\n        return (fee);\\n    }\\n}\\n\\n// File: original_contracts/routers/ProtectedMultiPath.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\n\\n\\ncontract ProtectedMultiPath is FeeModel, IRouter {\\n    using SafeMath for uint256;\\n\\n    constructor(\\n        uint256 _partnerSharePercent,\\n        uint256 _maxFeePercent\\n    )\\n        FeeModel(\\n            _partnerSharePercent,\\n            _maxFeePercent\\n        )\\n        public\\n    {\\n\\n    }\\n\\n    function initialize(bytes calldata data) override external {\\n        revert(\\\"METHOD NOT IMPLEMENTED\\\");\\n    }\\n\\n    function getKey() override external pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(\\\"PROTECTED_MULTIPATH_ROUTER\\\", \\\"1.0.0\\\"));\\n    }\\n\\n    /**\\n   * @dev The function which performs the multi path swap.\\n   * @param data Data required to perform swap.\\n   */\\n    function protectedMultiSwap(\\n        Utils.SellData memory data\\n    )\\n        public\\n        payable\\n        returns (uint256)\\n    {   \\n        require(data.deadline >= block.timestamp, \\\"Deadline breached\\\");\\n\\n        address fromToken = data.fromToken;\\n        uint256 fromAmount = data.fromAmount;\\n        uint256 toAmount = data.toAmount;\\n        uint256 expectedAmount = data.expectedAmount;\\n        address payable beneficiary = data.beneficiary == address(0) ? msg.sender : data.beneficiary;\\n        Utils.Path[] memory path = data.path;\\n        address toToken = path[path.length - 1].to;\\n\\n        require(toAmount > 0, \\\"To amount can not be 0\\\");\\n\\n        //If source token is not ETH than transfer required amount of tokens\\n        //from sender to this contract\\n        transferTokensFromProxy(fromToken, fromAmount, data.permit);\\n\\n        performSwap(\\n            fromToken,\\n            fromAmount,\\n            path\\n        );\\n\\n        uint256 receivedAmount = Utils.tokenBalance(\\n            toToken,\\n            address(this)\\n        );\\n\\n        require(\\n            receivedAmount >= toAmount,\\n            \\\"Received amount of tokens are less then expected\\\"\\n        );\\n\\n\\n        takeFeeAndTransferTokens(\\n            toToken,\\n            expectedAmount,\\n            receivedAmount,\\n            beneficiary,\\n            data.partner,\\n            data.feePercent\\n        );\\n\\n        retrieveEth();\\n\\n        emit Swapped(\\n            data.uuid,\\n            msg.sender,\\n            beneficiary,\\n            fromToken,\\n            toToken,\\n            fromAmount,\\n            receivedAmount,\\n            expectedAmount\\n        );\\n\\n        return receivedAmount;\\n    }\\n\\n    /**\\n   * @dev The function which performs the mega path swap.\\n   * @param data Data required to perform swap.\\n   */\\n    function protectedMegaSwap(\\n        Utils.MegaSwapSellData memory data\\n    )\\n        public\\n        payable\\n        returns (uint256)\\n    {\\n        require(data.deadline >= block.timestamp, \\\"Deadline breached\\\");\\n        address fromToken = data.fromToken;\\n        uint256 fromAmount = data.fromAmount;\\n        uint256 toAmount = data.toAmount;\\n        uint256 expectedAmount = data.expectedAmount;\\n        address payable beneficiary = data.beneficiary == address(0) ? msg.sender : data.beneficiary;\\n        Utils.MegaSwapPath[] memory path = data.path;\\n        address toToken = path[0].path[path[0].path.length - 1].to;\\n\\n        require(toAmount > 0, \\\"To amount can not be 0\\\");\\n\\n        //if fromToken is not ETH then transfer tokens from user to this contract\\n        transferTokensFromProxy(fromToken, fromAmount, data.permit);\\n\\n        for (uint8 i = 0; i < uint8(path.length); i++) {\\n            uint256 _fromAmount = fromAmount.mul(path[i].fromAmountPercent).div(10000);\\n            if (i == path.length - 1) {\\n                _fromAmount = Utils.tokenBalance(address(fromToken), address(this));\\n            }\\n            performSwap(\\n                fromToken,\\n                _fromAmount,\\n                path[i].path\\n            );\\n        }\\n\\n        uint256 receivedAmount = Utils.tokenBalance(\\n            toToken,\\n            address(this)\\n        );\\n\\n        require(\\n            receivedAmount >= toAmount,\\n            \\\"Received amount of tokens are less then expected\\\"\\n        );\\n\\n\\n        takeFeeAndTransferTokens(\\n            toToken,\\n            expectedAmount,\\n            receivedAmount,\\n            beneficiary,\\n            data.partner,\\n            data.feePercent\\n        );\\n\\n        retrieveEth();\\n\\n        emit Swapped(\\n            data.uuid,\\n            msg.sender,\\n            beneficiary,\\n            fromToken,\\n            toToken,\\n            fromAmount,\\n            receivedAmount,\\n            expectedAmount\\n        );\\n\\n        return receivedAmount;\\n    }\\n\\n    //Helper function to perform swap\\n    function performSwap(\\n        address fromToken,\\n        uint256 fromAmount,\\n        Utils.Path[] memory path\\n    )\\n        private\\n    {\\n\\n        require(path.length > 0, \\\"Path not provided for swap\\\");\\n\\n        //Assuming path will not be too long to reach out of gas exception\\n        for (uint i = 0; i < path.length; i++) {\\n            //_fromToken will be either fromToken or toToken of the previous path\\n            address _fromToken = i > 0 ? path[i - 1].to : fromToken;\\n            address _toToken = path[i].to;\\n\\n            uint256 _fromAmount = i > 0 ? Utils.tokenBalance(_fromToken, address(this)) : fromAmount;\\n            if (i > 0 && _fromToken == Utils.ethAddress()) {\\n                _fromAmount = _fromAmount.sub(path[i].totalNetworkFee);\\n            }\\n\\n            for (uint j = 0; j < path[i].adapters.length; j++) {\\n                Utils.Adapter memory adapter = path[i].adapters[j];\\n\\n                //Check if exchange is supported\\n                require(\\n                    IAugustusSwapperV5(address(this)).hasRole(WHITELISTED_ROLE, adapter.adapter),\\n                    \\\"Exchange not whitelisted\\\"\\n                );\\n\\n                //Calculating tokens to be passed to the relevant exchange\\n                //percentage should be 200 for 2%\\n                uint fromAmountSlice = _fromAmount.mul(adapter.percent).div(10000);\\n                uint256 value = adapter.networkFee;\\n\\n                if (i > 0 && j == path[i].adapters.length.sub(1)) {\\n                    uint256 remBal = Utils.tokenBalance(address(_fromToken), address(this));\\n\\n                    fromAmountSlice = remBal;\\n\\n                    if (address(_fromToken) == Utils.ethAddress()) {\\n                        //subtract network fee\\n                        fromAmountSlice = fromAmountSlice.sub(value);\\n                    }\\n                }\\n\\n                //DELEGATING CALL TO THE ADAPTER\\n                (bool success,) = adapter.adapter.delegatecall(\\n                    abi.encodeWithSelector(\\n                        IAdapter.swap.selector,\\n                        _fromToken,\\n                        _toToken,\\n                        fromAmountSlice,\\n                        adapter.networkFee,\\n                        adapter.route\\n                    )\\n                );\\n\\n                require(success, \\\"Call to adapter failed\\\");\\n            }\\n        }\\n    }\\n\\n    function transferTokensFromProxy(\\n        address token,\\n        uint256 amount,\\n        bytes memory permit\\n    )\\n      private\\n    {\\n        if (token != Utils.ethAddress()) {\\n            Utils.permit(token, permit);\\n            tokenTransferProxy.transferFrom(\\n                token,\\n                msg.sender,\\n                address(this),\\n                amount\\n            );\\n        }\\n    }\\n\\n    function retrieveEth() private {\\n        uint256 balance = address(this).balance;\\n        if (balance > 0) {\\n            (bool result, ) = msg.sender.call{value: balance, gas: 10000}(\\\"\\\");\\n            require(result, \\\"Failed to transfer Ether\\\");\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_partnerSharePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFeePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partnerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paraswapShare\",\"type\":\"uint256\"}],\"name\":\"FeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROUTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELISTED_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerSharePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fromAmountPercent\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalNetworkFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Utils.Route[]\",\"name\":\"route\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Utils.Adapter[]\",\"name\":\"adapters\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Utils.Path[]\",\"name\":\"path\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Utils.MegaSwapPath[]\",\"name\":\"path\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes16\",\"name\":\"uuid\",\"type\":\"bytes16\"}],\"internalType\":\"struct Utils.MegaSwapSellData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"protectedMegaSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalNetworkFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Utils.Route[]\",\"name\":\"route\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Utils.Adapter[]\",\"name\":\"adapters\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Utils.Path[]\",\"name\":\"path\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes16\",\"name\":\"uuid\",\"type\":\"bytes16\"}],\"internalType\":\"struct Utils.SellData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"protectedMultiSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ProtectedMultiPath","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000213400000000000000000000000000000000000000000000000000000000000001f4","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}