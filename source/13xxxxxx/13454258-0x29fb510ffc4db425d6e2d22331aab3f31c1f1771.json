{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Vesting/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../ProxyClones/OwnableForClones.sol\\\";\\n\\n// Flexible Vesting Schedule with easy Snapshot compatibility designed by Phil Thomsen @theDAC\\n//for more information please visit: github.cikm\\n\\n\\ncontract DACVesting is OwnableForClones {\\n\\n  IERC20 public token;\\n  // Blocktime when the release schedule starts\\n  uint256 public startTime;\\n\\n  //everything is released once blocktime >= startTime + duration\\n  uint256 public duration;\\n\\n  // 1= linear; 2 = quadratic etc.\\n  uint256 public exp;\\n\\n  // cliff: 100 = 1%;\\n  uint256 public cliff;\\n  // indicates how much earlier than startTime the cliff amount gets released\\n  uint256 public cliffDelay;\\n\\n  // maps what each user has deposited total / gotten back out total; Deposit>=Drained at all times\\n  mapping(address => uint256) private totalDeposit;\\n  mapping(address => uint256) private drainedAmount;\\n\\n  event TokensDeposited(address indexed beneficiary, uint256 indexed amount);\\n  event TokensRetrieved(address indexed beneficiary, uint256 indexed amount);\\n  event VestingDecreased(address indexed beneficiary, uint256 indexed amount);\\n\\n  /**\\n   * @notice initializes the contract, with all parameters set at once\\n   * @param _token the only token contract that is accepted in this vesting instance\\n   * @param _owner the owner that can call decreaseVesting, set address(0) to have no owner\\n   * @param _cliffInTenThousands amount of tokens to be released ahead of startTime: 10000 => 100%\\n   * @param _cliffDelayInDays the cliff can be retrieved this many days before StartTime of the schedule\\n   * @param _exp this sets the pace of the schedule. 0 is instant, 1 is linear over time, 2 is quadratic over time etc.\\n   */\\n  function initialize\\n   (\\n    address _token,\\n    address _owner,\\n    uint256 _startInDays,\\n    uint256 _durationInDays,\\n    uint256 _cliffInTenThousands,\\n    uint256 _cliffDelayInDays,\\n    uint256 _exp\\n   )\\n    external initializer\\n   {\\n    __Ownable_init();\\n    token = IERC20(_token);\\n    startTime = block.timestamp + _startInDays * 86400;\\n    duration = _durationInDays * 86400;\\n    cliff = _cliffInTenThousands;\\n    cliffDelay = _cliffDelayInDays * 86400;\\n    exp = _exp;\\n    if (_owner == address(0)) {\\n      renounceOwnership();\\n    }else {\\n      transferOwnership(_owner);\\n    }\\n  }\\n\\n  /**\\n  * @notice same as depositFor but with memory array as input for gas savings\\n  */\\n  function depositForCrowd(address[] memory _recipient, uint256[] memory _amount) external {\\n    require(_recipient.length == _amount.length, \\\"lengths must match\\\");\\n    for (uint256 i = 0; i < _recipient.length; i++) {\\n      _rawDeposit(msg.sender, _recipient[i], _amount[i]);    \\n    }\\n  }\\n\\n  /**\\n  * @notice sender can deposit tokens for someone else\\n  * @param _recipient the use to deposit for \\n  * @param _amount the amount of tokens to deposit with all decimals\\n  */\\n  function depositFor(address _recipient, uint256 _amount) external {\\n    _rawDeposit(msg.sender, _recipient, _amount);\\n  }\\n\\n  /**\\n  * @notice deposits the amount owned by _recipient from sender for _recipient into this contract\\n  * @param _recipient the address the funds are vested for\\n  * @dev only useful in specific contexts like having to burn a wallet and deposit it back in the vesting contract e.g.\\n  */\\n  function depositAllFor(address _recipient) external {\\n    _rawDeposit(msg.sender, _recipient, token.balanceOf(_recipient));\\n  }\\n\\n  /**\\n  * @notice user method to retrieve all that is retrievable\\n  * @notice reverts when there is nothing to retrieve to save gas\\n  */\\n  function retrieve() external {\\n    uint256 amount = getRetrievableAmount(msg.sender);\\n    require(amount != 0, \\\"nothing to retrieve\\\");\\n    _rawRetrieve(msg.sender, amount);\\n  }\\n\\n  /**\\n  * @notice retrieve for an array of addresses at once, useful if users are unable to use the retrieve method or to save gas with mass retrieves\\n  * @dev does NOT revert when one of the accounts has nothing to retrieve\\n  */\\n  function retrieveFor(address[] memory accounts) external {\\n    for (uint256 i = 0; i < accounts.length; i++) {\\n      uint256 amount = getRetrievableAmount(accounts[i]);\\n      _rawRetrieve(accounts[i], amount);\\n    }\\n  }\\n\\n  /**\\n  * @notice if the ownership got renounced (owner == 0), then this function is uncallable and the vesting is trustless for benificiary\\n  * @dev only callable by the owner of this instance\\n  * @dev amount will be stuck in the contract and effectively burned\\n  */\\n  function decreaseVesting(address _account, uint256 amount) external onlyOwner {\\n    require(drainedAmount[_account] <= totalDeposit[_account] - amount, \\\"deposit has to be >= drainedAmount\\\");\\n    totalDeposit[_account] -= amount;\\n    emit VestingDecreased(_account, amount);\\n  }\\n\\n  /**\\n  * @return the total amount that got deposited for _account over the whole lifecycle with all decimal places\\n  */\\n  function getTotalDeposit(address _account) external view returns(uint256) {\\n    return totalDeposit[_account];\\n  }\\n\\n  /** \\n  * @return the amount of tokens still in vesting for _account\\n  */\\n  function getTotalVestingBalance(address _account) external view returns(uint256) {\\n    return totalDeposit[_account] - drainedAmount[_account];\\n  }\\n\\n  /**\\n  * @return the percentage that is retrievable, 100 = 100%\\n  */\\n  function getRetrievablePercentage() external view returns(uint256) {\\n    return _getPercentage() / 100;\\n  }\\n\\n  /**\\n  * @notice useful for easy snapshot implementation\\n  * @return the balance of token for this account plus the amount that is still vested for account\\n  */\\n  function balanceOf(address account) external view returns(uint256) {\\n    return token.balanceOf(account) + totalDeposit[account] - drainedAmount[account];\\n  }\\n\\n  /**\\n  * @return the amount that _account can retrieve at that block with all decimals\\n  */\\n  function getRetrievableAmount(address _account) public view returns(uint256) {\\n    if(_getPercentage() * totalDeposit[_account] / 1e4 > drainedAmount[_account]) {\\n      return (_getPercentage() * totalDeposit[_account] / 1e4) - drainedAmount[_account];\\n    }else {\\n      return 0;\\n    }\\n  }\\n\\n  function _rawDeposit(address _from, address _for, uint256 _amount) private {\\n    require(token.transferFrom(_from, address(this), _amount));\\n    totalDeposit[_for] += _amount;\\n    emit TokensDeposited(_for, _amount);\\n  }\\n\\n  function _rawRetrieve(address account, uint256 amount) private {\\n    drainedAmount[account] += amount;\\n    token.transfer(account, amount);\\n    assert(drainedAmount[account] <= totalDeposit[account]);\\n    emit TokensRetrieved(account, amount);\\n  }\\n\\n  /**\\n  * @dev the core calculation method\\n  * @dev returns 1e4 for 100%; 1e3 for 10%; 1e2 for 1%; 1e1 for 0.1% and 1e0 for 0.01%\\n  */\\n  function _getPercentage() private view returns(uint256) {\\n    if (cliff == 0) {\\n      return _getPercentageNoCliff();\\n    }else {\\n      return _getPercentageWithCliff();\\n    }\\n  }\\n\\n  function _getPercentageNoCliff() private view returns(uint256) {\\n    if (startTime > block.timestamp) {\\n      return 0;\\n    }else if (startTime + duration > block.timestamp) {\\n      return (1e4 * (block.timestamp - startTime)**exp) / duration**exp;\\n    }else {\\n      return 1e4;\\n    }\\n  }\\n\\n  function _getPercentageWithCliff() private view returns(uint256) {\\n    if (block.timestamp + cliffDelay < startTime) {\\n      return 0;\\n    }else if (block.timestamp < startTime) {\\n      return cliff;\\n    }else if (1e4 * (block.timestamp - startTime)**exp / duration**exp + cliff < 1e4) {\\n      return (1e4 * (block.timestamp - startTime)**exp / duration**exp) + cliff;\\n    }else {\\n      return 1e4;\\n    }\\n  }\\n}\"\r\n    },\r\n    \"/contracts/ProxyClones/OwnableForClones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ContextForClones.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableForClones is ContextForClones {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/ProxyClones/ContextForClones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextForClones is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRetrieved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VestingDecreased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliffDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"depositAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipient\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"depositForCrowd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getRetrievableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRetrievablePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTotalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTotalVestingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffInTenThousands\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDelayInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exp\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"retrieveFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DACVesting","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}