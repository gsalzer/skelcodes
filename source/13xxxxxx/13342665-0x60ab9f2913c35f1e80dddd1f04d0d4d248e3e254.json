{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/LootCreativeDomain.sol\r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\n\r\n\r\ninterface LCDProject {\r\n    function mintWithLoot(address minter, uint256 tokenId) external;\r\n    function mintWithoutLoot(address minter, uint256 tokenId) external payable;\r\n    function mintAsCurator(address minter, uint256 tokenId) external;\r\n    function getProps(uint256 tokenId) external view returns(string memory);\r\n    function tokenURI(uint256 tokenId) external view returns(string memory);\r\n    function ownerOf(uint256 tokenId) external view returns(address);\r\n}\r\n\r\ninterface LCDCustomProject {\r\n    function mintCustom(address minter, uint256 tokenId) external payable;\r\n    function mintCustomAsCurator(address minter, uint256 tokenId) external;\r\n    function getProps(uint256 tokenId) external view returns(string memory);\r\n    function tokenURI(uint256 tokenId) external view returns(string memory);\r\n    function ownerOf(uint256 tokenId) external view returns(address);\r\n}\r\n\r\ninterface LootInterface {\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n}\r\n\r\n\r\ncontract LootCreativeDomain is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private registryPrice = 50000000000000000; // initiated at 0.05 ETH\r\n    uint256 private customPropPrice = 10000000000000000; // initiated at 0.01 ETH\r\n\r\n    uint256 private constant NUM_LOOT = 8000;\r\n    uint256 public protocolClaimableFees;\r\n\r\n    address public lootAddress = 0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7;\r\n    LootInterface lootContract = LootInterface(lootAddress);\r\n\r\n    address public gov;\r\n    address public protocol;\r\n    IERC20 public lcdToken;\r\n\r\n    mapping(address => Project) projectRegistry;\r\n\r\n    mapping(address => mapping(uint256 => string)) projectToTokenIdToLambdaProp;\r\n    mapping(address => mapping(uint256 => string)) projectToTokenIdToOmegaProp;\r\n    mapping(address => mapping(uint256 => string)) projectToTokenIdToCustomURI;\r\n\r\n    mapping(address => uint256) affiliateOrCuratorFeesClaimable;\r\n    mapping(address => mapping(uint256 => bool)) tokenRegistry;\r\n\r\n    event ProjectRegister(\r\n        address indexed _project,\r\n        uint256 _lootPrice,\r\n        uint256 _nonLootPrice,\r\n        uint256 _nonLootMintCap,\r\n        uint256 _curatorMintCap,\r\n        uint256 _timestamp,\r\n        bool _isCustomProject\r\n    );\r\n\r\n    event Endorse(\r\n        address indexed _project,\r\n        uint256 _amountPerMint,\r\n        uint256 _timestamp\r\n    );\r\n\r\n    event RevokeEndorse(\r\n        address indexed _project,\r\n        uint256 _timestamp\r\n    );\r\n\r\n    event LCDMint(\r\n        address indexed _project,\r\n        address indexed _minter,\r\n        uint256 _tokenId,\r\n        bool _mintWithLoot\r\n    );\r\n\r\n    event FeeClaim(\r\n        address indexed _claimer,\r\n        uint256 _amount,\r\n        uint256 _timestamp\r\n    );\r\n\r\n    event ProtocolClaim(\r\n        uint256 _amount,\r\n        uint256 _timestamp\r\n    );\r\n\r\n    event LambdaPropSet(\r\n        address indexed _project,\r\n        uint256 indexed _tokenId,\r\n        string _lambdaProp,\r\n        address indexed _affiliate\r\n    );\r\n\r\n    event OmegaPropSet(\r\n        address indexed _project,\r\n        uint256 indexed _tokenId,\r\n        string _omegaProp,\r\n        address indexed _affiliate\r\n    );\r\n\r\n    event CustomURISet(\r\n        address indexed _project,\r\n        uint256 indexed _tokenId,\r\n        string _customURI,\r\n        address indexed _affiliate\r\n    );\r\n\r\n    struct Project {\r\n        address curator;\r\n        uint256 lootPrice;\r\n        uint256 nonLootPrice;\r\n        uint256 nonLootMintCap;\r\n        uint256 nonLootMints;\r\n        uint256 curatorMintCap;\r\n        uint256 curatorMints;\r\n        uint256 endorsementPerMint;\r\n        bool isCustomURIEnabled;\r\n        bool isCustomProject;\r\n    }\r\n\r\n    constructor(IERC20 _lcdToken) public {\r\n        gov = msg.sender;\r\n        protocol = msg.sender;\r\n        lcdToken = _lcdToken;\r\n    }\r\n\r\n    modifier onlyGov {\r\n        require(msg.sender == gov, \"Not gov\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyProtocol {\r\n        require(msg.sender == protocol, \"Not protocol\");\r\n        _;\r\n    }\r\n\r\n    /*\r\n    *\r\n    * Mint\r\n    *\r\n    */\r\n\r\n    /*\r\n    * Mint on standard projects as Loot holder\r\n    */\r\n    function mintWithLoot(address _project, uint256 _lootId) public payable nonReentrant {\r\n        Project memory project = projectRegistry[_project];\r\n        require(lootContract.ownerOf(_lootId) == msg.sender, \"Not owner\");\r\n        require(msg.value == project.lootPrice, \"Incorrect value\");\r\n        require(!project.isCustomProject, \"Custom project\");\r\n\r\n        LCDProject(_project).mintWithLoot(msg.sender, _lootId);\r\n\r\n        _registerId(_project, _lootId);\r\n        _registerFeesFromMint(_project, project.lootPrice);\r\n        _distributeEndorsement(msg.sender, project.endorsementPerMint);\r\n\r\n        emit LCDMint(_project, msg.sender, _lootId, true);\r\n    }\r\n\r\n    /*\r\n    * Mint on standard projects as non-Loot holder\r\n    * Note that the tokenId is not accepted as a param; it's generated linearly\r\n    */\r\n    function mintWithoutLoot(address _project) public payable nonReentrant {\r\n        Project memory project = projectRegistry[_project];\r\n        require(msg.value == project.nonLootPrice, \"Incorrect value\");\r\n        require(project.nonLootMints < project.nonLootMintCap, \"Capped\");\r\n        require(!project.isCustomProject, \"Custom project\");\r\n\r\n        project.nonLootMints++;\r\n        uint256 tokenId = NUM_LOOT.add(project.nonLootMints);\r\n\r\n        LCDProject(_project).mintWithoutLoot(msg.sender, tokenId);\r\n\r\n        _registerId(_project, tokenId);\r\n        _registerFeesFromMint(_project, project.nonLootPrice);\r\n        _distributeEndorsement(msg.sender, project.endorsementPerMint);\r\n\r\n        emit LCDMint(_project, msg.sender, tokenId, false);\r\n    }\r\n\r\n    /*\r\n    * Mint on custom projects as anyone\r\n    */\r\n    function mintCustom(address _project, uint256 _tokenId) public payable {\r\n        Project memory project = projectRegistry[_project];\r\n        require(project.isCustomProject, \"Not custom project\");\r\n        require(msg.value == project.nonLootPrice, \"Incorrect value\");\r\n        require(_tokenId > 0 && _tokenId <= project.nonLootMintCap, \"Invalid id\");\r\n\r\n        LCDCustomProject(_project).mintCustom(msg.sender, _tokenId);\r\n        project.nonLootMints++;\r\n\r\n        _registerId(_project, _tokenId);\r\n        _registerFeesFromMint(_project, project.nonLootPrice);\r\n        _distributeEndorsement(msg.sender, project.endorsementPerMint);\r\n\r\n        emit LCDMint(_project, msg.sender, _tokenId, false);\r\n    }\r\n\r\n    /*\r\n    * Mint on standard projects as curator\r\n    */\r\n    function mintAsCurator(address _project, uint256 _tokenId) public {\r\n        Project memory project = projectRegistry[_project];\r\n        require(msg.sender == project.curator, \"Not curator\");\r\n        require(!project.isCustomProject, \"Custom project\");\r\n        require(project.curatorMints < project.curatorMintCap, \"No more mints\");\r\n        require(\r\n            _tokenId > NUM_LOOT.add(project.nonLootMintCap) &&\r\n            _tokenId <= NUM_LOOT.add(project.nonLootMintCap).add(project.curatorMintCap),\r\n            \"Invalid id\"\r\n        );\r\n\r\n        LCDProject(_project).mintAsCurator(msg.sender, _tokenId);\r\n        _registerId(_project, _tokenId);\r\n\r\n        emit LCDMint(_project, msg.sender, _tokenId, false);\r\n    }\r\n\r\n    /*\r\n    * Mint on custom projects as curator\r\n    */\r\n    function mintCustomAsCurator(address _project, uint256 _tokenId) public {\r\n        Project memory project = projectRegistry[_project];\r\n        require(msg.sender == project.curator, \"Not curator\");\r\n        require(project.isCustomProject, \"Not custom project\");\r\n        require(\r\n            _tokenId > project.nonLootMintCap &&\r\n            _tokenId <= project.nonLootMintCap.add(project.curatorMintCap), \"Invalid id\"\r\n        );\r\n\r\n        LCDCustomProject(_project).mintCustomAsCurator(msg.sender, _tokenId);\r\n        _registerId(_project, _tokenId);\r\n\r\n        emit LCDMint(_project, msg.sender, _tokenId, false);\r\n    }\r\n\r\n    /*\r\n    *\r\n    * Gov\r\n    *\r\n    */\r\n\r\n    /*\r\n    * Called to incentivize minters with LCD tokens on certain projects\r\n    */\r\n    function endorse(address _project, uint256 _endorsementPerMint) public onlyGov {\r\n        require(_endorsementPerMint <= 5e16, \"Too high\");\r\n        projectRegistry[_project].endorsementPerMint = _endorsementPerMint;\r\n\r\n        emit Endorse(_project, _endorsementPerMint, block.timestamp);\r\n    }\r\n\r\n    /*\r\n    * Called to no longer incentivize a project\r\n    */\r\n    function revokeEndorsement(address _project) public onlyGov {\r\n        projectRegistry[_project].endorsementPerMint = 0;\r\n\r\n        emit RevokeEndorse(_project, block.timestamp);\r\n    }\r\n\r\n    /*\r\n    * Change ETH amount required to register custom prop on LCD (wei notation)\r\n    */\r\n    function changeCustomPropPrice(uint256 _newPrice) public onlyGov {\r\n        customPropPrice = _newPrice;\r\n    }\r\n\r\n    /*\r\n    * Change ETH amount required to register project on LCD (wei notation)\r\n    */\r\n    function changeRegistryPrice(uint256 _newPrice) public onlyGov {\r\n        registryPrice = _newPrice;\r\n    }\r\n\r\n    /*\r\n    * Withdraw ERC20s from contract\r\n    */\r\n    function withdrawTokens(address token) public onlyGov {\r\n        IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    /*\r\n    * Set new gov address\r\n    */\r\n    function setGov(address _gov) public onlyGov {\r\n        require(_gov != address(0));\r\n        gov = _gov;\r\n    }\r\n\r\n    /*\r\n    * Set new protocol address\r\n    */\r\n    function setProtocol(address _protocol) public onlyProtocol {\r\n        require(_protocol != address(0));\r\n        protocol = _protocol;\r\n    }\r\n\r\n    /*\r\n    *\r\n    * Claim Fees\r\n    *\r\n    */\r\n\r\n    /*\r\n    * Affiliate or curator claim of ETH fees\r\n    */\r\n    function claim(address _claimer) public nonReentrant {\r\n        require(msg.sender == _claimer, \"Not affiliate/curator\");\r\n        uint256 claimable = affiliateOrCuratorFeesClaimable[_claimer];\r\n        require(claimable > 0, \"Nothing to claim\");\r\n        affiliateOrCuratorFeesClaimable[_claimer] = 0;\r\n\r\n        (bool sent, ) = _claimer.call{value: claimable}(\"\");\r\n        require(sent, \"Failed\");\r\n\r\n        emit FeeClaim(_claimer, claimable, block.timestamp);\r\n    }\r\n\r\n    /*\r\n    * Protocol claim of ETH fees\r\n    */\r\n    function protocolClaim() public onlyProtocol {\r\n        uint256 claimable = protocolClaimableFees;\r\n        protocolClaimableFees = 0;\r\n        (bool sent, ) = protocol.call{value: claimable}(\"\");\r\n        require(sent, \"Failed\");\r\n\r\n        emit ProtocolClaim(claimable, block.timestamp);\r\n    }\r\n\r\n    /*\r\n    *\r\n    * Curator\r\n    *\r\n    */\r\n\r\n    /*\r\n    * Registers NFT project where Loot owners are entitled to mint with respective lootId\r\n    * _project: NFT address\r\n    * _lootPrice: ETH payable per Loot mint (can be 0) - wei notation\r\n    * _nonLootPrice: ETH payable per non-Loot mint (can be 0) - wei notation\r\n    * _nonLootMintCap: Tokens mintable to non-Loot owners\r\n    * _curatorMintCap: Tokens mintable by curator\r\n    * _isCustomURIEnabled: bool for whether token holders can set Custom URI for token on LCD contract\r\n    */\r\n    function registerProject(\r\n        address _project,\r\n        uint256 _lootPrice,\r\n        uint256 _nonLootPrice,\r\n        uint256 _nonLootMintCap,\r\n        uint256 _curatorMintCap,\r\n        bool _isCustomURIEnabled\r\n    ) public payable {\r\n        require(msg.value == registryPrice, \"Incorrect value\");\r\n        Project storage project = projectRegistry[_project];\r\n        require(project.curator == address(0), \"Project exists\");\r\n\r\n        project.curator = msg.sender;\r\n        project.lootPrice = _lootPrice;\r\n        project.nonLootPrice = _nonLootPrice;\r\n        project.nonLootMintCap = _nonLootMintCap;\r\n        project.curatorMintCap = _curatorMintCap;\r\n        project.isCustomURIEnabled = _isCustomURIEnabled;\r\n\r\n        _registerFeesFromProp(address(0), registryPrice);\r\n\r\n        emit ProjectRegister(_project, _lootPrice, _nonLootPrice, _nonLootMintCap, _curatorMintCap, block.timestamp, false);\r\n    }\r\n\r\n    /*\r\n    * Registers NFT project where minting is not linked to Loot ownership\r\n    * _project: NFT address\r\n    * _price: ETH payable per mint (can be 0) - wei notation\r\n    * _mintCap: total Rokens mintable by public\r\n    * _curatorMintCap: Tokens mintable by curator\r\n    * _isCustomURIEnabled: bool for whether token holders can set Custom URI for token on LCD contract\r\n    */\r\n    function registerCustomProject(\r\n        address _project,\r\n        uint256 _price,\r\n        uint256 _mintCap,\r\n        uint256 _curatorMintCap,\r\n        bool _isCustomURIEnabled\r\n    ) public payable {\r\n        require(msg.value == registryPrice, \"Incorrect value\");\r\n        Project storage project = projectRegistry[_project];\r\n        require(project.curator == address(0), \"Project exists\");\r\n\r\n        project.curator = msg.sender;\r\n        project.nonLootPrice = _price;\r\n        project.nonLootMintCap = _mintCap;\r\n        project.curatorMintCap = _curatorMintCap;\r\n        project.isCustomProject = true;\r\n        project.isCustomURIEnabled = _isCustomURIEnabled;\r\n\r\n        _registerFeesFromProp(address(0), registryPrice);\r\n\r\n        emit ProjectRegister(_project, 0, _price, _mintCap, _curatorMintCap, block.timestamp, true);\r\n    }\r\n\r\n    /*\r\n    * Changes curator of project and recipient of future mint fees\r\n    */\r\n    function changeCurator(address _project, address _newCurator) public {\r\n        require(msg.sender == projectRegistry[_project].curator, \"Not curator\");\r\n        require(_newCurator != address(0));\r\n        projectRegistry[_project].curator = _newCurator;\r\n    }\r\n\r\n    /*\r\n    *\r\n    * Props\r\n    *\r\n    */\r\n\r\n    /*\r\n    * Set a custom string prop\r\n    * Lambda prop has no specific intended use case. Developers can use this\r\n    * prop to unlock whichever features or experiences they want to incorporate\r\n    * into their creation\r\n    * _affiliate is (for example) the developer of gaming or visual experience\r\n    * that integrates the NFT\r\n    * Affiliate earns 80% of ETH fee\r\n    */\r\n    function setLambdaProp(\r\n        address _project,\r\n        uint256 _tokenId,\r\n        string memory _lambdaProp,\r\n        address _affiliate\r\n    ) public payable nonReentrant {\r\n        require(msg.sender == LCDProject(_project).ownerOf(_tokenId), \"Not owner\");\r\n        require(msg.value == customPropPrice, \"Incorrect value\");\r\n\r\n        projectToTokenIdToLambdaProp[_project][_tokenId] = _lambdaProp;\r\n        _registerFeesFromProp(_affiliate, customPropPrice);\r\n\r\n        emit LambdaPropSet(_project, _tokenId, _lambdaProp, _affiliate);\r\n    }\r\n\r\n    /*\r\n    * Set a custom string prop\r\n    * Omega prop has no specific intended use case. Developers can use this\r\n    * prop to unlock whichever features or experiences they want to incorporate\r\n    * into their creation\r\n    * _affiliate is (for example) the developer of gaming or visual experience\r\n    * that integrates the NFT\r\n    * Omega prop price == 2x Lambda prop price\r\n    * Affiliate earns 80% of ETH fee\r\n    */\r\n    function setOmegaProp(\r\n        address _project,\r\n        uint256 _tokenId,\r\n        string memory _omegaProp,\r\n        address _affiliate\r\n    ) public payable nonReentrant {\r\n        require(msg.sender == LCDProject(_project).ownerOf(_tokenId), \"Not owner\");\r\n        require(msg.value == customPropPrice * 2, \"Incorrect value\");\r\n\r\n        projectToTokenIdToOmegaProp[_project][_tokenId] = _omegaProp;\r\n        _registerFeesFromProp(_affiliate, customPropPrice * 2);\r\n\r\n        emit OmegaPropSet(_project, _tokenId, _omegaProp, _affiliate);\r\n    }\r\n\r\n    /*\r\n    * LCD allows token holders to set a custom URI of their choosing if curator has enabled feature\r\n    * See LootVanGogh project for example use case, where rarity/properties are returned statically\r\n    * via getProps but user can modify custom URI interpretation of those props\r\n    * Example of _customURI prop would be an IPFS url\r\n    * _affiliate is (for example) the developer of gaming or visual experience\r\n    * that integrates the NFT\r\n    * Affiliate earns 80% of ETH fee\r\n    */\r\n    function setCustomURI(\r\n        address _project,\r\n         uint256 _tokenId,\r\n         string memory _customURI,\r\n         address _affiliate\r\n    ) public payable nonReentrant {\r\n        require(projectRegistry[_project].isCustomURIEnabled, \"Disabled\");\r\n        require(msg.sender == LCDProject(_project).ownerOf(_tokenId), \"Not owner\");\r\n        require(msg.value == customPropPrice, \"Incorrect value\");\r\n\r\n        projectToTokenIdToCustomURI[_project][_tokenId] = _customURI;\r\n        _registerFeesFromProp(_affiliate, customPropPrice);\r\n\r\n        emit CustomURISet(_project, _tokenId, _customURI, _affiliate);\r\n    }\r\n\r\n    /*\r\n    *\r\n    * Reads\r\n    *\r\n    */\r\n\r\n    /*\r\n    * Returns whether token is included in LCD canonical registry\r\n    */\r\n    function isTokenRegistered(address _project, uint256 _tokenId) public view returns(bool){\r\n        return tokenRegistry[_project][_tokenId];\r\n    }\r\n\r\n    /*\r\n    * Returns a custom string set on LCD contract via setLambdaProp\r\n    * Lambda prop has no specific intended use case. Developers can use this\r\n    * prop to unlock whichever features or experiences they want to incorporate\r\n    * into their creation\r\n    */\r\n    function getLambdaProp(address _project, uint256 _tokenId) public view returns(string memory){\r\n        return projectToTokenIdToLambdaProp[_project][_tokenId];\r\n    }\r\n\r\n    /*\r\n    * Returns a custom string set on LCD contract via setOmegaProp\r\n    * Omega prop has no specific intended use case. Developers can use this\r\n    * prop to unlock whichever features or experiences they want to incorporate\r\n    * into their creation\r\n    */\r\n    function getOmegaProp(address _project, uint256 _tokenId) public view returns(string memory){\r\n        return projectToTokenIdToOmegaProp[_project][_tokenId];\r\n    }\r\n\r\n    /*\r\n    * Returns either a custom URI set on LCD contract or tokenURI from respective project contract\r\n    */\r\n    function tokenURI(address _project, uint256 _tokenId) public view returns(string memory){\r\n        if(bytes(projectToTokenIdToCustomURI[_project][_tokenId]).length > 0){\r\n            return projectToTokenIdToCustomURI[_project][_tokenId];\r\n        }\r\n        return LCDProject(_project).tokenURI(_tokenId);\r\n    }\r\n\r\n    /*\r\n    * Randomly-generated, constantly changing number for a given token to be used interpretatively\r\n    * (as creator sees fit) on contracts, frontends, game experiences, etc.\r\n    */\r\n    function getRandomProp(address _project, uint256 _tokenId) public view returns(uint256){\r\n        return uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, _project, _tokenId))).div(1e18);\r\n    }\r\n\r\n    function getCustomTokenURI(address _project, uint256 _tokenId) public view returns(string memory){\r\n        return projectToTokenIdToCustomURI[_project][_tokenId];\r\n    }\r\n\r\n    /*\r\n    * Returns concatenated prop string for tokenId with global LCD properties\r\n    * and project-specific properties\r\n    */\r\n    function getProps(address _project, uint256 _tokenId) public view returns(string memory){\r\n        require(isTokenRegistered(_project, _tokenId), \"Unregistered\");\r\n        return string(\r\n            abi.encodePacked(\r\n                LCDProject(_project).getProps(_tokenId),\r\n                \" + lambda:\",\r\n                getLambdaProp(_project, _tokenId),\r\n                \" + omega:\",\r\n                getOmegaProp(_project, _tokenId),\r\n                \" + URI:\",\r\n                tokenURI(_project, _tokenId)\r\n            )\r\n        );\r\n    }\r\n\r\n    /*\r\n    * Returns registry price, custom URI/lambdaProp price, omegaPropPrice\r\n    */\r\n    function getPropPrices() public view returns(uint256, uint256, uint256){\r\n        return (registryPrice, customPropPrice, customPropPrice * 2);\r\n    }\r\n\r\n    /*\r\n    * Returns claimable ETH amount for given affiliate or curator\r\n    */\r\n    function getAffiliateOrCuratorClaimable(address _claimer) public view returns(uint256){\r\n        return affiliateOrCuratorFeesClaimable[_claimer];\r\n    }\r\n\r\n    /*\r\n    * Returns basic project info\r\n    */\r\n    function getBasicProjectInfo(address _project) public view returns(\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        bool\r\n    ){\r\n        return (\r\n            projectRegistry[_project].curator,\r\n            projectRegistry[_project].lootPrice,\r\n            projectRegistry[_project].nonLootPrice,\r\n            projectRegistry[_project].endorsementPerMint,\r\n            projectRegistry[_project].isCustomProject\r\n        );\r\n    }\r\n\r\n    /*\r\n    * Returns advanced project info\r\n    */\r\n    function getAdvancedProjectInfo(address _project) public view returns(\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        bool\r\n    ) {\r\n        return (\r\n            projectRegistry[_project].nonLootMints,\r\n            projectRegistry[_project].curatorMintCap,\r\n            projectRegistry[_project].curatorMints,\r\n            projectRegistry[_project].isCustomURIEnabled\r\n        );\r\n    }\r\n\r\n    function isProjectEndorsed(address _project) public view returns(bool){\r\n        return projectRegistry[_project].endorsementPerMint > 0;\r\n    }\r\n\r\n    function getOwnerOf(address _project, uint256 _tokenId) public view returns(address){\r\n        if(tokenRegistry[_project][_tokenId]){\r\n            return LCDProject(_project).ownerOf(_tokenId);\r\n        }\r\n        return address(0);\r\n    }\r\n\r\n    /*\r\n    *\r\n    * Private\r\n    *\r\n    */\r\n\r\n    /*\r\n    * Distributes LCD tokens to minters of endorsed projects\r\n    */\r\n    function _distributeEndorsement(address _minter, uint256 _amount) private {\r\n        if(_amount > 0 && lcdToken.balanceOf(address(this)) >= _amount){\r\n            lcdToken.transfer(_minter, _amount);\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Registers tokenIds to global registry\r\n    */\r\n    function _registerId(address _project, uint256 _tokenId) private {\r\n        require(!tokenRegistry[_project][_tokenId], \"Already registered\");\r\n        tokenRegistry[_project][_tokenId] = true;\r\n    }\r\n\r\n    /*\r\n    * Registers respective shares of mint fee to curator and protocol\r\n    */\r\n    function _registerFeesFromMint(address _project, uint256 _amount) private {\r\n        if(_amount > 0){\r\n            uint256 protocolShare = _amount.div(5);\r\n            affiliateOrCuratorFeesClaimable[projectRegistry[_project].curator] =\r\n                affiliateOrCuratorFeesClaimable[projectRegistry[_project].curator].add(_amount.sub(protocolShare));\r\n            protocolClaimableFees = protocolClaimableFees.add(protocolShare);\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Registers respective shares of prop or registry fee to affiliate and protocol\r\n    */\r\n    function _registerFeesFromProp(address _affiliate, uint256 _amount) private {\r\n        if(_affiliate == address(0)){\r\n            protocolClaimableFees = protocolClaimableFees.add(_amount);\r\n        } else {\r\n            uint256 protocolShare = _amount.div(5);\r\n            affiliateOrCuratorFeesClaimable[_affiliate] = affiliateOrCuratorFeesClaimable[_affiliate].add(_amount.sub(protocolShare));\r\n            protocolClaimableFees = protocolClaimableFees.add(protocolShare);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lcdToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_customURI\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_affiliate\",\"type\":\"address\"}],\"name\":\"CustomURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountPerMint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Endorse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"FeeClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_mintWithLoot\",\"type\":\"bool\"}],\"name\":\"LCDMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_lambdaProp\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_affiliate\",\"type\":\"address\"}],\"name\":\"LambdaPropSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_omegaProp\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_affiliate\",\"type\":\"address\"}],\"name\":\"OmegaPropSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lootPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nonLootPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nonLootMintCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_curatorMintCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isCustomProject\",\"type\":\"bool\"}],\"name\":\"ProjectRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"ProtocolClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"RevokeEndorse\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newCurator\",\"type\":\"address\"}],\"name\":\"changeCurator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changeCustomPropPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changeRegistryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_endorsementPerMint\",\"type\":\"uint256\"}],\"name\":\"endorse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"}],\"name\":\"getAdvancedProjectInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"getAffiliateOrCuratorClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"}],\"name\":\"getBasicProjectInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCustomTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getLambdaProp\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getOmegaProp\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPropPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getProps\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRandomProp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"}],\"name\":\"isProjectEndorsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lcdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lootAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mintAsCurator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mintCustom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mintCustomAsCurator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lootId\",\"type\":\"uint256\"}],\"name\":\"mintWithLoot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"}],\"name\":\"mintWithoutLoot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolClaimableFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_curatorMintCap\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isCustomURIEnabled\",\"type\":\"bool\"}],\"name\":\"registerCustomProject\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lootPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonLootPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonLootMintCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_curatorMintCap\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isCustomURIEnabled\",\"type\":\"bool\"}],\"name\":\"registerProject\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"}],\"name\":\"revokeEndorsement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_customURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_affiliate\",\"type\":\"address\"}],\"name\":\"setCustomURI\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_lambdaProp\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_affiliate\",\"type\":\"address\"}],\"name\":\"setLambdaProp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_omegaProp\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_affiliate\",\"type\":\"address\"}],\"name\":\"setOmegaProp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"setProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LootCreativeDomain","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fb91ad82f883dd912a0d41156e936c01c549cfc2","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://972dc64d861fe6820ea2c23ec1ca11c8e23ca27ef38ef4b2ac581aa0407010b7"}]}