{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/pLoot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract NFTProjectERC721{\\r\\n  function balanceOf(address) external view returns (uint256) {}\\r\\n}\\r\\n\\r\\ncontract CryptoPunkSC{\\r\\n  mapping (address => uint256) public balanceOf;\\r\\n}\\r\\n\\r\\ncontract pLoot is ERC721Enumerable, ReentrancyGuard, Ownable {\\r\\n    // Private Variables\\r\\n    uint256 public maxSupply = 7700;\\r\\n    uint256 public devAllocation = 300;\\r\\n\\r\\n    // NFT Allocation\\r\\n    uint256 public maxPerAddress = 20;\\r\\n    \\r\\n    // Define Struct\\r\\n    struct smartContractDetails { \\r\\n      address smartContractAddress;\\r\\n      uint8 smartContractType; // 0  ERC-721, 1 CryptoPunks\\r\\n    }\\r\\n\\r\\n    //Smart Contract's Address mapping\\r\\n    mapping(string => smartContractDetails) public smartContractAddresses;\\r\\n\\r\\n    // Loot Packs\\r\\n    string[] private lootPack1 = [\\r\\n      \\\"PEGZ\\\",\\r\\n      \\\"Meebits\\\",\\r\\n      \\\"Deafbeef\\\",\\r\\n      \\\"CryptoPunks\\\",\\r\\n      \\\"Autoglyphs\\\",\\r\\n      \\\"Avid Lines\\\",\\r\\n      \\\"Bored Ape Yacht Club\\\",\\r\\n      \\\"BEEPLE - GENESIS COLLECTION\\\",\\r\\n      \\\"Damien Hirst - The Currency\\\"\\r\\n    ];\\r\\n\\r\\n    string[] private lootPack2 = [\\r\\n      \\\"Blitmap\\\",\\r\\n      \\\"VeeFriends\\\",\\r\\n      \\\"The Sevens\\\",\\r\\n      \\\"PUNKS Comic\\\",\\r\\n      \\\"MetaHero Universe\\\",\\r\\n      \\\"Bored Ape Kennel Club\\\",\\r\\n      \\\"Loot (for Adventurers)\\\",\\r\\n      \\\"Mutant Ape Yacht Club\\\",\\r\\n      \\\"The Mike Tyson NFT Collection\\\"\\r\\n    ];\\r\\n    \\r\\n    string[] private lootPack3 = [\\r\\n      \\\"0N1 Force\\\",\\r\\n      \\\"CyberKongz\\\",\\r\\n      \\\"The n Project\\\",\\r\\n      \\\"Cryptovoxels\\\",\\r\\n      \\\"Cool Cats NFT\\\",\\r\\n      \\\"World of Women\\\",\\r\\n      \\\"Pudgy Penguins\\\",\\r\\n      \\\"Solvency by Ezra Miller\\\",\\r\\n      \\\"Tom Sachs Rocket Factory\\\"\\r\\n    ];\\r\\n    \\r\\n    string[] private lootPack4 = [\\r\\n      \\\"Chiptos\\\",\\r\\n      \\\"SupDucks\\\",\\r\\n      \\\"Hashmasks\\\",\\r\\n      \\\"FLUF World\\\",\\r\\n      \\\"Lazy Lions\\\",\\r\\n      \\\"Plasma Bears\\\",\\r\\n      \\\"SpacePunksClub\\\",\\r\\n      \\\"The Doge Pound\\\",\\r\\n      \\\"Rumble Kong League\\\"\\r\\n    ];\\r\\n    \\r\\n    string[] private lootPack5 = [\\r\\n      \\\"GEVOLs\\\",\\r\\n      \\\"Stoner Cats\\\",\\r\\n      \\\"The CryptoDads\\\",\\r\\n      \\\"BullsOnTheBlock\\\",\\r\\n      \\\"Wicked Ape Bone Club\\\",\\r\\n      \\\"BASTARD GAN PUNKS V2\\\",\\r\\n      \\\"Bloot (not for Weaks)\\\",\\r\\n      \\\"Lonely Alien Space Club\\\",\\r\\n      \\\"Koala Intelligence Agency\\\"\\r\\n    ];\\r\\n    \\r\\n    string[] private lootPack6 = [\\r\\n      \\\"thedudes\\\",\\r\\n      \\\"Super Yeti\\\",\\r\\n      \\\"Spookies NFT\\\",\\r\\n      \\\"Arabian Camels\\\",\\r\\n      \\\"Untamed Elephants\\\",\\r\\n      \\\"Rogue Society Bots\\\",\\r\\n      \\\"Slumdoge Billionaires\\\",\\r\\n      \\\"Crypto-Pills by Micha Klein\\\",\\r\\n      \\\"Official MoonCats - Acclimated\\\"\\r\\n    ];\\r\\n    \\r\\n    string[] private lootPack7 = [\\r\\n      \\\"GOATz\\\",\\r\\n      \\\"Sushiverse\\\",\\r\\n      \\\"FusionApes\\\",\\r\\n      \\\"CHIBI DINOS\\\",\\r\\n      \\\"DystoPunks V2\\\",\\r\\n      \\\"The Alien Boy\\\",\\r\\n      \\\"LightSuperBunnies\\\",\\r\\n      \\\"Creature World NFT\\\",\\r\\n      \\\"SympathyForTheDevils\\\"\\r\\n    ];\\r\\n    \\r\\n    string[] private lootPack8 = [\\r\\n      \\\"Chubbies\\\",\\r\\n      \\\"Animetas\\\",\\r\\n      \\\"DeadHeads\\\",\\r\\n      \\\"Incognito\\\",\\r\\n      \\\"Party Penguins\\\",\\r\\n      \\\"Krazy Koalas NFT\\\",\\r\\n      \\\"Crazy Lizard Army\\\",\\r\\n      \\\"Goons of Balatroon\\\",\\r\\n      \\\"The Vogu Collective\\\"\\r\\n    ];\\r\\n\\r\\n    // Constructor\\r\\n    constructor() ERC721(\\\"pLoot (for NFT Collectors)\\\", \\\"pLoot\\\") Ownable() \\r\\n    {\\r\\n      initSmartContractMapping();\\r\\n    }\\r\\n\\r\\n    function initSmartContractMapping() private\\r\\n    { \\r\\n      // Initialize smart contract Mapping\\r\\n      smartContractAddresses[\\\"Bored Ape Yacht Club\\\"] = smartContractDetails(address(0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D),0);\\r\\n      smartContractAddresses[\\\"Meebits\\\"] = smartContractDetails(address(0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7),0);\\r\\n      smartContractAddresses[\\\"Deafbeef\\\"] = smartContractDetails(address(0xd754937672300Ae6708a51229112dE4017810934),1);\\r\\n      smartContractAddresses[\\\"CryptoPunks\\\"] = smartContractDetails(address(0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB),0);\\r\\n      smartContractAddresses[\\\"Autoglyphs\\\"] = smartContractDetails(address(0xd4e4078ca3495DE5B1d4dB434BEbc5a986197782),0);\\r\\n      smartContractAddresses[\\\"Avid Lines\\\"] = smartContractDetails(address(0xDFAcD840f462C27b0127FC76b63e7925bEd0F9D5),0);\\r\\n      smartContractAddresses[\\\"PEGZ\\\"] = smartContractDetails(address(0x1eFf5ed809C994eE2f500F076cEF22Ef3fd9c25D),0);\\r\\n      smartContractAddresses[\\\"BEEPLE - GENESIS COLLECTION\\\"] = smartContractDetails(address(0x12F28E2106CE8Fd8464885B80EA865e98b465149),0);\\r\\n      smartContractAddresses[\\\"Damien Hirst - The Currency\\\"] = smartContractDetails(address(0xaaDc2D4261199ce24A4B0a57370c4FCf43BB60aa),0);\\r\\n      smartContractAddresses[\\\"Blitmap\\\"] = smartContractDetails(address(0x8d04a8c79cEB0889Bdd12acdF3Fa9D207eD3Ff63),0);\\r\\n      smartContractAddresses[\\\"VeeFriends\\\"] = smartContractDetails(address(0xa3AEe8BcE55BEeA1951EF834b99f3Ac60d1ABeeB),0);\\r\\n      smartContractAddresses[\\\"PUNKS Comic\\\"] = smartContractDetails(address(0xd0A07a76746707f6D6d36D9d5897B14a8e9ED493),0);\\r\\n      smartContractAddresses[\\\"Bored Ape Kennel Club\\\"] = smartContractDetails(address(0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623),0);\\r\\n      smartContractAddresses[\\\"The Sevens\\\"] = smartContractDetails(address(0xf497253C2bB7644ebb99e4d9ECC104aE7a79187A),0);\\r\\n      smartContractAddresses[\\\"Loot (for Adventurers)\\\"] = smartContractDetails(address(0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7),0);\\r\\n      smartContractAddresses[\\\"Mutant Ape Yacht Club\\\"] = smartContractDetails(address(0x60E4d786628Fea6478F785A6d7e704777c86a7c6),0);\\r\\n      smartContractAddresses[\\\"MetaHero Universe\\\"] = smartContractDetails(address(0x6dc6001535e15b9def7b0f6A20a2111dFA9454E2),0);\\r\\n      smartContractAddresses[\\\"The Mike Tyson NFT Collection\\\"] = smartContractDetails(address(0x40fB1c0f6f73B9fc5a81574FF39d27e0Ba06b17b),0);\\r\\n      smartContractAddresses[\\\"0N1 Force\\\"] = smartContractDetails(address(0x3bf2922f4520a8BA0c2eFC3D2a1539678DaD5e9D),0);\\r\\n      smartContractAddresses[\\\"CyberKongz\\\"] = smartContractDetails(address(0x57a204AA1042f6E66DD7730813f4024114d74f37),0);\\r\\n      smartContractAddresses[\\\"The n Project\\\"] = smartContractDetails(address(0x05a46f1E545526FB803FF974C790aCeA34D1f2D6),0);\\r\\n      smartContractAddresses[\\\"Cryptovoxels\\\"] = smartContractDetails(address(0x79986aF15539de2db9A5086382daEdA917A9CF0C),0);\\r\\n      smartContractAddresses[\\\"Cool Cats NFT\\\"] = smartContractDetails(address(0x1A92f7381B9F03921564a437210bB9396471050C),0);\\r\\n      smartContractAddresses[\\\"World of Women\\\"] = smartContractDetails(address(0xe785E82358879F061BC3dcAC6f0444462D4b5330),0);\\r\\n      smartContractAddresses[\\\"Pudgy Penguins\\\"] = smartContractDetails(address(0xBd3531dA5CF5857e7CfAA92426877b022e612cf8),0);\\r\\n      smartContractAddresses[\\\"Solvency by Ezra Miller\\\"] = smartContractDetails(address(0x82262bFba3E25816b4C720F1070A71C7c16A8fc4),0);\\r\\n      smartContractAddresses[\\\"Tom Sachs Rocket Factory\\\"] = smartContractDetails(address(0x11595fFB2D3612d810612e34Bc1C2E6D6de55d26),0);\\r\\n      smartContractAddresses[\\\"Rumble Kong League\\\"] = smartContractDetails(address(0xEf0182dc0574cd5874494a120750FD222FdB909a),0);\\r\\n      smartContractAddresses[\\\"Chiptos\\\"] = smartContractDetails(address(0xf3ae416615A4B7c0920CA32c2DfebF73d9D61514),0);\\r\\n      smartContractAddresses[\\\"SupDucks\\\"] = smartContractDetails(address(0x3Fe1a4c1481c8351E91B64D5c398b159dE07cbc5),0);\\r\\n      smartContractAddresses[\\\"Hashmasks\\\"] = smartContractDetails(address(0xC2C747E0F7004F9E8817Db2ca4997657a7746928),0);\\r\\n      smartContractAddresses[\\\"SpacePunksClub\\\"] = smartContractDetails(address(0x45DB714f24f5A313569c41683047f1d49e78Ba07),0);\\r\\n      smartContractAddresses[\\\"The Doge Pound\\\"] = smartContractDetails(address(0xF4ee95274741437636e748DdAc70818B4ED7d043),0);\\r\\n      smartContractAddresses[\\\"Lazy Lions\\\"] = smartContractDetails(address(0x8943C7bAC1914C9A7ABa750Bf2B6B09Fd21037E0),0);\\r\\n      smartContractAddresses[\\\"Plasma Bears\\\"] = smartContractDetails(address(0x909899c5dBb5002610Dd8543b6F638Be56e3B17E),0);\\r\\n      smartContractAddresses[\\\"FLUF World\\\"] = smartContractDetails(address(0xCcc441ac31f02cD96C153DB6fd5Fe0a2F4e6A68d),0);\\r\\n      smartContractAddresses[\\\"GEVOLs\\\"] = smartContractDetails(address(0x34b4Df75a17f8B3a6Eff6bBA477d39D701f5e92c),0);\\r\\n      smartContractAddresses[\\\"Stoner Cats\\\"] = smartContractDetails(address(0xD4d871419714B778eBec2E22C7c53572b573706e),0);\\r\\n      smartContractAddresses[\\\"The CryptoDads\\\"] = smartContractDetails(address(0xECDD2F733bD20E56865750eBcE33f17Da0bEE461),0);\\r\\n      smartContractAddresses[\\\"BullsOnTheBlock\\\"] = smartContractDetails(address(0x3a8778A58993bA4B941f85684D74750043A4bB5f),0);\\r\\n      smartContractAddresses[\\\"Wicked Ape Bone Club\\\"] = smartContractDetails(address(0xbe6e3669464E7dB1e1528212F0BfF5039461CB82),0);\\r\\n      smartContractAddresses[\\\"BASTARD GAN PUNKS V2\\\"] = smartContractDetails(address(0x31385d3520bCED94f77AaE104b406994D8F2168C),0);\\r\\n      smartContractAddresses[\\\"Bloot (not for Weaks)\\\"] = smartContractDetails(address(0x4F8730E0b32B04beaa5757e5aea3aeF970E5B613),0);\\r\\n      smartContractAddresses[\\\"Lonely Alien Space Club\\\"] = smartContractDetails(address(0x343f999eAACdFa1f201fb8e43ebb35c99D9aE0c1),0);\\r\\n      smartContractAddresses[\\\"Koala Intelligence Agency\\\"] = smartContractDetails(address(0x3f5FB35468e9834A43dcA1C160c69EaAE78b6360),0);\\r\\n      smartContractAddresses[\\\"Super Yeti\\\"] = smartContractDetails(address(0x3F0785095A660fEe131eEbcD5aa243e529C21786),0);\\r\\n      smartContractAddresses[\\\"Spookies NFT\\\"] = smartContractDetails(address(0x5e34dAcDa29837F2f220D3d1aEAAabD1eDCa5BD1),0);\\r\\n      smartContractAddresses[\\\"Arabian Camels\\\"] = smartContractDetails(address(0x3B3Bc9b1dD9F3C8716Fff083947b8769e2ff9781),0);\\r\\n      smartContractAddresses[\\\"Untamed Elephants\\\"] = smartContractDetails(address(0x613E5136a22206837D12eF7A85f7de2825De1334),0);\\r\\n      smartContractAddresses[\\\"Rogue Society Bots\\\"] = smartContractDetails(address(0xc6735852E181A55F736e9Db62831Dc63ef8C449a),0);\\r\\n      smartContractAddresses[\\\"Slumdoge Billionaires\\\"] = smartContractDetails(address(0x312d09D1160316A0946503391B3D1bcBC583181b),0);\\r\\n      smartContractAddresses[\\\"Crypto-Pills by Micha Klein\\\"] = smartContractDetails(address(0x7DD04448c6CD405345D03529Bff9749fd89F8F4F),0);\\r\\n      smartContractAddresses[\\\"Official MoonCats - Acclimated\\\"] = smartContractDetails(address(0xc3f733ca98E0daD0386979Eb96fb1722A1A05E69),0);\\r\\n      smartContractAddresses[\\\"thedudes\\\"] = smartContractDetails(address(0xB0cf7Da8dc482997525BE8488B9caD4F44315422),0);\\r\\n      smartContractAddresses[\\\"Sushiverse\\\"] = smartContractDetails(address(0x06aF447c72E18891FB65450f41134C00Cf7Ac28c),0);\\r\\n      smartContractAddresses[\\\"FusionApes\\\"] = smartContractDetails(address(0xEA6504BA9ec2352133e6A194bB35ad4B1a3b68e7),0);\\r\\n      smartContractAddresses[\\\"CHIBI DINOS\\\"] = smartContractDetails(address(0xe12EDaab53023c75473a5A011bdB729eE73545e8),0);\\r\\n      smartContractAddresses[\\\"DystoPunks V2\\\"] = smartContractDetails(address(0xbEA8123277142dE42571f1fAc045225a1D347977),0);\\r\\n      smartContractAddresses[\\\"The Alien Boy\\\"] = smartContractDetails(address(0x4581649aF66BCCAeE81eebaE3DDc0511FE4C5312),0);\\r\\n      smartContractAddresses[\\\"LightSuperBunnies\\\"] = smartContractDetails(address(0x3a3fBa79302144f06f49ffde69cE4b7F6ad4DD3d),0);\\r\\n      smartContractAddresses[\\\"Creature World NFT\\\"] = smartContractDetails(address(0xc92cedDfb8dd984A89fb494c376f9A48b999aAFc),0);\\r\\n      smartContractAddresses[\\\"SympathyForTheDevils\\\"] = smartContractDetails(address(0x36d02DcD463Dfd71E4a07d8Aa946742Da94e8D3a),0);\\r\\n      smartContractAddresses[\\\"GOATz\\\"] = smartContractDetails(address(0x3EAcf2D8ce91b35c048C6Ac6Ec36341aaE002FB9),0);\\r\\n      smartContractAddresses[\\\"Chubbies\\\"] = smartContractDetails(address(0x1DB61FC42a843baD4D91A2D788789ea4055B8613),0);\\r\\n      smartContractAddresses[\\\"Animetas\\\"] = smartContractDetails(address(0x18Df6C571F6fE9283B87f910E41dc5c8b77b7da5),0);\\r\\n      smartContractAddresses[\\\"DeadHeads\\\"] = smartContractDetails(address(0x6fC355D4e0EE44b292E50878F49798ff755A5bbC),0);\\r\\n      smartContractAddresses[\\\"Party Penguins\\\"] = smartContractDetails(address(0x31F3bba9b71cB1D5e96cD62F0bA3958C034b55E9),0);\\r\\n      smartContractAddresses[\\\"Krazy Koalas NFT\\\"] = smartContractDetails(address(0x8056aD118916db0fEef1c8B82744Fa37E5d57CC0),0);\\r\\n      smartContractAddresses[\\\"Crazy Lizard Army\\\"] = smartContractDetails(address(0x86f6Bf16F495AFc065DA4095Ac12ccD5e83a8c85),0);\\r\\n      smartContractAddresses[\\\"Goons of Balatroon\\\"] = smartContractDetails(address(0x8442DD3e5529063B43C69212d64D5ad67B726Ea6),0);\\r\\n      smartContractAddresses[\\\"The Vogu Collective\\\"] = smartContractDetails(address(0x18c7766A10df15Df8c971f6e8c1D2bbA7c7A410b),0);\\r\\n      smartContractAddresses[\\\"Incognito\\\"] = smartContractDetails(address(0x3F4a885ED8d9cDF10f3349357E3b243F3695b24A),0);\\r\\n    }\\r\\n\\r\\n    // Balance Check\\r\\n    function checkHodler(uint256 tokenID, string memory projectName) public view returns (bool)\\r\\n    {\\r\\n      address hodlerAddress = ownerOf(tokenID);\\r\\n      if (smartContractAddresses[projectName].smartContractType == 0)\\r\\n      {\\r\\n        NFTProjectERC721 projInstance = NFTProjectERC721(smartContractAddresses[projectName].smartContractAddress);\\r\\n        if (projInstance.balanceOf(hodlerAddress) > 0)\\r\\n        {\\r\\n          return true;\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n          return false;\\r\\n        }\\r\\n      }\\r\\n      else if (smartContractAddresses[projectName].smartContractType == 1)\\r\\n      {\\r\\n        CryptoPunkSC projInstance = CryptoPunkSC(smartContractAddresses[projectName].smartContractAddress);\\r\\n        if (projInstance.balanceOf(hodlerAddress) > 0)\\r\\n        {\\r\\n          return true;\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n          return false;\\r\\n        }\\r\\n      }\\r\\n      else\\r\\n      {\\r\\n        revert(\\\"Invalid Contract Details!\\\");\\r\\n      }\\r\\n    }\\r\\n\\r\\n    function random(string memory input) internal pure returns (uint256) {\\r\\n        return uint256(keccak256(abi.encodePacked(input)));\\r\\n    }\\r\\n\\r\\n    function getLoot1(uint256 tokenId) public view returns (string memory) {\\r\\n        return pluck(tokenId, \\\"LootPack1\\\", lootPack1);\\r\\n    }\\r\\n    \\r\\n    function getLoot2(uint256 tokenId) public view returns (string memory) {\\r\\n        return pluck(tokenId, \\\"LootPack2\\\", lootPack2);\\r\\n    }\\r\\n    \\r\\n    function getLoot3(uint256 tokenId) public view returns (string memory) {\\r\\n        return pluck(tokenId, \\\"LootPack3\\\", lootPack3);\\r\\n    }\\r\\n    \\r\\n    function getLoot4(uint256 tokenId) public view returns (string memory) {\\r\\n        return pluck(tokenId, \\\"LootPack4\\\", lootPack4);\\r\\n    }\\r\\n\\r\\n    function getLoot5(uint256 tokenId) public view returns (string memory) {\\r\\n        return pluck(tokenId, \\\"LootPack5\\\", lootPack5);\\r\\n    }\\r\\n    \\r\\n    function getLoot6(uint256 tokenId) public view returns (string memory) {\\r\\n        return pluck(tokenId, \\\"LootPack6\\\", lootPack6);\\r\\n    }\\r\\n    \\r\\n    function getLoot7(uint256 tokenId) public view returns (string memory) {\\r\\n        return pluck(tokenId, \\\"LootPack7\\\", lootPack7);\\r\\n    }\\r\\n    \\r\\n    function getLoot8(uint256 tokenId) public view returns (string memory) {\\r\\n        return pluck(tokenId, \\\"LootPack8\\\", lootPack8);\\r\\n    }\\r\\n    \\r\\n    function tokenURI(uint256 tokenId) override public view returns (string memory) {\\r\\n        \\r\\n        bool diamondHands = true;\\r\\n        \\r\\n        string[2] memory spanStrings;\\r\\n        \\r\\n        spanStrings[0] = '</tspan><tspan x=\\\"40\\\" dy=\\\"1.4em\\\">';\\r\\n        \\r\\n        spanStrings[1] = '</tspan><tspan x=\\\"275\\\" dy=\\\"1.4em\\\">';\\r\\n\\r\\n        string[36] memory parts;\\r\\n\\r\\n        parts[0] = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"><style>.base{fill:white;font-family:ui-monospace;font-size:14px}</style><style>.black{fill:black;font-family:ui-monospace;font-size:14px}</style><g id=\\\"columnGroup\\\"> <rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"black\\\" /> <text y=\\\"60\\\" font-size=\\\"15px\\\" class=\\\"base\\\"> <tspan x=\\\"23\\\" dy=\\\"1em\\\">';\\r\\n\\r\\n        parts[1] = toAsciiString(ownerOf(tokenId));\\r\\n\\r\\n        parts[2] = '</tspan></text><line x1=\\\"30\\\" y1=\\\"90\\\" x2=\\\"300\\\" y2=\\\"90\\\" stroke=\\\"white\\\" class=\\\"base\\\" stroke-width=\\\"1.5\\\"/><text x=\\\"100\\\" y=\\\"100\\\" font-size=\\\"15px\\\" class=\\\"base\\\"><tspan x=\\\"40\\\" dy=\\\"1.25em\\\">';\\r\\n        \\r\\n        parts[3] = getLoot1(tokenId);\\r\\n\\r\\n        parts[4] = spanStrings[0];\\r\\n\\r\\n        parts[5] = getLoot2(tokenId);\\r\\n      \\r\\n        parts[6] = spanStrings[0];\\r\\n\\r\\n        parts[7] = getLoot3(tokenId);\\r\\n        \\r\\n        parts[8] = spanStrings[0];\\r\\n\\r\\n        parts[9] = getLoot4(tokenId);\\r\\n\\r\\n        parts[10] = spanStrings[0];\\r\\n\\r\\n        parts[11] = getLoot5(tokenId);\\r\\n\\r\\n        parts[12] = spanStrings[0];\\r\\n\\r\\n        parts[13] = getLoot6(tokenId);\\r\\n\\r\\n        parts[14] = spanStrings[0];\\r\\n\\r\\n        parts[15] = getLoot7(tokenId);\\r\\n\\r\\n        parts[16] = spanStrings[0];\\r\\n\\r\\n        parts[17] = getLoot8(tokenId);\\r\\n\\r\\n        parts[18] = '</tspan></text><text x=\\\"100\\\" y=\\\"100\\\" font-size=\\\"15px\\\" class=\\\"black\\\"><tspan x=\\\"275\\\" dy=\\\"1.25em\\\">';\\r\\n\\r\\n        if (checkHodler(tokenId, getLoot1(tokenId)))\\r\\n        {\\r\\n          parts[19] = unicode'✅';\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n          parts[19] = 'X';\\r\\n          diamondHands = false;\\r\\n        }\\r\\n\\r\\n        parts[20] = spanStrings[1];\\r\\n\\r\\n        if (checkHodler(tokenId, getLoot2(tokenId)))\\r\\n        {\\r\\n          parts[21] = unicode'✅';\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n          parts[21] = 'X';\\r\\n          diamondHands = false;\\r\\n        }\\r\\n\\r\\n        parts[22] = spanStrings[1];\\r\\n\\r\\n        if (checkHodler(tokenId, getLoot3(tokenId)))\\r\\n        {\\r\\n          parts[23] = unicode'✅';\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n          parts[23] = 'X';\\r\\n          diamondHands = false;\\r\\n        }\\r\\n\\r\\n        parts[24] = spanStrings[1];\\r\\n\\r\\n        if (checkHodler(tokenId, getLoot4(tokenId)))\\r\\n        {\\r\\n          parts[25] = unicode'✅';\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n          parts[25] = 'X';\\r\\n          diamondHands = false;\\r\\n        }\\r\\n\\r\\n        parts[26] = spanStrings[1];\\r\\n\\r\\n        if (checkHodler(tokenId, getLoot5(tokenId)))\\r\\n        {\\r\\n          parts[27] = unicode'✅';\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n          parts[27] = 'X';\\r\\n          diamondHands = false;\\r\\n        }\\r\\n\\r\\n        parts[28] = spanStrings[1];\\r\\n\\r\\n        if (checkHodler(tokenId, getLoot6(tokenId)))\\r\\n        {\\r\\n          parts[29] = unicode'✅';\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n          parts[29] = 'X';\\r\\n          diamondHands = false;\\r\\n        }\\r\\n\\r\\n        parts[30] = spanStrings[1];\\r\\n\\r\\n        if (checkHodler(tokenId, getLoot7(tokenId)))\\r\\n        {\\r\\n          parts[31] = unicode'✅';\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n          parts[32] = 'X';\\r\\n          diamondHands = false;\\r\\n        }\\r\\n\\r\\n        parts[33] = spanStrings[1];\\r\\n\\r\\n        if (checkHodler(tokenId, getLoot8(tokenId)))\\r\\n        {\\r\\n          parts[34] = unicode'✅';\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n          parts[34] = 'X';\\r\\n          diamondHands = false;\\r\\n        }\\r\\n        \\r\\n        if (diamondHands)\\r\\n        {\\r\\n            parts[35] = unicode'</tspan></text><text x=\\\"150\\\" y=\\\"280\\\" font-size=\\\"15px\\\" class=\\\"black\\\"> <tspan>💎🙌</tspan></text></g></svg>';\\r\\n        }\\r\\n        else \\r\\n        {\\r\\n            parts[35] = '</tspan></text></g></svg>'; \\r\\n        }\\r\\n        \\r\\n        string memory output = string(abi.encodePacked(parts[0], '0x', parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]));\\r\\n        output = string(abi.encodePacked(output, parts[9], parts[10], parts[11], parts[12], parts[13], parts[14], parts[15], parts[16]));\\r\\n        output = string(abi.encodePacked(output, parts[17], parts[18], parts[19], parts[20], parts[21], parts[22], parts[23], parts[24]));\\r\\n        output = string(abi.encodePacked(output, parts[25], parts[26], parts[27], parts[28], parts[29], parts[30], parts[31], parts[32]));\\r\\n        output = string(abi.encodePacked(output, parts[33], parts[34], parts[35]));\\r\\n\\r\\n        string memory json = Base64.encode(\\r\\n                  bytes(string(\\r\\n                    abi.encodePacked(\\r\\n                      '{\\\"name\\\": \\\"Loot Bag #', toString(tokenId), \\r\\n                      '\\\", \\\"description\\\": \\\"pLoot is a personalised & randomized adventurer gear for NFT collectors generated and stored on chain. Collect NFTs in the loot bag & refresh metadata to get green ticks. Collect all of the NFTs in the loot bag to get diamond hands!\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\r\\n                      Base64.encode(bytes(output)),\\r\\n                      '\\\"}'))));\\r\\n        \\r\\n        output = string(abi.encodePacked('data:application/json;base64,', json));\\r\\n        return output;\\r\\n    }\\r\\n\\r\\n    function tokensOfOwner(address _owner) public view returns (uint256[] memory)\\r\\n    {\\r\\n        uint256 count = balanceOf(_owner);\\r\\n        uint256[] memory result = new uint256[](count);\\r\\n        for (uint256 index = 0; index < count; index++) {\\r\\n            result[index] = tokenOfOwnerByIndex(_owner, index);\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // Mint Function\\r\\n    function claimFreeLootBag(uint256 qty) public {\\r\\n        require((qty + balanceOf(msg.sender)) <= maxPerAddress, \\\"You have reached your minting limit.\\\");\\r\\n        require((qty + totalSupply()) <= maxSupply, \\\"Qty exceeds total supply.\\\");\\r\\n        // Mint the NFTs\\r\\n        for (uint256 i = 0; i < qty; i++) \\r\\n        {\\r\\n          uint256 mintIndex = totalSupply();\\r\\n          _safeMint(msg.sender, mintIndex);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Pure Helper functions\\r\\n    function pluck(uint256 tokenId, string memory keyPrefix, string[] memory sourceArray) internal pure returns (string memory) {\\r\\n        uint256 rand = random(string(abi.encodePacked(keyPrefix, toString(tokenId))));\\r\\n        string memory output = sourceArray[rand % sourceArray.length];\\r\\n        return output;\\r\\n    }\\r\\n\\r\\n    function toAsciiString(address x) internal pure returns (string memory) {\\r\\n        bytes memory s = new bytes(40);\\r\\n        for (uint i = 0; i < 20; i++) {\\r\\n            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\\r\\n            bytes1 hi = bytes1(uint8(b) / 16);\\r\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\r\\n            s[2*i] = char(hi);\\r\\n            s[2*i+1] = char(lo);            \\r\\n        }\\r\\n        return string(s);\\r\\n    }\\r\\n\\r\\n    function char(bytes1 b) internal pure returns (bytes1 c) {\\r\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\r\\n        else return bytes1(uint8(b) + 0x57);\\r\\n    }\\r\\n\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    // Admin Functions\\r\\n    function modifySmartContractAddressMap(string memory projectName, address projAddress, uint8 projType) public onlyOwner {\\r\\n      smartContractAddresses[projectName] = smartContractDetails(projAddress,projType);\\r\\n    }\\r\\n\\r\\n    function deleteSmartContractAddressMap(string memory projectName) public onlyOwner {\\r\\n      delete smartContractAddresses[projectName];\\r\\n    }\\r\\n\\r\\n    function devCreateLootBag(uint256 qty) public onlyOwner {\\r\\n        require(totalSupply() >= maxSupply, \\\"Dev not allowed to mint!\\\");\\r\\n        require((totalSupply() + qty) <= (maxSupply + devAllocation), \\\"Dev allocation exceeded!\\\");\\r\\n        for (uint256 i = 0; i < qty; i++) {\\r\\n            uint256 mintIndex = totalSupply();\\r\\n            _safeMint(msg.sender, mintIndex);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Withdraw function\\r\\n    function withdraw() public onlyOwner {\\r\\n        payable(msg.sender).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    // Receive ether function\\r\\n    receive() external payable {} \\r\\n}\\r\\n\\r\\n/// [MIT License]\\r\\n/// @title Base64\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\n/// @author Brecht Devos <brecht@loopring.org>\\r\\nlibrary Base64 {\\r\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    /// @notice Encodes some bytes to the base64 representation\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        uint256 len = data.length;\\r\\n        if (len == 0) return \\\"\\\";\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\r\\n\\r\\n        // Add some extra buffer at the end\\r\\n        bytes memory result = new bytes(encodedLen + 32);\\r\\n\\r\\n        bytes memory table = TABLE;\\r\\n\\r\\n        assembly {\\r\\n            let tablePtr := add(table, 1)\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            for {\\r\\n                let i := 0\\r\\n            } lt(i, len) {\\r\\n\\r\\n            } {\\r\\n                i := add(i, 3)\\r\\n                let input := and(mload(add(data, i)), 0xffffff)\\r\\n\\r\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\r\\n                out := shl(224, out)\\r\\n\\r\\n                mstore(resultPtr, out)\\r\\n\\r\\n                resultPtr := add(resultPtr, 4)\\r\\n            }\\r\\n\\r\\n            switch mod(len, 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n\\r\\n            mstore(result, encodedLen)\\r\\n        }\\r\\n\\r\\n        return string(result);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"}],\"name\":\"checkHodler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"claimFreeLootBag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"}],\"name\":\"deleteSmartContractAddressMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"devCreateLootBag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLoot1\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLoot2\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLoot3\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLoot4\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLoot5\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLoot6\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLoot7\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLoot8\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"projAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"projType\",\"type\":\"uint8\"}],\"name\":\"modifySmartContractAddressMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"smartContractAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"smartContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"smartContractType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"pLoot","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}