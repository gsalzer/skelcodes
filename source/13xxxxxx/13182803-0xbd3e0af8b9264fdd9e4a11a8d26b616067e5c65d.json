{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SplytStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./ABDKMath64x64.sol\\\";\\n\\n/**\\n * @title SplytStaking\\n * @dev Enables a user to stake tokens into this smart contract\\n */\\ncontract SplytStaking is Ownable {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  IERC20 private _token; // The token to be used in this smart contract\\n\\n  struct Compound {\\n    uint depositStartBlock;  // Block where users are allowed to start deposits\\n    uint depositEndBlock;    // Block where deposits are no longer allowed\\n    uint interestStartBlock; // Block that starts yield gaining\\n    uint interestEndBlock;   // Block that ends yield gained\\n    uint startTime;          // Time to start computing compound yield\\n    uint endTime;            // Time to stop computing compound yield\\n    uint apyPerSec;          // Interval at which yield compounds, e.g., 31556952 seconds/year, 8600 hours/year\\n    uint apyPerBlock;        // Reward per block. We assume 15s per block\\n  }\\n\\n  struct activeStaker {\\n    address addr; // Address of active staker\\n    uint balance; // Balance of the staker\\n  }\\n\\n  Compound private compound;                // Struct to hold compound information\\n  uint constant secondsPerYear = 31556952;  // Seconds in a year\\n  uint constant blocksPerMonth = 175200;    // Blocks per month\\n  uint poolDurationByBlock;                 // How long to yield interest aka max amount of blocks allowed for reward\\n  uint constant secondPerBlock = 15;        // Number of seconds between blocks mined\\n  uint feeDivisor = 10**3;                  // Withdrawal fee (0.1%)\\n\\n  uint totalPrincipal;                     // Total amount of token principal deposited into this smart contract\\n  uint numUsersWithDeposits;               // Total number of users who have deposited tokens into this smart contract\\n  uint numUniqueUsers;                     // Total number of unique users who have called stakeTokens() so far\\n\\n  uint secretBonusLimit;                   // If secretBonusLimit reached, provide bonus to long term holders\\n  uint secretBonusPool;                    // Pool amount to be distributed\\n\\n  mapping (address => uint256) public _balances;       // Balance of tokens by user\\n  mapping (uint256 => address) public addressByIndex;  // Address by index\\n\\n  /**\\n   * @dev Emitted when `_amount` tokens are staked by `_userAddress`\\n   */\\n  event TokenStaked(address _userAddress, uint256 _amount);\\n\\n  /**\\n   * @dev Emitted when `_amount` tokens are withdrawn by `_userAddress`\\n   */\\n  event TokenWithdrawn(address _userAddress, uint256 _amount);\\n\\n  /**\\n   * @dev Creates the SplytStaking smart contract\\n   * @param token address of the token to be vested\\n   * @param _apyPerSec APY gained per second ratio\\n   * @param _depositStartBlock Block where deposits start\\n   * @param _depositEndBlock Block where deposits end\\n   */\\n  constructor (\\n    address token,\\n    uint _apyPerSec,\\n    uint _depositStartBlock,\\n    uint _depositEndBlock,\\n    uint _poolDurationByBlock,\\n    uint _secretBonusLimit,\\n    uint _secretBonusPool\\n  ) public {\\n    _token = IERC20(token);\\n\\n    // Set how long the pool will yield interest\\n    poolDurationByBlock = _poolDurationByBlock;\\n\\n    // set bonus pool params\\n    secretBonusLimit = _secretBonusLimit;\\n    secretBonusPool = _secretBonusPool;\\n\\n    // Compute start and end blocks for yield compounding\\n    uint interestStartBlock = _depositEndBlock.add(1);\\n    uint interestEndBlock = interestStartBlock.add(poolDurationByBlock);\\n\\n    // Compute start and end times for the same time period\\n    uint blocksUntilInterestStarts = interestStartBlock.sub(block.number);\\n    uint interestStartTime = block.timestamp.add(blocksUntilInterestStarts.mul(secondPerBlock));\\n    uint blocksUntilInterestEnd = interestEndBlock.sub(interestStartBlock);\\n    uint interestEndTime = block.timestamp.add(blocksUntilInterestEnd.mul(secondPerBlock));\\n\\n    compound = Compound({\\n      depositStartBlock: _depositStartBlock,\\n      depositEndBlock: _depositEndBlock,\\n      interestStartBlock: interestStartBlock,\\n      interestEndBlock: interestEndBlock,\\n      startTime: interestStartTime,\\n      endTime: interestEndTime,\\n      apyPerSec: _apyPerSec,\\n      apyPerBlock: _apyPerSec.mul(secondPerBlock)\\n    });\\n\\n    numUsersWithDeposits = 0;\\n    totalPrincipal = 0;\\n    numUniqueUsers = 0;\\n    _balances[address(this)] = 0;\\n  }\\n\\n  // -----------------------------------------------------------------------\\n  // Modifiers\\n  // -----------------------------------------------------------------------\\n\\n  /**\\n   * @dev Modifier that only lets the function continue if it is within the deposit window (depositStartBlock, depositEndBlock)\\n   */\\n  modifier depositWindow() {\\n    require (block.number > compound.depositStartBlock && block.number <= compound.depositEndBlock, \\\"DepositWindow: Can be called only during deposit window\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier that only lets the function continue if the current block is before compound.interestStartBlock\\n   */\\n  modifier hasNotStartedYielding() {\\n    require (block.number < compound.interestStartBlock, \\\"HasNotStartedYielding: Can be called only before interest start block\\\");\\n    _;\\n  }\\n\\n  // -----------------------------------------------------------------------\\n  // Helpers\\n  // -----------------------------------------------------------------------\\n\\n  /**\\n   * @dev Check that the amount of blocks staked does not exceed limit: poolBlockDuration=maxBlock.\\n   * @dev If a user keeps their tokens longer than maxBlock, they only get yield up to maxBlock.\\n   * @param numBlocksPassed Amount of blocks passed\\n   * @param maxBlock Highest amount of blocks allowed to pass (limit)\\n   */\\n  function _blocksStaked(uint numBlocksPassed, uint maxBlock) public pure returns (uint) {\\n    if(numBlocksPassed >= maxBlock) {\\n      return maxBlock;\\n    } else {\\n      return numBlocksPassed;\\n    }\\n  }\\n\\n  // -----------------------------------------------------------------------\\n  // COMPUTATIONS\\n  // -----------------------------------------------------------------------\\n\\n  /**\\n   * @dev Estimates the power computation\\n   * @param x base\\n   * @param n duration\\n   */\\n  function pow (int128 x, uint n) public pure returns (int128 r) {\\n    r = ABDKMath64x64.fromUInt (1);  while (n > 0) {\\n    if (n % 2 == 1) {\\n      r = ABDKMath64x64.mul (r, x);\\n      n -= 1;\\n    } else {\\n      x = ABDKMath64x64.mul (x, x);\\n      n /= 2;\\n    }\\n  }\\n  }\\n\\n  /**\\n   * @dev Method to compute APY gained. Note: this is only used for comparison, not actually used to compute real gain\\n   * @param principal Principal provided\\n   * @param ratio Amount of APY gained per second\\n   * @param n Duration\\n   */\\n  function compoundInterestByTime(uint principal, uint ratio, uint n) public pure returns (uint) {\\n    return ABDKMath64x64.mulu (\\n      pow (\\n        ABDKMath64x64.add (ABDKMath64x64.fromUInt (1), ABDKMath64x64.divu (ratio, 10**18)),\\n        n),\\n      principal);\\n  }\\n\\n  /**\\n   * @dev Wrapper method that is bound to the smart contract apyPerSec variable\\n   * @dev Enables durations to be set manually\\n   * @dev Not used to compute real gain\\n   * @param principal Principal provided\\n   * @param duration Duration\\n   * @return the amount gained: principal + yield\\n   */\\n  function compoundWithPrincipalAndTime(uint principal, uint duration) external view returns (uint) {\\n    return compoundInterestByTime(principal, compound.apyPerSec, duration);\\n  }\\n\\n  /**\\n   * @dev Wrapper method that is bound to the smart contract apyPerSec and computes duration against live blockchain data\\n   * @dev Not used to compute real gain\\n   * @param principal Principal provided\\n   * @return the amount gained: principal + yield\\n   */\\n  function compoundWithPrincipal(uint principal) public view returns (uint) {\\n    uint duration = block.timestamp - compound.startTime;\\n    return compoundInterestByTime(principal, compound.apyPerSec, duration);\\n  }\\n\\n  /**\\n   * @dev Wrapper method that computes gain using the callers information\\n   * @dev Uses all predefined variables in the smart contract and blockchain state\\n   * @dev Not used to compute real gain\\n   * @return the amount gained: principal + yield\\n   */\\n  function compoundWithPrincipalByUser() external view returns (uint) {\\n    return compoundWithPrincipal(_balances[msg.sender]);\\n  }\\n\\n  /**\\n   * @dev Raw method that computes gain using blocks instead of time\\n   * @param principal Principal provided\\n   * @param blocksStaked Number of blocks with which to compute gain\\n   * @return the amount gained: principal + yield\\n   */\\n  function _compoundInterestByBlock(uint principal, uint blocksStaked) public view returns (uint) {\\n    uint reward = SafeMath.div(compound.apyPerBlock.mul(principal).mul(blocksStaked), 10**18);\\n    return reward.add(principal);\\n  }\\n\\n  /**\\n   * @dev Computes yield gained using block raw function\\n   * @dev Makes sure that a user cannot gain more yield than poolBlockDuration as defined in the smart contract\\n   * @param principal Principal\\n   * @return the amount gained: principal + yield\\n   */\\n  function compoundInterestByBlock(uint principal) public view returns (uint) {\\n    uint numBlocksPassed = block.number.sub(compound.interestStartBlock);\\n    uint blocksStaked = _blocksStaked(numBlocksPassed, poolDurationByBlock);\\n    return _compoundInterestByBlock(principal, blocksStaked);\\n  }\\n\\n  // -----------------------------------------------------------------------\\n  // GETTERS\\n  // -----------------------------------------------------------------------\\n\\n  /**\\n   * @dev Gets block and time information out of the smart contract\\n   * @return _currentBlock Current block on the blockchain\\n   * @return _depositStartBlock Block where deposits are allowed\\n   * @return _depositEndBlock Block where deposits are no longer allowed\\n   * @return _interestStartBlock Block where yield starts growing\\n   * @return _interestEndBlock Block where yield stops growing\\n   * @return _interestStartTime Estimated yield start time (for comparison only)\\n   * @return _interestEndTime Estimated yield end time (for comparison only)\\n   * @return _interestApyPerSec APY per second rate defined in the smart contract\\n   * @return _interestApyPerBlock APY per block defined in the smart contract\\n   */\\n  function getCompoundInfo() external view returns (\\n    uint _currentBlock,\\n    uint _depositStartBlock,\\n    uint _depositEndBlock,\\n    uint _interestStartBlock,\\n    uint _interestEndBlock,\\n    uint _interestStartTime,\\n    uint _interestEndTime,\\n    uint _interestApyPerSec,\\n    uint _interestApyPerBlock\\n  ) {\\n    return (\\n    block.number,\\n    compound.depositStartBlock,\\n    compound.depositEndBlock,\\n    compound.interestStartBlock,\\n    compound.interestEndBlock,\\n    compound.startTime,\\n    compound.endTime,\\n    compound.apyPerSec,\\n    compound.apyPerBlock\\n    );\\n  }\\n\\n  /**\\n * @dev Gets info about secret pool. :P\\n * @return _secretBonusLimit Number of wallets who need to stake to unlock the secretBonusPool\\n * @return _secretBonusPool Total pool that will be divided by all users who stay for the entire duration (see withdrawTokens fn)\\n * @return _bonusUnlockable Bool is true if number of users who stake is over  _secretBonusLimit\\n * @return _bonusUnlocked Bool controls if the bonus is going to be applied (see withdrawTokens fn)\\n */\\n  function getSecretPoolInfo() public view returns (uint _secretBonusLimit, uint _secretBonusPool, bool _bonusUnlockable, bool _bonusUnlocked) {\\n    return (\\n      secretBonusLimit,\\n      secretBonusPool,\\n      numUniqueUsers > secretBonusLimit,\\n      block.number >= compound.interestEndBlock && numUniqueUsers > secretBonusLimit\\n    );\\n  }\\n\\n  /**\\n   * @dev Gets staking data from this smart contract\\n   * @return _totalPrincipal Total amount of tokens deposited as principal\\n   * @return _numUsersWithDeposits Number of users who have staked into this smart contract\\n   */\\n  function getAdminStakingInfo() public view returns (uint _totalPrincipal, uint _numUsersWithDeposits) {\\n    return (totalPrincipal, numUsersWithDeposits);\\n  }\\n\\n  /**\\n   * @dev Gets user balance data\\n   * @dev If this is called before any yield is gained, we manually display 0 reward\\n   * @param userAddress Address of a given user\\n   * @return _principal Principal that a user has staked\\n   * @return _reward Current estimated reward earned\\n   * @return _balance Total balance (_principal + _reward)\\n   */\\n  function getUserBalances(address userAddress) external view returns (uint _principal, uint _reward, uint _balance) {\\n    if(block.number <= compound.interestStartBlock) {\\n      return (\\n      _balances[userAddress],\\n      0,\\n      _balances[userAddress]);\\n    } else {\\n      uint totalBalance = compoundInterestByBlock(_balances[userAddress]);\\n      uint reward = totalBalance.sub(_balances[userAddress]);\\n      return (\\n      _balances[userAddress],\\n      reward,\\n      totalBalance\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Get list of active stakers and balances\\n   * @return {{addr, balance},...} as an array\\n   */\\n//  function getActiveStakers() public view returns (activeStaker[] memory) {\\n//    // Array of structs for active stakers\\n//    activeStaker[] memory activeStakers = new activeStaker[](numUsersWithDeposits);\\n//    uint i = 0; // index for activeStakers[]\\n//    uint j = 0; // index for addressByIndex[]\\n//    for (; i < numUsersWithDeposits ; j++) {\\n//      // If balances is zero, consider the address as an inactive staker\\n//      if (_balances[addressByIndex[j]] != 0) {\\n//        activeStakers[i].addr = addressByIndex[j];\\n//        activeStakers[i].balance = _balances[addressByIndex[j]];\\n//        i++;\\n//      }\\n//    }\\n//    return (activeStakers);\\n//  }\\n\\n  /**\\n   * @dev Reads the APY defined in the smart contract as a percentage\\n   * @return _apy APY in percentage form\\n   */\\n  function apy() external view returns (uint _apy) {\\n    return secondsPerYear * compound.apyPerSec * 100;\\n  }\\n\\n  // -----------------------------------------------------------------------\\n  // SETTERS\\n  // -----------------------------------------------------------------------\\n\\n  /**\\n   * @dev Enables the deposit window to be changed. Only the smart contract owner is allowed to do this\\n   * @dev Because blocks are not always found at the same rate, we may need to change the deposit window so events start on time\\n   * @dev We will only call this so the start time is as accurate as possible\\n   * @dev We have to recompute the yield start block and yield end block times as well\\n   * @param _depositStartBlock New deposit start block\\n   * @param _depositEndBlock New deposit end block\\n   */\\n  function changeDepositWindow(uint _depositStartBlock, uint _depositEndBlock) external onlyOwner {\\n    compound.depositStartBlock = _depositStartBlock;\\n    compound.depositEndBlock = _depositEndBlock;\\n    compound.interestStartBlock = _depositEndBlock.add(1);\\n    compound.interestEndBlock = compound.interestStartBlock.add(poolDurationByBlock);\\n\\n    uint blocksUntilInterestStarts = compound.interestStartBlock.sub(block.number);\\n    compound.startTime = block.timestamp.add(blocksUntilInterestStarts.mul(secondPerBlock));\\n\\n    uint blocksUntilInterestEnd = compound.interestEndBlock.sub(compound.interestStartBlock);\\n    compound.endTime = block.timestamp.add(blocksUntilInterestEnd.mul(secondPerBlock));\\n  }\\n\\n    /**\\n   * @dev Change the APY of the contract. Only the smart contract owner is allowed to do this\\n   * @dev The method should only be callable by the owner AND only if the current block is before compound.interestStartBlock\\n   * @param _newApyRate New APY \\n   */\\n\\n  function changeAPY(uint _newApyRate) external onlyOwner hasNotStartedYielding {    \\n    compound.apyPerSec = _newApyRate;\\n    compound.apyPerBlock = _newApyRate.mul(secondPerBlock);\\n  }\\n\\n  /**\\n   * @dev Enables a user to deposit their stake into this smart contract. A user must call approve tokens before calling this method\\n   * @dev This can only be called during the deposit window. Calling this before or after will fail\\n   * @dev We also make sure to track the state of [totalPrincipal, numUsersWithDeposits]\\n   * @param _amount The amount of tokens to stake into this smart contract\\n   */\\n  function stakeTokens(uint _amount) external depositWindow {\\n    require(_token.allowance(msg.sender, address(this)) >= _amount, \\\"TokenBalance: User has not allowed tokens to be used\\\");\\n    require(_token.balanceOf(msg.sender) >= _amount, \\\"TokenBalance: msg.sender can not stake more than they have\\\");\\n\\n    if(_balances[msg.sender] == 0) {\\n      numUsersWithDeposits++;\\n      numUniqueUsers++;\\n//      addressByIndex[numUniqueUsers++] = msg.sender;\\n    }\\n\\n    _balances[msg.sender] += _amount;\\n    totalPrincipal += _amount;\\n\\n    require(_token.transferFrom(msg.sender, address(this), _amount), \\\"TokenTransfer: failed to transfer tokens from msg.sender here\\\");\\n    emit TokenStaked(msg.sender, _amount);\\n  }\\n\\n\\n  /**\\n   * @dev Lets a user withdraw all their tokens from this smart contract\\n   * @dev A fee is charged on all withdrawals\\n   * @dev We make sure to track the state of [totalPrincipal, numUsersWithDeposits]\\n   */\\n  function withdrawTokens() external {\\n    require(_balances[msg.sender] > 0, \\\"TokenBalance: no tokens available to be withdrawn\\\");\\n\\n    uint totalBalance = 0;\\n\\n    if(block.number <= compound.depositEndBlock) {\\n      totalBalance = _balances[msg.sender];\\n    } else {\\n      totalBalance = compoundInterestByBlock(_balances[msg.sender]);\\n    }\\n    uint fee = totalBalance.div(feeDivisor);\\n    totalBalance = totalBalance.sub(fee);\\n\\n    if(block.number >= compound.interestEndBlock && numUniqueUsers > secretBonusLimit) {\\n      totalBalance += secretBonusPool.div(numUniqueUsers);\\n    }\\n\\n    totalPrincipal -= _balances[msg.sender];\\n    _balances[msg.sender] = 0;\\n    numUsersWithDeposits -= 1;\\n\\n    require(_token.transfer(msg.sender, totalBalance));\\n    emit TokenWithdrawn(msg.sender, totalBalance);\\n  }\\n\\n  /**\\n   * @dev Computes the amount of tokens the owner is allowed to withdraw\\n   * @dev Assumes owner deposited tokens at the end of the deposit window, and not all users stay for the full 30 days\\n   * @dev There will be a remainder because users leave before the 30 days is over. Owner withdraws the balance\\n   */\\n  function adminWithdrawRemaining() external onlyOwner {\\n    uint totalBalanceNeeded = compoundInterestByBlock(totalPrincipal);\\n    uint contractBalance = _token.balanceOf(address(this));\\n\\n    // We deposit tokens and assume everyone gains yield for the full 30 days\\n    // There is a difference because some users will withdraw tokens before the 30 days is over\\n    if(contractBalance > totalBalanceNeeded) {\\n      uint extraTokenBalance = contractBalance.sub(totalBalanceNeeded);\\n      require(_token.transfer(msg.sender, extraTokenBalance));\\n      emit TokenWithdrawn(msg.sender, extraTokenBalance);\\n    }\\n  }\\n\\n  /**\\n   * @dev Lets owner, and only the owner, withdraw any amount of tokens\\n   * @dev ONLY TO BE CALLED IN A CATASTROPHIC SCENARIO!!!\\n   * @param _amount Number of tokens to withdraw\\n   */\\n  function withdrawExtraTokens(uint _amount) external onlyOwner {\\n    require(_token.transfer(msg.sender, _amount));\\n    emit TokenWithdrawn(msg.sender, _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n    /*\\n     * Minimum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n    /*\\n     * Maximum value signed 64.64-bit fixed point number may have.\\n     */\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /**\\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromInt (int256 x) internal pure returns (int128) {\\n    unchecked {\\n        require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n        return int128 (x << 64);\\n    }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n     * rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64-bit integer number\\n     */\\n    function toInt (int128 x) internal pure returns (int64) {\\n    unchecked {\\n        return int64 (x >> 64);\\n    }\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromUInt (uint256 x) internal pure returns (int128) {\\n    unchecked {\\n        require (x <= 0x7FFFFFFFFFFFFFFF);\\n        return int128 (int256 (x << 64));\\n    }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n     * number rounding down.  Revert on underflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return unsigned 64-bit integer number\\n     */\\n    function toUInt (int128 x) internal pure returns (uint64) {\\n    unchecked {\\n        require (x >= 0);\\n        return uint64 (uint128 (x >> 64));\\n    }\\n    }\\n\\n    /**\\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n     * number rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 128.128-bin fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function from128x128 (int256 x) internal pure returns (int128) {\\n    unchecked {\\n        int256 result = x >> 64;\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128 (result);\\n    }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n     * number.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 128.128 fixed point number\\n     */\\n    function to128x128 (int128 x) internal pure returns (int256) {\\n    unchecked {\\n        return int256 (x) << 64;\\n    }\\n    }\\n\\n    /**\\n     * Calculate x + y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function add (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n        int256 result = int256(x) + y;\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128 (result);\\n    }\\n    }\\n\\n    /**\\n     * Calculate x - y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sub (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n        int256 result = int256(x) - y;\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128 (result);\\n    }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function mul (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n        int256 result = int256(x) * y >> 64;\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128 (result);\\n    }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n     * number and y is signed 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y signed 256-bit integer number\\n     * @return signed 256-bit integer number\\n     */\\n    function muli (int128 x, int256 y) internal pure returns (int256) {\\n    unchecked {\\n        if (x == MIN_64x64) {\\n            require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n            y <= 0x1000000000000000000000000000000000000000000000000);\\n            return -y << 63;\\n        } else {\\n            bool negativeResult = false;\\n            if (x < 0) {\\n                x = -x;\\n                negativeResult = true;\\n            }\\n            if (y < 0) {\\n                y = -y; // We rely on overflow behavior here\\n                negativeResult = !negativeResult;\\n            }\\n            uint256 absoluteResult = mulu (x, uint256 (y));\\n            if (negativeResult) {\\n                require (absoluteResult <=\\n                    0x8000000000000000000000000000000000000000000000000000000000000000);\\n                return -int256 (absoluteResult); // We rely on overflow behavior here\\n            } else {\\n                require (absoluteResult <=\\n                    0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int256 (absoluteResult);\\n            }\\n        }\\n    }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    unchecked {\\n        if (y == 0) return 0;\\n\\n        require (x >= 0);\\n\\n        uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n        uint256 hi = uint256 (int256 (x)) * (y >> 128);\\n\\n        require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        hi <<= 64;\\n\\n        require (hi <=\\n            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n        return hi + lo;\\n    }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function div (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n        require (y != 0);\\n        int256 result = (int256 (x) << 64) / y;\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128 (result);\\n    }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @param y signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divi (int256 x, int256 y) internal pure returns (int128) {\\n    unchecked {\\n        require (y != 0);\\n\\n        bool negativeResult = false;\\n        if (x < 0) {\\n            x = -x; // We rely on overflow behavior here\\n            negativeResult = true;\\n        }\\n        if (y < 0) {\\n            y = -y; // We rely on overflow behavior here\\n            negativeResult = !negativeResult;\\n        }\\n        uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n        if (negativeResult) {\\n            require (absoluteResult <= 0x80000000000000000000000000000000);\\n            return -int128 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n            require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return int128 (absoluteResult); // We rely on overflow behavior here\\n        }\\n    }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n        require (y != 0);\\n        uint128 result = divuu (x, y);\\n        require (result <= uint128 (MAX_64x64));\\n        return int128 (result);\\n    }\\n    }\\n\\n    /**\\n     * Calculate -x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function neg (int128 x) internal pure returns (int128) {\\n    unchecked {\\n        require (x != MIN_64x64);\\n        return -x;\\n    }\\n    }\\n\\n    /**\\n     * Calculate |x|.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function abs (int128 x) internal pure returns (int128) {\\n    unchecked {\\n        require (x != MIN_64x64);\\n        return x < 0 ? -x : x;\\n    }\\n    }\\n\\n    /**\\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function inv (int128 x) internal pure returns (int128) {\\n    unchecked {\\n        require (x != 0);\\n        int256 result = int256 (0x100000000000000000000000000000000) / x;\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128 (result);\\n    }\\n    }\\n\\n    /**\\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function avg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n        return int128 ((int256 (x) + int256 (y)) >> 1);\\n    }\\n    }\\n\\n    /**\\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n     * Revert on overflow or in case x * y is negative.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n        int256 m = int256 (x) * int256 (y);\\n        require (m >= 0);\\n        require (m <\\n            0x4000000000000000000000000000000000000000000000000000000000000000);\\n        return int128 (sqrtu (uint256 (m)));\\n    }\\n    }\\n\\n    /**\\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y uint256 value\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n        bool negative = x < 0 && y & 1 == 1;\\n\\n        uint256 absX = uint128 (x < 0 ? -x : x);\\n        uint256 absResult;\\n        absResult = 0x100000000000000000000000000000000;\\n\\n        if (absX <= 0x10000000000000000) {\\n            absX <<= 63;\\n            while (y != 0) {\\n                if (y & 0x1 != 0) {\\n                    absResult = absResult * absX >> 127;\\n                }\\n                absX = absX * absX >> 127;\\n\\n                if (y & 0x2 != 0) {\\n                    absResult = absResult * absX >> 127;\\n                }\\n                absX = absX * absX >> 127;\\n\\n                if (y & 0x4 != 0) {\\n                    absResult = absResult * absX >> 127;\\n                }\\n                absX = absX * absX >> 127;\\n\\n                if (y & 0x8 != 0) {\\n                    absResult = absResult * absX >> 127;\\n                }\\n                absX = absX * absX >> 127;\\n\\n                y >>= 4;\\n            }\\n\\n            absResult >>= 64;\\n        } else {\\n            uint256 absXShift = 63;\\n            if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\n            if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\n            if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\n            if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\n            if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\n            if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\n\\n            uint256 resultShift = 0;\\n            while (y != 0) {\\n                require (absXShift < 64);\\n\\n                if (y & 0x1 != 0) {\\n                    absResult = absResult * absX >> 127;\\n                    resultShift += absXShift;\\n                    if (absResult > 0x100000000000000000000000000000000) {\\n                        absResult >>= 1;\\n                        resultShift += 1;\\n                    }\\n                }\\n                absX = absX * absX >> 127;\\n                absXShift <<= 1;\\n                if (absX >= 0x100000000000000000000000000000000) {\\n                    absX >>= 1;\\n                    absXShift += 1;\\n                }\\n\\n                y >>= 1;\\n            }\\n\\n            require (resultShift < 64);\\n            absResult >>= 64 - resultShift;\\n        }\\n        int256 result = negative ? -int256 (absResult) : int256 (absResult);\\n        require (result >= MIN_64x64 && result <= MAX_64x64);\\n        return int128 (result);\\n    }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sqrt (int128 x) internal pure returns (int128) {\\n    unchecked {\\n        require (x >= 0);\\n        return int128 (sqrtu (uint256 (int256 (x)) << 64));\\n    }\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function log_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n        require (x > 0);\\n\\n        int256 msb = 0;\\n        int256 xc = x;\\n        if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n        int256 result = msb - 64 << 64;\\n        uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\n        for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n            ux *= ux;\\n            uint256 b = ux >> 255;\\n            ux >>= 127 + b;\\n            result += bit * int256 (b);\\n        }\\n\\n        return int128 (result);\\n    }\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function ln (int128 x) internal pure returns (int128) {\\n    unchecked {\\n        require (x > 0);\\n\\n        return int128 (int256 (\\n                uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\n    }\\n    }\\n\\n    /**\\n     * Calculate binary exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n        require (x < 0x400000000000000000); // Overflow\\n\\n        if (x < -0x400000000000000000) return 0; // Underflow\\n\\n        uint256 result = 0x80000000000000000000000000000000;\\n\\n        if (x & 0x8000000000000000 > 0)\\n            result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n        if (x & 0x4000000000000000 > 0)\\n            result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n        if (x & 0x2000000000000000 > 0)\\n            result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n        if (x & 0x1000000000000000 > 0)\\n            result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n        if (x & 0x800000000000000 > 0)\\n            result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n        if (x & 0x400000000000000 > 0)\\n            result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n        if (x & 0x200000000000000 > 0)\\n            result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n        if (x & 0x100000000000000 > 0)\\n            result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n        if (x & 0x80000000000000 > 0)\\n            result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n        if (x & 0x40000000000000 > 0)\\n            result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n        if (x & 0x20000000000000 > 0)\\n            result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n        if (x & 0x10000000000000 > 0)\\n            result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n        if (x & 0x8000000000000 > 0)\\n            result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n        if (x & 0x4000000000000 > 0)\\n            result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n        if (x & 0x2000000000000 > 0)\\n            result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n        if (x & 0x1000000000000 > 0)\\n            result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n        if (x & 0x800000000000 > 0)\\n            result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n        if (x & 0x400000000000 > 0)\\n            result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n        if (x & 0x200000000000 > 0)\\n            result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n        if (x & 0x100000000000 > 0)\\n            result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n        if (x & 0x80000000000 > 0)\\n            result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n        if (x & 0x40000000000 > 0)\\n            result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n        if (x & 0x20000000000 > 0)\\n            result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n        if (x & 0x10000000000 > 0)\\n            result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n        if (x & 0x8000000000 > 0)\\n            result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n        if (x & 0x4000000000 > 0)\\n            result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n        if (x & 0x2000000000 > 0)\\n            result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n        if (x & 0x1000000000 > 0)\\n            result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n        if (x & 0x800000000 > 0)\\n            result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n        if (x & 0x400000000 > 0)\\n            result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n        if (x & 0x200000000 > 0)\\n            result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n        if (x & 0x100000000 > 0)\\n            result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n        if (x & 0x80000000 > 0)\\n            result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n        if (x & 0x40000000 > 0)\\n            result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n        if (x & 0x20000000 > 0)\\n            result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n        if (x & 0x10000000 > 0)\\n            result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n        if (x & 0x8000000 > 0)\\n            result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n        if (x & 0x4000000 > 0)\\n            result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n        if (x & 0x2000000 > 0)\\n            result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n        if (x & 0x1000000 > 0)\\n            result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n        if (x & 0x800000 > 0)\\n            result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n        if (x & 0x400000 > 0)\\n            result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n        if (x & 0x200000 > 0)\\n            result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n        if (x & 0x100000 > 0)\\n            result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n        if (x & 0x80000 > 0)\\n            result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n        if (x & 0x40000 > 0)\\n            result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n        if (x & 0x20000 > 0)\\n            result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n        if (x & 0x10000 > 0)\\n            result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n        if (x & 0x8000 > 0)\\n            result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n        if (x & 0x4000 > 0)\\n            result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n        if (x & 0x2000 > 0)\\n            result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n        if (x & 0x1000 > 0)\\n            result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n        if (x & 0x800 > 0)\\n            result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n        if (x & 0x400 > 0)\\n            result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n        if (x & 0x200 > 0)\\n            result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n        if (x & 0x100 > 0)\\n            result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n        if (x & 0x80 > 0)\\n            result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n        if (x & 0x40 > 0)\\n            result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n        if (x & 0x20 > 0)\\n            result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n        if (x & 0x10 > 0)\\n            result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n        if (x & 0x8 > 0)\\n            result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n        if (x & 0x4 > 0)\\n            result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n        if (x & 0x2 > 0)\\n            result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n        if (x & 0x1 > 0)\\n            result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n        result >>= uint256 (int256 (63 - (x >> 64)));\\n        require (result <= uint256 (int256 (MAX_64x64)));\\n\\n        return int128 (int256 (result));\\n    }\\n    }\\n\\n    /**\\n     * Calculate natural exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp (int128 x) internal pure returns (int128) {\\n    unchecked {\\n        require (x < 0x400000000000000000); // Overflow\\n\\n        if (x < -0x400000000000000000) return 0; // Underflow\\n\\n        return exp_2 (\\n            int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n    }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 64.64-bit fixed point number\\n     */\\n    function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    unchecked {\\n        require (y != 0);\\n\\n        uint256 result;\\n\\n        if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n            result = (x << 64) / y;\\n        else {\\n            uint256 msb = 192;\\n            uint256 xc = x >> 192;\\n            if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n            if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n            if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n            if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n            if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n            if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n            result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n            require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n            uint256 hi = result * (y >> 128);\\n            uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n            uint256 xh = x >> 192;\\n            uint256 xl = x << 64;\\n\\n            if (xl < lo) xh -= 1;\\n            xl -= lo; // We rely on overflow behavior here\\n            lo = hi << 128;\\n            if (xl < lo) xh -= 1;\\n            xl -= lo; // We rely on overflow behavior here\\n\\n            assert (xh == hi >> 128);\\n\\n            result += xl / y;\\n        }\\n\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return uint128 (result);\\n    }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n     * number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return unsigned 128-bit integer number\\n     */\\n    function sqrtu (uint256 x) private pure returns (uint128) {\\n    unchecked {\\n        if (x == 0) return 0;\\n        else {\\n            uint256 xx = x;\\n            uint256 r = 1;\\n            if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n            if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n            if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n            if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n            if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n            if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n            if (xx >= 0x8) { r <<= 1; }\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1;\\n            r = (r + x / r) >> 1; // Seven iterations should be enough\\n            uint256 r1 = x / r;\\n            return uint128 (r < r1 ? r : r1);\\n        }\\n    }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_apyPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolDurationByBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secretBonusLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secretBonusPool\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numBlocksPassed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBlock\",\"type\":\"uint256\"}],\"name\":\"_blocksStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocksStaked\",\"type\":\"uint256\"}],\"name\":\"_compoundInterestByBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminWithdrawRemaining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newApyRate\",\"type\":\"uint256\"}],\"name\":\"changeAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositEndBlock\",\"type\":\"uint256\"}],\"name\":\"changeDepositWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"}],\"name\":\"compoundInterestByBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"compoundInterestByTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"}],\"name\":\"compoundWithPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"compoundWithPrincipalAndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundWithPrincipalByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminStakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numUsersWithDeposits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCompoundInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestApyPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestApyPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSecretPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_secretBonusLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secretBonusPool\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_bonusUnlockable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_bonusUnlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"x\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"pow\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"r\",\"type\":\"int128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawExtraTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SplytStaking","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007bef710a5759d197ec0bf621c3df802c2d60d84800000000000000000000000000000000000000000000000000000006a3ea99500000000000000000000000000000000000000000000000000000000000c930b50000000000000000000000000000000000000000000000000000000000c9afa9000000000000000000000000000000000000000000000000000000000008ed2800000000000000000000000000000000000000000000000000000000000003840000000000000000000000000000000000000000000069e10de76676d0800000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}