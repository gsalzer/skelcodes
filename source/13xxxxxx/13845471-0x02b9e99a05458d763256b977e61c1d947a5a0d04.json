{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OwnerRelayOnEthereum.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\n// Inheritance\\nimport \\\"./LegacyOwned.sol\\\";\\n\\n// Internal references\\nimport \\\"./interfaces/IOwnerRelayOnOptimism.sol\\\";\\nimport \\\"@eth-optimism/contracts/iOVM/bridge/messaging/iAbs_BaseCrossDomainMessenger.sol\\\";\\n\\ncontract OwnerRelayOnEthereum is LegacyOwned {\\n    address public MESSENGER;\\n    address public CONTRACT_OVM_OWNER_RELAY_ON_OPTIMISM;\\n    uint32 public constant MAX_CROSS_DOMAIN_GAS_LIMIT = 8e6;\\n\\n    // ========== CONSTRUCTOR ==========\\n    constructor(\\n        address _owner,\\n        address _messengerAddress,\\n        address _relayOnOptimism\\n    ) public LegacyOwned(_owner) {\\n        MESSENGER = _messengerAddress;\\n        CONTRACT_OVM_OWNER_RELAY_ON_OPTIMISM = _relayOnOptimism;\\n    }\\n\\n    /* ========== INTERNALS ============ */\\n\\n    function _messenger() private view returns (iAbs_BaseCrossDomainMessenger) {\\n        return iAbs_BaseCrossDomainMessenger(MESSENGER);\\n    }\\n\\n    function _getCrossDomainGasLimit(uint32 crossDomainGasLimit)\\n        private\\n        view\\n        returns (uint32)\\n    {\\n        // Use specified crossDomainGasLimit if specified value is not zero.\\n        // otherwise use the default in SystemSettings.\\n        return\\n            crossDomainGasLimit != 0\\n                ? crossDomainGasLimit\\n                : MAX_CROSS_DOMAIN_GAS_LIMIT;\\n    }\\n\\n    /* ========== RESTRICTED ========== */\\n\\n    function initiateRelay(\\n        address target,\\n        bytes calldata payload,\\n        uint32 crossDomainGasLimit // If zero, uses default value in SystemSettings\\n    ) external onlyOwner {\\n        IOwnerRelayOnOptimism ownerRelayOnOptimism;\\n        bytes memory messageData = abi.encodeWithSelector(\\n            ownerRelayOnOptimism.finalizeRelay.selector,\\n            target,\\n            payload\\n        );\\n\\n        _messenger().sendMessage(\\n            CONTRACT_OVM_OWNER_RELAY_ON_OPTIMISM,\\n            messageData,\\n            _getCrossDomainGasLimit(crossDomainGasLimit)\\n        );\\n\\n        emit RelayInitiated(target, payload);\\n    }\\n\\n    function initiateRelayBatch(\\n        address[] calldata targets,\\n        bytes[] calldata payloads,\\n        uint32 crossDomainGasLimit // If zero, uses default value in SystemSettings\\n    ) external onlyOwner {\\n        // First check that the length of the arguments match\\n        require(targets.length == payloads.length, \\\"Argument length mismatch\\\");\\n\\n        IOwnerRelayOnOptimism ownerRelayOnOptimism;\\n        bytes memory messageData = abi.encodeWithSelector(\\n            ownerRelayOnOptimism.finalizeRelayBatch.selector,\\n            targets,\\n            payloads\\n        );\\n\\n        _messenger().sendMessage(\\n            CONTRACT_OVM_OWNER_RELAY_ON_OPTIMISM,\\n            messageData,\\n            _getCrossDomainGasLimit(crossDomainGasLimit)\\n        );\\n\\n        emit RelayBatchInitiated(targets, payloads);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RelayInitiated(address target, bytes payload);\\n    event RelayBatchInitiated(address[] targets, bytes[] payloads);\\n}\\n\"\r\n    },\r\n    \"contracts/LegacyOwned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.5.16;\\n\\n// https://docs.synthetix.io/contracts/source/contracts/owned\\ncontract LegacyOwned {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    constructor(address _owner) public {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(\\n            msg.sender == nominatedOwner,\\n            \\\"You must be nominated before you can accept ownership\\\"\\n        );\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner() {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    function _onlyOwner() private view {\\n        require(\\n            msg.sender == owner,\\n            \\\"Only the contract owner may perform this action\\\"\\n        );\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOwnerRelayOnOptimism.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.24;\\npragma experimental ABIEncoderV2;\\n\\ninterface IOwnerRelayOnOptimism {\\n    function finalizeRelay(address target, bytes calldata payload) external;\\n\\n    function finalizeRelayBatch(\\n        address[] calldata target,\\n        bytes[] calldata payloads\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@eth-optimism/contracts/iOVM/bridge/messaging/iAbs_BaseCrossDomainMessenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title iAbs_BaseCrossDomainMessenger\\n */\\ninterface iAbs_BaseCrossDomainMessenger {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event SentMessage(bytes message);\\n    event RelayedMessage(bytes32 msgHash);\\n    event FailedRelayedMessage(bytes32 msgHash);\\n\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    function xDomainMessageSender() external view returns (address);\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address _target,\\n        bytes calldata _message,\\n        uint32 _gasLimit\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_messengerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relayOnOptimism\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"payloads\",\"type\":\"bytes[]\"}],\"name\":\"RelayBatchInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"RelayInitiated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_OVM_OWNER_RELAY_ON_OPTIMISM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CROSS_DOMAIN_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MESSENGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"crossDomainGasLimit\",\"type\":\"uint32\"}],\"name\":\"initiateRelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"uint32\",\"name\":\"crossDomainGasLimit\",\"type\":\"uint32\"}],\"name\":\"initiateRelayBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OwnerRelayOnEthereum","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000051b0332e1b3349bcf01689e63e34d8859595e37600000000000000000000000025ace71c97b33cc4729cf772ae268934f7ab5fa100000000000000000000000088fdc711eff5877b464d299c7ac3077135c6c5ca","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}