{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Auction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.6;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport {Initializable} from \\\"Initializable.sol\\\";\\nimport {IERC721} from \\\"IERC721.sol\\\";\\nimport {IERC20} from \\\"IERC20.sol\\\";\\nimport {SafeERC20} from \\\"SafeERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"ReentrancyGuard.sol\\\";\\nimport {IERC165} from \\\"IERC165.sol\\\";\\nimport {DataTypes} from \\\"DataTypes.sol\\\";\\nimport {Errors} from \\\"Errors.sol\\\";\\nimport {AdminPausableUpgradeSafe} from \\\"AdminPausableUpgradeSafe.sol\\\";\\nimport \\\"IERC721TokenAuthor.sol\\\";\\n\\n\\n/**\\n * @dev Auction between NFT holders and participants.\\n */\\ncontract Auction is AdminPausableUpgradeSafe, ReentrancyGuard, Initializable {\\n    using SafeERC20 for IERC20;\\n\\n    mapping(uint256 /*tokenId*/ => DataTypes.AuctionData) internal _nftId2auction;\\n    uint256 public minPriceStepNumerator;\\n    uint256 constant public DENOMINATOR = 10000;\\n    uint256 constant public MIN_MIN_PRICE_STEP_NUMERATOR = 1;  // 0.01%\\n    uint256 constant public MAX_MIN_PRICE_STEP_NUMERATOR = 10000;  // 100%\\n\\n    uint256 public authorRoyaltyNumerator;\\n    uint256 public overtimeWindow;\\n    uint256 public auctionDuration;\\n    uint256 constant MAX_OVERTIME_WINDOW = 365 days;\\n    uint256 constant MIN_OVERTIME_WINDOW = 1 minutes;\\n    uint256 constant MAX_AUCTION_DURATION = 365 days;\\n    uint256 constant MIN_AUCTION_DURATION = 1 minutes;\\n    IERC20 public payableToken;\\n    IERC721 public nft;\\n\\n    address public treasury;\\n    uint256 public feeCreatorToBuyerTokenNumerator;\\n    uint256 public feeResellerToBuyerTokenNumerator;\\n    uint256 public feeCreatorToBuyerETHNumerator;\\n    uint256 public feeResellerToBuyerETHNumerator;\\n\\n    /**\\n     * @notice Emitted when a new treasury is set.\\n     *\\n     * @param treasury The treasury address.\\n     */\\n    event TreasurySet(\\n        address indexed treasury\\n    );\\n\\n    /**\\n     * @notice Emitted when a new feeCreatorToBuyerTokenNumerator is set.\\n     *\\n     * @param feeCreatorToBuyerTokenNumerator The feeCreatorToBuyerTokenNumerator value.\\n     */\\n    event FeeCreatorToBuyerTokenNumeratorSet(\\n        uint256 indexed feeCreatorToBuyerTokenNumerator\\n    );\\n\\n    /**\\n     * @notice Emitted when a new feeResellerToBuyerTokenNumerator is set.\\n     *\\n     * @param feeResellerToBuyerTokenNumerator The feeResellerToBuyerTokenNumerator value.\\n     */\\n    event FeeResellerToBuyerTokenNumeratorSet(\\n        uint256 indexed feeResellerToBuyerTokenNumerator\\n    );\\n\\n    /**\\n     * @notice Emitted when a new feeCreatorToBuyerETHNumerator is set.\\n     *\\n     * @param feeCreatorToBuyerETHNumerator The feeCreatorToBuyerETHNumerator value.\\n     */\\n    event FeeCreatorToBuyerETHNumeratorSet(\\n        uint256 indexed feeCreatorToBuyerETHNumerator\\n    );\\n\\n    /**\\n     * @notice Emitted whepaidToAuctioneern a new feeResellerToBuyerETHNumerator is set.\\n     *\\n     * @param feeResellerToBuyerETHNumerator The feeResellerToBuyerETHNumerator value.\\n     */\\n    event FeeResellerToBuyerETHNumeratorSet(\\n        uint256 indexed feeResellerToBuyerETHNumerator\\n    );\\n\\n    /**\\n     * @notice Emitted when a new auction is created.\\n     *\\n     * @param nftId The NFT ID of the token to auction.\\n     * @param auctioneer The creator.\\n     * @param startPrice The auction's starting price.\\n     * @param priceToken The token of startPrice or 0 for ether.\\n     */\\n    event AuctionCreated(\\n        uint256 indexed nftId,\\n        address indexed auctioneer,\\n        uint256 startPrice,\\n        address priceToken\\n    );\\n\\n    /**\\n     * @notice Emitted when a royalty paid to an author.\\n     *\\n     * @param nftId The NFT ID of the token to auction.\\n     * @param author The author.\\n     * @param amount The royalty amount.\\n     * @param amountToken The token of royalty amount or 0 for ether.\\n     */\\n    event RoyaltyPaid(\\n        uint256 indexed nftId,\\n        address indexed author,\\n        uint256 amount,\\n        address amountToken\\n    );\\n\\n    /**\\n     * @notice Emitted when fee is paid to treasury.\\n     *\\n     * @param nftId The NFT ID of the token to auction.\\n     * @param payer The payer.\\n     * @param feeAmount The fee amount.\\n     * @param amountToken The token of amount or 0 for ether.\\n     */\\n    event FeePaid(\\n        uint256 indexed nftId,\\n        address indexed payer,\\n        uint256 feeAmount,\\n        address amountToken\\n    );\\n\\n    /**\\n     * @notice Emitted when an auction is canceled.\\n     *\\n     * @param nftId The NFT ID of the token to auction.\\n     * @param canceler Who canceled the auction.\\n     */\\n    event AuctionCanceled(\\n        uint256 indexed nftId,\\n        address indexed canceler\\n    );\\n\\n    /**\\n     * @notice Emitted when a new auction params are set.\\n     *\\n     * @param minPriceStepNumerator.\\n     */\\n    event MinPriceStepNumeratorSet(\\n        uint256 minPriceStepNumerator\\n    );\\n\\n    /**\\n     * @notice Emitted when a new auction params are set.\\n     *\\n     * @param auctionDuration.\\n     */\\n    event AuctionDurationSet(\\n        uint256 auctionDuration\\n    );\\n\\n    /**\\n     * @notice Emitted when a new auction params are set.\\n     *\\n     * @param overtimeWindow.\\n     */\\n    event OvertimeWindowSet(\\n        uint256 overtimeWindow\\n    );\\n\\n    /**\\n     * @notice Emitted when a new auction params are set.\\n     *\\n     * @param authorRoyaltyNumerator.\\n     */\\n    event AuthorRoyaltyNumeratorSet(\\n        uint256 authorRoyaltyNumerator\\n    );\\n\\n    /**\\n     * @notice Emitted when a new bid or outbid is created on a given NFT.\\n     *\\n     * @param nftId The NFT ID of the token bid on.\\n     * @param bidder The bidder address.\\n     * @param amount The amount used to bid.\\n     * @param amountToken The token of amount bid or 0 for ether.\\n     * @param endTimestamp The new end timestamp.\\n     */\\n    event BidSubmitted(\\n        uint256 indexed nftId,\\n        address indexed bidder,\\n        uint256 amount,\\n        address amountToken,\\n        uint256 endTimestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when an NFT is won and claimed.\\n     *\\n     * @param nftId The NFT ID of the token claimed.\\n     * @param winner The winner of the NFT.\\n     * @param claimCaller Who called the claim method.\\n     * @param wonBidAmount The total bid amount.\\n     * @param paidToAuctioneer How much tokens are paid to auctioneer (excluding fee and royalty).\\n     */\\n    event WonNftClaimed(\\n        uint256 indexed nftId,\\n        address indexed winner,\\n        address claimCaller,\\n        uint256 wonBidAmount,\\n        uint256 paidToAuctioneer\\n    );\\n\\n    /**\\n     * @notice Emitted when auction reserve price changed.\\n     *\\n     * @param nftId The NFT ID of the token changed.\\n     * @param startPrice The new reserve price.\\n     * @param startPriceToken The token of start price or 0 for ether.\\n     * @param reservePriceChanger The caller of the method.\\n     */\\n    event ReservePriceChanged(\\n        uint256 indexed nftId,\\n        uint256 startPrice,\\n        address startPriceToken,\\n        address indexed reservePriceChanger\\n    );\\n\\n    function getPaused() external view returns(bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract.\\n     *\\n     * @param _overtimeWindow The overtime window,\\n     * triggers on bid `endTimestamp := max(endTimestamp, bid.timestamp + overtimeWindow)`\\n     * @param _auctionDuration The minimum auction duration.  (e.g. 24*3600)\\n     * @param _minStepNumerator The minimum auction price step. (e.g. 500 ~ 5% see `DENOMINATOR`)\\n     * @param _payableToken The address of payable token.\\n     * @param _nft Only one NFT is allowed.\\n     * @param _adminAddress The administrator address to set, allows pausing and editing settings.\\n     * @param _treasury The address of treasury.\\n     * @param _feeCreatorToBuyerTokenNumerator fee for token auctions.\\n     * @param _feeResellerToBuyerTokenNumerator fee for token auctions.\\n     * @param _feeCreatorToBuyerETHNumerator fee for ETH auctions.\\n     * @param _feeResellerToBuyerETHNumerator fee for ETH auctions.\\n     */\\n    function initialize(\\n        uint256 _overtimeWindow,\\n        uint256 _auctionDuration,\\n        uint256 _minStepNumerator,\\n        uint256 _authorRoyaltyNumerator,\\n        address _payableToken,\\n        address _nft,\\n        address _adminAddress,\\n        address _treasury,\\n        uint256 _feeCreatorToBuyerTokenNumerator,\\n        uint256 _feeResellerToBuyerTokenNumerator,\\n        uint256 _feeCreatorToBuyerETHNumerator,\\n        uint256 _feeResellerToBuyerETHNumerator\\n    ) external initializer {\\n        require(\\n            _adminAddress != address(0),\\n            Errors.ZERO_ADDRESS\\n        );\\n        require(\\n            _payableToken != address(0),\\n            Errors.ZERO_ADDRESS\\n        );\\n        require(\\n            _nft != address(0),\\n            Errors.ZERO_ADDRESS\\n        );\\n        require(\\n            _treasury != address(0),\\n            Errors.ZERO_ADDRESS\\n        );\\n        _admin = _adminAddress;\\n        payableToken = IERC20(_payableToken);\\n        nft = IERC721(_nft);\\n        treasury = _treasury;\\n        setAuctionDuration(_auctionDuration);\\n        setOvertimeWindow(_overtimeWindow);\\n        setMinPriceStepNumerator(_minStepNumerator);\\n        setAuthorRoyaltyNumerator(_authorRoyaltyNumerator);\\n        setFeeCreatorToBuyerTokenNumerator(_feeCreatorToBuyerTokenNumerator);\\n        setFeeResellerToBuyerTokenNumerator(_feeResellerToBuyerTokenNumerator);\\n        setFeeCreatorToBuyerETHNumerator(_feeCreatorToBuyerETHNumerator);\\n        setFeeResellerToBuyerETHNumerator(_feeResellerToBuyerETHNumerator);\\n    }\\n\\n    /**\\n     * @dev Admin function to set new treasury address.\\n     *\\n     * @param treasuryAddress The new treasury address.\\n     */\\n    function setTreasury(address treasuryAddress) external onlyAdmin {\\n        require(\\n            treasuryAddress != address(0),\\n            Errors.ZERO_ADDRESS\\n        );\\n        treasury = treasuryAddress;\\n        emit TreasurySet(treasuryAddress);\\n    }\\n\\n    /**\\n     * @dev Admin function to change the auction duration.\\n     *\\n     * @param newAuctionDuration The new minimum auction duration to set.\\n     */\\n    function setAuctionDuration(uint256 newAuctionDuration) public onlyAdmin {\\n        require(newAuctionDuration >= MIN_AUCTION_DURATION && newAuctionDuration <= MAX_AUCTION_DURATION,\\n            Errors.INVALID_AUCTION_PARAMS);\\n        auctionDuration = newAuctionDuration;\\n        emit AuctionDurationSet(newAuctionDuration);\\n    }\\n\\n    /**\\n     * @dev Admin function to set the auction overtime window.\\n     *\\n     * @param newOvertimeWindow The new overtime window to set.\\n     */\\n    function setOvertimeWindow(uint256 newOvertimeWindow) public onlyAdmin {\\n        require(newOvertimeWindow >= MIN_OVERTIME_WINDOW && newOvertimeWindow <= MAX_OVERTIME_WINDOW,\\n            Errors.INVALID_AUCTION_PARAMS);\\n        overtimeWindow = newOvertimeWindow;\\n        emit OvertimeWindowSet(newOvertimeWindow);\\n    }\\n\\n    /**\\n     * @dev Admin function to set the auction price step numerator.\\n     *\\n     * @param newMinPriceStepNumerator The new overtime window to set.\\n     */\\n    function setMinPriceStepNumerator(uint256 newMinPriceStepNumerator) public onlyAdmin {\\n        require(newMinPriceStepNumerator >= MIN_MIN_PRICE_STEP_NUMERATOR &&\\n                newMinPriceStepNumerator <= MAX_MIN_PRICE_STEP_NUMERATOR,\\n            Errors.INVALID_AUCTION_PARAMS);\\n        minPriceStepNumerator = newMinPriceStepNumerator;\\n        emit MinPriceStepNumeratorSet(newMinPriceStepNumerator);\\n    }\\n\\n    /**\\n     * @dev Admin function to set author royalty numerator.\\n     *\\n     * @param newAuthorRoyaltyNumerator The new overtime window to set.\\n     */\\n    function setAuthorRoyaltyNumerator(uint256 newAuthorRoyaltyNumerator) public onlyAdmin {\\n        require(newAuthorRoyaltyNumerator <= DENOMINATOR, Errors.INVALID_AUCTION_PARAMS);\\n        authorRoyaltyNumerator = newAuthorRoyaltyNumerator;\\n        emit AuthorRoyaltyNumeratorSet(newAuthorRoyaltyNumerator);\\n    }\\n\\n    /**\\n     * @dev Admin function to set setFeeCreatorToBuyerTokenNumerator.\\n     *\\n     * @param newFeeCreatorToBuyerTokenNumerator The new value.\\n     */\\n    function setFeeCreatorToBuyerTokenNumerator(uint256 newFeeCreatorToBuyerTokenNumerator) public onlyAdmin {\\n        require(newFeeCreatorToBuyerTokenNumerator <= DENOMINATOR, Errors.INVALID_AUCTION_PARAMS);\\n        feeCreatorToBuyerTokenNumerator = newFeeCreatorToBuyerTokenNumerator;\\n        emit FeeCreatorToBuyerTokenNumeratorSet(newFeeCreatorToBuyerTokenNumerator);\\n    }\\n\\n    /**\\n     * @dev Admin function to set setFeeResellerToBuyerTokenNumerator.\\n     *\\n     * @param newFeeResellerToBuyerTokenNumerator The new value.\\n     */\\n    function setFeeResellerToBuyerTokenNumerator(uint256 newFeeResellerToBuyerTokenNumerator) public onlyAdmin {\\n        require(newFeeResellerToBuyerTokenNumerator <= DENOMINATOR, Errors.INVALID_AUCTION_PARAMS);\\n        feeResellerToBuyerTokenNumerator = newFeeResellerToBuyerTokenNumerator;\\n        emit FeeResellerToBuyerTokenNumeratorSet(newFeeResellerToBuyerTokenNumerator);\\n    }\\n\\n    /**\\n     * @dev Admin function to set setFeeCreatorToBuyerETHNumerator.\\n     *\\n     * @param newFeeCreatorToBuyerETHNumerator The new value.\\n     */\\n    function setFeeCreatorToBuyerETHNumerator(uint256 newFeeCreatorToBuyerETHNumerator) public onlyAdmin {\\n        require(newFeeCreatorToBuyerETHNumerator <= DENOMINATOR, Errors.INVALID_AUCTION_PARAMS);\\n        feeCreatorToBuyerETHNumerator = newFeeCreatorToBuyerETHNumerator;\\n        emit FeeCreatorToBuyerETHNumeratorSet(newFeeCreatorToBuyerETHNumerator);\\n    }\\n\\n    /**\\n     * @dev Admin function to set setFeeResellerToBuyerETHNumerator.\\n     *\\n     * @param newFeeResellerToBuyerETHNumerator The new value.\\n     */\\n    function setFeeResellerToBuyerETHNumerator(uint256 newFeeResellerToBuyerETHNumerator) public onlyAdmin {\\n        require(newFeeResellerToBuyerETHNumerator <= DENOMINATOR, Errors.INVALID_AUCTION_PARAMS);\\n        feeResellerToBuyerETHNumerator = newFeeResellerToBuyerETHNumerator;\\n        emit FeeResellerToBuyerETHNumeratorSet(newFeeResellerToBuyerETHNumerator);\\n    }\\n\\n    /**\\n     * @dev Create new auction.\\n     *\\n     * @param nftId Id of NFT token for the auction (must be approved for transfer by Auction smart-contract).\\n     * @param startPrice Minimum price for the first bid in ether or tokens depending on isEtherPrice value.\\n     * @param isEtherPrice True to create auction in ether, false to create auction in payableToken.\\n     */\\n    function createAuction(\\n        uint256 nftId,\\n        uint256 startPrice,\\n        bool isEtherPrice\\n    ) external nonReentrant whenNotPaused {\\n        require(_nftId2auction[nftId].auctioneer == address(0), Errors.AUCTION_EXISTS);\\n        require(startPrice > 0, Errors.INVALID_AUCTION_PARAMS);\\n        address token = isEtherPrice ? address(0) : address(payableToken);\\n        DataTypes.AuctionData memory auctionData = DataTypes.AuctionData(\\n            startPrice,\\n            token,\\n            msg.sender,\\n            address(0),  // bidder\\n            0  // endTimestamp\\n        );\\n        _nftId2auction[nftId] = auctionData;\\n        IERC721(nft).transferFrom(msg.sender, address(this), nftId);  // maybe use safeTransferFrom\\n        emit AuctionCreated(nftId, msg.sender, startPrice, token);\\n    }\\n\\n    /**\\n     * @notice Claims a won NFT after an auction. Can be called by anyone.\\n     *\\n     * @param nftId The NFT ID of the token to claim.\\n     */\\n    function claimWonNFT(uint256 nftId) external nonReentrant whenNotPaused {\\n        DataTypes.AuctionData storage auction = _nftId2auction[nftId];\\n\\n        address auctioneer = auction.auctioneer;\\n        address winner = auction.currentBidder;\\n        uint256 endTimestamp = auction.endTimestamp;\\n        uint256 currentBid = auction.currentBid;\\n        uint256 payToAuctioneer = currentBid;\\n        address bidToken = auction.bidToken;\\n\\n        require(block.timestamp > endTimestamp, Errors.AUCTION_NOT_FINISHED);\\n        require(winner != address(0), Errors.EMPTY_WINNER);  // auction does not exist or did not start, no bid\\n\\n        delete _nftId2auction[nftId];  // storage change before external calls\\n\\n        // warning: will not work for usual erc721\\n        address author = IERC721TokenAuthor(address(nft)).tokenAuthor(nftId);\\n        if (author != auctioneer) {  // pay royalty\\n            uint256 payToAuthor = currentBid * authorRoyaltyNumerator / DENOMINATOR;\\n            payToAuctioneer -= payToAuthor;\\n            emit RoyaltyPaid(nftId, author, payToAuthor, bidToken);\\n            if (bidToken == address(0)) {  // eth\\n                payable(author).transfer(payToAuthor);\\n            } else {  // erc20\\n                payableToken.safeTransfer(author, payToAuthor);\\n            }\\n            // note: as the result of this mechanism, there is one contr-intuitive consequence:\\n            //   creator receives the discount on buying back his created NFT.\\n            //   New nft holder must be informed that he will not receive 100%\\n            //   of money from his auction because of the roylaty\\n        }\\n\\n        if (bidToken == address(0)) {  // eth\\n            uint256 fee = 0;\\n            if (author == auctioneer) {  // creatorToBuyer\\n                fee = payToAuctioneer * uint256(feeCreatorToBuyerETHNumerator) / uint256(DENOMINATOR);\\n            } else {  // resellerToBuyer\\n                fee = payToAuctioneer * uint256(feeResellerToBuyerETHNumerator) / uint256(DENOMINATOR);\\n            }\\n            if (fee > 0) {\\n                payToAuctioneer -= fee;\\n                payable(treasury).transfer(fee);\\n            }\\n            emit FeePaid({\\n                nftId: nftId,\\n                payer: winner,\\n                feeAmount: fee,\\n                amountToken: address(0)\\n            });\\n            emit WonNftClaimed(nftId, winner, msg.sender, currentBid, payToAuctioneer);\\n            payable(auctioneer).transfer(payToAuctioneer);\\n        } else {  //erc20\\n            uint256 fee = 0;\\n            if (author == auctioneer) {  // creatorToBuyer\\n                fee = payToAuctioneer * uint256(feeCreatorToBuyerTokenNumerator) / uint256(DENOMINATOR);\\n            } else {  // resellerToBuyer\\n                fee = payToAuctioneer * uint256(feeResellerToBuyerTokenNumerator) / uint256(DENOMINATOR);\\n            }\\n            if (fee > 0) {\\n                payToAuctioneer -= fee;\\n                payableToken.safeTransfer(treasury, fee);\\n            }\\n            emit FeePaid({\\n                nftId: nftId,\\n                payer: winner,\\n                feeAmount: fee,\\n                amountToken: address(payableToken)\\n            });\\n            emit WonNftClaimed(nftId, winner, msg.sender, currentBid, payToAuctioneer);\\n            payableToken.safeTransfer(auctioneer, payToAuctioneer);\\n        }\\n        // sine we use the only one nft, we don't need to call safeTransferFrom\\n        IERC721(nft).transferFrom(address(this), winner, nftId);\\n    }\\n\\n    /**\\n     * @notice Returns the auction data for a given NFT.\\n     *\\n     * @param nftId The NFT ID to query.\\n     *\\n     * @return The AuctionData containing all data related to a given NFT.\\n     */\\n    function getAuctionData(uint256 nftId) external view returns (DataTypes.AuctionData memory) {\\n        DataTypes.AuctionData memory auction = _nftId2auction[nftId];\\n        require(auction.auctioneer != address(0), Errors.AUCTION_NOT_EXISTS);\\n        return auction;\\n    }\\n\\n    /**\\n     * @notice Cancel an auction. Can be called by the auctioneer or by the admin.\\n     *\\n     * @param nftId The NFT ID of the token to cancel.\\n     */\\n    function cancelAuction(\\n        uint256 nftId\\n    ) external whenNotPaused nonReentrant {\\n        DataTypes.AuctionData memory auction = _nftId2auction[nftId];\\n        require(\\n            auction.auctioneer != address(0),\\n            Errors.AUCTION_NOT_EXISTS\\n        );\\n        require(\\n            msg.sender == auction.auctioneer || msg.sender == _admin,  // do we really need admin control?\\n            Errors.NO_RIGHTS\\n        );\\n        require(\\n            auction.currentBidder == address(0),\\n            Errors.AUCTION_ALREADY_STARTED\\n        );  // auction can't be canceled if someone placed a bid.\\n        delete _nftId2auction[nftId];\\n        emit AuctionCanceled(nftId, msg.sender);\\n        // maybe use safeTransfer (I don't want unclear onERC721Received stuff)\\n        IERC721(nft).transferFrom(address(this), auction.auctioneer, nftId);\\n    }\\n\\n    /**\\n     * @notice Change the reserve price (minimum price) of the auction.\\n     *\\n     * @param nftId The NFT ID of the token.\\n     * @param startPrice New start price in tokens or ether depending on auction type.\\n     * @param isEtherPrice Should the bidToken be ETH or ERC20.\\n     */\\n    function changeReservePrice(\\n        uint256 nftId,\\n        uint256 startPrice,\\n        bool isEtherPrice\\n    ) external whenNotPaused nonReentrant {\\n        DataTypes.AuctionData memory auction = _nftId2auction[nftId];\\n        require(\\n            auction.auctioneer != address(0),\\n            Errors.AUCTION_NOT_EXISTS\\n        );\\n        require(\\n            msg.sender == auction.auctioneer || msg.sender == _admin, // do we really need admin control?\\n            Errors.NO_RIGHTS\\n        );\\n        require(\\n            auction.currentBidder == address(0),\\n            Errors.AUCTION_ALREADY_STARTED\\n        );  // auction can't be canceled if someone placed a bid.\\n        require(\\n            startPrice > 0,\\n            Errors.INVALID_AUCTION_PARAMS\\n        );\\n        address bidToken = isEtherPrice ? address(0) : address(payableToken);\\n        _nftId2auction[nftId].currentBid = startPrice;\\n        _nftId2auction[nftId].bidToken = bidToken;\\n        emit ReservePriceChanged({\\n            nftId: nftId,\\n            startPrice: startPrice,\\n            startPriceToken: bidToken,\\n            reservePriceChanger: msg.sender\\n        });\\n    }\\n\\n    /**\\n     * @notice Place the bid in ERC20 tokens.\\n     *\\n     * @param nftId The NFT ID of the token.\\n     * @param amount Bid amount in ERC20 tokens.\\n     */\\n    function bid(\\n        uint256 nftId,\\n        uint256 amount\\n    ) external whenNotPaused nonReentrant {\\n        _bid(nftId, amount, address(payableToken));\\n    }\\n\\n    /**\\n     * @notice Place the bid in ETH.\\n     *\\n     * @param nftId The NFT ID of the token.\\n     * @param amount Bid amount in ETH.\\n     */\\n    function bidEther(\\n        uint256 nftId,\\n        uint256 amount\\n    ) external payable whenNotPaused nonReentrant {\\n        _bid(nftId, amount, address(0));\\n    }\\n\\n    /**\\n     * @notice Place the bid.\\n     *\\n     * @param nftId The NFT id.\\n     * @param amount Bid amount.\\n     */\\n    function _bid(\\n        uint256 nftId,\\n        uint256 amount,\\n        address auctionToken\\n    ) internal {\\n        DataTypes.AuctionData storage auction = _nftId2auction[nftId];\\n        require(auction.auctioneer != address(0), Errors.AUCTION_NOT_EXISTS);\\n        uint256 currentBid = auction.currentBid;\\n        address currentBidder = auction.currentBidder;\\n        uint256 endTimestamp = auction.endTimestamp;\\n\\n        if (auctionToken != address(0)){  // erc20\\n            require(\\n                auction.bidToken == auctionToken,\\n                Errors.CANT_BID_ETHER_AUCTION_BY_TOKENS\\n            );\\n        } else {  // eth\\n            require(\\n                auction.bidToken == address(0),\\n                Errors.CANT_BID_TOKEN_AUCTION_BY_ETHER\\n            );\\n        }\\n\\n        require(\\n            block.timestamp < endTimestamp || // already finished\\n            endTimestamp == 0,  // or not started\\n            Errors.AUCTION_FINISHED\\n        );\\n\\n        uint256 newEndTimestamp = auction.endTimestamp;\\n        if (endTimestamp == 0) { // first bid\\n            require(amount >= currentBid, Errors.SMALL_BID_AMOUNT);  // >= startPrice stored in currentBid\\n            newEndTimestamp = block.timestamp + auctionDuration;\\n            auction.endTimestamp = newEndTimestamp;\\n        } else {\\n            require(amount >= (DENOMINATOR + minPriceStepNumerator) * currentBid / DENOMINATOR,\\n                Errors.SMALL_BID_AMOUNT);  // >= step over the previous bid\\n            if (block.timestamp > endTimestamp - overtimeWindow) {\\n                newEndTimestamp = block.timestamp + overtimeWindow;\\n                auction.endTimestamp = newEndTimestamp;\\n            }\\n        }\\n\\n        auction.currentBidder = msg.sender;\\n        auction.currentBid = amount;\\n\\n        // emit here to avoid reentry events mis-ordering\\n        emit BidSubmitted(nftId, msg.sender, amount, auction.bidToken, newEndTimestamp);\\n\\n        if (auctionToken != address(0)){  // erc20\\n            if (currentBidder != msg.sender) {\\n                if (currentBidder != address(0)) {\\n                     payableToken.safeTransfer(currentBidder, currentBid);\\n                }\\n                payableToken.safeTransferFrom(msg.sender, address(this), amount);\\n            } else {\\n                uint256 more = amount - currentBid;\\n                payableToken.safeTransferFrom(msg.sender, address(this), more);\\n            }\\n        } else {  // eth\\n            if (currentBidder != msg.sender) {\\n                require(msg.value == amount, Errors.INVALID_ETHER_AMOUNT);\\n                if (currentBidder != address(0)) {\\n                    payable(currentBidder).transfer(currentBid);\\n                }\\n            } else {\\n                uint256 more = amount - currentBid;\\n                require(msg.value == more, Errors.INVALID_ETHER_AMOUNT);\\n            }\\n        }\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.6;\\n\\n\\nlibrary DataTypes {\\n    struct AuctionData {\\n        uint256 currentBid;\\n        address bidToken; // determines currentBid token, zero address means ether\\n        address auctioneer;\\n        address currentBidder;\\n        uint256 endTimestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.6;\\n\\n\\n// Contains error code strings\\n\\nlibrary Errors {\\n  string public constant INVALID_AUCTION_PARAMS = 'INVALID_AUCTION_PARAMS';\\n  string public constant INVALID_ETHER_AMOUNT = 'INVALID_ETHER_AMOUNT';\\n  string public constant AUCTION_EXISTS = 'AUCTION_EXISTS';\\n  string public constant AUCTION_NOT_FINISHED = 'AUCTION_NOT_FINISHED';\\n  string public constant AUCTION_FINISHED = 'AUCTION_FINISHED';\\n  string public constant SMALL_BID_AMOUNT = 'SMALL_BID_AMOUNT';\\n  string public constant PAUSED = 'PAUSED';\\n  string public constant NO_RIGHTS = 'NO_RIGHTS';\\n  string public constant NOT_ADMIN = 'NOT_ADMIN';\\n  string public constant NOT_OWNER = 'NOT_OWNER';\\n  string public constant NOT_EXISTS = 'NOT_EXISTS';\\n  string public constant EMPTY_WINNER = 'EMPTY_WINNER';\\n  string public constant AUCTION_ALREADY_STARTED = 'AUCTION_ALREADY_STARTED';\\n  string public constant AUCTION_NOT_EXISTS = 'AUCTION_NOT_EXISTS';\\n  string public constant ZERO_ADDRESS = 'ZERO_ADDRESS';\\n  string public constant CANT_BID_TOKEN_AUCTION_BY_ETHER = 'CANT_BID_TOKEN_AUCTION_BY_ETHER';\\n  string public constant CANT_BID_ETHER_AUCTION_BY_TOKENS = 'CANT_BID_ETHER_AUCTION_BY_TOKENS';\\n  string public constant EMPTY_METADATA = 'EMPTY_METADATA';\\n}\\n\"\r\n    },\r\n    \"AdminPausableUpgradeSafe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.6;\\n\\nimport {Errors} from \\\"Errors.sol\\\";\\n\\n/**\\n * @title AdminPausableUpgradeSafe\\n *\\n * @dev Contract to be inherited from that adds simple administrator pausable functionality. This does not\\n * implement any changes on its own as there is no constructor or initializer. Both _admin and _paused must\\n * be initialized in the inheriting contract.\\n * @dev Inspired by `@openzeppelin-upgradeable/contracts/security/PausableUpgradeable.sol`\\n */\\ncontract AdminPausableUpgradeSafe {\\n    address internal _admin;\\n    bool internal _paused;\\n\\n    /**\\n     * @notice Emitted when the contract is paused.\\n     *\\n     * @param admin The current administrator address.\\n     */\\n    event Paused(address admin);\\n\\n    /**\\n     * @notice Emitted when the contract is unpaused.\\n     *\\n     * @param admin The current administrator address.\\n     */\\n    event Unpaused(address admin);\\n\\n    /**\\n     * @notice Emitted when the admin is set to a different address.\\n     *\\n     * @param to The address of the new administrator.\\n     */\\n    event AdminChanged(address to);\\n\\n    /**\\n     * @dev Modifier to only allow functions to be called when not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, Errors.PAUSED);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to only allow the admin as the caller.\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, Errors.NOT_ADMIN);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Admin function pauses the contract.\\n     */\\n    function pause() external onlyAdmin {\\n        _paused = true;\\n        emit Paused(_admin);\\n    }\\n\\n    /**\\n     * @dev Admin function unpauses the contract.\\n     */\\n    function unpause() external onlyAdmin {\\n        _paused = false;\\n        emit Unpaused(_admin);\\n    }\\n\\n    /**\\n     * @dev Admin function that changes the administrator.\\n     * @dev It is possible to set admin to address(0) (to disable administration), be careful!\\n     */\\n    function changeAdmin(address to) external onlyAdmin {\\n        _admin = to;\\n        emit AdminChanged(to);\\n    }\\n\\n    /**\\n     * @dev View function that returns the current admin.\\n     */\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    uint256[3] private __gap;  // contract uses small number of slots (5 in total)\\n}\"\r\n    },\r\n    \"IERC721TokenAuthor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.6;\\n\\n/**\\n * @dev Interface of extension of the ERC721 standard to allow `tokenAuthor` method.\\n */\\ninterface IERC721TokenAuthor {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function tokenAuthor(uint256 tokenId) external view returns(address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"canceler\",\"type\":\"address\"}],\"name\":\"AuctionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auctioneer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceToken\",\"type\":\"address\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"name\":\"AuctionDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"authorRoyaltyNumerator\",\"type\":\"uint256\"}],\"name\":\"AuthorRoyaltyNumeratorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"amountToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"BidSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feeCreatorToBuyerETHNumerator\",\"type\":\"uint256\"}],\"name\":\"FeeCreatorToBuyerETHNumeratorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feeCreatorToBuyerTokenNumerator\",\"type\":\"uint256\"}],\"name\":\"FeeCreatorToBuyerTokenNumeratorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"amountToken\",\"type\":\"address\"}],\"name\":\"FeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feeResellerToBuyerETHNumerator\",\"type\":\"uint256\"}],\"name\":\"FeeResellerToBuyerETHNumeratorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feeResellerToBuyerTokenNumerator\",\"type\":\"uint256\"}],\"name\":\"FeeResellerToBuyerTokenNumeratorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPriceStepNumerator\",\"type\":\"uint256\"}],\"name\":\"MinPriceStepNumeratorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"overtimeWindow\",\"type\":\"uint256\"}],\"name\":\"OvertimeWindowSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"startPriceToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reservePriceChanger\",\"type\":\"address\"}],\"name\":\"ReservePriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"amountToken\",\"type\":\"address\"}],\"name\":\"RoyaltyPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasurySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimCaller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wonBidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidToAuctioneer\",\"type\":\"uint256\"}],\"name\":\"WonNftClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MIN_PRICE_STEP_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_MIN_PRICE_STEP_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authorRoyaltyNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bidEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEtherPrice\",\"type\":\"bool\"}],\"name\":\"changeReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"claimWonNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEtherPrice\",\"type\":\"bool\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCreatorToBuyerETHNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCreatorToBuyerTokenNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeResellerToBuyerETHNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeResellerToBuyerTokenNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"getAuctionData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auctioneer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currentBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.AuctionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_overtimeWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStepNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_authorRoyaltyNumerator\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeCreatorToBuyerTokenNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeResellerToBuyerTokenNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeCreatorToBuyerETHNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeResellerToBuyerETHNumerator\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPriceStepNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overtimeWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payableToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAuctionDuration\",\"type\":\"uint256\"}],\"name\":\"setAuctionDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAuthorRoyaltyNumerator\",\"type\":\"uint256\"}],\"name\":\"setAuthorRoyaltyNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeCreatorToBuyerETHNumerator\",\"type\":\"uint256\"}],\"name\":\"setFeeCreatorToBuyerETHNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeCreatorToBuyerTokenNumerator\",\"type\":\"uint256\"}],\"name\":\"setFeeCreatorToBuyerTokenNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeResellerToBuyerETHNumerator\",\"type\":\"uint256\"}],\"name\":\"setFeeResellerToBuyerETHNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeResellerToBuyerTokenNumerator\",\"type\":\"uint256\"}],\"name\":\"setFeeResellerToBuyerTokenNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinPriceStepNumerator\",\"type\":\"uint256\"}],\"name\":\"setMinPriceStepNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newOvertimeWindow\",\"type\":\"uint256\"}],\"name\":\"setOvertimeWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Auction","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}