{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-11-01\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2021-10-30\r\n*/\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    // constructor () internal {\r\n    //     _owner = msg.sender;\r\n    //     emit OwnershipTransferred(address(0), _owner);\r\n    // }\r\n    function ownerInit() internal {\r\n         _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function mint(address recipient, uint256 amount) external returns(bool);\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n      function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function blindBox(address seller, string calldata tokenURI, bool flag, address to, string calldata ownerId) external returns (uint256);\r\n    function mintAliaForNonCrypto(uint256 price, address from) external returns (bool);\r\n    function nonCryptoNFTVault() external returns(address);\r\n    function mainPerecentage() external returns(uint256);\r\n    function authorPercentage() external returns(uint256);\r\n    function platformPerecentage() external returns(uint256);\r\n    function updateAliaBalance(string calldata stringId, uint256 amount) external returns(bool);\r\n    function getSellDetail(uint256 tokenId) external view returns (address, uint256, uint256, address, uint256, uint256, uint256);\r\n    function getNonCryptoWallet(string calldata ownerId) external view returns(uint256);\r\n    function getNonCryptoOwner(uint256 tokenId) external view returns(string memory);\r\n    function adminOwner(address _address) external view returns(bool);\r\n     function getAuthor(uint256 tokenIdFunction) external view returns (address);\r\n     function _royality(uint256 tokenId) external view returns (uint256);\r\n     function getrevenueAddressBlindBox(string calldata info) external view returns(address);\r\n     function getboxNameByToken(uint256 token) external view returns(string memory);\r\n    //Revenue share\r\n    function addNonCryptoAuthor(string calldata artistId, uint256 tokenId, bool _isArtist) external returns(bool);\r\n    function transferAliaArtist(address buyer, uint256 price, address nftVaultAddress, uint256 tokenId ) external returns(bool);\r\n    function checkArtistOwner(string calldata artistId, uint256 tokenId) external returns(bool);\r\n    function checkTokenAuthorIsArtist(uint256 tokenId) external returns(bool);\r\n    function withdraw(uint) external;\r\n    function deposit() payable external;\r\n    // function approve(address spender, uint256 rawAmount) external;\r\n\r\n    // BlindBox ref:https://noborderz.slack.com/archives/C0236PBG601/p1633942033011800?thread_ts=1633941154.010300&cid=C0236PBG601\r\n    function isSellable (string calldata name) external view returns(bool);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n    function burn (uint256 tokenId) external;\r\n\r\n}\r\n\r\n// File: contracts/INFT.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n// import \"../openzeppelin-solidity/contracts/token/ERC721/IERC721Full.sol\";\r\n\r\ninterface INFT {\r\n    function transferFromAdmin(address owner, address to, uint256 tokenId) external;\r\n    function mintWithTokenURI(address to, string calldata tokenURI) external returns (uint256);\r\n    function getAuthor(uint256 tokenIdFunction) external view returns (address);\r\n    function updateTokenURI(uint256 tokenIdT, string calldata uriT) external;\r\n    //\r\n    function mint(address to, string calldata tokenURI) external returns (uint256);\r\n    function transferOwnership(address newOwner) external;\r\n    function ownerOf(uint256 tokenId) external view returns(address);\r\n    function transferFrom(address owner, address to, uint256 tokenId) external;\r\n}\r\n\r\n// File: contracts/IFactory.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract IFactory {\r\n    function create(string calldata name_, string calldata symbol_, address owner_) external returns(address);\r\n    function getCollections(address owner_) external view returns(address [] memory);\r\n}\r\n\r\n// File: contracts/LPInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface LPInterface {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n   \r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/Proxy/DexStorage.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n/**\r\n * @title DexStorage\r\n * @dev Defining dex storage for the proxy contract.\r\n */\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract DexStorage {\r\n  using SafeMath for uint256;\r\n   address x; // dummy variable, never set or use its value in any logic contracts. It keeps garbage value & append it with any value set on it.\r\n   IERC20 ALIA;\r\n   INFT XNFT;\r\n   IFactory factory;\r\n   IERC20 OldNFTDex;\r\n   IERC20 BUSD;\r\n   IERC20 BNB;\r\n   struct RDetails {\r\n       address _address;\r\n       uint256 percentage;\r\n   }\r\n  struct AuthorDetails {\r\n    address _address;\r\n    uint256 royalty;\r\n    string ownerId;\r\n    bool isSecondry;\r\n  }\r\n  // uint256[] public sellList; // this violates generlization as not tracking tokenIds agains nftContracts/collections but ignoring as not using it in logic anywhere (uncommented)\r\n  mapping (uint256 => mapping(address => AuthorDetails)) internal _tokenAuthors;\r\n  mapping (address => bool) public adminOwner;\r\n  address payable public platform;\r\n  address payable public authorVault;\r\n  uint256 internal platformPerecentage;\r\n  struct fixedSell {\r\n  //  address nftContract; // adding to support multiple NFT contracts buy/sell \r\n    address seller;\r\n    uint256 price;\r\n    uint256 timestamp;\r\n    bool isDollar;\r\n    uint256 currencyType;\r\n  }\r\n  // stuct for auction\r\n  struct auctionSell {\r\n    address seller;\r\n    address nftContract;\r\n    address bidder;\r\n    uint256 minPrice;\r\n    uint256 startTime;\r\n    uint256 endTime;\r\n    uint256 bidAmount;\r\n    bool isDollar;\r\n    uint256 currencyType;\r\n    // address nftAddress;\r\n  }\r\n\r\n  \r\n  // tokenId => nftContract => fixedSell\r\n  mapping (uint256 => mapping (address  => fixedSell)) internal _saleTokens;\r\n  mapping(address => bool) public _supportNft;\r\n  // tokenId => nftContract => auctionSell\r\n  mapping(uint256 => mapping ( address => auctionSell)) internal _auctionTokens;\r\n  address payable public nonCryptoNFTVault;\r\n  // tokenId => nftContract => ownerId\r\n  mapping (uint256=> mapping (address => string)) internal _nonCryptoOwners;\r\n  struct balances{\r\n    uint256 bnb;\r\n    uint256 Alia;\r\n    uint256 BUSD;\r\n  }\r\n  mapping (string => balances) internal _nonCryptoWallet;\r\n \r\n  LPInterface LPAlia;\r\n  LPInterface LPBNB;\r\n  uint256 public adminDiscount;\r\n  address admin;\r\n  mapping (string => address) internal revenueAddressBlindBox;\r\n  mapping (uint256=>string) internal boxNameByToken;\r\n   bool public collectionConfig;\r\n  uint256 public countCopy;\r\n  mapping (uint256=> mapping( address => mapping(uint256 => bool))) _allowedCurrencies;\r\n  IERC20 token;\r\n//   struct offer {\r\n//       address _address;\r\n//       string ownerId;\r\n//       uint256 currencyType;\r\n//       uint256 price;\r\n//   }\r\n//   struct offers {\r\n//       uint256 count;\r\n//       mapping (uint256 => offer) _offer;\r\n//   }\r\n//   mapping(uint256 => mapping(address => offers)) _offers;\r\n  uint256[] allowedArray;\r\n\r\n}\r\n\r\n// File: contracts/FixPriceDex.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract FixPriceDex is Ownable, DexStorage {\r\n   \r\n  event SellNFT(address indexed from, address nft_a, uint256 tokenId, address seller, uint256 price, uint256 royalty, uint256 baseCurrency, uint256[] allowedCurrencies);\r\n  event BuyNFT(address indexed from, address nft_a, uint256 tokenId, address buyer, uint256 price, uint256 baseCurrency, uint256 calculated, uint256 currencyType);\r\n  event CancelSell(address indexed from, address nftContract, uint256 tokenId);\r\n  event UpdatePrice(address indexed from, uint256 tokenId, uint256 newPrice, bool isDollar, address nftContract, uint256 baseCurrency, uint256[] allowedCurrencies);\r\n  event BuyNFTNonCrypto( address indexed from, address nft_a, uint256 tokenId, string buyer, uint256 price, uint256 baseCurrency, uint256 calculated, uint256 currencyType);\r\n  event SellNFTNonCrypto( address indexed from, address nft_a, uint256 tokenId, string seller, uint256 price, uint256 baseCurrency, uint256[] allowedCurrencies);\r\n  event MintWithTokenURINonCrypto(address indexed from, string to, string tokenURI, address collection);\r\n  event TransferPackNonCrypto(address indexed from, string to, uint256 tokenId);\r\n  event updateTokenEvent(address to,uint256 tokenId, string uriT);\r\n  event updateDiscount(uint256 amount);\r\n  event Collection(address indexed creater, address collection, string name, string symbol);\r\n  event CollectionsConfigured(address indexed xCollection, address factory);\r\n  event MintWithTokenURI(address indexed collection, uint256 indexed tokenId, address minter, string tokenURI);\r\n//   event Offer(uint256 tokenId, address indexed from, uint256 currencyType, uint256 offer, uint256 index);\r\n\r\n\r\n  modifier onlyAdminMinter() {\r\n      require(msg.sender==admin);\r\n      _;\r\n  }\r\n  function() external payable {}\r\n\r\n\r\n  function updateSellDetail(uint256 tokenId) internal {\r\n    (address seller, uint256 price, uint256 endTime, address bidder, uint256 minPrice, uint256 startTime, uint256 isDollar) = OldNFTDex.getSellDetail(tokenId);\r\n    if(minPrice == 0){\r\n      _saleTokens[tokenId][address(XNFT)].seller = seller;\r\n      _saleTokens[tokenId][address(XNFT)].price = price;\r\n      _saleTokens[tokenId][address(XNFT)].timestamp = endTime;\r\n      if(isDollar == 1){\r\n        _saleTokens[tokenId][address(XNFT)].isDollar = true;\r\n      }\r\n      _allowedCurrencies[tokenId][address(XNFT)][isDollar] = true;\r\n      if(seller == nonCryptoNFTVault){\r\n        string memory ownerId = OldNFTDex.getNonCryptoOwner(tokenId);\r\n        _nonCryptoOwners[tokenId][address(XNFT)] = ownerId;\r\n        _nonCryptoWallet[ownerId].Alia = OldNFTDex.getNonCryptoWallet(ownerId);\r\n      }\r\n    } else {\r\n      _auctionTokens[tokenId][address(XNFT)].seller = seller;\r\n      _auctionTokens[tokenId][address(XNFT)].nftContract = address(this);\r\n      _auctionTokens[tokenId][address(XNFT)].minPrice = minPrice;\r\n      _auctionTokens[tokenId][address(XNFT)].startTime = startTime;\r\n      _auctionTokens[tokenId][address(XNFT)].endTime = endTime;\r\n      _auctionTokens[tokenId][address(XNFT)].bidder = bidder;\r\n      _auctionTokens[tokenId][address(XNFT)].bidAmount = price;\r\n      if(seller == nonCryptoNFTVault ){\r\n         string memory ownerId = OldNFTDex.getNonCryptoOwner(tokenId);\r\n        _nonCryptoOwners[tokenId][address(XNFT)] = ownerId;\r\n        _nonCryptoWallet[ownerId].Alia = OldNFTDex.getNonCryptoWallet(ownerId);\r\n        _auctionTokens[tokenId][address(XNFT)].isDollar = true;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  \r\n  // modifier to check if given collection is supported by DEX\r\n  modifier isValid( address collection_) {\r\n    require(_supportNft[collection_],\"unsupported collection\");\r\n    _;\r\n  }\r\n  \r\n  function sellNFT(address nft_a,uint256 tokenId, address seller, uint256 price, uint256 baseCurrency, uint256[] memory allowedCurrencies) isValid(nft_a) public{\r\n    require(msg.sender == admin || (msg.sender == seller && INFT(nft_a).ownerOf(tokenId) == seller), \"101\");\r\n    // string storage boxName = boxNameByToken[tokenId];\r\n    uint256 royality;\r\n    require(baseCurrency <= 1, \"121\");\r\n    // require(revenueAddressBlindBox[boxName] == address(0x0) || IERC20(0x313Df3fE7c83d927D633b9a75e8A9580F59ae79B).isSellable(boxName), \"112\");\r\n    bool isValid = true;\r\n    for(uint256 i = 0; i< allowedCurrencies.length; i++){\r\n      if(allowedCurrencies[i] > 1){\r\n        isValid = false;\r\n      }\r\n      _allowedCurrencies[tokenId][nft_a][allowedCurrencies[i]] = true;\r\n    }\r\n    require(isValid,\"122\");\r\n    _saleTokens[tokenId][nft_a].seller = seller;\r\n    _saleTokens[tokenId][nft_a].price = price;\r\n    _saleTokens[tokenId][nft_a].timestamp = now;\r\n    // _saleTokens[tokenId][nft_a].isDollar = isDollar;\r\n    _saleTokens[tokenId][nft_a].currencyType = baseCurrency;\r\n    // need to check if it voilates generalization\r\n    // sellList.push(tokenId);\r\n    // dealing special case of escrowing for xanalia collection i.e XNFT\r\n    if(nft_a == address(XNFT)){\r\n         msg.sender == admin ? XNFT.transferFromAdmin(seller, address(this), tokenId) : XNFT.transferFrom(seller, address(this), tokenId);        \r\n          royality =  _tokenAuthors[tokenId][nft_a].royalty;\r\n    } else {\r\n      INFT(nft_a).transferFrom(seller, address(this), tokenId);\r\n      royality =  0; // making it zero as not setting royality for user defined collection's NFT\r\n    }\r\n    \r\n    emit SellNFT(msg.sender, nft_a, tokenId, seller, price, royality, baseCurrency, allowedCurrencies);\r\n  }\r\n\r\n  //mint & sell own/xanalia collection only\r\n  function MintAndSellNFT(address to, string memory tokenURI, uint256 price, string memory ownerId, uint256 royality, uint256 currencyType, uint256[] memory allowedCurrencies)  public { \r\n    uint256 tokenId;\r\n     tokenId = XNFT.mintWithTokenURI(to,string(abi.encodePacked(\"https://ipfs.infura.io:5001/api/v0/cat?arg=\", tokenURI)));\r\n     emit MintWithTokenURI(address(XNFT), tokenId, msg.sender, tokenURI);\r\n     if(royality > 0) _tokenAuthors[tokenId][address(XNFT)].royalty = royality;\r\n     else _tokenAuthors[tokenId][address(XNFT)].royalty = 25;\r\n     sellNFT(address(XNFT), tokenId, to, price, currencyType, allowedCurrencies);\r\n     _tokenAuthors[tokenId][address(XNFT)]._address = msg.sender;\r\n     if(msg.sender == admin) adminOwner[to] = true;\r\n     if(msg.sender == nonCryptoNFTVault){\r\n      emit MintWithTokenURINonCrypto(msg.sender, ownerId, tokenURI, address(XNFT));\r\n      _nonCryptoOwners[tokenId][address(XNFT)] = ownerId;\r\n      _tokenAuthors[tokenId][address(XNFT)].ownerId = ownerId;\r\n      emit SellNFTNonCrypto(msg.sender, address(XNFT), tokenId, ownerId, price,  currencyType, allowedCurrencies);\r\n    }\r\n }\r\n\r\n function Mint(address to, string memory tokenURI, uint256 royality, string memory ownerId)  public { \r\n    uint256 tokenId;\r\n     tokenId = XNFT.mintWithTokenURI(to,string(abi.encodePacked(\"https://ipfs.infura.io:5001/api/v0/cat?arg=\", tokenURI)));\r\n     emit MintWithTokenURI(address(XNFT), tokenId, msg.sender, tokenURI);\r\n     if(royality > 0) _tokenAuthors[tokenId][address(XNFT)].royalty = royality;\r\n     else _tokenAuthors[tokenId][address(XNFT)].royalty = 25;\r\n     _tokenAuthors[tokenId][address(XNFT)]._address = msg.sender;\r\n     if(msg.sender == admin) adminOwner[to] = true;\r\n     if(msg.sender == nonCryptoNFTVault){\r\n      emit MintWithTokenURINonCrypto(msg.sender, ownerId, tokenURI, address(XNFT));\r\n      _nonCryptoOwners[tokenId][address(XNFT)] = ownerId;\r\n      _tokenAuthors[tokenId][address(XNFT)].ownerId = ownerId;\r\n    }\r\n }\r\n\r\n\r\n // added nftContract param in function to support generalization\r\n  function cancelSell(address nftContract, uint256 tokenId) isValid(nftContract) public{\r\n        require(_saleTokens[tokenId][nftContract].seller == msg.sender || _auctionTokens[tokenId][nftContract].seller == msg.sender, \"101\");\r\n    if(_saleTokens[tokenId][nftContract].seller != address(0)){\r\n        // _transferFrom(address(this), _saleTokens[tokenId].seller, tokenId);\r\n        INFT(nftContract).transferFrom(address(this), _saleTokens[tokenId][nftContract].seller, tokenId);\r\n         delete _saleTokens[tokenId][nftContract];\r\n    }else {\r\n        require(_auctionTokens[tokenId][nftContract].bidder == address(0),\"109\");\r\n        INFT(nftContract).transferFrom(address(this), msg.sender, tokenId);\r\n        delete _auctionTokens[tokenId][nftContract];\r\n    }\r\n   \r\n    emit CancelSell(msg.sender, nftContract, tokenId);      \r\n  }\r\n\r\n // added nftContract param in function to support generalization\r\n  function getSellDetail(address nftContract, uint256 tokenId) public view returns (address, uint256, uint256, address, uint256, uint256, bool, uint256) {\r\n  fixedSell storage abc = _saleTokens[tokenId][nftContract];\r\n  auctionSell storage def = _auctionTokens[tokenId][nftContract];\r\n      if(abc.seller != address(0)){\r\n        uint256 salePrice = abc.price;\r\n        return (abc.seller, salePrice , abc.timestamp, address(0), 0, 0,abc.isDollar, abc.currencyType);\r\n      }else{\r\n          return (def.seller, def.bidAmount, def.endTime, def.bidder, def.minPrice,  def.startTime, def.isDollar, def.currencyType);\r\n      }\r\n  }\r\n//  added nftContract param in function to support generalization\r\n  function updatePrice(address nftContract, uint256 tokenId, uint256 newPrice, uint256 baseCurrency, uint256[] memory allowedCurrencies) isValid(nftContract)  public{\r\n    require(msg.sender == _saleTokens[tokenId][nftContract].seller || _auctionTokens[tokenId][nftContract].seller == msg.sender, \"110\");\r\n    require(newPrice > 0 ,\"111\");\r\n    if(_saleTokens[tokenId][nftContract].seller != address(0)){\r\n    require(newPrice > 0,\"121\");\r\n    bool isValid = true;\r\n    _allowedCurrencies[tokenId][nftContract][0]=false;\r\n    _allowedCurrencies[tokenId][nftContract][1]=false;\r\n    for(uint256 i = 0; i< allowedCurrencies.length; i++){\r\n      if(allowedCurrencies[i] > 1){\r\n        isValid = false;\r\n      }\r\n      _allowedCurrencies[tokenId][nftContract][allowedCurrencies[i]] = true;\r\n    }\r\n    require(isValid,\"122\");\r\n        _saleTokens[tokenId][nftContract].price = newPrice;\r\n        _saleTokens[tokenId][nftContract].currencyType = baseCurrency;\r\n      }else{\r\n        _auctionTokens[tokenId][nftContract].minPrice = newPrice;\r\n        _auctionTokens[tokenId][nftContract].currencyType = baseCurrency;\r\n      }\r\n    emit UpdatePrice(msg.sender, tokenId, newPrice, false, nftContract, baseCurrency, allowedCurrencies); // added nftContract here as well\r\n  }\r\n  function calculatePrice(uint256 _price, uint256 base, uint256 currencyType, uint256 tokenId, address seller, address nft_a) public view returns(uint256 price) {\r\n    price = _price;\r\n     (uint112 _reserve0, uint112 _reserve1,) =LPBNB.getReserves();\r\n    if(nft_a == address(XNFT) && _tokenAuthors[tokenId][address(XNFT)]._address == admin && adminOwner[seller] && adminDiscount > 0){ // getAuthor() can break generalization if isn't supported in Collection.sol. SOLUTION: royality isn't paying for user-defined collections\r\n        price = _price- ((_price * adminDiscount) / 1000);\r\n    }\r\n    if(currencyType == 0 && base == 1){\r\n      price = SafeMath.div(SafeMath.mul(price,SafeMath.mul(_reserve1,1000000000000)),_reserve0);\r\n    } else if(currencyType == 1 && base == 0){\r\n      price = SafeMath.div(SafeMath.mul(price,_reserve0),SafeMath.mul(_reserve1,1000000000000));\r\n    }\r\n    \r\n  }\r\n  function getPercentages(uint256 tokenId, address nft_a) public view returns(uint256 mainPerecentage, uint256 authorPercentage, address blindRAddress) {\r\n    if(_tokenAuthors[tokenId][nft_a].royalty > 0 && nft_a == address(XNFT)) { // royality for XNFT only (non-user defined collection)\r\n          mainPerecentage = SafeMath.sub(SafeMath.sub(1000,_tokenAuthors[tokenId][nft_a].royalty),platformPerecentage); //50\r\n          authorPercentage = _tokenAuthors[tokenId][nft_a].royalty;\r\n        } else {\r\n          mainPerecentage = SafeMath.sub(1000, platformPerecentage);\r\n        }\r\n     blindRAddress = revenueAddressBlindBox[boxNameByToken[tokenId]];\r\n    if(blindRAddress != address(0x0)){\r\n          mainPerecentage = 865;\r\n          authorPercentage =135;    \r\n    }\r\n  }\r\n  function buyNFT(address nft_a,uint256 tokenId, string memory ownerId, uint256 currencyType) isValid(nft_a) public{\r\n        fixedSell storage temp = _saleTokens[tokenId][nft_a];\r\n        require(temp.price > 0, \"108\");\r\n        require(_allowedCurrencies[tokenId][nft_a][currencyType] && currencyType != 1, \"123\");\r\n        uint256 price = calculatePrice(temp.price, temp.currencyType, currencyType, tokenId, temp.seller, nft_a);\r\n        (uint256 mainPerecentage, uint256 authorPercentage, address blindRAddress) = getPercentages(tokenId, nft_a);\r\n        price = SafeMath.div(price,1000000000000);\r\n        BUSD.transferFrom(msg.sender, platform, (price  / 1000) * platformPerecentage);\r\n        if( nft_a == address(XNFT)) {\r\n          BUSD.transferFrom(msg.sender,blindRAddress, (price  / 1000) *authorPercentage );\r\n        }\r\n        BUSD.transferFrom(msg.sender, temp.seller, (price  / 1000) * mainPerecentage); \r\n        clearMapping(tokenId, nft_a, temp.price, temp.currencyType, price, currencyType);\r\n  }\r\n  function buyNFTBnb(address nft_a,uint256 tokenId, string memory ownerId) isValid(nft_a) payable public{\r\n        fixedSell storage temp = _saleTokens[tokenId][nft_a];\r\n        // AuthorDetails storage author = _tokenAuthors[tokenId][address(XNFT)];\r\n        require(_allowedCurrencies[tokenId][nft_a][1], \"123\");\r\n        require(msg.sender != nonCryptoNFTVault, \"125\");\r\n        require(temp.price > 0 , \"108\");\r\n        uint256 price = calculatePrice(temp.price, temp.currencyType, 1, tokenId, temp.seller, nft_a);\r\n        (uint256 mainPerecentage, uint256 authorPercentage, address blindRAddress) = getPercentages(tokenId, nft_a);\r\n        uint256 before_bal = BNB.balanceOf(address(this));\r\n        BNB.deposit.value(msg.value)();\r\n        uint256 after_bal = BNB.balanceOf(address(this));\r\n        require(price == (after_bal - before_bal), \"NFT 108\");\r\n        if(blindRAddress == address(0x0)) {\r\n         blindRAddress = _tokenAuthors[tokenId][nft_a]._address;\r\n          bnbTransfer(platform, platformPerecentage, price);\r\n        }\r\n        if( nft_a == address(XNFT)) {\r\n         bnbTransfer(blindRAddress, authorPercentage, price);\r\n        }\r\n        bnbTransfer(temp.seller, mainPerecentage, price);\r\n        clearMapping(tokenId, nft_a, temp.price, temp.currencyType, price, 1 );\r\n        // in first argument there should seller not buyer/msg.sender, is it intentional ??\r\n        \r\n  }  \r\n\r\n  function clearMapping(uint256 tokenId, address nft_a, uint256 price, uint256 baseCurrency, uint256 calcultated, uint256 currencyType ) internal {\r\n      INFT(nft_a).transferFrom(address(this), msg.sender, tokenId);\r\n        delete _saleTokens[tokenId][nft_a];\r\n        for(uint256 i = 0; i <=2 ; i++) {\r\n            _allowedCurrencies[tokenId][nft_a][i] = false;\r\n        }\r\n        // _allowedCurrencies[tokenId][1] = false;\r\n        // _allowedCurrencies[tokenId][2] = false;\r\n        emit BuyNFT(msg.sender, nft_a, tokenId, msg.sender, price, baseCurrency, calcultated, currencyType);\r\n  }\r\n    function bnbTransfer(address _address, uint256 percentage, uint256 price) public {\r\n      address payable newAddress = address(uint160(_address));\r\n      uint256 initialBalance;\r\n      uint256 newBalance;\r\n      initialBalance = address(this).balance;\r\n      BNB.withdraw((price / 1000) * percentage);\r\n      newBalance = address(this).balance.sub(initialBalance);\r\n      newAddress.transfer(newBalance);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"nft_a\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"ownerId\",\"type\":\"string\"}],\"name\":\"buyNFTBnb\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nft_a\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"ownerId\",\"type\":\"string\"},{\"name\":\"currencyType\",\"type\":\"uint256\"}],\"name\":\"buyNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_supportNft\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nftContract\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"newPrice\",\"type\":\"uint256\"},{\"name\":\"baseCurrency\",\"type\":\"uint256\"},{\"name\":\"allowedCurrencies\",\"type\":\"uint256[]\"}],\"name\":\"updatePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenURI\",\"type\":\"string\"},{\"name\":\"royality\",\"type\":\"uint256\"},{\"name\":\"ownerId\",\"type\":\"string\"}],\"name\":\"Mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countCopy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectionConfig\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nftContract\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSellDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonCryptoNFTVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"base\",\"type\":\"uint256\"},{\"name\":\"currencyType\",\"type\":\"uint256\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"nft_a\",\"type\":\"address\"}],\"name\":\"calculatePrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nft_a\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"baseCurrency\",\"type\":\"uint256\"},{\"name\":\"allowedCurrencies\",\"type\":\"uint256[]\"}],\"name\":\"sellNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"nft_a\",\"type\":\"address\"}],\"name\":\"getPercentages\",\"outputs\":[{\"name\":\"mainPerecentage\",\"type\":\"uint256\"},{\"name\":\"authorPercentage\",\"type\":\"uint256\"},{\"name\":\"blindRAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nftContract\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"percentage\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"bnbTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenURI\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"ownerId\",\"type\":\"string\"},{\"name\":\"royality\",\"type\":\"uint256\"},{\"name\":\"currencyType\",\"type\":\"uint256\"},{\"name\":\"allowedCurrencies\",\"type\":\"uint256[]\"}],\"name\":\"MintAndSellNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nft_a\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"royalty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"baseCurrency\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"allowedCurrencies\",\"type\":\"uint256[]\"}],\"name\":\"SellNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nft_a\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"baseCurrency\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"calculated\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currencyType\",\"type\":\"uint256\"}],\"name\":\"BuyNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"CancelSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isDollar\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"baseCurrency\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"allowedCurrencies\",\"type\":\"uint256[]\"}],\"name\":\"UpdatePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nft_a\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"baseCurrency\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"calculated\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currencyType\",\"type\":\"uint256\"}],\"name\":\"BuyNFTNonCrypto\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nft_a\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"baseCurrency\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"allowedCurrencies\",\"type\":\"uint256[]\"}],\"name\":\"SellNFTNonCrypto\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"MintWithTokenURINonCrypto\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TransferPackNonCrypto\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"uriT\",\"type\":\"string\"}],\"name\":\"updateTokenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateDiscount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"creater\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"Collection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"xCollection\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"CollectionsConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"MintWithTokenURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FixPriceDex","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://09c6e8831d3aaf408fbcb25e423aee1d0aef4b363df6e1e107cf692f36057536"}]}