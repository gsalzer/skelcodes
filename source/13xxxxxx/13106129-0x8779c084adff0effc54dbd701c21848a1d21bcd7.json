{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FujiERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./abstracts/fujiERC1155/FujiBaseERC1155.sol\\\";\\nimport \\\"./abstracts/fujiERC1155/F1155Manager.sol\\\";\\nimport \\\"./abstracts/claimable/ClaimableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IFujiERC1155.sol\\\";\\nimport \\\"./libraries/WadRayMath.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\n\\ncontract FujiERC1155 is IFujiERC1155, FujiBaseERC1155, F1155Manager {\\n  using WadRayMath for uint256;\\n\\n  // FujiERC1155 Asset ID Mapping\\n\\n  // AssetType => asset reference address => ERC1155 Asset ID\\n  mapping(AssetType => mapping(address => uint256)) public assetIDs;\\n\\n  // Control mapping that returns the AssetType of an AssetID\\n  mapping(uint256 => AssetType) public assetIDtype;\\n\\n  uint64 public override qtyOfManagedAssets;\\n\\n  // Asset ID  Liquidity Index mapping\\n  // AssetId => Liquidity index for asset ID\\n  mapping(uint256 => uint256) public indexes;\\n\\n  function initialize() external initializer {\\n    __ERC165_init();\\n    __Context_init();\\n    __Climable_init();\\n  }\\n\\n  /**\\n   * @dev Updates Index of AssetID\\n   * @param _assetID: ERC1155 ID of the asset which state will be updated.\\n   * @param newBalance: Amount\\n   **/\\n  function updateState(uint256 _assetID, uint256 newBalance) external override onlyPermit {\\n    uint256 total = totalSupply(_assetID);\\n\\n    if (newBalance > 0 && total > 0 && newBalance > total) {\\n      uint256 diff = newBalance - total;\\n\\n      uint256 amountToIndexRatio = (diff.wadToRay()).rayDiv(total.wadToRay());\\n\\n      uint256 result = amountToIndexRatio + WadRayMath.ray();\\n\\n      result = result.rayMul(indexes[_assetID]);\\n      require(result <= type(uint128).max, Errors.VL_INDEX_OVERFLOW);\\n\\n      indexes[_assetID] = uint128(result);\\n\\n      // TODO: calculate interest rate for a fujiOptimizer Fee.\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the total supply of Asset_ID with accrued interest.\\n   * @param _assetID: ERC1155 ID of the asset which state will be updated.\\n   **/\\n  function totalSupply(uint256 _assetID) public view virtual override returns (uint256) {\\n    // TODO: include interest accrued by Fuji OptimizerFee\\n\\n    return super.totalSupply(_assetID).rayMul(indexes[_assetID]);\\n  }\\n\\n  /**\\n   * @dev Returns the scaled total supply of the token ID. Represents sum(token ID Principal /index)\\n   * @param _assetID: ERC1155 ID of the asset which state will be updated.\\n   **/\\n  function scaledTotalSupply(uint256 _assetID) public view virtual returns (uint256) {\\n    return super.totalSupply(_assetID);\\n  }\\n\\n  /**\\n   * @dev Returns the principal + accrued interest balance of the user\\n   * @param _account: address of the User\\n   * @param _assetID: ERC1155 ID of the asset which state will be updated.\\n   **/\\n  function balanceOf(address _account, uint256 _assetID)\\n    public\\n    view\\n    override(FujiBaseERC1155, IFujiERC1155)\\n    returns (uint256)\\n  {\\n    uint256 scaledBalance = super.balanceOf(_account, _assetID);\\n\\n    if (scaledBalance == 0) {\\n      return 0;\\n    }\\n\\n    // TODO: include interest accrued by Fuji OptimizerFee\\n    return scaledBalance.rayMul(indexes[_assetID]);\\n  }\\n\\n  /**\\n   * @dev Returns Scaled Balance of the user (e.g. balance/index)\\n   * @param _account: address of the User\\n   * @param _assetID: ERC1155 ID of the asset which state will be updated.\\n   **/\\n  function scaledBalanceOf(address _account, uint256 _assetID)\\n    public\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    return super.balanceOf(_account, _assetID);\\n  }\\n\\n  /**\\n   * @dev Mints tokens for Collateral and Debt receipts for the Fuji Protocol\\n   * Emits a {TransferSingle} event.\\n   * Requirements:\\n   * - `_account` cannot be the zero address.\\n   * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n   * acceptance magic value.\\n   * - `_amount` should be in WAD\\n   */\\n  function mint(\\n    address _account,\\n    uint256 _id,\\n    uint256 _amount,\\n    bytes memory _data\\n  ) external override onlyPermit {\\n    require(_account != address(0), Errors.VL_ZERO_ADDR_1155);\\n\\n    address operator = _msgSender();\\n\\n    uint256 accountBalance = _balances[_id][_account];\\n    uint256 assetTotalBalance = _totalSupply[_id];\\n    uint256 amountScaled = _amount.rayDiv(indexes[_id]);\\n\\n    require(amountScaled != 0, Errors.VL_INVALID_MINT_AMOUNT);\\n\\n    _balances[_id][_account] = accountBalance + amountScaled;\\n    _totalSupply[_id] = assetTotalBalance + amountScaled;\\n\\n    emit TransferSingle(operator, address(0), _account, _id, _amount);\\n\\n    _doSafeTransferAcceptanceCheck(operator, address(0), _account, _id, _amount, _data);\\n  }\\n\\n  /**\\n   * @dev [Batched] version of {mint}.\\n   * Requirements:\\n   * - `_ids` and `_amounts` must have the same length.\\n   * - If `_to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n   * acceptance magic value.\\n   */\\n  function mintBatch(\\n    address _to,\\n    uint256[] memory _ids,\\n    uint256[] memory _amounts,\\n    bytes memory _data\\n  ) external onlyPermit {\\n    require(_to != address(0), Errors.VL_ZERO_ADDR_1155);\\n    require(_ids.length == _amounts.length, Errors.VL_INPUT_ERROR);\\n\\n    address operator = _msgSender();\\n\\n    uint256 accountBalance;\\n    uint256 assetTotalBalance;\\n    uint256 amountScaled;\\n\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n      accountBalance = _balances[_ids[i]][_to];\\n      assetTotalBalance = _totalSupply[_ids[i]];\\n\\n      amountScaled = _amounts[i].rayDiv(indexes[_ids[i]]);\\n\\n      require(amountScaled != 0, Errors.VL_INVALID_MINT_AMOUNT);\\n\\n      _balances[_ids[i]][_to] = accountBalance + amountScaled;\\n      _totalSupply[_ids[i]] = assetTotalBalance + amountScaled;\\n    }\\n\\n    emit TransferBatch(operator, address(0), _to, _ids, _amounts);\\n\\n    _doSafeBatchTransferAcceptanceCheck(operator, address(0), _to, _ids, _amounts, _data);\\n  }\\n\\n  /**\\n   * @dev Destroys `_amount` receipt tokens of token type `_id` from `account` for the Fuji Protocol\\n   * Requirements:\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `_amount` tokens of token type `_id`.\\n   * - `_amount` should be in WAD\\n   */\\n  function burn(\\n    address _account,\\n    uint256 _id,\\n    uint256 _amount\\n  ) external override onlyPermit {\\n    require(_account != address(0), Errors.VL_ZERO_ADDR_1155);\\n\\n    address operator = _msgSender();\\n\\n    uint256 accountBalance = _balances[_id][_account];\\n    uint256 assetTotalBalance = _totalSupply[_id];\\n\\n    uint256 amountScaled = _amount.rayDiv(indexes[_id]);\\n\\n    require(amountScaled != 0 && accountBalance >= amountScaled, Errors.VL_INVALID_BURN_AMOUNT);\\n\\n    _balances[_id][_account] = accountBalance - amountScaled;\\n    _totalSupply[_id] = assetTotalBalance - amountScaled;\\n\\n    emit TransferSingle(operator, _account, address(0), _id, _amount);\\n  }\\n\\n  /**\\n   * @dev [Batched] version of {burn}.\\n   * Requirements:\\n   * - `_ids` and `_amounts` must have the same length.\\n   */\\n  function burnBatch(\\n    address _account,\\n    uint256[] memory _ids,\\n    uint256[] memory _amounts\\n  ) external onlyPermit {\\n    require(_account != address(0), Errors.VL_ZERO_ADDR_1155);\\n    require(_ids.length == _amounts.length, Errors.VL_INPUT_ERROR);\\n\\n    address operator = _msgSender();\\n\\n    uint256 accountBalance;\\n    uint256 assetTotalBalance;\\n    uint256 amountScaled;\\n\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n      uint256 amount = _amounts[i];\\n\\n      accountBalance = _balances[_ids[i]][_account];\\n      assetTotalBalance = _totalSupply[_ids[i]];\\n\\n      amountScaled = _amounts[i].rayDiv(indexes[_ids[i]]);\\n\\n      require(amountScaled != 0 && accountBalance >= amountScaled, Errors.VL_INVALID_BURN_AMOUNT);\\n\\n      _balances[_ids[i]][_account] = accountBalance - amount;\\n      _totalSupply[_ids[i]] = assetTotalBalance - amount;\\n    }\\n\\n    emit TransferBatch(operator, _account, address(0), _ids, _amounts);\\n  }\\n\\n  //Getter Functions\\n\\n  /**\\n   * @dev Getter Function for the Asset ID locally managed\\n   * @param _type: enum AssetType, 0 = Collateral asset, 1 = debt asset\\n   * @param _addr: Reference Address of the Asset\\n   */\\n  function getAssetID(AssetType _type, address _addr) external view override returns (uint256 id) {\\n    id = assetIDs[_type][_addr];\\n    require(id <= qtyOfManagedAssets, Errors.VL_INVALID_ASSETID_1155);\\n  }\\n\\n  //Setter Functions\\n\\n  /**\\n   * @dev Sets a new URI for all token types, by relying on the token type ID\\n   */\\n  function setURI(string memory _newUri) public onlyOwner {\\n    _uri = _newUri;\\n  }\\n\\n  /**\\n   * @dev Adds and initializes liquidity index of a new asset in FujiERC1155\\n   * @param _type: enum AssetType, 0 = Collateral asset, 1 = debt asset\\n   * @param _addr: Reference Address of the Asset\\n   */\\n  function addInitializeAsset(AssetType _type, address _addr)\\n    external\\n    override\\n    onlyPermit\\n    returns (uint64)\\n  {\\n    require(assetIDs[_type][_addr] == 0, Errors.VL_ASSET_EXISTS);\\n\\n    assetIDs[_type][_addr] = qtyOfManagedAssets;\\n    assetIDtype[qtyOfManagedAssets] = _type;\\n\\n    //Initialize the liquidity Index\\n    indexes[qtyOfManagedAssets] = WadRayMath.ray();\\n    qtyOfManagedAssets++;\\n\\n    return qtyOfManagedAssets - 1;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/abstracts/fujiERC1155/FujiBaseERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../../libraries/Errors.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the Base ERC1155 multi-token standard functions\\n * for Fuji Protocol control of User collaterals and borrow debt positions.\\n * Originally based on Openzeppelin\\n *\\n */\\n\\nabstract contract FujiBaseERC1155 is IERC1155Upgradeable, ERC165Upgradeable, ContextUpgradeable {\\n  using Address for address;\\n\\n  // Mapping from token ID to account balances\\n  mapping(uint256 => mapping(address => uint256)) internal _balances;\\n\\n  // Mapping from account to operator approvals\\n  mapping(address => mapping(address => bool)) internal _operatorApprovals;\\n\\n  // Mapping from token ID to totalSupply\\n  mapping(uint256 => uint256) internal _totalSupply;\\n\\n  //URI for all token types by relying on ID substitution\\n  //https://token.fujiDao.org/{id}.json\\n  string internal _uri;\\n\\n  /**\\n   * @return The total supply of a token id\\n   **/\\n  function totalSupply(uint256 id) public view virtual returns (uint256) {\\n    return _totalSupply[id];\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(ERC165Upgradeable, IERC165Upgradeable)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n      interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155MetadataURI-uri}.\\n   * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n   * actual token type ID.\\n   */\\n  function uri(uint256) public view virtual returns (string memory) {\\n    return _uri;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOf}.\\n   * Requirements:\\n   * - `account` cannot be the zero address.\\n   */\\n  function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n    require(account != address(0), Errors.VL_ZERO_ADDR_1155);\\n    return _balances[id][account];\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-balanceOfBatch}.\\n   * Requirements:\\n   * - `accounts` and `ids` must have the same length.\\n   */\\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n    public\\n    view\\n    override\\n    returns (uint256[] memory)\\n  {\\n    require(accounts.length == ids.length, Errors.VL_INPUT_ERROR);\\n\\n    uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n    for (uint256 i = 0; i < accounts.length; ++i) {\\n      batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n    }\\n\\n    return batchBalances;\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved) public virtual override {\\n    require(_msgSender() != operator, Errors.VL_INPUT_ERROR);\\n\\n    _operatorApprovals[_msgSender()][operator] = approved;\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address account, address operator)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _operatorApprovals[account][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address, // from\\n    address, // to\\n    uint256, // id\\n    uint256, // amount\\n    bytes memory // data\\n  ) public virtual override {\\n    revert(Errors.VL_ERC1155_NOT_TRANSFERABLE);\\n  }\\n\\n  /**\\n   * @dev See {IERC1155-safeBatchTransferFrom}.\\n   */\\n  function safeBatchTransferFrom(\\n    address, // from\\n    address, // to\\n    uint256[] memory, // ids\\n    uint256[] memory, // amounts\\n    bytes memory //  data\\n  ) public virtual override {\\n    revert(Errors.VL_ERC1155_NOT_TRANSFERABLE);\\n  }\\n\\n  function _doSafeTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) internal {\\n    if (to.isContract()) {\\n      try\\n        IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data)\\n      returns (bytes4 response) {\\n        if (response != IERC1155ReceiverUpgradeable(to).onERC1155Received.selector) {\\n          revert(Errors.VL_RECEIVER_REJECT_1155);\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert(Errors.VL_RECEIVER_CONTRACT_NON_1155);\\n      }\\n    }\\n  }\\n\\n  function _doSafeBatchTransferAcceptanceCheck(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal {\\n    if (to.isContract()) {\\n      try\\n        IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data)\\n      returns (bytes4 response) {\\n        if (response != IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived.selector) {\\n          revert(Errors.VL_RECEIVER_REJECT_1155);\\n        }\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert(Errors.VL_RECEIVER_CONTRACT_NON_1155);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any token transfer. This includes minting\\n   * and burning, as well as batched variants.\\n   *\\n   * The same hook is called on both single and batched variants. For single\\n   * transfers, the length of the `id` and `amount` arrays will be 1.\\n   *\\n   * Calling conditions (for each `id` and `amount` pair):\\n   *\\n   * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * of token type `id` will be  transferred to `to`.\\n   * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n   * for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n   * will be burned.\\n   * - `from` and `to` are never both zero.\\n   * - `ids` and `amounts` have the same, non-zero length.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) internal virtual {}\\n\\n  function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n    uint256[] memory array = new uint256[](1);\\n    array[0] = element;\\n\\n    return array;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/abstracts/fujiERC1155/F1155Manager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./FujiBaseERC1155.sol\\\";\\nimport \\\"../claimable/ClaimableUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IFujiERC1155.sol\\\";\\nimport \\\"../../libraries/WadRayMath.sol\\\";\\nimport \\\"../../libraries/Errors.sol\\\";\\n\\nabstract contract F1155Manager is ClaimableUpgradeable {\\n  using Address for address;\\n\\n  // Controls for Mint-Burn Operations\\n  mapping(address => bool) public addrPermit;\\n\\n  modifier onlyPermit() {\\n    require(addrPermit[_msgSender()] || msg.sender == owner(), Errors.VL_NOT_AUTHORIZED);\\n    _;\\n  }\\n\\n  function setPermit(address _address, bool _permit) public onlyOwner {\\n    require((_address).isContract(), Errors.VL_NOT_A_CONTRACT);\\n    addrPermit[_address] = _permit;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/abstracts/claimable/ClaimableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract ClaimableUpgradeable is Initializable, ContextUpgradeable {\\n  address private _owner;\\n  address public pendingOwner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n  event NewPendingOwner(address indexed owner);\\n\\n  function __Climable_init() internal initializer {\\n    __Context_init_unchained();\\n    __Climable_init_unchained();\\n  }\\n\\n  function __Climable_init_unchained() internal initializer {\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  modifier onlyOwner() {\\n    require(_msgSender() == owner(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  modifier onlyPendingOwner() {\\n    require(_msgSender() == pendingOwner);\\n    _;\\n  }\\n\\n  function renounceOwnership() public virtual onlyOwner {\\n    emit OwnershipTransferred(owner(), address(0));\\n    _owner = address(0);\\n  }\\n\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(pendingOwner == address(0));\\n    pendingOwner = newOwner;\\n    emit NewPendingOwner(newOwner);\\n  }\\n\\n  function cancelTransferOwnership() public onlyOwner {\\n    require(pendingOwner != address(0));\\n    delete pendingOwner;\\n    emit NewPendingOwner(address(0));\\n  }\\n\\n  function claimOwnership() public onlyPendingOwner {\\n    emit OwnershipTransferred(owner(), pendingOwner);\\n    _owner = pendingOwner;\\n    delete pendingOwner;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFujiERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFujiERC1155 {\\n  //Asset Types\\n  enum AssetType {\\n    //uint8 = 0\\n    collateralToken,\\n    //uint8 = 1\\n    debtToken\\n  }\\n\\n  //General Getter Functions\\n\\n  function getAssetID(AssetType _type, address _assetAddr) external view returns (uint256);\\n\\n  function qtyOfManagedAssets() external view returns (uint64);\\n\\n  function balanceOf(address _account, uint256 _id) external view returns (uint256);\\n\\n  // function splitBalanceOf(address account,uint256 _AssetID) external view  returns (uint256,uint256);\\n\\n  // function balanceOfBatchType(address account, AssetType _Type) external view returns (uint256);\\n\\n  //Permit Controlled  Functions\\n  function mint(\\n    address _account,\\n    uint256 _id,\\n    uint256 _amount,\\n    bytes memory _data\\n  ) external;\\n\\n  function burn(\\n    address _account,\\n    uint256 _id,\\n    uint256 _amount\\n  ) external;\\n\\n  function updateState(uint256 _assetID, uint256 _newBalance) external;\\n\\n  function addInitializeAsset(AssetType _type, address _addr) external returns (uint64);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { Errors } from \\\"./Errors.sol\\\";\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n  uint256 internal constant _WAD = 1e18;\\n  uint256 internal constant _HALF_WAD = _WAD / 2;\\n\\n  uint256 internal constant _RAY = 1e27;\\n  uint256 internal constant _HALF_RAY = _RAY / 2;\\n\\n  uint256 internal constant _WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @return One ray, 1e27\\n   **/\\n  function ray() internal pure returns (uint256) {\\n    return _RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n   **/\\n\\n  function wad() internal pure returns (uint256) {\\n    return _WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n   **/\\n  function halfRay() internal pure returns (uint256) {\\n    return _HALF_RAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n   **/\\n  function halfWad() internal pure returns (uint256) {\\n    return _HALF_WAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - _HALF_WAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * b + _HALF_WAD) / _WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / _WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * _WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - _HALF_RAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * b + _HALF_RAY) / _RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / _RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * _RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = _WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n    return result / _WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * _WAD_RAY_RATIO;\\n    require(result / _WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author Fuji\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = Validation Logic 100 series\\n *  - MATH = Math libraries 200 series\\n *  - RF = Refinancing 300 series\\n *  - VLT = vault 400 series\\n *  - SP = Special 900 series\\n */\\nlibrary Errors {\\n  //Errors\\n  string public constant VL_INDEX_OVERFLOW = \\\"100\\\"; // index overflows uint128\\n  string public constant VL_INVALID_MINT_AMOUNT = \\\"101\\\"; //invalid amount to mint\\n  string public constant VL_INVALID_BURN_AMOUNT = \\\"102\\\"; //invalid amount to burn\\n  string public constant VL_AMOUNT_ERROR = \\\"103\\\"; //Input value >0, and for ETH msg.value and amount shall match\\n  string public constant VL_INVALID_WITHDRAW_AMOUNT = \\\"104\\\"; //Withdraw amount exceeds provided collateral, or falls undercollaterized\\n  string public constant VL_INVALID_BORROW_AMOUNT = \\\"105\\\"; //Borrow amount does not meet collaterization\\n  string public constant VL_NO_DEBT_TO_PAYBACK = \\\"106\\\"; //Msg sender has no debt amount to be payback\\n  string public constant VL_MISSING_ERC20_ALLOWANCE = \\\"107\\\"; //Msg sender has not approved ERC20 full amount to transfer\\n  string public constant VL_USER_NOT_LIQUIDATABLE = \\\"108\\\"; //User debt position is not liquidatable\\n  string public constant VL_DEBT_LESS_THAN_AMOUNT = \\\"109\\\"; //User debt is less than amount to partial close\\n  string public constant VL_PROVIDER_ALREADY_ADDED = \\\"110\\\"; // Provider is already added in Provider Array\\n  string public constant VL_NOT_AUTHORIZED = \\\"111\\\"; //Not authorized\\n  string public constant VL_INVALID_COLLATERAL = \\\"112\\\"; //There is no Collateral, or Collateral is not in active in vault\\n  string public constant VL_NO_ERC20_BALANCE = \\\"113\\\"; //User does not have ERC20 balance\\n  string public constant VL_INPUT_ERROR = \\\"114\\\"; //Check inputs. For ERC1155 batch functions, array sizes should match.\\n  string public constant VL_ASSET_EXISTS = \\\"115\\\"; //Asset intended to be added already exists in FujiERC1155\\n  string public constant VL_ZERO_ADDR_1155 = \\\"116\\\"; //ERC1155: balance/transfer for zero address\\n  string public constant VL_NOT_A_CONTRACT = \\\"117\\\"; //Address is not a contract.\\n  string public constant VL_INVALID_ASSETID_1155 = \\\"118\\\"; //ERC1155 Asset ID is invalid.\\n  string public constant VL_NO_ERC1155_BALANCE = \\\"119\\\"; //ERC1155: insufficient balance for transfer.\\n  string public constant VL_MISSING_ERC1155_APPROVAL = \\\"120\\\"; //ERC1155: transfer caller is not owner nor approved.\\n  string public constant VL_RECEIVER_REJECT_1155 = \\\"121\\\"; //ERC1155Receiver rejected tokens\\n  string public constant VL_RECEIVER_CONTRACT_NON_1155 = \\\"122\\\"; //ERC1155: transfer to non ERC1155Receiver implementer\\n  string public constant VL_OPTIMIZER_FEE_SMALL = \\\"123\\\"; //Fuji OptimizerFee has to be > 1 RAY (1e27)\\n  string public constant VL_UNDERCOLLATERIZED_ERROR = \\\"124\\\"; // Flashloan-Flashclose cannot be used when User's collateral is worth less than intended debt position to close.\\n  string public constant VL_MINIMUM_PAYBACK_ERROR = \\\"125\\\"; // Minimum Amount payback should be at least Fuji Optimizerfee accrued interest.\\n  string public constant VL_HARVESTING_FAILED = \\\"126\\\"; // Harvesting Function failed, check provided _farmProtocolNum or no claimable balance.\\n  string public constant VL_FLASHLOAN_FAILED = \\\"127\\\"; // Flashloan failed\\n  string public constant VL_ERC1155_NOT_TRANSFERABLE = \\\"128\\\"; // ERC1155: Not Transferable\\n  string public constant VL_SWAP_SLIPPAGE_LIMIT_EXCEED = \\\"129\\\"; // ERC1155: Not Transferable\\n  string public constant VL_ZERO_ADDR = \\\"130\\\"; // Zero Address\\n\\n  string public constant MATH_DIVISION_BY_ZERO = \\\"201\\\";\\n  string public constant MATH_ADDITION_OVERFLOW = \\\"202\\\";\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = \\\"203\\\";\\n\\n  string public constant RF_INVALID_RATIO_VALUES = \\\"301\\\"; // Ratio Value provided is invalid, _ratioA/_ratioB <= 1, and > 0, or activeProvider borrowBalance = 0\\n\\n  string public constant VLT_CALLER_MUST_BE_VAULT = \\\"401\\\"; // The caller of this function must be a vault\\n\\n  string public constant ORACLE_INVALID_LENGTH = \\\"501\\\"; // The assets length and price feeds length doesn't match\\n  string public constant ORACLE_NONE_PRICE_FEED = \\\"502\\\"; // The price feed is not found\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum IFujiERC1155.AssetType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addInitializeAsset\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addrPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IFujiERC1155.AssetType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assetIDtype\",\"outputs\":[{\"internalType\":\"enum IFujiERC1155.AssetType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetID\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IFujiERC1155.AssetType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getAssetID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"qtyOfManagedAssets\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetID\",\"type\":\"uint256\"}],\"name\":\"scaledBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetID\",\"type\":\"uint256\"}],\"name\":\"scaledTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_permit\",\"type\":\"bool\"}],\"name\":\"setPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newUri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetID\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"updateState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FujiERC1155","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}