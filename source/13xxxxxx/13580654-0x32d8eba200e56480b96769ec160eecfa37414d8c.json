{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Base64.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.9;\r\n\r\nlibrary Base64 {\r\n    bytes internal constant TABLE =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n    /// @notice Encodes some bytes to the base64 representation\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        uint256 len = data.length;\r\n        if (len == 0) return \"\";\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((len + 2) / 3);\r\n\r\n        // Add some extra buffer at the end\r\n        bytes memory result = new bytes(encodedLen + 32);\r\n        bytes memory table = TABLE;\r\n\r\n        assembly {\r\n            let tablePtr := add(table, 1)\r\n            let resultPtr := add(result, 32)\r\n            for {\r\n                let i := 0\r\n            } lt(i, len) {\r\n\r\n            } {\r\n                i := add(i, 3)\r\n                let input := and(mload(add(data, i)), 0xffffff)\r\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\r\n                out := shl(8, out)\r\n                out := add(\r\n                    out,\r\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\r\n                )\r\n                out := shl(8, out)\r\n                out := add(\r\n                    out,\r\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\r\n                )\r\n                out := shl(8, out)\r\n                out := add(\r\n                    out,\r\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\r\n                )\r\n                out := shl(224, out)\r\n                mstore(resultPtr, out)\r\n                resultPtr := add(resultPtr, 4)\r\n            }\r\n            switch mod(len, 3)\r\n            case 1 {\r\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n            }\r\n            case 2 {\r\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n            }\r\n            mstore(result, encodedLen)\r\n        }\r\n        return string(result);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/Kinochromes.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n//  _   ___                  _                                   \r\n// | | / (_)                | |                                  \r\n// | |/ / _ _ __   ___   ___| |__  _ __ ___  _ __ ___   ___  ___ \r\n// |    \\| | '_ \\ / _ \\ / __| '_ \\| '__/ _ \\| '_ ` _ \\ / _ \\/ __|\r\n// | |\\  \\ | | | | (_) | (__| | | | | | (_) | | | | | |  __/\\__ \\\r\n// \\_| \\_/_|_| |_|\\___/ \\___|_| |_|_|  \\___/|_| |_| |_|\\___||___/\r\n// by junkpunkie\r\n\r\ncontract Kinochromes is ERC721, ReentrancyGuard, Ownable {\r\n    mapping(bytes10 => bool) private hashToMinted;\r\n    mapping(uint => bytes10) private sToDNA;\r\n    mapping(uint => bytes10) private tokenIdToDNA;\r\n    mapping (address => bool) private addressToWhitelist;\r\n    mapping (address => bool) private whitelistAddrToMinted;\r\n    bool private paused = true;\r\n    bool private whitelistPaused = true;\r\n    uint private randNonce = 0;\r\n    uint private totalMinted = 0;\r\n\r\n    constructor() ERC721(\"Kinochromes\", \"[k]\") {\r\n      bytes10 dnaOne = bytes10(abi.encodePacked(bytes1(0xFF),bytes1(0xFF),bytes1(0xFF),bytes1(0),bytes1(0),bytes1(0),bytes1(0),bytes1(0),bytes1(0),bytes1(0)));\r\n      bytes10 dnaTwo = bytes10(abi.encodePacked(bytes1(0xFF),bytes1(0xFF),bytes1(0xFF),bytes1(0),bytes1(0),bytes1(0x09),bytes1(0),bytes1(0),bytes1(0),bytes1(0)));\r\n      bytes5 dnaOneMinusColor = getDnaMinusColor(dnaOne);\r\n      bytes5 dnaTwoMinusColor = getDnaMinusColor(dnaTwo);\r\n\r\n      sToDNA[0x32] = dnaOne;\r\n      tokenIdToDNA[0x32] = getDnaMinusColor(dnaOne);\r\n      hashToMinted[dnaOneMinusColor] = true;\r\n\r\n      sToDNA[0x1FF] = dnaTwo;\r\n      tokenIdToDNA[0x1FF] = getDnaMinusColor(dnaTwo);\r\n      hashToMinted[dnaTwoMinusColor] = true;\r\n    }    \r\n\r\n    // MINTING RELATED FUNCTIONS\r\n\r\n    // Pause or unpause minting\r\n    function setPaused(bool _paused) public nonReentrant onlyOwner {\r\n      paused = _paused;\r\n    }\r\n\r\n    function addToWhitelist(address[] memory users) public onlyOwner nonReentrant {\r\n        for (uint i = 0; i < users.length; i++) {\r\n            addressToWhitelist[users[i]] = true;\r\n            whitelistAddrToMinted[users[i]] = false;\r\n        }      \r\n    }\r\n\r\n    // Whitelisted addresses can claim 1 until public minting opens\r\n    function whitelistClaim() public nonReentrant {\r\n        require (addressToWhitelist[msg.sender], \"You are not on the whitelist\");\r\n        require (!whitelistAddrToMinted[msg.sender], \"You have already claimed with this address\");\r\n        uint index = totalSupply();\r\n        require(index >= 50 && index < 512, \"All have been minted\");\r\n        _internalMint(index);\r\n        whitelistAddrToMinted[msg.sender] = true;\r\n    }\r\n\r\n    // Owner keeps the first 50\r\n    function ownerClaim() public nonReentrant onlyOwner {\r\n        uint index = totalSupply();\r\n        require(index >= 0 && index + 9 < 50, \"Choose an unclaimed index between 0 and 51, inclusive\");\r\n        for (uint i = index; i < index + 10; i++) {\r\n          _internalMint(i);\r\n        }\r\n    }\r\n\r\n    // Claim for public mint\r\n    function claim() public nonReentrant {\r\n        require (!paused, \"Minting is paused\");\r\n        uint index = totalSupply();\r\n        require(index >= 50 && index < 512, \"All have been minted\");\r\n        _internalMint(index);\r\n    }\r\n\r\n    function _internalMint(uint256 tokenId) private {\r\n        tokenIdToDNA[tokenId] = generateHash(tokenId);\r\n        _safeMint(_msgSender(), tokenId);\r\n        totalMinted++;\r\n    }\r\n\r\n    function generateHash(uint256 tokenId) internal returns (bytes10) {\r\n      // bytes10 scheme is r/g/b/background/filter/pattern/transform/shape/anim1/anim2\r\n      // like this: 0xd0714c04020901020706\r\n      // where d0 = red, 71 = green, 4c = blue, 04 = background, 02 = filter, etc\r\n      bytes10 dna;\r\n      if (tokenId == 0x32 || tokenId == 0x1FF) {\r\n        return sToDNA[tokenId];\r\n      } else {\r\n          dna = bytes10(\r\n            abi.encodePacked(\r\n              genRandomNum(tokenId, 255), // red index 0\r\n              genRandomNum(tokenId, 255), // green index 1\r\n              genRandomNum(tokenId, 255), // blue index 2\r\n              genRandomNum(tokenId, 4),   // background index 3\r\n              genRandomNum(tokenId, 5),   // filter index 4\r\n              genRandomNum(tokenId, 9),   // pattern index 5\r\n              genRandomNum(tokenId, 5),   // transform index 6\r\n              genRandomNum(tokenId, 2),   // shape index 7\r\n              genRandomNum(tokenId, 8),   // anim1 duration index 8\r\n              genRandomNum(tokenId, 8)    // anim2 duration index 9\r\n            )\r\n          );\r\n        }\r\n\r\n        // Colors don't matter to the uniqueness of each token, but the rest\r\n        // of the attributes do matter.\r\n        bytes5 dnaMinusColor = getDnaMinusColor(dna);\r\n        // No dupes\r\n        if (hashToMinted[dnaMinusColor]) {\r\n          randNonce++;\r\n          return generateHash(tokenId);\r\n        }\r\n        hashToMinted[dnaMinusColor] = true;\r\n        return dna;      \r\n    }\r\n\r\n    function getDnaMinusColor(bytes10 dna) private pure returns (bytes5) {\r\n      return bytes5(\r\n          abi.encodePacked(\r\n              dna[3], dna[4], dna[5], dna[6], dna[7], dna[8], dna[9]      \r\n          )\r\n      );\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n      return totalMinted;\r\n    }\r\n\r\n    // ART FUNCTIONS\r\n\r\n    // The main SVG generator function\r\n    function generateSvg(uint256 tokenId) internal view returns (string memory) {\r\n        return string(abi.encodePacked(\r\n          '<svg width=\"256\" height=\"256\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" class=\"s1\" style=\"background:', buildBackground(tokenId), ';\">',\r\n          generateStyle(tokenId),\r\n          '<defs>', buildShape(tokenId), '</defs>',\r\n          '<g id=\"g\" style=\"',tokenId % 3 == 0 ? 'transform:scale(0.7) rotate(45deg);transform-origin:50% 50%;' : '','\">',\r\n          makeArt(tokenId),\r\n          '</g></svg>'\r\n        ));\r\n    }\r\n\r\n    // Creates the <style> tag\r\n    function generateStyle(uint256 tokenId) internal view returns (string memory) {\r\n      string[2] memory bgColors = invertColors(tokenId);\r\n      return string(abi.encodePacked(\r\n        '<style>.s1{--a:rgb(', bgColors[0],\r\n        ');--b:rgb(', bgColors[1], ');transition: all 1000ms ease;}.s1:hover {filter:',tokenId == 0x32 ? 'sepia(1)' : (tokenId == 0x1FF ? 'contrast(5)' : (tokenId % 2 == 0 ? 'invert(1)' : 'hue-rotate(-270deg)')),';}.u{animation:',toString(buildAnimationDuration(tokenId, 8)) ,'ms infinite alternate a,',toString(buildAnimationDuration(tokenId, 9)),'ms infinite alternate b;transform-origin:50% 50%;}',\r\n        buildAnimation(tokenId),\r\n        '@keyframes b{from{opacity: 1;}to {opacity: 0.5;}}',\r\n        '</style>'\r\n      ));\r\n    }\r\n\r\n    // This is the main shape and pattern plotting function\r\n    function makeArt(uint256 tokenId) internal view returns (string memory) {\r\n        string memory o;\r\n        bytes10 DNA = tokenIdToDNA[tokenId];\r\n        uint256 seed = getDNASeed(DNA, tokenId);\r\n        uint256 v = 0;\r\n        int a = 0;\r\n        int b = 0;\r\n        // The following loop and algorithm is taken and slightly tweaked from Autoglyphs, created by Matt Hall & John Watkinson of Larva Labs.\r\n        // The credit for this project and for onchain generative art goes to them.\r\n        // Read the Autoglyphs contract here: https://etherscan.io/address/0xd4e4078ca3495de5b1d4db434bebc5a986197782#code\r\n        if (uint8(DNA[5]) > 7) {\r\n          for (uint8 y = 0; y < 8; y++) {\r\n              a = (2 * (int8(y) - 4) + 1);\r\n              if (seed % 3 == 1) {\r\n                a = -a;\r\n              } else if (seed % 3 == 2) {\r\n                a = abs(a);\r\n              }\r\n              a = a * int(seed);\r\n              for (uint8 x = 0; x < 8; x++) {\r\n                  b = (2 * (int8(x) - 4) + 1);\r\n                  if (seed % 2 == 1) {\r\n                    b = abs(b);\r\n                  }\r\n                  b = b * int(seed);\r\n                  v = uint(a * b / int(0x100000000)) % ((seed % 25) + 5);\r\n                  string memory dString = v > 12 ? string(abi.encodePacked('-', toString(v * 1000))) : toString(v * 1000);\r\n                  \r\n                  o = string(abi.encodePacked(\r\n                      o,\r\n                      createShape(DNA, x, y, dString)\r\n                  ));\r\n              }\r\n          }\r\n          // Custom Patterns\r\n        } else {\r\n          for (uint8 y = 0; y < 8; y++) {\r\n            for (uint8 x = 0; x < 8; x++) {\r\n              v = drawCustomPattern(DNA, x, y, v);\r\n              o = string(abi.encodePacked(\r\n                  o,\r\n                  createShape(DNA, x, y, toString(v))\r\n              ));\r\n            }\r\n          }\r\n        }\r\n        return o;\r\n    }\r\n\r\n    // This giant function contains the logic to apply animation delays\r\n    // based on the given pattern for a tokenId\r\n    function drawCustomPattern(bytes10 DNA, uint8 x, uint8 y, uint delay) pure internal returns (uint) {\r\n      uint _delay = delay;\r\n      if(DNA[5] == 0x00) {\r\n        // simple\r\n        _delay += 100;\r\n      } else if (DNA[5] == 0x01) {\r\n        // staircase\r\n        _delay += 100;\r\n        _delay = _delay > 800 ? 0 : _delay;\r\n      } else if (DNA[5] == 0x02) {\r\n        // runner\r\n        if (_delay == 0) {\r\n          _delay = 1000;\r\n        }\r\n        if (y % 2 == 0) {\r\n          _delay = x % 2 == 0 ? _delay -= 1000 : _delay;\r\n        } else {\r\n          _delay = x % 2 == 0 ? _delay : _delay -= 1000;\r\n        }\r\n        _delay += 1000;\r\n      } else if (DNA[5] == 0x03) {\r\n        // cross + corners\r\n        if ((x == 0 && y == 0) || (x == 0 && y == 7) || (x == 7 && y == 0) || (x == 7 && y == 7)) {\r\n          _delay = 6500;\r\n        } else if (x == 3 || x == 4 || y == 3 || y == 4) {\r\n          _delay = 0;\r\n        } else {\r\n          _delay = 4000;\r\n        }\r\n      } else if (DNA[5] == 0x04) {\r\n        // spiral\r\n        if (x == 0) {\r\n          _delay = 3500 + 500 * y;\r\n        } else if (y == 0) {\r\n          _delay = 3500 - 500 * x;\r\n        } else if (y == 1) {\r\n          if (x > 0 && x < 7) {\r\n            _delay = 17000 - 500 * x;\r\n          } else {\r\n            _delay = 13500;\r\n          }\r\n        } else if (y == 2) {\r\n          if (x == 1) {\r\n            _delay = 17000;\r\n          } else if (x == 7) {\r\n            _delay = 13000;\r\n          } else {\r\n            _delay = 26000 - 500 * x;\r\n          }\r\n        } else if (y == 3) {\r\n          if (x == 1) {\r\n            _delay = 17500;\r\n          } else if (x == 2) {\r\n            _delay = 26000;\r\n          } else if (x == 6) {\r\n            _delay = 23000;\r\n          } else if (x == 7) {\r\n            _delay = 12500;\r\n          } else {\r\n            _delay = 32000 - 500 * x;\r\n          }\r\n        } else if (y == 4) {\r\n          if (x == 1) {\r\n            _delay = 18000;\r\n          } else if (x == 2) {\r\n            _delay = 26500;\r\n          } else if (x == 5) {\r\n            _delay = 29000;\r\n          } else if (x == 6) {\r\n            _delay = 22500;\r\n          } else if (x == 7) {\r\n            _delay = 12000;\r\n          } else {\r\n            _delay = 29500 + 500 * x;\r\n          }\r\n        } else if (y == 5) {\r\n          if (x == 1) {\r\n            _delay = 18500;\r\n          } else if (x > 1 && x < 6) {\r\n            _delay = 26000 + 500 * x;\r\n          } else if (x == 6) {\r\n            _delay = 22000;\r\n          } else {\r\n            _delay = 11500;\r\n          }\r\n        } else if (y == 6) {\r\n          if (x != 7) {\r\n            _delay = 18500 + 500 * x;\r\n          } else {\r\n            _delay = 11000;\r\n          }\r\n        } else if (y == 7) {\r\n          _delay = 7000 + 500 * x;\r\n        }\r\n      } else if (DNA[5] == 0x05) {\r\n        // X pattern\r\n        if ((x == 0 && y == 0) || (x == 7 && y == 7) || (x == 0 && y == 7) || (x == 7 && y == 0)) {\r\n          _delay = 1000;\r\n        } else if ((x == 1 && y == 1) || (x == 6 && y == 6) || (x == 1 && y == 6) || (x == 6 && y == 1)) {\r\n          _delay = 2000;\r\n        } else if ((x == 2 && y == 2) || (x == 5 && y == 5) || (x == 2 && y == 5) || (x == 5 && y == 2)) {\r\n          _delay = 3000;\r\n        } else if ((x == 3 && y == 3) || (x == 4 && y == 4) || (x == 3 && y == 4) || (x == 4 && y == 3)) {\r\n          _delay = 4000;\r\n        } else {\r\n          _delay = 0;\r\n        }\r\n      } else if (DNA[5] == 0x06) {\r\n        // 10Print\r\n        _delay = tenPrint(DNA, x, y);\r\n      } else {\r\n        // Squares in Squares\r\n        if (\r\n          (x == 0 && y == 0) || (x == 7 && y == 7) || (x == 0 && y == 7) || (x == 7 && y == 0)\r\n          || (x == 2 && y == 2) || (x == 5 && y == 5) || (x == 2 && y == 5) || (x == 5 && y == 2)\r\n          || ((y == 2 || y == 5) && (x > 2 && x < 6))\r\n          || (y > 2 && y < 5) && (x == 2 || x == 5)) {\r\n          _delay = 1000;\r\n        } else if (y == 0 || y == 7 || x == 0 || x == 7) {\r\n          _delay = 0;\r\n        } else {\r\n          _delay = 2000;\r\n        }\r\n      }\r\n      return _delay;\r\n    }\r\n\r\n    // A custom pattern based on the 10Print algorithm.\r\n    // See: https://10print.org/\r\n    function tenPrint(bytes10 DNA, uint8 x, uint8 y) internal pure returns (uint) {\r\n      uint rand = (uint(uint(uint8(DNA[x])) + uint(x) + uint(y)) % (uint(y) * 3 + 35)) % 3;\r\n      if (rand == 0) {\r\n        return 0;\r\n      }\r\n      if (rand == 1) {\r\n        return 7000;\r\n      }\r\n      return 15000;\r\n    }\r\n\r\n    // Changes a given color by subtracting up to 98 from its RGB value, and shifts the RGB position\r\n    // so as to create a nice gradient and to not clash with the background color\r\n    function changeColor(bytes10 _rgb, uint position, uint8 x, uint8 y) internal pure returns (bytes1) {\r\n        return subtractBitwise(getColor(_rgb, position > 1 ? 0 : position + 1), bytes1(uint8(x ** 2) + uint8(y ** 2)));\r\n    }\r\n\r\n    // Returns R, G, or B\r\n    function getColor(bytes10 _rgb, uint position) internal pure returns (bytes1) {\r\n        return _rgb[position];\r\n    }    \r\n\r\n    // Creates a shape based on the x and y coordinates, and the animation delay\r\n    function createShape(bytes10 DNA, uint8 x, uint8 y, string memory delay) pure internal returns (string memory) {\r\n        return string(\r\n            abi.encodePacked(\r\n              '<use class=\"u\" href=\"#r\" x=\"', toString(uint8(x) * 32),\r\n              '\" y=\"', toString(uint8(y) * 32), '\" fill=\"rgb(',\r\n              toString(uint8(changeColor(DNA, 0, x, y))), ',',\r\n              toString(uint8(changeColor(DNA, 1, x, y))), ',',\r\n              toString(uint8(changeColor(DNA, 2, x, y))),\r\n              ')\" style=\"animation-delay:', delay, 'ms;\" />'\r\n            )\r\n        );\r\n    }\r\n\r\n    // Chooses either Square or Circle shape\r\n    function buildShape(uint256 tokenId) internal view returns (string memory) {\r\n      string[2] memory shapes = [\r\n        '<rect id=\"r\" height=\"32\" width=\"32\"></rect>',\r\n        '<circle id=\"r\" cx=\"16\" cy=\"16\" height=\"32\" width=\"32\" r=\"8\"></circle>'\r\n      ];\r\n      return shapes[getAttributeAtPos(tokenId, 7)];\r\n    }\r\n\r\n    // TOKENURI AND ATTRIBUTE FUNCTIONS\r\n\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n        require(_exists(tokenId),\"ERC721Metadata: URI query for nonexistent token\");\r\n        return string(abi.encodePacked(\r\n          \"data:application/json;base64,\",\r\n          Base64.encode(\r\n            bytes(\r\n              string(\r\n                abi.encodePacked(\r\n                  '{\"name\": \"', (tokenId == 0x1FF || tokenId == 0x32) ? 'Albinochrome #' : 'Kinochrome #',\r\n                  toString(tokenId),\r\n                  getAttributes(tokenId),\r\n                  // These two traits are called outside of getAttributes because of Stack Too Deep errors\r\n                  '\"},{\"trait_type\": \"Animation 1 Duration\",\"value\": \"',\r\n                  getAttributeTitleValues(tokenId, 8),\r\n                  'ms\"},{\"trait_type\": \"Animation 2 Duration\",\"value\": \"',\r\n                  getAttributeTitleValues(tokenId, 9), 'ms\"}]'\r\n                  ',\"image\": \"data:image/svg+xml;base64,',\r\n                  Base64.encode(\r\n                    bytes(generateSvg(tokenId))\r\n                  ),\r\n                  '\"}'\r\n                )\r\n              )\r\n            )\r\n          )\r\n        ));\r\n    }\r\n\r\n    // Creates the \"attributes\" array for tokenURI\r\n    function getAttributes(uint256 tokenId) view internal returns (string memory) {\r\n      return string(\r\n        abi.encodePacked(\r\n          '\", \"attributes\": [',(tokenId == 0x1FF || tokenId == 0x32) ? '{\"trait_type\": \"Special\",\"value\": \"Albino\"},' : '',\r\n          '{\"trait_type\": \"Background\",\"value\": \"',\r\n          getAttributeTitleValues(tokenId, 3),\r\n          '\"},{\"trait_type\": \"Filter\",\"value\": \"',\r\n          getAttributeTitleValues(tokenId, 4),\r\n          '\"},{\"trait_type\": \"Pattern\",\"value\": \"',\r\n          getAttributeTitleValues(tokenId, 5),\r\n          '\"},{\"trait_type\": \"Transform\",\"value\": \"',\r\n          getAttributeTitleValues(tokenId, 6),\r\n          '\"},{\"trait_type\": \"Shape\",\"value\": \"',\r\n          getAttributeTitleValues(tokenId, 7)\r\n        )\r\n      );\r\n    }\r\n\r\n    // Returns the \"value\" for each trait_type\r\n    function getAttributeTitleValues(uint256 tokenId, uint8 pos) view internal returns (string memory) {\r\n      if (pos == 3) {\r\n        return [\r\n          'Solid',\r\n          'Radial Gradient',\r\n          'Linear Gradient',\r\n          'Conic Gradient'\r\n        ][getAttributeAtPos(tokenId, 3)];\r\n      }\r\n      if (pos == 4) {\r\n        return [\r\n          'Hue Rotate',\r\n          'Reverse Hue Rotate',\r\n          'Saturate/Invert',\r\n          'Sepia',\r\n          'Sepia/Invert'\r\n        ][getAttributeAtPos(tokenId, 4)];\r\n      }\r\n      if (pos == 5) {\r\n        uint8 index = getAttributeAtPos(tokenId, 5);\r\n        return index > 7 ? 'Autoglyph' : [\r\n          'Simple',\r\n          'Staircase',\r\n          'Runner',\r\n          'Cross Corners',\r\n          'Spiral',\r\n          'X',\r\n          '10 Print',\r\n          'Squares in Squares'\r\n        ][getAttributeAtPos(tokenId, 5)];\r\n      }\r\n      if (pos == 6) {\r\n        return [\r\n          'None',\r\n          'Shrink',\r\n          'Grow',\r\n          'Rotate',\r\n          'Slideways'\r\n          // 'Slideways (Large)'\r\n        ][getAttributeAtPos(tokenId, 6)];\r\n      }\r\n      if (pos == 7) {\r\n        return [\r\n          'Square',\r\n          'Circle'\r\n        ][getAttributeAtPos(tokenId, 7)];\r\n      }\r\n      return [\r\n        '1500',\r\n        '2700',\r\n        '5100',\r\n        '11000',\r\n        '15500',\r\n        '25000',\r\n        '32000',\r\n        '45000'\r\n      ][getAttributeAtPos(tokenId, pos == 8 ? 8 : 9)];\r\n    }\r\n\r\n    // Returns animation duration in ms\r\n    function buildAnimationDuration(uint256 tokenId, uint8 pos) internal view returns (uint16) {\r\n      uint16[8] memory durs = [\r\n        1500,\r\n        2700,\r\n        5100,\r\n        11000,\r\n        15500,\r\n        25000,\r\n        32000,\r\n        45000\r\n      ];\r\n      return durs[getAttributeAtPos(tokenId, pos)];\r\n    }\r\n\r\n    // Returns background style for main <svg>\r\n    function buildBackground(uint256 tokenId) internal view returns (string memory) {\r\n      string[4] memory backgrounds = [\r\n        'var(--a)',\r\n        'radial-gradient(var(--a), var(--b))',\r\n        'linear-gradient(var(--a), var(--b))',\r\n        'conic-gradient(var(--a), var(--b))'\r\n      ];\r\n      return backgrounds[getAttributeAtPos(tokenId, 3)];\r\n    }\r\n\r\n    // Used for background only - inverts the RGB values to make a background color for the randomized palette\r\n    function invertColors(uint256 tokenId) internal view returns (string[2] memory) {\r\n      bytes1 red = bytes1(getAttributeAtPos(tokenId, 0));\r\n      bytes1 green = bytes1(getAttributeAtPos(tokenId, 1));\r\n      bytes1 blue = bytes1(getAttributeAtPos(tokenId, 2));\r\n      return [\r\n        string(abi.encodePacked(toString(uint8(~red)),',', toString(uint8(~green)),',', toString(uint8(~blue)))),\r\n        string(abi.encodePacked(toString(uint8(~green)),',', toString(uint8(~blue)),',', toString(uint8(~red))))\r\n      ];\r\n    }\r\n\r\n    // Returns CSS animations used for the animation pattern\r\n    function buildAnimation(uint256 tokenId) internal view returns (string memory) {\r\n      string[3][5] memory filters = [\r\n        ['hue-rotate(0deg)', 'hue-rotate(180deg)', 'hue-rotate(-180deg)'],\r\n        ['hue-rotate(0deg)', 'hue-rotate(-90deg)', 'hue-rotate(90deg)'],\r\n        ['saturate(1) invert(0)', 'saturate(1.8) invert(1)', 'saturate(0.5) invert(0.2)'],\r\n        ['sepia(0)', 'sepia(0.5)', 'sepia(0.8)'],\r\n        ['sepia(0) invert(0)', 'sepia(0.5) invert(1)', 'sepia(0.8) invert(0.6)']\r\n      ];\r\n      string[3][5] memory transforms = [\r\n        ['scale(1)', 'scale(1)', 'scale(1)'],\r\n        ['scale(1)', 'scale(0.8)', 'scale(1.2)'],\r\n        ['scale(1)', 'scale(1.6)', 'scale(1.2)'],\r\n        ['rotate(0deg)', 'rotate(45deg)', 'rotate(-45deg)'],\r\n        ['translate(0)', 'translate(16px)', 'translate(-16px)']\r\n        // ['translate(0)', 'translate(-50%)']\r\n      ];      \r\n      string memory o = string(\r\n        abi.encodePacked(\r\n          '@keyframes a{25%{filter:',\r\n          filters[getAttributeAtPos(tokenId, 4)][0],\r\n          ';transform:',transforms[getAttributeAtPos(tokenId, 6)][0],\r\n          ';}50%{filter:',\r\n          filters[getAttributeAtPos(tokenId, 4)][1],\r\n          ';transform:',transforms[getAttributeAtPos(tokenId, 6)][1],\r\n          ';}75%{filter:',filters[getAttributeAtPos(tokenId, 4)][0],\r\n          ';transform:',transforms[getAttributeAtPos(tokenId, 6)][0],\r\n          ';}100%{filter:',filters[getAttributeAtPos(tokenId, 4)][2],\r\n          ';transform:',transforms[getAttributeAtPos(tokenId, 6)][2],';}}'\r\n        )\r\n      );\r\n\r\n      return o;\r\n    }\r\n\r\n    // Takes in a tokenId and a \"max\" number as the ceiling to randomly pull\r\n    function genRandomNum(uint256 tokenId, uint8 max) internal returns (bytes1) {\r\n      return bytes1(randMod(tokenId, max));\r\n    }\r\n\r\n    // Returns the value of each attribute at a specific position\r\n    function getAttributeAtPos(uint256 tokenId, uint8 pos) internal view returns (uint8) {\r\n      return uint8(tokenIdToDNA[tokenId][pos]);\r\n    }    \r\n\r\n    // Returns a seed; a uint of the DNA that's useful for performing math\r\n    function getDNASeed(bytes10 DNA, uint256 tokenId) internal pure returns (uint64) {\r\n        return uint64(uint256(keccak256(abi.encodePacked(\r\n            DNA,\r\n            tokenId\r\n        ))));\r\n    }    \r\n\r\n    // UTIL FUNCTIONS\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }    \r\n\r\n    function randMod(uint256 tokenId, uint8 _modulo) internal returns(uint8) {\r\n        // increase nonce\r\n        randNonce++; \r\n        return uint8(uint256(\r\n          keccak256(\r\n            abi.encodePacked(\r\n              block.difficulty,\r\n              block.timestamp,\r\n              msg.sender,\r\n              randNonce,\r\n              tokenId)\r\n            )\r\n          )) % _modulo;\r\n    }\r\n\r\n    // Taken from Autoglyphs by Larva Labs\r\n    function abs(int n) internal pure returns (int) {\r\n        if (n >= 0) return n;\r\n        return -n;\r\n    }\r\n\r\n    function subtractBitwise(bytes1 a, bytes1 b) internal pure returns (bytes1) {\r\n      while (b != 0) {\r\n        bytes1 borrow = (~a) & b;\r\n        a = a ^ b;\r\n        b = borrow << 1;\r\n      }\r\n      return a;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Kinochromes","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b3adf560980eb90ae74ac31a88901b24d48df3b38392c99f269e7b693146c2c9"}]}