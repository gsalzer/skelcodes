{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity >=0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n////// src/UniswapV3Callee.sol\r\n// Copyright (C) 2021 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published\r\n// by the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity >=0.6.12; */\r\n/* pragma experimental ABIEncoderV2; */\r\n\r\ninterface GemJoinLike_5 {\r\n    function dec() external view returns (uint256);\r\n    function gem() external view returns (TokenLike_4);\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface DaiJoinLike_4 {\r\n    function dai() external view returns (TokenLike_4);\r\n    function join(address, uint256) external;\r\n}\r\n\r\ninterface TokenLike_4 {\r\n    function approve(address, uint256) external;\r\n    function transfer(address, uint256) external;\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\ninterface CharterManagerLike_3 {\r\n    function exit(address crop, address usr, uint256 val) external;\r\n}\r\n\r\ninterface UniV3RouterLike {\r\n\r\n    struct ExactInputParams {\r\n        bytes   path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    function exactInput(UniV3RouterLike.ExactInputParams calldata params)\r\n        external payable returns (uint256 amountOut);\r\n}\r\n\r\n\r\ncontract UniswapV3Callee {\r\n    UniV3RouterLike         public uniV3Router;\r\n    DaiJoinLike_4             public daiJoin;\r\n    TokenLike_4               public dai;\r\n\r\n    uint256                 public constant RAY = 10 ** 27;\r\n\r\n    function _add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n    function _sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n    function _divup(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = _add(x, _sub(y, 1)) / y;\r\n    }\r\n\r\n    constructor(address uniV3Router_, address daiJoin_) public {\r\n        uniV3Router = UniV3RouterLike(uniV3Router_);\r\n        daiJoin = DaiJoinLike_4(daiJoin_);\r\n        dai = daiJoin.dai();\r\n\r\n        dai.approve(daiJoin_, uint256(-1));\r\n    }\r\n\r\n    function _fromWad(address gemJoin, uint256 wad) internal view returns (uint256 amt) {\r\n        amt = wad / 10 ** (_sub(18, GemJoinLike_5(gemJoin).dec()));\r\n    }\r\n\r\n    function clipperCall(\r\n        address sender,            // Clipper caller, pays back the loan\r\n        uint256 owe,               // Dai amount to pay back        [rad]\r\n        uint256 slice,             // Gem amount received           [wad]\r\n        bytes calldata data        // Extra data, see below\r\n    ) external {\r\n        (\r\n            address to,            // address to send remaining DAI to\r\n            address gemJoin,       // gemJoin adapter address\r\n            uint256 minProfit,     // minimum profit in DAI to make [wad]\r\n            bytes memory path,     // packed encoding of (address, fee, address [, fee, addressâ€¦])\r\n            address charterManager // pass address(0) if no manager\r\n        ) = abi.decode(data, (address, address, uint256, bytes, address));\r\n\r\n        // Convert slice to token precision\r\n        slice = _fromWad(gemJoin, slice);\r\n\r\n        // Exit gem to token\r\n        if(charterManager != address(0)) {\r\n            CharterManagerLike_3(charterManager).exit(gemJoin, address(this), slice);\r\n        } else {\r\n            GemJoinLike_5(gemJoin).exit(address(this), slice);\r\n        }\r\n\r\n        // Approve uniV3 to take gem\r\n        TokenLike_4 gem = GemJoinLike_5(gemJoin).gem();\r\n        gem.approve(address(uniV3Router), slice);\r\n\r\n        // Calculate amount of DAI to Join (as erc20 WAD value)\r\n        uint256 daiToJoin = _divup(owe, RAY);\r\n\r\n        // Do operation and get dai amount bought (checking the profit is achieved)\r\n        UniV3RouterLike.ExactInputParams memory params = UniV3RouterLike.ExactInputParams({\r\n            path:             path,\r\n            recipient:        address(this),\r\n            deadline:         block.timestamp,\r\n            amountIn:         slice,\r\n            amountOutMinimum: _add(daiToJoin, minProfit)\r\n        });\r\n        uniV3Router.exactInput(params);\r\n\r\n        // Although Uniswap will accept all gems, this check is a sanity check, just in case\r\n        // Transfer any lingering gem to specified address\r\n        if (gem.balanceOf(address(this)) > 0) {\r\n            gem.transfer(to, gem.balanceOf(address(this)));\r\n        }\r\n\r\n        // Convert DAI bought to internal vat value of the msg.sender of Clipper.take\r\n        daiJoin.join(sender, daiToJoin);\r\n\r\n        // Transfer remaining DAI to specified address\r\n        dai.transfer(to, dai.balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniV3Router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"owe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slice\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"clipperCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract TokenLike_4\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"internalType\":\"contract DaiJoinLike_4\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV3Router\",\"outputs\":[{\"internalType\":\"contract UniV3RouterLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UniswapV3Callee","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a28","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://30c6b200f4948eb3ce2027f9a99ec45025b5be668275f919fabaf14ef253cb1e"}]}