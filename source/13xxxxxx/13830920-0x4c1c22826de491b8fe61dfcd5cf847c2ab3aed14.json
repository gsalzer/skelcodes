{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Models/MetadataDefault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n//Handles metadata requests from token contracts\\r\\nimport \\\"../Interfaces/I_MetadataHandler.sol\\\";\\r\\nimport \\\"libraries/Base64.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n//base contract to just display placeholder hidden information\\r\\ncontract MetadataDefault is I_MetadataHandler, Ownable {\\r\\n\\r\\n    using Strings for uint256;\\r\\n\\r\\n    string public imageData; //base64 encoded image\\r\\n    string public description;\\r\\n    string public namePrefix;\\r\\n\\r\\n    constructor(string memory _image, string memory _description, string memory _prefix) {\\r\\n        imageData = _image;\\r\\n        description = _description;\\r\\n        namePrefix = _prefix;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenID) external override view returns (string memory)\\r\\n    {\\r\\n        string memory json = string(abi.encodePacked(\\r\\n            \\\"data:application/json;base64,\\\",\\r\\n            Base64.encode(\\r\\n                bytes(        //todo is this double conversion back and forth?\\r\\n                    string(abi.encodePacked(\\r\\n                        '{\\\"name\\\": \\\"',namePrefix,\\r\\n                            tokenID.toString(),\\r\\n                        '\\\",\\\"description\\\": \\\"',\\r\\n                            description,\\r\\n                        '\\\",\\\"image\\\": \\\"', //data:image/png;base64,', \\r\\n                            imageData,\\r\\n                        '\\\", \\\"attributes\\\":',\\r\\n                        '[{\\\"trait_type\\\":\\\"Status\\\",\\\"value\\\":\\\"Hidden\\\"}]',\\r\\n                        '}'\\r\\n                        ))\\r\\n                )\\r\\n            )\\r\\n        ));\\r\\n\\r\\n        return json;\\r\\n    }\\r\\n\\r\\n    function setImageString(string memory _newImage) external onlyOwner {\\r\\n        imageData = _newImage;\\r\\n    }\\r\\n\\r\\n    function setPrefix(string memory _prefix) external onlyOwner {\\r\\n        namePrefix = _prefix;\\r\\n    }\\r\\n\\r\\n    function setDescription(string memory _description) external onlyOwner {\\r\\n        description = _description;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/Interfaces/I_MetadataHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ninterface I_MetadataHandler {\\r\\n\\r\\n    function tokenURI(uint256 tokenID) external view returns (string memory); //our implementation may even be pure\\r\\n\\r\\n}\"\r\n    },\r\n    \"libraries/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// [MIT License]\\r\\n/// @title Base64\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\n/// @author Brecht Devos <brecht@loopring.org>\\r\\nlibrary Base64 {\\r\\n    bytes internal constant TABLE =\\r\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    /// @notice Encodes some bytes to the base64 representation\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        uint256 len = data.length;\\r\\n        if (len == 0) return \\\"\\\";\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\r\\n\\r\\n        // Add some extra buffer at the end\\r\\n        bytes memory result = new bytes(encodedLen + 32);\\r\\n\\r\\n        bytes memory table = TABLE;\\r\\n\\r\\n        assembly {\\r\\n            let tablePtr := add(table, 1)\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            for {\\r\\n                let i := 0\\r\\n            } lt(i, len) {\\r\\n\\r\\n            } {\\r\\n                i := add(i, 3)\\r\\n                let input := and(mload(add(data, i)), 0xffffff)\\r\\n\\r\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\r\\n                out := shl(8, out)\\r\\n                out := add(\\r\\n                    out,\\r\\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\\r\\n                )\\r\\n                out := shl(8, out)\\r\\n                out := add(\\r\\n                    out,\\r\\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\\r\\n                )\\r\\n                out := shl(8, out)\\r\\n                out := add(\\r\\n                    out,\\r\\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\\r\\n                )\\r\\n                out := shl(224, out)\\r\\n\\r\\n                mstore(resultPtr, out)\\r\\n\\r\\n                resultPtr := add(resultPtr, 4)\\r\\n            }\\r\\n\\r\\n            switch mod(len, 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n\\r\\n            mstore(result, encodedLen)\\r\\n        }\\r\\n\\r\\n        return string(result);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_prefix\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imageData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"namePrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"setDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newImage\",\"type\":\"string\"}],\"name\":\"setImageString\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_prefix\",\"type\":\"string\"}],\"name\":\"setPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MetadataDefault","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000a600000000000000000000000000000000000000000000000000000000000000b6000000000000000000000000000000000000000000000000000000000000009de646174613a696d6167652f7376672b786d6c3b6261736536342c50484e325a7942705a44306961444e704e5852364969423261575633516d393450534977494441674e4467674e446769494864705a48526f505349784d44416c4969426f5a576c6e61485139496a45774d435569494868746247357a50534a6f644852774f693876643364334c6e637a4c6d39795a7938794d4441774c334e325a79496765473173626e4d3665477870626d7339496d6830644841364c79393364336375647a4d7562334a6e4c7a45354f546b7665477870626d736949485a6c636e4e7062323439496a45754d53496750676f4b50476c745957646c49486739496a416949486b39496a4169494864705a48526f505349304f434967614756705a326830505349304f434967615731685a325574636d56755a4756796157356e50534a776158686c624746305a575169494842795a584e6c636e5a6c51584e775a574e30556d463061573839496e684e6157525a54576c6b4969423462476c75617a706f636d566d50534a6b595852684f6d6c745957646c4c3342755a7a746959584e6c4e6a517361565a4354314a334d4574485a32394251554642546c4e56614556565a30464251555a4251554642516c464451553142515546444e58703353325a425155464257555a4354565a465655464251555176613264434f555a4351566847655567726556465253304e424d544259516c4a525747355a5747317a6432464961544652576c6c424d565a734d6d6c706130784a5554427464456834635664465158526d596a52694c335242524338335a304a74596b67784c32317956433831636d686c566b56755757743464336c4b556d6c55554442546447737954324a744e573431656c4e3662444e4f6548684b51326f785a54524f5a445649596e4a42515546454f46567352564657556a52425a544e5761444e4d596c4e43513055305644524b5a314e685130466e516d30346444637654474534596b313657477448615670785a4652754f564e70646b6b355a46567a61334a494e57356d646a4e6e596b5172646d6c44635846746231706e546a684f516b5244616974434d304646525564336433553452565676536b6c35636a686b4d55685a4e56637964476c435a32703262564e68636e525554306c7151573143613349796557685263456454516a685255307058636d5253516e643655335a32536b4e4453326c4465557058633268695154685662456c4f5a45397663465a74616b3155566d3134646d6850574767725a6d49795958423351584e32516d6430516a64355a576776547a4645526b457652586b765256685151546845546d5636636c4243533268475a6b6c356430316f56486378574756546247397561304932526e4a4b51554e50553256494d45646b566c4a6e53474e4653326c56646b35425a46497952334d32656e644263314d724d6b597263565a7852455651526b4670615646435447646b6354425153557733553368494d325244596a524d5531517657565251513142494d307843636b5a4a5230465551304a7964304648646b705461474a6e527a5276655441344d57315a5a544e5a527a4253596d6473516d746e617a5642525570524f456468616d686c5257786863455249516c49784d31563361303572576d4a424d3056524f446c426156527a61546448616b784957564e5851554d314e32646f516a5235555656574e556c47556a4e4a5748565a53305a6b5744646f636d647a5130786f596d557a646e59765a564a50546e524a547a6c75556e52464f47686a63454a7063315a6c6232354e61486c6f647a4e5a656b35314e6d395a5a6a4a47636b3570523039494e446449636c684b5556685a516b68754f46644b5a5764435556703456316c364d57644e54455651536e5643527a6854535463765255593251584653546b343357586430556b5634627a52365a3235464d474e4554314a42556d3835656b394c517a4134615456514d556c695457463452315661546c6451546d70314f46565753456842523074535447706e556b464b613352534d7a67785530464b62306c75636c52615555645961486f34536d46444d6d6c7a644563335456424d65444e34616c644c6556705765585a46534764564d6b6c495a554578616e4235644546455a585a5a54544e45576a4a5656337051515735435656467162316c6852485579553364355a314e72526a524a5a315a354d5451355745645355577079555446464c306c6d5130466f55306875566c5a705547394d556e64475254566a6246464c56334e30524763345a4756435444644e62305271646b46434d464678517a4e69546c5a69595738725a4849305157745a626d646b546e70484d486b79656b7456544735505354466e5331564b65454e49516b52335a31464f4c336b3165486c544c30316f626b4a425a44646e63575a55546b4978593235564e6d35464b306c6a596d3558576c566a643268355754673453476c6d5231566d636d55766447566b576b493262586c6d4f4556514e474e4c54453153554578614e6b4644646c4a425645744b5154684b59336c3353476c584f474e4654546c4a56575a7a547a68434b32394256484977556e42565a43745761306c7053467036626b465259554d78516b314e564846504c315270576c5646536c527862304a43596b31335130783554466831515755354e305655536c46754f4577336248567a526c42365255463152484e3355444a495a5578756230686f4f47466b52554a50616c426a61336c4a576e5579615768515a4746495a7a643155314a52626a42484f584e47556b31546445465955304e57545646434e4556344e474e4864576c6a517a5235636b687353457044593146466457645353314a595a56457954554e505445343254484e7656486c4a5933524b513168335344565062323530555374504e306453626c7032564574445956466b4d6d5172616b7852644852334d466833536b5a4a636b78596569387a6244424952455242616a6c614b33424c536a644253444e514d456c724e48426c53554e4e526b64514f56687854336c495156463062554e576145646f61566835576b517754455a76646b5247525778344f586c5261474e49536c4a704c33706e526a5a354d6e4a686431425753326870516a466956304a5861327853546c6476544746354b316f7953457035566b64446332396e52466859616b6c444e446c6b4e476c42556e45345556524e64564e6f556e646953573143526e56615655466d656b707a6430684a4c33644c5455467655576f305a6c6452574863355a316476536b703155314133564849315a315a455633644562305271524468484f47316c5158597a546a51764e544e4564446b724e585a33554452514c3263764b30467a5a4867334e47786f5545464f526d644251554642516b705356545646636d744b5a32646e505430694c7a344b436a777663335a6e50673d3d000000000000000000000000000000000000000000000000000000000000000000cd4120636f6c6c656374696f6e206f662031352c30303020756e6971756520726f626265727320616e6420656e666f72636572732067656e65726174656420666f72205468652048656973742c2061207265616c2d74696d652c20636f6d7065746974697665206d756c74692d706c617965722028507650292067616d65206275696c7420616e642073746f72656420656e746972656c79206f6e2074686520457468657265756d20626c6f636b636861696e2e204e6f2065787465726e616c20646570656e64656e636965732e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000114865697374204368617261637465722023000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}