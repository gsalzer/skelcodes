{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Bridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\nimport \\\"./Parameters.sol\\\";\\n\\nabstract contract Bridge is Parameters {\\n\\n    mapping(bytes32 => bool) public queuedTransactions;\\n\\n    function queueTransaction(address target, uint256 value, string memory signature, bytes memory data, uint256 eta) internal returns (bytes32) {\\n        bytes32 txHash = _getTxHash(target, value, signature, data, eta);\\n        queuedTransactions[txHash] = true;\\n\\n        return txHash;\\n    }\\n\\n    function cancelTransaction(address target, uint256 value, string memory signature, bytes memory data, uint256 eta) internal {\\n        bytes32 txHash = _getTxHash(target, value, signature, data, eta);\\n        queuedTransactions[txHash] = false;\\n    }\\n\\n    function executeTransaction(address target, uint256 value, string memory signature, bytes memory data, uint256 eta) internal returns (bytes memory) {\\n        bytes32 txHash = _getTxHash(target, value, signature, data, eta);\\n\\n        require(block.timestamp >= eta, \\\"executeTransaction: Transaction hasn't surpassed time lock.\\\");\\n        require(block.timestamp <= eta + gracePeriodDuration, \\\"executeTransaction: Transaction is stale.\\\");\\n\\n        queuedTransactions[txHash] = false;\\n\\n        bytes memory callData;\\n\\n        if (bytes(signature).length == 0) {\\n            callData = data;\\n        } else {\\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\\n        }\\n\\n        // solium-disable-next-line security/no-call-value\\n        (bool success, bytes memory returnData) = target.call{value : value}(callData);\\n        require(success, string(returnData));\\n\\n        return returnData;\\n    }\\n\\n    function _getTxHash(address target, uint256 value, string memory signature, bytes memory data, uint256 eta) internal returns (bytes32) {\\n        return keccak256(abi.encode(target, value, signature, data, eta));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Parameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\nabstract contract Parameters {\\n    uint256 public warmUpDuration = 3 days;\\n    uint256 public activeDuration = 7 days;\\n    uint256 public queueDuration = 3 days;\\n    uint256 public gracePeriodDuration = 3 days;\\n\\n    uint256 public acceptanceThreshold = 65;\\n    uint256 public minQuorum = 35;\\n\\n    uint256 constant ACTIVATION_THRESHOLD = 1_000_000*10**18;\\n    uint256 constant PROPOSAL_MAX_ACTIONS = 10;\\n\\n    modifier onlyDAO () {\\n        require(msg.sender == address(this), \\\"Only DAO can call\\\");\\n        _;\\n    }\\n\\n    function setWarmUpDuration(uint256 period) public onlyDAO {\\n        warmUpDuration = period;\\n    }\\n\\n    function setActiveDuration(uint256 period) public onlyDAO {\\n        require(period >= 4 hours, \\\"period must be > 0\\\");\\n        activeDuration = period;\\n    }\\n\\n    function setQueueDuration(uint256 period) public onlyDAO {\\n        queueDuration = period;\\n    }\\n\\n    function setGracePeriodDuration(uint256 period) public onlyDAO {\\n        require(period >= 4 hours, \\\"period must be > 0\\\");\\n        gracePeriodDuration = period;\\n    }\\n\\n    function setAcceptanceThreshold(uint256 threshold) public onlyDAO {\\n        require(threshold <= 100, \\\"Maximum is 100.\\\");\\n        require(threshold > 50, \\\"Minimum is 50.\\\");\\n\\n        acceptanceThreshold = threshold;\\n    }\\n\\n    function setMinQuorum(uint256 quorum) public onlyDAO {\\n        require(quorum > 5, \\\"quorum must be greater than 5\\\");\\n        require(quorum <= 100, \\\"Maximum is 100.\\\");\\n\\n        minQuorum = quorum;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Governance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IDAOStaking.sol\\\";\\nimport \\\"./Bridge.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract Governance is Bridge {\\n    using SafeMath for uint256;\\n\\n    enum ProposalState {\\n        WarmUp,\\n        Active,\\n        Canceled,\\n        Failed,\\n        Accepted,\\n        Queued,\\n        Grace,\\n        Expired,\\n        Executed,\\n        Abrogated\\n    }\\n\\n    struct Receipt {\\n        // Whether or not a vote has been cast\\n        bool hasVoted;\\n        // The number of votes the voter had, which were cast\\n        uint256 votes;\\n        // support\\n        bool support;\\n    }\\n\\n    struct AbrogationProposal {\\n        address creator;\\n        uint256 createTime;\\n        string description;\\n\\n        uint256 forVotes;\\n        uint256 againstVotes;\\n\\n        mapping(address => Receipt) receipts;\\n    }\\n\\n    struct ProposalParameters {\\n        uint256 warmUpDuration;\\n        uint256 activeDuration;\\n        uint256 queueDuration;\\n        uint256 gracePeriodDuration;\\n        uint256 acceptanceThreshold;\\n        uint256 minQuorum;\\n    }\\n\\n    struct Proposal {\\n        // proposal identifiers\\n        // unique id\\n        uint256 id;\\n        // Creator of the proposal\\n        address proposer;\\n        // proposal description\\n        string description;\\n        string title;\\n\\n        // proposal technical details\\n        // ordered list of target addresses to be made\\n        address[] targets;\\n        // The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\n        uint256[] values;\\n        // The ordered list of function signatures to be called\\n        string[] signatures;\\n        // The ordered list of calldata to be passed to each call\\n        bytes[] calldatas;\\n\\n        // proposal creation time - 1\\n        uint256 createTime;\\n\\n        // votes status\\n        // The timestamp that the proposal will be available for execution, set once the vote succeeds\\n        uint256 eta;\\n        // Current number of votes in favor of this proposal\\n        uint256 forVotes;\\n        // Current number of votes in opposition to this proposal\\n        uint256 againstVotes;\\n\\n        bool canceled;\\n        bool executed;\\n\\n        // Receipts of ballots for the entire set of voters\\n        mapping(address => Receipt) receipts;\\n\\n        ProposalParameters parameters;\\n    }\\n\\n    uint256 public lastProposalId;\\n    mapping(uint256 => Proposal) public proposals;\\n    mapping(uint256 => AbrogationProposal) public abrogationProposals;\\n    mapping(address => uint256) public latestProposalIds;\\n    IDAOStaking daoStaking;\\n    bool isInitialized;\\n    bool public isActive;\\n\\n    event ProposalCreated(uint256 indexed proposalId);\\n    event Vote(uint256 indexed proposalId, address indexed user, bool support, uint256 power);\\n    event VoteCanceled(uint256 indexed proposalId, address indexed user);\\n    event ProposalQueued(uint256 indexed proposalId, address caller, uint256 eta);\\n    event ProposalExecuted(uint256 indexed proposalId, address caller);\\n    event ProposalCanceled(uint256 indexed proposalId, address caller);\\n    event AbrogationProposalStarted(uint256 indexed proposalId, address caller);\\n    event AbrogationProposalExecuted(uint256 indexed proposalId, address caller);\\n    event AbrogationProposalVote(uint256 indexed proposalId, address indexed user, bool support, uint256 power);\\n    event AbrogationProposalVoteCancelled(uint256 indexed proposalId, address indexed user);\\n\\n    receive() external payable {}\\n\\n    // executed only once\\n    function initialize(address daoStakingAddr) public {\\n        require(isInitialized == false, \\\"Contract already initialized.\\\");\\n        require(daoStakingAddr != address(0), \\\"daoStaking must not be 0x0\\\");\\n\\n        daoStaking = IDAOStaking(daoStakingAddr);\\n        isInitialized = true;\\n    }\\n\\n    function activate() public {\\n        require(!isActive, \\\"DAO already active\\\");\\n        require(daoStaking.stakeborgTokenStaked() >= ACTIVATION_THRESHOLD, \\\"Threshold not met yet\\\");\\n\\n        isActive = true;\\n    }\\n\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        string[] memory signatures,\\n        bytes[] memory calldatas,\\n        string memory description,\\n        string memory title\\n    )\\n    public returns (uint256)\\n    {\\n        if (!isActive) {\\n            require(daoStaking.stakeborgTokenStaked() >= ACTIVATION_THRESHOLD, \\\"DAO not yet active\\\");\\n            isActive = true;\\n        }\\n\\n        require(\\n            daoStaking.votingPowerAtTs(msg.sender, block.timestamp - 1) >= _getCreationThreshold(),\\n            \\\"Creation threshold not met\\\"\\n        );\\n        require(\\n            targets.length == values.length && targets.length == signatures.length && targets.length == calldatas.length,\\n            \\\"Proposal function information arity mismatch\\\"\\n        );\\n        require(targets.length != 0, \\\"Must provide actions\\\");\\n        require(targets.length <= PROPOSAL_MAX_ACTIONS, \\\"Too many actions on a vote\\\");\\n        require(bytes(title).length > 0, \\\"title can't be empty\\\");\\n        require(bytes(description).length > 0, \\\"description can't be empty\\\");\\n\\n        // check if user has another running vote\\n        uint256 previousProposalId = latestProposalIds[msg.sender];\\n        if (previousProposalId != 0) {\\n            require(_isLiveState(previousProposalId) == false, \\\"One live proposal per proposer\\\");\\n        }\\n\\n        uint256 newProposalId = lastProposalId + 1;\\n        Proposal storage newProposal = proposals[newProposalId];\\n        newProposal.id = newProposalId;\\n        newProposal.proposer = msg.sender;\\n        newProposal.description = description;\\n        newProposal.title = title;\\n        newProposal.targets = targets;\\n        newProposal.values = values;\\n        newProposal.signatures = signatures;\\n        newProposal.calldatas = calldatas;\\n        newProposal.createTime = block.timestamp - 1;\\n        newProposal.parameters.warmUpDuration = warmUpDuration;\\n        newProposal.parameters.activeDuration = activeDuration;\\n        newProposal.parameters.queueDuration = queueDuration;\\n        newProposal.parameters.gracePeriodDuration = gracePeriodDuration;\\n        newProposal.parameters.acceptanceThreshold = acceptanceThreshold;\\n        newProposal.parameters.minQuorum = minQuorum;\\n\\n        lastProposalId = newProposalId;\\n        latestProposalIds[msg.sender] = newProposalId;\\n\\n        emit ProposalCreated(newProposalId);\\n\\n        return newProposalId;\\n    }\\n\\n    function queue(uint256 proposalId) public {\\n        require(state(proposalId) == ProposalState.Accepted, \\\"Proposal can only be queued if it is succeeded\\\");\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        uint256 eta = proposal.createTime + proposal.parameters.warmUpDuration + proposal.parameters.activeDuration + proposal.parameters.queueDuration;\\n        proposal.eta = eta;\\n\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\n            require(\\n                !queuedTransactions[_getTxHash(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], eta)],\\n                \\\"proposal action already queued at eta\\\"\\n            );\\n\\n            queueTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], eta);\\n        }\\n\\n        emit ProposalQueued(proposalId, msg.sender, eta);\\n    }\\n\\n    function execute(uint256 proposalId) public payable {\\n        require(_canBeExecuted(proposalId), \\\"Cannot be executed\\\");\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        proposal.executed = true;\\n\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\n            executeTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\\n        }\\n\\n        emit ProposalExecuted(proposalId, msg.sender);\\n    }\\n\\n    function cancelProposal(uint256 proposalId) public {\\n        require(_isCancellableState(proposalId), \\\"Proposal in state that does not allow cancellation\\\");\\n        require(_canCancelProposal(proposalId), \\\"Cancellation requirements not met\\\");\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        proposal.canceled = true;\\n\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\n            cancelTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\\n        }\\n\\n        emit ProposalCanceled(proposalId, msg.sender);\\n    }\\n\\n    function castVote(uint256 proposalId, bool support) public {\\n        require(state(proposalId) == ProposalState.Active, \\\"Voting is closed\\\");\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        Receipt storage receipt = proposal.receipts[msg.sender];\\n\\n        // exit if user already voted\\n        require(receipt.hasVoted == false || receipt.hasVoted && receipt.support != support, \\\"Already voted this option\\\");\\n\\n        uint256 votes = daoStaking.votingPowerAtTs(msg.sender, _getSnapshotTimestamp(proposal));\\n        require(votes > 0, \\\"no voting power\\\");\\n\\n        // means it changed its vote\\n        if (receipt.hasVoted) {\\n            if (receipt.support) {\\n                proposal.forVotes = proposal.forVotes.sub(receipt.votes);\\n            } else {\\n                proposal.againstVotes = proposal.againstVotes.sub(receipt.votes);\\n            }\\n        }\\n\\n        if (support) {\\n            proposal.forVotes = proposal.forVotes.add(votes);\\n        } else {\\n            proposal.againstVotes = proposal.againstVotes.add(votes);\\n        }\\n\\n        receipt.hasVoted = true;\\n        receipt.votes = votes;\\n        receipt.support = support;\\n\\n        emit Vote(proposalId, msg.sender, support, votes);\\n    }\\n\\n    function cancelVote(uint256 proposalId) public {\\n        require(state(proposalId) == ProposalState.Active, \\\"Voting is closed\\\");\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        Receipt storage receipt = proposal.receipts[msg.sender];\\n\\n        uint256 votes = daoStaking.votingPowerAtTs(msg.sender, _getSnapshotTimestamp(proposal));\\n\\n        require(receipt.hasVoted, \\\"Cannot cancel if not voted yet\\\");\\n\\n        if (receipt.support) {\\n            proposal.forVotes = proposal.forVotes.sub(votes);\\n        } else {\\n            proposal.againstVotes = proposal.againstVotes.sub(votes);\\n        }\\n\\n        receipt.hasVoted = false;\\n        receipt.votes = 0;\\n        receipt.support = false;\\n\\n        emit VoteCanceled(proposalId, msg.sender);\\n    }\\n\\n    // ======================================================================================================\\n    // Abrogation proposal methods\\n    // ======================================================================================================\\n\\n    // the Abrogation Proposal is a mechanism for the DAO participants to veto the execution of a proposal that was already\\n    // accepted and it is currently queued. For the Abrogation Proposal to pass, 50% + 1 of the vSTANDARD holders\\n    // must vote FOR the Abrogation Proposal\\n    function startAbrogationProposal(uint256 proposalId, string memory description) public {\\n        require(state(proposalId) == ProposalState.Queued, \\\"Proposal must be in queue\\\");\\n        require(\\n            daoStaking.votingPowerAtTs(msg.sender, block.timestamp - 1) >= _getCreationThreshold(),\\n            \\\"Creation threshold not met\\\"\\n        );\\n\\n        AbrogationProposal storage ap = abrogationProposals[proposalId];\\n\\n        require(ap.createTime == 0, \\\"Abrogation proposal already exists\\\");\\n        require(bytes(description).length > 0, \\\"description can't be empty\\\");\\n\\n        ap.createTime = block.timestamp;\\n        ap.creator = msg.sender;\\n        ap.description = description;\\n\\n        emit AbrogationProposalStarted(proposalId, msg.sender);\\n    }\\n\\n    // abrogateProposal cancels a proposal if there's an Abrogation Proposal that passed\\n    function abrogateProposal(uint256 proposalId) public {\\n        require(state(proposalId) == ProposalState.Abrogated, \\\"Cannot be abrogated\\\");\\n\\n        Proposal storage proposal = proposals[proposalId];\\n\\n        require(proposal.canceled == false, \\\"Cannot be abrogated\\\");\\n\\n        proposal.canceled = true;\\n\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\n            cancelTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\\n        }\\n\\n        emit AbrogationProposalExecuted(proposalId, msg.sender);\\n    }\\n\\n    function abrogationProposal_castVote(uint256 proposalId, bool support) public {\\n        require(0 < proposalId && proposalId <= lastProposalId, \\\"invalid proposal id\\\");\\n\\n        AbrogationProposal storage abrogationProposal = abrogationProposals[proposalId];\\n        require(\\n            state(proposalId) == ProposalState.Queued && abrogationProposal.createTime != 0,\\n            \\\"Abrogation Proposal not active\\\"\\n        );\\n\\n        Receipt storage receipt = abrogationProposal.receipts[msg.sender];\\n        require(\\n            receipt.hasVoted == false || receipt.hasVoted && receipt.support != support,\\n            \\\"Already voted this option\\\"\\n        );\\n\\n        uint256 votes = daoStaking.votingPowerAtTs(msg.sender, abrogationProposal.createTime - 1);\\n        require(votes > 0, \\\"no voting power\\\");\\n\\n        // means it changed its vote\\n        if (receipt.hasVoted) {\\n            if (receipt.support) {\\n                abrogationProposal.forVotes = abrogationProposal.forVotes.sub(receipt.votes);\\n            } else {\\n                abrogationProposal.againstVotes = abrogationProposal.againstVotes.sub(receipt.votes);\\n            }\\n        }\\n\\n        if (support) {\\n            abrogationProposal.forVotes = abrogationProposal.forVotes.add(votes);\\n        } else {\\n            abrogationProposal.againstVotes = abrogationProposal.againstVotes.add(votes);\\n        }\\n\\n        receipt.hasVoted = true;\\n        receipt.votes = votes;\\n        receipt.support = support;\\n\\n        emit AbrogationProposalVote(proposalId, msg.sender, support, votes);\\n    }\\n\\n    function abrogationProposal_cancelVote(uint256 proposalId) public {\\n        require(0 < proposalId && proposalId <= lastProposalId, \\\"invalid proposal id\\\");\\n\\n        AbrogationProposal storage abrogationProposal = abrogationProposals[proposalId];\\n        Receipt storage receipt = abrogationProposal.receipts[msg.sender];\\n\\n        require(\\n            state(proposalId) == ProposalState.Queued && abrogationProposal.createTime != 0,\\n            \\\"Abrogation Proposal not active\\\"\\n        );\\n\\n        uint256 votes = daoStaking.votingPowerAtTs(msg.sender, abrogationProposal.createTime - 1);\\n\\n        require(receipt.hasVoted, \\\"Cannot cancel if not voted yet\\\");\\n\\n        if (receipt.support) {\\n            abrogationProposal.forVotes = abrogationProposal.forVotes.sub(votes);\\n        } else {\\n            abrogationProposal.againstVotes = abrogationProposal.againstVotes.sub(votes);\\n        }\\n\\n        receipt.hasVoted = false;\\n        receipt.votes = 0;\\n        receipt.support = false;\\n\\n        emit AbrogationProposalVoteCancelled(proposalId, msg.sender);\\n    }\\n\\n    // ======================================================================================================\\n    // views\\n    // ======================================================================================================\\n\\n    function state(uint256 proposalId) public view returns (ProposalState) {\\n        require(0 < proposalId && proposalId <= lastProposalId, \\\"invalid proposal id\\\");\\n\\n        Proposal storage proposal = proposals[proposalId];\\n\\n        if (proposal.canceled) {\\n            return ProposalState.Canceled;\\n        }\\n\\n        if (proposal.executed) {\\n            return ProposalState.Executed;\\n        }\\n\\n        if (block.timestamp <= proposal.createTime + proposal.parameters.warmUpDuration) {\\n            return ProposalState.WarmUp;\\n        }\\n\\n        if (block.timestamp <= proposal.createTime + proposal.parameters.warmUpDuration + proposal.parameters.activeDuration) {\\n            return ProposalState.Active;\\n        }\\n\\n        if ((proposal.forVotes + proposal.againstVotes) < _getQuorum(proposal) ||\\n            (proposal.forVotes < _getMinForVotes(proposal))) {\\n            return ProposalState.Failed;\\n        }\\n\\n        if (proposal.eta == 0) {\\n            return ProposalState.Accepted;\\n        }\\n\\n        if (block.timestamp < proposal.eta) {\\n            return ProposalState.Queued;\\n        }\\n\\n        if (_proposalAbrogated(proposalId)) {\\n            return ProposalState.Abrogated;\\n        }\\n\\n        if (block.timestamp <= proposal.eta + proposal.parameters.gracePeriodDuration) {\\n            return ProposalState.Grace;\\n        }\\n\\n        return ProposalState.Expired;\\n    }\\n\\n    function getReceipt(uint256 proposalId, address voter) public view returns (Receipt memory) {\\n        return proposals[proposalId].receipts[voter];\\n    }\\n\\n    function getProposalParameters(uint256 proposalId) public view returns (ProposalParameters memory) {\\n        return proposals[proposalId].parameters;\\n    }\\n\\n    function getAbrogationProposalReceipt(uint256 proposalId, address voter) public view returns (Receipt memory) {\\n        return abrogationProposals[proposalId].receipts[voter];\\n    }\\n\\n    function getActions(uint256 proposalId) public view returns (\\n        address[] memory targets,\\n        uint256[] memory values,\\n        string[] memory signatures,\\n        bytes[] memory calldatas\\n    ) {\\n        Proposal storage p = proposals[proposalId];\\n        return (p.targets, p.values, p.signatures, p.calldatas);\\n    }\\n\\n    function getProposalQuorum(uint256 proposalId) public view returns (uint256) {\\n        require(0 < proposalId && proposalId <= lastProposalId, \\\"invalid proposal id\\\");\\n\\n        return _getQuorum(proposals[proposalId]);\\n    }\\n\\n    // ======================================================================================================\\n    // internal methods\\n    // ======================================================================================================\\n\\n    function _canCancelProposal(uint256 proposalId) internal view returns (bool){\\n        Proposal storage proposal = proposals[proposalId];\\n\\n        if (msg.sender == proposal.proposer ||\\n            daoStaking.votingPower(proposal.proposer) < _getCreationThreshold()\\n        ) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function _isCancellableState(uint256 proposalId) internal view returns (bool) {\\n        ProposalState s = state(proposalId);\\n\\n        return s == ProposalState.WarmUp || s == ProposalState.Active;\\n    }\\n\\n    function _isLiveState(uint256 proposalId) internal view returns (bool) {\\n        ProposalState s = state(proposalId);\\n\\n        return s == ProposalState.WarmUp ||\\n        s == ProposalState.Active ||\\n        s == ProposalState.Accepted ||\\n        s == ProposalState.Queued ||\\n        s == ProposalState.Grace;\\n    }\\n\\n    function _canBeExecuted(uint256 proposalId) internal view returns (bool) {\\n        return state(proposalId) == ProposalState.Grace;\\n    }\\n\\n    function _getMinForVotes(Proposal storage proposal) internal view returns (uint256) {\\n        return (proposal.forVotes + proposal.againstVotes).mul(proposal.parameters.acceptanceThreshold).div(100);\\n    }\\n\\n    function _getCreationThreshold() internal view returns (uint256) {\\n        return daoStaking.stakeborgTokenStaked().div(100);\\n    }\\n\\n    // Returns the timestamp of the snapshot for a given proposal\\n    // If the current block's timestamp is equal to `proposal.createTime + warmUpDuration` then the state function\\n    // will return WarmUp as state which will prevent any vote to be cast which will gracefully avoid any flashloan attack\\n    function _getSnapshotTimestamp(Proposal storage proposal) internal view returns (uint256) {\\n        return proposal.createTime + proposal.parameters.warmUpDuration;\\n    }\\n\\n    function _getQuorum(Proposal storage proposal) internal view returns (uint256) {\\n        return daoStaking.stakeborgTokenStakedAtTs(_getSnapshotTimestamp(proposal)).mul(proposal.parameters.minQuorum).div(100);\\n    }\\n\\n    function _proposalAbrogated(uint256 proposalId) internal view returns (bool) {\\n        Proposal storage p = proposals[proposalId];\\n        AbrogationProposal storage cp = abrogationProposals[proposalId];\\n\\n        if (cp.createTime == 0 || block.timestamp < p.eta) {\\n            return false;\\n        }\\n\\n        return cp.forVotes >= daoStaking.stakeborgTokenStakedAtTs(cp.createTime - 1).div(2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDAOStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDAOStaking {\\n    struct Stake {\\n        uint256 timestamp;\\n        uint256 amount;\\n        uint256 expiryTimestamp;\\n        address delegatedTo;\\n    }\\n\\n    // deposit allows a user to add more stakeborg token to his staked balance\\n    function deposit(uint256 amount) external;\\n\\n    // withdraw allows a user to withdraw funds if the balance is not locked\\n    function withdraw(uint256 amount) external;\\n\\n    // lock a user's currently staked balance until timestamp & add the bonus to his voting power\\n    function lock(uint256 timestamp) external;\\n\\n    // delegate allows a user to delegate his voting power to another user\\n    function delegate(address to) external;\\n\\n    // stopDelegate allows a user to take back the delegated voting power\\n    function stopDelegate() external;\\n\\n    // balanceOf returns the current stakeborg token balance of a user (bonus not included)\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    // balanceAtTs returns the amount of stakeborg token that the user currently staked (bonus NOT included)\\n    function balanceAtTs(address user, uint256 timestamp) external view returns (uint256);\\n\\n    // stakeAtTs returns the Stake object of the user that was valid at `timestamp`\\n    function stakeAtTs(address user, uint256 timestamp) external view returns (Stake memory);\\n\\n    // votingPower returns the voting power (bonus included) + delegated voting power for a user at the current block\\n    function votingPower(address user) external view returns (uint256);\\n\\n    // votingPowerAtTs returns the voting power (bonus included) + delegated voting power for a user at a point in time\\n    function votingPowerAtTs(address user, uint256 timestamp) external view returns (uint256);\\n\\n    // stakeborgTokenStaked returns the total raw amount of stakeborg token staked at the current block\\n    function stakeborgTokenStaked() external view returns (uint256);\\n\\n    // stakeborgTokenStakedAtTs returns the total raw amount of stakeborg token users have deposited into the contract\\n    // it does not include any bonus\\n    function stakeborgTokenStakedAtTs(uint256 timestamp) external view returns (uint256);\\n\\n    // delegatedPower returns the total voting power that a user received from other users\\n    function delegatedPower(address user) external view returns (uint256);\\n\\n    // delegatedPowerAtTs returns the total voting power that a user received from other users at a point in time\\n    function delegatedPowerAtTs(address user, uint256 timestamp) external view returns (uint256);\\n\\n    // multiplierAtTs calculates the multiplier at a given timestamp based on the user's stake a the given timestamp\\n    // it includes the decay mechanism\\n    function multiplierAtTs(address user, uint256 timestamp) external view returns (uint256);\\n\\n    // userLockedUntil returns the timestamp until the user's balance is locked\\n    function userLockedUntil(address user) external view returns (uint256);\\n\\n    // userDidDelegate returns the address to which a user delegated their voting power; address(0) if not delegated\\n    function userDelegatedTo(address user) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/ERC20Mock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract ERC20Mock is ERC20(\\\"ERC20Mock\\\", \\\"MCK\\\") {\\n    bool public transferFromCalled = false;\\n\\n    bool public transferCalled = false;\\n    address public transferRecipient = address(0);\\n    uint256 public transferAmount = 0;\\n\\n    function mint(address user, uint256 amount) public {\\n        _mint(user, amount);\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        transferFromCalled = true;\\n\\n        return super.transferFrom(sender, recipient, amount);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        transferCalled = true;\\n        transferRecipient = recipient;\\n        transferAmount = amount;\\n\\n        return super.transfer(recipient, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mocks/DAOStakingMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.1;\\n\\nimport \\\"../interfaces/IDAOStaking.sol\\\";\\n\\ncontract DAOStakingMock {\\n    uint256 private _stakeborgTokenStaked;\\n    mapping(address => uint256) private _votingPowerAtTs;\\n    bool public lockCreatorBalanceHasBeenCalled;\\n    bool public withdrawHasBeenCalled;\\n\\n    // votingPowerAtTs returns the voting power (bonus included) + delegated voting power for a user at a point in time\\n    function votingPowerAtTs(address user, uint256 timestamp) external view returns (uint256){\\n        return _votingPowerAtTs[user];\\n    }\\n\\n    function votingPower(address user) external view returns (uint256) {\\n        return _votingPowerAtTs[user];\\n    }\\n\\n    function stakeborgTokenStaked() external view returns (uint256) {\\n        return _stakeborgTokenStaked;\\n    }\\n\\n    function stakeborgTokenStakedAtTs(uint256 ts) public view returns (uint256) {\\n        return _stakeborgTokenStaked;\\n    }\\n\\n    function setstakeborgTokenStaked(uint256 val) public {\\n        _stakeborgTokenStaked = val;\\n    }\\n\\n    function setVotingPower(address user, uint256 val) public {\\n        _votingPowerAtTs[user] = val;\\n    }\\n\\n    function withdraw(uint256 amount) external {\\n        withdrawHasBeenCalled = true;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AbrogationProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AbrogationProposalStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"name\":\"AbrogationProposalVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AbrogationProposalVoteCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"VoteCanceled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"abrogateProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"abrogationProposal_cancelVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"abrogationProposal_castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"abrogationProposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptanceThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancelVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getAbrogationProposalReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"internalType\":\"struct Governance.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"warmUpDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queueDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gracePeriodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptanceThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuorum\",\"type\":\"uint256\"}],\"internalType\":\"struct Governance.ProposalParameters\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"internalType\":\"struct Governance.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gracePeriodDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoStakingAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"warmUpDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queueDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gracePeriodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptanceThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuorum\",\"type\":\"uint256\"}],\"internalType\":\"struct Governance.ProposalParameters\",\"name\":\"parameters\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queueDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"queuedTransactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setAcceptanceThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setActiveDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setGracePeriodDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"}],\"name\":\"setMinQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setQueueDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setWarmUpDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"startAbrogationProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum Governance.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warmUpDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Governance","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"9999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}