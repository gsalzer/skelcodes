{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathChainlink {\r\n  /**\r\n    * @dev Returns the addition of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `+` operator.\r\n    *\r\n    * Requirements:\r\n    * - Addition cannot overflow.\r\n    */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    * - Subtraction cannot overflow.\r\n    */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath: subtraction overflow\");\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the multiplication of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `*` operator.\r\n    *\r\n    * Requirements:\r\n    * - Multiplication cannot overflow.\r\n    */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the integer division of two unsigned integers. Reverts on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    * uses an invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, \"SafeMath: division by zero\");\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * Reverts when dividing by zero.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"SafeMath: modulo by zero\");\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n// Dependency file: @chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\ninterface LinkTokenInterface {\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n  function approve(address spender, uint256 value) external returns (bool success);\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n  function decimals() external view returns (uint8 decimalPlaces);\r\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n  function increaseApproval(address spender, uint256 subtractedValue) external;\r\n  function name() external view returns (string memory tokenName);\r\n  function symbol() external view returns (string memory tokenSymbol);\r\n  function totalSupply() external view returns (uint256 totalTokensIssued);\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n}\r\n\r\n\r\n// Dependency file: @chainlink/contracts/src/v0.6/VRFRequestIDBase.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\ncontract VRFRequestIDBase {\r\n\r\n  /**\r\n   * @notice returns the seed which is actually input to the VRF coordinator\r\n   *\r\n   * @dev To prevent repetition of VRF output due to repetition of the\r\n   * @dev user-supplied seed, that seed is combined in a hash with the\r\n   * @dev user-specific nonce, and the address of the consuming contract. The\r\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\r\n   * @dev the final seed, but the nonce does protect against repetition in\r\n   * @dev requests which are included in a single block.\r\n   *\r\n   * @param _userSeed VRF seed input provided by user\r\n   * @param _requester Address of the requesting contract\r\n   * @param _nonce User-specific nonce at the time of the request\r\n   */\r\n  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\r\n    address _requester, uint256 _nonce)\r\n    internal pure returns (uint256)\r\n  {\r\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the id for this request\r\n   * @param _keyHash The serviceAgreement ID to be used for this request\r\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\r\n   * @return The id for this request\r\n   *\r\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\r\n   * @dev contract, but the one generated by makeVRFInputSeed\r\n   */\r\n  function makeRequestId(\r\n    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\r\n  }\r\n}\r\n\r\n\r\n// Dependency file: @chainlink/contracts/src/v0.6/VRFConsumerBase.sol\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\";\r\n\r\n// import \"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\";\r\n\r\n// import \"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol\";\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\r\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\r\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\r\n * @dev want to generate randomness from.\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomness method.\r\n *\r\n * @dev The randomness argument to fulfillRandomness is the actual random value\r\n * @dev generated from your seed.\r\n *\r\n * @dev The requestId argument is generated from the keyHash and the seed by\r\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\r\n * @dev requests open, you can use the requestId to track which seed is\r\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\r\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.)\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ. (Which is critical to making unpredictable randomness! See the\r\n * @dev next section.)\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\r\n * @dev block in which the request is made, user-provided seeds have no impact\r\n * @dev on its economic security properties. They are only included for API\r\n * @dev compatability with previous versions of this contract.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request.\r\n */\r\nabstract contract VRFConsumerBase is VRFRequestIDBase {\r\n\r\n  using SafeMathChainlink for uint256;\r\n\r\n  /**\r\n   * @notice fulfillRandomness handles the VRF response. Your contract must\r\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n   * @notice principles to keep in mind when implementing your fulfillRandomness\r\n   * @notice method.\r\n   *\r\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\r\n   * @dev signature, and will call it once it has verified the proof\r\n   * @dev associated with the randomness. (It is triggered via a call to\r\n   * @dev rawFulfillRandomness, below.)\r\n   *\r\n   * @param requestId The Id initially returned by requestRandomness\r\n   * @param randomness the VRF output\r\n   */\r\n  function fulfillRandomness(bytes32 requestId, uint256 randomness)\r\n    internal virtual;\r\n\r\n  /**\r\n   * @notice requestRandomness initiates a request for VRF output given _seed\r\n   *\r\n   * @dev The fulfillRandomness method receives the output, once it's provided\r\n   * @dev by the Oracle, and verified by the vrfCoordinator.\r\n   *\r\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\r\n   * @dev the _fee must exceed the fee specified during registration of the\r\n   * @dev _keyHash.\r\n   *\r\n   * @dev The _seed parameter is vestigial, and is kept only for API\r\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\r\n   * @dev your own randomness, here, but it's not necessary because the VRF\r\n   * @dev oracle will mix the hash of the block containing your request into the\r\n   * @dev VRF seed it ultimately uses.\r\n   *\r\n   * @param _keyHash ID of public key against which randomness is generated\r\n   * @param _fee The amount of LINK to send with the request\r\n   * @param _seed seed mixed into the input of the VRF.\r\n   *\r\n   * @return requestId unique ID for this request\r\n   *\r\n   * @dev The returned requestId can be used to distinguish responses to\r\n   * @dev concurrent requests. It is passed as the first argument to\r\n   * @dev fulfillRandomness.\r\n   */\r\n  function requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed)\r\n    internal returns (bytes32 requestId)\r\n  {\r\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\r\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\r\n    // the hash of the block containing this request to obtain the seed/input\r\n    // which is finally passed to the VRF cryptographic machinery.\r\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\r\n    // nonces[_keyHash] must stay in sync with\r\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\r\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\r\n    // This provides protection against the user repeating their input seed,\r\n    // which would result in a predictable/duplicate output, if multiple such\r\n    // requests appeared in the same block.\r\n    nonces[_keyHash] = nonces[_keyHash].add(1);\r\n    return makeRequestId(_keyHash, vRFSeed);\r\n  }\r\n\r\n  LinkTokenInterface immutable internal LINK;\r\n  address immutable private vrfCoordinator;\r\n\r\n  // Nonces for each VRF key from which randomness has been requested.\r\n  //\r\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\r\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\r\n\r\n  /**\r\n   * @param _vrfCoordinator address of VRFCoordinator contract\r\n   * @param _link address of LINK token contract\r\n   *\r\n   * @dev https://docs.chain.link/docs/link-token-contracts\r\n   */\r\n  constructor(address _vrfCoordinator, address _link) public {\r\n    vrfCoordinator = _vrfCoordinator;\r\n    LINK = LinkTokenInterface(_link);\r\n  }\r\n\r\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n  // the origin of the call\r\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\r\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\r\n    fulfillRandomness(requestId, randomness);\r\n  }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/GSN/Context.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/lib/Uint256ArrayUtils.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n/**\r\n * @title Uint256ArrayUtils\r\n * @author Prophecy\r\n *\r\n * Utility functions to handle uint256 Arrays\r\n */\r\nlibrary Uint256ArrayUtils {\r\n\r\n    /**\r\n     * Finds the index of the first occurrence of the given element.\r\n     * @param A The input array to search\r\n     * @param a The value to find\r\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\r\n     */\r\n    function indexOf(uint256[] memory A, uint256 a) internal pure returns (uint256, bool) {\r\n        uint256 length = A.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (A[i] == a) {\r\n                return (i, true);\r\n            }\r\n        }\r\n        return (uint256(-1), false);\r\n    }\r\n\r\n    /**\r\n    * Returns true if the value is present in the list. Uses indexOf internally.\r\n    * @param A The input array to search\r\n    * @param a The value to find\r\n    * @return Returns isIn for the first occurrence starting from index 0\r\n    */\r\n    function contains(uint256[] memory A, uint256 a) internal pure returns (bool) {\r\n        (, bool isIn) = indexOf(A, a);\r\n        return isIn;\r\n    }\r\n\r\n    /**\r\n    * Returns true if there are 2 elements that are the same in an array\r\n    * @param A The input array to search\r\n    * @return Returns boolean for the first occurrence of a duplicate\r\n    */\r\n    function hasDuplicate(uint256[] memory A) internal pure returns(bool) {\r\n        require(A.length > 0, \"A is empty\");\r\n\r\n        for (uint256 i = 0; i < A.length - 1; i++) {\r\n            uint256 current = A[i];\r\n            for (uint256 j = i + 1; j < A.length; j++) {\r\n                if (current == A[j]) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param A The input array to search\r\n     * @param a The uint256 to remove     \r\n     * @return Returns the array with the object removed.\r\n     */\r\n    function remove(uint256[] memory A, uint256 a)\r\n        internal\r\n        pure\r\n        returns (uint256[] memory)\r\n    {\r\n        (uint256 index, bool isIn) = indexOf(A, a);\r\n        if (!isIn) {\r\n            revert(\"uint256 not in array.\");\r\n        } else {\r\n            (uint256[] memory _A,) = pop(A, index);\r\n            return _A;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param A The input array to search\r\n     * @param a The uint256 to remove\r\n     */\r\n    function removeStorage(uint256[] storage A, uint256 a)\r\n        internal\r\n    {\r\n        (uint256 index, bool isIn) = indexOf(A, a);\r\n        if (!isIn) {\r\n            revert(\"uint256 not in array.\");\r\n        } else {\r\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\r\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\r\n            A.pop();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Removes specified index from array\r\n    * @param A The input array to search\r\n    * @param index The index to remove\r\n    * @return Returns the new array and the removed entry\r\n    */\r\n    function pop(uint256[] memory A, uint256 index)\r\n        internal\r\n        pure\r\n        returns (uint256[] memory, uint256)\r\n    {\r\n        uint256 length = A.length;\r\n        require(index < A.length, \"Index must be < A length\");\r\n        uint256[] memory newUint256s = new uint256[](length - 1);\r\n        for (uint256 i = 0; i < index; i++) {\r\n            newUint256s[i] = A[i];\r\n        }\r\n        for (uint256 j = index + 1; j < length; j++) {\r\n            newUint256s[j - 1] = A[j];\r\n        }\r\n        return (newUint256s, A[index]);\r\n    }\r\n\r\n    /**\r\n     * Returns the combination of the two arrays\r\n     * @param A The first array\r\n     * @param B The second array\r\n     * @return Returns A extended by B\r\n     */\r\n    function extend(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\r\n        uint256 aLength = A.length;\r\n        uint256 bLength = B.length;\r\n        uint256[] memory newUint256s = new uint256[](aLength + bLength);\r\n        for (uint256 i = 0; i < aLength; i++) {\r\n            newUint256s[i] = A[i];\r\n        }\r\n        for (uint256 j = 0; j < bLength; j++) {\r\n            newUint256s[aLength + j] = B[j];\r\n        }\r\n        return newUint256s;\r\n    }\r\n\r\n    /**\r\n     * Validate uint256 array is not empty and contains no duplicate elements.\r\n     *\r\n     * @param A          Array of uint256\r\n     */\r\n    function _validateLengthAndUniqueness(uint256[] memory A) internal pure {\r\n        require(A.length > 0, \"Array length must be > 0\");\r\n        require(!hasDuplicate(A), \"Cannot duplicate uint256\");\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/lib/AddressArrayUtils.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n/**\r\n * @title AddressArrayUtils\r\n * @author Prophecy\r\n *\r\n * Utility functions to handle uint256 Arrays\r\n */\r\nlibrary AddressArrayUtils {\r\n\r\n    /**\r\n     * Finds the index of the first occurrence of the given element.\r\n     * @param A The input array to search\r\n     * @param a The value to find\r\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\r\n     */\r\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\r\n        uint256 length = A.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (A[i] == a) {\r\n                return (i, true);\r\n            }\r\n        }\r\n        return (uint256(-1), false);\r\n    }\r\n\r\n    /**\r\n    * Returns true if the value is present in the list. Uses indexOf internally.\r\n    * @param A The input array to search\r\n    * @param a The value to find\r\n    * @return Returns isIn for the first occurrence starting from index 0\r\n    */\r\n    function contains(address[] memory A, address a) internal pure returns (bool) {\r\n        (, bool isIn) = indexOf(A, a);\r\n        return isIn;\r\n    }\r\n\r\n    /**\r\n    * Returns true if there are 2 elements that are the same in an array\r\n    * @param A The input array to search\r\n    * @return Returns boolean for the first occurrence of a duplicate\r\n    */\r\n    function hasDuplicate(address[] memory A) internal pure returns(bool) {\r\n        require(A.length > 0, \"A is empty\");\r\n\r\n        for (uint256 i = 0; i < A.length - 1; i++) {\r\n            address current = A[i];\r\n            for (uint256 j = i + 1; j < A.length; j++) {\r\n                if (current == A[j]) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param A The input array to search\r\n     * @param a The address to remove     \r\n     * @return Returns the array with the object removed.\r\n     */\r\n    function remove(address[] memory A, address a)\r\n        internal\r\n        pure\r\n        returns (address[] memory)\r\n    {\r\n        (uint256 index, bool isIn) = indexOf(A, a);\r\n        if (!isIn) {\r\n            revert(\"Address not in array.\");\r\n        } else {\r\n            (address[] memory _A,) = pop(A, index);\r\n            return _A;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param A The input array to search\r\n     * @param a The address to remove\r\n     */\r\n    function removeStorage(address[] storage A, address a)\r\n        internal\r\n    {\r\n        (uint256 index, bool isIn) = indexOf(A, a);\r\n        if (!isIn) {\r\n            revert(\"Address not in array.\");\r\n        } else {\r\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\r\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\r\n            A.pop();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Removes specified index from array\r\n    * @param A The input array to search\r\n    * @param index The index to remove\r\n    * @return Returns the new array and the removed entry\r\n    */\r\n    function pop(address[] memory A, uint256 index)\r\n        internal\r\n        pure\r\n        returns (address[] memory, address)\r\n    {\r\n        uint256 length = A.length;\r\n        require(index < A.length, \"Index must be < A length\");\r\n        address[] memory newAddresses = new address[](length - 1);\r\n        for (uint256 i = 0; i < index; i++) {\r\n            newAddresses[i] = A[i];\r\n        }\r\n        for (uint256 j = index + 1; j < length; j++) {\r\n            newAddresses[j - 1] = A[j];\r\n        }\r\n        return (newAddresses, A[index]);\r\n    }\r\n\r\n    /**\r\n     * Returns the combination of the two arrays\r\n     * @param A The first array\r\n     * @param B The second array\r\n     * @return Returns A extended by B\r\n     */\r\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\r\n        uint256 aLength = A.length;\r\n        uint256 bLength = B.length;\r\n        address[] memory newAddresses = new address[](aLength + bLength);\r\n        for (uint256 i = 0; i < aLength; i++) {\r\n            newAddresses[i] = A[i];\r\n        }\r\n        for (uint256 j = 0; j < bLength; j++) {\r\n            newAddresses[aLength + j] = B[j];\r\n        }\r\n        return newAddresses;\r\n    }\r\n\r\n    /**\r\n     * Validate that address and uint array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of uint\r\n     */\r\n    function validatePairsWithArray(address[] memory A, uint[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address and bool array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of bool\r\n     */\r\n    function validatePairsWithArray(address[] memory A, bool[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address and string array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of strings\r\n     */\r\n    function validatePairsWithArray(address[] memory A, string[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address array lengths match, and calling address array are not empty\r\n     * and contain no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of addresses\r\n     */\r\n    function validatePairsWithArray(address[] memory A, address[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address and bytes array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of bytes\r\n     */\r\n    function validatePairsWithArray(address[] memory A, bytes[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate address array is not empty and contains no duplicate elements.\r\n     *\r\n     * @param A          Array of addresses\r\n     */\r\n    function _validateLengthAndUniqueness(address[] memory A) internal pure {\r\n        require(A.length > 0, \"Array length must be > 0\");\r\n        require(!hasDuplicate(A), \"Cannot duplicate addresses\");\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IWETH.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @title IWETH\r\n * @author Prophecy\r\n *\r\n * Interface for Wrapped Ether. This interface allows for interaction for wrapped ether's deposit and withdrawal\r\n * functionality.\r\n */\r\ninterface IWETH is IERC20{\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IController.sol\r\n\r\n// pragma solidity ^0.6.10;\r\n\r\n/**\r\n * @title IController\r\n * @author Prophecy\r\n */\r\ninterface IController {\r\n    /**\r\n     * Return WETH address.\r\n     */\r\n    function getWeth() external view returns (address);\r\n\r\n    /**\r\n     * Getter for chanceToken\r\n     */\r\n    function getChanceToken() external view returns (address);\r\n\r\n    /**\r\n     * Return VRF Key Hash.\r\n     */\r\n    function getVrfKeyHash() external view returns (bytes32);\r\n\r\n    /**\r\n     * Return VRF Fee.\r\n     */\r\n    function getVrfFee() external view returns (uint256);\r\n\r\n    /**\r\n     * Return Link Token address for VRF.\r\n     */\r\n    function getLinkToken() external view returns (address);\r\n\r\n    /**\r\n     * Return VRF coordinator.\r\n     */\r\n    function getVrfCoordinator() external view returns (address);\r\n\r\n    /**\r\n     * Return all pools addreses\r\n     */\r\n    function getAllPools() external view returns (address[] memory);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IChanceToken.sol\r\n\r\n// pragma solidity ^0.6.10;\r\n\r\n/**\r\n * @title IChanceToken\r\n * @author Prophecy\r\n *\r\n * Interface for ChanceToken\r\n */\r\ninterface IChanceToken {\r\n    /**\r\n     * OWNER ALLOWED MINTER: Mint NFT\r\n     */\r\n    function mint(address _account, uint256 _id, uint256 _amount) external;\r\n\r\n    /**\r\n     * OWNER ALLOWED BURNER: Burn NFT\r\n     */\r\n    function burn(address _account, uint256 _id, uint256 _amount) external;\r\n}\r\n\r\n\r\n// Root file: contracts/ProphetPool.sol\r\n\r\npragma solidity ^0.6.10;\r\npragma experimental ABIEncoderV2;\r\n\r\n// import { VRFConsumerBase } from \"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\";\r\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n// import { Uint256ArrayUtils } from \"contracts/lib/Uint256ArrayUtils.sol\";\r\n// import { AddressArrayUtils } from \"contracts/lib/AddressArrayUtils.sol\";\r\n// import { IWETH } from \"contracts/interfaces/IWETH.sol\";\r\n// import { IController } from \"contracts/interfaces/IController.sol\";\r\n// import { IChanceToken } from \"contracts/interfaces/IChanceToken.sol\";\r\n\r\n/**\r\n * @title ProphetPool\r\n * @author Prophecy\r\n *\r\n * Smart contract that facilitates that draws lucky winners in the pool and distribute rewards to the winners.\r\n * It should be whitelisted for the mintable role for ChanceToken(ERC1155)\r\n */\r\ncontract ProphetPool is VRFConsumerBase, Ownable {\r\n    using Uint256ArrayUtils for uint256[];\r\n    using AddressArrayUtils for address[];\r\n\r\n    /* ============ Structs ============ */\r\n\r\n    struct PoolConfig {\r\n        uint256 numOfWinners;\r\n        uint256 participantLimit;\r\n        uint256 enterAmount;\r\n        uint256 feePercentage;\r\n        uint256 randomSeed;\r\n        uint256 startedAt;\r\n    }\r\n\r\n    /* ============ Enums ============ */\r\n\r\n    enum PoolStatus { NOTSTARTED, INPROGRESS, CLOSED }\r\n\r\n    /* ============ Events ============ */\r\n\r\n    event FeeRecipientSet(address indexed _feeRecipient);\r\n    event MaxParticipationCompleted(address indexed _from);\r\n    event RandomNumberGenerated(uint256 indexed randomness);\r\n    event WinnersGenerated(uint256[] winnerIndexes);\r\n    event PoolSettled();\r\n    event PoolStarted(\r\n        uint256 participantLimit,\r\n        uint256 numOfWinners,\r\n        uint256 enterAmount,\r\n        uint256 feePercentage,\r\n        uint256 startedAt\r\n    );\r\n    event PoolReset();\r\n    event EnteredPool(address indexed _participant, uint256 _amount, uint256 indexed _participantIndex);\r\n\r\n    /* ============ State Variables ============ */\r\n\r\n    IController private controller;\r\n    address private feeRecipient;\r\n    string private poolName;\r\n    IERC20 private enterToken;\r\n    PoolStatus private poolStatus;\r\n    PoolConfig private poolConfig;\r\n    uint256 private chanceTokenId;\r\n\r\n    address[] private participants;\r\n    uint256[] private winnerIndexes;\r\n    uint256 private totalEnteredAmount;\r\n    uint256 private rewardPerParticipant;\r\n\r\n    bool internal isRNDGenerated;\r\n    uint256 internal randomResult;\r\n    bool internal areWinnersGenerated;\r\n\r\n    /* ============ Modifiers ============ */\r\n\r\n    modifier onlyValidPool() {\r\n        require(participants.length < poolConfig.participantLimit, \"exceed max\");\r\n        require(poolStatus == PoolStatus.INPROGRESS, \"in progress\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyEOA() {\r\n        require(tx.origin == msg.sender, \"should be EOA\");\r\n        _;\r\n    }\r\n\r\n    /* ============ Constructor ============ */\r\n\r\n    /**\r\n     * Create the ProphetPool with Chainlink VRF configuration for Random number generation.\r\n     *\r\n     * @param _poolName             Pool name\r\n     * @param _enterToken           ERC20 token to enter the pool. If it's ETH pool, it should be WETH address\r\n     * @param _controller           Controller\r\n     * @param _feeRecipient         Where the fee go\r\n     * @param _chanceTokenId        ERC1155 Token id for chance token\r\n     */\r\n    constructor(\r\n        string memory _poolName,\r\n        address _enterToken,\r\n        address _controller,\r\n        address _feeRecipient,\r\n        uint256 _chanceTokenId\r\n    )\r\n        public\r\n        VRFConsumerBase(IController(_controller).getVrfCoordinator(), IController(_controller).getLinkToken())\r\n    {\r\n        poolName = _poolName;\r\n        enterToken = IERC20(_enterToken);\r\n        controller = IController(_controller);\r\n        feeRecipient = _feeRecipient;\r\n        chanceTokenId = _chanceTokenId;\r\n\r\n        poolStatus = PoolStatus.NOTSTARTED;\r\n    }\r\n\r\n    /* ============ External/Public Functions ============ */\r\n\r\n    /**\r\n     * Set the Pool Config, initializes an instance of and start the pool.\r\n     *\r\n     * @param _numOfWinners         Number of winners in the pool\r\n     * @param _participantLimit     Maximum number of paricipants\r\n     * @param _enterAmount          Exact amount to enter this pool\r\n     * @param _feePercentage        Manager fee of this pool\r\n     * @param _randomSeed           Seed for Random Number Generation\r\n     */\r\n    function setPoolRules(\r\n        uint256 _numOfWinners,\r\n        uint256 _participantLimit,\r\n        uint256 _enterAmount,\r\n        uint256 _feePercentage,\r\n        uint256 _randomSeed\r\n    ) external onlyOwner {\r\n        require(poolStatus == PoolStatus.NOTSTARTED, \"in progress\");\r\n        require(_numOfWinners != 0, \"invalid numOfWinners\");\r\n        require(_numOfWinners < _participantLimit, \"too much numOfWinners\");\r\n\r\n        poolConfig = PoolConfig(\r\n            _numOfWinners,\r\n            _participantLimit,\r\n            _enterAmount,\r\n            _feePercentage,\r\n            _randomSeed,\r\n            block.timestamp\r\n        );\r\n        poolStatus = PoolStatus.INPROGRESS;\r\n        emit PoolStarted(\r\n            _participantLimit,\r\n            _numOfWinners,\r\n            _enterAmount,\r\n            _feePercentage,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Set the Pool Config, initializes an instance of and start the pool.\r\n     *\r\n     * @param _feeRecipient         Number of winners in the pool\r\n     */\r\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\r\n        require(_feeRecipient != address(0), \"invalid address\");\r\n        feeRecipient = _feeRecipient;\r\n\r\n        emit FeeRecipientSet(feeRecipient);\r\n    }\r\n\r\n    /**\r\n     * Enter pool with ETH\r\n     */\r\n    function enterPoolEth() external payable onlyValidPool onlyEOA returns (uint256) {\r\n        require(msg.value == poolConfig.enterAmount, \"insufficient amount\");\r\n        if (!_isEthPool()) {\r\n            revert(\"not accept ETH\");\r\n        }\r\n        // wrap ETH to WETH\r\n        IWETH(controller.getWeth()).deposit{ value: msg.value }();\r\n\r\n        return _enterPool();\r\n    }\r\n\r\n    /**\r\n     * Enter pool with ERC20 token\r\n     */\r\n    function enterPool() external onlyValidPool onlyEOA returns (uint256) {\r\n        enterToken.transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                poolConfig.enterAmount\r\n            );\r\n\r\n        return _enterPool();\r\n    }\r\n\r\n    /**\r\n     * Settle the pool, the winners are selected randomly and fee is transfer to the manager.\r\n     */\r\n    function settlePool() external {\r\n        require(isRNDGenerated, \"RND in progress\");\r\n        require(poolStatus == PoolStatus.INPROGRESS, \"pool in progress\");\r\n\r\n        // generate winnerIndexes until the numOfWinners reach\r\n        uint256 newRandom = randomResult;\r\n        uint256 offset = 0;\r\n        while(winnerIndexes.length < poolConfig.numOfWinners) {\r\n            uint256 winningIndex = newRandom.mod(poolConfig.participantLimit);\r\n            if (!winnerIndexes.contains(winningIndex)) {\r\n                winnerIndexes.push(winningIndex);\r\n            }\r\n            offset = offset.add(1);\r\n            newRandom = _getRandomNumberBlockchain(offset, newRandom);\r\n        }\r\n        areWinnersGenerated = true;\r\n        emit WinnersGenerated(winnerIndexes);\r\n\r\n        // set pool CLOSED status\r\n        poolStatus = PoolStatus.CLOSED;\r\n\r\n        // transfer fees\r\n        uint256 feeAmount = totalEnteredAmount.mul(poolConfig.feePercentage).div(100);\r\n        rewardPerParticipant = (totalEnteredAmount.sub(feeAmount)).div(poolConfig.numOfWinners);\r\n        _transferEnterToken(feeRecipient, feeAmount);\r\n\r\n        // collectRewards();\r\n        emit PoolSettled();\r\n    }\r\n\r\n    /**\r\n     * The winners of the pool can call this function to transfer their winnings\r\n     * from the pool contract to their own address.\r\n     */\r\n    function collectRewards() external {\r\n        require(poolStatus == PoolStatus.CLOSED, \"not settled\");\r\n\r\n        for (uint256 i = 0; i < poolConfig.participantLimit; i = i.add(1)) {\r\n            address player = participants[i];\r\n            if (winnerIndexes.contains(i)) {\r\n                // if winner\r\n                _transferEnterToken(player, rewardPerParticipant);\r\n            } else {\r\n                // if loser\r\n                IChanceToken(controller.getChanceToken()).mint(player, chanceTokenId, 1);\r\n            }\r\n        }\r\n        _resetPool();\r\n    }\r\n\r\n    /**\r\n     * The contract will receive Ether\r\n     */\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * Getter for controller\r\n     */\r\n    function getController() external view returns (address) {\r\n        return address(controller);\r\n    }\r\n\r\n    /**\r\n     * Getter for fee recipient\r\n     */\r\n    function getFeeRecipient() external view returns (address) {\r\n        return feeRecipient;\r\n    }\r\n\r\n    /**\r\n     * Getter for poolName\r\n     */\r\n    function getPoolName() external view returns (string memory) {\r\n        return poolName;\r\n    }\r\n\r\n    /**\r\n     * Getter for enterToken\r\n     */\r\n    function getEnterToken() external view returns (address) {\r\n        return address(enterToken);\r\n    }\r\n\r\n    /**\r\n     * Getter for chanceTokenId\r\n     */\r\n    function getChanceTokenId() external view returns (uint256) {\r\n        return chanceTokenId;\r\n    }\r\n\r\n    /**\r\n     * Getter for poolStatus\r\n     */\r\n    function getPoolStatus() external view returns (PoolStatus) {\r\n        return poolStatus;\r\n    }\r\n\r\n    /**\r\n     * Getter for poolConfig\r\n     */\r\n    function getPoolConfig() external view returns (PoolConfig memory) {\r\n        return poolConfig;\r\n    }\r\n\r\n    /**\r\n     * Getter for totalEnteredAmount\r\n     */\r\n    function getTotalEnteredAmount() external view returns (uint256) {\r\n        return totalEnteredAmount;\r\n    }\r\n\r\n    /**\r\n     * Getter for rewardPerParticipant\r\n     */\r\n    function getRewardPerParticipant() external view returns (uint256) {\r\n        return rewardPerParticipant;\r\n    }\r\n\r\n    /**\r\n     * Get all participants\r\n     */\r\n    function getParticipants() external view returns(address[] memory) {\r\n        return participants;\r\n    }\r\n\r\n    /**\r\n     * Get one participant by index\r\n     * @param _index                 Index of the participants array\r\n     */\r\n    function getParticipant(uint256 _index) external view returns(address) {\r\n        return participants[_index];\r\n    }\r\n\r\n    /**\r\n     * Getter for winnerIndexes\r\n     */\r\n    function getWinnerIndexes() external view returns(uint256[] memory) {\r\n        return winnerIndexes;\r\n    }\r\n\r\n    /**\r\n     * Get if the account is winner\r\n     */\r\n    function isWinner(address _account) external view returns(bool) {\r\n        (uint256 index, bool isExist) = participants.indexOf(_account);\r\n        if (isExist) {\r\n            return winnerIndexes.contains(index);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* ============ Private/Internal Functions ============ */\r\n\r\n    /**\r\n     * Participant enters the pool and enter amount is transferred from the user to the pool.\r\n     */\r\n    function _enterPool() internal returns(uint256 _participantIndex) {\r\n        participants.push(msg.sender);\r\n\r\n        totalEnteredAmount = totalEnteredAmount.add(poolConfig.enterAmount);\r\n\r\n        if (participants.length == poolConfig.participantLimit) {\r\n            emit MaxParticipationCompleted(msg.sender);\r\n            _getRandomNumber(poolConfig.randomSeed);\r\n        }\r\n\r\n        _participantIndex = (participants.length).sub(1);\r\n        emit EnteredPool(msg.sender, poolConfig.enterAmount, _participantIndex);\r\n    }\r\n\r\n    /**\r\n     * Reset the pool, clears the existing state variable values and the pool can be initialized again.\r\n     */\r\n    function _resetPool() internal {\r\n        poolStatus = PoolStatus.INPROGRESS;\r\n        delete totalEnteredAmount;\r\n        delete rewardPerParticipant;\r\n        isRNDGenerated = false;\r\n        randomResult = 0;\r\n        areWinnersGenerated = false;\r\n        delete winnerIndexes;\r\n        delete participants;\r\n        emit PoolReset();\r\n\r\n        uint256 tokenBalance = enterToken.balanceOf(address(this));\r\n        if (tokenBalance > 0) {\r\n            _transferEnterToken(feeRecipient, tokenBalance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transfer enterToken even it's ETH or ERC20.\r\n     *\r\n     * @param _to                   Offset to generate the random number\r\n     * @param _amount               Random number to generate the other random number\r\n     */\r\n    function _transferEnterToken(address _to, uint256 _amount) internal {\r\n        if (_isEthPool()) {\r\n            IWETH(controller.getWeth()).withdraw(_amount);\r\n            (bool status, ) = payable(_to).call{value: _amount}(\"\");\r\n            require(status, \"ETH not transferred\");\r\n        } else {\r\n            enterToken.transfer(address(_to), _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check pool is ETH pool or not\r\n     */\r\n    function _isEthPool() internal view returns (bool) {\r\n        return address(enterToken) == controller.getWeth();\r\n    }\r\n\r\n    /**\r\n     * Generate a random number based on the blockHash and random offset\r\n     *\r\n     * @param _offset               Offset to generate the random number\r\n     * @param _randomness           Random number to generate the other random number\r\n     */\r\n    function _getRandomNumberBlockchain(uint256 _offset, uint256 _randomness)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        bytes32 baseHash = keccak256(\r\n            abi.encodePacked(\r\n                blockhash(block.number),\r\n                bytes32(_offset),\r\n                bytes32(_randomness)\r\n            )\r\n        );\r\n        return uint256(baseHash);\r\n    }\r\n\r\n    /**\r\n     * Calls ChainLink Oracle's inherited function for Random Number Generation.\r\n     * The contract must have enough LINK required for VRF.\r\n     *\r\n     * @param _userProvidedSeed     Seed to generate the random number\r\n     */\r\n    function _getRandomNumber(uint256 _userProvidedSeed)\r\n        internal\r\n        returns (bytes32 requestId)\r\n    {\r\n        require(\r\n            IERC20(controller.getLinkToken()).balanceOf(address(this)) >= controller.getVrfFee(),\r\n            \"not enough LINK\"\r\n        );\r\n        randomResult = 0;\r\n        isRNDGenerated = false;\r\n        return\r\n            requestRandomness(\r\n                controller.getVrfKeyHash(),\r\n                controller.getVrfFee(),\r\n                _userProvidedSeed\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Callback function used by VRF Coordinator.\r\n     *\r\n     * @param _randomness     Generated random number\r\n     */\r\n    function fulfillRandomness(bytes32, uint256 _randomness) internal override {\r\n        randomResult = _randomness;\r\n        isRNDGenerated = true;\r\n        emit RandomNumberGenerated(_randomness);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_enterToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chanceTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_participantIndex\",\"type\":\"uint256\"}],\"name\":\"EnteredPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"MaxParticipationCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"participantLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numOfWinners\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"enterAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"PoolStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"RandomNumberGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"winnerIndexes\",\"type\":\"uint256[]\"}],\"name\":\"WinnersGenerated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collectRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterPoolEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChanceTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEnterToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getParticipant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"numOfWinners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participantLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enterAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct ProphetPool.PoolConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolStatus\",\"outputs\":[{\"internalType\":\"enum ProphetPool.PoolStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPerParticipant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalEnteredAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinnerIndexes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numOfWinners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_participantLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_enterAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_randomSeed\",\"type\":\"uint256\"}],\"name\":\"setPoolRules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ProphetPool","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000004f1021377c1bdd18d4c5d9e676a2e215bb682fa200000000000000000000000002f019c9d9bd71f684ecd1885af540fdb3e508f10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001845544820506c656269616e204865616420746f20486561640000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f97d96a7c3353606b5d5deba704829ebe2b1ac99b32523c6355674b3e0ae90b5"}]}