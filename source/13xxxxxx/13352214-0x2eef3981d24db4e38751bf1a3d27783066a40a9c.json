{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Create3.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n\\ncontract Create3 {\\n  error ErrorCreatingContract();\\n\\n  function bytecode() private view returns (bytes memory) {\\n    /*\\n      3D RETURNDATASIZE (0) // retLength = 0\\n      80 DUP1               // retOffset = 0\\n      80 DUP1               // argsLength = 0\\n      80 DUP1               // argsOffset = 0\\n      80 DUP1               // value = 0\\n      73 PUSH20 <self>      // to = address(this)\\n      80 DUP1               // gas = address(this)\\n      F1 CALL               // call address(this) from init code\\n      3D RETURNDATASIZE     // code size\\n      60 PUSH1 00           // offset\\n      80 DUP1               // destOffset\\n      3E RETURNDATACOPY     // copy returned code\\n      3D RETURNDATASIZE     // code size\\n      60 PUSH1 00           // offset\\n      F3 RETURN\\n    */\\n    return abi.encodePacked(\\n      hex\\\"3D_80_80_80_80_73\\\",\\n      address(this),\\n      hex\\\"80_F1_3D_60_00_80_3E_3D_60_00_F3\\\"\\n    );\\n  }\\n  \\n  function create(bytes32 _salt, bytes calldata _code) external payable returns (address addr) {\\n    // Creation code\\n    bytes memory creationCode = bytecode();\\n    \\n    // CREATE2 salt uses msg.sender + provided salt\\n    bytes32 salt = keccak256(abi.encodePacked(msg.sender, _salt));\\n\\n    // Store _code in buffer\\n    assembly {\\n      let codeSize := _code.length\\n\\n      sstore(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, codeSize)\\n      let offSet := _code.offset\\n\\n      for\\n        { let i := 0 }\\n        lt(i, codeSize)\\n        { i := add(i, 0x20) }\\n      {\\n        sstore(i, calldataload(add(offSet, i)))\\n      }\\n\\n      // Call CREATE2 contract\\n      addr := create2(callvalue(), add(creationCode, 32), mload(creationCode), salt)\\n    }\\n\\n    if (addr == address(0)) revert ErrorCreatingContract();\\n  }\\n  \\n  function addressOf(address _sender, bytes32 _salt) external view returns (address) {\\n    return address(\\n      uint160(\\n        uint256(\\n          keccak256(\\n            abi.encodePacked(\\n              hex'ff',\\n              address(this),\\n              keccak256(abi.encodePacked(_sender, _salt)),\\n              keccak256(bytecode())\\n            )\\n          )\\n        )\\n      )\\n    );\\n  }\\n\\n  fallback() external {\\n    assembly {\\n      // Consume buffer\\n      let size := sload(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n      sstore(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, 0)\\n\\n      for\\n        { let i := 0 }\\n        lt(i, size)\\n        { i := add(i, 0x20) }\\n      {\\n        mstore(i, sload(i))\\n        sstore(i, 0)\\n      }\\n  \\n      return(0, size)\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"ErrorCreatingContract\",\"type\":\"error\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"addressOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_code\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"Create3","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}