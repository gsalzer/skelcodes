{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Palette.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\n\\nimport './RandomColor.sol';\\nimport './utils/Base64.sol';\\nimport './IPalette.sol';\\nimport './opensea/BaseOpensea.sol';\\nimport './@rarible/royalties/contracts/impl/RoyaltiesV2Impl.sol';\\nimport './@rarible/royalties/contracts/LibPart.sol';\\nimport './@rarible/royalties/contracts/LibRoyaltiesV2.sol';\\n\\ncontract Palette is\\n  IPalette,\\n  RandomColor,\\n  ReentrancyGuard,\\n  Ownable,\\n  ERC721,\\n  BaseOpenSea,\\n  RoyaltiesV2Impl\\n{\\n  using Strings for uint256;\\n  using Counters for Counters.Counter;\\n\\n  uint256 public MAX_SUPPLY;\\n  bool public FAIR_MINT;\\n  uint96 public ROYALTY = 1000; // 10%\\n\\n  Counters.Counter private _totalSupply;\\n  mapping(address => bool) private _minters;\\n  bytes32 private _lastSeed;\\n  mapping(uint256 => bytes32[]) private _tokenSeeds;\\n  bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n\\n  constructor(\\n    uint256 maxSupply,\\n    bool fairMint,\\n    address owner,\\n    address openSeaProxyRegistry\\n  ) ERC721('PaletteOnChain', 'PALETTE') Ownable() {\\n    MAX_SUPPLY = maxSupply;\\n    FAIR_MINT = fairMint;\\n\\n    if (owner != _msgSender()) {\\n      transferOwnership(owner);\\n    }\\n\\n    if (openSeaProxyRegistry != address(0)) {\\n      _setOpenSeaRegistry(openSeaProxyRegistry);\\n    }\\n  }\\n\\n  function totalSupply() external view override returns (uint256) {\\n    return _totalSupply.current();\\n  }\\n\\n  function remainingSupply() external view override returns (uint256) {\\n    return MAX_SUPPLY - _totalSupply.current();\\n  }\\n\\n  function mint() external override nonReentrant {\\n    require(_totalSupply.current() < MAX_SUPPLY, 'Mint would exceed max supply');\\n\\n    address operator = _msgSender();\\n    if (FAIR_MINT) {\\n      require(!_minters[operator], 'Mint only once');\\n    }\\n\\n    _minters[operator] = true;\\n\\n    bytes32 seed = _lastSeed;\\n    bytes32 blockHash = blockhash(block.number - 1);\\n    uint256 timestamp = block.timestamp;\\n\\n    uint256 paletteCount = 5;\\n    bytes32[] memory seeds = new bytes32[](paletteCount);\\n    for (uint256 i = 0; i < paletteCount; i++) {\\n      seed = _nextSeed(seed, timestamp, operator, blockHash);\\n      seeds[i] = seed;\\n    }\\n    _lastSeed = seed;\\n\\n    _totalSupply.increment();\\n    uint256 tokenId = _totalSupply.current();\\n\\n    _tokenSeeds[tokenId] = seeds;\\n    _safeMint(operator, tokenId);\\n    _setRoyalties(tokenId, payable(owner()), ROYALTY);\\n  }\\n\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');\\n\\n    string[5] memory palette = _getPalette(tokenId);\\n\\n    string[8] memory parts;\\n    string[5] memory attributeParts;\\n\\n    parts[\\n      0\\n    ] = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" width=\\\"800\\\" height=\\\"800\\\" viewBox=\\\"0 0 10 10\\\"><g transform=\\\"rotate(-90 5 5)\\\">';\\n\\n    for (uint256 i = 0; i < palette.length; i++) {\\n      parts[i + 1] = string(\\n        abi.encodePacked(\\n          '<rect x=\\\"0\\\" y=\\\"',\\n          (i * 2).toString(),\\n          '\\\" width=\\\"10\\\" height=\\\"2\\\" fill=\\\"',\\n          palette[i],\\n          '\\\" />'\\n        )\\n      );\\n\\n      attributeParts[i] = string(\\n        abi.encodePacked(\\n          '{\\\"trait_type\\\": \\\"Color',\\n          (i + 1).toString(),\\n          '\\\", \\\"value\\\": \\\"',\\n          palette[i],\\n          '\\\"}',\\n          i + 1 == palette.length ? '' : ', '\\n        )\\n      );\\n    }\\n\\n    parts[7] = '</g></svg>';\\n\\n    string memory output = string(\\n      abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4])\\n    );\\n    output = string(abi.encodePacked(output, parts[5], parts[6], parts[7]));\\n\\n    string memory attributes = string(\\n      abi.encodePacked(\\n        attributeParts[0],\\n        attributeParts[1],\\n        attributeParts[2],\\n        attributeParts[3],\\n        attributeParts[4]\\n      )\\n    );\\n\\n    string memory json = Base64.encode(\\n      bytes(\\n        string(\\n          abi.encodePacked(\\n            '{\\\"name\\\": \\\"Palette #',\\n            tokenId.toString(),\\n            '\\\", \\\"description\\\": \\\"PaletteOnChain is randomly generated color palette and stored on chain. This palette can be used as a color base by others to create new collectable art.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n            Base64.encode(bytes(output)),\\n            '\\\", \\\"attributes\\\": [',\\n            attributes,\\n            '], \\\"license\\\": { \\\"type\\\": \\\"CC0\\\", \\\"url\\\": \\\"https://creativecommons.org/publicdomain/zero/1.0/\\\" }}'\\n          )\\n        )\\n      )\\n    );\\n    output = string(abi.encodePacked('data:application/json;base64,', json));\\n\\n    return output;\\n  }\\n\\n  function getRandomColorCode(uint256 seed) external view override returns (string memory) {\\n    return _getColorCode(uint256(seed));\\n  }\\n\\n  function getColorCodeFromHSV(\\n    uint256 hue,\\n    uint256 saturation,\\n    uint256 brightness\\n  ) external pure override returns (string memory) {\\n    return _getColorCode(hue, saturation, brightness);\\n  }\\n\\n  function getPalette(uint256 tokenId) external view override returns (string[5] memory) {\\n    return _getPalette(tokenId);\\n  }\\n\\n  function _getPalette(uint256 tokenId) private view returns (string[5] memory) {\\n    require(_exists(tokenId), 'getPalette query for nonexistent token');\\n\\n    bytes32[] memory seeds = _tokenSeeds[tokenId];\\n\\n    string[5] memory palette;\\n\\n    for (uint256 i = 0; i < seeds.length; i++) {\\n      palette[i] = _getColorCode(uint256(seeds[i]));\\n    }\\n\\n    return palette;\\n  }\\n\\n  function _nextSeed(\\n    bytes32 currentSeed,\\n    uint256 timestamp,\\n    address operator,\\n    bytes32 blockHash\\n  ) private view returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encodePacked(\\n          currentSeed,\\n          timestamp,\\n          operator,\\n          blockHash,\\n          block.coinbase,\\n          block.difficulty,\\n          tx.gasprice\\n        )\\n      );\\n  }\\n\\n  /// @notice Allows gas-less trading on OpenSea by safelisting the Proxy of the user\\n  /// @dev Override isApprovedForAll to check first if current operator is owner's OpenSea proxy\\n  /// @inheritdoc\\tERC721\\n  function isApprovedForAll(address owner, address operator)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    // allows gas less trading on OpenSea\\n    if (isOwnersOpenSeaProxy(owner, operator)) {\\n      return true;\\n    }\\n\\n    return super.isApprovedForAll(owner, operator);\\n  }\\n\\n  function _setRoyalties(\\n    uint256 _tokenId,\\n    address payable _royaltiesReceipientAddress,\\n    uint96 _percentageBasisPoints\\n  ) private {\\n    LibPart.Part[] memory _royalties = new LibPart.Part[](1);\\n    _royalties[0].value = _percentageBasisPoints;\\n    _royalties[0].account = _royaltiesReceipientAddress;\\n    _saveRoyalties(_tokenId, _royalties);\\n  }\\n\\n  function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n    external\\n    view\\n    returns (address receiver, uint256 royaltyAmount)\\n  {\\n    LibPart.Part[] memory _royalties = royalties[_tokenId];\\n    if (_royalties.length > 0) {\\n      return (_royalties[0].account, (_salePrice * _royalties[0].value) / 10000);\\n    }\\n    return (address(0), 0);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC721)\\n    returns (bool)\\n  {\\n    if (interfaceId == LibRoyaltiesV2._INTERFACE_ID_ROYALTIES) {\\n      return true;\\n    }\\n    if (interfaceId == _INTERFACE_ID_ERC2981) {\\n      return true;\\n    }\\n    return super.supportsInterface(interfaceId);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/RandomColor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n//inspired by David Merfield's randomColor.js\\n//https://github.com/davidmerfield/randomColor\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport {ColorStrings} from './utils/ColorStrings.sol';\\nimport './utils/Randomize.sol';\\n\\nabstract contract RandomColor {\\n  using Strings for uint256;\\n  using ColorStrings for uint256;\\n  using Randomize for Randomize.Random;\\n\\n  struct HueRange {\\n    string _name;\\n    uint256 _min;\\n    uint256 _max;\\n  }\\n\\n  struct Range {\\n    uint256 _min;\\n    uint256 _max;\\n  }\\n\\n  struct LowerBound {\\n    uint256 _saturation;\\n    uint256 _brightness;\\n  }\\n\\n  HueRange[] private _hueRanges;\\n\\n  mapping(string => LowerBound[]) private _lowerBounds;\\n  mapping(string => Range) private _saturationRanges;\\n  mapping(string => Range) private _brightnessRanges;\\n\\n  constructor() {\\n    _hueRangeSetup();\\n    _lowerBoundMapping();\\n    _saturationRangeMapping();\\n    _brightnessRangeMapping();\\n  }\\n\\n  function _hueRangeSetup() private {\\n    _hueRanges.push(HueRange('red', 0, 18));\\n    _hueRanges.push(HueRange('orange', 18, 46));\\n    _hueRanges.push(HueRange('yellow', 46, 62));\\n    _hueRanges.push(HueRange('green', 62, 178));\\n    _hueRanges.push(HueRange('blue', 178, 257));\\n    _hueRanges.push(HueRange('purple', 257, 282));\\n    _hueRanges.push(HueRange('pink', 282, 334));\\n  }\\n\\n  function _lowerBoundMapping() private {\\n    _lowerBounds['red'].push(LowerBound(20, 100));\\n    _lowerBounds['red'].push(LowerBound(30, 92));\\n    _lowerBounds['red'].push(LowerBound(40, 89));\\n    _lowerBounds['red'].push(LowerBound(50, 85));\\n    _lowerBounds['red'].push(LowerBound(60, 78));\\n    _lowerBounds['red'].push(LowerBound(70, 70));\\n    _lowerBounds['red'].push(LowerBound(80, 60));\\n    _lowerBounds['red'].push(LowerBound(90, 55));\\n    _lowerBounds['red'].push(LowerBound(100, 50));\\n\\n    _lowerBounds['orange'].push(LowerBound(20, 100));\\n    _lowerBounds['orange'].push(LowerBound(30, 93));\\n    _lowerBounds['orange'].push(LowerBound(40, 88));\\n    _lowerBounds['orange'].push(LowerBound(50, 86));\\n    _lowerBounds['orange'].push(LowerBound(60, 85));\\n    _lowerBounds['orange'].push(LowerBound(70, 70));\\n    _lowerBounds['orange'].push(LowerBound(100, 70));\\n\\n    _lowerBounds['yellow'].push(LowerBound(25, 100));\\n    _lowerBounds['yellow'].push(LowerBound(40, 94));\\n    _lowerBounds['yellow'].push(LowerBound(50, 89));\\n    _lowerBounds['yellow'].push(LowerBound(60, 86));\\n    _lowerBounds['yellow'].push(LowerBound(70, 84));\\n    _lowerBounds['yellow'].push(LowerBound(80, 82));\\n    _lowerBounds['yellow'].push(LowerBound(90, 80));\\n    _lowerBounds['yellow'].push(LowerBound(100, 75));\\n\\n    _lowerBounds['green'].push(LowerBound(30, 100));\\n    _lowerBounds['green'].push(LowerBound(40, 90));\\n    _lowerBounds['green'].push(LowerBound(50, 85));\\n    _lowerBounds['green'].push(LowerBound(60, 81));\\n    _lowerBounds['green'].push(LowerBound(70, 74));\\n    _lowerBounds['green'].push(LowerBound(80, 64));\\n    _lowerBounds['green'].push(LowerBound(90, 50));\\n    _lowerBounds['green'].push(LowerBound(100, 40));\\n\\n    _lowerBounds['blue'].push(LowerBound(20, 100));\\n    _lowerBounds['blue'].push(LowerBound(30, 86));\\n    _lowerBounds['blue'].push(LowerBound(40, 80));\\n    _lowerBounds['blue'].push(LowerBound(50, 74));\\n    _lowerBounds['blue'].push(LowerBound(60, 60));\\n    _lowerBounds['blue'].push(LowerBound(70, 52));\\n    _lowerBounds['blue'].push(LowerBound(80, 44));\\n    _lowerBounds['blue'].push(LowerBound(90, 39));\\n    _lowerBounds['blue'].push(LowerBound(100, 35));\\n\\n    _lowerBounds['purple'].push(LowerBound(20, 100));\\n    _lowerBounds['purple'].push(LowerBound(30, 87));\\n    _lowerBounds['purple'].push(LowerBound(40, 79));\\n    _lowerBounds['purple'].push(LowerBound(50, 70));\\n    _lowerBounds['purple'].push(LowerBound(60, 65));\\n    _lowerBounds['purple'].push(LowerBound(70, 59));\\n    _lowerBounds['purple'].push(LowerBound(80, 52));\\n    _lowerBounds['purple'].push(LowerBound(90, 45));\\n    _lowerBounds['purple'].push(LowerBound(100, 42));\\n\\n    _lowerBounds['pink'].push(LowerBound(20, 100));\\n    _lowerBounds['pink'].push(LowerBound(30, 90));\\n    _lowerBounds['pink'].push(LowerBound(40, 86));\\n    _lowerBounds['pink'].push(LowerBound(60, 84));\\n    _lowerBounds['pink'].push(LowerBound(80, 80));\\n    _lowerBounds['pink'].push(LowerBound(90, 75));\\n    _lowerBounds['pink'].push(LowerBound(100, 73));\\n  }\\n\\n  function _saturationRangeMapping() private {\\n    _saturationRanges['red'] = Range(20, 100);\\n    _saturationRanges['orange'] = Range(20, 100);\\n    _saturationRanges['yellow'] = Range(25, 100);\\n    _saturationRanges['green'] = Range(30, 100);\\n    _saturationRanges['blue'] = Range(20, 100);\\n    _saturationRanges['purple'] = Range(20, 100);\\n    _saturationRanges['pink'] = Range(30, 100);\\n  }\\n\\n  function _brightnessRangeMapping() private {\\n    _brightnessRanges['red'] = Range(50, 100);\\n    _brightnessRanges['orange'] = Range(70, 100);\\n    _brightnessRanges['yellow'] = Range(75, 100);\\n    _brightnessRanges['green'] = Range(40, 100);\\n    _brightnessRanges['blue'] = Range(35, 100);\\n    _brightnessRanges['purple'] = Range(42, 100);\\n    _brightnessRanges['pink'] = Range(73, 100);\\n  }\\n\\n  function _pickHue(Randomize.Random memory random) private pure returns (uint256) {\\n    return random.next(0, 360);\\n  }\\n\\n  function _pickSaturation(Randomize.Random memory random, uint256 hue)\\n    private\\n    view\\n    returns (uint256)\\n  {\\n    string memory colorName = _getColorName(hue);\\n    require(keccak256(bytes(colorName)) != keccak256(bytes('not_found')), 'Color name not found');\\n\\n    Range memory saturationRange = _saturationRanges[colorName];\\n    return random.next(saturationRange._min, saturationRange._max);\\n  }\\n\\n  function _pickBrightness(\\n    Randomize.Random memory random,\\n    uint256 hue,\\n    uint256 saturation\\n  ) private view returns (uint256) {\\n    string memory colorName = _getColorName(hue);\\n    require(keccak256(bytes(colorName)) != keccak256(bytes('not_found')), 'Color name not found');\\n\\n    uint256 minBrightness = _getMinimumBrightness(hue, saturation);\\n    uint256 maxBrightness = 100;\\n\\n    if (minBrightness == maxBrightness) {\\n      return minBrightness;\\n    }\\n\\n    return random.next(minBrightness, maxBrightness);\\n  }\\n\\n  function _getMinimumBrightness(uint256 hue, uint256 saturation) private view returns (uint256) {\\n    string memory colorName = _getColorName(hue);\\n    require(keccak256(bytes(colorName)) != keccak256(bytes('not_found')), 'Color name not found');\\n\\n    LowerBound[] memory lowerBounds = _lowerBounds[colorName];\\n    uint256 len = lowerBounds.length;\\n    for (uint256 i = 0; i < len - 1; i++) {\\n      uint256 s1 = lowerBounds[i]._saturation;\\n      uint256 v1 = lowerBounds[i]._brightness;\\n\\n      uint256 s2 = lowerBounds[i + 1]._saturation;\\n      uint256 v2 = lowerBounds[i + 1]._brightness;\\n\\n      if (saturation >= s1 && saturation <= s2) {\\n        int256 m = ((int256(v2) - int256(v1)) * 10) / int256(s2 - s1);\\n        int256 b = int256(v1 * 10) - (m * int256(s1));\\n\\n        return uint256((m * int256(saturation) + b) / 10);\\n      }\\n    }\\n    return 0;\\n  }\\n\\n  function _getColorName(uint256 hue) private view returns (string memory) {\\n    if (hue >= 334 && hue <= 360) {\\n      hue = 0;\\n    }\\n\\n    uint256 len = _hueRanges.length;\\n    for (uint256 i = 0; i < len; i++) {\\n      if (hue >= _hueRanges[i]._min && hue <= _hueRanges[i]._max) {\\n        return _hueRanges[i]._name;\\n      }\\n    }\\n    return 'not_found';\\n  }\\n\\n  /// @dev this function is not accurate due to rounding errors, and may have an error of 1 for each value of rgb.\\n  function _hsvToRgb(\\n    uint256 hue,\\n    uint256 saturation,\\n    uint256 value\\n  ) private pure returns (uint256[3] memory) {\\n    if (hue == 0) {\\n      hue = 1;\\n    }\\n    if (hue == 360) {\\n      hue = 359;\\n    }\\n\\n    uint256 multiplier = 10000;\\n    uint256 h = (hue * multiplier) / 360;\\n    uint256 s = (saturation * multiplier) / 100;\\n    uint256 v = (value * multiplier) / 100;\\n\\n    uint256 h_i = (h * 6);\\n    uint256 f = h_i % multiplier;\\n    uint256 p = (v * (1 * multiplier - s)) / multiplier;\\n    uint256 q = (v * (1 * multiplier - ((f * s) / multiplier))) / multiplier;\\n    uint256 t = (v * (1 * multiplier - (((1 * multiplier - f) * s) / multiplier))) / multiplier;\\n    uint256 r = 256;\\n    uint256 g = 256;\\n    uint256 b = 256;\\n\\n    if (h_i < 1 * multiplier) {\\n      r = v;\\n      g = t;\\n      b = p;\\n    } else if (h_i < 2 * multiplier) {\\n      r = q;\\n      g = v;\\n      b = p;\\n    } else if (h_i < 3 * multiplier) {\\n      r = p;\\n      g = v;\\n      b = t;\\n    } else if (h_i < 4 * multiplier) {\\n      r = p;\\n      g = q;\\n      b = v;\\n    } else if (h_i < 5 * multiplier) {\\n      r = t;\\n      g = p;\\n      b = v;\\n    } else if (h_i < 6 * multiplier) {\\n      r = v;\\n      g = p;\\n      b = q;\\n    }\\n\\n    return [(r * 255) / multiplier, (g * 255) / multiplier, (b * 255) / multiplier];\\n  }\\n\\n  function _rgbToHexString(uint256[3] memory rgb) private pure returns (string memory) {\\n    string memory colorCode = string(\\n      abi.encodePacked(\\n        '#',\\n        rgb[0].toHexColorString(),\\n        rgb[1].toHexColorString(),\\n        rgb[2].toHexColorString()\\n      )\\n    );\\n    return colorCode;\\n  }\\n\\n  function _getColorCode(uint256 seed) internal view returns (string memory) {\\n    Randomize.Random memory random = Randomize.Random({seed: seed, offsetBit: 0});\\n    uint256 hue = _pickHue(random);\\n    uint256 saturation = _pickSaturation(random, hue);\\n    uint256 brightness = _pickBrightness(random, hue, saturation);\\n\\n    uint256[3] memory rgb = _hsvToRgb(hue, saturation, brightness);\\n\\n    return _rgbToHexString(rgb);\\n  }\\n\\n  function _getColorCode(\\n    uint256 hue,\\n    uint256 saturation,\\n    uint256 brightness\\n  ) internal pure returns (string memory) {\\n    require(hue <= 360, 'Max hue is 360');\\n    require(saturation <= 100, 'Max saturation is 100');\\n    require(brightness <= 100, 'Max brightness is 100');\\n\\n    uint256[3] memory rgb = _hsvToRgb(hue, saturation, brightness);\\n    return _rgbToHexString(rgb);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// This is a copy of Base64 from LOOT.\\n// https://etherscan.io/address/0xff9c1b15b16263c61d017ee9f65c50e4ae0113d7#code#L1609\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n  bytes internal constant TABLE =\\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n  /// @notice Encodes some bytes to the base64 representation\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    uint256 len = data.length;\\n    if (len == 0) return '';\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n    // Add some extra buffer at the end\\n    bytes memory result = new bytes(encodedLen + 32);\\n\\n    bytes memory table = TABLE;\\n\\n    assembly {\\n      let tablePtr := add(table, 1)\\n      let resultPtr := add(result, 32)\\n\\n      for {\\n        let i := 0\\n      } lt(i, len) {\\n\\n      } {\\n        i := add(i, 3)\\n        let input := and(mload(add(data, i)), 0xffffff)\\n\\n        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n        out := shl(224, out)\\n\\n        mstore(resultPtr, out)\\n\\n        resultPtr := add(resultPtr, 4)\\n      }\\n\\n      switch mod(len, 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n\\n      mstore(result, encodedLen)\\n    }\\n\\n    return string(result);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/IPalette.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IPalette {\\n  /// @dev Returns the total amount of tokens stored by the contract.\\n  function totalSupply() external view returns (uint256);\\n\\n  /// @dev Returns the remaining amount of tokens.\\n  function remainingSupply() external view returns (uint256);\\n\\n  /// @dev Mints new token and transfers it to msgSender.\\n  function mint() external;\\n\\n  /// @dev tokenId is from 1 to MAX_SUPPLY.\\n  function getPalette(uint256 tokenId) external view returns (string[5] memory);\\n\\n  /// @dev specifying a multiple of 16 for seed will change the color code.\\n  function getRandomColorCode(uint256 seed) external view returns (string memory);\\n\\n  /**\\n   * @dev hue: 0 ~ 360\\n   *      saturation: 0 ~ 100\\n   *      brightness: 0 ~ 100\\n   */\\n  function getColorCodeFromHSV(\\n    uint256 hue,\\n    uint256 saturation,\\n    uint256 brightness\\n  ) external pure returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/opensea/BaseOpensea.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// This is a copy of BaseOpenSea.sol.\\n// https://gist.github.com/dievardump/483eb43bc6ed30b14f01e01842e3339b#file-baseopensea-sol\\n\\n/// @title OpenSea contract helper that defines a few things\\n/// @author Simon Fremaux (@dievardump)\\n/// @dev This is a contract used to add OpenSea's\\n///      gas-less trading and contractURI support\\ncontract BaseOpenSea {\\n  string private _contractURI;\\n  address private _proxyRegistry;\\n\\n  /// @notice Returns the contract URI function. Used on OpenSea to get details\\n  //          about a contract (owner, royalties etc...)\\n  function contractURI() public view returns (string memory) {\\n    return _contractURI;\\n  }\\n\\n  /// @notice Returns the current OS proxyRegistry address registered\\n  function proxyRegistry() public view returns (address) {\\n    return _proxyRegistry;\\n  }\\n\\n  /// @notice Helper allowing OpenSea gas-less trading by verifying who's operator\\n  ///         for owner\\n  /// @dev Allows to check if `operator` is owner's OpenSea proxy on eth mainnet / rinkeby\\n  ///      or to check if operator is OpenSea's proxy contract on Polygon and Mumbai\\n  /// @param owner the owner we check for\\n  /// @param operator the operator (proxy) we check for\\n  function isOwnersOpenSeaProxy(address owner, address operator) public view returns (bool) {\\n    address proxyRegistry_ = _proxyRegistry;\\n\\n    // if we have a proxy registry\\n    if (proxyRegistry_ != address(0)) {\\n      // on ethereum mainnet or rinkeby use \\\"ProxyRegistry\\\" to\\n      // get owner's proxy\\n      if (block.chainid == 1 || block.chainid == 4) {\\n        return address(ProxyRegistry(proxyRegistry_).proxies(owner)) == operator;\\n      } else if (block.chainid == 137 || block.chainid == 80001) {\\n        // on Polygon and Mumbai just try with OpenSea's proxy contract\\n        // https://docs.opensea.io/docs/polygon-basic-integration\\n        return proxyRegistry_ == operator;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  /// @dev Internal function to set the _contractURI\\n  /// @param contractURI_ the new contract uri\\n  function _setContractURI(string memory contractURI_) internal {\\n    _contractURI = contractURI_;\\n  }\\n\\n  /// @dev Internal function to set the _proxyRegistry\\n  /// @param proxyRegistryAddress the new proxy registry address\\n  function _setOpenSeaRegistry(address proxyRegistryAddress) internal {\\n    _proxyRegistry = proxyRegistryAddress;\\n  }\\n}\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n  mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\"\r\n    },\r\n    \"contracts/@rarible/royalties/contracts/impl/RoyaltiesV2Impl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport './AbstractRoyalties.sol';\\nimport '../RoyaltiesV2.sol';\\n\\ncontract RoyaltiesV2Impl is AbstractRoyalties, RoyaltiesV2 {\\n  function getRaribleV2Royalties(uint256 id)\\n    external\\n    view\\n    override\\n    returns (LibPart.Part[] memory)\\n  {\\n    return royalties[id];\\n  }\\n\\n  function _onRoyaltiesSet(uint256 _id, LibPart.Part[] memory _royalties) internal override {\\n    emit RoyaltiesSet(_id, _royalties);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/@rarible/royalties/contracts/LibPart.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary LibPart {\\n  bytes32 public constant TYPE_HASH = keccak256('Part(address account,uint96 value)');\\n\\n  struct Part {\\n    address payable account;\\n    uint96 value;\\n  }\\n\\n  function hash(Part memory part) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/@rarible/royalties/contracts/LibRoyaltiesV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary LibRoyaltiesV2 {\\n  /*\\n   * bytes4(keccak256('getRoyalties(LibAsset.AssetType)')) == 0x44c74bcc\\n   */\\n  bytes4 constant _INTERFACE_ID_ROYALTIES = 0x44c74bcc;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ColorStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ColorStrings {\\n  bytes16 private constant _HEX_SYMBOLS = '0123456789abcdef';\\n\\n  function toHexColorString(uint256 value) internal pure returns (string memory) {\\n    if (value == 0) {\\n      return '00';\\n    }\\n    uint256 temp = value;\\n    uint256 length = 0;\\n    while (temp != 0) {\\n      length++;\\n      temp >>= 8;\\n    }\\n    return toHexColorString(value, length);\\n  }\\n\\n  function toHexColorString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    bytes memory buffer = new bytes(2 * length);\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i - 2] = _HEX_SYMBOLS[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, 'Strings: hex length insufficient');\\n    return string(buffer);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Randomize.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// This is a copy of Randomize.sol from SSGS#0.\\n// https://etherscan.io/address/0x5d4683ba64ee6283bb7fdb8a91252f6aab32a110#code#F21#L5\\n\\n// small library to randomize using (min, max, seed, offsetBit etc...)\\nlibrary Randomize {\\n  struct Random {\\n    uint256 seed;\\n    uint256 offsetBit;\\n  }\\n\\n  /// @notice get an random number between (min and max) using seed and offseting bits\\n  ///         this function assumes that max is never bigger than 0xffffff (hex color with opacity included)\\n  /// @dev this function is simply used to get random number using a seed.\\n  ///      if does bitshifting operations to try to reuse the same seed as much as possible.\\n  ///      should be enough for anyth\\n  /// @param random the randomizer\\n  /// @param min the minimum\\n  /// @param max the maximum\\n  /// @return result the resulting pseudo random number\\n  function next(\\n    Random memory random,\\n    uint256 min,\\n    uint256 max\\n  ) internal pure returns (uint256 result) {\\n    uint256 newSeed = random.seed;\\n    uint256 newOffset = random.offsetBit + 3;\\n\\n    uint256 maxOffset = 4;\\n    uint256 mask = 0xf;\\n    if (max > 0xfffff) {\\n      mask = 0xffffff;\\n      maxOffset = 24;\\n    } else if (max > 0xffff) {\\n      mask = 0xfffff;\\n      maxOffset = 20;\\n    } else if (max > 0xfff) {\\n      mask = 0xffff;\\n      maxOffset = 16;\\n    } else if (max > 0xff) {\\n      mask = 0xfff;\\n      maxOffset = 12;\\n    } else if (max > 0xf) {\\n      mask = 0xff;\\n      maxOffset = 8;\\n    }\\n\\n    // if offsetBit is too high to get the max number\\n    // just get new seed and restart offset to 0\\n    if (newOffset > (256 - maxOffset)) {\\n      newOffset = 0;\\n      newSeed = uint256(keccak256(abi.encode(newSeed)));\\n    }\\n\\n    uint256 offseted = (newSeed >> newOffset);\\n    uint256 part = offseted & mask;\\n    result = min + (part % (max - min));\\n\\n    random.seed = newSeed;\\n    random.offsetBit = newOffset;\\n  }\\n\\n  function nextInt(\\n    Random memory random,\\n    uint256 min,\\n    uint256 max\\n  ) internal pure returns (int256 result) {\\n    result = int256(Randomize.next(random, min, max));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/@rarible/royalties/contracts/impl/AbstractRoyalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '../LibPart.sol';\\n\\nabstract contract AbstractRoyalties {\\n  mapping(uint256 => LibPart.Part[]) public royalties;\\n\\n  function _saveRoyalties(uint256 _id, LibPart.Part[] memory _royalties) internal {\\n    for (uint256 i = 0; i < _royalties.length; i++) {\\n      require(_royalties[i].account != address(0x0), 'Recipient should be present');\\n      require(_royalties[i].value != 0, 'Royalty value should be positive');\\n      royalties[_id].push(_royalties[i]);\\n    }\\n    _onRoyaltiesSet(_id, _royalties);\\n  }\\n\\n  function _updateAccount(\\n    uint256 _id,\\n    address _from,\\n    address _to\\n  ) internal {\\n    uint256 length = royalties[_id].length;\\n    for (uint256 i = 0; i < length; i++) {\\n      if (royalties[_id][i].account == _from) {\\n        royalties[_id][i].account = payable(address(uint160(_to)));\\n      }\\n    }\\n  }\\n\\n  function _onRoyaltiesSet(uint256 _id, LibPart.Part[] memory _royalties) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/@rarible/royalties/contracts/RoyaltiesV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport './LibPart.sol';\\n\\ninterface RoyaltiesV2 {\\n  event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalties);\\n\\n  function getRaribleV2Royalties(uint256 id) external view returns (LibPart.Part[] memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fairMint\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"openSeaProxyRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"}],\"name\":\"RoyaltiesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FAIR_MINT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROYALTY\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saturation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"brightness\",\"type\":\"uint256\"}],\"name\":\"getColorCodeFromHSV\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPalette\",\"outputs\":[{\"internalType\":\"string[5]\",\"name\":\"\",\"type\":\"string[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"getRandomColorCode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRaribleV2Royalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isOwnersOpenSeaProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royalties\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Palette","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001ec8dda63735ceb20b7449c44cefdabccc66a49000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c1","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}