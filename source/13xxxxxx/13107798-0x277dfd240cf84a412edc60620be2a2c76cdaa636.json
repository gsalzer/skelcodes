{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract ContractHandshake\r\n{\r\n    address[] private signers;\r\n    mapping(address=>bool) private signatures;\r\n\r\n    string private agreement;\r\n\r\n    event Signature (address _signer);\r\n\r\n    constructor (\r\n        address[] memory _signers,\r\n        string memory _agreement\r\n    ) {\r\n        signers = _signers;\r\n        agreement = _agreement;\r\n    }\r\n\r\n    function sign(\r\n    ) external {\r\n        if (signatures[msg.sender]) {\r\n            revert(\"User already signed\");\r\n        }\r\n\r\n        for(uint index = 0; index < signers.length; index++){\r\n            if(signers[index]==msg.sender){\r\n                signatures[msg.sender] = true;\r\n                emit Signature(msg.sender);\r\n                return;\r\n            }\r\n        }\r\n        revert(\"Can only be called by whitelisted signers\");\r\n    }\r\n\r\n    function hasSigned(address _signer) external view returns (bool) {\r\n        return signatures[_signer];\r\n    }\r\n\r\n    function _signatureCount() internal view returns (uint) {\r\n        uint _count = 0;\r\n        for(uint index = 0; index < signers.length; index++){\r\n            if(signatures[signers[index]]){\r\n                _count++;\r\n            }\r\n        }\r\n        return _count;\r\n    }\r\n\r\n    function allPartiesHaveSigned() external view returns (bool) {\r\n        return _signatureCount() == signers.length;\r\n    }\r\n\r\n    function signatureCount() external view returns (uint) {\r\n        return _signatureCount();\r\n    }\r\n\r\n    function getAgreement() external view returns (string memory) {\r\n        return agreement;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_agreement\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"Signature\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allPartiesHaveSigned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAgreement\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"hasSigned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signatureCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ContractHandshake","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000099f46dfb775b1d0c364b439e6f85bbb26cfea5450000000000000000000000003f433647318b3f704bc4a4125c9c59d69fa12bfc00000000000000000000000000000000000000000000000000000000000002f559756e74204361706974616c206973207472616e7366657272696e67203135302c303030205553444320746f2041706f6c6c6f44616f20666f7220312c3030302c30303020546f6b656e732e202054686520696e766573746d656e74206973206d616465207769746820612046756c6c792044696c757465642056616c7565202846445629206f66202431352c3030302c30303020616e642061204d61726b657420436170206f6620243930302c3030302061742074686520546f6b656e2047656e65726174696e67204576656e742028544745292e59756e74204361706974616c2077696c6c206861766520312f31387468202835352c3535352e35352e2e2e20746f6b656e7329206f662074686520746f74616c20616c6c6f636174656420737570706c7920756e6c6f636b65642061667465722031206d6f6e746820706f73742d5447452e205468652072656d61696e696e672031372f31387468202839342e34342e2e2e25292077696c6c2062652072656c6561736564206c696e6561726c792065616368206d6f6e7468206f7665722074686520666f6c6c6f77696e67203137206d6f6e746873202835352c3535352e35352e2e2e20746f6b656e732072656c656173656420706572206d6f6e746820666f72203136206d6f6e74687320616e642035352c3535352e36352e2e2e20746f6b656e73206f6e20746865203137746820616e642066696e616c206d6f6e7468292e20205768696c652059756e74204361706974616c2063616e6e6f7420776974686472617720756e74696c2074686520726573706563746976652076657374696e6720706572696f64732061726520636f6d706c6574652c20746865792077696c6c20686176652074686520726967687420746f207374616b6520746865736520746f6b656e7320647572696e67207468652076657374696e6720706572696f6420696e207468652041706f6c6c6f44616f2e20205374616b6564207265776172647320617265206e6f7420636f6e73696465726564207665737465642e0000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5aec954015b4a9e69c80b2dfd5b95f740816ef5c7a6abc504b579ebece4e217e"}]}