{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/strategies/DefaultReserveInterestRateStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../interfaces/IReserveRateStrategy.sol';\\nimport '../../tools/math/WadRayMath.sol';\\nimport '../../tools/math/PercentageMath.sol';\\nimport '../../interfaces/IPriceOracleProvider.sol';\\nimport '../../interfaces/ILendingRateOracle.sol';\\nimport '../../dependencies/openzeppelin/contracts/IERC20.sol';\\n\\n/**\\n * @title DefaultReserveInterestRateStrategy contract\\n * @notice Implements the calculation of the interest rates depending on the reserve state\\n * @dev The model of interest rate is based on 2 slopes, one before the `OPTIMAL_UTILIZATION_RATE`\\n * point of utilization and another from that one to 100%\\n **/\\ncontract DefaultReserveInterestRateStrategy is IReserveRateStrategy {\\n  using WadRayMath for uint256;\\n  using PercentageMath for uint256;\\n\\n  /**\\n   * @dev this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates.\\n   * Expressed in ray\\n   **/\\n  // solhint-disable-next-line var-name-mixedcase\\n  uint256 public immutable OPTIMAL_UTILIZATION_RATE;\\n\\n  /**\\n   * @dev This constant represents the excess utilization rate above the optimal. It's always equal to\\n   * 1-optimal utilization rate. Added as a constant here for gas optimizations.\\n   * Expressed in ray\\n   **/\\n  // solhint-disable-next-line var-name-mixedcase\\n  uint256 public immutable EXCESS_UTILIZATION_RATE;\\n\\n  IPriceOracleProvider public immutable addressesProvider;\\n\\n  // Base variable borrow rate when Utilization rate = 0. Expressed in ray\\n  uint256 internal immutable _baseVariableBorrowRate;\\n\\n  // Slope of the variable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n  uint256 internal immutable _variableRateSlope1;\\n\\n  // Slope of the variable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n  uint256 internal immutable _variableRateSlope2;\\n\\n  // Slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n  uint256 internal immutable _stableRateSlope1;\\n\\n  // Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n  uint256 internal immutable _stableRateSlope2;\\n\\n  constructor(\\n    IPriceOracleProvider provider,\\n    uint256 optimalUtilizationRate,\\n    uint256 baseVariableBorrowRate_,\\n    uint256 variableRateSlope1_,\\n    uint256 variableRateSlope2_,\\n    uint256 stableRateSlope1_,\\n    uint256 stableRateSlope2_\\n  ) {\\n    OPTIMAL_UTILIZATION_RATE = optimalUtilizationRate;\\n    EXCESS_UTILIZATION_RATE = WadRayMath.RAY - optimalUtilizationRate;\\n    addressesProvider = provider;\\n    _baseVariableBorrowRate = baseVariableBorrowRate_;\\n    _variableRateSlope1 = variableRateSlope1_;\\n    _variableRateSlope2 = variableRateSlope2_;\\n    _stableRateSlope1 = stableRateSlope1_;\\n    _stableRateSlope2 = stableRateSlope2_;\\n  }\\n\\n  function isDelegatedReserve() external pure override returns (bool) {\\n    return false;\\n  }\\n\\n  function variableRateSlope1() external view returns (uint256) {\\n    return _variableRateSlope1;\\n  }\\n\\n  function variableRateSlope2() external view returns (uint256) {\\n    return _variableRateSlope2;\\n  }\\n\\n  function stableRateSlope1() external view returns (uint256) {\\n    return _stableRateSlope1;\\n  }\\n\\n  function stableRateSlope2() external view returns (uint256) {\\n    return _stableRateSlope2;\\n  }\\n\\n  function baseVariableBorrowRate() external view override returns (uint256) {\\n    return _baseVariableBorrowRate;\\n  }\\n\\n  function getMaxVariableBorrowRate() external view override returns (uint256) {\\n    return _baseVariableBorrowRate + _variableRateSlope1 + _variableRateSlope2;\\n  }\\n\\n  /**\\n   * @dev Calculates the interest rates depending on the reserve's state and configurations\\n   * @param reserve The address of the reserve\\n   * @param liquidityAdded The liquidity added during the operation\\n   * @param liquidityTaken The liquidity taken during the operation\\n   * @param totalStableDebt The total borrowed from the reserve a stable rate\\n   * @param totalVariableDebt The total borrowed from the reserve at a variable rate\\n   * @param averageStableBorrowRate The weighted average of all the stable rate loans\\n   * @param reserveFactor The reserve portion of the interest that goes to the treasury of the market\\n   * @return The liquidity rate, the stable borrow rate and the variable borrow rate\\n   **/\\n  function calculateInterestRates(\\n    address reserve,\\n    address depositToken,\\n    uint256 liquidityAdded,\\n    uint256 liquidityTaken,\\n    uint256 totalStableDebt,\\n    uint256 totalVariableDebt,\\n    uint256 averageStableBorrowRate,\\n    uint256 reserveFactor\\n  )\\n    external\\n    view\\n    override\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    uint256 availableLiquidity = IERC20(reserve).balanceOf(depositToken);\\n    availableLiquidity = (availableLiquidity + liquidityAdded) - liquidityTaken;\\n\\n    return\\n      calculateInterestRates(\\n        reserve,\\n        availableLiquidity,\\n        totalStableDebt,\\n        totalVariableDebt,\\n        averageStableBorrowRate,\\n        reserveFactor\\n      );\\n  }\\n\\n  struct CalcInterestRatesLocalVars {\\n    uint256 totalDebt;\\n    uint256 currentVariableBorrowRate;\\n    uint256 currentStableBorrowRate;\\n    uint256 currentLiquidityRate;\\n    uint256 utilizationRate;\\n  }\\n\\n  /**\\n   * @dev Calculates the interest rates depending on the reserve's state and configurations.\\n   * NOTE This function is kept for compatibility with the previous DefaultInterestRateStrategy interface.\\n   * New protocol implementation uses the new calculateInterestRates() interface\\n   * @param reserve The address of the reserve\\n   * @param availableLiquidity The liquidity available in the corresponding depositToken\\n   * @param totalStableDebt The total borrowed from the reserve a stable rate\\n   * @param totalVariableDebt The total borrowed from the reserve at a variable rate\\n   * @param averageStableBorrowRate The weighted average of all the stable rate loans\\n   * @param reserveFactor The reserve portion of the interest that goes to the treasury of the market\\n   * @return The liquidity rate, the stable borrow rate and the variable borrow rate\\n   **/\\n  function calculateInterestRates(\\n    address reserve,\\n    uint256 availableLiquidity,\\n    uint256 totalStableDebt,\\n    uint256 totalVariableDebt,\\n    uint256 averageStableBorrowRate,\\n    uint256 reserveFactor\\n  )\\n    public\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    CalcInterestRatesLocalVars memory vars;\\n\\n    vars.totalDebt = totalStableDebt + totalVariableDebt;\\n    vars.currentVariableBorrowRate = 0;\\n    vars.currentStableBorrowRate = 0;\\n    vars.currentLiquidityRate = 0;\\n\\n    vars.utilizationRate = vars.totalDebt == 0 ? 0 : vars.totalDebt.rayDiv(availableLiquidity + vars.totalDebt);\\n\\n    vars.currentStableBorrowRate = ILendingRateOracle(addressesProvider.getLendingRateOracle()).getMarketBorrowRate(\\n      reserve\\n    );\\n\\n    if (vars.utilizationRate > OPTIMAL_UTILIZATION_RATE) {\\n      uint256 excessUtilizationRateRatio = (vars.utilizationRate - OPTIMAL_UTILIZATION_RATE).rayDiv(\\n        EXCESS_UTILIZATION_RATE\\n      );\\n\\n      vars.currentStableBorrowRate =\\n        vars.currentStableBorrowRate +\\n        _stableRateSlope1 +\\n        _stableRateSlope2.rayMul(excessUtilizationRateRatio);\\n\\n      vars.currentVariableBorrowRate =\\n        _baseVariableBorrowRate +\\n        _variableRateSlope1 +\\n        _variableRateSlope2.rayMul(excessUtilizationRateRatio);\\n    } else {\\n      vars.currentStableBorrowRate =\\n        vars.currentStableBorrowRate +\\n        _stableRateSlope1.rayMul(vars.utilizationRate.rayDiv(OPTIMAL_UTILIZATION_RATE));\\n      vars.currentVariableBorrowRate =\\n        _baseVariableBorrowRate +\\n        vars.utilizationRate.rayMul(_variableRateSlope1).rayDiv(OPTIMAL_UTILIZATION_RATE);\\n    }\\n\\n    vars.currentLiquidityRate = _getOverallBorrowRate(\\n      totalStableDebt,\\n      totalVariableDebt,\\n      vars.currentVariableBorrowRate,\\n      averageStableBorrowRate\\n    ).rayMul(vars.utilizationRate).percentMul(PercentageMath.ONE - reserveFactor);\\n\\n    return (vars.currentLiquidityRate, vars.currentStableBorrowRate, vars.currentVariableBorrowRate);\\n  }\\n\\n  /**\\n   * @dev Calculates the overall borrow rate as the weighted average between the total variable debt and total stable debt\\n   * @param totalStableDebt The total borrowed from the reserve a stable rate\\n   * @param totalVariableDebt The total borrowed from the reserve at a variable rate\\n   * @param currentVariableBorrowRate The current variable borrow rate of the reserve\\n   * @param currentAverageStableBorrowRate The current weighted average of all the stable rate loans\\n   * @return The weighted averaged borrow rate\\n   **/\\n  function _getOverallBorrowRate(\\n    uint256 totalStableDebt,\\n    uint256 totalVariableDebt,\\n    uint256 currentVariableBorrowRate,\\n    uint256 currentAverageStableBorrowRate\\n  ) internal pure returns (uint256) {\\n    uint256 totalDebt = totalStableDebt + totalVariableDebt;\\n\\n    if (totalDebt == 0) return 0;\\n\\n    uint256 weightedVariableRate = totalVariableDebt.wadToRay().rayMul(currentVariableBorrowRate);\\n    uint256 weightedStableRate = totalStableDebt.wadToRay().rayMul(currentAverageStableBorrowRate);\\n    uint256 overallBorrowRate = (weightedVariableRate + weightedStableRate).wadDiv(totalDebt);\\n\\n    return overallBorrowRate;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReserveRateStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IReserveStrategy.sol';\\n\\n/// @dev Strategy to control a lending pool reserve\\ninterface IReserveRateStrategy is IReserveStrategy {\\n  function baseVariableBorrowRate() external view returns (uint256);\\n\\n  function getMaxVariableBorrowRate() external view returns (uint256);\\n\\n  function calculateInterestRates(\\n    address reserve,\\n    address depositToken,\\n    uint256 liquidityAdded,\\n    uint256 liquidityTaken,\\n    uint256 totalStableDebt,\\n    uint256 totalVariableDebt,\\n    uint256 averageStableBorrowRate,\\n    uint256 reserveFactor\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 liquidityRate,\\n      uint256 stableBorrowRate,\\n      uint256 variableBorrowRate\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/tools/math/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../Errors.sol';\\n\\n/// @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /// @return One ray, 1e27\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /// @return One wad, 1e18\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /// @return Half ray, 1e27/2\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /// @return Half ray, 1e18/2\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /// @dev Multiplies two wad, rounding half up to the nearest wad\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /// @dev Divides two wad, rounding half up to the nearest wad\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /// @dev Multiplies two ray, rounding half up to the nearest ray\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /// @dev Divides two ray, rounding half up to the nearest ray\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /// @dev Casts ray down to wad\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n\\n    require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /// @dev Converts wad up to ray\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n\\n    require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/math/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../Errors.sol';\\n\\n/// @dev Percentages are defined in basis points. The precision is indicated by ONE. Operations are rounded half up.\\nlibrary PercentageMath {\\n  uint16 public constant BP = 1; // basis point\\n  uint16 public constant PCT = 100 * BP; // basis points per percentage point\\n  uint16 public constant ONE = 100 * PCT; // basis points per 1 (100%)\\n  uint16 public constant HALF_ONE = ONE / 2;\\n  // deprecated\\n  uint256 public constant PERCENTAGE_FACTOR = ONE; //percentage plus two decimals\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param factor Basis points of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 factor) internal pure returns (uint256) {\\n    if (value == 0 || factor == 0) {\\n      return 0;\\n    }\\n\\n    require(value <= (type(uint256).max - HALF_ONE) / factor, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * factor + HALF_ONE) / ONE;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param factor Basis points of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 factor) internal pure returns (uint256) {\\n    require(factor != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfFactor = factor >> 1;\\n\\n    require(value <= (type(uint256).max - halfFactor) / ONE, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * ONE + halfFactor) / factor;\\n  }\\n\\n  function percentOf(uint256 value, uint256 base) internal pure returns (uint256) {\\n    require(base != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    if (value == 0) {\\n      return 0;\\n    }\\n\\n    require(value <= (type(uint256).max - HALF_ONE) / ONE, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * ONE + (base >> 1)) / base;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracleProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IPriceOracleProvider {\\n  function getPriceOracle() external view returns (address);\\n\\n  function getLendingRateOracle() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingRateOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/// @dev Provides the average market borrow rate to be used as a base for the stable borrow rate calculations\\ninterface ILendingRateOracle {\\n  /// @dev returns the market borrow rate in ray\\n  function getMarketBorrowRate(address asset) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP excluding events to avoid linearization issues.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReserveStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IReserveStrategy {\\n  function isDelegatedReserve() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/tools/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (DepositToken, VariableDebtToken and StableDebtToken)\\n *  - AT = DepositToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = AddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolExtension\\n *  - ST = Stake\\n */\\nlibrary Errors {\\n  //contract specific errors\\n  string public constant VL_INVALID_AMOUNT = '1'; // Amount must be greater than 0\\n  string public constant VL_NO_ACTIVE_RESERVE = '2'; // Action requires an active reserve\\n  string public constant VL_RESERVE_FROZEN = '3'; // Action cannot be performed because the reserve is frozen\\n  string public constant VL_UNKNOWN_RESERVE = '4'; // Action requires an active reserve\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // User cannot withdraw more than the available balance (above min limit)\\n  string public constant VL_TRANSFER_NOT_ALLOWED = '6'; // Transfer cannot be allowed.\\n  string public constant VL_BORROWING_NOT_ENABLED = '7'; // Borrowing is not enabled\\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // Invalid interest rate mode selected\\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // The collateral balance is 0\\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // Health factor is lesser than the liquidation threshold\\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // There is not enough collateral to cover a new borrow\\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\\n  string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\\n  string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // The requested amount is exceeds max size of a stable loan\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // to repay a debt, user needs to specify a correct debt type (variable or stable)\\n  string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // To repay on behalf of an user an explicit amount to repay is needed\\n  string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // User does not have a stable rate loan in progress on this reserve\\n  string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // User does not have a variable rate loan in progress on this reserve\\n  string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // The collateral balance needs to be greater than 0\\n  string public constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // User deposit is already being used as collateral\\n  string public constant VL_RESERVE_MUST_BE_COLLATERAL = '21'; // This reserve must be enabled as collateral\\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // Interest rate rebalance conditions were not met\\n  string public constant AT_OVERDRAFT_DISABLED = '23'; // User doesn't accept allocation of overdraft\\n  string public constant VL_INVALID_SUB_BALANCE_ARGS = '24';\\n  string public constant AT_INVALID_SLASH_DESTINATION = '25';\\n\\n  string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // The caller of the function is not the lending pool configurator\\n\\n  string public constant LENDING_POOL_REQUIRED = '28'; // The caller of this function must be a lending pool\\n  string public constant CALLER_NOT_LENDING_POOL = '29'; // The caller of this function must be a lending pool\\n  string public constant AT_SUB_BALANCE_RESTIRCTED_FUNCTION = '30'; // The caller of this function must be a lending pool or a sub-balance operator\\n\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // Reserve has already been initialized\\n  string public constant CALLER_NOT_POOL_ADMIN = '33'; // The caller must be the pool admin\\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // The liquidity of the reserve needs to be 0\\n\\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // Provider is not registered\\n  string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // Health factor is not below the threshold\\n  string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // The collateral chosen cannot be liquidated\\n  string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // User did not borrow the specified currency\\n  string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // There isn't enough liquidity available to liquidate\\n\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '48';\\n  string public constant MATH_ADDITION_OVERFLOW = '49';\\n  string public constant MATH_DIVISION_BY_ZERO = '50';\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\\n  string public constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\\n  string public constant CALLER_NOT_STAKE_ADMIN = '57';\\n  string public constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\\n  string public constant CALLER_NOT_LIQUIDITY_CONTROLLER = '60';\\n  string public constant CALLER_NOT_REF_ADMIN = '61';\\n  string public constant VL_INSUFFICIENT_REWARD_AVAILABLE = '62';\\n  string public constant LP_CALLER_MUST_BE_DEPOSIT_TOKEN = '63';\\n  string public constant LP_IS_PAUSED = '64'; // Pool is paused\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = '65';\\n  string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\\n  string public constant RC_INVALID_LTV = '67';\\n  string public constant RC_INVALID_LIQ_THRESHOLD = '68';\\n  string public constant RC_INVALID_LIQ_BONUS = '69';\\n  string public constant RC_INVALID_DECIMALS = '70';\\n  string public constant RC_INVALID_RESERVE_FACTOR = '71';\\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\\n  string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\\n  string public constant VL_TREASURY_REQUIRED = '74';\\n  string public constant LPC_INVALID_CONFIGURATION = '75'; // Invalid risk parameters for the reserve\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '76'; // The caller must be the emergency admin\\n  string public constant UL_INVALID_INDEX = '77';\\n  string public constant VL_CONTRACT_REQUIRED = '78';\\n  string public constant SDT_STABLE_DEBT_OVERFLOW = '79';\\n  string public constant SDT_BURN_EXCEEDS_BALANCE = '80';\\n  string public constant CALLER_NOT_REWARD_CONFIG_ADMIN = '81'; // The caller of this function must be a reward admin\\n  string public constant LP_INVALID_PERCENTAGE = '82'; // Percentage can't be more than 100%\\n  string public constant LP_IS_NOT_TRUSTED_FLASHLOAN = '83';\\n  string public constant CALLER_NOT_SWEEP_ADMIN = '84';\\n  string public constant LP_TOO_MANY_NESTED_CALLS = '85';\\n  string public constant LP_RESTRICTED_FEATURE = '86';\\n  string public constant LP_TOO_MANY_FLASHLOAN_CALLS = '87';\\n  string public constant RW_BASELINE_EXCEEDED = '88';\\n  string public constant CALLER_NOT_REWARD_RATE_ADMIN = '89';\\n  string public constant CALLER_NOT_REWARD_CONTROLLER = '90';\\n  string public constant RW_REWARD_PAUSED = '91';\\n  string public constant CALLER_NOT_TEAM_MANAGER = '92';\\n  string public constant STK_REDEEM_PAUSED = '93';\\n  string public constant STK_INSUFFICIENT_COOLDOWN = '94';\\n  string public constant STK_UNSTAKE_WINDOW_FINISHED = '95';\\n  string public constant STK_INVALID_BALANCE_ON_COOLDOWN = '96';\\n  string public constant STK_EXCESSIVE_SLASH_PCT = '97';\\n  string public constant STK_WRONG_COOLDOWN_OR_UNSTAKE = '98';\\n  string public constant STK_PAUSED = '99';\\n\\n  string public constant TXT_OWNABLE_CALLER_NOT_OWNER = 'Ownable: caller is not the owner';\\n  string public constant TXT_CALLER_NOT_PROXY_OWNER = 'ProxyOwner: caller is not the owner';\\n  string public constant TXT_ACCESS_RESTRICTED = 'RESTRICTED';\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IPriceOracleProvider\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"optimalUtilizationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseVariableBorrowRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableRateSlope1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableRateSlope2_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableRateSlope1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableRateSlope2_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EXCESS_UTILIZATION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPTIMAL_UTILIZATION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressesProvider\",\"outputs\":[{\"internalType\":\"contract IPriceOracleProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseVariableBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTaken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVariableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageStableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"}],\"name\":\"calculateInterestRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVariableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageStableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"}],\"name\":\"calculateInterestRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxVariableBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDelegatedReserve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableRateSlope1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableRateSlope2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"variableRateSlope1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"variableRateSlope2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DefaultReserveInterestRateStrategy","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c6f769a0c46cffa57d91e87ed3bc0cd338ce6361000000000000000000000000000000000000000002e87669c308736a04000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018d0bf423c03d8de0000000000000000000000000000000000000000000000026c62ad77dc602dae0000000000000000000000000000000000000000000000000c685fa11e01ec6f0000000000000000000000000000000000000000000000026c62ad77dc602dae000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}