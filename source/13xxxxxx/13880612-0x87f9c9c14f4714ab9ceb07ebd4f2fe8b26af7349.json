{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/infrastructure/authentication/IAuthenticator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\npragma solidity ^0.8.0 <0.9.0;\\r\\n\\r\\n\\r\\n/// @title IAuthenticator\\r\\n/// @dev Authenticator interface\\r\\n/// @author Frank Bonnet - <frankbonnet@outlook.com>\\r\\ninterface IAuthenticator {\\r\\n    \\r\\n\\r\\n    /// @dev Authenticate \\r\\n    /// Returns whether `_account` is authenticated\\r\\n    /// @param _account The account to authenticate\\r\\n    /// @return whether `_account` is successfully authenticated\\r\\n    function authenticate(address _account) external view returns (bool);\\r\\n}\"\r\n    },\r\n    \"/contracts/infrastructure/authentication/whitelist/IWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\npragma solidity ^0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"../IAuthenticator.sol\\\";\\r\\n\\r\\n\\r\\n/// @title IWhitelist \\r\\n/// @dev Whitelist authentication interface\\r\\n/// @author Frank Bonnet - <frankbonnet@outlook.com>\\r\\ninterface IWhitelist is IAuthenticator {\\r\\n    \\r\\n\\r\\n    /// @dev Add `_accounts` to the whitelist\\r\\n    /// @param _accounts The accounts to add\\r\\n    function add(address[] calldata _accounts) external;\\r\\n\\r\\n\\r\\n    /// @dev Remove `_accounts` from the whitelist\\r\\n    /// @param _accounts The accounts to remove\\r\\n    function remove(address[] calldata _accounts) external;\\r\\n}\"\r\n    },\r\n    \"/contracts/infrastructure/authentication/whitelist/Whitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\r\\npragma solidity ^0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\nimport \\\"./IWhitelist.sol\\\";\\r\\n\\r\\n\\r\\n/// @title Whitelist \\r\\n/// @dev Whitelist authentication\\r\\n/// @author Frank Bonnet - <frankbonnet@outlook.com>\\r\\ncontract Whitelist is Ownable, IWhitelist {\\r\\n    \\r\\n\\r\\n    /// Whitelist\\r\\n    mapping (address => bool) internal list;\\r\\n\\r\\n\\r\\n    /// @dev Add `_accounts` to the whitelist\\r\\n    /// @param _accounts The accounts to add\\r\\n    function add(address[] calldata _accounts) override public onlyOwner {\\r\\n        for (uint i = 0; i < _accounts.length; i++) {\\r\\n            list[_accounts[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @dev Remove `_accounts` from the whitelist\\r\\n    /// @param _accounts The accounts to remove\\r\\n    function remove(address[] calldata _accounts) override public onlyOwner {\\r\\n       for (uint i = 0; i < _accounts.length; i++) {\\r\\n            list[_accounts[i]] = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Authenticate \\r\\n    /// Returns whether `_account` is on the whitelist\\r\\n    /// @param _account The account to authenticate\\r\\n    /// @return whether `_account` is successfully authenticated\\r\\n    function authenticate(address _account) override public view returns (bool) {\\r\\n        return list[_account];\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"authenticate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Whitelist","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}