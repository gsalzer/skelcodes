{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/base/impl/TreasuryManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../model/ITreasuryManager.sol\\\";\\nimport \\\"@ethereansos/swissknife/contracts/generic/impl/LazyInitCapableElement.sol\\\";\\nimport { ReflectionUtilities, Uint256Utilities, BehaviorUtilities } from \\\"@ethereansos/swissknife/contracts/lib/GeneralUtilities.sol\\\";\\nimport { Grimoire } from \\\"../lib/KnowledgeBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\ncontract TreasuryManager is ITreasuryManager, IERC721Receiver, IERC1155Receiver, LazyInitCapableElement {\\n    using ReflectionUtilities for address;\\n    using Uint256Utilities for uint256;\\n\\n    bytes32 private constant INTERNAL_SELECTOR_MANAGER_SALT = 0x93e9e71b539687571ead6f20e97c4672f2b76a6b58dd6502ea8a456e2f0cd2c7;\\n\\n    constructor(bytes memory lazyInitData) LazyInitCapableElement(lazyInitData) {\\n    }\\n\\n    function _lazyInit(bytes memory lazyInitData) internal override returns(bytes memory) {\\n        if(lazyInitData.length > 0) {\\n            (bytes4[] memory selectors, address[] memory locations) = abi.decode(lazyInitData, (bytes4[], address[]));\\n            require(selectors.length == locations.length, \\\"length\\\");\\n            for(uint256 i = 0; i < selectors.length; i++) {\\n                _setAdditionalFunction(selectors[i], locations[i], true);\\n            }\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    function _supportsInterface(bytes4 interfaceId) internal override view returns(bool) {\\n        return\\n            interfaceId == type(ITreasuryManager).interfaceId ||\\n            interfaceId == type(IERC1155Receiver).interfaceId ||\\n            interfaceId == this.onERC1155Received.selector ||\\n            interfaceId == this.onERC1155BatchReceived.selector ||\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            interfaceId == this.onERC721Received.selector ||\\n            interfaceId == 0x00000000 ||\\n            interfaceId == this.transfer.selector ||\\n            interfaceId == this.batchTransfer.selector ||\\n            interfaceId == this.setAdditionalFunction.selector ||\\n            (additionalFunctionsServerManager().isContract() && AdditionalFunctionsServerManager(additionalFunctionsServerManager()).get(interfaceId) != address(0));\\n    }\\n\\n    receive() external payable {\\n        (bool result, bytes memory returnData) = _trySandboxedCall(false);\\n        if(result) {\\n            assembly {\\n                return(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n    }\\n\\n    fallback() authorizedOnly external payable {\\n        (bool result, bytes memory returnData) = _trySandboxedCall(true);\\n        if(result) {\\n            assembly {\\n                return(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n    }\\n\\n    function transfer(address token, uint256 value, address receiver, uint256 tokenType, uint256 objectId, bool safe, bool withData, bytes calldata data) external override authorizedOnly returns(bool result, bytes memory returnData) {\\n        (result, returnData) = _trySandboxedCall(false);\\n        if(result) {\\n            assembly {\\n                return(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n        (result, returnData) = _transfer(TransferEntry(token, tokenType == 0 ? new uint256[](0) : objectId.asSingletonArray(), tokenType == 1 ? new uint256[](0) : value.asSingletonArray(), receiver, safe, false, withData, data));\\n    }\\n\\n    function batchTransfer(TransferEntry[] calldata transferEntries) external override authorizedOnly returns(bool[] memory results, bytes[] memory returnDatas) {\\n        (bool result, bytes memory returnData) = _trySandboxedCall(false);\\n        if(result) {\\n            assembly {\\n                return(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n        results = new bool[](transferEntries.length);\\n        returnDatas = new bytes[](transferEntries.length);\\n        for(uint256 i = 0; i < transferEntries.length; i++) {\\n            (results[i], returnDatas[i]) = _transfer(transferEntries[i]);\\n        }\\n    }\\n\\n    function onERC721Received(address, address, uint256, bytes calldata) external override returns (bytes4) {\\n        (bool result, bytes memory returnData) = _trySandboxedCall(false);\\n        if(result) {\\n            assembly {\\n                return(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external override returns(bytes4) {\\n        (bool result, bytes memory returnData) = _trySandboxedCall(false);\\n        if(result) {\\n            assembly {\\n                return(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address , address, uint256[] calldata, uint256[] calldata, bytes calldata) external override returns (bytes4) {\\n        (bool result, bytes memory returnData) = _trySandboxedCall(false);\\n        if(result) {\\n            assembly {\\n                return(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    function setAdditionalFunction(bytes4 selector, address newServer, bool log) external override authorizedOnly returns (address oldServer) {\\n        (bool result, bytes memory returnData) = _trySandboxedCall(false);\\n        if(result) {\\n            assembly {\\n                return(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n        oldServer = _setAdditionalFunction(selector, newServer, log);\\n    }\\n\\n    function submit(address location, bytes calldata payload, address restReceiver) override authorizedOnly external payable returns(bytes memory response) {\\n        (bool result, bytes memory returnData) = _trySandboxedCall(false);\\n        if(result) {\\n            assembly {\\n                return(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n        uint256 oldBalance = address(this).balance - msg.value;\\n        response = location.submit(msg.value, payload);\\n        uint256 actualBalance = address(this).balance;\\n        if(actualBalance > oldBalance) {\\n            (restReceiver != address(0) ? restReceiver : msg.sender).submit(address(this).balance - oldBalance, \\\"\\\");\\n        }\\n    }\\n\\n    function additionalFunctionsServerManager() public view returns (address) {\\n        return address(uint160(uint256(keccak256(abi.encodePacked(\\n            hex'ff',\\n            address(this),\\n            INTERNAL_SELECTOR_MANAGER_SALT,\\n            keccak256(type(AdditionalFunctionsServerManager).creationCode)\\n        )))));\\n    }\\n\\n    function _setAdditionalFunction(bytes4 selector, address newServer, bool log) private returns (address oldServer) {\\n        oldServer = _getOrCreateAdditionalFunctionsServerManager().set(selector, newServer);\\n        if(log) {\\n            emit AdditionalFunction(msg.sender, selector, oldServer, newServer);\\n        }\\n    }\\n\\n    function _transfer(TransferEntry memory transferEntry) private returns(bool result, bytes memory returnData) {\\n        if(transferEntry.values.length == 0 && transferEntry.objectIds.length == 0) {\\n            return (result, returnData);\\n        }\\n        if(transferEntry.token == address(0)) {\\n            if(transferEntry.values.length != 0 && transferEntry.values[0] != 0) {\\n                returnData = transferEntry.receiver.submit(transferEntry.values[0], \\\"\\\");\\n                result = true;\\n            }\\n            return (result, returnData);\\n        }\\n        if(transferEntry.objectIds.length == 0) {\\n            if(transferEntry.values.length != 0 && transferEntry.values[0] != 0) {\\n                returnData = transferEntry.token.submit(0, abi.encodeWithSelector(IERC20(address(0)).transfer.selector, transferEntry.receiver, transferEntry.values[0]));\\n                result = true;\\n            }\\n            return (result, returnData);\\n        }\\n        if(transferEntry.values.length == 0) {\\n            if(!transferEntry.safe) {\\n                returnData = transferEntry.token.submit(0, abi.encodeWithSelector(IERC721(address(0)).transferFrom.selector, address(this), transferEntry.receiver, transferEntry.objectIds[0]));\\n                result = true;\\n                return (result, returnData);\\n            }\\n            if(transferEntry.withData) {\\n                returnData = transferEntry.token.submit(0, abi.encodeWithSignature(\\\"safeTransferFrom(address,address,uint256,bytes)\\\", address(this), transferEntry.receiver, transferEntry.objectIds[0], transferEntry.data));\\n                result = true;\\n                return (result, returnData);\\n            }\\n            returnData = transferEntry.token.submit(0, abi.encodeWithSignature(\\\"safeTransferFrom(address,address,uint256)\\\", address(this), transferEntry.receiver, transferEntry.objectIds[0]));\\n            result = true;\\n            return (result, returnData);\\n        }\\n        if(transferEntry.batch) {\\n            returnData = transferEntry.token.submit(0, abi.encodeWithSelector(IERC1155(address(0)).safeBatchTransferFrom.selector, address(this), transferEntry.receiver, transferEntry.objectIds, transferEntry.values, transferEntry.data));\\n            result = true;\\n            return (result, returnData);\\n        }\\n        if(transferEntry.values[0] != 0) {\\n            returnData = transferEntry.token.submit(0, abi.encodeWithSelector(IERC1155(address(0)).safeTransferFrom.selector, address(this), transferEntry.receiver, transferEntry.objectIds[0], transferEntry.values[0], transferEntry.data));\\n            result = true;\\n        }\\n    }\\n\\n    function _trySandboxedCall(bool launchErrorIfNone) internal returns(bool result, bytes memory returnData) {\\n        AdditionalFunctionsServerManager _additionalFunctionsServerManager = AdditionalFunctionsServerManager(additionalFunctionsServerManager());\\n        address subject = address(_additionalFunctionsServerManager).isContract() ? _additionalFunctionsServerManager.get(msg.sig) : address(0);\\n        if(subject == address(0)) {\\n            require(!launchErrorIfNone, \\\"none\\\");\\n            return (false, \\\"\\\");\\n        }\\n        address _initializer = initializer;\\n        address _maintainer = host;\\n        bytes32 reentrancyLockKey = _additionalFunctionsServerManager.setReentrancyLock();\\n        (result, returnData) = subject.delegatecall(msg.data);\\n        if(!result) {\\n            assembly {\\n                revert(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n        initializer = _initializer;\\n        host = _maintainer;\\n        require(_additionalFunctionsServerManager.releaseReentrancyLock(reentrancyLockKey) == reentrancyLockKey);\\n    }\\n\\n    function _getOrCreateAdditionalFunctionsServerManager() private returns (AdditionalFunctionsServerManager _additionalFunctionsServerManager) {\\n        _additionalFunctionsServerManager = AdditionalFunctionsServerManager(additionalFunctionsServerManager());\\n        if(!address(_additionalFunctionsServerManager).isContract()) {\\n            bytes memory bytecode = type(AdditionalFunctionsServerManager).creationCode;\\n            bytes32 salt = INTERNAL_SELECTOR_MANAGER_SALT;\\n            address addr;\\n            assembly {\\n                addr := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\\n            }\\n        }\\n    }\\n}\\n\\ncontract AdditionalFunctionsServerManager {\\n    address immutable private _creator = msg.sender;\\n    bytes32 private _reentrancyLockKey;\\n    uint256 private _keyIndex;\\n    mapping (bytes4 => address) public get;\\n\\n    modifier creatorOnly() {\\n        require(msg.sender == _creator);\\n        _;\\n    }\\n\\n    function set(bytes4 selector, address newServer) external creatorOnly returns (address oldServer) {\\n        oldServer = get[selector];\\n        get[selector] = newServer;\\n    }\\n\\n    function setReentrancyLock() external creatorOnly returns (bytes32) {\\n        require(_reentrancyLockKey == bytes32(0));\\n        return _reentrancyLockKey = BehaviorUtilities.randomKey(_keyIndex++);\\n    }\\n\\n    function releaseReentrancyLock(bytes32 reentrancyLockKey) external creatorOnly returns(bytes32 lastReentrancyLockKey) {\\n        require((lastReentrancyLockKey = _reentrancyLockKey) != bytes32(0) && _reentrancyLockKey == reentrancyLockKey);\\n        _reentrancyLockKey = bytes32(0);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/base/lib/KnowledgeBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../../core/model/IOrganization.sol\\\";\\nimport \\\"../model/IMicroservicesManager.sol\\\";\\nimport \\\"../model/IStateManager.sol\\\";\\nimport \\\"../model/IProposalsManager.sol\\\";\\nimport \\\"../model/ITreasuryManager.sol\\\";\\nimport { ReflectionUtilities, BytesUtilities } from \\\"@ethereansos/swissknife/contracts/lib/GeneralUtilities.sol\\\";\\n\\nlibrary Grimoire {\\n    bytes32 constant public COMPONENT_KEY_TREASURY_MANAGER = 0xcfe1633df53a0649d88d788961f26058c5e7a0b5644675f19f67bb2975827ba2;\\n    bytes32 constant public COMPONENT_KEY_STATE_MANAGER = 0xd1d09e8f5708558865b8acd5f13c69781ae600e42dbc7f52b8ef1b9e33dbcd36;\\n    bytes32 constant public COMPONENT_KEY_MICROSERVICES_MANAGER = 0x0aef4c8f864010d3e1817691f51ade95a646fffafd7f3df9cb8200def342cfd7;\\n    bytes32 constant public COMPONENT_KEY_PROPOSALS_MANAGER = 0xa504406933af7ca120d20b97dfc79ea9788beb3c4d3ac1ff9a2c292b2c28e0cc;\\n}\\n\\nlibrary Getters {\\n\\n    function treasuryManager(IOrganization organization) internal view returns(ITreasuryManager) {\\n        return ITreasuryManager(organization.get(Grimoire.COMPONENT_KEY_TREASURY_MANAGER));\\n    }\\n\\n    function stateManager(IOrganization organization) internal view returns(IStateManager) {\\n        return IStateManager(organization.get(Grimoire.COMPONENT_KEY_STATE_MANAGER));\\n    }\\n\\n    function microservicesManager(IOrganization organization) internal view returns(IMicroservicesManager) {\\n        return IMicroservicesManager(organization.get(Grimoire.COMPONENT_KEY_MICROSERVICES_MANAGER));\\n    }\\n\\n    function proposalsManager(IOrganization organization) internal view returns(IProposalsManager) {\\n        return IProposalsManager(organization.get(Grimoire.COMPONENT_KEY_PROPOSALS_MANAGER));\\n    }\\n}\\n\\nlibrary Setters {\\n\\n    function replaceTreasuryManager(IOrganization organization, address newComponentAddress) internal returns(ITreasuryManager oldComponent) {\\n        require(newComponentAddress != address(0), \\\"void\\\");\\n        oldComponent = ITreasuryManager(organization.set(IOrganization.Component(Grimoire.COMPONENT_KEY_TREASURY_MANAGER, newComponentAddress, false, true)));\\n    }\\n\\n    function replaceStateManager(IOrganization organization, address newComponentAddress) internal returns(IStateManager oldComponent) {\\n        require(newComponentAddress != address(0), \\\"void\\\");\\n        oldComponent = IStateManager(organization.set(IOrganization.Component(Grimoire.COMPONENT_KEY_STATE_MANAGER, newComponentAddress, false ,true)));\\n    }\\n\\n    function replaceMicroservicesManager(IOrganization organization, address newComponentAddress) internal returns(IMicroservicesManager oldComponent) {\\n        require(newComponentAddress != address(0), \\\"void\\\");\\n        oldComponent = IMicroservicesManager(organization.set(IOrganization.Component(Grimoire.COMPONENT_KEY_MICROSERVICES_MANAGER, newComponentAddress, true, true)));\\n    }\\n\\n    function replaceProposalsManager(IOrganization organization, address newComponentAddress) internal returns(IProposalsManager oldComponent) {\\n        require(newComponentAddress != address(0), \\\"void\\\");\\n        oldComponent = IProposalsManager(organization.set(IOrganization.Component(Grimoire.COMPONENT_KEY_PROPOSALS_MANAGER, newComponentAddress, true, true)));\\n    }\\n}\\n\\nlibrary Treasury {\\n    using ReflectionUtilities for address;\\n\\n    function storeETH(IOrganization organization, uint256 value) internal {\\n        if(value != 0) {\\n            organization.get(Grimoire.COMPONENT_KEY_TREASURY_MANAGER).submit(value, \\\"\\\");\\n        }\\n    }\\n\\n    function callTemporaryFunction(ITreasuryManager treasuryManager, bytes4 selector, address subject, uint256 value, bytes memory data) internal returns(bytes memory response) {\\n        address oldServer = treasuryManager.setAdditionalFunction(selector, subject, false);\\n        response = address(treasuryManager).submit(value, abi.encodePacked(selector, data));\\n        treasuryManager.setAdditionalFunction(selector, oldServer, false);\\n    }\\n}\\n\\nlibrary State {\\n    using BytesUtilities for bytes;\\n\\n    bytes32 constant public ENTRY_TYPE_ADDRESS = 0x421683f821a0574472445355be6d2b769119e8515f8376a1d7878523dfdecf7b;\\n    bytes32 constant public ENTRY_TYPE_ADDRESS_ARRAY = 0x23d8ff3dc5aed4a634bcf123581c95e70c60ac0e5246916790aef6d4451ff4c1;\\n    bytes32 constant public ENTRY_TYPE_BOOL = 0xc1053bdab4a5cf55238b667c39826bbb11a58be126010e7db397c1b67c24271b;\\n    bytes32 constant public ENTRY_TYPE_BOOL_ARRAY = 0x8761250c4d2c463ce51f91f5d2c2508fa9142f8a42aa9f30b965213bf3e6c2ac;\\n    bytes32 constant public ENTRY_TYPE_BYTES = 0xb963e9b45d014edd60cff22ec9ad383335bbc3f827be2aee8e291972b0fadcf2;\\n    bytes32 constant public ENTRY_TYPE_BYTES_ARRAY = 0x084b42f8a8730b98eb0305d92103d9107363192bb66162064a34dc5716ebe1a0;\\n    bytes32 constant public ENTRY_TYPE_STRING = 0x97fc46276c172633607a331542609db1e3da793fca183d594ed5a61803a10792;\\n    bytes32 constant public ENTRY_TYPE_STRING_ARRAY = 0xa227fd7a847724343a7dda3598ee0fb2d551b151b73e4a741067596daa6f5658;\\n    bytes32 constant public ENTRY_TYPE_UINT256 = 0xec13d6d12b88433319b64e1065a96ea19cd330ef6603f5f6fb685dde3959a320;\\n    bytes32 constant public ENTRY_TYPE_UINT256_ARRAY = 0xc1b76e99a35aa41ed28bbbd9e6c7228760c87b410ebac94fa6431da9b592411f;\\n\\n    function getAddress(IStateManager stateManager, string memory name) internal view returns(address) {\\n        return stateManager.get(name).value.asAddress();\\n    }\\n\\n    function setAddress(IStateManager stateManager, string memory name, address val) internal returns(address oldValue) {\\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_ADDRESS, abi.encodePacked(val))).asAddress();\\n    }\\n\\n    function getAddressArray(IStateManager stateManager, string memory name) internal view returns(address[] memory) {\\n        return stateManager.get(name).value.asAddressArray();\\n    }\\n\\n    function setAddressArray(IStateManager stateManager, string memory name, address[] memory val) internal returns(address[] memory oldValue) {\\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_ADDRESS_ARRAY, abi.encode(val))).asAddressArray();\\n    }\\n\\n    function getBool(IStateManager stateManager, string memory name) internal view returns(bool) {\\n        return stateManager.get(name).value.asBool();\\n    }\\n\\n    function setBool(IStateManager stateManager, string memory name, bool val) internal returns(bool oldValue) {\\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_BOOL, abi.encode(val ? 1 : 0))).asBool();\\n    }\\n\\n    function getBoolArray(IStateManager stateManager, string memory name) internal view returns(bool[] memory) {\\n        return stateManager.get(name).value.asBoolArray();\\n    }\\n\\n    function setBoolArray(IStateManager stateManager, string memory name, bool[] memory val) internal returns(bool[] memory oldValue) {\\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_BOOL_ARRAY, abi.encode(val))).asBoolArray();\\n    }\\n\\n    function getBytes(IStateManager stateManager, string memory name) internal view returns(bytes memory) {\\n        return stateManager.get(name).value;\\n    }\\n\\n    function setBytes(IStateManager stateManager, string memory name, bytes memory val) internal returns(bytes memory oldValue) {\\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_BYTES, val));\\n    }\\n\\n    function getBytesArray(IStateManager stateManager, string memory name) internal view returns(bytes[] memory) {\\n        return stateManager.get(name).value.asBytesArray();\\n    }\\n\\n    function setBytesArray(IStateManager stateManager, string memory name, bytes[] memory val) internal returns(bytes[] memory oldValue) {\\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_BYTES_ARRAY, abi.encode(val))).asBytesArray();\\n    }\\n\\n    function getString(IStateManager stateManager, string memory name) internal view returns(string memory) {\\n        return string(stateManager.get(name).value);\\n    }\\n\\n    function setString(IStateManager stateManager, string memory name, string memory val) internal returns(string memory oldValue) {\\n        return string(stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_STRING, bytes(val))));\\n    }\\n\\n    function getStringArray(IStateManager stateManager, string memory name) internal view returns(string[] memory) {\\n        return stateManager.get(name).value.asStringArray();\\n    }\\n\\n    function setStringArray(IStateManager stateManager, string memory name, string[] memory val) internal returns(string[] memory oldValue) {\\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_STRING_ARRAY, abi.encode(val))).asStringArray();\\n    }\\n\\n    function getUint256(IStateManager stateManager, string memory name) internal view returns(uint256) {\\n        return stateManager.get(name).value.asUint256();\\n    }\\n\\n    function setUint256(IStateManager stateManager, string memory name, uint256 val) internal returns(uint256 oldValue) {\\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_UINT256, abi.encode(val))).asUint256();\\n    }\\n\\n    function getUint256Array(IStateManager stateManager, string memory name) internal view returns(uint256[] memory) {\\n        return stateManager.get(name).value.asUint256Array();\\n    }\\n\\n    function setUint256Array(IStateManager stateManager, string memory name, uint256[] memory val) internal returns(uint256[] memory oldValue) {\\n        return stateManager.set(IStateManager.StateEntry(name, ENTRY_TYPE_UINT256_ARRAY, abi.encode(val))).asUint256Array();\\n    }\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/lib/GeneralUtilities.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary BehaviorUtilities {\\n\\n    function randomKey(uint256 i) internal view returns (bytes32) {\\n        return keccak256(abi.encode(i, block.timestamp, block.number, tx.origin, tx.gasprice, block.coinbase, block.difficulty, msg.sender, blockhash(block.number - 5)));\\n    }\\n\\n    function calculateProjectedArraySizeAndLoopUpperBound(uint256 arraySize, uint256 start, uint256 offset) internal pure returns(uint256 projectedArraySize, uint256 projectedArrayLoopUpperBound) {\\n        if(arraySize != 0 && start < arraySize && offset != 0) {\\n            uint256 length = start + offset;\\n            if(start < (length = length > arraySize ? arraySize : length)) {\\n                projectedArraySize = (projectedArrayLoopUpperBound = length) - start;\\n            }\\n        }\\n    }\\n}\\n\\nlibrary ReflectionUtilities {\\n\\n    function read(address subject, bytes memory inputData) internal view returns(bytes memory returnData) {\\n        bool result;\\n        (result, returnData) = subject.staticcall(inputData);\\n        if(!result) {\\n            assembly {\\n                revert(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n    }\\n\\n    function submit(address subject, uint256 value, bytes memory inputData) internal returns(bytes memory returnData) {\\n        bool result;\\n        (result, returnData) = subject.call{value : value}(inputData);\\n        if(!result) {\\n            assembly {\\n                revert(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n    }\\n\\n    function isContract(address subject) internal view returns (bool) {\\n        if(subject == address(0)) {\\n            return false;\\n        }\\n        uint256 codeLength;\\n        assembly {\\n            codeLength := extcodesize(subject)\\n        }\\n        return codeLength > 0;\\n    }\\n\\n    function clone(address originalContract) internal returns(address copyContract) {\\n        assembly {\\n            mstore(\\n                0,\\n                or(\\n                    0x5880730000000000000000000000000000000000000000803b80938091923cF3,\\n                    mul(originalContract, 0x1000000000000000000)\\n                )\\n            )\\n            copyContract := create(0, 0, 32)\\n            switch extcodesize(copyContract)\\n                case 0 {\\n                    invalid()\\n                }\\n        }\\n    }\\n}\\n\\nlibrary BytesUtilities {\\n\\n    bytes private constant ALPHABET = \\\"0123456789abcdef\\\";\\n    string internal constant BASE64_ENCODER_DATA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function asAddress(bytes memory b) internal pure returns(address) {\\n        if(b.length == 0) {\\n            return address(0);\\n        }\\n        if(b.length == 20) {\\n            address addr;\\n            assembly {\\n                addr := mload(add(b, 20))\\n            }\\n            return addr;\\n        }\\n        return abi.decode(b, (address));\\n    }\\n\\n    function asAddressArray(bytes memory b) internal pure returns(address[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (address[]));\\n        }\\n    }\\n\\n    function asBool(bytes memory bs) internal pure returns(bool) {\\n        return asUint256(bs) != 0;\\n    }\\n\\n    function asBoolArray(bytes memory b) internal pure returns(bool[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (bool[]));\\n        }\\n    }\\n\\n    function asBytesArray(bytes memory b) internal pure returns(bytes[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (bytes[]));\\n        }\\n    }\\n\\n    function asString(bytes memory b) internal pure returns(string memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (string));\\n        }\\n    }\\n\\n    function asStringArray(bytes memory b) internal pure returns(string[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (string[]));\\n        }\\n    }\\n\\n    function asUint256(bytes memory bs) internal pure returns(uint256 x) {\\n        if (bs.length >= 32) {\\n            assembly {\\n                x := mload(add(bs, add(0x20, 0)))\\n            }\\n        }\\n    }\\n\\n    function asUint256Array(bytes memory b) internal pure returns(uint256[] memory callResult) {\\n        if(b.length > 0) {\\n            return abi.decode(b, (uint256[]));\\n        }\\n    }\\n\\n    function toString(bytes memory data) internal pure returns(string memory) {\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < data.length; i++) {\\n            str[2+i*2] = ALPHABET[uint256(uint8(data[i] >> 4))];\\n            str[3+i*2] = ALPHABET[uint256(uint8(data[i] & 0x0f))];\\n        }\\n        return string(str);\\n    }\\n\\n    function asSingletonArray(bytes memory a) internal pure returns(bytes[] memory array) {\\n        array = new bytes[](1);\\n        array[0] = a;\\n    }\\n\\n    function toBase64(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        string memory table = BASE64_ENCODER_DATA;\\n\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            mstore(result, encodedLen)\\n\\n            let tablePtr := add(table, 1)\\n\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            let resultPtr := add(result, 32)\\n\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n}\\n\\nlibrary StringUtilities {\\n\\n    bytes1 private constant CHAR_0 = bytes1('0');\\n    bytes1 private constant CHAR_A = bytes1('A');\\n    bytes1 private constant CHAR_a = bytes1('a');\\n    bytes1 private constant CHAR_f = bytes1('f');\\n\\n    bytes  internal constant BASE64_DECODER_DATA = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                                   hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                                   hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                                   hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function isEmpty(string memory test) internal pure returns (bool) {\\n        return equals(test, \\\"\\\");\\n    }\\n\\n    function equals(string memory a, string memory b) internal pure returns(bool) {\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n\\n    function toLowerCase(string memory str) internal pure returns(string memory) {\\n        bytes memory bStr = bytes(str);\\n        for (uint256 i = 0; i < bStr.length; i++) {\\n            bStr[i] = bStr[i] >= 0x41 && bStr[i] <= 0x5A ? bytes1(uint8(bStr[i]) + 0x20) : bStr[i];\\n        }\\n        return string(bStr);\\n    }\\n\\n    function asBytes(string memory str) internal pure returns(bytes memory toDecode) {\\n        bytes memory data = abi.encodePacked(str);\\n        if(data.length == 0 || data[0] != \\\"0\\\" || (data[1] != \\\"x\\\" && data[1] != \\\"X\\\")) {\\n            return \\\"\\\";\\n        }\\n        uint256 start = 2;\\n        toDecode = new bytes((data.length - 2) / 2);\\n\\n        for(uint256 i = 0; i < toDecode.length; i++) {\\n            toDecode[i] = bytes1(_fromHexChar(uint8(data[start++])) + _fromHexChar(uint8(data[start++])) * 16);\\n        }\\n    }\\n\\n    function toBase64(string memory input) internal pure returns(string memory) {\\n        return BytesUtilities.toBase64(abi.encodePacked(input));\\n    }\\n\\n    function fromBase64(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        bytes memory table = BASE64_DECODER_DATA;\\n\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            mstore(result, decodedLen)\\n\\n            let tablePtr := add(table, 1)\\n\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            let resultPtr := add(result, 32)\\n\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    function _fromHexChar(uint8 c) private pure returns (uint8) {\\n        bytes1 charc = bytes1(c);\\n        return charc < CHAR_0 || charc > CHAR_f ? 0 : (charc < CHAR_A ? 0 : 10) + c - uint8(charc < CHAR_A ? CHAR_0 : charc < CHAR_a ? CHAR_A : CHAR_a);\\n    }\\n}\\n\\nlibrary Uint256Utilities {\\n    function asSingletonArray(uint256 n) internal pure returns(uint256[] memory array) {\\n        array = new uint256[](1);\\n        array[0] = n;\\n    }\\n\\n    function toHex(uint256 _i) internal pure returns (string memory) {\\n        return BytesUtilities.toString(abi.encodePacked(_i));\\n    }\\n\\n    function toString(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function sum(uint256[] memory arr) internal pure returns (uint256 result) {\\n        for(uint256 i = 0; i < arr.length; i++) {\\n            result += arr[i];\\n        }\\n    }\\n}\\n\\nlibrary AddressUtilities {\\n    function asSingletonArray(address a) internal pure returns(address[] memory array) {\\n        array = new address[](1);\\n        array[0] = a;\\n    }\\n\\n    function toString(address _addr) internal pure returns (string memory) {\\n        return _addr == address(0) ? \\\"0x0000000000000000000000000000000000000000\\\" : BytesUtilities.toString(abi.encodePacked(_addr));\\n    }\\n}\\n\\nlibrary Bytes32Utilities {\\n\\n    function asSingletonArray(bytes32 a) internal pure returns(bytes32[] memory array) {\\n        array = new bytes32[](1);\\n        array[0] = a;\\n    }\\n\\n    function toString(bytes32 bt) internal pure returns (string memory) {\\n        return bt == bytes32(0) ?  \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\" : BytesUtilities.toString(abi.encodePacked(bt));\\n    }\\n}\\n\\nlibrary TransferUtilities {\\n    using ReflectionUtilities for address;\\n\\n    function balanceOf(address erc20TokenAddress, address account) internal view returns(uint256) {\\n        if(erc20TokenAddress == address(0)) {\\n            return account.balance;\\n        }\\n        return abi.decode(erc20TokenAddress.read(abi.encodeWithSelector(IERC20(erc20TokenAddress).balanceOf.selector, account)), (uint256));\\n    }\\n\\n    function allowance(address erc20TokenAddress, address account, address spender) internal view returns(uint256) {\\n        if(erc20TokenAddress == address(0)) {\\n            return 0;\\n        }\\n        return abi.decode(erc20TokenAddress.read(abi.encodeWithSelector(IERC20(erc20TokenAddress).allowance.selector, account, spender)), (uint256));\\n    }\\n\\n    function safeApprove(address erc20TokenAddress, address spender, uint256 value) internal {\\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, spender, value));\\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address erc20TokenAddress, address to, uint256 value) internal {\\n        if(value == 0) {\\n            return;\\n        }\\n        if(erc20TokenAddress == address(0)) {\\n            to.submit(value, \\\"\\\");\\n            return;\\n        }\\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) internal {\\n        if(value == 0) {\\n            return;\\n        }\\n        if(erc20TokenAddress == address(0)) {\\n            to.submit(value, \\\"\\\");\\n            return;\\n        }\\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\\n    }\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/generic/impl/LazyInitCapableElement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../model/ILazyInitCapableElement.sol\\\";\\nimport { ReflectionUtilities } from \\\"../../lib/GeneralUtilities.sol\\\";\\n\\nabstract contract LazyInitCapableElement is ILazyInitCapableElement {\\n    using ReflectionUtilities for address;\\n\\n    address public override initializer;\\n    address public override host;\\n\\n    constructor(bytes memory lazyInitData) {\\n        if(lazyInitData.length > 0) {\\n            _privateLazyInit(lazyInitData);\\n        }\\n    }\\n\\n    function lazyInit(bytes calldata lazyInitData) override external returns (bytes memory lazyInitResponse) {\\n        return _privateLazyInit(lazyInitData);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) override external view returns(bool) {\\n        return\\n            interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == this.supportsInterface.selector ||\\n            interfaceId == type(ILazyInitCapableElement).interfaceId ||\\n            interfaceId == this.lazyInit.selector ||\\n            interfaceId == this.initializer.selector ||\\n            interfaceId == this.subjectIsAuthorizedFor.selector ||\\n            interfaceId == this.host.selector ||\\n            interfaceId == this.setHost.selector ||\\n            _supportsInterface(interfaceId);\\n    }\\n\\n    function setHost(address newValue) external override authorizedOnly returns(address oldValue) {\\n        oldValue = host;\\n        host = newValue;\\n        emit Host(oldValue, newValue);\\n    }\\n\\n    function subjectIsAuthorizedFor(address subject, address location, bytes4 selector, bytes calldata payload, uint256 value) public override virtual view returns(bool) {\\n        (bool chidlElementValidationIsConsistent, bool chidlElementValidationResult) = _subjectIsAuthorizedFor(subject, location, selector, payload, value);\\n        if(chidlElementValidationIsConsistent) {\\n            return chidlElementValidationResult;\\n        }\\n        if(subject == host) {\\n            return true;\\n        }\\n        if(!host.isContract()) {\\n            return false;\\n        }\\n        (bool result, bytes memory resultData) = host.staticcall(abi.encodeWithSelector(ILazyInitCapableElement(host).subjectIsAuthorizedFor.selector, subject, location, selector, payload, value));\\n        return result && abi.decode(resultData, (bool));\\n    }\\n\\n    function _privateLazyInit(bytes memory lazyInitData) private returns (bytes memory lazyInitResponse) {\\n        require(initializer == address(0), \\\"init\\\");\\n        initializer = msg.sender;\\n        (host, lazyInitResponse) = abi.decode(lazyInitData, (address, bytes));\\n        emit Host(address(0), host);\\n        lazyInitResponse = _lazyInit(lazyInitResponse);\\n    }\\n\\n    function _lazyInit(bytes memory) internal virtual returns (bytes memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function _supportsInterface(bytes4 selector) internal virtual view returns (bool);\\n\\n    function _subjectIsAuthorizedFor(address, address, bytes4, bytes calldata, uint256) internal virtual view returns(bool, bool) {\\n    }\\n\\n    modifier authorizedOnly {\\n        require(_authorizedOnly(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    function _authorizedOnly() internal returns(bool) {\\n        return subjectIsAuthorizedFor(msg.sender, address(this), msg.sig, msg.data, msg.value);\\n    }\\n}\"\r\n    },\r\n    \"contracts/base/model/ITreasuryManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\n\\ninterface ITreasuryManager is ILazyInitCapableElement {\\n\\n    struct TransferEntry {\\n        address token;\\n        uint256[] objectIds;\\n        uint256[] values;\\n        address receiver;\\n        bool safe;\\n        bool batch;\\n        bool withData;\\n        bytes data;\\n    }\\n\\n    function transfer(address token, uint256 value, address receiver, uint256 tokenType, uint256 objectId, bool safe, bool withData, bytes calldata data) external returns(bool result, bytes memory returnData);\\n    function batchTransfer(TransferEntry[] calldata transferEntries) external returns(bool[] memory results, bytes[] memory returnDatas);\\n\\n    function submit(address location, bytes calldata payload, address restReceiver) external payable returns(bytes memory response);\\n\\n    function setAdditionalFunction(bytes4 selector, address newServer, bool log) external returns (address oldServer);\\n    event AdditionalFunction(address caller, bytes4 indexed selector, address indexed oldServer, address indexed newServer);\\n}\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ILazyInitCapableElement is IERC165 {\\n\\n    function lazyInit(bytes calldata lazyInitData) external returns(bytes memory initResponse);\\n    function initializer() external view returns(address);\\n\\n    event Host(address indexed from, address indexed to);\\n\\n    function host() external view returns(address);\\n    function setHost(address newValue) external returns(address oldValue);\\n\\n    function subjectIsAuthorizedFor(address subject, address location, bytes4 selector, bytes calldata payload, uint256 value) external view returns(bool);\\n}\"\r\n    },\r\n    \"contracts/base/model/IProposalsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\ninterface IProposalsManager is IERC1155Receiver, ILazyInitCapableElement {\\n\\n    struct ProposalCode {\\n        address location;\\n        bytes bytecode;\\n    }\\n\\n    struct ProposalCodes {\\n        ProposalCode[] codes;\\n        bool alsoTerminate;\\n    }\\n\\n    struct Proposal {\\n        address proposer;\\n        address[] codeSequence;\\n        uint256 creationBlock;\\n        uint256 accept;\\n        uint256 refuse;\\n        address triggeringRules;\\n        address[] canTerminateAddresses;\\n        address[] validatorsAddresses;\\n        bool validationPassed;\\n        uint256 terminationBlock;\\n        bytes votingTokens;\\n    }\\n\\n    struct ProposalConfiguration {\\n        address[] collections;\\n        uint256[] objectIds;\\n        uint256[] weights;\\n        address creationRules;\\n        address triggeringRules;\\n        address[] canTerminateAddresses;\\n        address[] validatorsAddresses;\\n    }\\n\\n    function batchCreate(ProposalCodes[] calldata codeSequences) external returns(bytes32[] memory createdProposalIds);\\n\\n    function list(bytes32[] calldata proposalIds) external view returns(Proposal[] memory);\\n\\n    function votes(bytes32[] calldata proposalIds, address[] calldata voters, bytes32[][] calldata items) external view returns(uint256[][] memory accepts, uint256[][] memory refuses, uint256[][] memory toWithdraw);\\n    function weight(bytes32 code) external view returns(uint256);\\n\\n    function vote(address erc20TokenAddress, bytes memory permitSignature, bytes32 proposalId, uint256 accept, uint256 refuse, address voter, bool alsoTerminate) external payable;\\n    function batchVote(bytes[] calldata data) external payable;\\n\\n    function withdrawAll(bytes32[] memory proposalIds, address voterOrReceiver, bool afterTermination) external;\\n\\n    function terminate(bytes32[] calldata proposalIds) external;\\n\\n    function configuration() external view returns(ProposalConfiguration memory);\\n    function setConfiguration(ProposalConfiguration calldata newValue) external returns(ProposalConfiguration memory oldValue);\\n\\n    function lastProposalId() external view returns(bytes32);\\n\\n    function lastVoteBlock(address voter) external view returns (uint256);\\n\\n    event ProposalCreated(address indexed proposer, address indexed code, bytes32 indexed proposalId);\\n    event ProposalWeight(bytes32 indexed proposalId, address indexed collection, uint256 indexed id, bytes32 key, uint256 weight);\\n    event ProposalTerminated(bytes32 indexed proposalId, bool result, bytes errorData);\\n\\n    event Accept(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n    event MoveToAccept(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n    event RetireAccept(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n\\n    event Refuse(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n    event MoveToRefuse(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n    event RetireRefuse(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\\n}\\n\\ninterface IProposalChecker {\\n    function check(address proposalsManagerAddress, bytes32 id, bytes calldata data, address from, address voter) external view returns(bool);\\n}\\n\\ninterface IExternalProposalsManagerCommands {\\n    function createProposalCodeSequence(bytes32 proposalId, IProposalsManager.ProposalCode[] memory codeSequenceInput, address sender) external returns (address[] memory codeSequence, IProposalsManager.ProposalConfiguration memory localConfiguration);\\n    function proposalCanBeFinalized(bytes32 proposalId, IProposalsManager.Proposal memory proposal, bool validationPassed, bool result) external view returns (bool);\\n    function isVotable(bytes32 proposalId, IProposalsManager.Proposal memory proposal, address from, address voter, bool voteOrWithtraw) external view returns (bytes memory response);\\n}\"\r\n    },\r\n    \"contracts/base/model/IStateManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\n\\ninterface IStateManager is ILazyInitCapableElement {\\n\\n    struct StateEntry {\\n        string key;\\n        bytes32 entryType;\\n        bytes value;\\n    }\\n\\n    function size() external view returns (uint256);\\n    function all() external view returns (StateEntry[] memory);\\n    function partialList(uint256 start, uint256 offset) external view returns (StateEntry[] memory);\\n    function list(string[] calldata keys) external view returns (StateEntry[] memory);\\n    function listByIndices(uint256[] calldata indices) external view returns (StateEntry[] memory);\\n\\n    function exists(string calldata key) external view returns(bool result, uint256 index);\\n\\n    function get(string calldata key) external view returns(StateEntry memory);\\n    function getByIndex(uint256 index) external view returns(StateEntry memory);\\n\\n    function set(StateEntry calldata newValue) external returns(bytes memory replacedValue);\\n    function batchSet(StateEntry[] calldata newValues) external returns(bytes[] memory replacedValues);\\n\\n    function remove(string calldata key) external returns(bytes32 removedType, bytes memory removedValue);\\n    function batchRemove(string[] calldata keys) external returns(bytes32[] memory removedTypes, bytes[] memory removedValues);\\n    function removeByIndices(uint256[] calldata indices) external returns(bytes32[] memory removedTypes, bytes[] memory removedValues);\\n}\"\r\n    },\r\n    \"contracts/base/model/IMicroservicesManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\\\";\\n\\ninterface IMicroservicesManager is ILazyInitCapableElement {\\n\\n    struct Microservice {\\n        string key;\\n        address location;\\n        string methodSignature;\\n        bool submittable;\\n        string returnAbiParametersArray;\\n        bool isInternal;\\n        bool needsSender;\\n    }\\n\\n    function size() external view returns (uint256);\\n    function all() external view returns (Microservice[] memory);\\n    function partialList(uint256 start, uint256 offset) external view returns (Microservice[] memory);\\n    function list(string[] calldata keys) external view returns (Microservice[] memory);\\n    function listByIndices(uint256[] calldata indices) external view returns (Microservice[] memory);\\n\\n    function exists(string calldata key) external view returns(bool result, uint256 index);\\n\\n    function get(string calldata key) external view returns(Microservice memory);\\n    function getByIndex(uint256 index) external view returns(Microservice memory);\\n\\n    function set(Microservice calldata newValue) external returns(Microservice memory replacedValue);\\n    function batchSet(Microservice[] calldata newValues) external returns(Microservice[] memory replacedValues);\\n\\n    event MicroserviceAdded(address indexed sender, bytes32 indexed keyHash, string key, address indexed location, string methodSignature, bool submittable, string returnAbiParametersArray, bool isInternal, bool needsSender);\\n\\n    function remove(string calldata key) external returns(Microservice memory removedValue);\\n    function batchRemove(string[] calldata keys) external returns(Microservice[] memory removedValues);\\n    function removeByIndices(uint256[] calldata indices) external returns(Microservice[] memory removedValues);\\n\\n    event MicroserviceRemoved(address indexed sender, bytes32 indexed keyHash, string key, address indexed location, string methodSignature, bool submittable, string returnAbiParametersArray, bool isInternal, bool needsSender);\\n\\n    function read(string calldata key, bytes calldata data) external view returns(bytes memory returnData);\\n    function submit(string calldata key, bytes calldata data) external payable returns(bytes memory returnData);\\n}\"\r\n    },\r\n    \"contracts/core/model/IOrganization.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@ethereansos/swissknife/contracts/dynamicMetadata/model/IDynamicMetadataCapableElement.sol\\\";\\n\\ninterface IOrganization is IDynamicMetadataCapableElement {\\n\\n    struct Component {\\n        bytes32 key;\\n        address location;\\n        bool active;\\n        bool log;\\n    }\\n\\n    function keyOf(address componentAddress) external view returns(bytes32);\\n    function history(bytes32 key) external view returns(address[] memory componentsAddresses);\\n    function batchHistory(bytes32[] calldata keys) external view returns(address[][] memory componentsAddresses);\\n\\n    function get(bytes32 key) external view returns(address componentAddress);\\n    function list(bytes32[] calldata keys) external view returns(address[] memory componentsAddresses);\\n    function isActive(address subject) external view returns(bool);\\n    function keyIsActive(bytes32 key) external view returns(bool);\\n\\n    function set(Component calldata) external returns(address replacedComponentAddress);\\n    function batchSet(Component[] calldata) external returns (address[] memory replacedComponentAddresses);\\n\\n    event ComponentSet(bytes32 indexed key, address indexed from, address indexed to, bool active);\\n\\n    function submit(address location, bytes calldata payload, address restReceiver) external payable returns(bytes memory response);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@ethereansos/swissknife/contracts/dynamicMetadata/model/IDynamicMetadataCapableElement.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../../generic/model/ILazyInitCapableElement.sol\\\";\\n\\ninterface IDynamicMetadataCapableElement is ILazyInitCapableElement {\\n\\n    function uri() external view returns(string memory);\\n    function plainUri() external view returns(string memory);\\n\\n    function setUri(string calldata newValue) external returns (string memory oldValue);\\n\\n    function dynamicUriResolver() external view returns(address);\\n    function setDynamicUriResolver(address newValue) external returns(address oldValue);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldServer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newServer\",\"type\":\"address\"}],\"name\":\"AdditionalFunction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Host\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"additionalFunctionsServerManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"objectIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"safe\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"batch\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withData\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ITreasuryManager.TransferEntry[]\",\"name\":\"transferEntries\",\"type\":\"tuple[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"results\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"returnDatas\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"host\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitData\",\"type\":\"bytes\"}],\"name\":\"lazyInit\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitResponse\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"newServer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"log\",\"type\":\"bool\"}],\"name\":\"setAdditionalFunction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oldServer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"location\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"subjectIsAuthorizedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"location\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"restReceiver\",\"type\":\"address\"}],\"name\":\"submit\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"objectId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"safe\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withData\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TreasuryManager","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}