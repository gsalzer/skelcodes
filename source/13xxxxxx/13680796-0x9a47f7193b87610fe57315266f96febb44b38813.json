{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n// @Credits Defi Site Network 2021\r\n\r\n/** Tokenomics **\r\n*\r\n* - Total Supply\r\n*   100,000,000,000 (== 10 ** 11)\r\n* - Total Decimal\r\n*   10 ** 18\r\n* - Token Name & Symbol\r\n*   \"AXL INU\", \"AXL\"\r\n*\r\n* - Token distribution\r\n*   25%     Pre Sale\r\n*   30%     Staking Rewards\r\n*   20%     CEX Reserved\r\n*   2.5%    Team Locked For 3 Years\r\n*   15%     DEX Liquidity \r\n*   6.5%    Locked Incentives\r\n*   1%      Airdrop\r\n*   \r\n*   This is presale contract of AXL ERC20 token.\r\n* \r\n*   Top@copyright\r\n*/\r\n\r\npragma solidity ^0.6.12;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal{\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero.\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n    \r\n    // sends ETH or an erc20 token\r\n    function safeTransferBaseToken(address token, address payable to, uint value, bool isERC20) internal {\r\n        if (!isERC20) {\r\n            to.transfer(value);\r\n        } else {\r\n            (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n            require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n        }\r\n    }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds.\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    \r\n    function decimals() external view returns (uint8);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ncontract AXLPresale is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    struct PresaleInfo {\r\n        address sale_token; // Sale token\r\n        uint256 token_rate; // 1 base token = ? s_tokens, fixed price\r\n        uint256 raise_min; // Maximum base token BUY amount per buyer\r\n        uint256 raise_max; // The amount of presale tokens up for presale\r\n        uint256 softcap; // Minimum raise amount\r\n        uint256 hardcap; // Maximum raise amount\r\n        uint256 presale_start;\r\n        uint256 presale_end;\r\n    }\r\n\r\n    struct PresaleStatus {\r\n        bool force_failed; // Set this flag to force fail the presale\r\n        uint256 raised_amount; // Total base currency raised (usually ETH)\r\n        uint256 sold_amount; // Total presale tokens sold\r\n        uint256 token_withdraw; // Total tokens withdrawn post successful presale\r\n        uint256 base_withdraw; // Total base tokens withdrawn on presale failure\r\n        uint256 num_buyers; // Number of unique participants\r\n    }\r\n\r\n    struct BuyerInfo {\r\n        uint256 base; // Total base token (usually ETH) deposited by user, can be withdrawn on presale failure\r\n        uint256 sale; // Num presale tokens a user owned, can be withdrawn on presale success\r\n    }\r\n    \r\n    struct TokenInfo {\r\n        string name;\r\n        string symbol;\r\n        uint256 totalsupply;\r\n        uint256 decimal;\r\n    }\r\n  \r\n    address owner;\r\n\r\n    PresaleInfo public presale_info;\r\n    PresaleStatus public status;\r\n    TokenInfo public tokeninfo;\r\n\r\n    mapping(address => BuyerInfo) public buyers;\r\n\r\n    event UserDepsitedSuccess(address, uint256);\r\n    event UserWithdrawSuccess(uint256);\r\n    event UserWithdrawTokensSuccess(uint256);\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Not presale owner.\");\r\n        _;\r\n    }\r\n\r\n    constructor() public{\r\n\r\n    }\r\n\r\n    function init_private (\r\n        address _sale_token,\r\n        uint256 _token_rate,\r\n        uint256 _raise_min, \r\n        uint256 _raise_max, \r\n        uint256 _softcap, \r\n        uint256 _hardcap,\r\n        uint256 _presale_start,\r\n        uint256 _presale_end\r\n        ) public onlyOwner {\r\n        \r\n        presale_info.sale_token = address(_sale_token);\r\n        presale_info.token_rate = _token_rate;\r\n        presale_info.raise_min = _raise_min;\r\n        presale_info.raise_max = _raise_max;\r\n        presale_info.softcap = _softcap;\r\n        presale_info.hardcap = _hardcap;\r\n\r\n        presale_info.presale_end = _presale_end;\r\n        presale_info.presale_start =  _presale_start;\r\n        \r\n        //Set token token info\r\n        tokeninfo.name = IERC20(presale_info.sale_token).name();\r\n        tokeninfo.symbol = IERC20(presale_info.sale_token).symbol();\r\n        tokeninfo.decimal = IERC20(presale_info.sale_token).decimals();\r\n        tokeninfo.totalsupply = IERC20(presale_info.sale_token).totalSupply();\r\n    }\r\n\r\n    function presaleStatus() public view returns (uint256) {\r\n        if ((block.timestamp > presale_info.presale_end) && (status.raised_amount < presale_info.softcap)) {\r\n            return 3; // Failure\r\n        }\r\n        if (status.raised_amount >= presale_info.hardcap) {\r\n            return 2; // Wonderful - reached to Hardcap\r\n        }\r\n        if ((block.timestamp > presale_info.presale_end) && (status.raised_amount >= presale_info.softcap)) {\r\n            return 2; // SUCCESS - Presale ended with reaching Softcap\r\n        }\r\n        if ((block.timestamp >= presale_info.presale_start) && (block.timestamp <= presale_info.presale_end)) {\r\n            return 1; // ACTIVE - Deposits enabled, now in Presale\r\n        }\r\n            return 0; // QUED - Awaiting start block\r\n    }\r\n    \r\n    // Accepts msg.value for eth or _amount for ERC20 tokens\r\n    function userDeposit () public payable nonReentrant {\r\n        require(presaleStatus() == 1, \"Not Active\");\r\n        require(presale_info.raise_min <= msg.value, \"Balance is insufficent\");\r\n        require(presale_info.raise_max >= msg.value, \"Balance is too much\");\r\n\r\n        BuyerInfo storage buyer = buyers[msg.sender];\r\n\r\n        uint256 amount_in = msg.value;\r\n        uint256 allowance = presale_info.raise_max.sub(buyer.base);\r\n        uint256 remaining = presale_info.hardcap - status.raised_amount;\r\n        allowance = allowance > remaining ? remaining : allowance;\r\n        if (amount_in > allowance) {\r\n            amount_in = allowance;\r\n        }\r\n        uint256 tokensSold = amount_in.mul(presale_info.token_rate).div(10 ** 18);\r\n        require(tokensSold > 0, \"ZERO TOKENS\");\r\n        require(tokensSold <= IERC20(presale_info.sale_token).balanceOf(address(this)), \"Token reamin error\");\r\n        if (buyer.base == 0) {\r\n            status.num_buyers++;\r\n        }\r\n        buyers[msg.sender].base = buyers[msg.sender].base.add(amount_in);\r\n        buyers[msg.sender].sale = buyers[msg.sender].sale.add(tokensSold);\r\n        status.raised_amount = status.raised_amount.add(amount_in);\r\n        status.sold_amount = status.sold_amount.add(tokensSold);\r\n        \r\n        // return unused ETH\r\n        if (amount_in < msg.value) {\r\n            msg.sender.transfer(msg.value.sub(amount_in));\r\n        }\r\n        \r\n        emit UserDepsitedSuccess(msg.sender, msg.value);\r\n    }\r\n    \r\n    // withdraw presale tokens\r\n    // percentile withdrawls allows fee on transfer or rebasing tokens to still work\r\n    function userWithdrawTokens () public nonReentrant {\r\n\r\n        BuyerInfo storage buyer = buyers[msg.sender];\r\n        uint256 tokensRemainingDenominator = status.sold_amount.sub(status.token_withdraw);\r\n        uint256 tokensOwed = IERC20(presale_info.sale_token).balanceOf(address(this)).mul(buyer.sale).div(tokensRemainingDenominator);\r\n        require(tokensOwed > 0, \"Nothing to withdraw.\");\r\n        status.token_withdraw = status.token_withdraw.add(buyer.sale);\r\n        buyers[msg.sender].sale = 0;\r\n        buyers[msg.sender].base = 0;\r\n        TransferHelper.safeTransfer(address(presale_info.sale_token), msg.sender, tokensOwed);\r\n        \r\n        emit UserWithdrawTokensSuccess(tokensOwed);\r\n    }\r\n    \r\n    // On presale failure\r\n    // Percentile withdrawls allows fee on transfer or rebasing tokens to still work\r\n    function userWithdrawBaseTokens () public nonReentrant {\r\n        require(presaleStatus() == 3, \"Not failed.\"); // FAILED\r\n        \r\n        if(msg.sender == owner) {\r\n            ownerWithdrawTokens();\r\n            // return;\r\n        }\r\n        \r\n        // Refund\r\n        BuyerInfo storage buyer = buyers[msg.sender];\r\n        uint256 baseRemainingDenominator = status.raised_amount.sub(status.base_withdraw);\r\n        uint256 remainingBaseBalance = address(this).balance;\r\n        uint256 tokensOwed = remainingBaseBalance.mul(buyer.base).div(baseRemainingDenominator);\r\n        require(tokensOwed > 0, \"Nothing to Withdraw.\");\r\n        status.base_withdraw = status.base_withdraw.add(buyer.base);\r\n        buyer.base = 0;\r\n        buyer.sale = 0;\r\n        \r\n        address payable reciver = payable(msg.sender);\r\n        reciver.transfer(tokensOwed);\r\n        \r\n        emit UserWithdrawSuccess(tokensOwed);\r\n        // TransferHelper.safeTransferBaseToken(address(presale_info.base_token), msg.sender, tokensOwed, false);\r\n    }\r\n    \r\n    // On presale failure\r\n    // Allows the owner to withdraw the tokens they sent for presale\r\n    function ownerWithdrawTokens () private onlyOwner {\r\n        require(presaleStatus() == 3, \"Only failed status.\"); // FAILED\r\n        TransferHelper.safeTransfer(address(presale_info.sale_token), owner, IERC20(presale_info.sale_token).balanceOf(address(this)));\r\n        \r\n        emit UserWithdrawSuccess(IERC20(presale_info.sale_token).balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UserDepsitedSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawTokensSuccess\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sale\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sale_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_raise_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_raise_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_presale_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_presale_end\",\"type\":\"uint256\"}],\"name\":\"init_private\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presale_info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sale_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raise_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raise_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presale_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presale_end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"force_failed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"raised_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sold_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num_buyers\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokeninfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalsupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userWithdrawBaseTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userWithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AXLPresale","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cc5f094cd9c21a7874fdd65f77404e5b5641e6dfada4b94ebe65aa818d590957"}]}