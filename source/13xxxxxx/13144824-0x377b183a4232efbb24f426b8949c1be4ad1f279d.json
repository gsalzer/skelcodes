{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n/** \r\n * METEORA - Pre Sale contract\r\n *\r\n * Lunaris Incorporation - 2021\r\n * https://meteora.lunaris.inc\r\n *\r\n * This is the Pre Sale contract of METEORA. As explained in the Whitepaper,\r\n * the amount of MRA bought is locked for a duration of three (3) months (90 days), \r\n * after which the owner is free to retrieve his MRA in the wallet he used for the\r\n * purchase.\r\n *\r\n * Please note that the lockup period for the investor is reinitialized each \r\n * time he makes a purchase. Also, once the MRA funds have been withdrawn,\r\n * the user address is not whitelisted anymore.\r\n * \r\n * Finally, a getFundsRemainder Function is added to retreive the MRA remainder\r\n * from the contract to the Lunaris address after the Pre Sale operation.\r\n * \r\n * RATIO: 6% - 6,000,000 MRA\r\n * TRANSFERRED FROM THE LUNARIS ADDRESS.\r\n * \r\n**/\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract MeteoraPreSale {\r\n    address private Lunaris = address(0xf0fA5BC481aDB0ed35c180B52aDCBBEad455e808);\r\n    address private Meteora = address(0x0027089Ea6d8a5fD5c1Eec16cE582287E65ac409);\r\n    \r\n    bool private _isPaused;\r\n    \r\n    uint256 public _lockupPeriod = 86400; // 86400 * 90 seconds - 90 days\r\n    uint256 public _MRAPrice = 62500; // 1 ETH = 62500 MRA - 1 MRA = 0.000016 ETH (~ 0.05 USD)\r\n    uint256 public _MRALeft = 6000000000000000000000000;\r\n    uint256 private _contractTimer;\r\n    \r\n    mapping(address => uint256) private _investorBalance;\r\n    mapping(address => bool) private _isAdmin;\r\n    mapping(address => bool) private _whitelist;\r\n    mapping(address => uint256) private _lockupDate;\r\n    \r\n    constructor() {\r\n        _isAdmin[Lunaris] = true;\r\n        _whitelist[Lunaris] = true;\r\n        _contractTimer = block.timestamp;\r\n    }\r\n    \r\n    /**********************/\r\n    /* CONTRACT FUNCTIONS */\r\n    /**********************/\r\n    \r\n    function getMRALeft() public view returns (uint256) {\r\n        return _MRALeft;\r\n    }\r\n    \r\n    function getBalance(address investor) public view returns (uint256) {\r\n        return _investorBalance[investor];\r\n    }\r\n    \r\n    function buyMRA() payable public returns (bool) {\r\n        require(!_isPaused, \"METEORA PRESALE: The Pre Sale is put on pause!\");\r\n        require(_whitelist[_msgSender()], \"METEORA PRESALE: You are not authorized to participate in the Meteora Pre Sale!\");\r\n        require(_MRALeft >= (msg.value * _MRAPrice), \"METEORA PRESALE: There is not enough MRA in the contract to continue the operation!\");\r\n        require(msg.value > 10**17,\"METEORA PRESALE: The minimum investment amount is 0.1 ETH!\");\r\n        \r\n        uint256 ETH = msg.value;\r\n        \r\n        payable(Lunaris).transfer(msg.value);\r\n        \r\n        _MRALeft -= ETH * _MRAPrice;\r\n        _investorBalance[_msgSender()] += ETH * _MRAPrice;\r\n        _lockupDate[_msgSender()] = block.timestamp;\r\n    \r\n        emit HasInvested(_msgSender(), ETH, _lockupDate[_msgSender()]);\r\n        return true;\r\n    }\r\n    \r\n    function withdraw() public returns (bool) {\r\n        require(!_isPaused, \"METEORA PRESALE: The Pre Sale is put on pause!\");\r\n        require(_investorBalance[_msgSender()] > 0, \"METEORA PRESALE: You do not have any MRA!\");\r\n        require(block.timestamp - _lockupDate[_msgSender()] > _lockupPeriod, \"METEORA PRESALE: Your MRA is still in its lockup period!\");\r\n        \r\n        uint256 amount = _investorBalance[_msgSender()];\r\n        \r\n        ERC20(Meteora).transfer(_msgSender(), amount);\r\n        \r\n        _investorBalance[_msgSender()] = 0;\r\n        _whitelist[_msgSender()] = false;\r\n        \r\n        emit HasWithdrawn(_msgSender(), amount, block.timestamp);\r\n        return true;\r\n    }\r\n    \r\n    function getTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n    \r\n    function getLockupDate(address user) public view returns (uint256) {\r\n        return _lockupDate[user];\r\n    }\r\n    \r\n    function getPassedLockupTime(address user) public view returns (uint256) {\r\n        return block.timestamp - _lockupDate[user];\r\n    }\r\n    \r\n    \r\n    /*******************/\r\n    /* ADMIN FUNCTIONS */\r\n    /*******************/\r\n    \r\n    /** \r\n     * The named admin is granted the power to pause and\r\n     * resume the contract for emergencies, as well as\r\n     * whitelisting the addresses for the pre sale.\r\n    **/\r\n    \r\n    function setWhitelist(address user, bool status) public returns (bool) {\r\n        require(getAdmin(_msgSender()) == true, \"METEORA PRESALE: You are not an admin for this operation!\");\r\n        require(user != address(0), \"METEORA PRESALE: You cannot whitelist the Zero Address!\");\r\n        \r\n        _whitelist[user] = status;\r\n        emit Whitelisted(user);\r\n        return _whitelist[user];\r\n    }\r\n    \r\n    function getWhitelist(address user) public view returns (bool) {\r\n        return _whitelist[user];\r\n    }\r\n    \r\n    function setAdmin(address user, bool status) public returns (bool) {\r\n        require(_isAdmin[_msgSender()], \"METEORA PRESALE: You are not an admin for this operation!\");\r\n        require(user != address(0), \"METEORA PRESALE: You cannot admin the Zero Address!\");\r\n        require(user != Lunaris, \"METERORA PRESALE: Lunaris is the big boss, mkay?\");\r\n        \r\n        _isAdmin[user] = status;\r\n        emit AdminSet(_msgSender(), user, status);\r\n        return _isAdmin[user];\r\n    }\r\n    \r\n    function getAdmin(address user) public view returns (bool) {\r\n        return _isAdmin[user];\r\n    }\r\n    \r\n    function setPause(bool status) public returns (bool) {\r\n        require(_isAdmin[_msgSender()], \"METEORA PRESALE: You are not an admin for this operation!\");\r\n        \r\n        _isPaused = status;\r\n        return true;\r\n    }\r\n    \r\n    function getPause() public view returns (bool) {\r\n        return _isPaused;\r\n    }\r\n    \r\n    function getPassedContractTime() public view returns (uint256) {\r\n        return block.timestamp - _contractTimer;\r\n    }\r\n    \r\n    function getFundsRemainder() public returns (bool) {\r\n        require(_msgSender() == Lunaris, \"METEORA PRESALE: You are not Lunaris for this operation!\");\r\n        require(_MRALeft > 0, \"METEORA PRESALE: There is no MRA left anyway!\");\r\n        \r\n        ERC20(Meteora).transfer(Lunaris, _MRALeft);\r\n        _MRALeft = 0;\r\n        \r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**********/\r\n    /* EVENTS */\r\n    /**********/\r\n    \r\n    event Whitelisted(address user);\r\n    event AdminSet(address admin, address user, bool status);\r\n    event HasInvested(address investor, uint256 amount, uint256 time);\r\n    event HasWithdrawn(address investor, uint256 amount, uint256 time);\r\n    \r\n    /***********/\r\n    /* CONTEXT */\r\n    /***********/\r\n    \r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    \r\n    function getContractBalance() public view returns (uint256) {\r\n        return ERC20(Meteora).balanceOf(address(this));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"HasInvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"HasWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_MRALeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MRAPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lockupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMRA\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundsRemainder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLockupDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMRALeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPassedContractTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPassedLockupTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MeteoraPreSale","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0bfaf0ef5b204bc42f8da5150c1a1ef786e35d3df4879b7d525662b58d12b097"}]}