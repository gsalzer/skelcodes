{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.4.22 <0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface CapitalCityOwnership {\r\n    function mintCapitalCityReceiver(\r\n        string calldata _cityName,\r\n        uint _tileIndex,\r\n        bool _isGenesis,\r\n        address _tokenOwner\r\n    ) external returns(uint);\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n/// @dev Contract module which provides a basic access control mechanism, where\r\n///  there is an account (an owner) that can be granted exclusive access to\r\n///  specific functions.\r\n///\r\n///  By default, the owner account will be the one that deploys the contract.\r\n///  This can later be changed with {transferOwnership}.\r\n/// \r\n///  This module is used through inheritance. It will make the modifier\r\n///  onlyOwner available, which can be applied to functions to restrict\r\n///  their use to the owner.\r\n//------------------------------------------------------------------------------\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed _previousOwner,\r\n        address indexed _newOwner\r\n    );\r\n\r\n    //--------------------------------------------------------------------------\r\n    /// @dev Initializes the contract setting the deployer as the initial owner.\r\n    //--------------------------------------------------------------------------\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    //--------------------------------------------------------------------------\r\n    /// @dev Throws if called by any account other than the owner.\r\n    //--------------------------------------------------------------------------\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: sender must be contract owner\");\r\n        _;\r\n    }\r\n\r\n    //--------------------------------------------------------------------------\r\n    /// @dev Leaves the contract without owner. It will not be possible to call\r\n    ///  onlyOwner functions anymore. Can only be called by the current owner.\r\n    ///\r\n    ///  NOTE: Renouncing ownership will leave the contract without an owner,\r\n    ///  thereby removing any functionality that is only available to the owner.\r\n    //--------------------------------------------------------------------------\r\n    function renounceOwnership() external onlyOwner {\r\n        owner = address(0);\r\n        emit OwnershipTransferred(owner, address(0));\r\n    }\r\n\r\n    //--------------------------------------------------------------------------\r\n    /// @dev Transfers ownership of the contract to a new account (_newOwner).\r\n    ///  Can only be called by the current owner.\r\n    //--------------------------------------------------------------------------\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0),\r\n            \"Ownable: new owner cannot be the zero address\");\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n    }\r\n}\r\n\r\ncontract CrusadesCapitalCityMinter is Ownable {\r\n    event OnMintCapital(uint indexed cityID, int tileIndex);\r\n    \r\n    CapitalCityOwnership public cityOwnership = CapitalCityOwnership(0x80BAA18d25303c60D92b04Af296B47bB28191dA0);\r\n    \r\n    //Max tile amount on the planet\r\n    uint constant TILE_COUNT = 40962;\r\n    uint priceToMint = 1 ether / 10;\r\n\r\n    //Bank public bank;\r\n    /**\r\n     * @dev Throws if parameter is zero.\r\n     */\r\n    modifier nonZero(uint _param) {\r\n        require(_param != 0, \"Parameter cannot be zero\");\r\n        _;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Sets the price to mint a new Capital City. Only able to be\r\n    ///  called by the Owner address\r\n    /// @dev Throws if the sender is not the Owner address. Throws if _newPrice\r\n    ///  is zero\r\n    /// @param _newPrice new cost of minting a Capital City in wei\r\n    //-------------------------------------------------------------------------\r\n    function changePriceToMint(uint _newPrice)\r\n        external\r\n        onlyOwner\r\n        nonZero(_newPrice)\r\n    {\r\n        priceToMint = _newPrice;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Creates a Genesis City at _tileIndex. Only able to be called by\r\n    ///  the Owner address\r\n    /// @dev Throws if the sender is not the Owner address. Throws if _tileIndex\r\n    ///  is greater than number of planet tiles. WARNING: SENDER IS RESPONSIBLE\r\n    ///  FOR MAKING SURE _tileIndex IS A VALID TILE.\r\n    /// @param _tileIndex the tile index where the Genesis City will be created\r\n    /// @param _cityName the name to assign the new city\r\n    //-------------------------------------------------------------------------\r\n    function mintGenesis(uint _tileIndex, string calldata _cityName) external onlyOwner {\r\n        require(_tileIndex < TILE_COUNT, \"Index provided is larger than planet size\");\r\n        \r\n        cityOwnership.mintCapitalCityReceiver(_cityName, _tileIndex, true, msg.sender);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Creates multiple Genesis Cities. Only able to be called by\r\n    ///  the Owner address\r\n    /// @dev Throws if the sender is not the Owner address. Throws if\r\n    ///  _tileIndexes is not the same length as _cityNames. Throws if _tileIndex\r\n    ///  is greater than number of planet tiles. WARNING: SENDER IS RESPONSIBLE\r\n    ///  FOR MAKING SURE _tileIndex IS A VALID TILE.\r\n    /// @param _tileIndexes the tile indexes where the Genesis Cities will be created\r\n    //-------------------------------------------------------------------------\r\n    function bulkMintGenesis(uint[] calldata _tileIndexes, string[] calldata _cityNames) external onlyOwner {\r\n        require(_tileIndexes.length == _cityNames.length, \"Arrays cannot be different lengths\");\r\n        for(uint i = 0; i < _tileIndexes.length; ++i) {\r\n            require(_tileIndexes[i] < TILE_COUNT, \"Index provided is larger than planet size\");\r\n            cityOwnership.mintCapitalCityReceiver(_cityNames[i], _tileIndexes[i], true, msg.sender);\r\n        }\r\n        \r\n    }\r\n    //-------------------------------------------------------------------------\r\n    /// @notice init resource, units when mint Capital finished\r\n    /// @dev this data come from Nathan's google sheet.\r\n    /// @param cityID the id where the City index\r\n    //-------------------------------------------------------------------------\r\n    \r\n    // function initResourcesAndUnits(uint cityID) private{\r\n    //     uint[5] memory resources = [uint(30),20,20,5,10];\r\n        \r\n    //     resourceOwnership.grantResources(cityID,resources);\r\n    //     uint[11] memory units = [uint(10),10,10,10,10,10,10,10,10,10,10];\r\n    //     UnitOwnership(externalContracts.unitOwnership()).mintUnits(cityID,units);\r\n    // }\r\n    \r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cityID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tileIndex\",\"type\":\"int256\"}],\"name\":\"OnMintCapital\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tileIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_cityNames\",\"type\":\"string[]\"}],\"name\":\"bulkMintGenesis\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changePriceToMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cityOwnership\",\"outputs\":[{\"internalType\":\"contract CapitalCityOwnership\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tileIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_cityName\",\"type\":\"string\"}],\"name\":\"mintGenesis\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CrusadesCapitalCityMinter","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e9e7ca09da3240602fbbd368e6cf772bdda70fd4a9e55ed6567bf1ef1bfac80d"}]}