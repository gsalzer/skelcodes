{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/HumansERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @author: HodlCaulfield\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport './RandomlyAssigned.sol';\\n\\n/*\\n  __    __   ____  ____  ___      ___       __      _____  ___    ________  \\n /\\\" |  | \\\"\\\\ (\\\"  _||_ \\\" ||\\\"  \\\\    /\\\"  |     /\\\"\\\"\\\\    (\\\\\\\"   \\\\|\\\"  \\\\  /\\\"       ) \\n(:  (__)  :)|   (  ) : | \\\\   \\\\  //   |    /    \\\\   |.\\\\\\\\   \\\\    |(:   \\\\___/  \\n \\\\/      \\\\/ (:  |  | . ) /\\\\\\\\  \\\\/.    |   /' /\\\\  \\\\  |: \\\\.   \\\\\\\\  | \\\\___  \\\\    \\n //  __  \\\\\\\\  \\\\\\\\ \\\\__/ // |: \\\\.        |  //  __'  \\\\ |.  \\\\    \\\\. |  __/  \\\\\\\\   \\n(:  (  )  :) /\\\\\\\\ __ //\\\\ |.  \\\\    /:  | /   /  \\\\\\\\  \\\\|    \\\\    \\\\ | /\\\" \\\\   :)  \\n \\\\__|  |__/ (__________)|___|\\\\__/|___|(___/    \\\\___)\\\\___|\\\\____\\\\)(_______/   \\n                                                                            \\n               ';;;;;'                                                              \\n            ~uPPK%ggg%qwz,                                                           \\n         '7WN%%%gg%%DDbqADX*'                               ,~LDQQQQXj>.             \\n       =6QQ8%%%%%%%%%%%%%DKKKy;                           rUBQ8%MW#NgDDKy~           \\n      |QQ#%%%%%%%%%%%g%%%%%DqWK`                         L#QgRNWR%%##%Rb%q!          \\n      MQQN%%%%%%ggggRDDDRg%%RqgD                         WQQBQ8bR8QQQB8&DQj          \\n      6QQQN%%%%ggDbKDDDRRDR%%D8D                      ,zQQ@QQQNQ@@QQ@@Q@D~``         \\n      `Q@QB%NQ8dqkmSmSSPRN%MNQR;                      %RDMQ@@@QWQQQQQQQ@z            \\n       ,gQQ@Q#BQRDRXgQd%g&@Q8|'                       LdkQ%gQ@QQQBQ@WDS;`            \\n         ;SQ@QWd6mwUkUUS6QQf~                          `jR8QQQQQQQ@%Xi'              \\n           ,;x%RUPm6%UmKb7'                              ,RQBdPm%%QDXI_              \\n              'PBK%QgUn_                                 u%dqQgK%K%DZaQ7             \\n           ^jXywUwwk6Sz~                                ?%dRP^XNPmSXRbQc             \\n          zDZPR5I5SSwz{Qx                               ;fKdm|UMXwfjQ#Q7 `````       \\n         ;DAKdvSPYSmsPdQt                                 ,\\\\6KD8BKjyQgWi,,,:,,'`     \\n         =yodPrPqfPStNBQt                                    XQQQQu=;D}!L7c*==r!,    \\n           ,\\\\Dg%DqSu7N%RP~                                  yP7\\\\i*r^~dn^|Li||\\\\7?'    \\n             .PQdqWq\\\\nN&Qy`                                 qm>^^*|r~di`,;;;^^~.     \\n              wbZRKkPZQQXNy                                 qB%m;.'wdQi              \\n             =qdKBuzDwQn;;`                                 qQ@7   DQ@i              \\n             X%q8| ,q6Q7                                    qQ@7   DQ@o'             \\n             XWQJ   66#7                                 `''d@@7   `K@@I'`           \\n             XgQJ   ADNo,                              `adWQQQ@7    q@Q@Qmyi         \\n             k#QJ   ,UMQJ                              `BQQQBDQ7    q@QQQgQa         \\n          DQNDKQJ    XQDDQy                             mDKqKkd=    YDKKKUKc       \\n\\n    ______    _______    \\t\\t\\t\\t  _____  ___    _______  ___________               \\n   /    \\\" \\\\  /\\\"     \\\"|   \\t\\t\\t\\t (\\\\\\\"   \\\\|\\\"  \\\\  /\\\"     \\\"|(\\\"     _   \\\")              \\n  // ____  \\\\(: ______)   \\t\\t\\t\\t |.\\\\\\\\   \\\\    |(: ______) )__/  \\\\\\\\__/               \\n /  /    ) :)\\\\/    |     \\t\\t\\t\\t |: \\\\.   \\\\\\\\  | \\\\/    |      \\\\\\\\_ /                  \\n(: (____/ // // ___)     \\t\\t\\t\\t |.  \\\\    \\\\. | // ___)      |.  |                  \\n \\\\        / (:  (       \\t\\t\\t\\t  |    \\\\    \\\\ |(:  (         \\\\:  |                  \\n  \\\\\\\"_____/   \\\\__/        \\t\\t\\t\\t  \\\\___|\\\\____\\\\) \\\\__/          \\\\__| \\n*/\\n\\ncontract Human is ERC721, ERC1155Holder, Ownable, RandomlyAssigned {\\n\\tusing Strings for uint256;\\n\\n\\t/*\\n\\t * Private Variables\\n\\t */\\n\\tuint256 private constant NUMBER_OF_GENESIS_HUMANS = 229; // there are 229 Humans in the Genesis Collection\\n\\tuint256 private constant NUMBER_OF_RESERVED_HUMANS = 35;\\n\\tuint256 private constant MAX_HUMANS_SUPPLY = 1500; // collection size (including genesis and honoraries)\\n\\tuint256 private constant MAX_TEAM_HUMANS = 69; // reserved for the team and marketing\\n\\tuint256 private constant MAX_MINTS_PER_ADDRESS = 4; // max total mints (incl. presale, excl. author and genesis claims)\\n\\tuint256 private constant MAX_PRESALE_MINTS_PER_ADDRESS = 2; // max mints during presale per address\\n\\n\\tstruct MintTypes {\\n\\t\\tuint256 _numberOfAuthorMintsByAddress;\\n\\t\\tuint256 _numberOfMintsByAddress;\\n\\t}\\n\\n\\tstruct Coupon {\\n\\t\\tbytes32 r;\\n\\t\\tbytes32 s;\\n\\t\\tuint8 v;\\n\\t}\\n\\n\\tenum CouponType {\\n\\t\\tGenesis,\\n\\t\\tAuthor,\\n\\t\\tPresale\\n\\t}\\n\\n\\tenum SalePhase {\\n\\t\\tLocked,\\n\\t\\tPreSale,\\n\\t\\tPublicSale\\n\\t}\\n\\n\\taddress private immutable _teamAddress =\\n\\t\\t0x5ad0A1eA6d7863c3930a0125bC22770A358Ebee9;\\n\\n\\taddress private immutable _adminSigner;\\n\\taddress private immutable _openseaSharedContractAddress;\\n\\n\\tstring private _defaultUri;\\n\\n\\tstring private _tokenBaseURI;\\n\\n\\t/*\\n\\t * Public Variables\\n\\t */\\n\\n\\tbool public claimActive = false;\\n\\tbool public metadataIsFrozen = false;\\n\\n\\tSalePhase public phase = SalePhase.Locked;\\n\\n\\tuint256 public mintPrice = 0.025 ether;\\n\\tuint256 public teamTokensMinted;\\n\\n\\tmapping(address => MintTypes) public addressToMints;\\n\\n\\t/*\\n\\t * Constructor\\n\\t */\\n\\tconstructor(\\n\\t\\tstring memory uri,\\n\\t\\taddress adminSigner,\\n\\t\\taddress openseaAddress\\n\\t)\\n\\t\\tERC721('Humans Of NFT', 'HUMAN')\\n\\t\\tRandomlyAssigned(\\n\\t\\t\\tMAX_HUMANS_SUPPLY,\\n\\t\\t\\tNUMBER_OF_GENESIS_HUMANS + NUMBER_OF_RESERVED_HUMANS\\n\\t\\t)\\n\\t{\\n\\t\\t_defaultUri = uri;\\n\\t\\t_adminSigner = adminSigner;\\n\\t\\t_openseaSharedContractAddress = openseaAddress;\\n\\t}\\n\\n\\t// ======================================================== Owner Functions\\n\\n\\t/// Set the base URI for the metadata\\n\\t/// @dev modifies the state of the `_tokenBaseURI` variable\\n\\t/// @param URI the URI to set as the base token URI\\n\\tfunction setBaseURI(string memory URI) external onlyOwner {\\n\\t\\trequire(!metadataIsFrozen, 'Metadata is permanently frozen');\\n\\t\\t_tokenBaseURI = URI;\\n\\t}\\n\\n\\t/// Freezes the metadata\\n\\t/// @dev sets the state of `metadataIsFrozen` to true\\n\\t/// @notice permamently freezes the metadata so that no more changes are possible\\n\\tfunction freezeMetadata() external onlyOwner {\\n\\t\\trequire(!metadataIsFrozen, 'Metadata is already frozen');\\n\\t\\tmetadataIsFrozen = true;\\n\\t}\\n\\n\\t/// Adjust the mint price\\n\\t/// @dev modifies the state of the `mintPrice` variable\\n\\t/// @notice sets the price for minting a token\\n\\t/// @param newPrice_ The new price for minting\\n\\tfunction adjustMintPrice(uint256 newPrice_) external onlyOwner {\\n\\t\\tmintPrice = newPrice_;\\n\\t}\\n\\n\\t/// Advance Phase\\n\\t/// @dev Advance the sale phase state\\n\\t/// @notice Advances sale phase state incrementally\\n\\tfunction enterPhase(SalePhase phase_) external onlyOwner {\\n\\t\\trequire(uint8(phase_) > uint8(phase), 'can only advance phases');\\n\\t\\tphase = phase_;\\n\\t}\\n\\n\\t/// Activate claiming\\n\\t/// @dev set the state of `claimActive` variable to true\\n\\t/// @notice Activate the claiming event\\n\\tfunction activateClaiming() external onlyOwner {\\n\\t\\tclaimActive = true;\\n\\t}\\n\\n\\t/// Reserve tokens for the team + marketing\\n\\t/// @dev Mints the number of tokens passed in as count to the _teamAddress\\n\\t/// @param count The number of tokens to mint\\n\\tfunction devReserveTokens(uint256 count)\\n\\t\\texternal\\n\\t\\tonlyOwner\\n\\t\\tensureAvailabilityFor(count)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\tcount + teamTokensMinted <= MAX_TEAM_HUMANS,\\n\\t\\t\\t'Exceeds the reserved supply of team tokens'\\n\\t\\t);\\n\\t\\tfor (uint256 i = 0; i < count; i++) {\\n\\t\\t\\t_mintRandomId(_teamAddress);\\n\\t\\t}\\n\\t\\tteamTokensMinted += count;\\n\\t}\\n\\n\\t/// Disburse payments\\n\\t/// @dev transfers amounts that correspond to addresses passeed in as args\\n\\t/// @param payees_ recipient addresses\\n\\t/// @param amounts_ amount to payout to address with corresponding index in the `payees_` array\\n\\tfunction disbursePayments(\\n\\t\\taddress[] memory payees_,\\n\\t\\tuint256[] memory amounts_\\n\\t) external onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\tpayees_.length == amounts_.length,\\n\\t\\t\\t'Payees and amounts length mismatch'\\n\\t\\t);\\n\\t\\tfor (uint256 i; i < payees_.length; i++) {\\n\\t\\t\\tmakePaymentTo(payees_[i], amounts_[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/// Make a payment\\n\\t/// @dev internal fn called by `disbursePayments` to send Ether to an address\\n\\tfunction makePaymentTo(address address_, uint256 amt_) private {\\n\\t\\t(bool success, ) = address_.call{value: amt_}('');\\n\\t\\trequire(success, 'Transfer failed.');\\n\\t}\\n\\n\\t// ======================================================== External Functions\\n\\n\\t/// Claim Genesis Tokens\\n\\t/// @dev mints genesis token IDs using verified coupons signed by an admin address\\n\\t/// @notice uses the the coupon supplied to confirm that only the owner of the original ID can claim\\n\\t/// @param idxsToClaim the indexes for the IDs array of the tokens claimed in this TX\\n\\t/// @param idsOfOwner IDs of genesis tokens belonging to the caller used to verify the coupon\\n\\t/// @param coupon coupon for verifying the signer\\n\\tfunction claimReservedTokensByIds(\\n\\t\\taddress owner_,\\n\\t\\tuint256[] calldata idxsToClaim,\\n\\t\\tuint256[] calldata idsOfOwner,\\n\\t\\tCoupon memory coupon\\n\\t) external {\\n\\t\\trequire(claimActive, 'Claim event is not active');\\n\\t\\tbytes32 digest = keccak256(\\n\\t\\t\\tabi.encode(CouponType.Genesis, idsOfOwner, owner_)\\n\\t\\t);\\n\\t\\trequire(_isVerifiedCoupon(digest, coupon), 'Invalid coupon');\\n\\n\\t\\tfor (uint256 i; i < idxsToClaim.length; i++) {\\n\\t\\t\\tuint256 tokenId = idsOfOwner[idxsToClaim[i]];\\n\\t\\t\\t_claimReservedToken(owner_, tokenId);\\n\\t\\t}\\n\\t}\\n\\n\\t/// Claim Author Tokens\\n\\t/// @dev mints the qty of tokens verified using coupons signed by an admin signer\\n\\t/// @notice claims free tokens earned by Authors\\n\\t/// @param count number of tokens to claim in transaction\\n\\t/// @param allotted total number of tokens author is allowed to claim\\n\\t/// @param coupon coupon for verifying the signer\\n\\tfunction claimAuthorTokens(\\n\\t\\tuint256 count,\\n\\t\\tuint256 allotted,\\n\\t\\tCoupon memory coupon\\n\\t) public ensureAvailabilityFor(count) {\\n\\t\\trequire(claimActive, 'Claim event is not active');\\n\\t\\tbytes32 digest = keccak256(\\n\\t\\t\\tabi.encode(CouponType.Author, allotted, msg.sender)\\n\\t\\t);\\n\\t\\trequire(_isVerifiedCoupon(digest, coupon), 'Invalid coupon');\\n\\t\\trequire(\\n\\t\\t\\tcount + addressToMints[msg.sender]._numberOfAuthorMintsByAddress <=\\n\\t\\t\\t\\tallotted,\\n\\t\\t\\t'Exceeds number of earned Tokens'\\n\\t\\t);\\n\\t\\taddressToMints[msg.sender]._numberOfAuthorMintsByAddress += count;\\n\\t\\tfor (uint256 i; i < count; i++) {\\n\\t\\t\\t_mintRandomId(msg.sender);\\n\\t\\t}\\n\\t}\\n\\n\\t/// Mint during presale\\n\\t/// @dev mints by addresses validated using verified coupons signed by an admin signer\\n\\t/// @notice mints tokens with randomized token IDs to addresses eligible for presale\\n\\t/// @param count number of tokens to mint in transaction\\n\\t/// @param coupon coupon signed by an admin coupon\\n\\tfunction mintPresale(uint256 count, Coupon memory coupon)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tensureAvailabilityFor(count)\\n\\t\\tvalidateEthPayment(count)\\n\\t{\\n\\t\\trequire(phase == SalePhase.PreSale, 'Presale event is not active');\\n\\t\\trequire(\\n\\t\\t\\tcount + addressToMints[msg.sender]._numberOfMintsByAddress <=\\n\\t\\t\\t\\tMAX_PRESALE_MINTS_PER_ADDRESS,\\n\\t\\t\\t'Exceeds number of presale mints allowed'\\n\\t\\t);\\n\\t\\tbytes32 digest = keccak256(abi.encode(CouponType.Presale, msg.sender));\\n\\t\\trequire(_isVerifiedCoupon(digest, coupon), 'Invalid coupon');\\n\\n\\t\\taddressToMints[msg.sender]._numberOfMintsByAddress += count;\\n\\n\\t\\tfor (uint256 i; i < count; i++) {\\n\\t\\t\\t_mintRandomId(msg.sender);\\n\\t\\t}\\n\\t}\\n\\n\\t/// Public minting open to all\\n\\t/// @dev mints tokens during public sale, limited by `MAX_MINTS_PER_ADDRESS`\\n\\t/// @notice mints tokens with randomized IDs to the sender's address\\n\\t/// @param count number of tokens to mint in transaction\\n\\tfunction mint(uint256 count)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tvalidateEthPayment(count)\\n\\t\\tensureAvailabilityFor(count)\\n\\t{\\n\\t\\trequire(phase == SalePhase.PublicSale, 'Public sale is not active');\\n\\t\\trequire(\\n\\t\\t\\tcount + addressToMints[msg.sender]._numberOfMintsByAddress <=\\n\\t\\t\\t\\tMAX_MINTS_PER_ADDRESS,\\n\\t\\t\\t'Exceeds maximum allowable mints'\\n\\t\\t);\\n\\t\\taddressToMints[msg.sender]._numberOfMintsByAddress += count;\\n\\t\\tfor (uint256 i; i < count; i++) {\\n\\t\\t\\t_mintRandomId(msg.sender);\\n\\t\\t}\\n\\t}\\n\\n\\t/// override ERC1155Received to mint replacement tokens\\n\\t/// @dev receive a verified token and mint its replacement\\n\\t/// @param from the account who initiated the transfer and will claim the mint\\n\\t/// @param id the opensea token ID\\n\\t/// @param data encoded genesis ID and coupon\\n\\tfunction onERC1155Received(\\n\\t\\taddress,\\n\\t\\taddress from,\\n\\t\\tuint256 id,\\n\\t\\tuint256,\\n\\t\\tbytes memory data\\n\\t) public virtual override returns (bytes4) {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == _openseaSharedContractAddress,\\n\\t\\t\\t'Sender not approved'\\n\\t\\t);\\n\\t\\t(uint256 genesisId, Coupon memory coupon) = abi.decode(\\n\\t\\t\\tdata,\\n\\t\\t\\t(uint256, Coupon)\\n\\t\\t);\\n\\n\\t\\tbytes32 digest = keccak256(\\n\\t\\t\\tabi.encode(CouponType.Genesis, genesisId, id)\\n\\t\\t);\\n\\t\\trequire(_isVerifiedCoupon(digest, coupon), 'Invalid coupon');\\n\\t\\t_claimReservedToken(from, genesisId);\\n\\t\\treturn this.onERC1155Received.selector;\\n\\t}\\n\\n\\t/// Override the batch receive\\n\\t/// @dev revert as nobody should ever call this and we don't want the contract to receive any other tokens\\n\\tfunction onERC1155BatchReceived(\\n\\t\\taddress,\\n\\t\\taddress,\\n\\t\\tuint256[] memory,\\n\\t\\tuint256[] memory,\\n\\t\\tbytes memory\\n\\t) public override returns (bytes4) {\\n\\t\\trevert('Batch Receiving not allowed.');\\n\\t}\\n\\n\\t// ======================================================== Overrides\\n\\n\\t/// Return the tokenURI for a given ID\\n\\t/// @dev overrides ERC721's `tokenURI` function and returns either the `_tokenBaseURI` or a custom URI\\n\\t/// @notice reutrns the tokenURI using the `_tokenBase` URI if the token ID hasn't been suppleid with a unique custom URI\\n\\tfunction tokenURI(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride(ERC721)\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\trequire(_exists(tokenId), 'Cannot query non-existent token');\\n\\n\\t\\treturn\\n\\t\\t\\tbytes(_tokenBaseURI).length > 0\\n\\t\\t\\t\\t? string(\\n\\t\\t\\t\\t\\tabi.encodePacked(_tokenBaseURI, '/', tokenId.toString())\\n\\t\\t\\t\\t)\\n\\t\\t\\t\\t: _defaultUri;\\n\\t}\\n\\n\\t/// override supportsInterface because two base classes define it\\n\\t/// @dev See {IERC165-supportsInterface}.\\n\\tfunction supportsInterface(bytes4 interfaceId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride(ERC721, ERC1155Receiver)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\tERC721.supportsInterface(interfaceId) ||\\n\\t\\t\\tERC1155Receiver.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t// ======================================================== Internal Functions\\n\\n\\t/// @dev check that the coupon sent was signed by the admin signer\\n\\tfunction _isVerifiedCoupon(bytes32 digest, Coupon memory coupon)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\t// address signer = digest.recover(signature);\\n\\t\\taddress signer = ecrecover(digest, coupon.v, coupon.r, coupon.s);\\n\\t\\trequire(signer != address(0), 'ECDSA: invalid signature'); // Added check for zero address\\n\\t\\treturn signer == _adminSigner;\\n\\t}\\n\\n\\t/// @dev internal check to ensure a genesis token ID, or ID outside of the collection, doesn't get minted\\n\\tfunction _mintRandomId(address to) private {\\n\\t\\tuint256 id = nextToken();\\n\\t\\tassert(\\n\\t\\t\\tid > NUMBER_OF_GENESIS_HUMANS + NUMBER_OF_RESERVED_HUMANS &&\\n\\t\\t\\t\\tid <= MAX_HUMANS_SUPPLY\\n\\t\\t);\\n\\t\\t_safeMint(to, id);\\n\\t}\\n\\n\\t/// @dev mints a token with a known ID, must fall within desired range\\n\\tfunction _claimReservedToken(address to, uint256 id) internal {\\n\\t\\tassert(id != 0);\\n\\t\\tassert(id <= NUMBER_OF_GENESIS_HUMANS + NUMBER_OF_RESERVED_HUMANS);\\n\\t\\tif (!_exists(id)) {\\n\\t\\t\\t_safeMint(to, id);\\n\\t\\t}\\n\\t}\\n\\n\\t// ======================================================== Modifiers\\n\\n\\t/// Modifier to validate Eth payments on payable functions\\n\\t/// @dev compares the product of the state variable `_mintPrice` and supplied `count` to msg.value\\n\\t/// @param count factor to multiply by\\n\\tmodifier validateEthPayment(uint256 count) {\\n\\t\\trequire(\\n\\t\\t\\tmintPrice * count <= msg.value,\\n\\t\\t\\t'Ether value sent is not correct'\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n} // End of Contract\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/RandomlyAssigned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport './WithLimitedSupply.sol';\\n\\n/// @author Modified version of original code by 1001.digital\\n/// @title Randomly assign tokenIDs from a given set of tokens.\\nabstract contract RandomlyAssigned is WithLimitedSupply {\\n\\t// Used for random index assignment\\n\\tmapping(uint256 => uint256) private tokenMatrix;\\n\\n\\t// The initial token ID\\n\\tuint256 private immutable startFrom;\\n\\n\\t/// Instanciate the contract\\n\\t/// @param maxSupply_ how many tokens this collection should hold\\n\\t/// @param numReserved_ the number of tokens reserved whose IDs dont come from the randomizer\\n\\tconstructor(uint256 maxSupply_, uint256 numReserved_)\\n\\t\\tWithLimitedSupply(maxSupply_, numReserved_)\\n\\t{\\n\\t\\tstartFrom = numReserved_ + 1;\\n\\t}\\n\\n\\t/// Get the next token ID\\n\\t/// @dev Randomly gets a new token ID and keeps track of the ones that are still available.\\n\\t/// @return the next token ID\\n\\tfunction nextToken() internal override returns (uint256) {\\n\\t\\tuint256 maxIndex = maxAvailableSupply() - tokenCount();\\n\\t\\tuint256 random = uint256(\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\t\\tblock.coinbase,\\n\\t\\t\\t\\t\\tblock.difficulty,\\n\\t\\t\\t\\t\\tblock.gaslimit,\\n\\t\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t) % maxIndex;\\n\\n\\t\\tuint256 value = 0;\\n\\t\\tif (tokenMatrix[random] == 0) {\\n\\t\\t\\t// If this matrix position is empty, set the value to the generated random number.\\n\\t\\t\\tvalue = random;\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, use the previously stored number from the matrix.\\n\\t\\t\\tvalue = tokenMatrix[random];\\n\\t\\t}\\n\\n\\t\\t// If the last available tokenID is still unused...\\n\\t\\tif (tokenMatrix[maxIndex - 1] == 0) {\\n\\t\\t\\t// ...store that ID in the current matrix position.\\n\\t\\t\\ttokenMatrix[random] = maxIndex - 1;\\n\\t\\t} else {\\n\\t\\t\\t// ...otherwise copy over the stored number to the current matrix position.\\n\\t\\t\\ttokenMatrix[random] = tokenMatrix[maxIndex - 1];\\n\\t\\t}\\n\\n\\t\\t// Increment counts (ie. qty minted)\\n\\t\\tsuper.nextToken();\\n\\n\\t\\treturn value + startFrom;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/WithLimitedSupply.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @author Modified version of original code by 1001.digital\\n/// @title A token tracker that limits the token supply and increments token IDs on each new mint.\\nabstract contract WithLimitedSupply {\\n\\t// Keeps track of how many we have minted\\n\\tuint256 private _tokenCount;\\n\\n\\t/// @dev The maximum count of tokens this token tracker will issue.\\n\\tuint256 private immutable _maxAvailableSupply;\\n\\n\\t/// Instanciate the contract\\n\\t/// @param maxSupply_ how many tokens this collection should hold\\n\\tconstructor(uint256 maxSupply_, uint256 reserved_) {\\n\\t\\t_maxAvailableSupply = maxSupply_ - reserved_;\\n\\t}\\n\\n\\tfunction maxAvailableSupply() public view returns (uint256) {\\n\\t\\treturn _maxAvailableSupply;\\n\\t}\\n\\n\\t/// @dev Get the current token count\\n\\t/// @return the created token count\\n\\t/// TODO: if this is not required externally, does making it `public view` use unneccary gas?\\n\\tfunction tokenCount() public view returns (uint256) {\\n\\t\\treturn _tokenCount;\\n\\t}\\n\\n\\t/// @dev Check whether tokens are still available\\n\\t/// @return the available token count\\n\\tfunction availableTokenCount() public view returns (uint256) {\\n\\t\\treturn maxAvailableSupply() - tokenCount();\\n\\t}\\n\\n\\t/// @dev Increment the token count and fetch the latest count\\n\\t/// @return the next token id\\n\\tfunction nextToken() internal virtual ensureAvailability returns (uint256) {\\n\\t\\treturn _tokenCount++;\\n\\t}\\n\\n\\t/// @dev Check whether another token is still available\\n\\tmodifier ensureAvailability() {\\n\\t\\trequire(availableTokenCount() > 0, 'No more tokens available');\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @param amount Check whether number of tokens are still available\\n\\t/// @dev Check whether tokens are still available\\n\\tmodifier ensureAvailabilityFor(uint256 amount) {\\n\\t\\trequire(\\n\\t\\t\\tavailableTokenCount() >= amount,\\n\\t\\t\\t'Requested number of tokens not available'\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"adminSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"openseaAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateClaiming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfAuthorMintsByAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfMintsByAddress\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice_\",\"type\":\"uint256\"}],\"name\":\"adjustMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allotted\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Human.Coupon\",\"name\":\"coupon\",\"type\":\"tuple\"}],\"name\":\"claimAuthorTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"idxsToClaim\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"idsOfOwner\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Human.Coupon\",\"name\":\"coupon\",\"type\":\"tuple\"}],\"name\":\"claimReservedTokensByIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"devReserveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"payees_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"disbursePayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Human.SalePhase\",\"name\":\"phase_\",\"type\":\"uint8\"}],\"name\":\"enterPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAvailableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataIsFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"internalType\":\"struct Human.Coupon\",\"name\":\"coupon\",\"type\":\"tuple\"}],\"name\":\"mintPresale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase\",\"outputs\":[{\"internalType\":\"enum Human.SalePhase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Human","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c7eb865d2d4f6033cae0e81248173209a2e6843d000000000000000000000000495f947276749ce646f68ac8c248420045cb7b5e000000000000000000000000000000000000000000000000000000000000005668747470733a2f2f68756d616e736f666e66742e6d7970696e6174612e636c6f75642f697066732f516d59646b43714e314b666234695575425631734d506641644279483268486d684e66576a67784447474c5a397300000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}