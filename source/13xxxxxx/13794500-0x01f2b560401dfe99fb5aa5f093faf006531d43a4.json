{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/extensions/ThePixelsChristmasExtension.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// ______  __  __   ______       _____    __  __   _____    ______\\n// /\\\\__  _\\\\/\\\\ \\\\_\\\\ \\\\ /\\\\  ___\\\\     /\\\\  __-. /\\\\ \\\\/\\\\ \\\\ /\\\\  __-. /\\\\  ___\\\\\\n// \\\\/_/\\\\ \\\\/\\\\ \\\\  __ \\\\\\\\ \\\\  __\\\\     \\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\ \\\\_\\\\ \\\\\\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\  __\\\\\\n//   \\\\ \\\\_\\\\ \\\\ \\\\_\\\\ \\\\_\\\\\\\\ \\\\_____\\\\    \\\\ \\\\____- \\\\ \\\\_____\\\\\\\\ \\\\____- \\\\ \\\\_____\\\\\\n//    \\\\/_/  \\\\/_/\\\\/_/ \\\\/_____/     \\\\/____/  \\\\/_____/ \\\\/____/  \\\\/_____/\\n//\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./ThePixelsBaseExtender.sol\\\";\\nimport \\\"./../IThePixelsDNAUpdater.sol\\\";\\n\\ncontract ThePixelsChristmasExtension is Ownable, ThePixelsBaseExtender, IThePixelsDNAUpdater {\\n  bool public isLive;\\n  constructor() ThePixelsBaseExtender(1)  {}\\n\\n  function setIsLive(bool _isLive) external onlyOwner {\\n    isLive = _isLive;\\n  }\\n\\n  function setPixelsAddress(address _pixelsAddress) external onlyOwner {\\n    _setPixelsAddress(_pixelsAddress);\\n  }\\n\\n  function canUpdateDNAExtension(\\n    address _owner,\\n    uint256 _tokenId,\\n    uint256 _dna,\\n    uint256 _dnaExtension\\n  ) external view override returns (bool) {\\n    return isLive;\\n  }\\n\\n  function getUpdatedDNAExtension(\\n    address _owner,\\n    uint256 _tokenId,\\n    uint256 _dna,\\n    uint256 _dnaExtension\\n  ) external override returns (uint256) {\\n    require(isLive, \\\"Extension is not live yet.\\\");\\n    require(_dnaExtension == 0, \\\"Already extended.\\\");\\n    require(!_isSpecialEdition(_dna), \\\"Can't extend special pixels\\\");\\n\\n    uint256 rnd = _rnd(_owner, _tokenId, _dna, _dnaExtension) % 100;\\n    uint256 variant;\\n\\n    if (rnd >= 85) {\\n      variant = 3;\\n    }else if (rnd < 85 && rnd >= 50) {\\n      variant = 2;\\n    }else{\\n      variant = 1;\\n    }\\n\\n    uint256 newExtension = _getAddedExtension(0, variant);\\n    emit Extended(_owner, _tokenId, _dna, newExtension);\\n    return newExtension;\\n  }\\n\\n  function getExtendStatusOf(uint256[] memory tokens) public view returns (bool[] memory) {\\n    bool[] memory result = new bool[](tokens.length);\\n    for(uint256 i=0; i<tokens.length; i++) {\\n      uint256 dnaExtension = IThePixel(pixelsAddress).pixelDNAExtensions(tokens[i]);\\n      if (dnaExtension == 0) {\\n        result[i] = true;\\n      }\\n    }\\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/ThePixelsBaseExtender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// ______  __  __   ______       _____    __  __   _____    ______\\n// /\\\\__  _\\\\/\\\\ \\\\_\\\\ \\\\ /\\\\  ___\\\\     /\\\\  __-. /\\\\ \\\\/\\\\ \\\\ /\\\\  __-. /\\\\  ___\\\\\\n// \\\\/_/\\\\ \\\\/\\\\ \\\\  __ \\\\\\\\ \\\\  __\\\\     \\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\ \\\\_\\\\ \\\\\\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\  __\\\\\\n//   \\\\ \\\\_\\\\ \\\\ \\\\_\\\\ \\\\_\\\\\\\\ \\\\_____\\\\    \\\\ \\\\____- \\\\ \\\\_____\\\\\\\\ \\\\____- \\\\ \\\\_____\\\\\\n//    \\\\/_/  \\\\/_/\\\\/_/ \\\\/_____/     \\\\/____/  \\\\/_____/ \\\\/____/  \\\\/_____/\\n//\\n\\npragma solidity ^0.8.0;\\n\\ninterface IThePixel {\\n  function pixelDNAExtensions(uint _tokenId) external view returns (uint256);\\n  function tokensOfOwner(address _owner) external view returns (uint256[] memory);\\n}\\n\\ncontract ThePixelsBaseExtender {\\n  uint256 public decimal;\\n  address public pixelsAddress;\\n\\n  event Extended(\\n    address _owner,\\n    uint256 _tokenId,\\n    uint256 _dna,\\n    uint256 _dnaExtension\\n  );\\n\\n  constructor(uint256 _decimal) {\\n    decimal = _decimal;\\n  }\\n\\n  function _setPixelsAddress(address _pixelsAddress) internal {\\n    pixelsAddress = _pixelsAddress;\\n  }\\n\\n  function _getAddedExtension(uint256 extension, uint256 index) internal returns (uint256) {\\n    return extension + index * decimal;\\n  }\\n\\n  function _rnd(address _owner, uint256 _tokenId, uint256 _dna, uint256 _dnaExtension) internal returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(\\n      _owner,\\n      _tokenId,\\n      _dna,\\n      _dnaExtension,\\n      block.timestamp\\n    )));\\n  }\\n\\n  function _isSpecialEdition(uint256 _dna) internal view returns (bool) {\\n    if (_dna == 0 || _dna == 1 || _dna == 2 || _dna == 3 || _dna == 4) {\\n      return true;\\n    }\\n    return false;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/IThePixelsDNAUpdater.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// ______  __  __   ______       _____    __  __   _____    ______\\n// /\\\\__  _\\\\/\\\\ \\\\_\\\\ \\\\ /\\\\  ___\\\\     /\\\\  __-. /\\\\ \\\\/\\\\ \\\\ /\\\\  __-. /\\\\  ___\\\\\\n// \\\\/_/\\\\ \\\\/\\\\ \\\\  __ \\\\\\\\ \\\\  __\\\\     \\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\ \\\\_\\\\ \\\\\\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\  __\\\\\\n//   \\\\ \\\\_\\\\ \\\\ \\\\_\\\\ \\\\_\\\\\\\\ \\\\_____\\\\    \\\\ \\\\____- \\\\ \\\\_____\\\\\\\\ \\\\____- \\\\ \\\\_____\\\\\\n//    \\\\/_/  \\\\/_/\\\\/_/ \\\\/_____/     \\\\/____/  \\\\/_____/ \\\\/____/  \\\\/_____/\\n//\\n\\npragma solidity ^0.8.0;\\n\\ninterface IThePixelsDNAUpdater {\\n  function canUpdateDNAExtension(\\n    address _owner,\\n    uint256 _tokenId,\\n    uint256 _dna,\\n    uint256 _dnaExtension\\n  ) external view returns (bool);\\n\\n  function getUpdatedDNAExtension(\\n    address _owner,\\n    uint256 _tokenId,\\n    uint256 _dna,\\n    uint256 _dnaExtension\\n  ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dna\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dnaExtension\",\"type\":\"uint256\"}],\"name\":\"Extended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dna\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dnaExtension\",\"type\":\"uint256\"}],\"name\":\"canUpdateDNAExtension\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"getExtendStatusOf\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dna\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dnaExtension\",\"type\":\"uint256\"}],\"name\":\"getUpdatedDNAExtension\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pixelsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isLive\",\"type\":\"bool\"}],\"name\":\"setIsLive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pixelsAddress\",\"type\":\"address\"}],\"name\":\"setPixelsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ThePixelsChristmasExtension","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}