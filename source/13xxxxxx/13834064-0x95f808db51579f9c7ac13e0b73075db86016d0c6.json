{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Smart contract for NFT generation in Unicus Platform\r\n * Internally uses the Auction smart contract to create Auctions, place bids\r\n * and End Auctions\r\n * Creates NFTs when Auction Ends and transfers it to the Winning Bidder\r\n * Mapping of NFT token Ids and Ipfs Hashes are maintained.\r\n */\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/ERC721Enumerable.sol)\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\r\n\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Smart contract to create Auctions, place bids and End Auctions\r\n * in Unicus Nft Platform\r\n *\r\n */\r\n\r\n\r\n\r\ncontract Auction  {\r\n\r\n\r\n    // Owner of the Auction. \r\n    address private _owner;\r\n    // Ipfs hash of asset metadata uploaded onto ipfs\r\n    string  private _assetHash;\r\n    // Auction start time\r\n    uint256 private _startTime;\r\n    // Base Price set for the Auction\r\n    uint256 private _basePrice;\r\n    // Total amount collected for the Auction\r\n    uint256 private _totalAmount;\r\n \r\n    // Is the Auction cancelled\r\n    bool private _canceled;\r\n    // Is the Auction finished\r\n    bool private _finished;\r\n    // Keep track of address of the bidder who placed the highest bid\r\n    address private _highestBidder;\r\n    // Array of the the bidders who placed bids in this Auction\r\n    address[] private _bidders;\r\n    // Mapping from bidder address to the price of the bid placed\r\n    mapping(address => uint256) private _bidderBidPriceMappings;\r\n\r\n    // ERC20 token that is accepted for the auction\r\n    IERC20 private _token;\r\n\r\n    /**\r\n     * @dev Starts the Auction by  setting an `owner` ,`basePrice` ,`Ipfs asset hash` and a `Start time` .\r\n     * \r\n     */\r\n    constructor(address owner_,uint256 basePrice_, string memory assetHash_,IERC20 token_)   {\r\n        require(basePrice_ > 0 , \"Base price should be greater than 0\" );\r\n        _owner = owner_;\r\n        _assetHash = assetHash_;\r\n        _basePrice = basePrice_;\r\n        _startTime = block.timestamp;\r\n        _token = token_;\r\n    }\r\n\r\n    /**\r\n     * @dev Places a bid on the Auction associated with the Ipfs hash. Bid price will be transfered to the Wallet \r\n     * of the smart contract\r\n     * Calling conditions:\r\n     *\r\n     * - Any user in Unicus platform can place a bid during duration of the Auction.\r\n     * - The Owner of the Auction cannot place a bid\r\n     * - The bid amount should be greater than the base price set for the Auction\r\n     *\r\n     * @param bidder_ Address of the bidder placing the bid\r\n     * @param bidPrice_ Price of the bid  \r\n     * @return true if the bid is accepted and the bid price is received in address of the smart contract\r\n     *\r\n     * Emits a {BidPlaced} event.\r\n     */\r\n    function placeBid(address bidder_, uint256 bidPrice_) public \r\n        onlyAfterStart\r\n        onlyNotCanceled\r\n        returns (bool )\r\n    {\r\n        uint256 newBid = _bidderBidPriceMappings[bidder_] + bidPrice_;\r\n        uint256 _highestBid = _bidderBidPriceMappings[_highestBidder];\r\n        _bidderBidPriceMappings[bidder_] = newBid;\r\n        if(!_isBidderAlreadyPresent(bidder_)) {\r\n            _bidders.push(bidder_);\r\n        }\r\n        if (newBid > _highestBid) {\r\n            if (msg.sender != _highestBidder) {\r\n                _highestBidder = bidder_;\r\n            }\r\n        }\r\n        _totalAmount += bidPrice_;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev validates the bid placed for the auction\r\n     *\r\n     * @param bidder_ Address of the bidder placing the bid\r\n     * @param bidPrice_ Price of the bid  \r\n     * @return true if the bid price and the bid owner are verified\r\n     */\r\n    function validateBid(address bidder_, uint256 bidPrice_) public view returns (bool) {\r\n        require (bidder_ != _owner,\"Owner cannont place a bid\");\r\n        if(!_isBidderAlreadyPresent(bidder_)) {\r\n            require  (bidPrice_ > _basePrice, \"Bid amount less than base price\") ;\r\n        } else {\r\n            require  (bidPrice_ > 0, \"Bid amount should not be 0\") ;\r\n        }\r\n         return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the bidder_ is already participating in this Auction\r\n     *\r\n     * @return true if the bidder_ has already placed a bid else returns false\r\n     */\r\n    function _isBidderAlreadyPresent(address bidder_) internal view returns (bool ) {\r\n        for (uint256 i; i < _bidders.length ; i++) {\r\n                if(_bidders[i] == bidder_)\r\n                    return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the start time of the Auction\r\n     * @param owner_ owner of the Auction    \r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can invoke this \r\n     * @return time the Auction was register on block chain\r\n     *\r\n     */\r\n    function getStartTime(address owner_) public view returns(uint256 ) {\r\n        require(owner_ == _owner, \"Only Auction owner can perform this operation\");\r\n        return _startTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total amount collected for the Auction\r\n     * @param owner_ owner of the Auction    \r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can invoke this \r\n     * @return  amount collected for the Auction.\r\n     *\r\n     */\r\n    function getTotalBidAmount(address owner_) public view returns(uint256 ) {\r\n        require(owner_ == _owner, \"Only Auction owner can perform this operation\");\r\n        return _totalAmount;\r\n    }    \r\n\r\n    /**\r\n     * @dev Returns the current highest bid of the Auction\r\n     * @param owner_ owner of the Auction    \r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can invoke this \r\n     * @return Higest bid placed so far\r\n     *\r\n     */\r\n    function getCurrentHighestBid(address owner_) public view returns(uint256 ) {\r\n        require(owner_ == _owner, \"Only Auction owner can perform this operation\");\r\n        uint256 _highestBid = _bidderBidPriceMappings[_highestBidder];\r\n        return _highestBid;\r\n    }\r\n\r\n    /**\r\n     * @dev Initiates the cancelling of the Auction. \r\n     * updates state variables in this Auction\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can end an Auction. \r\n     * - Only if this Auction was not already canceled or finished\r\n     * @param owner_ owner of the Auction\r\n     *\r\n     * @return success after updating the state variables\r\n     * Emits a {AuctionCanceled} event.\r\n     */\r\n    function cancelAuction(address owner_) public \r\n        onlyNotCanceled\r\n        onlyNotFinished\r\n        returns (bool )\r\n    {\r\n        require(owner_ == _owner, \"Only Auction owner can perform this operation\");\r\n        _canceled = true;\r\n        _startTime = 0;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ERC20(UNIC) token \r\n     *\r\n     * @return ERC20(UNIC) token smart contract.\r\n     *\r\n     */\r\n    function getERC20() public view returns(IERC20 ) {\r\n        return _token;\r\n    } \r\n\r\n    /**\r\n     * @dev Returns if the Auction is ongoing\r\n     *\r\n     * @return true if the Auction is currently in progress and false if its finished or cancelled\r\n     *\r\n     */\r\n    function isActive() public view returns(bool ) {\r\n        return (_startTime > 0 &&  !_finished && !_canceled);\r\n    } \r\n\r\n    /**\r\n     * @dev Returns the address of the bidder who placed the highest bid so far\r\n     * @param owner_ owner of the Auction\r\n     * Calling conditions:\r\n     * - Only the owner of the smart contract i.e Unicus platform can invoke this \r\n     * @return address of the highest bidder of the Auction.\r\n     *\r\n     */\r\n    function getHighestBidder(address owner_) public view returns(address ) {\r\n        require(owner_ == _owner, \"Only Auction owner can perform this operation\");\r\n         return _highestBidder;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns all the bidder who participated in this Auction\r\n     * @param owner_ owner of the Auction\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can invoke this \r\n     * @return address of the all the bidder who placed the bids for this Auction.\r\n     *\r\n     */\r\n    function getAllBidders(address owner_) public view returns(address[] memory ) {\r\n        require(owner_ == _owner, \"Only Auction owner can perform this operation\");\r\n        return _bidders;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bid price placed by a participating bidder\r\n     * @param owner_ owner of the Auction    \r\n     * @param bidder_ bidder participating in this Auction\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can invoke this \r\n     * @return bid price placed by the bidder participating in this Auction\r\n     *\r\n     */\r\n    function getBidderBidPrice(address owner_,address bidder_) public view returns(uint256 ) {\r\n        require(owner_ == _owner, \"Only Auction owner can perform this operation\");\r\n        return _bidderBidPriceMappings[bidder_];\r\n    }\r\n\r\n    /**\r\n     * @dev Initiates the ending of the Auction. \r\n     * updates state variables in this Auction\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can end an Auction. \r\n     * @param owner_ owner of the Auction\r\n     *\r\n     */\r\n    function auctionFinished(address owner_) public   {\r\n        require(owner_ == _owner, \"Only Auction owner can perform this operation\");\r\n        _finished = true;\r\n        _canceled = false;\r\n    }\r\n   \r\n    modifier onlyAfterStart {\r\n        require(_startTime > 0, \"Auction has not been started\");\r\n        _;\r\n\r\n    }\r\n\r\n    modifier onlyNotCanceled {\r\n        require(_canceled != true, \"Auction has been cancelled\");\r\n           _;\r\n    }\r\n\r\n    modifier onlyNotFinished {\r\n        require(_finished != true, \"Auction has been cancelled\");\r\n           _;\r\n    }\r\n}\r\n\r\n\r\ncontract UnicusNft is ERC721Enumerable, Ownable {\r\n    using Strings for uint256;\r\n    // GAS Limit for the smart contract\r\n    uint256 private _GAS_LIMIT = 80000000;\r\n    // Keep track of the token id created\r\n    uint256  private _COUNTER;\r\n    // Mapping from ipfs hash to the Auction\r\n    mapping(string => Auction) private _assetHashAuctionMappings;\r\n    // Mapping from Nft token ID to the ipfs hash\r\n    mapping(uint256 => string) private _tokenIdAssetHashMappings;    \r\n    // Array with all token ids of the Nfts created\r\n    uint256[] private _nfts;\r\n    // Array with all ongoing Auctions\r\n    string[] private _ongoingAuctions;\r\n\r\n    /**\r\n     * @dev Emitted when ETH Payment is transfered from this contract .\r\n     */\r\n    event EthPaymentSuccess(bool success,bytes data,address from, address to,uint256 amount);\r\n\r\n    /**\r\n     * @dev Emitted when ERC20 Payment is transfered from this contract .\r\n     */\r\n    event ERC20PaymentSuccess(bool success,address from, address to,uint256 amount);\r\n\r\n    /**\r\n     * @dev Emitted when Auction has commenced .\r\n     */\r\n    event AuctionStarted(string hash,uint256 basePrice,uint256 timestamp);\r\n\r\n    /**\r\n     * @dev Emitted when a bidder places a bid for this Auction.\r\n     */\r\n    event BidPlaced(string hash,address bidder, uint bid, address highestBidder, uint highestBid);   \r\n\r\n    /**\r\n     * @dev Emitted when Auction is finished  .\r\n     */    \r\n    event AuctionFinished(string hash,uint256 tokenId,address highestBidder, uint highestBid);\r\n\r\n    /**\r\n     * @dev Emitted when Auction is cancelled by the Owner .\r\n     */    \r\n    event AuctionCancelled(string hash);    \r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the Unicus NFT token collection.\r\n     */\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) ERC721(_name, _symbol) {\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev starts an Auction in Unicus platform\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can start an Auction\r\n     * @param assetHash_ Ipfs hash of asset metadata uploaded onto ipfs\r\n     * @param basePrice_ Base price for the Auction. Any bids for the Auction should be more than the base price\r\n     */\r\n    function auctionStart(string memory assetHash_,uint256 basePrice_) public onlyOwner {\r\n        _auctionStart(assetHash_,basePrice_,IERC20(address(0)));\r\n    }\r\n\r\n    /**\r\n     * @dev starts an Auction in Unicus platform with UNIC tokens\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can start an Auction\r\n     * @param assetHash_ Ipfs hash of asset metadata uploaded onto ipfs\r\n     * @param basePrice_ Base price for the Auction. Any bids for the Auction should be more than the base price\r\n     * @param token_ Address of the ERC20(UNIC) token smart contract\r\n     */\r\n    function auctionStartERC20(string memory assetHash_,uint256 basePrice_,IERC20 token_) public onlyOwner {\r\n        _auctionStart(assetHash_,basePrice_,token_);\r\n    }\r\n\r\n    /**\r\n     * @dev Places a bid on the Auction associated with the Ipfs hash. \r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - Any user in Unicus platform can place a bid during duration of the Auction. The bid amount should be \r\n     *   greater than the base Price set for the Auction\r\n     *\r\n     * @param assetHash_ Ipfs hash of asset metadata uploaded onto ipfs for which an Auction was already started\r\n     * Emits a {BidPlaced} event.\r\n     */\r\n    function placeBid(string memory assetHash_) public payable returns (bool){\r\n        Auction auction = _assetHashAuctionMappings[assetHash_];\r\n        require( address(auction) != address(0), \"Auction not started for this asset\");\r\n        if(auction.validateBid(msg.sender,msg.value) == true) {\r\n            auction.placeBid(msg.sender,msg.value);\r\n            emit BidPlaced(assetHash_,msg.sender, msg.value, auction.getHighestBidder(owner()), auction.getCurrentHighestBid(owner()));\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Places a bid on the Auction associated with the Ipfs hash using ERC20(UNIC) tokens. \r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - Any user in Unicus platform can place a bid during duration of the Auction. The bid amount should be \r\n     *   greater than the base Price set for the Auction and the amount should be ERC20(UNIC) tokens\r\n     *\r\n     * @param assetHash_ Ipfs hash of asset metadata uploaded onto ipfs for which an Auction was already started\r\n     * @param amount_ Bid amount placed for the Auction with ERC20(UNIC) tokens.\r\n     * Emits a {BidPlaced} event.\r\n     */\r\n    function placeBidERC20(string memory assetHash_,uint256 amount_) public returns (bool){\r\n        Auction auction = _assetHashAuctionMappings[assetHash_];\r\n        require( address(auction) != address(0), \"Auction not started for this asset\");\r\n        IERC20 token = auction.getERC20();\r\n        require( address(token) != address(0), \"This Auction does not support ERC20 tokens\");\r\n        if(auction.validateBid(msg.sender,amount_) == true) {\r\n            _transferERC20(token,msg.sender,address(this), amount_);\r\n            auction.placeBid(msg.sender,amount_);\r\n            emit BidPlaced(assetHash_,msg.sender, amount_, auction.getHighestBidder(owner()), auction.getCurrentHighestBid(owner()));\r\n            return true;\r\n        }\r\n        return false;\r\n    } \r\n\r\n    /**\r\n     * @dev Initiates the ending of the Auction. This triggers returning of the payments made by all \r\n     * non winning bidders in the Auction. Minting of NFT for the ipfs hash happens here and is transfered\r\n     * to the winning bidder.\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can end an Auction. \r\n     * @param assetHash_ Ipfs hash of asset metadata uploaded onto ipfs for which an Auction was already started\r\n     *\r\n     * @return Nft token ID minted for the ipfs hash\r\n     * Emits a {AuctionFinished} event.\r\n     */\r\n    function auctionEnd(string memory assetHash_) public onlyOwner returns (uint256 )  {\r\n        Auction auction = _assetHashAuctionMappings[assetHash_];\r\n        address winner = _returnBidAmountExceptWinner(auction);\r\n        uint256 id = mint(winner);\r\n        _nfts.push(id);\r\n        _tokenIdAssetHashMappings[id] = assetHash_;\r\n        auction.auctionFinished(msg.sender);\r\n        _removeFinishedAuction(assetHash_);\r\n        emit AuctionFinished(assetHash_,id,winner,auction.getCurrentHighestBid(owner()));\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * @dev Initiates the cancelling of the Auction. This triggers returning of the payments made by all \r\n     * bidders in the Auction. \r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can end an Auction. \r\n     * @param assetHash_ Ipfs hash of asset metadata uploaded onto ipfs for which an Auction was already started\r\n     *\r\n     * @return bool indicating success or failure\r\n     * Emits a {AuctionCanceled} event.\r\n     */\r\n    function auctionCancel(string memory assetHash_) public onlyOwner returns (bool )  {\r\n        Auction auction = _assetHashAuctionMappings[assetHash_];\r\n        _returnBidAmount(auction);\r\n        auction.cancelAuction(msg.sender);\r\n        _removeFinishedAuction(assetHash_);\r\n        delete _assetHashAuctionMappings[assetHash_];\r\n        emit AuctionCancelled(assetHash_);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws all the accumulated payments received by the contract and \r\n     * transfers it to the Owner . (Unicus Platform)\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can invoke this \r\n     *\r\n     */    \r\n    function withdraw() public payable onlyOwner {\r\n        uint256 withdrawBalance = address(this).balance - _getOngoingAuctionsBalances(false);\r\n        _transferETH(msg.sender,withdrawBalance);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws all the accumulated ERC20 (UNIC) payments received by the contract and \r\n     * transfers it to the Owner . (Unicus Platform)\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can invoke this \r\n     *\r\n     * @param token_ Address of the ERC20(UNIC) token smart contract\r\n     */  \r\n    function withdrawERC20(IERC20 token_) public payable onlyOwner {\r\n        uint256 balance = token_.balanceOf(address(this)) - _getOngoingAuctionsBalances(true);\r\n        require(balance >= 0, \"Insufficient balance.to transfer\");\r\n        _transferERC20(token_,address(this),msg.sender,balance);\r\n    }  \r\n\r\n    /**\r\n     * @dev  Returns balance of the ETH held by the contract.\r\n     * The amount of ETH that are held of finished auctions\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can invoke this \r\n     *\r\n     * @return the amount of ETH held\r\n     */\r\n    function ethBalance() public onlyOwner view returns(uint256) {\r\n        return address(this).balance - _getOngoingAuctionsBalances(false);\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns balance of the withdrawable ERC20 tokens held by the holder.\r\n     * The amount of ERC20 tokens that are held of finished auctions\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can invoke this \r\n     *\r\n     * @param token_ Address of the ERC20(UNIC) token smart contract\r\n     * @param holder_ Address of the ERC20 token holder\r\n     * @return the amount of ERC20 tokens held\r\n     */\r\n    function erc20Balance(IERC20 token_, address holder_) public onlyOwner view returns(uint256) {\r\n        return token_.balanceOf(holder_) - _getOngoingAuctionsBalances(true);\r\n    } \r\n\r\n    /**\r\n     * @dev  Returns total balance of the ERC20 tokens held by the holder.\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can invoke this \r\n     *\r\n     * @param token_ Address of the ERC20(UNIC) token smart contract\r\n     * @param holder_ Address of the ERC20 token holder\r\n     * @return the amount of ERC20 tokens held\r\n     */\r\n    function erc20TotalBalance(IERC20 token_, address holder_) public onlyOwner view returns(uint256) {\r\n        return token_.balanceOf(holder_) ;\r\n    }        \r\n\r\n\r\n    /** @dev internal function that starts an Auction in Unicus platform\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can start an Auction\r\n     * @param assetHash_ Ipfs hash of asset metadata uploaded onto ipfs\r\n     * @param basePrice_ Base price for the Auction. Any bids for the Auction should be more than the base price\r\n     * @param token_ Address of the ERC20(UNIC) token smart contract\r\n     * Emits a {AuctionStarted} event.\r\n     */   \r\n    function _auctionStart(string memory assetHash_,uint256 basePrice_,IERC20 token_) internal  {\r\n        require(address(_assetHashAuctionMappings[assetHash_]) == address(0) , \"Auction already started for this Asset\" );\r\n        require(msg.sender == owner() , \"Auction can be started only by owner\" );\r\n        Auction newAuction = new Auction(owner(),basePrice_,assetHash_,token_);\r\n        _assetHashAuctionMappings[assetHash_] = newAuction;\r\n        _ongoingAuctions.push(assetHash_);\r\n        emit AuctionStarted(assetHash_,basePrice_,newAuction.getStartTime(msg.sender));\r\n    }   \r\n    \r\n    /** @dev internal function that sets the allowance for ERC20(UNIC) tokens from this smart contract to the ownder or individual \r\n     * bidders who did not win the auction.\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can approve the token transfer\r\n     * @param token_ Address of the ERC20(UNIC) token smart contract\r\n     * @param from_ Address of the owner of the ERC20(UNIC) token \r\n     * @param to_ Address to which the allowance will be permitted\r\n     * @param amount_ amount of the ERC20(UNIC) tokens that will be allowed\r\n     */ \r\n    function _approveTransferERC20(IERC20 token_,address from_, address to_,uint256 amount_) private onlyOwner returns (bool) {\r\n        if(from_ == address(this)) {\r\n            if(to_ != owner()) {\r\n                token_.approve(to_,amount_);\r\n                _validateTransferERC20(token_,from_,to_,amount_);\r\n            }\r\n            return token_.transfer(to_, amount_);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** @dev internal function that validates the transfer of ERC20(UNIC) tokens for balance and allowance\r\n     *\r\n     * @param token_ Address of the ERC20(UNIC) token smart contract\r\n     * @param from_ Address of the owner of the ERC20(UNIC) token \r\n     * @param to_ Address to which the allowance will be permitted\r\n     * @param amount_ amount of the ERC20(UNIC) tokens that will be transfered\r\n     */ \r\n    function _validateTransferERC20(IERC20 token_,address from_, address to_,uint256 amount_) private view {\r\n         uint256 allowance_ = token_.allowance(from_, to_);\r\n        require(allowance_ >= amount_, \"Insufficient allowance....\");\r\n        require(token_.balanceOf(from_) >= amount_, \"Insufficient balance.\");\r\n    }\r\n\r\n    /** @dev internal function that transfers ERC20(UNIC) tokens\r\n     *\r\n     * @param token_ Address of the ERC20(UNIC) token smart contract\r\n     * @param from_ Address of the owner of the ERC20(UNIC) token \r\n     * @param to_ Address to which the allowance will be permitted\r\n     * @param amount_ amount of the ERC20(UNIC) tokens that will be transfered\r\n     */ \r\n    function _transferERC20(IERC20 token_,address from_, address to_,uint256 amount_) private   {\r\n        require(amount_ > 0, \"Amount to transfer should not be zero.\");\r\n        bool success;\r\n        if(msg.sender == owner()) {\r\n            // Transfering ERC20 tokens back to non winning bidders or the owner has called withdrawERC20\r\n            success =_approveTransferERC20(token_,from_,to_,amount_);\r\n        } else {\r\n            // bidders placing bids for an auction.Transfer the bid amount to this smart contract\r\n            success = token_.transferFrom(from_,to_, amount_);           \r\n        }\r\n        emit ERC20PaymentSuccess(success,from_, to_,amount_);        \r\n        require(success);\r\n    }  \r\n\r\n    /** @dev internal function that transfers ETH\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform transfer ETH\r\n     *     \r\n     * @param bidder_ Address where the ETH will be transfered\r\n     * @param amount_ amount of the ETH that will be transfered\r\n     */ \r\n    function _transferETH(address bidder_, uint256 amount_) private onlyOwner {\r\n        require(amount_ > 0, \"Amount to transfer should not be zero.\");\r\n        (bool success,bytes memory data ) = payable(bidder_).call{value:amount_,gas:_GAS_LIMIT}(\"\");\r\n        emit EthPaymentSuccess(success,data,address(this), bidder_, amount_);\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n\r\n    /**\r\n     * @dev payments made by all non winning bidders in the Auction\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can end an Auction. \r\n     * @param auction_ Auction which has ended\r\n     *\r\n     * Emits a {PaymentResponse} event. \r\n     * @return Address of the winning bidder.\r\n     */\r\n    function _returnBidAmountExceptWinner(Auction auction_) private onlyOwner returns(address ){\r\n        require( address(auction_) != address(0), \"Auction not started for this asset\");\r\n        IERC20 token = auction_.getERC20();\r\n        address winner = auction_.getHighestBidder(msg.sender);\r\n        address[] memory bidders = auction_.getAllBidders(msg.sender);\r\n        for (uint256 i; i < bidders.length ; i++) {\r\n            address bidder = bidders[i];\r\n            if(bidder != winner) {\r\n                uint256 amount = auction_.getBidderBidPrice(msg.sender,bidder);\r\n                if(amount > 0) {\r\n                    if(address(token) != address(0)) {\r\n                       _transferERC20(token,address(this),bidder,amount);\r\n                    } else {\r\n                        _transferETH(bidder,amount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return winner;\r\n    }\r\n\r\n    /**\r\n     * @dev payments made by all bidders in the Auction\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can end an Auction. \r\n     * @param auction_ Auction which has ended\r\n     *\r\n     * Emits a {PaymentResponse} event. \r\n     * \r\n     */\r\n    function _returnBidAmount(Auction auction_) private onlyOwner {\r\n        require( address(auction_) != address(0), \"Auction not started for this asset\");\r\n        IERC20 token = auction_.getERC20();\r\n        address[] memory bidders = auction_.getAllBidders(msg.sender);\r\n        for (uint256 i; i < bidders.length ; i++) {\r\n            address bidder = bidders[i];\r\n            uint256 amount = auction_.getBidderBidPrice(msg.sender,bidder);\r\n            if(amount > 0) {\r\n                if(address(token) != address(0)) {\r\n                    _transferERC20(token,address(this),bidder,amount);\r\n                } else {\r\n                    _transferETH(bidder,amount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev update the Gas limit for the smart contract\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can update the Gas limit \r\n     * @param gasLimit_ new Gas limit\r\n     *\r\n     */\r\n    function setGasLimit(uint256  gasLimit_) public  onlyOwner{\r\n        _GAS_LIMIT = gasLimit_;\r\n    }    \r\n\r\n    /**\r\n     * @dev Returns the number of Nfts in the Smart contract\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can invoke this \r\n     * @return number of NFTs owned by this contract.\r\n     *\r\n     */\r\n    function balanceOf() public view onlyOwner returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * @dev  Mints NFT for the the winning bidder.\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can end an Auction. \r\n     * @param winner_ Address of the winning bidder to whom the minted NFT will be assigned\r\n     *\r\n     * @return Nft token ID minted\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function mint(address winner_) internal returns (uint256 ){\r\n        uint256 id = _COUNTER;\r\n       _safeMint(winner_, id);\r\n        _COUNTER++;\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns all the Nft token ids minted in the Smart contract\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can invoke this \r\n     * @return Array of NFTs minted by this contract\r\n     *\r\n     */\r\n    function getNfts() public view returns (uint256[] memory) {\r\n        return _nfts;\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns all the NFT token ids associated with Address.\r\n     * @param owner_ Address of Nft owner\r\n     *\r\n     * @return Array of NFTs owned by this address\r\n     */\r\n    function walletOfOwner(address owner_)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256 ownerTokenCount = balanceOf(owner_);\r\n        uint256[] memory tokenIds = new uint256[](ownerTokenCount);\r\n        for (uint256 i; i < ownerTokenCount; i++) {\r\n            tokenIds[i] = tokenOfOwnerByIndex(owner_, i);\r\n        }\r\n        return tokenIds;\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns all the Ipfs hash associated with the Nft token Id.\r\n     * @param tokenId_ NFT Token Id\r\n     *\r\n     * @return Ipfs hash for the Nft Token Id\r\n     */\r\n    function tokenURI(uint256 tokenId_)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(\r\n        _exists(tokenId_),\r\n        \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n        return _tokenIdAssetHashMappings[tokenId_];       \r\n    }\r\n\r\n    /**\r\n     * @dev The total amount of ETH/ERC held for the ongoing Auctions\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can end an Auction. \r\n     * @param erc20_ indicating whether we need the balances of ERC20 autions or ETH auctions\r\n     *\r\n     * @return Total amount of ETH/ERC20.\r\n     */\r\n    function _getOngoingAuctionsBalances(bool erc20_)  internal view onlyOwner returns(uint256) {\r\n        uint256 totalAmount;\r\n        for (uint256 i; i < _ongoingAuctions.length ; i++) {\r\n            string memory hash = _ongoingAuctions[i];\r\n            Auction auction = _assetHashAuctionMappings[hash];\r\n            if(auction.isActive() ) {\r\n                if(!erc20_) {\r\n                    totalAmount += auction.getTotalBidAmount(msg.sender);\r\n                } else {\r\n                    if(_isAuctionERC(auction)) {\r\n                        totalAmount += auction.getTotalBidAmount(msg.sender);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return totalAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev is the Auction ETH /ERC20 based\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can end an Auction. \r\n     * @param auction_ The Auction in consideration\r\n     *\r\n     * @return true if Auction is ERC20 based\r\n     */\r\n    function _isAuctionERC(Auction auction_) private onlyOwner view returns(bool) {\r\n        IERC20 token = auction_.getERC20();\r\n        return (address(token) != address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev removes the assetHash of finished Auctions from the Array\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can end an Auction. \r\n     * @param assetHash_ The assetHash to remove.\r\n     *\r\n     */\r\n    function _removeFinishedAuction(string memory assetHash_) private onlyOwner{\r\n        int index = _getIndexOfOngoingAuction(assetHash_);\r\n        if(index >= 0) {\r\n            _ongoingAuctions[uint256(index)] = _ongoingAuctions[_ongoingAuctions.length-1];\r\n            _ongoingAuctions.pop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns all the Nft token ids minted in the Smart contract\r\n     * Calling conditions:\r\n     *\r\n     * - Only the owner of the smart contract i.e Unicus platform can invoke this \r\n     * @return index_ of the assetHash\r\n     *\r\n     */\r\n    function _getIndexOfOngoingAuction(string memory assetHash_) private view returns (int index_) {\r\n        int index = -1;\r\n        for (uint256 i; i < _ongoingAuctions.length ; i++) {\r\n            string memory assetHash = _ongoingAuctions[i];\r\n            if((keccak256(abi.encodePacked((assetHash))) == keccak256(abi.encodePacked((assetHash_))))) {\r\n                return int(i);\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"}],\"name\":\"AuctionFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthPaymentSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"assetHash_\",\"type\":\"string\"}],\"name\":\"auctionCancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"assetHash_\",\"type\":\"string\"}],\"name\":\"auctionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"assetHash_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"basePrice_\",\"type\":\"uint256\"}],\"name\":\"auctionStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"assetHash_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"basePrice_\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"auctionStartERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"holder_\",\"type\":\"address\"}],\"name\":\"erc20Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"holder_\",\"type\":\"address\"}],\"name\":\"erc20TotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNfts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"assetHash_\",\"type\":\"string\"}],\"name\":\"placeBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"assetHash_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"placeBidERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit_\",\"type\":\"uint256\"}],\"name\":\"setGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"UnicusNft","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000009556e696375734e465400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004554e465400000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6b288669aa94849eb97a540656cf4a08a6a0d75b9bfea0dea1440b7a275b6702"}]}