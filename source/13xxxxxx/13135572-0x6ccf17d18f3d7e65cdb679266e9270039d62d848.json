{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\ninterface IFulfillInterpreter {\r\n\r\n  event Executed(\r\n    bytes32 indexed transactionId,\r\n    address payable callTo,\r\n    address assetId,\r\n    address payable fallbackAddress,\r\n    uint256 amount,\r\n    bytes callData,\r\n    bytes returnData,\r\n    bool success\r\n  );\r\n\r\n  function getTransactionManager() external returns (address);\r\n\r\n  function execute(\r\n    bytes32 transactionId,\r\n    address payable callTo,\r\n    address assetId,\r\n    address payable fallbackAddress,\r\n    uint256 amount,\r\n    bytes calldata callData\r\n  ) external payable;\r\n}\r\n\r\n\r\n// File contracts/interfaces/ITransactionManager.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface ITransactionManager {\r\n  // Structs\r\n\r\n  // Holds all data that is constant between sending and\r\n  // receiving chains. The hash of this is what gets signed\r\n  // to ensure the signature can be used on both chains.\r\n  struct InvariantTransactionData {\r\n    address user;\r\n    address router;\r\n    address sendingAssetId;\r\n    address receivingAssetId;\r\n    address sendingChainFallback; // funds sent here on cancel\r\n    address receivingAddress;\r\n    address callTo;\r\n    uint256 sendingChainId;\r\n    uint256 receivingChainId;\r\n    bytes32 callDataHash; // hashed to prevent free option\r\n    bytes32 transactionId;\r\n  }\r\n\r\n  // Holds all data that varies between sending and receiving\r\n  // chains. The hash of this is stored onchain to ensure the\r\n  // information passed in is valid.\r\n  struct VariantTransactionData {\r\n    uint256 amount;\r\n    uint256 expiry;\r\n    uint256 preparedBlockNumber;\r\n  }\r\n\r\n  // All Transaction data, constant and variable\r\n  struct TransactionData {\r\n    address user;\r\n    address router;\r\n    address sendingAssetId;\r\n    address receivingAssetId;\r\n    address sendingChainFallback;\r\n    address receivingAddress;\r\n    address callTo;\r\n    bytes32 callDataHash;\r\n    bytes32 transactionId;\r\n    uint256 sendingChainId;\r\n    uint256 receivingChainId;\r\n    uint256 amount;\r\n    uint256 expiry;\r\n    uint256 preparedBlockNumber; // Needed for removal of active blocks on fulfill/cancel\r\n  }\r\n\r\n  // The structure of the signed data for fulfill\r\n  struct SignedData {\r\n    bytes32 transactionId;\r\n    uint256 relayerFee;\r\n    string functionIdentifier; // \"fulfill\" or \"cancel\"\r\n  }\r\n\r\n  // Set price oracle event\r\n  event NewPriceOracle(address indexed priceOracle);\r\n\r\n  // Set New Special Fee token \r\n  event NewSpecialFeeToken(address indexed token);\r\n\r\n  // Set New Normal and Special Fee percent\r\n  event NewFeePercent(uint256 normalFeePercent, uint256 specialFeePercent);\r\n\r\n  // Adding/removing asset events\r\n  event RouterAdded(address indexed addedRouter, address indexed caller);\r\n\r\n  event RouterRemoved(address indexed removedRouter, address indexed caller);\r\n\r\n  // Adding/removing router events\r\n  event AssetAdded(address indexed addedAssetId, address indexed caller);\r\n\r\n  event AssetRemoved(address indexed removedAssetId, address indexed caller);\r\n\r\n  // Liquidity events\r\n  event LiquidityAdded(address indexed router, address indexed assetId, uint256 amount, address caller);\r\n\r\n  event LiquidityRemoved(address indexed router, address indexed assetId, uint256 amount, address recipient);\r\n\r\n  // Transaction events\r\n  event TransactionPrepared(\r\n    address indexed user,\r\n    address indexed router,\r\n    bytes32 indexed transactionId,\r\n    TransactionData txData,\r\n    address caller,\r\n    bytes encryptedCallData,\r\n    bytes encodedBid,\r\n    bytes bidSignature\r\n  );\r\n\r\n  event TransactionFulfilled(\r\n    address indexed user,\r\n    address indexed router,\r\n    bytes32 indexed transactionId,\r\n    TransactionData txData,\r\n    uint256 relayerFee,\r\n    bytes signature,\r\n    bytes callData,\r\n    address caller\r\n  );\r\n\r\n  event TransactionCancelled(\r\n    address indexed user,\r\n    address indexed router,\r\n    bytes32 indexed transactionId,\r\n    TransactionData txData,\r\n    uint256 relayerFee,\r\n    address caller\r\n  );\r\n\r\n  // Helper methods\r\n  function renounced() external returns (bool);\r\n\r\n  // Owner only methods\r\n  function addRouter(address router) external;\r\n\r\n  function removeRouter(address router) external;\r\n\r\n  function addAssetId(address assetId) external;\r\n\r\n  function removeAssetId(address assetId) external;\r\n\r\n  // Router only methods\r\n  function addLiquidityFor(uint256 amount, address assetId, address router) external payable;\r\n\r\n  function addLiquidity(uint256 amount, address assetId) external payable;\r\n\r\n  function removeLiquidity(\r\n    uint256 amount,\r\n    address assetId,\r\n    address payable recipient\r\n  ) external;\r\n\r\n  // Methods for crosschain transfers\r\n  // called in the following order (in happy case)\r\n  // 1. prepare by user on sending chain\r\n  // 2. prepare by router on receiving chain\r\n  // 3. fulfill by user on receiving chain\r\n  // 4. fulfill by router on sending chain\r\n  function prepare(\r\n    InvariantTransactionData calldata txData,\r\n    uint256 amount,\r\n    uint256 expiry,\r\n    bytes calldata encryptedCallData,\r\n    bytes calldata encodedBid,\r\n    bytes calldata bidSignature\r\n  ) external payable returns (TransactionData memory);\r\n\r\n  function fulfill(\r\n    TransactionData calldata txData,\r\n    uint256 relayerFee,\r\n    bytes calldata signature,\r\n    bytes calldata callData\r\n  ) external returns (TransactionData memory);\r\n\r\n  function cancel(TransactionData calldata txData, uint256 relayerFee, bytes calldata signature) external returns (TransactionData memory);\r\n\r\n\r\n  // Methods for fee management\r\n  function calculateFeeAmount(address account, address token, uint256 amount) external view returns (uint256, bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IPriceOracle.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IPriceOracle {\r\n    /**\r\n      * @notice Get the price of a token\r\n      * @param token The token to get the price of\r\n      * @return The asset price mantissa (scaled by 1e18).\r\n      *  Zero means the price is unavailable.\r\n      */\r\n    function getTokenPrice(address token) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20Minimal.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Minimal ERC20 interface for Uniswap\r\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\r\ninterface IERC20Minimal {\r\n    /// @notice Returns the balance of a token\r\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\r\n    /// @return The number of tokens held by the account\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n    /// @notice Returns the decimals of a token\r\n    /// @return The number of tokens held by the account\r\n    function decimals() external view returns (uint8);\r\n\r\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\r\n    /// @param recipient The account that will receive the amount transferred\r\n    /// @param amount The number of tokens to send from the sender to the recipient\r\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /// @notice Returns the current allowance given to a spender by an owner\r\n    /// @param owner The account of the token owner\r\n    /// @param spender The account of the token spender\r\n    /// @return The current allowance granted by `owner` to `spender`\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\r\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\r\n    /// @param amount The amount of tokens allowed to be used by `spender`\r\n    /// @return Returns true for a successful approval, false for unsuccessful\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\r\n    /// @param sender The account from which the transfer will be initiated\r\n    /// @param recipient The recipient of the transfer\r\n    /// @param amount The amount of the transfer\r\n    /// @return Returns true for a successful transfer, false for unsuccessful\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\r\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\r\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\r\n    /// @param value The amount of tokens that were transferred\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\r\n    /// @param owner The account that approved spending of its tokens\r\n    /// @param spender The account for which the spending allowance was modified\r\n    /// @param value The new allowance from the owner to the spender\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol@v4.3.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.3.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol@v4.3.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(\r\n        IERC20Upgradeable token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20Upgradeable token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/lib/LibAsset.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\n/// @title LibAsset\r\n/// @author Connext <support@connext.network>\r\n/// @notice This library contains helpers for dealing with onchain transfers\r\n///         of assets, including accounting for the native asset `assetId`\r\n///         conventions and any noncompliant ERC20 transfers\r\n\r\nlibrary LibAsset {\r\n    /// @dev All native assets use the empty address for their asset id\r\n    ///      by convention\r\n    address constant NATIVE_ASSETID = address(0);\r\n\r\n    /// @notice Determines whether the given assetId is the native asset\r\n    /// @param assetId The asset identifier to evaluate\r\n    function isEther(address assetId) internal pure returns (bool) {\r\n      return assetId == NATIVE_ASSETID;\r\n    }\r\n\r\n    /// @notice Gets the balance of the inheriting contract for the given asset\r\n    /// @param assetId The asset identifier to get the balance of\r\n    function getOwnBalance(address assetId) internal view returns (uint256) {\r\n      return\r\n        isEther(assetId)\r\n          ? address(this).balance\r\n          : IERC20Upgradeable(assetId).balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice Transfers ether from the inheriting contract to a given\r\n    ///         recipient\r\n    /// @param recipient Address to send ether to\r\n    /// @param amount Amount to send to given recipient\r\n    function transferEther(address payable recipient, uint256 amount)\r\n        internal\r\n    {\r\n      (bool success,) = recipient.call{value: amount}(\"\");\r\n      require(success, \"#TE:028\");\r\n    }\r\n\r\n    /// @notice Transfers tokens from the inheriting contract to a given\r\n    ///         recipient\r\n    /// @param assetId Token address to transfer\r\n    /// @param recipient Address to send ether to\r\n    /// @param amount Amount to send to given recipient\r\n    function transferERC20(\r\n        address assetId,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n      SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(assetId), recipient, amount);\r\n    }\r\n\r\n    /// @notice Transfers tokens from a sender to a given recipient\r\n    /// @param assetId Token address to transfer\r\n    /// @param from Address of sender/owner\r\n    /// @param to Address of recipient/spender\r\n    /// @param amount Amount to transfer from owner to spender\r\n    function transferFromERC20(\r\n      address assetId,\r\n      address from,\r\n      address to,\r\n      uint256 amount\r\n    ) internal {\r\n      SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(assetId), from, to, amount);\r\n    }\r\n\r\n    /// @notice Increases the allowance of a token to a spender\r\n    /// @param assetId Token address of asset to increase allowance of\r\n    /// @param spender Account whos allowance is increased\r\n    /// @param amount Amount to increase allowance by\r\n    function increaseERC20Allowance(\r\n      address assetId,\r\n      address spender,\r\n      uint256 amount\r\n    ) internal {\r\n      require(!isEther(assetId), \"#IA:034\");\r\n      SafeERC20Upgradeable.safeIncreaseAllowance(IERC20Upgradeable(assetId), spender, amount);\r\n    }\r\n\r\n    /// @notice Decreases the allowance of a token to a spender\r\n    /// @param assetId Token address of asset to decrease allowance of\r\n    /// @param spender Account whos allowance is decreased\r\n    /// @param amount Amount to decrease allowance by\r\n    function decreaseERC20Allowance(\r\n      address assetId,\r\n      address spender,\r\n      uint256 amount\r\n    ) internal {\r\n      require(!isEther(assetId), \"#DA:034\");\r\n      SafeERC20Upgradeable.safeDecreaseAllowance(IERC20Upgradeable(assetId), spender, amount);\r\n    }\r\n\r\n    /// @notice Wrapper function to transfer a given asset (native or erc20) to\r\n    ///         some recipient. Should handle all non-compliant return value\r\n    ///         tokens as well by using the SafeERC20 contract by open zeppelin.\r\n    /// @param assetId Asset id for transfer (address(0) for native asset, \r\n    ///                token address for erc20s)\r\n    /// @param recipient Address to send asset to\r\n    /// @param amount Amount to send to given recipient\r\n    function transferAsset(\r\n        address assetId,\r\n        address payable recipient,\r\n        uint256 amount\r\n    ) internal {\r\n      isEther(assetId)\r\n        ? transferEther(recipient, amount)\r\n        : transferERC20(assetId, recipient, amount);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interpreters/FulfillInterpreter.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\ncontract FulfillInterpreter is ReentrancyGuard, IFulfillInterpreter {\r\n  address private immutable _transactionManager;\r\n\r\n  constructor(address transactionManager) {\r\n    _transactionManager = transactionManager;\r\n  }\r\n\r\n  /// @notice Errors if the sender is not the transaction manager\r\n  modifier onlyTransactionManager {\r\n    require(msg.sender == _transactionManager, \"#OTM:027\");\r\n    _;\r\n  }\r\n\r\n  /// @notice Returns the transaction manager address (only address that can \r\n  ///         call the `execute` function)\r\n  function getTransactionManager() override external view returns (address) {\r\n    return _transactionManager;\r\n  }\r\n\r\n  /// @notice Executes some arbitrary call data on a given address. The\r\n  ///         call data executes can be payable, and will have `amount` sent\r\n  ///         along with the function (or approved to the contract). If the\r\n  ///         call fails, rather than reverting, funds are sent directly to \r\n  ///         some provided fallbaack address\r\n  /// @param callTo The address to execute the calldata on\r\n  /// @param assetId The assetId of the funds to approve to the contract or\r\n  ///                send along with the call\r\n  /// @param fallbackAddress The address to send funds to if the `call` fails\r\n  /// @param amount The amount to approve or send with the call\r\n  /// @param callData The data to execute\r\n  function execute(\r\n    bytes32 transactionId,\r\n    address payable callTo,\r\n    address assetId,\r\n    address payable fallbackAddress,\r\n    uint256 amount,\r\n    bytes calldata callData\r\n  ) override external payable onlyTransactionManager {\r\n    // If it is not ether, approve the callTo\r\n    // We approve here rather than transfer since many external contracts\r\n    // simply require an approval, and it is unclear if they can handle \r\n    // funds transferred directly to them (i.e. Uniswap)\r\n    bool isEther = LibAsset.isEther(assetId);\r\n    if (!isEther) {\r\n      LibAsset.increaseERC20Allowance(assetId, callTo, amount);\r\n    }\r\n\r\n    // Check if the callTo is a contract\r\n    bool success;\r\n    bytes memory returnData;\r\n    if (isContract(callTo)) {\r\n      // Try to execute the callData\r\n      // the low level call will return `false` if its execution reverts\r\n      (success, returnData) = callTo.call{value: isEther ? amount : 0}(callData);\r\n    }\r\n\r\n    // Handle failure cases\r\n    if (!success) {\r\n      // If it fails, transfer to fallback\r\n      LibAsset.transferAsset(assetId, fallbackAddress, amount);\r\n      // Decrease allowance\r\n      if (!isEther) {\r\n        LibAsset.decreaseERC20Allowance(assetId, callTo, amount);\r\n      }\r\n    }\r\n\r\n    // Emit event\r\n    emit Executed(\r\n      transactionId,\r\n      callTo,\r\n      assetId,\r\n      fallbackAddress,\r\n      amount,\r\n      callData,\r\n      returnData,\r\n      success\r\n    );\r\n  }\r\n\r\n  function isContract(address _addr) view private returns (bool){\r\n    uint32 size;\r\n    assembly {\r\n        size := extcodesize(_addr)\r\n    }\r\n    return (size > 0);\r\n  }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.3.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ProposedOwnable.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\n/**\r\n * @title ProposedOwnable\r\n * @notice Contract module which provides a basic access control mechanism, \r\n * where there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed via a two step process:\r\n * 1. Call `proposeOwner`\r\n * 2. Wait out the delay period\r\n * 3. Call `acceptOwner`\r\n *\r\n * @dev This module is used through inheritance. It will make available the \r\n * modifier `onlyOwner`, which can be applied to your functions to restrict \r\n * their use to the owner.\r\n * \r\n * @dev The majority of this code was taken from the openzeppelin Ownable \r\n * contract\r\n *\r\n */\r\nabstract contract ProposedOwnable is Initializable{\r\n  address private _owner;\r\n\r\n  address private _proposed;\r\n\r\n  uint256 private _proposedTimestamp;\r\n\r\n  uint256 private constant _delay = 7 days;\r\n\r\n  event OwnershipProposed(address indexed proposedOwner);\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n    * @notice Initializes the contract setting the deployer as the initial \r\n    * owner.\r\n    */\r\n  function __ProposedOwnable_init_unchained() internal initializer {\r\n    _setOwner(msg.sender);\r\n  }\r\n\r\n  /**\r\n    * @notice Returns the address of the current owner.\r\n    */\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n    * @notice Returns the address of the proposed owner.\r\n    */\r\n  function proposed() public view virtual returns (address) {\r\n    return _proposed;\r\n  }\r\n\r\n  /**\r\n    * @notice Returns the address of the proposed owner.\r\n    */\r\n  function proposedTimestamp() public view virtual returns (uint256) {\r\n    return _proposedTimestamp;\r\n  }\r\n\r\n  /**\r\n    * @notice Returns the delay period before a new owner can be accepted.\r\n    */\r\n  function delay() public view virtual returns (uint256) {\r\n    return _delay;\r\n  }\r\n\r\n  /**\r\n    * @notice Throws if called by any account other than the owner.\r\n    */\r\n  modifier onlyOwner() {\r\n      require(owner() == msg.sender, \"#OO:029\");\r\n      _;\r\n  }\r\n\r\n  /**\r\n    * @notice Sets the timestamp for an owner to be proposed, and sets the\r\n    * newly proposed owner as step 1 in a 2-step process\r\n   */\r\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\r\n    _setProposed(newlyProposed);\r\n  }\r\n\r\n  /**\r\n    * @notice Transfers ownership of the contract to a new account (`newOwner`).\r\n    * Can only be called by the current owner.\r\n    */\r\n  function acceptProposedOwner() public virtual onlyOwner {\r\n    require((block.timestamp - _proposedTimestamp) > _delay, \"#APO:030\");\r\n    _setOwner(_proposed);\r\n  }\r\n\r\n  function _setOwner(address newOwner) private {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n\r\n  function _setProposed(address newlyProposed) private {\r\n    _proposedTimestamp = block.timestamp;\r\n    _proposed = newlyProposed;\r\n    emit OwnershipProposed(_proposed);\r\n  }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol@v4.3.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeaconUpgradeable {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function implementation() external view returns (address);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol@v4.3.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\r\n */\r\nlibrary StorageSlotUpgradeable {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol@v4.3.0\r\n\r\n\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This abstract contract provides getters and event emitting update functions for\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\r\n *\r\n * _Available since v4.1._\r\n *\r\n * @custom:oz-upgrades-unsafe-allow delegatecall\r\n */\r\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\r\n    function __ERC1967Upgrade_init() internal initializer {\r\n        __ERC1967Upgrade_init_unchained();\r\n    }\r\n\r\n    function __ERC1967Upgrade_init_unchained() internal initializer {\r\n    }\r\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\r\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _getImplementation() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 implementation slot.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCall(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _upgradeTo(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            _functionDelegateCall(newImplementation, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCallSecure(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        address oldImplementation = _getImplementation();\r\n\r\n        // Initial upgrade and setup call\r\n        _setImplementation(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            _functionDelegateCall(newImplementation, data);\r\n        }\r\n\r\n        // Perform rollback test if not already in progress\r\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\r\n        if (!rollbackTesting.value) {\r\n            // Trigger rollback using upgradeTo from the new implementation\r\n            rollbackTesting.value = true;\r\n            _functionDelegateCall(\r\n                newImplementation,\r\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\r\n            );\r\n            rollbackTesting.value = false;\r\n            // Check rollback was effective\r\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\r\n            // Finally reset to the new implementation and log the upgrade\r\n            _upgradeTo(newImplementation);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n     * @dev Emitted when the admin account has changed.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _getAdmin() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 admin slot.\r\n     */\r\n    function _setAdmin(address newAdmin) private {\r\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\r\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     */\r\n    function _changeAdmin(address newAdmin) internal {\r\n        emit AdminChanged(_getAdmin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n    /**\r\n     * @dev Emitted when the beacon is upgraded.\r\n     */\r\n    event BeaconUpgraded(address indexed beacon);\r\n\r\n    /**\r\n     * @dev Returns the current beacon.\r\n     */\r\n    function _getBeacon() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\r\n     */\r\n    function _setBeacon(address newBeacon) private {\r\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\r\n        require(\r\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\r\n            \"ERC1967: beacon implementation is not a contract\"\r\n        );\r\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\r\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\r\n     *\r\n     * Emits a {BeaconUpgraded} event.\r\n     */\r\n    function _upgradeBeaconToAndCall(\r\n        address newBeacon,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _setBeacon(newBeacon);\r\n        emit BeaconUpgraded(newBeacon);\r\n        if (data.length > 0 || forceCall) {\r\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\r\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol@v4.3.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\r\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\r\n *\r\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\r\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\r\n * `UUPSUpgradeable` with a custom implementation of upgrades.\r\n *\r\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\r\n    function __UUPSUpgradeable_init() internal initializer {\r\n        __ERC1967Upgrade_init_unchained();\r\n        __UUPSUpgradeable_init_unchained();\r\n    }\r\n\r\n    function __UUPSUpgradeable_init_unchained() internal initializer {\r\n    }\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function upgradeTo(address newImplementation) external virtual {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallSecure(newImplementation, bytes(\"\"), false);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\r\n     * encoded in `data`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallSecure(newImplementation, data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\r\n     * {upgradeTo} and {upgradeToAndCall}.\r\n     *\r\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\r\n     *\r\n     * ```solidity\r\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\r\n     * ```\r\n     */\r\n    function _authorizeUpgrade(address newImplementation) internal virtual;\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol@v4.3.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol@v4.3.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal initializer {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol@v4.3.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol@v4.3.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol@v4.3.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSAUpgradeable {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/TransactionManager.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\n/// @title TransactionManager\r\n/// @author Connext <support@connext.network>\r\n/// @notice This contract holds the logic to facilitate crosschain transactions.\r\n///         Transactions go through three phases:\r\n///\r\n///         1. Route Auction: User broadcasts to our network signalling their \r\n///         desired route. Routers respond with sealed bids containing \r\n///         commitments to fulfilling the transaction within a certain time and \r\n///         price range.\r\n///\r\n///         2. Prepare: Once the auction is completed, the transaction can be \r\n///         prepared. The user submits a transaction to `TransactionManager` \r\n///         contract on sender-side chain containing router's signed bid. This \r\n///         transaction locks up the users funds on the sending chiain. Upon \r\n///         detecting an event containing their signed bid from the chain, \r\n///         router submits the same transaction to `TransactionManager` on the \r\n///         receiver-side chain, and locks up a corresponding amount of \r\n///         liquidity. The amount locked on the receiving chain is `sending \r\n///         amount - auction fee` so the router is incentivized to complete the \r\n///         transaction.\r\n///\r\n///         3. Fulfill: Upon detecting the `TransactionPrepared` event on the \r\n///         receiver-side chain, the user signs a message and sends it to a \r\n///         relayer, who will earn a fee for submission. The relayer (which may \r\n///         be the router) then submits the message to the `TransactionManager` \r\n///         to complete their transaction on receiver-side chain and claim the \r\n///         funds locked by the router. A relayer is used here to allow users \r\n///         to submit transactions with arbitrary calldata on the receiving \r\n///         chain without needing gas to do so. The router then submits the \r\n///         same signed message and completes transaction on sender-side, \r\n///         unlocking the original `amount`.\r\n///\r\n///         If a transaction is not fulfilled within a fixed timeout, it \r\n///         reverts and can be reclaimed by the party that called `prepare` on \r\n///         each chain (initiator). Additionally, transactions can be cancelled \r\n///         unilaterally by the person owed funds on that chain (router for \r\n///         sending chain, user for receiving chain) prior to expiry.\r\n\r\ncontract TransactionManager is UUPSUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable, ProposedOwnable, ITransactionManager {\r\n  using SafeMathUpgradeable for uint256;\r\n\r\n  /// @dev Mapping of router to balance specific to asset\r\n  mapping(address => mapping(address => uint256)) public routerBalances;\r\n\r\n  /// @dev Mapping of allowed router addresses\r\n  mapping(address => bool) public approvedRouters;\r\n\r\n  /// @dev Mapping of allowed assetIds on same chain of contract\r\n  mapping(address => bool) public approvedAssets;\r\n\r\n  /// @dev Mapping of hash of `InvariantTransactionData` to the hash\r\n  //       of the `VariantTransactionData`\r\n  mapping(bytes32 => bytes32) public variantTransactionData;\r\n  \r\n  uint256 public chainId;\r\n  /// @dev The chain id of the contract, is passed in to avoid any evm issues\r\n\r\n  /// @dev Minimum timeout (will be the lowest on the receiving chain)\r\n  uint256 public constant MIN_TIMEOUT = 1 days; // 24 hours\r\n\r\n  /// @dev Maximum timeout\r\n  uint256 public constant MAX_TIMEOUT = 30 days; // 720 hours\r\n\r\n  IFulfillInterpreter public interpreter;\r\n\r\n  IPriceOracle public priceOracle;\r\n\r\n  /// @dev Special Fee token address: For this token holders Service Fee will be lower\r\n  address public specialFeeToken;\r\n\r\n  /// @dev Normal Service Fee percent, Special Fee percent\r\n  uint256 constant public PERCENTS_DIVIDER = 10000;\r\n\r\n  uint256 public normalFeePercent;\r\n  uint256 public specialFeePercent;\r\n\r\n\r\n  function initialize(uint256 _chainId) initializer public {\r\n    __Pausable_init_unchained();\r\n    __ReentrancyGuard_init_unchained();\r\n    __ProposedOwnable_init_unchained();\r\n\r\n    chainId = _chainId;\r\n    interpreter = new FulfillInterpreter(address(this));\r\n\r\n    // normalFeePercent = 75;  // 0.75 %\r\n    // specialFeePercent  = 50; // 0.5 %\r\n    setFeePercent(75, 50);\r\n  }\r\n\r\n  function _authorizeUpgrade(address) internal override onlyOwner {}\r\n\r\n  /// @notice Indicates if the ownership has been renounced() by\r\n  ///         checking if current owner is address(0)\r\n  function renounced() public view override returns (bool) {\r\n    return owner() == address(0);\r\n  }\r\n\r\n  /// @notice Owner can set price oracle address\r\n  /// @param _priceOracle Router address to add\r\n  function setPriceOracle(address _priceOracle) external onlyOwner whenNotPaused {\r\n    priceOracle = IPriceOracle(_priceOracle);\r\n\r\n    // Emit event\r\n    emit NewPriceOracle(_priceOracle);\r\n  }\r\n\r\n  /// @notice Owner can set special fee token\r\n  /// @param _token ERC20 Token address \r\n  function setSpecialFeeToken(address _token) external onlyOwner whenNotPaused {\r\n    specialFeeToken = _token;\r\n\r\n    // Emit event\r\n    emit NewSpecialFeeToken(_token);\r\n  }\r\n\r\n  /// @notice Owner can set special fee percent and normal fee percent\r\n  /// @param _normal normal fee percentage\r\n  /// @param _special special fee percentage\r\n  function setFeePercent(uint256 _normal, uint256 _special) public onlyOwner whenNotPaused{\r\n    require(_normal < PERCENTS_DIVIDER.div(5), \"too big normal fee\");\r\n    require(_special < PERCENTS_DIVIDER.div(5), \"too big special fee\");\r\n\r\n    normalFeePercent = _normal;\r\n    specialFeePercent = _special;\r\n\r\n    // Emit event\r\n    emit NewFeePercent(_normal, _special);\r\n  }\r\n\r\n  /// @notice Used to add routers that can transact crosschain\r\n  /// @param router Router address to add\r\n  function addRouter(address router) external override onlyOwner whenNotPaused {\r\n    // Sanity check: not empty\r\n    require(router != address(0), \"#AR:001\");\r\n\r\n    // Sanity check: needs approval\r\n    require(approvedRouters[router] == false, \"#AR:032\");\r\n\r\n    // Update mapping\r\n    approvedRouters[router] = true;\r\n\r\n    // Emit event\r\n    emit RouterAdded(router, msg.sender);\r\n  }\r\n\r\n  /// @notice Used to remove routers that can transact crosschain\r\n  /// @param router Router address to remove\r\n  function removeRouter(address router) external override onlyOwner whenNotPaused {\r\n    // Sanity check: not empty\r\n    require(router != address(0), \"#RR:001\");\r\n\r\n    // Sanity check: needs removal\r\n    require(approvedRouters[router] == true, \"#RR:033\");\r\n\r\n    // Update mapping\r\n    approvedRouters[router] = false;\r\n\r\n    // Emit event\r\n    emit RouterRemoved(router, msg.sender);\r\n  }\r\n\r\n  /// @notice Used to add assets on same chain as contract that can\r\n  ///         be transferred.\r\n  /// @param assetId AssetId to add\r\n  function addAssetId(address assetId) external override onlyOwner whenNotPaused {\r\n    // Sanity check: needs approval\r\n    require(approvedAssets[assetId] == false, \"#AA:032\");\r\n\r\n    // Update mapping\r\n    approvedAssets[assetId] = true;\r\n\r\n    // Emit event\r\n    emit AssetAdded(assetId, msg.sender);\r\n  }\r\n\r\n  /// @notice Used to remove assets on same chain as contract that can\r\n  ///         be transferred.\r\n  /// @param assetId AssetId to remove\r\n  function removeAssetId(address assetId) external override onlyOwner whenNotPaused {\r\n    // Sanity check: already approval\r\n    require(approvedAssets[assetId] == true, \"#RA:033\");\r\n\r\n    // Update mapping\r\n    approvedAssets[assetId] = false;\r\n\r\n    // Emit event\r\n    emit AssetRemoved(assetId, msg.sender);\r\n  }\r\n\r\n  /// @notice This is used by any one to increase the available\r\n  ///         liquidity for a given asset on behalf of a router\r\n  /// @param amount The amount of liquidity to add for the router\r\n  /// @param assetId The address (or `address(0)` if native asset) of the\r\n  ///                asset you're adding liquidity for\r\n  /// @param router The router you are adding liquidity on behalf of\r\n  function addLiquidityFor(uint256 amount, address assetId, address router) external payable override whenNotPaused {\r\n    _addLiquidityForRouter(amount, assetId, router);\r\n  }\r\n\r\n  /// @notice This is used by any router to increase their available\r\n  ///         liquidity for a given asset.\r\n  /// @param amount The amount of liquidity to add for the router\r\n  /// @param assetId The address (or `address(0)` if native asset) of the\r\n  ///                asset you're adding liquidity for\r\n  function addLiquidity(uint256 amount, address assetId) external payable override whenNotPaused {\r\n    _addLiquidityForRouter(amount, assetId, msg.sender);\r\n  }\r\n\r\n  /// @notice Remove liquidity For router\r\n  /// @param amount The amount of liquidity to add for the router\r\n  /// @param assetId The address (or `address(0)` if native asset) of the\r\n  ///                asset you're adding liquidity for\r\n  /// @param router The router you are adding liquidity on behalf of\r\n  function removeLiquidityFor(uint256 amount, address assetId, address router, address payable recipient) external onlyOwner whenNotPaused {\r\n    _removeLiquidityForRouter(amount, assetId, router, recipient);\r\n  }\r\n\r\n  /// @notice This is used by any router to increase their available\r\n  ///         liquidity for a given asset.\r\n  /// @param amount The amount of liquidity to add for the router\r\n  /// @param assetId The address (or `address(0)` if native asset) of the\r\n  ///                asset you're adding liquidity for\r\n  function removeLiquidity(uint256 amount, address assetId, address payable recipient) external override whenNotPaused {\r\n    _removeLiquidityForRouter(amount, assetId, msg.sender, recipient);\r\n  }\r\n\r\n  \r\n  /// @notice This function creates a crosschain transaction. When called on\r\n  ///         the sending chain, the user is expected to lock up funds. When\r\n  ///         called on the receiving chain, the router deducts the transfer\r\n  ///         amount from the available liquidity. The majority of the\r\n  ///         information about a given transfer does not change between chains,\r\n  ///         with three notable exceptions: `amount`, `expiry`, and \r\n  ///         `preparedBlock`. The `amount` and `expiry` are decremented\r\n  ///         between sending and receiving chains to provide an incentive for \r\n  ///         the router to complete the transaction and time for the router to\r\n  ///         fulfill the transaction on the sending chain after the unlocking\r\n  ///         signature is revealed, respectively.\r\n  /// @param invariantData The data for a crosschain transaction that will\r\n  ///                      not change between sending and receiving chains.\r\n  ///                      The hash of this data is used as the key to store \r\n  ///                      the inforamtion that does change between chains \r\n  ///                      (amount, expiry,preparedBlock) for verification\r\n  /// @param amount The amount of the transaction on this chain\r\n  /// @param expiry The block.timestamp when the transaction will no longer be\r\n  ///               fulfillable and is freely cancellable on this chain\r\n  /// @param encryptedCallData The calldata to be executed when the tx is\r\n  ///                          fulfilled. Used in the function to allow the user\r\n  ///                          to reconstruct the tx from events. Hash is stored\r\n  ///                          onchain to prevent shenanigans.\r\n  /// @param encodedBid The encoded bid that was accepted by the user for this\r\n  ///                   crosschain transfer. It is supplied as a param to the\r\n  ///                   function but is only used in event emission\r\n  /// @param bidSignature The signature of the bidder on the encoded bid for\r\n  ///                     this transaction. Only used within the function for\r\n  ///                     event emission. The validity of the bid and\r\n  ///                     bidSignature are enforced offchain\r\n  function prepare(\r\n    InvariantTransactionData calldata invariantData,\r\n    uint256 amount,\r\n    uint256 expiry,\r\n    bytes calldata encryptedCallData,\r\n    bytes calldata encodedBid,\r\n    bytes calldata bidSignature\r\n  ) external payable override whenNotPaused returns (TransactionData memory) {\r\n    // Sanity check: user is sensible\r\n    require(invariantData.user != address(0), \"#P:009\");\r\n\r\n    // Sanity check: router is sensible\r\n    require(invariantData.router != address(0), \"#P:001\");\r\n\r\n    // Router is approved *on both chains*\r\n    require(renounced() || approvedRouters[invariantData.router], \"#P:003\");\r\n\r\n    // Sanity check: sendingChainFallback is sensible\r\n    require(invariantData.sendingChainFallback != address(0), \"#P:010\");\r\n\r\n    // Sanity check: valid fallback\r\n    require(invariantData.receivingAddress != address(0), \"#P:026\");\r\n\r\n    // Make sure the chains are different\r\n    // require(invariantData.sendingChainId != invariantData.receivingChainId, \"#P:011\");\r\n\r\n    // Make sure the chains are relevant\r\n    require(invariantData.sendingChainId == chainId || invariantData.receivingChainId == chainId, \"#P:012\");\r\n\r\n    // Make sure the expiry is greater than min\r\n    require((expiry - block.timestamp) >= MIN_TIMEOUT, \"#P:013\");\r\n\r\n    // Make sure the expiry is lower than max\r\n    require((expiry - block.timestamp) <= MAX_TIMEOUT, \"#P:014\");\r\n\r\n    // Make sure the hash is not a duplicate\r\n    bytes32 digest = keccak256(abi.encode(invariantData));\r\n    require(variantTransactionData[digest] == bytes32(0), \"#P:015\");\r\n    \r\n\r\n    // NOTE: the `encodedBid` and `bidSignature` are simply passed through\r\n    //       to the contract emitted event to ensure the availability of\r\n    //       this information. Their validity is asserted offchain, and\r\n    //       is out of scope of this contract. They are used as inputs so\r\n    //       in the event of a router or user crash, they may recover the\r\n    //       correct bid information without requiring an offchain store.\r\n\r\n    // First determine if this is sender side or receiver side\r\n    if (invariantData.sendingChainId == chainId) {\r\n      // Sanity check: amount is sensible\r\n      // Only check on sending chain to enforce router fees. Transactions could\r\n      // be 0-valued on receiving chain if it is just a value-less call to some\r\n      // `IFulfillHelper`\r\n      require(amount > 0, \"#P:002\");\r\n\r\n      // Assets are approved\r\n      // NOTE: Cannot check this on receiving chain because of differing\r\n      // chain contexts\r\n      require(renounced() || approvedAssets[invariantData.sendingAssetId], \"#P:004\");\r\n\r\n      // This is sender side prepare. The user is beginning the process of \r\n      // submitting an onchain tx after accepting some bid. They should\r\n      // lock their funds in the contract for the router to claim after\r\n      // they have revealed their signature on the receiving chain via\r\n      // submitting a corresponding `fulfill` tx\r\n\r\n      // Validate correct amounts on msg and transfer from user to\r\n      // contract\r\n      \r\n      // Calculate Fee amount and fee token\r\n      (uint256 amountFee, bool isSpecial) = calculateFeeAmount(msg.sender, invariantData.sendingAssetId, amount);\r\n      \r\n      // Transfer Special Fee token to Fee address\r\n      //\r\n      if(isSpecial) {\r\n        // Special Fee token to Fee address\r\n        LibAsset.transferFromERC20(specialFeeToken, msg.sender, invariantData.router, amountFee);\r\n\r\n        // Sending Token to contract(Consider fee token)\r\n        amount = transferAssetToContract(invariantData.sendingAssetId, amount);\r\n      } else {\r\n        // Transfer to contract\r\n        amount = transferAssetToContract(invariantData.sendingAssetId, amount);\r\n        \r\n        require(amount > amountFee, \"#P:080\");\r\n        \r\n        // Fee amount from sending token to fee address\r\n        LibAsset.transferAsset(invariantData.sendingAssetId, payable(invariantData.router), amountFee);\r\n        amount = amount.sub(amountFee);\r\n      }\r\n\r\n      // Store the transaction variants\r\n      variantTransactionData[digest] = hashVariantTransactionData(amount, expiry, block.number);\r\n\r\n    } else {\r\n      // This is receiver side prepare. The router has proposed a bid on the\r\n      // transfer which the user has accepted. They can now lock up their\r\n      // own liquidity on th receiving chain, which the user can unlock by\r\n      // calling `fulfill`. When creating the `amount` and `expiry` on the\r\n      // receiving chain, the router should have decremented both. The\r\n      // expiry should be decremented to ensure the router has time to\r\n      // complete the sender-side transaction after the user completes the\r\n      // receiver-side transactoin. The amount should be decremented to act as\r\n      // a fee to incentivize the router to complete the transaction properly.\r\n\r\n      // Check that the callTo is a contract\r\n      // NOTE: This cannot happen on the sending chain (different chain \r\n      // contexts), so a user could mistakenly create a transfer that must be\r\n      // cancelled if this is incorrect\r\n      require(invariantData.callTo == address(0) || isContract(invariantData.callTo), \"#P:031\");\r\n\r\n      // Check that the asset is approved\r\n      // NOTE: This cannot happen on both chains because of differing chain \r\n      // contexts. May be possible for user to create transaction that is not\r\n      // prepare-able on the receiver chain.\r\n      require(renounced() || approvedAssets[invariantData.receivingAssetId], \"#P:004\");\r\n\r\n      // Check that the caller is the router\r\n      require(msg.sender == invariantData.router, \"#P:016\");\r\n\r\n      // Check that the router isnt accidentally locking funds in the contract\r\n      require(msg.value == 0, \"#P:017\");\r\n\r\n      // Check that router has liquidity\r\n      uint256 balance = routerBalances[invariantData.router][invariantData.receivingAssetId];\r\n      require(balance >= amount, \"#P:018\");\r\n\r\n      // Store the transaction variants\r\n      variantTransactionData[digest] = hashVariantTransactionData(amount, expiry, block.number);\r\n\r\n      // Decrement the router liquidity\r\n      // using unchecked because underflow protected against with require\r\n      unchecked {\r\n        routerBalances[invariantData.router][invariantData.receivingAssetId] = balance - amount;\r\n      }\r\n    }\r\n\r\n    // Emit event\r\n    TransactionData memory txData = TransactionData({\r\n      user: invariantData.user,\r\n      router: invariantData.router,\r\n      sendingAssetId: invariantData.sendingAssetId,\r\n      receivingAssetId: invariantData.receivingAssetId,\r\n      sendingChainFallback: invariantData.sendingChainFallback,\r\n      callTo: invariantData.callTo,\r\n      receivingAddress: invariantData.receivingAddress,\r\n      callDataHash: invariantData.callDataHash,\r\n      transactionId: invariantData.transactionId,\r\n      sendingChainId: invariantData.sendingChainId,\r\n      receivingChainId: invariantData.receivingChainId,\r\n      amount: amount,\r\n      expiry: expiry,\r\n      preparedBlockNumber: block.number\r\n    });\r\n    emit TransactionPrepared(txData.user, txData.router, txData.transactionId, txData, msg.sender, encryptedCallData, encodedBid, bidSignature);\r\n    return txData;\r\n  }\r\n\r\n\r\n\r\n  /// @notice This function completes a crosschain transaction. When called on\r\n  ///         the receiving chain, the user reveals their signature on the\r\n  ///         invariant parts of the transaction data and is sent the \r\n  ///         appropriate amount. The router then uses this signature to\r\n  ///         unlock the corresponding funds on the receiving chain, which are\r\n  ///         then added back to their available liquidity. The user includes a\r\n  ///         relayer fee since it is not assumed they will have gas on the\r\n  ///         receiving chain. This function *must* be called before the\r\n  ///         transaction expiry has elapsed.\r\n  /// @param txData All of the data (invariant and variant) for a crosschain\r\n  ///               transaction. The variant data provided is checked against\r\n  ///               what was stored when the `prepare` function was called.\r\n  /// @param relayerFee The fee that should go to the relayer when they are\r\n  ///                   calling the function on the receiving chain for the user\r\n  /// @param signature The users signature on the invariant data + fee that\r\n  ///                  can be used by the router to unlock the transaction on \r\n  ///                  the sending chain\r\n  /// @param callData The calldata to be sent to and executed by the \r\n  ///                 `FulfillHelper`\r\n  function fulfill(\r\n    TransactionData calldata txData,\r\n    uint256 relayerFee,\r\n    bytes calldata signature, // signature on fee + digest\r\n    bytes calldata callData\r\n  ) external override nonReentrant whenNotPaused returns (TransactionData memory) {\r\n    // Get the hash of the invariant tx data. This hash is the same\r\n    // between sending and receiving chains. The variant data is stored\r\n    // in the contract when `prepare` is called within the mapping.\r\n    bytes32 digest = hashInvariantTransactionData(txData);\r\n\r\n    // Make sure that the variant data matches what was stored\r\n    require(variantTransactionData[digest] == hashVariantTransactionData(txData.amount, txData.expiry, txData.preparedBlockNumber), \"#F:019\");\r\n\r\n    // Make sure the expiry has not elapsed\r\n    require(txData.expiry >= block.timestamp, \"#F:020\");\r\n\r\n    // Make sure the transaction wasn't already completed\r\n    require(txData.preparedBlockNumber > 0, \"#F:021\");\r\n\r\n    // Validate the user has signed\r\n    require(recoverSignature(txData.transactionId, relayerFee, \"fulfill\", signature) == txData.user, \"#F:022\");\r\n\r\n    // Check provided callData matches stored hash\r\n    require(keccak256(callData) == txData.callDataHash, \"#F:024\");\r\n\r\n    // To prevent `fulfill` / `cancel` from being called multiple times, the\r\n    // preparedBlockNumber is set to 0 before being hashed. The value of the\r\n    // mapping is explicitly *not* zeroed out so users who come online without\r\n    // a store can tell the difference between a transaction that has not been\r\n    // prepared, and a transaction that was already completed on the receiver\r\n    // chain.\r\n    variantTransactionData[digest] = hashVariantTransactionData(txData.amount, txData.expiry, 0);\r\n\r\n    if (txData.sendingChainId == chainId) {\r\n      // The router is completing the transaction, they should get the\r\n      // amount that the user deposited credited to their liquidity\r\n      // reserves.\r\n\r\n      // Make sure that the user is not accidentally fulfilling the transaction\r\n      // on the sending chain\r\n      require(msg.sender == txData.router, \"#F:016\");\r\n\r\n      // Complete tx to router for original sending amount\r\n      routerBalances[txData.router][txData.sendingAssetId] += txData.amount;\r\n      \r\n    } else {\r\n      // Sanity check: fee <= amount. Allow `=` in case of only wanting to execute\r\n      // 0-value crosschain tx, so only providing the fee amount\r\n      require(relayerFee <= txData.amount, \"#F:023\");\r\n\r\n      // The user is completing the transaction, they should get the\r\n      // amount that the router deposited less fees for relayer.\r\n\r\n      // Get the amount to send\r\n      uint256 toSend;\r\n      unchecked {\r\n        toSend = txData.amount - relayerFee;\r\n      }\r\n\r\n      // Send the relayer the fee\r\n      if (relayerFee > 0) {\r\n        LibAsset.transferAsset(txData.receivingAssetId, payable(msg.sender), relayerFee);\r\n      }\r\n\r\n      // Handle receiver chain external calls if needed\r\n      if (txData.callTo == address(0)) {\r\n        // No external calls, send directly to receiving address\r\n        if (toSend > 0) {\r\n          LibAsset.transferAsset(txData.receivingAssetId, payable(txData.receivingAddress), toSend);\r\n        }\r\n      } else {\r\n        // Handle external calls with a fallback to the receiving\r\n        // address in case the call fails so the funds dont remain\r\n        // locked.\r\n\r\n        // First, transfer the funds to the helper if needed\r\n        // Cache in mem for gas\r\n        bool isEther = LibAsset.isEther(txData.receivingAssetId);\r\n        if (!isEther && toSend > 0) {\r\n          LibAsset.transferERC20(txData.receivingAssetId, address(interpreter), toSend);\r\n        }\r\n\r\n        // Next, call `execute` on the helper. Helpers should internally\r\n        // track funds to make sure no one user is able to take all funds\r\n        // for tx, and handle the case of reversions\r\n        interpreter.execute{ value: isEther ? toSend : 0}(\r\n          txData.transactionId,\r\n          payable(txData.callTo),\r\n          txData.receivingAssetId,\r\n          payable(txData.receivingAddress),\r\n          toSend,\r\n          callData\r\n        );\r\n      }\r\n    }\r\n\r\n    // Emit event\r\n    emit TransactionFulfilled(txData.user, txData.router, txData.transactionId, txData, relayerFee, signature, callData, msg.sender);\r\n\r\n    return txData;\r\n  }\r\n\r\n  /// @notice Any crosschain transaction can be cancelled after it has been\r\n  ///         created to prevent indefinite lock up of funds. After the\r\n  ///         transaction has expired, anyone can cancel it. Before the\r\n  ///         expiry, only the recipient of the funds on the given chain is\r\n  ///         able to cancel. On the sending chain, this means only the router\r\n  ///         is able to cancel before the expiry, while only the user can\r\n  ///         prematurely cancel on the receiving chain.\r\n  /// @param txData All of the data (invariant and variant) for a crosschain\r\n  ///               transaction. The variant data provided is checked against\r\n  ///               what was stored when the `prepare` function was called.\r\n  /// @param relayerFee The fee that should go to the relayer when they are\r\n  ///                   calling the function for the user\r\n  /// @param signature The user's signature that allows a transaction to be\r\n  ///                  cancelled on the receiving chain.\r\n  function cancel(TransactionData calldata txData, uint256 relayerFee, bytes calldata signature)\r\n    external\r\n    override\r\n    nonReentrant\r\n    whenNotPaused\r\n    returns (TransactionData memory)\r\n  {\r\n    // Make sure params match against stored data\r\n    // Also checks that there is an active transfer here\r\n    // Also checks that sender or receiver chainID is this chainId (bc we checked it previously)\r\n\r\n    // Get the hash of the invariant tx data. This hash is the same\r\n    // between sending and receiving chains. The variant data is stored\r\n    // in the contract when `prepare` is called within the mapping.\r\n    bytes32 digest = hashInvariantTransactionData(txData);\r\n\r\n    // Verify the variant data is correct\r\n    require(variantTransactionData[digest] == hashVariantTransactionData(txData.amount, txData.expiry, txData.preparedBlockNumber), \"#C:019\");\r\n\r\n    // Make sure the transaction wasn't already completed\r\n    require(txData.preparedBlockNumber > 0, \"#C:021\");\r\n\r\n\r\n    // To prevent `fulfill` / `cancel` from being called multiple times, the\r\n    // preparedBlockNumber is set to 0 before being hashed. The value of the\r\n    // mapping is explicitly *not* zeroed out so users who come online without\r\n    // a store can tell the difference between a transaction that has not been\r\n    // prepared, and a transaction that was already completed on the receiver\r\n    // chain.\r\n    variantTransactionData[digest] = hashVariantTransactionData(txData.amount, txData.expiry, 0);\r\n\r\n    // Return the appropriate locked funds\r\n    if (txData.sendingChainId == chainId) {\r\n      // Sender side, funds must be returned to the user\r\n      if (txData.expiry >= block.timestamp) {\r\n        // Timeout has not expired and tx may only be cancelled by router\r\n        // NOTE: no need to validate the signature here, since you are requiring\r\n        // the router must be the sender when the cancellation is during the\r\n        // fulfill-able window\r\n        require(msg.sender == txData.router, \"#C:025\");\r\n\r\n        // Return totality of locked funds to provided fallbacl\r\n        LibAsset.transferAsset(txData.sendingAssetId, payable(txData.sendingChainFallback), txData.amount);\r\n      } else {\r\n        // Sanity check: fee <= amount. Allow `=` in case of only wanting to execute\r\n        // 0-value crosschain tx, so only providing the fee amount\r\n        require(relayerFee <= txData.amount, \"#C:023\");\r\n\r\n\r\n        // When the user could be unlocking funds through a relayer, validate\r\n        // their signature and payout the relayer.\r\n        if (relayerFee > 0) {\r\n          require(msg.sender == txData.user || recoverSignature(txData.transactionId, relayerFee, \"cancel\", signature) == txData.user, \"#C:022\");\r\n\r\n          LibAsset.transferAsset(txData.sendingAssetId, payable(msg.sender), relayerFee);\r\n        }\r\n\r\n        // Get the amount to refund the user\r\n        uint256 toRefund;\r\n        unchecked {\r\n          toRefund = txData.amount - relayerFee; \r\n        }\r\n\r\n        // Return locked funds to sending chain fallback\r\n        if (toRefund > 0) {\r\n          LibAsset.transferAsset(txData.sendingAssetId, payable(txData.sendingChainFallback), toRefund);\r\n        }\r\n      }\r\n\r\n    } else {\r\n      // Receiver side, router liquidity is returned\r\n      if (txData.expiry >= block.timestamp) {\r\n        // Timeout has not expired and tx may only be cancelled by user\r\n        // Validate signature\r\n        require(msg.sender == txData.user || recoverSignature(txData.transactionId, relayerFee, \"cancel\", signature) == txData.user, \"#C:022\");\r\n\r\n        // NOTE: there is no incentive here for relayers to submit this on\r\n        // behalf of the user (i.e. fee not respected) because the user has not\r\n        // locked funds on this contract.\r\n      }\r\n\r\n      // Return liquidity to router\r\n      routerBalances[txData.router][txData.receivingAssetId] += txData.amount;\r\n    }\r\n\r\n    // Emit event\r\n    emit TransactionCancelled(txData.user, txData.router, txData.transactionId, txData, relayerFee, msg.sender);\r\n\r\n    // Return\r\n    return txData;\r\n  }\r\n\r\n  //////////////////////////\r\n  /// Private functions ///\r\n  //////////////////////////\r\n\r\n  /// @notice Contains logic to add liquidity for a given router\r\n  /// @param amount The amount of liquidity to add for the router\r\n  /// @param assetId The address (or `address(0)` if native asset) of the\r\n  ///                asset you're adding liquidity for\r\n  /// @param router The router you are adding liquidity on behalf of\r\n  function _addLiquidityForRouter(\r\n    uint256 amount,\r\n    address assetId,\r\n    address router\r\n  ) internal {\r\n    // Sanity check: router is sensible\r\n    require(router != address(0), \"#AL:001\");\r\n\r\n    // Sanity check: nonzero amounts\r\n    require(amount > 0, \"#AL:002\");\r\n\r\n    // Store renounced() result in memory for gas\r\n    bool isRenounced = renounced();\r\n\r\n    // Router is approved\r\n    require(isRenounced || approvedRouters[router], \"#AL:003\");\r\n\r\n    // Asset is approved\r\n    require(isRenounced || approvedAssets[assetId], \"#AL:004\");\r\n\r\n    // Validate correct amounts are transferred\r\n    // Transfer funds to contract\r\n    amount = transferAssetToContract(assetId, amount);\r\n\r\n    // Update the router balances\r\n    routerBalances[router][assetId] += amount;\r\n\r\n    // Emit event\r\n    emit LiquidityAdded(router, assetId, amount, msg.sender);\r\n  }\r\n\r\n\r\n  /// @notice This is used by any router to decrease their available\r\n  ///         liquidity for a given asset.\r\n  /// @param amount The amount of liquidity to remove for the router\r\n  /// @param assetId The address (or `address(0)` if native asset) of the\r\n  ///                asset you're removing liquidity for\r\n  /// @param router The router address to remove\r\n  /// @param recipient The address that will receive the liquidity being removed\r\n  function _removeLiquidityForRouter(\r\n    uint256 amount,\r\n    address assetId,\r\n    address router,\r\n    address payable recipient\r\n  ) internal {\r\n    // Sanity check: recipient is sensible\r\n    require(recipient != address(0), \"#RL:007\");\r\n\r\n    // Sanity check: nonzero amounts\r\n    require(amount > 0, \"#RL:002\");\r\n\r\n    uint256 routerBalance = routerBalances[router][assetId];\r\n    // Sanity check: amount can be deducted for the router\r\n    require(routerBalance >= amount, \"#RL:008\");\r\n\r\n    // Update router balances\r\n    unchecked {\r\n      routerBalances[router][assetId] = routerBalance - amount;\r\n    }\r\n\r\n    // Transfer from contract to specified recipient\r\n    LibAsset.transferAsset(assetId, recipient, amount);\r\n\r\n    // Emit event\r\n    emit LiquidityRemoved(router, assetId, amount, recipient);\r\n  }\r\n\r\n  /**\r\n   * @notice Handles transferring funds from msg.sender to the\r\n   *         transaction manager contract. Used in prepare, addLiquidity\r\n   * @param assetId The address to transfer\r\n   * @param specifiedAmount The specified amount to transfer. May not be the \r\n   *                        actual amount transferred (i.e. fee on transfer \r\n   *                        tokens)\r\n   */\r\n  function transferAssetToContract(address assetId, uint256 specifiedAmount) internal returns (uint256) {\r\n    uint256 trueAmount = specifiedAmount;\r\n\r\n    // Validate correct amounts are transferred\r\n    if (LibAsset.isEther(assetId)) {\r\n      require(msg.value == specifiedAmount, \"#TA:005\");\r\n    } else {\r\n      uint256 starting = LibAsset.getOwnBalance(assetId);\r\n      require(msg.value == 0, \"#TA:006\");\r\n      LibAsset.transferFromERC20(assetId, msg.sender, address(this), specifiedAmount);\r\n      // Calculate the *actual* amount that was sent here\r\n      trueAmount = LibAsset.getOwnBalance(assetId) - starting;\r\n    }\r\n\r\n    return trueAmount;\r\n  }\r\n\r\n  /// @notice Recovers the signer from the signature provided by the user\r\n  /// @param transactionId Transaction identifier of tx being recovered\r\n  /// @param relayerFee The fee paid to the relayer for submitting the\r\n  ///                   tx on behalf of the user.\r\n  /// @param functionIdentifier The function the signature is being used for.\r\n  ///                           Either `fulfill` or `cancel`\r\n  /// @param signature The signature you are recovering the signer from\r\n  function recoverSignature(\r\n    bytes32 transactionId,\r\n    uint256 relayerFee,\r\n    string memory functionIdentifier,\r\n    bytes calldata signature\r\n  ) internal pure returns (address) {\r\n    // Create the signed payload\r\n    SignedData memory payload = SignedData({\r\n      transactionId: transactionId,\r\n      relayerFee: relayerFee,\r\n      functionIdentifier: functionIdentifier\r\n    });\r\n\r\n    // Recover\r\n    return ECDSAUpgradeable.recover(ECDSAUpgradeable.toEthSignedMessageHash(keccak256(abi.encode(payload))), signature);\r\n  }\r\n\r\n  /// @notice Returns the hash of only the invariant portions of a given\r\n  ///         crosschain transaction\r\n  /// @param txData TransactionData to hash\r\n  function hashInvariantTransactionData(TransactionData calldata txData) internal pure returns (bytes32) {\r\n    InvariantTransactionData memory invariant = InvariantTransactionData({\r\n      user: txData.user,\r\n      router: txData.router,\r\n      sendingAssetId: txData.sendingAssetId,\r\n      receivingAssetId: txData.receivingAssetId,\r\n      sendingChainFallback: txData.sendingChainFallback,\r\n      callTo: txData.callTo,\r\n      receivingAddress: txData.receivingAddress,\r\n      sendingChainId: txData.sendingChainId,\r\n      receivingChainId: txData.receivingChainId,\r\n      callDataHash: txData.callDataHash,\r\n      transactionId: txData.transactionId\r\n    });\r\n    return keccak256(abi.encode(invariant));\r\n  }\r\n\r\n  /// @notice Returns the hash of only the variant portions of a given\r\n  ///         crosschain transaction\r\n  /// @param amount amount to hash\r\n  /// @param expiry expiry to hash\r\n  /// @param preparedBlockNumber preparedBlockNumber to hash\r\n  function hashVariantTransactionData(uint256 amount, uint256 expiry, uint256 preparedBlockNumber) internal pure returns (bytes32) {\r\n    VariantTransactionData memory variant = VariantTransactionData({\r\n      amount: amount,\r\n      expiry: expiry,\r\n      preparedBlockNumber: preparedBlockNumber\r\n    });\r\n    return keccak256(abi.encode(variant));\r\n  }\r\n\r\n  /// @notice Returns the special fee token address, normal fee percent, special fee percent\r\n  ///\r\n  function getFeeInfo() public view returns(address, uint256, uint256) {\r\n    return (specialFeeToken, normalFeePercent, specialFeePercent);\r\n  }\r\n\r\n  /// @notice Returns the token price from price oracle\r\n  /// @param token Sending token address\r\n  /// (Price for 1 wei) * 10 ^ 36\r\n  function getTokenPrice(address token) public view returns(uint256) {\r\n    if(address(priceOracle) == address(0x0)) {\r\n      return 0;\r\n    }\r\n    uint256 decimals = 18;\r\n    if(token != address(0x0)) {\r\n      decimals = IERC20Minimal(token).decimals();\r\n    }\r\n\r\n    return priceOracle.getTokenPrice(token).mul(10 ** (18 - decimals));\r\n  }\r\n\r\n\r\n  /// @notice Returns the fee amount\r\n  /// @param account Sender address\r\n  /// @param token Sending token address\r\n  /// @param amount Sending Amount\r\n  /// If account is holder of special token : (USD value of sending token) * (special Fee percent) / (special Fee Token Price)\r\n  /// Else                                    (Sending Token) * (normal Fee percent)\r\n  function calculateFeeAmount(address account, address token, uint256 amount) public override view returns (uint256, bool) {\r\n    // First Check if account is holder of special Fee token\r\n    if(specialFeeToken != address(0x0) && address(priceOracle) != address(0x0)) {\r\n      uint256 _specialFeePrice = getTokenPrice(specialFeeToken);\r\n      \r\n      // If Sepcial Fee is on Price oracle\r\n      if(_specialFeePrice > 0) {\r\n        uint256 _amountTokenUSD = getTokenPrice(token).mul(amount);\r\n        uint256 _amountFeeSpecial = (_amountTokenUSD.mul(specialFeePercent).div(PERCENTS_DIVIDER)).div(_specialFeePrice);\r\n\r\n        // Check if account has sufficient Special Fee TokenBalance\r\n        if(IERC20Minimal(specialFeeToken).balanceOf(account) >= _amountFeeSpecial) {\r\n          return (_amountFeeSpecial, true);\r\n        }\r\n      }\r\n    }\r\n\r\n    return (amount.mul(normalFeePercent).div(PERCENTS_DIVIDER), false);\r\n  }\r\n\r\n  function isContract(address _addr) view private returns (bool){\r\n    uint32 size;\r\n    assembly {\r\n        size := extcodesize(_addr)\r\n    }\r\n    return (size > 0);\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedAssetId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedAssetId\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"normalFeePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"specialFeePercent\",\"type\":\"uint256\"}],\"name\":\"NewFeePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"}],\"name\":\"NewPriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NewSpecialFeeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RouterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RouterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TransactionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TransactionFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedCallData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedBid\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bidSignature\",\"type\":\"bytes\"}],\"name\":\"TransactionPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptProposedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"}],\"name\":\"addAssetId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"addLiquidityFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"addRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"fulfill\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interpreter\",\"outputs\":[{\"internalType\":\"contract IFulfillInterpreter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"normalFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct ITransactionManager.InvariantTransactionData\",\"name\":\"invariantData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedCallData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encodedBid\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bidSignature\",\"type\":\"bytes\"}],\"name\":\"prepare\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newlyProposed\",\"type\":\"address\"}],\"name\":\"proposeNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"}],\"name\":\"removeAssetId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"removeLiquidityFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"removeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routerBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_normal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_special\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setSpecialFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"specialFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"specialFeeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"variantTransactionData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TransactionManager","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8490830937ae72c54680fdae55f7fe649fc63837e4093643ebca4dbbcd44ebf0"}]}