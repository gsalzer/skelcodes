{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Auctions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport { ITux } from \\\"./ITux.sol\\\";\\nimport { IAuctions } from \\\"./IAuctions.sol\\\";\\n\\nimport \\\"./library/UintSet.sol\\\";\\nimport \\\"./library/AddressSet.sol\\\";\\nimport \\\"./library/OrderedSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IERC721, IERC165 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { IERC721Metadata } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\n\\ncontract Auctions is\\n    IAuctions,\\n    ReentrancyGuard\\n{\\n    using SafeMath for uint256;\\n    using UintSet for UintSet.Set;\\n    using AddressSet for AddressSet.Set;\\n    using OrderedSet for OrderedSet.Set;\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _bidIdTracker;\\n    Counters.Counter private _houseIdTracker;\\n    Counters.Counter private _auctionIdTracker;\\n    Counters.Counter private _contractIdTracker;\\n    Counters.Counter private _offerIdTracker;\\n    Counters.Counter private _creatorsTracker;\\n    Counters.Counter private _collectorsTracker;\\n\\n    // Minimum amount of time left in seconds to an auction after a new bid is placed\\n    uint256 constant public timeBuffer = 900;  // 15 minutes -> 900 seconds\\n\\n    // Minimum percentage difference between the last bid and the current bid\\n    uint16 constant public minimumIncrementPercentage = 500;  // 5%\\n\\n    // Mapping from house name to house ID\\n    mapping(string => uint256) public houseIDs;\\n\\n    // Mapping from token contract to contract ID\\n    mapping(address => uint256) public contractIDs;\\n\\n    // Mapping from keccak256(contract, token) to currently running auction ID\\n    mapping(bytes32 => uint256) public tokenAuction;\\n\\n    // Mapping from rank to house ID\\n    mapping(uint256 => uint256) public ranking;\\n\\n    // Mapping from rank to creator\\n    mapping(uint256 => address) public creatorRanking;\\n\\n    // Mapping from rank to collector\\n    mapping(uint256 => address) public collectorRanking;\\n\\n    // Mapping from rank to token contract ID\\n    mapping(uint256 => uint256) public contractRanking;\\n\\n    // Mapping of token contracts\\n    mapping(uint256 => IAuctions.TokenContract) public contracts;\\n\\n    // Mapping of auctions\\n    mapping(uint256 => IAuctions.Auction) public auctions;\\n\\n    // Mapping of houses\\n    mapping(uint256 => IAuctions.House) public houses;\\n\\n    // Mapping of bids\\n    mapping(uint256 => IAuctions.Bid) public bids;\\n\\n    // Mapping of offers\\n    mapping(uint256 => IAuctions.Offer) public offers;\\n\\n    // Mapping of accounts\\n    mapping(address => IAuctions.Account) public accounts;\\n\\n    // Mapping from creator to stats\\n    mapping(address => IAuctions.CreatorStats) public creatorStats;\\n\\n    // Mapping from collector to stats\\n    mapping(address => IAuctions.CollectorStats) public collectorStats;\\n\\n    // Mapping from house ID to token IDs requiring approval\\n    mapping(uint256 => UintSet.Set) private _houseQueue;\\n\\n    // Mapping from auction ID to bids\\n    mapping(uint256 => UintSet.Set) private _auctionBids;\\n\\n    // Mapping from house ID to active auction IDs\\n    mapping(uint256 => OrderedSet.Set) private _houseAuctions;\\n\\n    // Mapping from curator to enumerable house IDs\\n    mapping(address => UintSet.Set) private _curatorHouses;\\n\\n    // Mapping from creator to enumerable house IDs\\n    mapping(address => UintSet.Set) private _creatorHouses;\\n\\n    // Mapping from house id to enumerable creators\\n    mapping(uint256 => AddressSet.Set) private _houseCreators;\\n\\n    // Mapping from seller to active auction IDs\\n    mapping(address => UintSet.Set) private _sellerAuctions;\\n\\n    // Mapping from bidder to active auction IDs\\n    mapping(address => UintSet.Set) private _bidderAuctions;\\n\\n    // Mapping from keccak256(contract, token) to previous auction IDs\\n    mapping(bytes32 => UintSet.Set) private _previousTokenAuctions;\\n\\n    // Mapping from keccak256(contract, token) to offer IDs\\n    mapping(bytes32 => UintSet.Set) private _tokenOffers;\\n\\n    // OrderedSet of active auction IDs without a house ID\\n    OrderedSet.Set private _activeAuctions;\\n\\n\\n    bytes4 constant interfaceId = 0x5b5e139f; // ERC721 interfaceId\\n\\n\\n    modifier auctionExists(uint256 auctionId) {\\n        require(\\n            auctions[auctionId].tokenOwner != address(0),\\n            \\\"Auction does not exist\\\");\\n        _;\\n    }\\n\\n    modifier onlyHouseCurator(uint256 houseId) {\\n        require(\\n            msg.sender == houses[houseId].curator,\\n            \\\"Must be house curator\\\");\\n        _;\\n    }\\n\\n\\n    /*\\n     * Constructor\\n     */\\n    /* constructor() {} */\\n\\n    function totalHouses() public view override returns (uint256) {\\n        return _houseIdTracker.current();\\n    }\\n\\n    function totalAuctions() public view override returns (uint256) {\\n        return _auctionIdTracker.current();\\n    }\\n\\n    function totalContracts() public view override returns (uint256) {\\n        return _contractIdTracker.current();\\n    }\\n\\n    function totalCreators() public view override returns (uint256) {\\n        return _creatorsTracker.current();\\n    }\\n\\n    function totalCollectors() public view override returns (uint256) {\\n        return _collectorsTracker.current();\\n    }\\n\\n    function totalActiveAuctions() public view override returns (uint256) {\\n        return _activeAuctions.length();\\n    }\\n\\n    function totalActiveHouseAuctions(uint256 houseId) public view override returns (uint256) {\\n        return _houseAuctions[houseId].length();\\n    }\\n\\n    function getAuctions() public view override returns (uint256[] memory) {\\n        return _activeAuctions.values();\\n    }\\n\\n    function getAuctionsFromN(uint256 from, uint256 n) public view override returns (uint256[] memory) {\\n        return _activeAuctions.valuesFromN(from, n);\\n    }\\n\\n    function getHouseAuctions(uint256 houseId) public view override returns (uint256[] memory) {\\n        return _houseAuctions[houseId].values();\\n    }\\n\\n    function getHouseAuctionsFromN(uint256 houseId, uint256 from, uint256 n) public view override returns (uint256[] memory) {\\n        return _houseAuctions[houseId].valuesFromN(from, n);\\n    }\\n\\n    function getHouseQueue(uint256 houseId) public view override returns (uint256[] memory) {\\n        return _houseQueue[houseId].values();\\n    }\\n\\n    function getAuctionBids(uint256 auctionId) public view override returns (uint256[] memory) {\\n        return _auctionBids[auctionId].values();\\n    }\\n\\n    function getCuratorHouses(address curator) public view override returns (uint256[] memory) {\\n        return _curatorHouses[curator].values();\\n    }\\n\\n    function getCreatorHouses(address creator) public view override returns (uint256[] memory) {\\n        return _creatorHouses[creator].values();\\n    }\\n\\n    function getHouseCreators(uint256 houseId) public view override returns (address[] memory) {\\n        return _houseCreators[houseId].values();\\n    }\\n\\n    function getSellerAuctions(address seller) public view override returns (uint256[] memory) {\\n        return _sellerAuctions[seller].values();\\n    }\\n\\n    function getBidderAuctions(address bidder) public view override returns (uint256[] memory) {\\n        return _bidderAuctions[bidder].values();\\n    }\\n\\n    function getPreviousAuctions(bytes32 tokenHash) public view override returns (uint256[] memory) {\\n        return _previousTokenAuctions[tokenHash].values();\\n    }\\n\\n    function getTokenOffers(bytes32 tokenHash) public view override returns (uint256[] memory) {\\n        return _tokenOffers[tokenHash].values();\\n    }\\n\\n\\n    function createHouse(\\n        string  memory name,\\n        address curator,\\n        uint16  fee,\\n        bool    preApproved,\\n        string  memory metadata\\n    )\\n        public\\n        override\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(\\n            houseIDs[name] == 0,\\n            \\\"House name already exists\\\");\\n        require(\\n            bytes(name).length > 0,\\n            \\\"House name is required\\\");\\n        require(\\n            bytes(name).length <= 32,\\n            \\\"House name must be less than 32 characters\\\");\\n        require(\\n            curator != address(0),\\n            \\\"Curator address is required\\\");\\n        require(\\n            fee < 10000,\\n            \\\"Curator fee percentage must be less than 100%\\\");\\n\\n        _houseIdTracker.increment();\\n        uint256 houseId = _houseIdTracker.current();\\n\\n        houses[houseId] = House({\\n            name: name,\\n            curator: payable(curator),\\n            fee: fee,\\n            preApproved: preApproved,\\n            metadata: metadata,\\n            bids: 0,\\n            sales: 0,\\n            total: 0,\\n            feesTotal: 0,\\n            activeAuctions: 0,\\n            rank: houseId\\n        });\\n\\n        _curatorHouses[curator].add(houseId);\\n        ranking[houseId] = houseId;\\n        houseIDs[name] = houseId;\\n\\n        emit HouseCreated(\\n            houseId\\n        );\\n\\n        return houseId;\\n    }\\n\\n    function addCreator(\\n        uint256 houseId,\\n        address creator\\n    )\\n        public\\n        override\\n        onlyHouseCurator(houseId)\\n    {\\n        require(\\n            _houseCreators[houseId].contains(creator) == false,\\n            \\\"Creator already added\\\");\\n\\n        _houseCreators[houseId].add(creator);\\n        _creatorHouses[creator].add(houseId);\\n\\n        emit CreatorAdded(\\n            houseId,\\n            creator\\n        );\\n    }\\n\\n    function removeCreator(\\n        uint256 houseId,\\n        address creator\\n    )\\n        public\\n        override\\n        onlyHouseCurator(houseId)\\n    {\\n        require(\\n            _houseCreators[houseId].contains(creator) == true,\\n            \\\"Creator already removed\\\");\\n\\n        _houseCreators[houseId].remove(creator);\\n        _creatorHouses[creator].remove(houseId);\\n\\n        emit CreatorRemoved(\\n            houseId,\\n            creator\\n        );\\n    }\\n\\n    function updateFee(\\n        uint256 houseId,\\n        uint16  fee\\n    )\\n        public\\n        override\\n        onlyHouseCurator(houseId)\\n    {\\n        require(\\n            fee < 10000,\\n            \\\"Curator fee percentage must be less than 100%\\\");\\n\\n        houses[houseId].fee = fee;\\n\\n        emit FeeUpdated(\\n            houseId,\\n            fee\\n        );\\n    }\\n\\n    function updateMetadata(\\n        uint256 houseId,\\n        string memory metadata\\n    )\\n        public\\n        override\\n        onlyHouseCurator(houseId)\\n    {\\n        houses[houseId].metadata = metadata;\\n\\n        emit MetadataUpdated(\\n            houseId,\\n            metadata\\n        );\\n    }\\n\\n    function updateName(\\n        string  memory name\\n    )\\n        public\\n        override\\n    {\\n        accounts[msg.sender].name = name;\\n\\n        emit AccountUpdated(\\n            msg.sender\\n        );\\n    }\\n\\n    function updateBio(\\n        string  memory bioHash\\n    )\\n        public\\n        override\\n    {\\n        accounts[msg.sender].bioHash = bioHash;\\n\\n        emit AccountUpdated(\\n            msg.sender\\n        );\\n    }\\n\\n    function updatePicture(\\n        string  memory pictureHash\\n    )\\n        public\\n        override\\n    {\\n        accounts[msg.sender].pictureHash = pictureHash;\\n\\n        emit AccountUpdated(\\n            msg.sender\\n        );\\n    }\\n\\n    function createAuction(\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 duration,\\n        uint256 reservePrice,\\n        uint256 houseId\\n    )\\n        public\\n        override\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(\\n            IERC165(tokenContract).supportsInterface(interfaceId),\\n            \\\"Token contract does not support ERC721 interface\\\");\\n\\n        address tokenOwner = IERC721(tokenContract).ownerOf(tokenId);\\n        require(\\n            msg.sender == tokenOwner ||\\n            msg.sender == IERC721(tokenContract).getApproved(tokenId),\\n            \\\"Must be token owner or approved\\\");\\n\\n        uint16  fee = 0;\\n        bool    preApproved = true;\\n        address curator = address(0);\\n\\n        if (houseId > 0) {\\n            curator = houses[houseId].curator;\\n\\n            require(\\n                curator != address(0),\\n                \\\"House does not exist\\\");\\n            require(\\n                _houseCreators[houseId].contains(tokenOwner) || msg.sender == curator,\\n                \\\"Must be approved by the house\\\");\\n\\n            fee = houses[houseId].fee;\\n            preApproved = houses[houseId].preApproved;\\n            houses[houseId].activeAuctions += 1;\\n        }\\n\\n        if (contractIDs[tokenContract] == 0) {\\n          registerTokenContract(tokenContract);\\n        }\\n\\n        try ITux(tokenContract).tokenCreator(tokenId) returns (address creator) {\\n          if (accounts[creator].creatorRank == 0) {\\n              _creatorsTracker.increment();\\n              uint256 creatorRank = _creatorsTracker.current();\\n              creatorRanking[creatorRank] = creator;\\n              accounts[creator].creatorRank = creatorRank;\\n              creatorStats[creator] = CreatorStats({\\n                  bids: 0,\\n                  sales: 0,\\n                  total: 0\\n              });\\n          }\\n        } catch {}\\n\\n        _auctionIdTracker.increment();\\n        uint256 auctionId = _auctionIdTracker.current();\\n\\n        tokenAuction[keccak256(abi.encode(tokenContract, tokenId))] = auctionId;\\n\\n        _sellerAuctions[tokenOwner].add(auctionId);\\n\\n        bool approved = (curator == address(0) || preApproved || curator == tokenOwner);\\n\\n        if (houseId > 0) {\\n            if (approved == true) {\\n                _houseAuctions[houseId].add(auctionId);\\n            }\\n            else {\\n                _houseQueue[houseId].add(auctionId);\\n            }\\n        }\\n        else {\\n            _activeAuctions.add(auctionId);\\n        }\\n\\n        auctions[auctionId] = Auction({\\n            tokenContract: tokenContract,\\n            tokenId: tokenId,\\n            tokenOwner: tokenOwner,\\n            duration: duration,\\n            reservePrice: reservePrice,\\n            houseId: houseId,\\n            fee: fee,\\n            approved: approved,\\n            firstBidTime: 0,\\n            amount: 0,\\n            bidder: payable(0),\\n            created: block.timestamp\\n        });\\n\\n        IERC721(tokenContract).transferFrom(tokenOwner, address(this), tokenId);\\n\\n        emit AuctionCreated(\\n            auctionId\\n        );\\n\\n        return auctionId;\\n    }\\n\\n    function setAuctionApproval(uint256 auctionId, bool approved)\\n        external\\n        override\\n        auctionExists(auctionId)\\n    {\\n        IAuctions.Auction storage auction = auctions[auctionId];\\n        address curator = houses[auction.houseId].curator;\\n\\n        require(\\n            curator != address(0) && curator == msg.sender,\\n            \\\"Must be auction curator\\\");\\n        require(\\n            auction.firstBidTime == 0,\\n            \\\"Auction has already started\\\");\\n        require(\\n            (approved == true && auction.approved == false) ||\\n            (approved == false && auction.approved == true),\\n            \\\"Auction already in this approved state\\\");\\n\\n        auction.approved = approved;\\n\\n        if (approved == true) {\\n            _houseAuctions[auction.houseId].add(auctionId);\\n            _houseQueue[auction.houseId].remove(auctionId);\\n        }\\n\\n        emit AuctionApprovalUpdated(\\n            auctionId,\\n            approved\\n        );\\n    }\\n\\n    function setAuctionReservePrice(uint256 auctionId, uint256 reservePrice)\\n        external\\n        override\\n        auctionExists(auctionId)\\n    {\\n        IAuctions.Auction storage auction = auctions[auctionId];\\n\\n        require(\\n            msg.sender == auction.tokenOwner,\\n            \\\"Must be token owner\\\");\\n        require(\\n            auction.firstBidTime == 0,\\n            \\\"Auction has already started\\\");\\n\\n        auction.reservePrice = reservePrice;\\n\\n        emit AuctionReservePriceUpdated(\\n            auctionId,\\n            reservePrice\\n        );\\n    }\\n\\n    function createBid(uint256 auctionId, uint256 amount)\\n        external\\n        override\\n        payable\\n        auctionExists(auctionId)\\n        nonReentrant\\n    {\\n        IAuctions.Auction storage auction = auctions[auctionId];\\n\\n        require(\\n            auction.approved,\\n            \\\"Auction must be approved by curator\\\");\\n        require(\\n            msg.value == amount,\\n            \\\"Sent ETH does not match specified bid amount\\\");\\n        require(\\n            auction.firstBidTime == 0 ||\\n            block.timestamp < auction.firstBidTime.add(auction.duration),\\n            \\\"Auction expired\\\");\\n        require(\\n            amount >= auction.amount.add(\\n                auction.amount.mul(minimumIncrementPercentage).div(10000)),\\n            \\\"Must send more than last bid by 5%\\\");\\n        require(\\n            amount >= auction.reservePrice,\\n            \\\"Bid below reserve price\\\");\\n\\n        address payable lastBidder = auction.bidder;\\n        bool isFirstBid = true;\\n        if (lastBidder != payable(0)) {\\n            isFirstBid = false;\\n        }\\n\\n        if (auction.firstBidTime == 0) {\\n            auction.firstBidTime = block.timestamp;\\n        } else if (isFirstBid == false) {\\n            _handleOutgoingBid(lastBidder, auction.amount);\\n        }\\n\\n        _handleIncomingBid(amount);\\n\\n        auction.amount = amount;\\n        auction.bidder = payable(msg.sender);\\n\\n        _bidIdTracker.increment();\\n        uint256 bidId = _bidIdTracker.current();\\n\\n        bids[bidId] = Bid({\\n            timestamp: block.timestamp,\\n            bidder: msg.sender,\\n            value: amount\\n        });\\n\\n        _auctionBids[auctionId].add(bidId);\\n        _bidderAuctions[msg.sender].add(auctionId);\\n\\n        contracts[contractIDs[auction.tokenContract]].bids += 1;\\n\\n        try ITux(auction.tokenContract).tokenCreator(auction.tokenId) returns (address creator) {\\n            if (creator == auction.tokenOwner) {\\n                creatorStats[auction.tokenOwner].bids += 1;\\n            }\\n\\n            uint256 creatorRank = accounts[creator].creatorRank;\\n            if (creatorRank > 1) {\\n                address rankedUp = creatorRanking[creatorRank - 1];\\n                if (creatorStats[creator].bids > creatorStats[rankedUp].bids) {\\n                    accounts[creator].creatorRank -= 1;\\n                    accounts[rankedUp].creatorRank += 1;\\n                    creatorRanking[creatorRank - 1] = creator;\\n                    creatorRanking[creatorRank] = rankedUp;\\n                }\\n            }\\n        } catch {}\\n\\n        uint256 collectorRank = accounts[msg.sender].collectorRank;\\n        if (collectorRank == 0) {\\n            _collectorsTracker.increment();\\n            collectorRank = _collectorsTracker.current();\\n            collectorRanking[collectorRank] = msg.sender;\\n            accounts[msg.sender].collectorRank = collectorRank;\\n            collectorStats[msg.sender] = CollectorStats({\\n                bids: 0,\\n                sales: 0,\\n                bought: 0,\\n                totalSold: 0,\\n                totalSpent: 0\\n            });\\n        }\\n        collectorStats[msg.sender].bids += 1;\\n        if (collectorRank > 1) {\\n            address rankedUp = collectorRanking[collectorRank - 1];\\n            if (collectorStats[msg.sender].bids > collectorStats[rankedUp].bids) {\\n                accounts[msg.sender].collectorRank -= 1;\\n                accounts[rankedUp].collectorRank += 1;\\n                collectorRanking[collectorRank - 1] = msg.sender;\\n                collectorRanking[collectorRank] = rankedUp;\\n            }\\n        }\\n\\n        uint256 houseId = auction.houseId;\\n        if (houseId > 0) {\\n            houses[houseId].bids += 1;\\n\\n            uint256 rank = houses[houseId].rank;\\n            if (rank > 1) {\\n                uint256 rankedUpId = ranking[rank - 1];\\n                if (houses[houseId].bids > houses[rankedUpId].bids) {\\n                    houses[houseId].rank -= 1;\\n                    houses[rankedUpId].rank += 1;\\n                    ranking[rank - 1] = houseId;\\n                    ranking[rank] = rankedUpId;\\n                }\\n            }\\n        }\\n\\n        bool extended = false;\\n        if (auction.duration > 0) {\\n          uint256 timeRemaining = auction.firstBidTime.add(auction.duration).sub(block.timestamp);\\n          if (timeRemaining < timeBuffer) {\\n              auction.duration += timeBuffer.sub(timeRemaining);\\n              extended = true;\\n          }\\n        }\\n\\n        emit AuctionBid(\\n            auctionId,\\n            msg.sender,\\n            amount,\\n            isFirstBid,\\n            extended\\n        );\\n\\n        if (extended) {\\n            emit AuctionDurationExtended(\\n                auctionId,\\n                auction.duration\\n            );\\n        }\\n    }\\n\\n    function endAuction(uint256 auctionId)\\n        external\\n        override\\n        auctionExists(auctionId)\\n        nonReentrant\\n    {\\n        IAuctions.Auction storage auction = auctions[auctionId];\\n\\n        require(\\n            uint256(auction.firstBidTime) != 0,\\n            \\\"Auction not started\\\");\\n        require(\\n            block.timestamp >=\\n            auction.firstBidTime.add(auction.duration),\\n            \\\"Auction not completed\\\");\\n\\n        try IERC721(auction.tokenContract).safeTransferFrom(\\n            address(this), auction.bidder, auction.tokenId\\n        ) {} catch {\\n            _handleOutgoingBid(auction.bidder, auction.amount);\\n            _cancelAuction(auctionId);\\n            return;\\n        }\\n\\n        uint256 houseId = auction.houseId;\\n        address curator = address(0);\\n        uint256 curatorFee = 0;\\n        uint256 tokenOwnerProfit = auction.amount;\\n\\n        uint256 contractId = contractIDs[auction.tokenContract];\\n        collectorStats[auction.bidder].bought += 1;\\n        collectorStats[auction.bidder].totalSpent += tokenOwnerProfit;\\n        contracts[contractId].sales += 1;\\n        contracts[contractId].total += tokenOwnerProfit;\\n\\n        try ITux(auction.tokenContract).tokenCreator(auction.tokenId) returns (address creator) {\\n            if (creator == auction.tokenOwner) {\\n                creatorStats[creator].sales += 1;\\n                creatorStats[creator].total += tokenOwnerProfit;\\n            } else {\\n                collectorStats[auction.tokenOwner].sales += 1;\\n                collectorStats[auction.tokenOwner].totalSold += tokenOwnerProfit;\\n            }\\n        } catch {\\n            collectorStats[auction.tokenOwner].sales += 1;\\n            collectorStats[auction.tokenOwner].totalSold += tokenOwnerProfit;\\n        }\\n\\n        if (houseId > 0) {\\n            curator = houses[houseId].curator;\\n            houses[houseId].sales += 1;\\n            houses[houseId].total += tokenOwnerProfit;\\n            if (houses[houseId].activeAuctions > 0) {\\n                houses[houseId].activeAuctions -= 1;\\n            }\\n            _houseAuctions[houseId].remove(auctionId);\\n        }\\n        else {\\n            _activeAuctions.remove(auctionId);\\n        }\\n\\n        uint256 contractRank = contracts[contractId].rank;\\n        if (contractRank > 1) {\\n            uint256 rankedUpContract = contractRanking[contractRank - 1];\\n            if (contracts[contractId].bids > contracts[rankedUpContract].bids) {\\n                contracts[contractId].rank -= 1;\\n                contracts[rankedUpContract].rank += 1;\\n                contractRanking[contractRank - 1] = contractId;\\n                contractRanking[contractRank] = rankedUpContract;\\n            }\\n        }\\n\\n        if (curator != address(0)) {\\n            curatorFee = tokenOwnerProfit.mul(auction.fee).div(10000);\\n            tokenOwnerProfit = tokenOwnerProfit.sub(curatorFee);\\n            _handleOutgoingBid(curator, curatorFee);\\n        }\\n        _handleOutgoingBid(auction.tokenOwner, tokenOwnerProfit);\\n\\n        if (houseId > 0) {\\n            houses[houseId].feesTotal += curatorFee;\\n        }\\n\\n        bytes32 auctionHash = keccak256(abi.encode(auction.tokenContract, auction.tokenId));\\n        _previousTokenAuctions[auctionHash].add(auctionId);\\n        delete tokenAuction[auctionHash];\\n\\n        uint256 i = _auctionBids[auctionId].length();\\n        while (i > 0) {\\n            uint256 bidId = _auctionBids[auctionId].at(i - 1);\\n            _bidderAuctions[bids[bidId].bidder].remove(auctionId);\\n            i--;\\n        }\\n        _sellerAuctions[auction.tokenOwner].remove(auctionId);\\n\\n        emit AuctionEnded(\\n            auctionId\\n        );\\n    }\\n\\n    function cancelAuction(uint256 auctionId) external override nonReentrant auctionExists(auctionId) {\\n        require(\\n            auctions[auctionId].tokenOwner == msg.sender,\\n            \\\"Can only be called by auction creator\\\");\\n        require(\\n            uint256(auctions[auctionId].firstBidTime) == 0,\\n            \\\"Cannot cancel an auction once it has begun\\\");\\n        _cancelAuction(auctionId);\\n    }\\n\\n    function registerTokenContract(address tokenContract)\\n        public\\n        override\\n        returns (uint256)\\n    {\\n        require(contractIDs[tokenContract] == 0, \\\"Token contract already registered\\\");\\n\\n        _contractIdTracker.increment();\\n        uint256 contractId = _contractIdTracker.current();\\n        contractIDs[tokenContract] = contractId;\\n        contractRanking[contractId] = contractId;\\n        contracts[contractId] = TokenContract({\\n            name: IERC721Metadata(tokenContract).name(),\\n            tokenContract: tokenContract,\\n            bids: 0,\\n            sales: 0,\\n            total: 0,\\n            rank: contractId\\n        });\\n\\n        return contractId;\\n    }\\n\\n    function makeOffer(address tokenContract, uint256 tokenId, uint256 amount)\\n        public\\n        override\\n        payable\\n        nonReentrant\\n    {\\n        require(\\n            IERC165(tokenContract).supportsInterface(interfaceId),\\n            \\\"Token contract does not support ERC721 interface\\\");\\n\\n        bytes32 auctionHash = keccak256(abi.encode(tokenContract, tokenId));\\n        require(\\n            tokenAuction[auctionHash] == 0,\\n            'Auction exists for this token');\\n\\n        require(\\n            msg.value == amount,\\n            \\\"Sent ETH does not match specified offer amount\\\");\\n\\n        _offerIdTracker.increment();\\n        uint256 offerId = _offerIdTracker.current();\\n\\n        offers[offerId] = Offer({\\n            tokenContract: tokenContract,\\n            tokenId: tokenId,\\n            from: msg.sender,\\n            amount: amount\\n        });\\n\\n        _tokenOffers[auctionHash].add(offerId);\\n    }\\n\\n    function acceptOffer(uint256 offerId)\\n        public\\n        override\\n    {\\n        IAuctions.Offer storage offer = offers[offerId];\\n        require(\\n            offer.tokenContract != address(0),\\n            'Offer does not exist');\\n\\n        address tokenOwner = IERC721(offer.tokenContract).ownerOf(offer.tokenId);\\n        require(\\n            msg.sender == tokenOwner ||\\n            msg.sender == IERC721(offer.tokenContract).getApproved(offer.tokenId),\\n            \\\"Must be token owner or approved\\\");\\n\\n        IERC721(offer.tokenContract).safeTransferFrom(msg.sender, offer.from, offer.tokenId);\\n\\n        _handleOutgoingBid(msg.sender, offer.amount);\\n\\n        bytes32 auctionHash = keccak256(abi.encode(offer.tokenContract, offer.tokenId));\\n        _tokenOffers[auctionHash].remove(offerId);\\n\\n        delete offers[offerId];\\n    }\\n\\n    function cancelOffer(uint256 offerId)\\n        public\\n        override\\n    {\\n        IAuctions.Offer storage offer = offers[offerId];\\n        require(\\n            offer.from == msg.sender,\\n            'Not offer owner or does not exist');\\n\\n        _handleOutgoingBid(msg.sender, offer.amount);\\n\\n        bytes32 auctionHash = keccak256(abi.encode(offer.tokenContract, offer.tokenId));\\n        _tokenOffers[auctionHash].remove(offerId);\\n\\n        delete offers[offerId];\\n    }\\n\\n    function _handleIncomingBid(uint256 amount) internal {\\n        require(\\n            msg.value == amount,\\n            \\\"Sent ETH does not match specified bid amount\\\");\\n    }\\n\\n    function _handleOutgoingBid(address to, uint256 amount) internal {\\n        require(\\n            _safeTransferETH(to, amount),\\n            \\\"ETH transfer failed\\\");\\n    }\\n\\n    function _safeTransferETH(address to, uint256 value) internal returns (bool) {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        return success;\\n    }\\n\\n    function _cancelAuction(uint256 auctionId) internal {\\n        IAuctions.Auction storage auction = auctions[auctionId];\\n\\n        IERC721(auction.tokenContract).safeTransferFrom(address(this), auction.tokenOwner, auction.tokenId);\\n\\n        uint256 houseId = auction.houseId;\\n        if (houseId > 0) {\\n            _houseAuctions[houseId].remove(auctionId);\\n            if (houses[houseId].activeAuctions > 0) {\\n                houses[houseId].activeAuctions -= 1;\\n            }\\n        }\\n        else {\\n            _activeAuctions.remove(auctionId);\\n        }\\n\\n        auction.approved = false;\\n        bytes32 auctionHash = keccak256(abi.encode(auction.tokenContract, auction.tokenId));\\n        _previousTokenAuctions[auctionHash].add(auctionId);\\n        delete tokenAuction[auctionHash];\\n\\n        emit AuctionCanceled(\\n            auctionId\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ITux.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface ITux is IERC721 {\\n    function tokenCreator(uint256 tokenId) external view returns (address);\\n    function getCreatorTokens(address creator) external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/IAuctions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.7;\\n\\n\\ninterface IAuctions {\\n\\n    struct House {\\n        // House name\\n        string  name;\\n\\n        // House curator\\n        address payable curator;\\n\\n        // House percentage fee\\n        uint16  fee;\\n\\n        // Pre-approve added creators\\n        bool    preApproved;\\n\\n        // IPFS hash for metadata (logo, featured creators, pieces, links)\\n        string  metadata;\\n\\n        // Total bids\\n        uint256 bids;\\n\\n        // Total sales number\\n        uint256 sales;\\n\\n        // Total sales amount\\n        uint256 total;\\n\\n        // Total fees amount\\n        uint256 feesTotal;\\n\\n        // Counter of active autions\\n        uint256 activeAuctions;\\n\\n        // Rank\\n        uint256 rank;\\n    }\\n\\n    struct Auction {\\n        // Address of the ERC721 contract\\n        address tokenContract;\\n\\n        // ERC721 tokenId\\n        uint256 tokenId;\\n\\n        // Address of the token owner\\n        address tokenOwner;\\n\\n        // Length of time in seconds to run the auction for, after the first bid was made\\n        uint256 duration;\\n\\n        // Minimum price of the first bid\\n        uint256 reservePrice;\\n\\n        // House ID for curator address\\n        uint256 houseId;\\n\\n        // Curator fee for this auction\\n        uint16  fee;\\n\\n        // Whether or not the auction curator has approved the auction to start\\n        bool    approved;\\n\\n        // The time of the first bid\\n        uint256 firstBidTime;\\n\\n        // The current highest bid amount\\n        uint256 amount;\\n\\n        // The address of the current highest bidder\\n        address payable bidder;\\n\\n        // The timestamp when this auction was created\\n        uint256 created;\\n    }\\n\\n    struct TokenContract {\\n        string  name;\\n        address tokenContract;\\n        uint256 bids;\\n        uint256 sales;\\n        uint256 total;\\n        uint256 rank;\\n    }\\n\\n    struct Account {\\n        string  name;\\n        string  bioHash;\\n        string  pictureHash;\\n        uint256 creatorRank;\\n        uint256 collectorRank;\\n    }\\n\\n    struct CreatorStats {\\n        uint256 bids;\\n        uint256 sales;\\n        uint256 total;\\n    }\\n\\n    struct CollectorStats {\\n        uint256 bids;\\n        uint256 sales;\\n        uint256 bought;\\n        uint256 totalSold;\\n        uint256 totalSpent;\\n    }\\n\\n    struct Bid {\\n        uint256 timestamp;\\n        address bidder;\\n        uint256 value;\\n    }\\n\\n    struct Offer {\\n        address tokenContract;\\n        uint256 tokenId;\\n        uint256 amount;\\n        address from;\\n    }\\n\\n    event HouseCreated(\\n        uint256 indexed houseId\\n    );\\n\\n    event CreatorAdded(\\n        uint256 indexed houseId,\\n        address indexed creator\\n    );\\n\\n    event CreatorRemoved(\\n        uint256 indexed houseId,\\n        address indexed creator\\n    );\\n\\n    event FeeUpdated(\\n        uint256 indexed houseId,\\n        uint16  fee\\n    );\\n\\n    event MetadataUpdated(\\n        uint256 indexed houseId,\\n        string  metadata\\n    );\\n\\n    event AccountUpdated(\\n        address indexed owner\\n    );\\n\\n    event AuctionCreated(\\n        uint256 indexed auctionId\\n    );\\n\\n    event AuctionApprovalUpdated(\\n        uint256 indexed auctionId,\\n        bool    approved\\n    );\\n\\n    event AuctionReservePriceUpdated(\\n        uint256 indexed auctionId,\\n        uint256 reservePrice\\n    );\\n\\n    event AuctionBid(\\n        uint256 indexed auctionId,\\n        address bidder,\\n        uint256 value,\\n        bool    firstBid,\\n        bool    extended\\n    );\\n\\n    event AuctionDurationExtended(\\n        uint256 indexed auctionId,\\n        uint256 duration\\n    );\\n\\n    event AuctionEnded(\\n        uint256 indexed auctionId\\n    );\\n\\n    event AuctionCanceled(\\n        uint256 indexed auctionId\\n    );\\n\\n    function totalHouses() external view returns (uint256);\\n\\n    function totalAuctions() external view returns (uint256);\\n\\n    function totalContracts() external view returns (uint256);\\n\\n    function totalCreators() external view returns (uint256);\\n\\n    function totalCollectors() external view returns (uint256);\\n\\n    function totalActiveAuctions() external view returns (uint256);\\n\\n    function totalActiveHouseAuctions(uint256 houseId) external view returns (uint256);\\n\\n    function getAuctions() external view returns (uint256[] memory);\\n\\n    function getAuctionsFromN(uint256 from, uint256 n) external view returns (uint256[] memory);\\n\\n    function getHouseAuctions(uint256 houseId) external view returns (uint256[] memory);\\n\\n    function getHouseAuctionsFromN(uint256 houseId, uint256 from, uint256 n) external view returns (uint256[] memory);\\n\\n    function getHouseQueue(uint256 houseId) external view returns (uint256[] memory);\\n\\n    function getCuratorHouses(address curator) external view returns (uint256[] memory);\\n\\n    function getCreatorHouses(address creator) external view returns (uint256[] memory);\\n\\n    function getHouseCreators(uint256 houseId) external view returns (address[] memory);\\n\\n    function getSellerAuctions(address seller) external view returns (uint256[] memory);\\n\\n    function getBidderAuctions(address bidder) external view returns (uint256[] memory);\\n\\n    function getAuctionBids(uint256 auctionId) external view returns (uint256[] memory);\\n\\n    function getPreviousAuctions(bytes32 tokenHash) external view returns (uint256[] memory);\\n\\n    function getTokenOffers(bytes32 tokenHash) external view returns (uint256[] memory);\\n\\n    function registerTokenContract(\\n        address tokenContract\\n    ) external returns (uint256);\\n\\n    function makeOffer(\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external payable;\\n\\n    function acceptOffer(\\n        uint256 offerId\\n    ) external;\\n\\n    function cancelOffer(\\n        uint256 offerId\\n    ) external;\\n\\n    function createHouse(\\n        string  memory name,\\n        address curator,\\n        uint16  fee,\\n        bool    preApproved,\\n        string  memory metadata\\n    ) external returns (uint256);\\n\\n    function addCreator(\\n        uint256 houseId,\\n        address creator\\n    ) external;\\n\\n    function removeCreator(\\n        uint256 houseId,\\n        address creator\\n    ) external;\\n\\n    function updateMetadata(\\n        uint256 houseId,\\n        string  memory metadata\\n    ) external;\\n\\n    function updateFee(\\n        uint256 houseId,\\n        uint16  fee\\n    ) external;\\n\\n    function updateName(\\n        string  memory name\\n    ) external;\\n\\n    function updateBio(\\n        string  memory bioHash\\n    ) external;\\n\\n    function updatePicture(\\n        string  memory pictureHash\\n    ) external;\\n\\n    function createAuction(\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 duration,\\n        uint256 reservePrice,\\n        uint256 houseId\\n    ) external returns (uint256);\\n\\n    function setAuctionApproval(\\n        uint256 auctionId,\\n        bool approved\\n    ) external;\\n\\n    function setAuctionReservePrice(\\n        uint256 auctionId,\\n        uint256 reservePrice\\n    ) external;\\n\\n    function createBid(\\n        uint256 auctionId,\\n        uint256 amount\\n    ) external payable;\\n\\n    function endAuction(\\n        uint256 auctionId\\n    ) external;\\n\\n    function cancelAuction(\\n        uint256 auctionId\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/library/UintSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary UintSet {\\n\\n    struct Set {\\n        // Storage of set values\\n        uint256[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(uint256 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Set storage set, uint256 value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Set storage set, uint256 value) internal returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                uint256 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Set storage set, uint256 value) internal view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(Set storage set) internal view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Set storage set, uint256 index) internal view returns (uint256) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Set storage set) internal view returns (uint256[] memory) {\\n        return set._values;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/AddressSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `address` (`addressSet`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary AddressSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // address values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in address.\\n\\n    struct Set {\\n        // Storage of set values\\n        address[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(address => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Set storage set, address value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Set storage set, address value) internal returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                address lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Set storage set, address value) internal view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(Set storage set) internal view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Set storage set, uint256 index) internal view returns (address) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Set storage set) internal view returns (address[] memory) {\\n        return set._values;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/OrderedSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n/**\\n * @title OrderedSet\\n * @dev Ordered data structure. It has the properties of a mapping of uint256, but members are ordered\\n * and can be enumerated. Values can only be inserted at the head or tail, but can be removed\\n * from anywhere. Add, append, remove and contains are O(1). Enumerate is O(N).\\n */\\nlibrary OrderedSet {\\n    using Counters for Counters.Counter;\\n\\n    struct Set {\\n        Counters.Counter counter;\\n        mapping (uint256 => uint256) _next;\\n        mapping (uint256 => uint256) _prev;\\n    }\\n\\n    /**\\n     * @dev Insert an value as the new head.\\n     */\\n    function add(Set storage set, uint256 value) internal {\\n        _insert(set, 0, value, set._next[0]);\\n        set.counter.increment();\\n    }\\n\\n    /**\\n     * @dev Insert an value as the new tail.\\n     */\\n    function append(Set storage set, uint256 value) internal {\\n        _insert(set, set._prev[0], value, 0);\\n        set.counter.increment();\\n    }\\n\\n    /**\\n     * @dev Remove an value.\\n     */\\n    function remove(Set storage set, uint256 value) internal {\\n        set._next[set._prev[value]] = set._next[value];\\n        set._prev[set._next[value]] = set._prev[value];\\n        delete set._next[value];\\n        delete set._prev[value];\\n        set.counter.decrement();\\n    }\\n\\n    /**\\n     * @dev Returns the head\\n     */\\n    function head(Set storage set) internal view returns (uint256) {\\n        return set._next[0];\\n    }\\n\\n    /**\\n     * @dev Returns the tail\\n     */\\n    function tail(Set storage set) internal view returns (uint256) {\\n        return set._prev[0];\\n    }\\n\\n    /**\\n     * @dev Returns the length\\n     */\\n    function length(Set storage set) internal view returns (uint256) {\\n        return set.counter.current();\\n    }\\n\\n    /**\\n     * @dev Returns the next value.\\n     */\\n    function next(Set storage set, uint256 _value) internal view returns (uint256) {\\n        return set._next[_value];\\n    }\\n\\n    /**\\n     * @dev Returns the previous value.\\n     */\\n    function prev(Set storage set, uint256 _value) internal view returns (uint256) {\\n        return set._prev[_value];\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set.\\n     */\\n    function contains(Set storage set, uint256 value) internal view returns (bool) {\\n        return set._next[0] == value || set._next[value] != 0 || set._prev[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Set storage set) internal view returns (uint256[] memory) {\\n        /*\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := set._values\\n        }\\n\\n        return result;\\n        */\\n        uint256[] memory _values = new uint256[](set.counter.current());\\n        uint256 value = set._next[0];\\n        uint256 i = 0;\\n        while (value != 0) {\\n            _values[i] = value;\\n            value = set._next[value];\\n            i += 1;\\n        }\\n        return _values;\\n    }\\n\\n    /**\\n     * @dev Return an array with n values in the set, starting after from\\n     */\\n    function valuesFromN(Set storage set, uint256 from, uint256 n) internal view returns (uint256[] memory) {\\n        uint256[] memory _values = new uint256[](n);\\n        uint256 value = set._next[from];\\n        uint256 i = 0;\\n        while (i < n) {\\n            _values[i] = value;\\n            value = set._next[value];\\n            i += 1;\\n        }\\n        return _values;\\n    }\\n\\n    /**\\n     * @dev Insert a value between two values\\n     */\\n    function _insert(Set storage set, uint256 prev_, uint256 value, uint256 next_) private {\\n        set._next[prev_] = value;\\n        set._next[value] = next_;\\n        set._prev[next_] = value;\\n        set._prev[value] = prev_;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AccountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"AuctionApprovalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"firstBid\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"extended\",\"type\":\"bool\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"AuctionDurationExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"name\":\"AuctionReservePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"houseId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"houseId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"houseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"houseId\",\"type\":\"uint256\"}],\"name\":\"HouseCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"houseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"MetadataUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bioHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pictureHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creatorRank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectorRank\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"houseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"addCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"houseId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"firstBidTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collectorRanking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectorStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bids\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sales\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractRanking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bids\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sales\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"houseId\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"curator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"preApproved\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"createHouse\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creatorRanking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creatorStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bids\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sales\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuctionBids\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getAuctionsFromN\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"getBidderAuctions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getCreatorHouses\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curator\",\"type\":\"address\"}],\"name\":\"getCuratorHouses\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"houseId\",\"type\":\"uint256\"}],\"name\":\"getHouseAuctions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"houseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getHouseAuctionsFromN\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"houseId\",\"type\":\"uint256\"}],\"name\":\"getHouseCreators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"houseId\",\"type\":\"uint256\"}],\"name\":\"getHouseQueue\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenHash\",\"type\":\"bytes32\"}],\"name\":\"getPreviousAuctions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getSellerAuctions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenOffers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"houseIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"houses\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"curator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"preApproved\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bids\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sales\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeAuctions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"makeOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumIncrementPercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ranking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"registerTokenContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"houseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"removeCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setAuctionApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"name\":\"setAuctionReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalActiveAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"houseId\",\"type\":\"uint256\"}],\"name\":\"totalActiveHouseAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollectors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCreators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHouses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"bioHash\",\"type\":\"string\"}],\"name\":\"updateBio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"houseId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"houseId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"updateMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"updateName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pictureHash\",\"type\":\"string\"}],\"name\":\"updatePicture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Auctions","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}