{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ILandCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ninterface ILandCollection {\\n  function totalMinted(uint256 groupId) external view returns (uint256);\\n  function maximumSupply(uint256 groupId) external view returns (uint256);\\n  function mintToken(address account, uint256 groupId, uint256 count, uint256 seed) external;\\n  function balanceOf(address owner) external view returns (uint256);\\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n  function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\"},\"IOre.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ninterface IOre {\\n  function balanceOf(address owner) external view returns (uint256);\\n  function mint(address account, uint256 amount) external;\\n  function burn(address account, uint256 amount) external;\\n}\\n\"},\"OreClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\nimport \\\"./ILandCollection.sol\\\";\\nimport \\\"./IOre.sol\\\";\\n\\n\\n// Handles weekly ore claims for genesis token holders\\ncontract OreClaim is Ownable, ReentrancyGuard {\\n  // Collection token contract interface\\n  ILandCollection public collection;\\n  // Ore token contract interface\\n  IOre public ore;\\n\\n  // Stores the timestamp of the initial claim week for each group\\n  mapping (uint256 =\\u003e uint256) private _initialClaimTimestampByGroupId;\\n  // Stores the last claimed week count for each token\\n  mapping (uint256 =\\u003e uint256) private _lastClaimedWeekByTokenId;\\n  // Stores the timestamp for the final claimable week in the case of contract upgrade\\n  uint256 private _finalClaimTimestamp;\\n  // Determines the maximum number of claimable tokens in a single tx\\n  uint256 private _claimLimit;\\n\\n  // Amount of ore claimable for each token based on the groupId per week\\n  mapping (uint256 =\\u003e uint256) public orePerTokenByGroupId;\\n  // Amount of ore claimable for each cartel set per week\\n  uint256 public orePerCartelSet;\\n\\n  // Stores analytic data regarding total amount claims\\n  uint256 public totalTokenClaim;\\n  uint256 public totalCartelSetClaim;\\n\\n  constructor(address _ore, address _collection) {\\n    ore = IOre(_ore);\\n    collection = ILandCollection(_collection);\\n    _claimLimit = 70;\\n  }\\n\\n  function lastClaimedWeekByTokenId(uint256 _tokenId) external view returns (uint256) {\\n    return _lastClaimedWeekByTokenId[_tokenId];\\n  }\\n\\n  function initialClaimTimestampByGroupId(uint256 _groupId) external view returns (uint256) {\\n    return _initialClaimTimestampByGroupId[_groupId];\\n  }\\n\\n  function setInitialClaimTimestamp(uint256 _groupId, uint256 _timestamp) external onlyOwner {\\n    _initialClaimTimestampByGroupId[_groupId] = _timestamp;\\n  }\\n\\n  function finalClaimTimestamp() external view returns (uint256) {\\n    return _finalClaimTimestamp;\\n  }\\n\\n  function setFinalClaimTimestamp(uint256 _timestamp) external onlyOwner {\\n    _finalClaimTimestamp = _timestamp;\\n  }\\n\\n  function claimLimit() external view returns (uint256) {\\n    return _claimLimit;\\n  }\\n\\n  function setClaimLimit(uint256 _limit) external onlyOwner {\\n    require(_claimLimit \\u003e 0, \\\"Invalid Limit\\\");\\n    _claimLimit = _limit;\\n  }\\n\\n  function setOrePerTokenByGroupId(uint256 _groupId, uint256 _amount) external onlyOwner {\\n    orePerTokenByGroupId[_groupId] = _amount;\\n  }\\n\\n  function setOrePerCartelSet(uint256 _amount) external onlyOwner {\\n    orePerCartelSet = _amount;\\n  }\\n\\n  function claimWeek(uint256 _groupId) public view returns (uint256) {\\n    // Calculate and return the number of weeks elapsed since the initial claim timestamp for the groupId \\n    uint256 initial = _initialClaimTimestampByGroupId[_groupId];\\n    require(initial \\u003e 0, \\\"Weekly Claim Not Started For The Specified Group\\\");\\n\\n    // In the case of the claiming being paused for the current contract due to contract upgrade\\n    // make sure that the maximum claimable week is within the set final timestamp\\n    uint256 timestamp = (_finalClaimTimestamp \\u003e 0 \\u0026\\u0026 block.timestamp \\u003e _finalClaimTimestamp ? _finalClaimTimestamp : block.timestamp);\\n    uint256 elapsed = timestamp - initial;\\n    return (elapsed / 60 / 60 / 24 / 7) + 1;\\n  }\\n\\n  // Returns the list of tokenIds (with elapsed weeks for each) eligible for claiming owned by the specified address\\n  function unclaimedTokenIds(address _address) external view returns (uint256[] memory, uint256[] memory) {\\n    uint256 owned = collection.balanceOf(_address);\\n    uint256 count = 0;\\n\\n    // Count the total number of eligible tokens\\n    for (uint256 i = 0; i \\u003c owned; i++) {\\n      uint256 tokenId = collection.tokenOfOwnerByIndex(_address, i);\\n      uint256 groupId = tokenId / 100000;\\n      uint256 currentWeek = claimWeek(groupId);\\n      uint256 lastClaimedWeek = _lastClaimedWeekByTokenId[tokenId];\\n\\n      if (currentWeek \\u003e lastClaimedWeek) {\\n        count++;\\n      }\\n    }\\n\\n    // Fill the array to be returned containing the eligible tokenIds along with the elapsed weeks\\n    uint256[] memory tokenIds = new uint256[](count);\\n    uint256[] memory elapsedWeeks = new uint256[](count);\\n    uint256 j = 0;\\n    for (uint256 i = 0; i \\u003c owned; i++) {\\n      uint256 tokenId = collection.tokenOfOwnerByIndex(_address, i);\\n      uint256 groupId = tokenId / 100000;\\n      uint256 currentWeek = claimWeek(groupId);\\n      uint256 lastClaimedWeek = _lastClaimedWeekByTokenId[tokenId];\\n\\n      if (currentWeek \\u003e lastClaimedWeek) {\\n        tokenIds[j] = tokenId;\\n        elapsedWeeks[j++] = currentWeek - lastClaimedWeek;\\n      }\\n    }\\n\\n    return (tokenIds, elapsedWeeks);\\n  }\\n\\n  function claim(uint256[] calldata _tokenIds) external nonReentrant {\\n    // Limit up to certain number of tokens to be processed\\n    uint256 maxCount = (_tokenIds.length \\u003e _claimLimit ? _claimLimit : _tokenIds.length);\\n    uint256 totalOre = 0;\\n    uint256[] memory setCounter = new uint256[](7);\\n\\n    // Iterate through all owned land-genesis collection tokens and calculate claimable ore\\n    // Then track the claims properly\\n    for (uint256 i = 0; i \\u003c maxCount; i++) {\\n      uint256 tokenId = _tokenIds[i];\\n      uint256 lastClaimed = _lastClaimedWeekByTokenId[tokenId];\\n      uint256 groupId = tokenId / 100000;\\n      uint256 memberId = tokenId % 100000;\\n      uint256 currentWeek = claimWeek(groupId);\\n\\n      if (collection.ownerOf(tokenId) == msg.sender \\u0026\\u0026 orePerTokenByGroupId[groupId] \\u003e 0 \\u0026\\u0026 currentWeek \\u003e lastClaimed) {\\n        uint256 claimableWeeks = currentWeek - lastClaimed;\\n\\n        // Check for any claimable set bonus for cartels only if needed\\n        if (maxCount \\u003e= 7 \\u0026\\u0026 (groupId == 1000 || groupId == 1002)) {\\n          uint256 memberType;\\n          uint256 num;\\n\\n          if (groupId == 1000) {\\n            num = memberId - 1;\\n          } else if (groupId == 1002) {\\n            num = memberId + 1255;\\n          }\\n\\n          if (num % 9 == 0) {\\n            memberType = num % 5;\\n          } else if (num % 10 == 0) {\\n            memberType = num % 6;\\n          } else {\\n            memberType = num % 7;\\n          }\\n\\n          setCounter[memberType] += claimableWeeks;\\n        }\\n\\n        totalOre += orePerTokenByGroupId[groupId] * claimableWeeks;\\n        totalTokenClaim += claimableWeeks;\\n        _lastClaimedWeekByTokenId[tokenId] = currentWeek;\\n      }\\n    }\\n\\n    // Calculate the total number of set eligible for cartel set bonus\\n    uint256 setCount = maxCount;\\n    for (uint256 i = 0; i \\u003c 7; i++) {\\n      if (setCount \\u003e setCounter[i]) {\\n        setCount = setCounter[i];\\n      }\\n    }\\n\\n    if (setCount \\u003e 0) {\\n      totalCartelSetClaim += setCount;\\n      totalOre += setCount * orePerCartelSet;\\n    }\\n\\n    require(totalOre \\u003e 0, \\\"Insufficient Claimable Ore\\\");\\n    \\n    ore.mint(msg.sender, totalOre);\\n  }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"claimWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collection\",\"outputs\":[{\"internalType\":\"contract ILandCollection\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalClaimTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"initialClaimTimestampByGroupId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"lastClaimedWeekByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ore\",\"outputs\":[{\"internalType\":\"contract IOre\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orePerCartelSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orePerTokenByGroupId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setClaimLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setFinalClaimTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setInitialClaimTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setOrePerCartelSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setOrePerTokenByGroupId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCartelSetClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unclaimedTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OreClaim","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000c40107e23c285d9cc9759f7c656805d6e5c88a3c0000000000000000000000007f0ab6a57cfd191a202ab3f813ef9b851c77e618","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1ae83a97a149ab0e180d039cc8d933d5b52a96771d9e810ca86fc6cbf8829352"}]}