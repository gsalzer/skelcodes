{"status":"1","message":"OK","result":[{"SourceCode":"/* SPDX-License-Identifier: Unlicensed */\r\n//smart contract developed by snipe.finance\r\n//email: info@snipe.finance\r\npragma solidity ^0.8.6;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    mapping(address => bool) private _admin;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _owner = _msgSender();\r\n        _admin[_owner] = true;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function isAdminCheck(address addressToCheck) external view returns (bool) {\r\n        return _admin[addressToCheck];\r\n    } \r\n\r\n    function updateAdmin(address addressToSet, bool isAdmin) external returns (string memory, address, bool) {\r\n        _admin[addressToSet] = isAdmin;\r\n        return(\"Admin status\", addressToSet, _admin[addressToSet]);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"You are not the Owner!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(_admin[_msgSender()], \"You are not an Admin!\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _address) public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, _address);\r\n        _owner = _address;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract MasterStake is Ownable {\r\n\r\nstruct coinToStake{\r\n    address _address;\r\n    uint256 _decimals;\r\n    uint256 _stakeLimitWholeNumber;\r\n}\r\n\r\nstruct coinToReward{\r\n    address _address;\r\n    uint256 _decimals;\r\n    uint256 _poolAmount;\r\n    uint256 _stakePercentage;\r\n    uint256 _stakeRateInEpoch;\r\n} \r\n\r\nstruct StakePool {\r\n    uint256 _poolID;\r\n    uint256 _stakeFee;\r\n    uint256 _unStakeFee;\r\n    coinToStake _coinToStake;\r\n    coinToReward _coinToReward;\r\n    uint256 _amountStaked;\r\n    uint256 _rewardClaimed;\r\n    uint256 _startTime;\r\n    uint256 _endDate;\r\n}\r\n\r\nstruct UserStake {\r\n    uint256 _stakeID;\r\n    address _user;\r\n    uint256 _poolID;\r\n    uint256 _amountStaked;\r\n    uint256 _startTime;\r\n    uint256 _rewardClaimed;\r\n}\r\n\r\n// How many pools or stakes created\r\nuint256 public nextPoolID;\r\nuint256 public nextStakeID;\r\naddress public feeCollector;\r\n\r\nmapping (uint256 => StakePool) public stakePoolFromPoolID;\r\nmapping (address => uint256[]) public stakesFromUser;\r\nmapping (uint256 => uint256[]) public stakesFromPoolID;\r\nmapping (uint256 => uint256) public poolFromStakeID;\r\nmapping (uint256 => uint256) public endDateFromPoolID;\r\nmapping (uint256 => bool) public isActiveFromPoolID;\r\nmapping (uint256 => mapping (address => bool)) public isUserStaked;\r\nmapping (uint256 => mapping (address => UserStake)) public userStakeFromPoolID;\r\nevent Stake(uint256 indexed poolID, address indexed sender,uint256 newStakeBal);\r\nevent UnStake(uint256 indexed poolID, address indexed sender,uint256 unStakeAmount);\r\nevent Fee(uint256 indexed poolID, address indexed sender,uint256 feeAmount, string feeType);\r\nevent Harvest(uint256 indexed poolID, address indexed sender,uint256 availableHarvest);\r\nevent NewStakePool(uint256 indexed poolID, address indexed tokenStake,address indexed tokenReward);\r\nevent EndStakePool(uint256 indexed poolID, uint256 endDate);\r\nevent UpdateStakeFees(uint256 indexed poolID, uint256 stakeFee, uint256 unStakeFee);\r\n\r\n//modifiers\r\nmodifier isPoolExist(uint256 _poolID) {\r\n        require(_poolID <= nextPoolID, 'Staking Pool does not exist!');\r\n        _;\r\n}\r\n\r\nmodifier isPoolActive(uint256 _poolID) {\r\n        require(isActiveFromPoolID[_poolID], 'Staking for this pool is not active!');\r\n        _;\r\n}\r\n\r\nmodifier isPoolEndTime(uint256 _poolID) {\r\n        require(block.timestamp < endDateFromPoolID[_poolID], 'Staking for this pool has ended!');\r\n        _;\r\n}\r\n\r\nfunction getRewardPaidView(uint256 _poolID,address _sender) public view isPoolExist(_poolID) returns(uint256) {\r\n    require(isUserStaked[_poolID][_sender], 'You have no stake in this pool!');\r\n    UserStake storage currentUserStake = userStakeFromPoolID[_poolID][_sender];\r\n    StakePool storage currentPool = stakePoolFromPoolID[_poolID];\r\n    coinToStake storage cs = currentPool._coinToStake;\r\n    coinToReward storage cr = currentPool._coinToReward;\r\n    uint256 amountStaked = currentUserStake._amountStaked;\r\n    \r\n    if(amountStaked < 0){\r\n        revert('No coins staked!');\r\n    }\r\n    \r\n    if(endDateFromPoolID[_poolID] <= block.timestamp){\r\n        return ( ( amountStaked * cr._stakePercentage / (10 ** cs._decimals) ) * (endDateFromPoolID[_poolID] - currentUserStake._startTime) / cr._stakeRateInEpoch ) * (10 ** cr._decimals) / 100;\r\n    }else{\r\n        return ( ( amountStaked * cr._stakePercentage / (10 ** cs._decimals) ) * (block.timestamp - currentUserStake._startTime) / cr._stakeRateInEpoch ) * (10 ** cr._decimals) / 100;\r\n    }\r\n}\r\n\r\nfunction getRewardPaidPool(uint256 _poolID, uint256 _endDate) internal view isPoolExist(_poolID) returns(uint256) {\r\n    StakePool storage currentPool = stakePoolFromPoolID[_poolID];\r\n    coinToStake storage cs = currentPool._coinToStake;\r\n    coinToReward storage cr = currentPool._coinToReward;\r\n    uint256 amountStaked = currentPool._amountStaked;\r\n    return ( ( amountStaked * cr._stakePercentage / (10 ** cs._decimals) ) * (_endDate - currentPool._startTime) / cr._stakeRateInEpoch ) * (10 ** cr._decimals) / 100;\r\n\r\n}\r\n\r\n// user functions\r\nfunction stake(uint256 _poolID, uint256 _stakeAmountWithDecimal) external isPoolExist(_poolID) isPoolEndTime(_poolID){\r\n    address sender = _msgSender();\r\n    StakePool storage currentPool = stakePoolFromPoolID[_poolID];\r\n    coinToStake storage cs = currentPool._coinToStake;\r\n    require(_stakeAmountWithDecimal / (10 ** cs._decimals) <= cs._stakeLimitWholeNumber || cs._stakeLimitWholeNumber == 0, 'You are over the stake limit!');\r\n    uint256 newStakeBal;\r\n    coinToReward storage cr = currentPool._coinToReward;\r\n    uint256 feeAmount = (_stakeAmountWithDecimal * currentPool._stakeFee / 100);\r\n    \r\n    if(isUserStaked[_poolID][sender]){\r\n        UserStake storage currentUserStake = userStakeFromPoolID[_poolID][sender];\r\n        uint256 tokenStakeLimitWithZeros;\r\n        if(cs._stakeLimitWholeNumber == 0){\r\n          tokenStakeLimitWithZeros = 0;     \r\n        }else{\r\n          tokenStakeLimitWithZeros = cs._stakeLimitWholeNumber * (10**cs._decimals); \r\n        }\r\n        require(_stakeAmountWithDecimal + currentUserStake._amountStaked <= tokenStakeLimitWithZeros || tokenStakeLimitWithZeros == 0, 'You are over the stake limit!');\r\n        uint256 availableHarvest  = getRewardPaidView(_poolID,sender);\r\n        \r\n        if(availableHarvest < 0 ){\r\n            availableHarvest = 0;\r\n        }\r\n\r\n        // collect stake\r\n        IERC20(cs._address).transferFrom(sender,address(this),_stakeAmountWithDecimal);\r\n\r\n        // claim or reStake reward token if same as stake\r\n        if(cs._address == cr._address){ \r\n            newStakeBal = (_stakeAmountWithDecimal - feeAmount) + availableHarvest;\r\n        }else{\r\n            newStakeBal = _stakeAmountWithDecimal - feeAmount;\r\n            IERC20(cr._address).transfer(sender,availableHarvest);\r\n        }\r\n\r\n        // update stake amount\r\n        currentUserStake._rewardClaimed += availableHarvest;\r\n        currentPool._rewardClaimed += availableHarvest;\r\n        currentPool._amountStaked += newStakeBal;\r\n        currentUserStake._amountStaked += newStakeBal;\r\n        currentUserStake._startTime = block.timestamp;\r\n        emit Harvest(_poolID,sender,availableHarvest);\r\n    }else{\r\n        //start newStake\r\n        uint256 userStartTime = block.timestamp;\r\n        IERC20(cs._address).transferFrom(sender,address(this),_stakeAmountWithDecimal);\r\n        newStakeBal = _stakeAmountWithDecimal - feeAmount;\r\n\r\n        isUserStaked[_poolID][sender] = true;\r\n        poolFromStakeID[nextStakeID] = _poolID;\r\n        stakesFromPoolID[_poolID].push(nextStakeID);\r\n        stakesFromUser[sender].push(nextStakeID);\r\n\r\n        userStakeFromPoolID[_poolID][sender] = UserStake(nextStakeID,sender,_poolID,newStakeBal,userStartTime,0);\r\n\r\n        // update stake amount\r\n        currentPool._amountStaked += newStakeBal;\r\n        nextStakeID++; \r\n    }\r\n    \r\n    //collect fee\r\n    IERC20(cs._address).transfer(feeCollector,feeAmount); \r\n    emit Fee(_poolID,sender,feeAmount,'Stake');\r\n    emit Stake(_poolID,sender,newStakeBal);\r\n}\r\n\r\nfunction unStake(uint256 _poolID, uint256 _unStakeAmountWithDecimal) external isPoolExist(_poolID) {\r\n    address sender = _msgSender();\r\n    require(isUserStaked[_poolID][sender], 'You have no stake in this pool!');\r\n    UserStake storage currentUserStake = userStakeFromPoolID[_poolID][sender];      \r\n    uint256 amountStaked = currentUserStake._amountStaked;\r\n    StakePool storage currentPool = stakePoolFromPoolID[_poolID];\r\n    coinToStake storage cs = currentPool._coinToStake;\r\n    uint256 _unStakeAmount = _unStakeAmountWithDecimal;\r\n    require(_unStakeAmount <= amountStaked, 'You do not have that amount available!');\r\n    coinToReward storage cr = currentPool._coinToReward;\r\n    uint256 availableHarvest = getRewardPaidView(_poolID,sender);\r\n    \r\n    if(availableHarvest < 0 ){\r\n        availableHarvest = 0;\r\n    }\r\n    \r\n    uint256 unStakeFee = currentPool._unStakeFee;\r\n    uint256 feeAmount = (_unStakeAmount * unStakeFee / 100);\r\n\r\n        // unstake\r\n        currentPool._amountStaked -= _unStakeAmount;\r\n        currentUserStake._amountStaked -= _unStakeAmount;\r\n        uint256 newUnStakeBal = _unStakeAmount - feeAmount;\r\n        if(cs._address == cr._address){\r\n            uint256 newUnStakeBalHarvest = _unStakeAmount + availableHarvest - feeAmount ;\r\n            IERC20(cs._address).transfer(sender,newUnStakeBalHarvest);\r\n        }else{\r\n            IERC20(cs._address).transfer(sender,newUnStakeBal);\r\n            IERC20(cr._address).transfer(sender,availableHarvest);\r\n        }\r\n\r\n    // update claim\r\n    currentUserStake._rewardClaimed += availableHarvest;\r\n    currentPool._rewardClaimed += availableHarvest;\r\n    currentUserStake._startTime = block.timestamp;\r\n    \r\n    // collect feeAmount\r\n    IERC20(cs._address).transfer(feeCollector,feeAmount);\r\n    emit Fee(_poolID,sender,feeAmount,'unStake');\r\n    emit UnStake(_poolID,sender,_unStakeAmount);\r\n    emit Harvest(_poolID,sender,availableHarvest);\r\n}\r\n\r\n\r\nfunction harvest(uint256 _poolID) external isPoolExist(_poolID) {\r\n    address sender = _msgSender();\r\n    require(isUserStaked[_poolID][sender], 'You have no stake in this pool!');\r\n    UserStake storage currentUserStake = userStakeFromPoolID[_poolID][sender];  \r\n    StakePool storage currentPool = stakePoolFromPoolID[_poolID];\r\n    coinToReward storage cr = currentPool._coinToReward;\r\n    uint256 availableHarvest = getRewardPaidView(_poolID,sender);\r\n    if(availableHarvest < 0){\r\n        revert('No rewards available!');\r\n    }\r\n    currentUserStake._rewardClaimed += availableHarvest;\r\n    currentPool._rewardClaimed += availableHarvest;\r\n    IERC20(cr._address).transfer(sender,availableHarvest);\r\n    currentUserStake._startTime = block.timestamp;\r\n    //Emit harvest collected poolID,address,amount \r\n    emit Harvest(_poolID,sender,availableHarvest);\r\n}\r\n\r\n\r\n//admin actions\r\nfunction createStakePool(\r\nuint256 endDate, \r\nuint256 stakeFee, \r\nuint256 unStakeFee, \r\naddress tokenStake,\r\nuint256 tokenStakeDecimals,\r\nuint256 tokenStakeLimitWholeNumber,\r\naddress tokenReward,\r\nuint256 tokenRewardDecimals,\r\nuint256 tokenRewardPoolAmount,\r\nuint256 tokenRewardStakePercentage,\r\nuint256 tokenRewardStakeRateInEpoch\r\n)\r\nexternal onlyAdmin {\r\n    address sender = _msgSender();\r\n    uint256 newStartTime = block.timestamp;\r\n    uint256 transferAmount = tokenRewardPoolAmount * (10 ** tokenRewardDecimals);\r\n    IERC20(tokenReward).transferFrom(sender,address(this),transferAmount);\r\n    stakePoolFromPoolID[nextPoolID] = StakePool(\r\n        nextPoolID,\r\n        stakeFee,\r\n        unStakeFee,\r\n        coinToStake(tokenStake,tokenStakeDecimals,tokenStakeLimitWholeNumber),\r\n        coinToReward(tokenReward,tokenRewardDecimals,tokenRewardPoolAmount,tokenRewardStakePercentage,tokenRewardStakeRateInEpoch),\r\n        0,\r\n        0,\r\n        newStartTime,\r\n        endDate\r\n    );\r\n    endDateFromPoolID[nextPoolID] = endDate;\r\n    isActiveFromPoolID[nextPoolID] = true;\r\n\r\n    emit NewStakePool(nextPoolID,tokenStake,tokenReward);\r\n    nextPoolID++;\r\n\r\n}\r\n\r\nfunction endStakePool(uint256 _poolID) external onlyAdmin isPoolExist(_poolID) isPoolActive(_poolID){\r\n    address sender = _msgSender();\r\n    StakePool storage currentPool = stakePoolFromPoolID[_poolID];\r\n    coinToStake storage cs = currentPool._coinToStake;\r\n    coinToReward storage cr = currentPool._coinToReward;\r\n    uint256 endDate = block.timestamp;\r\n    currentPool._endDate = endDate;\r\n    endDateFromPoolID[_poolID] = endDate;\r\n    isActiveFromPoolID[_poolID] = false;\r\n    uint256 rewardPaid = getRewardPaidPool(_poolID,endDate);\r\n    uint256 availableBal = IERC20(cr._address).balanceOf(address(this));\r\n    uint256 withdrawBal;\r\n    if(cs._address == cr._address){\r\n        withdrawBal = availableBal - currentPool._amountStaked - rewardPaid;\r\n    }else{\r\n        withdrawBal = availableBal - rewardPaid;\r\n    }\r\n    IERC20(cr._address).transfer(sender,withdrawBal);\r\n\r\n    emit EndStakePool(_poolID,endDate);\r\n}\r\n\r\nfunction updateStakePoolFee(uint256 _poolID, uint256 stakeFee, uint256 unStakeFee) external onlyAdmin isPoolExist(_poolID) isPoolActive(_poolID){\r\n    StakePool storage currentPool = stakePoolFromPoolID[_poolID];\r\n    currentPool._stakeFee = stakeFee;\r\n    currentPool._unStakeFee = unStakeFee;\r\n    // emit fee updated poolID,stakeFee,unstakeFee\r\n    emit UpdateStakeFees(_poolID,stakeFee,unStakeFee);\r\n}\r\n\r\nfunction updateFeeCollector(address _newAddress) external onlyAdmin {\r\n    feeCollector = _newAddress;\r\n}\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"EndStakePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"feeType\",\"type\":\"string\"}],\"name\":\"Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"availableHarvest\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenStake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenReward\",\"type\":\"address\"}],\"name\":\"NewStakePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStakeBal\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unStakeAmount\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unStakeFee\",\"type\":\"uint256\"}],\"name\":\"UpdateStakeFees\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unStakeFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenStake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenStakeDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStakeLimitWholeNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenReward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenRewardDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenRewardPoolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenRewardStakePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenRewardStakeRateInEpoch\",\"type\":\"uint256\"}],\"name\":\"createStakePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"endDateFromPoolID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"}],\"name\":\"endStakePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getRewardPaidView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isActiveFromPoolID\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToCheck\",\"type\":\"address\"}],\"name\":\"isAdminCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUserStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPoolID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextStakeID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolFromStakeID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmountWithDecimal\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakePoolFromPoolID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unStakeFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeLimitWholeNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterStake.coinToStake\",\"name\":\"_coinToStake\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeRateInEpoch\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterStake.coinToReward\",\"name\":\"_coinToReward\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakesFromPoolID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakesFromUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unStakeAmountWithDecimal\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToSet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"updateAdmin\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unStakeFee\",\"type\":\"uint256\"}],\"name\":\"updateStakePoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakeFromPoolID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MasterStake","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://abf1584a402efb2429b35df1bd3f60e911ab553053d6868c0e480391f1a264c0"}]}