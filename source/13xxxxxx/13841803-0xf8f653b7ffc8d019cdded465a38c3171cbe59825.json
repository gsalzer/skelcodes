{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-11-26\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2021-10-15\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * mul \r\n     * @dev Safe math multiply function\r\n     */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  /**\r\n   * add\r\n   * @dev Safe math addition function\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev Ownable has an owner address to simplify \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  /**\r\n   * Ownable\r\n   * @dev Ownable constructor sets the `owner` of the contract to sender\r\n   */\r\n  function Ownable() public {\r\n    owner = 0x5ff4e128e7dC3a3ab4f2a61510272472fDd759A4; //msg.sender;\r\n  }\r\n\r\n  /**\r\n   * ownerOnly\r\n   * @dev Throws an error if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * transferOwnership\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Token\r\n * @dev API interface for interacting with the WILD Token contract \r\n */\r\ninterface Token {\r\n  function transfer(address _to, uint256 _value) external returns (bool);\r\n  function balanceOf(address _owner) external constant returns (uint256 balance);\r\n}\r\n\r\n/**\r\n * @title ShareringSwap\r\n * @dev ShareringSwap contract is Ownable\r\n **/\r\ncontract ShareringSwap is Ownable {\r\n  using SafeMath for uint256;\r\n  Token token;\r\n  address public requester;\r\n  address public approver;\r\n  \r\n  struct typeTxInfo {\r\n    address to;\r\n    uint256 value;\r\n    bytes32 transactionId;\r\n    uint status;\r\n  }\r\n  \r\n  mapping(bytes32 => typeTxInfo) public Txs;\r\n  \r\n  /**\r\n   * RequestSwap\r\n   * @dev Log swap request\r\n   */\r\n  event RequestSwap(bytes32 transactionId, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * Reject Swap\r\n   * @dev Log swap approval\r\n   */\r\n  event RejectSwap(bytes32 transactionId, address indexed to, uint256 value);\r\n  \r\n  /**\r\n   * ApprovalSwap\r\n   * @dev Log swap approval\r\n   */\r\n  event ApprovalSwap(bytes32 transactionId, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * onlyApprover\r\n   * @dev Throws an error if called by any account other than the approver.\r\n   **/\r\n  modifier onlyApprover() {\r\n    require(msg.sender == approver);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * onlyRequester\r\n   * @dev Throws an error if called by any account other than the approver.\r\n   **/\r\n  modifier onlyRequester() {\r\n    require(msg.sender == requester);\r\n    _;\r\n  }\r\n  \r\n  \r\n  /**\r\n   * ShareringSwap\r\n   * @dev ShareringSwap constructor\r\n   **/\r\n  function ShareringSwap(address _tokenAddr, address _requester, address _approver) public {\r\n      require(_tokenAddr != 0);\r\n      token = Token(_tokenAddr);\r\n      requester = _requester;\r\n      approver = _approver;\r\n  }\r\n\r\n  /**\r\n   * tokensAvailable\r\n   * @dev returns the number of tokens allocated to this contract\r\n   **/\r\n  function tokensAvailable() public constant returns (uint256) {\r\n    return token.balanceOf(this);\r\n  }\r\n\r\n  /**\r\n   * withdraw\r\n   **/\r\n  function withdraw() onlyOwner public {\r\n    // Transfer tokens back to owner\r\n    uint256 balance = token.balanceOf(this);\r\n    assert(balance > 0);\r\n    token.transfer(owner, balance);\r\n  }\r\n  \r\n  /**\r\n   * set Approval Address\r\n   **/\r\n  function setApprover(address _approver) onlyOwner public {\r\n    approver = _approver;\r\n  }\r\n  \r\n   /**\r\n   * set Requester Address\r\n   **/\r\n  function setRequester(address _requester) onlyOwner public {\r\n    requester = _requester;\r\n  }\r\n  \r\n  /**\r\n   * tx info\r\n   * @dev returns the tx info\r\n   **/\r\n  function txInfo(bytes32 _transactionId) public constant returns (address, uint256, uint) {\r\n    return (Txs[_transactionId].to, Txs[_transactionId].value, Txs[_transactionId].status);\r\n  }\r\n  \r\n   /**\r\n   * Request swap\r\n   **/\r\n  function requestSwap(bytes32 _transactionId, address _to, uint256 _amount) onlyRequester public {\r\n    Txs[_transactionId].transactionId = _transactionId;\r\n    Txs[_transactionId].to = _to;\r\n    Txs[_transactionId].value = _amount;\r\n    Txs[_transactionId].status = 1;\r\n    emit RequestSwap(_transactionId, _to, _amount);\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Reject swap\r\n   **/\r\n  function rejectSwap(bytes32 _transactionId) onlyApprover public {\r\n    assert(Txs[_transactionId].status == 1);    \r\n    Txs[_transactionId].status = 3;\r\n    emit RejectSwap(_transactionId, Txs[_transactionId].to, Txs[_transactionId].value);\r\n  }\r\n\r\n  /**\r\n   * Reject multi swap\r\n   **/\r\n  function rejectMultiSwap(bytes32[] _transactionIds) onlyApprover public {\r\n    for (uint i = 0; i < _transactionIds.length; i++) {\r\n       rejectSwap(_transactionIds[i]); \r\n    }  \r\n  }\r\n\r\n   /**\r\n   * Approve swap\r\n   **/\r\n  function approveSwap(bytes32 _transactionId) onlyApprover public {\r\n    uint256 balance = token.balanceOf(this);\r\n    assert(balance > Txs[_transactionId].value);\r\n    assert(Txs[_transactionId].status == 1);\r\n    token.transfer(Txs[_transactionId].to, Txs[_transactionId].value);\r\n    Txs[_transactionId].status = 2;\r\n    emit ApprovalSwap(_transactionId, Txs[_transactionId].to, Txs[_transactionId].value);\r\n  }\r\n  \r\n  \r\n   /**\r\n   * Approve multi swap\r\n   **/\r\n  function approveMultiSwap(bytes32[] _transactionIds) onlyApprover public {\r\n    for (uint i = 0; i < _transactionIds.length; i++) {\r\n       approveSwap(_transactionIds[i]); \r\n    }  \r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_transactionId\",\"type\":\"bytes32\"}],\"name\":\"txInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"setRequester\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionIds\",\"type\":\"bytes32[]\"}],\"name\":\"rejectMultiSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approver\",\"type\":\"address\"}],\"name\":\"setApprover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionIds\",\"type\":\"bytes32[]\"}],\"name\":\"approveMultiSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionId\",\"type\":\"bytes32\"}],\"name\":\"rejectSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requester\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionId\",\"type\":\"bytes32\"}],\"name\":\"approveSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"Txs\",\"outputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"name\":\"status\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionId\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestSwap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_requester\",\"type\":\"address\"},{\"name\":\"_approver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RequestSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RejectSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ApprovalSwap\",\"type\":\"event\"}]","ContractName":"ShareringSwap","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d98f75b1a3261dab9eed4956c93f33749027a96400000000000000000000000007506d32d8403e776ccf7f2c32d32f5131cacb000000000000000000000000005dfd2ff36eb17d6fa7c30f2e49acfdf1c5131df3","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d11a8f54949aef6a0a335bed8bded4eb0971a9ae6da2d3051e4bffcb82cce47c"}]}