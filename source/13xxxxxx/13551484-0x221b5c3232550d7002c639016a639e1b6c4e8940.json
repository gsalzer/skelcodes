{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/NotAStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./interface/IERC20.sol\\\";\\n\\ncontract NotAStake is IERC721Receiver, Ownable {\\n    \\n    struct Operator {\\n        bool active;\\n        uint tokensHour;\\n        address tokenAddress;\\n    }\\n    \\n    struct Item {\\n        address owner;\\n        uint stakeTime;\\n        uint lastWithdraw;\\n    }\\n\\n    bool public paused = false;\\n    mapping (address => mapping(uint => Item)) public owners;\\n    mapping (address => Operator) public operators;\\n    mapping (address => mapping(address => uint[])) private _qty;\\n\\n    modifier notPaused(){\\n        require(!paused, \\\"PAUSED\\\");\\n        _;\\n    }\\n\\n    function togglePause() public onlyOwner {\\n        paused = !paused;\\n    }\\n    \\n    function getAssetsByHolder(address operator, address holder) public view returns (uint[] memory){\\n        return _qty[operator][holder];\\n    }\\n    \\n    function setOperator(address operator, bool active, uint tokensHour, address tokenAddress) public onlyOwner {\\n        operators[operator] = Operator(active, tokensHour, tokenAddress);\\n    }\\n    \\n    function stake(address operator, uint[] calldata tokenIds) public notPaused {\\n        require(operators[operator].active,\\\"collection not allowed\\\");\\n        IERC721 NFT = IERC721(operator);\\n        for(uint i=0; i < tokenIds.length; i++){\\n            uint tokenId = tokenIds[i];\\n            require(NFT.ownerOf(tokenId) == _msgSender());\\n            NFT.transferFrom(_msgSender(), address(this), tokenId);\\n            owners[operator][tokenId] = Item(_msgSender(),block.timestamp,0);\\n            _qty[operator][_msgSender()].push(tokenId);\\n        }\\n    }\\n    \\n    function unstake(address operator, uint[] calldata tokenIds) public {\\n        IERC721 NFT = IERC721(operator);\\n         for(uint i=0; i< tokenIds.length; i++){\\n            uint tokenId = tokenIds[i];\\n            require(owners[operator][tokenId].owner == _msgSender(), \\\"NOT OWNER\\\");\\n            NFT.transferFrom(address(this), _msgSender(), tokenId);\\n            owners[operator][tokenId] = Item(address(0),0,0);\\n            for(uint j=0;j<_qty[operator][_msgSender()].length;j++){\\n                if(_qty[operator][_msgSender()][j] == tokenId){\\n                    _qty[operator][_msgSender()][j] = 9999999999;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n    \\n    function recover(address operator, uint tokenId) public onlyOwner {\\n        require(owners[operator][tokenId].owner == address(0), \\\"NOT ZERO ADDRESS\\\");\\n        IERC721 NFT = IERC721(operator);\\n        NFT.transferFrom(address(this), _msgSender(), tokenId);\\n    }\\n    \\n    function getProfits(address operator, uint tokenId) public view returns(uint) {\\n        Item memory item = owners[operator][tokenId];\\n        Operator memory op = operators[operator];\\n        if(!op.active || item.stakeTime == 0){\\n            return 0;\\n        }\\n        uint lastWithdraw = item.stakeTime > item.lastWithdraw ? item.stakeTime : item.lastWithdraw;\\n        uint stakeTime = (block.timestamp - lastWithdraw) / 1 hours;\\n        return stakeTime * op.tokensHour;\\n    }\\n    \\n    function withdraw(address operator, uint tokenId) public notPaused {\\n         require(owners[operator][tokenId].owner == _msgSender(), \\\"NOT OWNER\\\");\\n         Item storage item = owners[operator][tokenId];\\n         Operator memory op = operators[operator];\\n         uint profits = getProfits(operator, tokenId);\\n         require(profits > 0, \\\"WITHDRAW ZERO TOKENS\\\");\\n         require(op.tokenAddress != address(0), \\\"NO ERC20 SETUP\\\");\\n         require(op.active, \\\"PAUSED\\\");\\n         IERC20 COIN = IERC20(operators[operator].tokenAddress);\\n         item.lastWithdraw = block.timestamp;\\n         COIN.transferFrom(COIN.owner(), _msgSender(), profits);\\n    }\\n    \\n    function onERC721Received(\\n        address operator,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        require(operators[operator].active,\\\"collection not allowed\\\");\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"/contracts/NotASubscription.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./NotAStake.sol\\\";\\n\\ncontract NotASubscription is Ownable {\\n    \\n    struct Sub {\\n        uint level;\\n        uint validUntil;\\n    }\\n\\n    mapping (address => Sub) public subscriptions;\\n    mapping (uint => uint) public prices;\\n    mapping (address => mapping(uint => uint)) lastWithdraw;\\n\\n    uint constant BRONZE = 1;\\n    uint constant SILVER = 2;\\n    uint constant GOLD = 3;\\n    uint constant DIAMOND = 4;\\n\\n    IERC20 public COIN;\\n    NotAStake public STAKE;\\n\\n    constructor(){\\n        prices[BRONZE] = 774 ether;\\n        prices[SILVER] = 3720 ether;\\n        prices[GOLD] = 7440 ether;\\n        prices[DIAMOND] = 11160 ether;\\n    }\\n\\n    function setPrice(uint lvl, uint price) public onlyOwner{\\n        prices[lvl] = price;\\n    }\\n\\n    function buySubscription(uint lvl, uint months_) public {\\n        uint price = prices[lvl] * months_;\\n        require(price > 0, \\\"level not found or zero months\\\");\\n        require(COIN.balanceOf(_msgSender()) >= price, \\\"insufficient funds\\\");\\n        COIN.buy(price);\\n        Sub memory sub = subscriptions[_msgSender()];\\n        uint dateV = (sub.validUntil > block.timestamp && lvl <= sub.level) ? sub.validUntil : block.timestamp;\\n        subscriptions[_msgSender()] = Sub(lvl, dateV + (30 days * months_));\\n    }\\n  \\n    function getProfits(address operator, uint tokenId) public view returns(uint) {\\n        (,uint IStakeTime, uint ILastWithdraw) = STAKE.owners(operator,tokenId);\\n        (bool active, uint tokensHour,) = STAKE.operators(operator);\\n        if(!active || IStakeTime == 0){\\n            return 0;\\n        }\\n        uint lWithdraw = IStakeTime > ILastWithdraw ? IStakeTime : ILastWithdraw;\\n        lWithdraw = lWithdraw > lastWithdraw[operator][tokenId] ? lWithdraw : lastWithdraw[operator][tokenId];\\n        uint stakeTime = (block.timestamp - lWithdraw) / 1 hours;\\n        return stakeTime * tokensHour;\\n    }\\n\\n    function withdraw(address operator) public {\\n        uint[] memory tokenIds = STAKE.getAssetsByHolder(operator, _msgSender());\\n        uint tNull = 9999999999;\\n        require(tokenIds.length > 0, \\\"NOT OWNER\\\");\\n        for(uint i=0; i<tokenIds.length;i++){\\n            uint tokenId = tokenIds[i];\\n            if(tokenId != tNull){\\n                _withdraw(operator, tokenId);\\n            }\\n        }\\n    }\\n\\n    function withdraw(address operator, uint[] calldata tokenIds) public {\\n        for(uint i=0; i<tokenIds.length;i++){\\n            uint tokenId = tokenIds[i];\\n            _withdraw(operator, tokenId);\\n        }\\n    }\\n    \\n    function _withdraw(address operator, uint tokenId) private {\\n        (address IOwner,,) = STAKE.owners(operator,tokenId);\\n         require(IOwner == _msgSender(), \\\"NOT OWNER\\\");\\n         (bool active,, address tokenAddress) = STAKE.operators(operator);\\n         uint profits = getProfits(operator, tokenId);\\n         if(profits == 0){\\n             return;\\n         }\\n         require(tokenAddress != address(0), \\\"NO ERC20 SETUP\\\");\\n         require(active, \\\"PAUSED\\\");\\n         IERC20 Coin = IERC20(tokenAddress);\\n         lastWithdraw[operator][tokenId] = block.timestamp;\\n         Coin.transferFrom(Coin.owner(), _msgSender(), profits);\\n    }\\n\\n    function setStake(address newAddress) public onlyOwner {\\n        STAKE = NotAStake(newAddress);\\n    }\\n    \\n    function setCoin(address newAddress) public onlyOwner {\\n        COIN = IERC20(newAddress);\\n    }\\n}\"\r\n    },\r\n    \"/contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.8.6;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    \\n    function owner() external view returns (address); \\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function buy(uint price) external;\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COIN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE\",\"outputs\":[{\"internalType\":\"contract NotAStake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"months_\",\"type\":\"uint256\"}],\"name\":\"buySubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscriptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NotASubscription","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}