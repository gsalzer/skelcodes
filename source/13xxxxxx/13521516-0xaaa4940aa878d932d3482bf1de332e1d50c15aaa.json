{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// MINIMAL ERC20 INTERFACE FOR QANX TRANSFERABILITY\r\ninterface TransferableERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract Signed {\r\n\r\n    // THE ADDRESSES PERMITTED TO SIGN WITHDRAWAL REQUESTS UP TO X AMOUNT\r\n    mapping(address => uint256) internal signers;\r\n\r\n    // SET NO LIMIT SIGNER ON DEPLOYMENT\r\n    constructor() {\r\n        signers[msg.sender] = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    }\r\n\r\n    // METHOD TO SET WITHDRAWAL SIGNER ADDRESSES\r\n    function setSigner(address signer, uint256 limit) external {\r\n        require(signer != address(0) && signers[msg.sender] == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n        signers[signer] = limit;\r\n    }\r\n\r\n    // METHOD TO VERIFY WITHDRAWAL SIGNATURE OF A GIVEN TXID & AMOUNT\r\n    function verifySignature(bytes32 txid, bytes memory signature, uint256 amount) internal view returns (bool) {\r\n\r\n        // SIGNATURE VARIABLES FOR ECRECOVER\r\n        bytes32 r;\r\n        bytes32 vs;\r\n\r\n        // SPLIT SIGNATURE INTO r + vs\r\n        assembly {\r\n            r := mload(add(signature, 32))\r\n            vs := mload(add(signature, 64))\r\n        }\r\n\r\n        // DETERMINE s AND v FROM vs\r\n        bytes32 s = vs & 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n        uint8 v = 27 + uint8(uint256(vs) >> 255);\r\n\r\n        // RECOVER & VERIFY SIGNER IDENTITY RELATED TO AMOUNT\r\n        return amount < signers[ecrecover(txid, v, r, s)];\r\n    }\r\n}\r\n\r\ncontract BridgeQANX is Signed {\r\n\r\n    // POINTS TO THE OFFICIAL QANX CONTRACT\r\n    TransferableERC20 private _qanx = TransferableERC20(0xAAA7A10a8ee237ea61E8AC46C50A8Db8bCC1baaa);\r\n\r\n    // STORES NONCES FOR CROSS-CHAIN TRANSFERS (msg.sender => depositChainId => withdrawChainId = nonce)\r\n    mapping(address => mapping(uint256 => mapping(uint256 => uint256))) private _nonces;\r\n\r\n    // FETCH NONCE OF SENDER BASED ON CHAIN IDS\r\n    function getNonce(address sender, uint256 depositChainId, uint256 withdrawChainId) external view returns (uint256) {\r\n        return _nonces[sender][depositChainId][withdrawChainId];\r\n    }\r\n\r\n    // SEND IN TOKENS ON THE SOURCE CHAIN OF THE BRIDGE\r\n    function bridgeSend(address beneficiary, uint256 amount, uint256 withdrawChainId) external returns (bytes32) {\r\n\r\n        // CALCULATE TXID AND INCREMENT NONCE\r\n        bytes32 txid = keccak256(abi.encode(msg.sender, block.chainid, withdrawChainId, _nonces[msg.sender][block.chainid][withdrawChainId]++, beneficiary, amount));\r\n\r\n        // TRANSFER TOKENS FROM MSG SENDER TO THIS CONTRACT FOR THE AMOUNT TO BE BRIDGED\r\n        require(_qanx.transferFrom(msg.sender, address(this), amount));\r\n\r\n        // RETURN TXID\r\n        return txid;\r\n    }\r\n\r\n    // WITHDRAW TOKENS ON THE TARGET CHAIN OF THE BRIDGE\r\n    function bridgeWithdraw(address beneficiary, uint256 amount, uint256 depositChainId, bytes calldata signature) external returns (bool) {\r\n\r\n        // CALCULATE TXID AND INCREMENT NONCE\r\n        bytes32 txid = keccak256(abi.encode(msg.sender, depositChainId, block.chainid, _nonces[msg.sender][depositChainId][block.chainid]++, beneficiary, amount));\r\n        \r\n        // VERIFY SIGNATURE\r\n        require(verifySignature(txid, signature, amount), \"ERR_SIG\");\r\n\r\n        // COLLECT FEE\r\n        uint256 fee = amount / 100 * feePercentage;\r\n        feesCollected += fee;\r\n\r\n        // TRANSFER TOKENS TO BENEFICIARY\r\n        require(_qanx.transfer(beneficiary, amount - fee), \"ERR_TXN\");\r\n        return true;\r\n    }\r\n\r\n    // FEE PERCENTAGE AND TOTAL COLLECTED FEES\r\n    uint256 private feePercentage;\r\n    uint256 private feesCollected;\r\n\r\n    // FEE TRANSPARENCY FUNCTION\r\n    function getFeeInfo() external view returns (uint256[2] memory) {\r\n        return [feePercentage, feesCollected];\r\n    }\r\n\r\n    // SETTER FOR FEE PERCENTAGE (MAX 5%)\r\n    function setFeePercentage(uint8 _feePercentage) external {\r\n        require(signers[msg.sender] > 0 && _feePercentage <= 5);\r\n        feePercentage = _feePercentage;\r\n    }\r\n\r\n    // METHOD TO WITHDRAW TOTAL COLLECTED FEES SO FAR\r\n    function withdrawFees(address beneficiary) external {\r\n        require(signers[msg.sender] > 0);\r\n        require(_qanx.transfer(beneficiary, feesCollected), \"ERR_TXN\");\r\n        feesCollected = 0;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawChainId\",\"type\":\"uint256\"}],\"name\":\"bridgeSend\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"bridgeWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeInfo\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawChainId\",\"type\":\"uint256\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_feePercentage\",\"type\":\"uint8\"}],\"name\":\"setFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BridgeQANX","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8f7e4d42ce73b92bc1ab7bfd16f7b750d9b6ad3ed9e207106984e35651e3c887"}]}