{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PRBProxyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./IPRBProxy.sol\\\";\\nimport \\\"./IPRBProxyFactory.sol\\\";\\nimport \\\"./IPRBProxyRegistry.sol\\\";\\n\\n/// @notice Emitted when a proxy already exists for the given owner.\\nerror PRBProxyRegistry__ProxyAlreadyExists(address owner);\\n\\n/// @title PRBProxyRegistry\\n/// @author Paul Razvan Berg\\ncontract PRBProxyRegistry is IPRBProxyRegistry {\\n    /// PUBLIC STORAGE ///\\n\\n    /// @inheritdoc IPRBProxyRegistry\\n    IPRBProxyFactory public factory;\\n\\n    /// INTERNAL STORAGE ///\\n\\n    /// @notice Internal mapping of owners to current proxies.\\n    mapping(address => IPRBProxy) internal currentProxies;\\n\\n    /// CONSTRUCTOR ///\\n\\n    constructor(IPRBProxyFactory factory_) {\\n        factory = factory_;\\n    }\\n\\n    /// PUBLIC CONSTANT FUNCTIONS ///\\n\\n    /// @inheritdoc IPRBProxyRegistry\\n    function getCurrentProxy(address owner) external view returns (IPRBProxy proxy) {\\n        proxy = currentProxies[owner];\\n    }\\n\\n    /// PUBLIC NON-CONSTANT FUNCTIONS ///\\n\\n    /// @inheritdoc IPRBProxyRegistry\\n    function deploy() external returns (address payable proxy) {\\n        proxy = deployFor(msg.sender);\\n    }\\n\\n    /// @inheritdoc IPRBProxyRegistry\\n    function deployFor(address owner) public returns (address payable proxy) {\\n        IPRBProxy currentProxy = currentProxies[owner];\\n\\n        // Do not deploy if the proxy already exists and the owner is the same.\\n        if (address(currentProxy) != address(0) && currentProxy.owner() == owner) {\\n            revert PRBProxyRegistry__ProxyAlreadyExists(owner);\\n        }\\n\\n        // Deploy the proxy via the factory.\\n        proxy = factory.deployFor(owner);\\n\\n        // Set or override the current proxy for the owner.\\n        currentProxies[owner] = IPRBProxy(proxy);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IPRBProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @title IPRBProxy\\n/// @author Paul Razvan Berg\\n/// @notice Proxy contract to compose transactions on owner's behalf.\\ninterface IPRBProxy {\\n    /// EVENTS ///\\n\\n    event Execute(address indexed target, bytes data, bytes response);\\n\\n    event TransferOwnership(address indexed oldOwner, address indexed newOwner);\\n\\n    /// PUBLIC CONSTANT FUNCTIONS ///\\n\\n    /// @notice Returns a boolean flag that indicates whether the envoy has permission to call the given target\\n    /// contract and function selector.\\n    function getPermission(\\n        address envoy,\\n        address target,\\n        bytes4 selector\\n    ) external view returns (bool);\\n\\n    /// @notice The address of the owner account or contract.\\n    function owner() external view returns (address);\\n\\n    /// @notice How much gas to reserve for running the remainder of the \\\"execute\\\" function after the DELEGATECALL.\\n    /// @dev This prevents the proxy from becoming unusable if EVM opcode gas costs change in the future.\\n    function minGasReserve() external view returns (uint256);\\n\\n    /// PUBLIC NON-CONSTANT FUNCTIONS ///\\n\\n    /// @notice Delegate calls to the target contract by forwarding the call data. Returns the data it gets back,\\n    /// including when the contract call reverts with a reason or custom error.\\n    ///\\n    /// @dev Requirements:\\n    /// - The caller must be either an owner or an envoy.\\n    /// - `target` must be a deployed contract.\\n    /// - The owner cannot be changed during the DELEGATECALL.\\n    ///\\n    /// @param target The address of the target contract.\\n    /// @param data Function selector plus ABI encoded data.\\n    /// @return response The response received from the target contract.\\n    function execute(address target, bytes calldata data) external payable returns (bytes memory response);\\n\\n    /// @notice Sets a new value for the minimum gas reserve.\\n    /// @dev Requirements:\\n    /// - The caller must be the owner.\\n    /// @param newMinGasReserve The new minimum gas reserve.\\n    function setMinGasReserve(uint256 newMinGasReserve) external;\\n\\n    /// @notice Gives or takes a permission from an envoy to call the given target contract and function selector\\n    /// on behalf of the owner.\\n    /// @dev It is not an error to reset a permission on the same (envoy,target,selector) tuple multiple types.\\n    ///\\n    /// Requirements:\\n    /// - The caller must be the owner.\\n    ///\\n    /// @param envoy The address of the envoy account.\\n    /// @param target The address of the target contract.\\n    /// @param selector The 4 byte function selector on the target contract.\\n    /// @param permission The boolean permission to set.\\n    function setPermission(\\n        address envoy,\\n        address target,\\n        bytes4 selector,\\n        bool permission\\n    ) external;\\n\\n    /// @notice Transfers the owner of the contract to a new account.\\n    /// @dev Requirements:\\n    /// - The caller must be the owner.\\n    /// @param newOwner The address of the new owner account.\\n    function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IPRBProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @title IPRBProxyFactory\\n/// @author Paul Razvan Berg\\n/// @notice Deploys new proxies with CREATE2.\\ninterface IPRBProxyFactory {\\n    /// EVENTS ///\\n\\n    event DeployProxy(\\n        address indexed origin,\\n        address indexed deployer,\\n        address indexed owner,\\n        bytes32 seed,\\n        bytes32 salt,\\n        address proxy\\n    );\\n\\n    /// PUBLIC CONSTANT FUNCTIONS ///\\n\\n    /// @notice Gets the next seed that will be used to deploy the proxy.\\n    /// @param eoa The externally owned account that will own the proxy.\\n    function getNextSeed(address eoa) external view returns (bytes32 result);\\n\\n    /// @notice Mapping to track all deployed proxies.\\n    /// @param proxy The address of the proxy to make the check for.\\n    function isProxy(address proxy) external view returns (bool result);\\n\\n    /// @notice The release version of PRBProxy.\\n    /// @dev This is stored in the factory rather than the proxy to save gas for end users.\\n    function version() external view returns (uint256);\\n\\n    /// PUBLIC NON-CONSTANT FUNCTIONS ///\\n\\n    /// @notice Deploys a new proxy via CREATE2.\\n    /// @dev Sets \\\"msg.sender\\\" as the owner of the proxy.\\n    /// @return proxy The address of the newly deployed proxy contract.\\n    function deploy() external returns (address payable proxy);\\n\\n    /// @notice Deploys a new proxy via CREATE2, for the given owner.\\n    /// @param owner The owner of the proxy.\\n    /// @return proxy The address of the newly deployed proxy contract.\\n    function deployFor(address owner) external returns (address payable proxy);\\n}\\n\"\r\n    },\r\n    \"contracts/IPRBProxyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./IPRBProxy.sol\\\";\\nimport \\\"./IPRBProxyFactory.sol\\\";\\n\\n/// @title IPRBProxyRegistry\\n/// @author Paul Razvan Berg\\n/// @notice Deploys new proxies via the factory and keeps a registry of owners to proxies. Owners can only\\n/// have one proxy at a time.\\ninterface IPRBProxyRegistry {\\n    /// PUBLIC CONSTANT FUNCTIONS ///\\n\\n    /// @notice Address of the proxy factory contract.\\n    function factory() external view returns (IPRBProxyFactory proxyFactory);\\n\\n    /// @notice Gets the current proxy of the given owner.\\n    /// @param owner The address of the owner of the current proxy.\\n    function getCurrentProxy(address owner) external view returns (IPRBProxy proxy);\\n\\n    /// PUBLIC NON-CONSTANT FUNCTIONS ///\\n\\n    /// @notice Deploys a new proxy instance via the proxy factory.\\n    /// @dev Sets \\\"msg.sender\\\" as the owner of the proxy.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"deployFor\\\".\\n    ///\\n    /// @return proxy The address of the newly deployed proxy contract.\\n    function deploy() external returns (address payable proxy);\\n\\n    /// @notice Deploys a new proxy instance via the proxy factory, for the given owner.\\n    ///\\n    /// @dev Requirements:\\n    /// - The proxy must either not exist or its ownership must have been transferred by the owner.\\n    ///\\n    /// @param owner The owner of the proxy.\\n    /// @return proxy The address of the newly deployed proxy contract.\\n    function deployFor(address owner) external returns (address payable proxy);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IPRBProxyFactory\",\"name\":\"factory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PRBProxyRegistry__ProxyAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"deployFor\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IPRBProxyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getCurrentProxy\",\"outputs\":[{\"internalType\":\"contract IPRBProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PRBProxyRegistry","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000c3b9b328b2f1175c4fce1c441ebc58b573920db0","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}