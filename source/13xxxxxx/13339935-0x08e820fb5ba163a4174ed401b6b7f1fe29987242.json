{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/tokenization/DepositToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../tools/Errors.sol';\\nimport '../../tools/upgradeability/VersionedInitializable.sol';\\nimport './interfaces/PoolTokenConfig.sol';\\nimport './base/DepositTokenBase.sol';\\n\\n/// @dev Deposit token, an interest bearing token for the Augmented Finance protocol\\ncontract DepositToken is DepositTokenBase, VersionedInitializable {\\n  uint256 private constant TOKEN_REVISION = 0x1;\\n\\n  constructor() PoolTokenBase(address(0), address(0)) DepositTokenBase(address(0)) ERC20DetailsBase('', '', 0) {}\\n\\n  function getRevision() internal pure virtual override returns (uint256) {\\n    return TOKEN_REVISION;\\n  }\\n\\n  function initialize(\\n    PoolTokenConfig calldata config,\\n    string calldata name,\\n    string calldata symbol,\\n    bytes calldata params\\n  ) external override initializerRunAlways(TOKEN_REVISION) {\\n    if (isRevisionInitialized(TOKEN_REVISION)) {\\n      _initializeERC20(name, symbol, super.decimals());\\n    } else {\\n      _initializeERC20(name, symbol, config.underlyingDecimals);\\n      _initializePoolToken(config, params);\\n    }\\n\\n    emit Initialized(\\n      config.underlyingAsset,\\n      address(config.pool),\\n      address(config.treasury),\\n      super.name(),\\n      super.symbol(),\\n      super.decimals(),\\n      params\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (DepositToken, VariableDebtToken and StableDebtToken)\\n *  - AT = DepositToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = AddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolExtension\\n *  - ST = Stake\\n */\\nlibrary Errors {\\n  //contract specific errors\\n  string public constant VL_INVALID_AMOUNT = '1'; // Amount must be greater than 0\\n  string public constant VL_NO_ACTIVE_RESERVE = '2'; // Action requires an active reserve\\n  string public constant VL_RESERVE_FROZEN = '3'; // Action cannot be performed because the reserve is frozen\\n  string public constant VL_UNKNOWN_RESERVE = '4'; // Action requires an active reserve\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // User cannot withdraw more than the available balance (above min limit)\\n  string public constant VL_TRANSFER_NOT_ALLOWED = '6'; // Transfer cannot be allowed.\\n  string public constant VL_BORROWING_NOT_ENABLED = '7'; // Borrowing is not enabled\\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // Invalid interest rate mode selected\\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // The collateral balance is 0\\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // Health factor is lesser than the liquidation threshold\\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // There is not enough collateral to cover a new borrow\\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\\n  string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\\n  string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // The requested amount is exceeds max size of a stable loan\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // to repay a debt, user needs to specify a correct debt type (variable or stable)\\n  string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // To repay on behalf of an user an explicit amount to repay is needed\\n  string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // User does not have a stable rate loan in progress on this reserve\\n  string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // User does not have a variable rate loan in progress on this reserve\\n  string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // The collateral balance needs to be greater than 0\\n  string public constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // User deposit is already being used as collateral\\n  string public constant VL_RESERVE_MUST_BE_COLLATERAL = '21'; // This reserve must be enabled as collateral\\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // Interest rate rebalance conditions were not met\\n  string public constant AT_OVERDRAFT_DISABLED = '23'; // User doesn't accept allocation of overdraft\\n  string public constant VL_INVALID_SUB_BALANCE_ARGS = '24';\\n  string public constant AT_INVALID_SLASH_DESTINATION = '25';\\n\\n  string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // The caller of the function is not the lending pool configurator\\n\\n  string public constant LENDING_POOL_REQUIRED = '28'; // The caller of this function must be a lending pool\\n  string public constant CALLER_NOT_LENDING_POOL = '29'; // The caller of this function must be a lending pool\\n  string public constant AT_SUB_BALANCE_RESTIRCTED_FUNCTION = '30'; // The caller of this function must be a lending pool or a sub-balance operator\\n\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // Reserve has already been initialized\\n  string public constant CALLER_NOT_POOL_ADMIN = '33'; // The caller must be the pool admin\\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // The liquidity of the reserve needs to be 0\\n\\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // Provider is not registered\\n  string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // Health factor is not below the threshold\\n  string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // The collateral chosen cannot be liquidated\\n  string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // User did not borrow the specified currency\\n  string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // There isn't enough liquidity available to liquidate\\n\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '48';\\n  string public constant MATH_ADDITION_OVERFLOW = '49';\\n  string public constant MATH_DIVISION_BY_ZERO = '50';\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\\n  string public constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\\n  string public constant CALLER_NOT_STAKE_ADMIN = '57';\\n  string public constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\\n  string public constant CALLER_NOT_LIQUIDITY_CONTROLLER = '60';\\n  string public constant CALLER_NOT_REF_ADMIN = '61';\\n  string public constant VL_INSUFFICIENT_REWARD_AVAILABLE = '62';\\n  string public constant LP_CALLER_MUST_BE_DEPOSIT_TOKEN = '63';\\n  string public constant LP_IS_PAUSED = '64'; // Pool is paused\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = '65';\\n  string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\\n  string public constant RC_INVALID_LTV = '67';\\n  string public constant RC_INVALID_LIQ_THRESHOLD = '68';\\n  string public constant RC_INVALID_LIQ_BONUS = '69';\\n  string public constant RC_INVALID_DECIMALS = '70';\\n  string public constant RC_INVALID_RESERVE_FACTOR = '71';\\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\\n  string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\\n  string public constant VL_TREASURY_REQUIRED = '74';\\n  string public constant LPC_INVALID_CONFIGURATION = '75'; // Invalid risk parameters for the reserve\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '76'; // The caller must be the emergency admin\\n  string public constant UL_INVALID_INDEX = '77';\\n  string public constant VL_CONTRACT_REQUIRED = '78';\\n  string public constant SDT_STABLE_DEBT_OVERFLOW = '79';\\n  string public constant SDT_BURN_EXCEEDS_BALANCE = '80';\\n  string public constant CALLER_NOT_REWARD_CONFIG_ADMIN = '81'; // The caller of this function must be a reward admin\\n  string public constant LP_INVALID_PERCENTAGE = '82'; // Percentage can't be more than 100%\\n  string public constant LP_IS_NOT_TRUSTED_FLASHLOAN = '83';\\n  string public constant CALLER_NOT_SWEEP_ADMIN = '84';\\n  string public constant LP_TOO_MANY_NESTED_CALLS = '85';\\n  string public constant LP_RESTRICTED_FEATURE = '86';\\n  string public constant LP_TOO_MANY_FLASHLOAN_CALLS = '87';\\n  string public constant RW_BASELINE_EXCEEDED = '88';\\n  string public constant CALLER_NOT_REWARD_RATE_ADMIN = '89';\\n  string public constant CALLER_NOT_REWARD_CONTROLLER = '90';\\n  string public constant RW_REWARD_PAUSED = '91';\\n  string public constant CALLER_NOT_TEAM_MANAGER = '92';\\n  string public constant STK_REDEEM_PAUSED = '93';\\n  string public constant STK_INSUFFICIENT_COOLDOWN = '94';\\n  string public constant STK_UNSTAKE_WINDOW_FINISHED = '95';\\n  string public constant STK_INVALID_BALANCE_ON_COOLDOWN = '96';\\n  string public constant STK_EXCESSIVE_SLASH_PCT = '97';\\n  string public constant STK_WRONG_COOLDOWN_OR_UNSTAKE = '98';\\n  string public constant STK_PAUSED = '99';\\n\\n  string public constant TXT_OWNABLE_CALLER_NOT_OWNER = 'Ownable: caller is not the owner';\\n  string public constant TXT_CALLER_NOT_PROXY_OWNER = 'ProxyOwner: caller is not the owner';\\n  string public constant TXT_ACCESS_RESTRICTED = 'RESTRICTED';\\n}\\n\"\r\n    },\r\n    \"contracts/tools/upgradeability/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to implement versioned initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` or `initializerRunAlways` modifier.\\n * The revision number should be defined as a private constant, returned by getRevision() and used by initializer() modifier.\\n *\\n * ATTN: There is a built-in protection from implementation self-destruct exploits. This protection\\n * prevents initializers from being called on an implementation inself, but only on proxied contracts.\\n * To override this protection, call _unsafeResetVersionedInitializers() from a constructor.\\n *\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an initializable contract, as well\\n * as extending an initializable contract via inheritance.\\n *\\n * ATTN: When used with inheritance, parent initializers with `initializer` modifier are prevented by calling twice,\\n * but can only be called in child-to-parent sequence.\\n *\\n * WARNING: When used with inheritance, parent initializers with `initializerRunAlways` modifier\\n * are NOT protected from multiple calls by another initializer.\\n */\\nabstract contract VersionedInitializable {\\n  uint256 private constant BLOCK_REVISION = type(uint256).max;\\n  // This revision number is applied to implementations\\n  uint256 private constant IMPL_REVISION = BLOCK_REVISION - 1;\\n\\n  /// @dev Indicates that the contract has been initialized. The default value blocks initializers from being called on an implementation.\\n  uint256 private lastInitializedRevision = IMPL_REVISION;\\n\\n  /// @dev Indicates that the contract is in the process of being initialized.\\n  uint256 private lastInitializingRevision = 0;\\n\\n  /**\\n   * @dev There is a built-in protection from self-destruct of implementation exploits. This protection\\n   * prevents initializers from being called on an implementation inself, but only on proxied contracts.\\n   * Function _unsafeResetVersionedInitializers() can be called from a constructor to disable this protection.\\n   * It must be called before any initializers, otherwise it will fail.\\n   */\\n  function _unsafeResetVersionedInitializers() internal {\\n    require(isConstructor(), 'only for constructor');\\n\\n    if (lastInitializedRevision == IMPL_REVISION) {\\n      lastInitializedRevision = 0;\\n    } else {\\n      require(lastInitializedRevision == 0, 'can only be called before initializer(s)');\\n    }\\n  }\\n\\n  /// @dev Modifier to use in the initializer function of a contract.\\n  modifier initializer(uint256 localRevision) {\\n    (uint256 topRevision, bool initializing, bool skip) = _preInitializer(localRevision);\\n\\n    if (!skip) {\\n      lastInitializingRevision = localRevision;\\n      _;\\n      lastInitializedRevision = localRevision;\\n    }\\n\\n    if (!initializing) {\\n      lastInitializedRevision = topRevision;\\n      lastInitializingRevision = 0;\\n    }\\n  }\\n\\n  modifier initializerRunAlways(uint256 localRevision) {\\n    (uint256 topRevision, bool initializing, bool skip) = _preInitializer(localRevision);\\n\\n    if (!skip) {\\n      lastInitializingRevision = localRevision;\\n    }\\n    _;\\n    if (!skip) {\\n      lastInitializedRevision = localRevision;\\n    }\\n\\n    if (!initializing) {\\n      lastInitializedRevision = topRevision;\\n      lastInitializingRevision = 0;\\n    }\\n  }\\n\\n  function _preInitializer(uint256 localRevision)\\n    private\\n    returns (\\n      uint256 topRevision,\\n      bool initializing,\\n      bool skip\\n    )\\n  {\\n    topRevision = getRevision();\\n    require(topRevision < IMPL_REVISION, 'invalid contract revision');\\n\\n    require(localRevision > 0, 'incorrect initializer revision');\\n    require(localRevision <= topRevision, 'inconsistent contract revision');\\n\\n    if (lastInitializedRevision < IMPL_REVISION) {\\n      // normal initialization\\n      initializing = lastInitializingRevision > 0 && lastInitializedRevision < topRevision;\\n      require(initializing || isConstructor() || topRevision > lastInitializedRevision, 'already initialized');\\n    } else {\\n      // by default, initialization of implementation is only allowed inside a constructor\\n      require(lastInitializedRevision == IMPL_REVISION && isConstructor(), 'initializer blocked');\\n\\n      // enable normal use of initializers inside a constructor\\n      lastInitializedRevision = 0;\\n      // but make sure to block initializers afterwards\\n      topRevision = BLOCK_REVISION;\\n\\n      initializing = lastInitializingRevision > 0;\\n    }\\n\\n    if (initializing) {\\n      require(lastInitializingRevision > localRevision, 'incorrect order of initializers');\\n    }\\n\\n    if (localRevision <= lastInitializedRevision) {\\n      // prevent calling of parent's initializer when it was called before\\n      if (initializing) {\\n        // Can't set zero yet, as it is not a top-level call, otherwise `initializing` will become false.\\n        // Further calls will fail with the `incorrect order` assertion above.\\n        lastInitializingRevision = 1;\\n      }\\n      return (topRevision, initializing, true);\\n    }\\n    return (topRevision, initializing, false);\\n  }\\n\\n  function isRevisionInitialized(uint256 localRevision) internal view returns (bool) {\\n    return lastInitializedRevision >= localRevision;\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function REVISION() public pure returns (uint256) {\\n    return getRevision();\\n  }\\n\\n  /**\\n   * @dev returns the revision number (< type(uint256).max - 1) of the contract.\\n   * The number should be defined as a private constant.\\n   **/\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    uint256 cs;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      cs := extcodesize(address())\\n    }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[4] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/tokenization/interfaces/PoolTokenConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nstruct PoolTokenConfig {\\n  // Address of the associated lending pool\\n  address pool;\\n  // Address of the treasury\\n  address treasury;\\n  // Address of the underlying asset\\n  address underlyingAsset;\\n  // Decimals of the underlying asset\\n  uint8 underlyingDecimals;\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/tokenization/base/DepositTokenBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../../dependencies/openzeppelin/contracts/SafeERC20.sol';\\nimport '../../../interfaces/IDepositToken.sol';\\nimport '../../../tools/Errors.sol';\\nimport '../../../tools/math/WadRayMath.sol';\\nimport '../../../tools/math/PercentageMath.sol';\\nimport '../../../tools/tokens/ERC20Events.sol';\\nimport '../../../access/AccessFlags.sol';\\nimport '../../../tools/tokens/ERC20PermitBase.sol';\\nimport '../../../tools/tokens/ERC20AllowanceBase.sol';\\nimport './SubBalanceBase.sol';\\n\\n/// @dev Implementation of the interest bearing token for the Augmented Finance protocol\\nabstract contract DepositTokenBase is SubBalanceBase, ERC20PermitBase, ERC20AllowanceBase {\\n  using WadRayMath for uint256;\\n  using PercentageMath for uint256;\\n  using SafeERC20 for IERC20;\\n  using AccessHelper for IMarketAccessController;\\n\\n  address internal _treasury;\\n\\n  constructor(address treasury_) {\\n    _treasury = treasury_;\\n  }\\n\\n  function _initializePoolToken(PoolTokenConfig memory config, bytes calldata params) internal virtual override {\\n    require(config.treasury != address(0), Errors.VL_TREASURY_REQUIRED);\\n    super._initializeDomainSeparator();\\n    super._initializePoolToken(config, params);\\n    internalSetOverdraftTolerancePct(PercentageMath.HALF_ONE);\\n    _treasury = config.treasury;\\n  }\\n\\n  function getTreasury() external view returns (address) {\\n    return _treasury;\\n  }\\n\\n  function updateTreasury() external override onlyLendingPoolConfiguratorOrAdmin {\\n    address treasury = _remoteAcl.getAddress(AccessFlags.TREASURY);\\n    require(treasury != address(0), Errors.VL_TREASURY_REQUIRED);\\n    _treasury = treasury;\\n  }\\n\\n  function setOverdraftTolerancePct(uint16 overdraftTolerancePct) external onlyLendingPoolConfiguratorOrAdmin {\\n    internalSetOverdraftTolerancePct(overdraftTolerancePct);\\n  }\\n\\n  function addSubBalanceOperator(address addr) external override onlyLendingPoolConfiguratorOrAdmin {\\n    _addSubBalanceOperator(addr, ACCESS_SUB_BALANCE);\\n  }\\n\\n  function addStakeOperator(address addr) external override {\\n    _remoteAcl.requireAnyOf(\\n      msg.sender,\\n      AccessFlags.POOL_ADMIN |\\n        AccessFlags.LENDING_POOL_CONFIGURATOR |\\n        AccessFlags.STAKE_CONFIGURATOR |\\n        AccessFlags.STAKE_ADMIN,\\n      Errors.CALLER_NOT_POOL_ADMIN\\n    );\\n\\n    _addSubBalanceOperator(addr, ACCESS_LOCK_BALANCE | ACCESS_TRANSFER);\\n  }\\n\\n  function removeSubBalanceOperator(address addr) external override onlyLendingPoolConfiguratorOrAdmin {\\n    _removeSubBalanceOperator(addr);\\n  }\\n\\n  function getSubBalanceOperatorAccess(address addr) internal view override returns (uint8) {\\n    if (addr == address(_pool)) {\\n      return ~uint8(0);\\n    }\\n    return super.getSubBalanceOperatorAccess(addr);\\n  }\\n\\n  function getScaleIndex() public view override returns (uint256) {\\n    return _pool.getReserveNormalizedIncome(_underlyingAsset);\\n  }\\n\\n  function mint(\\n    address user,\\n    uint256 amount,\\n    uint256 index,\\n    bool repayOverdraft\\n  ) external override onlyLendingPool returns (bool firstBalance) {\\n    uint256 amountScaled = amount.rayDiv(index);\\n    require(amountScaled != 0, Errors.CT_INVALID_MINT_AMOUNT);\\n\\n    firstBalance = _mintToSubBalance(user, amountScaled, repayOverdraft);\\n\\n    _mintBalance(user, amountScaled, index);\\n    emit Transfer(address(0), user, amount);\\n    emit Mint(user, amount, index);\\n\\n    return firstBalance;\\n  }\\n\\n  function mintToTreasury(uint256 amount, uint256 index) external override onlyLendingPool {\\n    if (amount == 0) {\\n      return;\\n    }\\n\\n    address treasury = _treasury;\\n\\n    // Compared to the normal mint, we don't check for rounding errors.\\n    // The treasury may experience a very small loss, but it wont revert a valid transactions.\\n    _mintBalance(treasury, amount.rayDiv(index), index);\\n\\n    emit Transfer(address(0), treasury, amount);\\n    emit Mint(treasury, amount, index);\\n  }\\n\\n  function burn(\\n    address user,\\n    address receiverOfUnderlying,\\n    uint256 amount,\\n    uint256 index\\n  ) external override onlyLendingPool {\\n    uint256 amountScaled = amount.rayDiv(index);\\n    require(amountScaled != 0, Errors.CT_INVALID_BURN_AMOUNT);\\n    _burnBalance(user, amountScaled, getMinBalance(user), index);\\n\\n    IERC20(_underlyingAsset).safeTransfer(receiverOfUnderlying, amount);\\n\\n    emit Transfer(user, address(0), amount);\\n    emit Burn(user, receiverOfUnderlying, amount, index);\\n  }\\n\\n  function transferOnLiquidation(\\n    address user,\\n    address receiver,\\n    uint256 amount,\\n    uint256 index,\\n    bool transferUnderlying\\n  ) external override onlyLendingPool returns (bool) {\\n    uint256 scaledAmount = amount.rayDiv(index);\\n    if (scaledAmount == 0) {\\n      return false;\\n    }\\n\\n    (bool firstBalance, uint256 outBalance) = _liquidateWithSubBalance(\\n      user,\\n      receiver,\\n      scaledAmount,\\n      index,\\n      transferUnderlying\\n    );\\n\\n    if (transferUnderlying) {\\n      // Burn the equivalent amount of tokens, sending the underlying to the liquidator\\n      _burnBalance(user, scaledAmount, outBalance, index);\\n      IERC20(_underlyingAsset).safeTransfer(receiver, amount);\\n\\n      emit Transfer(user, address(0), amount);\\n      emit Burn(user, receiver, amount, index);\\n      return false;\\n    }\\n\\n    super._transferBalance(user, receiver, scaledAmount, outBalance, index);\\n\\n    emit Transfer(user, receiver, amount);\\n    emit BalanceTransfer(user, receiver, amount, index);\\n    return firstBalance;\\n  }\\n\\n  /// @dev Calculates the balance of the user: principal balance + interest generated by the principal\\n  function balanceOf(address user) public view override returns (uint256) {\\n    uint256 scaledBalance = scaledBalanceOf(user);\\n    if (scaledBalance == 0) {\\n      return 0;\\n    }\\n    return scaledBalanceOf(user).rayMul(getScaleIndex());\\n  }\\n\\n  function rewardedBalanceOf(address user) external view override returns (uint256) {\\n    return internalBalanceOf(user).rayMul(getScaleIndex());\\n  }\\n\\n  function getScaledUserBalanceAndSupply(address user) external view override returns (uint256, uint256) {\\n    return (scaledBalanceOf(user), scaledTotalSupply());\\n  }\\n\\n  function totalSupply() public view override returns (uint256) {\\n    uint256 currentSupplyScaled = scaledTotalSupply();\\n    if (currentSupplyScaled == 0) {\\n      return 0;\\n    }\\n    return currentSupplyScaled.rayMul(getScaleIndex());\\n  }\\n\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(msg.sender, recipient, amount, getScaleIndex());\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount, getScaleIndex());\\n    _approveTransferFrom(sender, amount);\\n    return true;\\n  }\\n\\n  function transferUnderlyingTo(address target, uint256 amount) external override onlyLendingPool returns (uint256) {\\n    IERC20(_underlyingAsset).safeTransfer(target, amount);\\n    return amount;\\n  }\\n\\n  /**\\n   * @dev Validates and executes a transfer.\\n   * @param from The source address\\n   * @param to The destination address\\n   * @param amount The amount getting transferred\\n   **/\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 index\\n  ) private {\\n    uint256 scaledAmount = amount.rayDiv(index);\\n    (uint256 scaledBalanceBeforeFrom, uint256 flags) = internalBalanceAndFlagsOf(from);\\n\\n    _transferAndFinalize(from, to, scaledAmount, getMinBalance(from, flags), index, scaledBalanceBeforeFrom);\\n\\n    emit Transfer(from, to, amount);\\n    emit BalanceTransfer(from, to, amount, index);\\n  }\\n\\n  function _transferScaled(\\n    address from,\\n    address to,\\n    uint256 scaledAmount,\\n    uint256 minBalance,\\n    uint256 index\\n  ) internal override {\\n    _transferAndFinalize(from, to, scaledAmount, minBalance, index, internalBalanceOf(from));\\n\\n    uint256 amount = scaledAmount.rayMul(index);\\n    emit Transfer(from, to, amount);\\n    emit BalanceTransfer(from, to, amount, index);\\n  }\\n\\n  function _transferAndFinalize(\\n    address from,\\n    address to,\\n    uint256 scaledAmount,\\n    uint256 minBalance,\\n    uint256 index,\\n    uint256 scaledBalanceBeforeFrom\\n  ) private {\\n    uint256 scaledBalanceBeforeTo = internalBalanceOf(to);\\n    super._transferBalance(from, to, scaledAmount, minBalance, index);\\n\\n    _pool.finalizeTransfer(\\n      _underlyingAsset,\\n      from,\\n      to,\\n      scaledAmount > 0 && scaledBalanceBeforeFrom == scaledAmount,\\n      scaledAmount > 0 && scaledBalanceBeforeTo == 0\\n    );\\n  }\\n\\n  function _ensureHealthFactor(address holder) internal override {\\n    _pool.finalizeTransfer(_underlyingAsset, holder, holder, false, false);\\n  }\\n\\n  function _approveByPermit(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal override {\\n    _approve(owner, spender, amount);\\n  }\\n\\n  function _getPermitDomainName() internal view override returns (bytes memory) {\\n    return bytes(super.name());\\n  }\\n\\n  function internalPause(bool paused) internal override {\\n    super.internalPause(paused);\\n    _pool.setReservePaused(_underlyingAsset, paused);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport './IERC20.sol';\\nimport './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDepositToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport './IScaledBalanceToken.sol';\\nimport './IPoolToken.sol';\\n\\ninterface IDepositToken is IERC20, IPoolToken, IScaledBalanceToken {\\n  /**\\n   * @dev Emitted on mint\\n   * @param account The receiver of minted tokens\\n   * @param value The amount minted\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Mint(address indexed account, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Mints `amount` depositTokens to `user`\\n   * @param user The address receiving the minted tokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   * @param repayOverdraft Enables to use this amount cover an overdraft\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(\\n    address user,\\n    uint256 amount,\\n    uint256 index,\\n    bool repayOverdraft\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted on burn\\n   * @param account The owner of tokens burned\\n   * @param target The receiver of the underlying\\n   * @param value The amount burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Burn(address indexed account, address indexed target, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Emitted on transfer\\n   * @param from The sender\\n   * @param to The recipient\\n   * @param value The amount transferred\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Burns depositTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @param user The owner of the depositTokens, getting them burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  function burn(\\n    address user,\\n    address receiverOfUnderlying,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Mints depositTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @dev Transfers depositTokens in the event of a borrow being liquidated, in case the liquidators reclaims the depositToken\\n   * @param from The address getting liquidated, current owner of the depositTokens\\n   * @param to The recipient\\n   * @param value The amount of tokens getting transferred\\n   * @param index The liquidity index of the reserve\\n   * @param transferUnderlying is true when the underlying should be, otherwise the depositToken\\n   * @return true when transferUnderlying is false and the recipient had zero balance\\n   **/\\n  function transferOnLiquidation(\\n    address from,\\n    address to,\\n    uint256 value,\\n    uint256 index,\\n    bool transferUnderlying\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n   * assets in borrow(), withdraw() and flashLoan()\\n   * @param user The recipient of the underlying\\n   * @param amount The amount getting transferred\\n   * @return The amount transferred\\n   **/\\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n  function collateralBalanceOf(address) external view returns (uint256);\\n\\n  /**\\n   * @dev Emitted on use of overdraft (by liquidation)\\n   * @param account The receiver of overdraft (user with shortage)\\n   * @param value The amount received\\n   * @param index The liquidity index of the reserve\\n   **/\\n  event OverdraftApplied(address indexed account, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Emitted on return of overdraft allowance when it was fully or partially used\\n   * @param provider The provider of overdraft\\n   * @param recipient The receiver of overdraft\\n   * @param overdraft The amount overdraft that was covered by the provider\\n   * @param index The liquidity index of the reserve\\n   **/\\n  event OverdraftCovered(address indexed provider, address indexed recipient, uint256 overdraft, uint256 index);\\n\\n  event SubBalanceProvided(address indexed provider, address indexed recipient, uint256 amount, uint256 index);\\n  event SubBalanceReturned(address indexed provider, address indexed recipient, uint256 amount, uint256 index);\\n  event SubBalanceLocked(address indexed provider, uint256 amount, uint256 index);\\n  event SubBalanceUnlocked(address indexed provider, uint256 amount, uint256 index);\\n\\n  function updateTreasury() external;\\n\\n  function addSubBalanceOperator(address addr) external;\\n\\n  function addStakeOperator(address addr) external;\\n\\n  function removeSubBalanceOperator(address addr) external;\\n\\n  function provideSubBalance(\\n    address provider,\\n    address recipient,\\n    uint256 scaledAmount\\n  ) external;\\n\\n  function returnSubBalance(\\n    address provider,\\n    address recipient,\\n    uint256 scaledAmount,\\n    bool preferOverdraft\\n  ) external returns (uint256 coveredOverdraft);\\n\\n  function lockSubBalance(address provider, uint256 scaledAmount) external;\\n\\n  function unlockSubBalance(\\n    address provider,\\n    uint256 scaledAmount,\\n    address transferTo\\n  ) external;\\n\\n  function replaceSubBalance(\\n    address prevProvider,\\n    address recipient,\\n    uint256 prevScaledAmount,\\n    address newProvider,\\n    uint256 newScaledAmount\\n  ) external returns (uint256 coveredOverdraftByPrevProvider);\\n\\n  function transferLockedBalance(\\n    address from,\\n    address to,\\n    uint256 scaledAmount\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/tools/math/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../Errors.sol';\\n\\n/// @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /// @return One ray, 1e27\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /// @return One wad, 1e18\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /// @return Half ray, 1e27/2\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /// @return Half ray, 1e18/2\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /// @dev Multiplies two wad, rounding half up to the nearest wad\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    require(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /// @dev Divides two wad, rounding half up to the nearest wad\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /// @dev Multiplies two ray, rounding half up to the nearest ray\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /// @dev Divides two ray, rounding half up to the nearest ray\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /// @dev Casts ray down to wad\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n\\n    require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /// @dev Converts wad up to ray\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n\\n    require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return result;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/math/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../Errors.sol';\\n\\n/// @dev Percentages are defined in basis points. The precision is indicated by ONE. Operations are rounded half up.\\nlibrary PercentageMath {\\n  uint16 public constant BP = 1; // basis point\\n  uint16 public constant PCT = 100 * BP; // basis points per percentage point\\n  uint16 public constant ONE = 100 * PCT; // basis points per 1 (100%)\\n  uint16 public constant HALF_ONE = ONE / 2;\\n  // deprecated\\n  uint256 public constant PERCENTAGE_FACTOR = ONE; //percentage plus two decimals\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param factor Basis points of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 factor) internal pure returns (uint256) {\\n    if (value == 0 || factor == 0) {\\n      return 0;\\n    }\\n\\n    require(value <= (type(uint256).max - HALF_ONE) / factor, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * factor + HALF_ONE) / ONE;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param factor Basis points of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 factor) internal pure returns (uint256) {\\n    require(factor != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfFactor = factor >> 1;\\n\\n    require(value <= (type(uint256).max - halfFactor) / ONE, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * ONE + halfFactor) / factor;\\n  }\\n\\n  function percentOf(uint256 value, uint256 base) internal pure returns (uint256) {\\n    require(base != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    if (value == 0) {\\n      return 0;\\n    }\\n\\n    require(value <= (type(uint256).max - HALF_ONE) / ONE, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * ONE + (base >> 1)) / base;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/tokens/ERC20Events.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface ERC20Events {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessFlags.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nlibrary AccessFlags {\\n  // roles that can be assigned to multiple addresses - use range [0..15]\\n  uint256 public constant EMERGENCY_ADMIN = 1 << 0;\\n  uint256 public constant POOL_ADMIN = 1 << 1;\\n  uint256 public constant TREASURY_ADMIN = 1 << 2;\\n  uint256 public constant REWARD_CONFIG_ADMIN = 1 << 3;\\n  uint256 public constant REWARD_RATE_ADMIN = 1 << 4;\\n  uint256 public constant STAKE_ADMIN = 1 << 5;\\n  uint256 public constant REFERRAL_ADMIN = 1 << 6;\\n  uint256 public constant LENDING_RATE_ADMIN = 1 << 7;\\n  uint256 public constant SWEEP_ADMIN = 1 << 8;\\n  uint256 public constant ORACLE_ADMIN = 1 << 9;\\n\\n  uint256 public constant ROLES = (uint256(1) << 16) - 1;\\n\\n  // singletons - use range [16..64] - can ONLY be assigned to a single address\\n  uint256 public constant SINGLETONS = ((uint256(1) << 64) - 1) & ~ROLES;\\n\\n  // proxied singletons\\n  uint256 public constant LENDING_POOL = 1 << 16;\\n  uint256 public constant LENDING_POOL_CONFIGURATOR = 1 << 17;\\n  uint256 public constant LIQUIDITY_CONTROLLER = 1 << 18;\\n  uint256 public constant TREASURY = 1 << 19;\\n  uint256 public constant REWARD_TOKEN = 1 << 20;\\n  uint256 public constant REWARD_STAKE_TOKEN = 1 << 21;\\n  uint256 public constant REWARD_CONTROLLER = 1 << 22;\\n  uint256 public constant REWARD_CONFIGURATOR = 1 << 23;\\n  uint256 public constant STAKE_CONFIGURATOR = 1 << 24;\\n  uint256 public constant REFERRAL_REGISTRY = 1 << 25;\\n\\n  uint256 public constant PROXIES = ((uint256(1) << 26) - 1) & ~ROLES;\\n\\n  // non-proxied singletons, numbered down from 31 (as JS has problems with bitmasks over 31 bits)\\n  uint256 public constant WETH_GATEWAY = 1 << 27;\\n  uint256 public constant DATA_HELPER = 1 << 28;\\n  uint256 public constant PRICE_ORACLE = 1 << 29;\\n  uint256 public constant LENDING_RATE_ORACLE = 1 << 30;\\n\\n  // any other roles - use range [64..]\\n  // these roles can be assigned to multiple addresses\\n\\n  uint256 public constant TRUSTED_FLASHLOAN = 1 << 66;\\n}\\n\"\r\n    },\r\n    \"contracts/tools/tokens/ERC20PermitBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IERC20WithPermit.sol';\\n\\nabstract contract ERC20PermitBase is IERC20WithPermit {\\n  // solhint-disable-next-line var-name-mixedcase\\n  bytes32 public DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_REVISION = bytes('1');\\n  bytes32 internal constant EIP712_DOMAIN =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /// @dev owner => next valid nonce to submit with permit()\\n  /// keep public for backward compatibility\\n  mapping(address => uint256) public _nonces;\\n\\n  constructor() {\\n    _initializeDomainSeparator();\\n  }\\n\\n  /// @dev returns nonce, to comply with eip-2612\\n  function nonces(address addr) external view returns (uint256) {\\n    return _nonces[addr];\\n  }\\n\\n  function _initializeDomainSeparator() internal {\\n    uint256 chainId;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(EIP712_DOMAIN, keccak256(_getPermitDomainName()), keccak256(EIP712_REVISION), chainId, address(this))\\n    );\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\n        '\\\\x19\\\\x01',\\n        DOMAIN_SEPARATOR,\\n        keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n      )\\n    );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce + 1;\\n    _approveByPermit(owner, spender, value);\\n  }\\n\\n  function _approveByPermit(\\n    address owner,\\n    address spender,\\n    uint256 value\\n  ) internal virtual;\\n\\n  function _getPermitDomainName() internal view virtual returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/tools/tokens/ERC20AllowanceBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../dependencies/openzeppelin/contracts/IERC20.sol';\\n\\nabstract contract ERC20AllowanceBase is IERC20 {\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n    return _allowances[owner][spender];\\n  }\\n\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\n    return true;\\n  }\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n    _decAllowance(msg.sender, spender, subtractedValue, 'ERC20: decreased allowance below zero');\\n    return true;\\n  }\\n\\n  function useAllowance(address owner, uint256 subtractedValue) public virtual returns (bool) {\\n    _decAllowance(owner, msg.sender, subtractedValue, 'ERC20: decreased allowance below zero');\\n    return true;\\n  }\\n\\n  function _decAllowance(\\n    address owner,\\n    address spender,\\n    uint256 subtractedValue,\\n    string memory errMsg\\n  ) private {\\n    uint256 limit = _allowances[owner][spender];\\n    require(limit >= subtractedValue, errMsg);\\n    unchecked {\\n      _approve(owner, spender, limit - subtractedValue);\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n   *\\n   * This is internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  function _approveTransferFrom(address owner, uint256 amount) internal virtual {\\n    _decAllowance(owner, msg.sender, amount, 'ERC20: transfer amount exceeds allowance');\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/tokenization/base/SubBalanceBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../../dependencies/openzeppelin/contracts/SafeERC20.sol';\\nimport '../../../interfaces/IDepositToken.sol';\\nimport '../../../tools/Errors.sol';\\nimport '../../../tools/math/WadRayMath.sol';\\nimport '../../../tools/math/PercentageMath.sol';\\nimport '../../../tools/tokens/ERC20Events.sol';\\nimport '../../../access/AccessFlags.sol';\\nimport '../../../tools/tokens/ERC20PermitBase.sol';\\nimport '../../../tools/tokens/ERC20AllowanceBase.sol';\\nimport './RewardedTokenBase.sol';\\n\\nabstract contract SubBalanceBase is IDepositToken, RewardedTokenBase {\\n  using WadRayMath for uint256;\\n  using PercentageMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  uint32 private constant FLAG_OUT_BALANCE = 1 << 0;\\n  uint32 private constant FLAG_ALLOW_OVERDRAFT = 1 << 1;\\n  uint32 private constant FLAG_IN_BALANCE = 1 << 2;\\n\\n  struct InBalance {\\n    uint128 allowance;\\n    uint128 overdraft;\\n  }\\n\\n  struct OutBalance {\\n    uint128 outBalance;\\n  }\\n\\n  uint8 internal constant ACCESS_SUB_BALANCE = uint8(1) << 0;\\n  uint8 internal constant ACCESS_LOCK_BALANCE = uint8(1) << 1;\\n  uint8 internal constant ACCESS_TRANSFER = uint8(1) << 2;\\n\\n  mapping(address => uint8) private _subBalanceOperators;\\n  mapping(address => OutBalance) private _outBalances;\\n  mapping(address => InBalance) private _inBalances;\\n  uint256 private _totalOverdraft;\\n  uint16 private _overdraftTolerancePct = PercentageMath.HALF_ONE;\\n\\n  function internalSetOverdraftTolerancePct(uint16 overdraftTolerancePct) internal {\\n    require(overdraftTolerancePct <= PercentageMath.ONE);\\n    _overdraftTolerancePct = overdraftTolerancePct;\\n  }\\n\\n  function _addSubBalanceOperator(address addr, uint8 accessMode) internal {\\n    require(addr != address(0), 'address is required');\\n    _subBalanceOperators[addr] |= accessMode;\\n  }\\n\\n  function _removeSubBalanceOperator(address addr) internal {\\n    delete (_subBalanceOperators[addr]);\\n  }\\n\\n  function getSubBalanceOperatorAccess(address addr) internal view virtual returns (uint8) {\\n    return _subBalanceOperators[addr];\\n  }\\n\\n  function getScaleIndex() public view virtual override returns (uint256);\\n\\n  function _onlySubBalanceOperator(uint8 requiredMode) private view returns (uint8 accessMode) {\\n    accessMode = getSubBalanceOperatorAccess(msg.sender);\\n    require(accessMode & requiredMode != 0, Errors.AT_SUB_BALANCE_RESTIRCTED_FUNCTION);\\n    return accessMode;\\n  }\\n\\n  modifier onlySubBalanceOperator() {\\n    _onlySubBalanceOperator(ACCESS_SUB_BALANCE);\\n    _;\\n  }\\n\\n  function provideSubBalance(\\n    address provider,\\n    address recipient,\\n    uint256 scaledAmount\\n  ) external override onlySubBalanceOperator {\\n    require(recipient != address(0), Errors.VL_INVALID_SUB_BALANCE_ARGS);\\n    _checkSubBalanceArgs(provider, recipient, scaledAmount);\\n\\n    _incrementOutBalance(provider, scaledAmount);\\n    _incrementInBalance(recipient, scaledAmount);\\n\\n    uint256 index = getScaleIndex();\\n    emit SubBalanceProvided(provider, recipient, scaledAmount.rayMul(index), index);\\n  }\\n\\n  function lockSubBalance(address provider, uint256 scaledAmount) external override {\\n    _onlySubBalanceOperator(ACCESS_LOCK_BALANCE);\\n    _checkSubBalanceArgs(provider, address(0), scaledAmount);\\n\\n    _incrementOutBalance(provider, scaledAmount);\\n\\n    uint256 index = getScaleIndex();\\n    emit SubBalanceLocked(provider, scaledAmount.rayMul(index), index);\\n  }\\n\\n  function _incrementOutBalance(address provider, uint256 scaledAmount) private {\\n    _incrementOutBalanceNoCheck(provider, scaledAmount);\\n    _ensureHealthFactor(provider);\\n  }\\n\\n  function _incrementOutBalanceNoCheck(address provider, uint256 scaledAmount) private {\\n    (uint256 balance, uint32 flags) = internalBalanceAndFlagsOf(provider);\\n    uint256 outBalance = scaledAmount + _outBalances[provider].outBalance;\\n\\n    require(outBalance <= balance, Errors.VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE);\\n    require(outBalance <= type(uint128).max, 'balance is too high');\\n\\n    _outBalances[provider].outBalance = uint128(outBalance);\\n\\n    if (flags & FLAG_OUT_BALANCE == 0) {\\n      internalSetFlagsOf(provider, flags | FLAG_OUT_BALANCE);\\n    }\\n\\n    _ensureHealthFactor(provider);\\n  }\\n\\n  function _ensureHealthFactor(address provider) internal virtual;\\n\\n  function _decrementOutBalance(\\n    address provider,\\n    uint256 scaledAmount,\\n    uint256 coveredOverdraft,\\n    uint256 index\\n  ) private returns (uint256) {\\n    uint256 outBalance = uint256(_outBalances[provider].outBalance) - scaledAmount;\\n\\n    if (coveredOverdraft > 0) {\\n      // A provider of overdraft is not know when overdraft is applied, so there is an excess of tokens minted at that time.\\n      // So this excess of tokens will be burned here.\\n      _burnBalance(provider, coveredOverdraft, outBalance, index);\\n    }\\n    _outBalances[provider].outBalance = uint128(outBalance);\\n\\n    if (outBalance == 0) {\\n      (, uint32 flags) = internalBalanceAndFlagsOf(provider);\\n      internalSetFlagsOf(provider, flags & ~FLAG_OUT_BALANCE);\\n    }\\n    return outBalance;\\n  }\\n\\n  function _incrementInBalance(address recipient, uint256 scaledAmount) private {\\n    (, uint32 flags) = internalBalanceAndFlagsOf(recipient);\\n    require(flags & FLAG_ALLOW_OVERDRAFT != 0, Errors.AT_OVERDRAFT_DISABLED);\\n    scaledAmount += _inBalances[recipient].allowance;\\n\\n    require(scaledAmount <= type(uint128).max, 'balance is too high');\\n    _inBalances[recipient].allowance = uint128(scaledAmount);\\n\\n    if (flags & FLAG_IN_BALANCE == 0) {\\n      internalSetFlagsOf(recipient, flags | FLAG_IN_BALANCE);\\n    }\\n  }\\n\\n  function _decrementInBalance(\\n    address recipient,\\n    uint256 scaledAmount,\\n    bool preferOverdraft\\n  ) private returns (uint256 overdraft) {\\n    InBalance memory inBalance = _inBalances[recipient];\\n\\n    if (\\n      inBalance.overdraft > 0 &&\\n      (scaledAmount > inBalance.allowance ||\\n        (preferOverdraft && inBalance.overdraft >= scaledAmount.percentMul(_overdraftTolerancePct)))\\n    ) {\\n      if (inBalance.overdraft > scaledAmount) {\\n        overdraft = uint128(scaledAmount);\\n        unchecked {\\n          inBalance.overdraft -= uint128(scaledAmount);\\n        }\\n      } else {\\n        overdraft = inBalance.overdraft;\\n        inBalance.overdraft = 0;\\n      }\\n      _totalOverdraft -= overdraft;\\n    }\\n    inBalance.allowance = uint128(uint256(inBalance.allowance) - (scaledAmount - overdraft));\\n\\n    _inBalances[recipient] = inBalance;\\n    if (inBalance.allowance == 0) {\\n      (, uint32 flags) = internalBalanceAndFlagsOf(recipient);\\n      internalSetFlagsOf(recipient, flags & ~FLAG_IN_BALANCE);\\n    }\\n  }\\n\\n  function _checkSubBalanceArgs(\\n    address provider,\\n    address recipient,\\n    uint256 scaledAmount\\n  ) private pure {\\n    require(scaledAmount > 0, Errors.VL_INVALID_SUB_BALANCE_ARGS);\\n    require(provider != address(0) && provider != recipient, Errors.VL_INVALID_SUB_BALANCE_ARGS);\\n  }\\n\\n  function replaceSubBalance(\\n    address prevProvider,\\n    address recipient,\\n    uint256 prevScaledAmount,\\n    address newProvider,\\n    uint256 newScaledAmount\\n  ) external override onlySubBalanceOperator returns (uint256) {\\n    require(recipient != address(0), Errors.VL_INVALID_SUB_BALANCE_ARGS);\\n    _checkSubBalanceArgs(prevProvider, recipient, prevScaledAmount);\\n\\n    if (prevProvider != newProvider) {\\n      _checkSubBalanceArgs(newProvider, recipient, newScaledAmount);\\n      _incrementOutBalance(newProvider, newScaledAmount);\\n    } else if (prevScaledAmount == newScaledAmount) {\\n      return 0;\\n    }\\n\\n    uint256 overdraft;\\n    uint256 delta;\\n    uint256 compensation;\\n    if (prevScaledAmount > newScaledAmount) {\\n      unchecked {\\n        delta = prevScaledAmount - newScaledAmount;\\n      }\\n      overdraft = _decrementInBalance(recipient, delta, true);\\n      if (delta > overdraft) {\\n        unchecked {\\n          compensation = delta - overdraft;\\n        }\\n      }\\n    } else if (prevScaledAmount < newScaledAmount) {\\n      unchecked {\\n        delta = newScaledAmount - prevScaledAmount;\\n      }\\n      _incrementInBalance(recipient, delta);\\n    }\\n\\n    uint256 index = getScaleIndex();\\n    emit SubBalanceReturned(prevProvider, recipient, prevScaledAmount.rayMul(index), index);\\n\\n    uint256 outBalance;\\n    if (prevProvider != newProvider) {\\n      outBalance = _decrementOutBalance(prevProvider, prevScaledAmount, overdraft, index);\\n    } else if (prevScaledAmount > newScaledAmount) {\\n      outBalance = _decrementOutBalance(prevProvider, delta, overdraft, index);\\n    } else {\\n      _incrementOutBalance(newProvider, delta);\\n    }\\n\\n    if (overdraft > 0) {\\n      emit OverdraftCovered(prevProvider, recipient, uint256(overdraft).rayMul(index), index);\\n    }\\n    emit SubBalanceProvided(newProvider, recipient, newScaledAmount.rayMul(index), index);\\n\\n    if (compensation > 0) {\\n      _transferScaled(prevProvider, recipient, compensation, outBalance, index);\\n    }\\n\\n    return overdraft;\\n  }\\n\\n  function returnSubBalance(\\n    address provider,\\n    address recipient,\\n    uint256 scaledAmount,\\n    bool preferOverdraft\\n  ) external override onlySubBalanceOperator returns (uint256) {\\n    require(recipient != address(0), Errors.VL_INVALID_SUB_BALANCE_ARGS);\\n    _checkSubBalanceArgs(provider, recipient, scaledAmount);\\n\\n    uint256 overdraft = _decrementInBalance(recipient, scaledAmount, preferOverdraft);\\n    _ensureHealthFactor(recipient);\\n\\n    uint256 index = getScaleIndex();\\n    _decrementOutBalance(provider, scaledAmount, overdraft, index);\\n    if (overdraft > 0) {\\n      emit OverdraftCovered(provider, recipient, uint256(overdraft).rayMul(index), index);\\n    }\\n\\n    emit SubBalanceReturned(provider, recipient, scaledAmount.rayMul(index), index);\\n    return overdraft;\\n  }\\n\\n  function unlockSubBalance(\\n    address provider,\\n    uint256 scaledAmount,\\n    address transferTo\\n  ) external override {\\n    uint8 accessMode = _onlySubBalanceOperator(ACCESS_LOCK_BALANCE);\\n\\n    _checkSubBalanceArgs(provider, address(0), scaledAmount);\\n\\n    uint256 index = getScaleIndex();\\n    uint256 outBalance = _decrementOutBalance(provider, scaledAmount, 0, index);\\n\\n    emit SubBalanceUnlocked(provider, scaledAmount.rayMul(index), index);\\n\\n    if (transferTo != address(0) && transferTo != provider) {\\n      require(accessMode & ACCESS_TRANSFER != 0, Errors.AT_SUB_BALANCE_RESTIRCTED_FUNCTION);\\n      _transferScaled(provider, transferTo, scaledAmount, outBalance, index);\\n    }\\n  }\\n\\n  function transferLockedBalance(\\n    address from,\\n    address to,\\n    uint256 scaledAmount\\n  ) external override {\\n    _onlySubBalanceOperator(ACCESS_LOCK_BALANCE | ACCESS_SUB_BALANCE);\\n    require(from != address(0) || to != address(0), Errors.VL_INVALID_SUB_BALANCE_ARGS);\\n    if (scaledAmount == 0) {\\n      return;\\n    }\\n\\n    uint256 index = getScaleIndex();\\n    uint256 amount = scaledAmount.rayMul(index);\\n\\n    _decrementOutBalance(from, scaledAmount, 0, index);\\n    emit SubBalanceUnlocked(from, amount, index);\\n\\n    _transferScaled(from, to, scaledAmount, 0, index);\\n\\n    _incrementOutBalanceNoCheck(to, scaledAmount);\\n    emit SubBalanceLocked(to, amount, index);\\n  }\\n\\n  function _mintToSubBalance(\\n    address user,\\n    uint256 amountScaled,\\n    bool repayOverdraft\\n  ) internal returns (bool) {\\n    require(amountScaled != 0, Errors.CT_INVALID_MINT_AMOUNT);\\n\\n    (uint256 firstBalance, uint32 flags) = internalBalanceAndFlagsOf(user);\\n    if (repayOverdraft && flags & FLAG_IN_BALANCE != 0) {\\n      InBalance memory inBalance = _inBalances[user];\\n\\n      if (inBalance.overdraft > 0) {\\n        unchecked {\\n          if (inBalance.overdraft >= amountScaled) {\\n            inBalance.overdraft -= uint128(amountScaled);\\n            _inBalances[user] = inBalance;\\n            return firstBalance == 0;\\n          }\\n          amountScaled -= inBalance.overdraft;\\n        }\\n        inBalance.overdraft = 0;\\n        _inBalances[user] = inBalance;\\n      }\\n    }\\n    return firstBalance == 0;\\n  }\\n\\n  function _liquidateWithSubBalance(\\n    address user,\\n    address receiver,\\n    uint256 scaledAmount,\\n    uint256 index,\\n    bool transferUnderlying\\n  ) internal returns (bool firstBalance, uint256 outBalance) {\\n    firstBalance = internalBalanceOf(receiver) == 0;\\n    (uint256 scaledBalanceFrom, uint32 flags) = internalBalanceAndFlagsOf(user);\\n\\n    if (flags & FLAG_OUT_BALANCE != 0) {\\n      outBalance = _outBalances[user].outBalance;\\n    }\\n\\n    if (flags & FLAG_IN_BALANCE != 0 && scaledAmount + outBalance > scaledBalanceFrom) {\\n      // lack of own funds - use overdraft\\n\\n      uint256 requiredAmount;\\n      unchecked {\\n        requiredAmount = scaledAmount + outBalance - scaledBalanceFrom;\\n      }\\n\\n      InBalance memory inBalance = _inBalances[user];\\n      if (inBalance.allowance > requiredAmount) {\\n        unchecked {\\n          inBalance.allowance -= uint128(requiredAmount);\\n        }\\n        inBalance.overdraft += uint128(requiredAmount);\\n      } else {\\n        inBalance.overdraft += inBalance.allowance;\\n        requiredAmount = inBalance.allowance;\\n        inBalance.allowance = 0;\\n      }\\n\\n      scaledAmount -= requiredAmount;\\n      if (!transferUnderlying) {\\n        // A provider of overdraft is not known here and tokens cant be transferred from it.\\n        // So new tokens will be minted here for liquidator and existing tokens will\\n        // be burned when the provider will return its sub-balance.\\n        //\\n        // But the totalSupply will remain unchanged as it is reduced by _totalOverdraft.\\n\\n        _mintBalance(receiver, requiredAmount, index);\\n        _totalOverdraft += requiredAmount;\\n\\n        emit OverdraftApplied(user, requiredAmount.rayMul(index), index);\\n      }\\n    }\\n  }\\n\\n  function getMinBalance(address user) internal view returns (uint256) {\\n    return _outBalances[user].outBalance;\\n  }\\n\\n  function getMinBalance(address user, uint256 flags) internal view returns (uint256) {\\n    return flags & FLAG_OUT_BALANCE != 0 ? _outBalances[user].outBalance : 0;\\n  }\\n\\n  function scaledBalanceOf(address user) public view override returns (uint256) {\\n    (uint256 userBalance, uint32 flags) = internalBalanceAndFlagsOf(user);\\n    if (userBalance == 0) {\\n      return 0;\\n    }\\n    if (flags & FLAG_OUT_BALANCE == 0) {\\n      return userBalance;\\n    }\\n\\n    return userBalance - _outBalances[user].outBalance;\\n  }\\n\\n  function scaledTotalSupply() public view override returns (uint256) {\\n    return super.totalSupply() - _totalOverdraft;\\n  }\\n\\n  function collateralBalanceOf(address user) public view override returns (uint256) {\\n    (uint256 userBalance, uint32 flags) = internalBalanceAndFlagsOf(user);\\n    if (flags & FLAG_OUT_BALANCE != 0) {\\n      // the out-balance can only be with own finds, hence it is subtracted before adding the in-balance\\n      userBalance -= _outBalances[user].outBalance;\\n    }\\n    if (flags & FLAG_IN_BALANCE != 0) {\\n      userBalance += _inBalances[user].allowance;\\n    }\\n    if (userBalance == 0) {\\n      return 0;\\n    }\\n    return userBalance.rayMul(getScaleIndex());\\n  }\\n\\n  function _transferScaled(\\n    address from,\\n    address to,\\n    uint256 scaledAmount,\\n    uint256 outBalance,\\n    uint256 index\\n  ) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP excluding events to avoid linearization issues.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// solhint-disable no-inline-assembly, avoid-low-level-calls\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize, which returns 0 for contracts in\\n    // construction, since the code is only stored at the end of the\\n    // constructor execution.\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(account)\\n    }\\n    return size > 0;\\n  }\\n\\n  bytes32 private constant accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n\\n  function isExternallyOwned(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    uint256 size;\\n    assembly {\\n      codehash := extcodehash(account)\\n      size := extcodesize(account)\\n    }\\n    return codehash == accountHash && size == 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using {ReentrancyGuard}.\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data.\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, 'Address: low-level call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, 'Address: insufficient balance for call');\\n    require(isContract(target), 'Address: call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, 'Address: low-level static call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), 'Address: static call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, 'Address: low-level delegate call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), 'Address: delegate call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IScaledBalanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled balance and the scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n\\n  function getScaleIndex() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IDerivedToken.sol';\\n\\n// solhint-disable func-name-mixedcase\\ninterface IPoolToken is IDerivedToken {\\n  function POOL() external view returns (address);\\n\\n  function updatePool() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDerivedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IDerivedToken {\\n  /**\\n   * @dev Returns the address of the underlying asset of this token (E.g. WETH for agWETH)\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/tools/tokens/IERC20WithPermit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../dependencies/openzeppelin/contracts/IERC20.sol';\\n\\ninterface IERC20WithPermit is IERC20 {\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/tokenization/base/RewardedTokenBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../../tools/Errors.sol';\\nimport '../../../reward/calcs/CalcLinearWeightedReward.sol';\\nimport '../../../reward/pools/ControlledRewardPool.sol';\\nimport '../../../reward/interfaces/IRewardController.sol';\\nimport '../../../reward/interfaces/IInitializableRewardPool.sol';\\nimport './PoolTokenBase.sol';\\n\\nabstract contract RewardedTokenBase is\\n  PoolTokenBase,\\n  CalcLinearWeightedReward,\\n  ControlledRewardPool,\\n  IInitializableRewardPool\\n{\\n  constructor() ControlledRewardPool(IRewardController(address(0)), 0, 0) {}\\n\\n  function internalTotalSupply() internal view override returns (uint256) {\\n    return super.internalGetTotalSupply();\\n  }\\n\\n  function internalBalanceOf(address account) internal view override returns (uint256) {\\n    return super.getRewardEntry(account).rewardBase;\\n  }\\n\\n  function internalBalanceAndFlagsOf(address account) internal view override returns (uint256, uint32) {\\n    RewardBalance memory balance = super.getRewardEntry(account);\\n    return (balance.rewardBase, balance.custom);\\n  }\\n\\n  function internalSetFlagsOf(address account, uint32 flags) internal override {\\n    super.internalSetRewardEntryCustom(account, flags);\\n  }\\n\\n  function internalSetIncentivesController(address) internal override {\\n    _mutable();\\n    _notSupported();\\n  }\\n\\n  function _notSupported() private pure {\\n    revert('UNSUPPORTED');\\n  }\\n\\n  function _mutable() private {}\\n\\n  function addRewardProvider(address, address) external view override onlyConfigAdmin {\\n    _notSupported();\\n  }\\n\\n  function removeRewardProvider(address provider) external override onlyConfigAdmin {}\\n\\n  function internalGetRate() internal view override returns (uint256) {\\n    return super.getLinearRate();\\n  }\\n\\n  function internalSetRate(uint256 rate) internal override {\\n    super.setLinearRate(rate);\\n  }\\n\\n  function getIncentivesController() public view override returns (address) {\\n    return address(this);\\n  }\\n\\n  function getCurrentTick() internal view override returns (uint32) {\\n    return uint32(block.timestamp);\\n  }\\n\\n  function internalGetReward(address holder)\\n    internal\\n    override\\n    returns (\\n      uint256,\\n      uint32,\\n      bool\\n    )\\n  {\\n    return doGetReward(holder);\\n  }\\n\\n  function internalCalcReward(address holder, uint32 at) internal view override returns (uint256, uint32) {\\n    return doCalcRewardAt(holder, at);\\n  }\\n\\n  function getAccessController() internal view override returns (IMarketAccessController) {\\n    return _remoteAcl;\\n  }\\n\\n  function internalAllocatedReward(\\n    address account,\\n    uint256 allocated,\\n    uint32 since,\\n    AllocationMode mode\\n  ) internal {\\n    if (allocated == 0) {\\n      if (mode == AllocationMode.Push || getRewardController() == address(0)) {\\n        return;\\n      }\\n    }\\n    super.internalAllocateReward(account, allocated, since, mode);\\n  }\\n\\n  function internalIncrementBalance(\\n    address account,\\n    uint256 amount,\\n    uint256\\n  ) internal override {\\n    (uint256 allocated, uint32 since, AllocationMode mode) = doIncrementRewardBalance(account, amount);\\n    internalAllocatedReward(account, allocated, since, mode);\\n  }\\n\\n  function internalDecrementBalance(\\n    address account,\\n    uint256 amount,\\n    uint256 minBalance,\\n    uint256\\n  ) internal override {\\n    // require(oldAccountBalance >= amount, 'ERC20: burn amount exceeds balance');\\n    (uint256 allocated, uint32 since, AllocationMode mode) = doDecrementRewardBalance(account, amount, minBalance);\\n    internalAllocatedReward(account, allocated, since, mode);\\n  }\\n\\n  function internalUpdateTotalSupply(uint256 newSupply) internal override {\\n    doUpdateTotalSupply(newSupply);\\n  }\\n\\n  function getPoolName() public view virtual override returns (string memory) {\\n    return super.symbol();\\n  }\\n\\n  function initializeRewardPool(InitRewardPoolData calldata config) external override onlyRewardConfiguratorOrAdmin {\\n    require(address(config.controller) != address(0));\\n    require(address(getRewardController()) == address(0));\\n    _initialize(IRewardController(config.controller), 0, config.baselinePercentage, config.poolName);\\n  }\\n\\n  function initializedRewardPoolWith() external view override returns (InitRewardPoolData memory) {\\n    return InitRewardPoolData(IRewardController(getRewardController()), getPoolName(), getBaselinePercentage());\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/reward/calcs/CalcLinearWeightedReward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './CalcLinearRewardBalances.sol';\\n\\nabstract contract CalcLinearWeightedReward is CalcLinearRewardBalances {\\n  uint256 private _accumRate;\\n  uint256 private _totalSupply;\\n\\n  uint256 private constant _maxWeightBase = 1e36;\\n\\n  function internalGetTotalSupply() internal view returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  function internalRateUpdated(\\n    uint256 lastRate,\\n    uint32 lastAt,\\n    uint32 at\\n  ) internal override {\\n    if (_totalSupply == 0) {\\n      return;\\n    }\\n\\n    // the rate is weighted now vs _maxWeightBase\\n    if (at != lastAt) {\\n      lastRate *= _maxWeightBase / _totalSupply;\\n      _accumRate += lastRate * (at - lastAt);\\n    }\\n  }\\n\\n  function doUpdateTotalSupply(uint256 newSupply) internal returns (bool) {\\n    if (newSupply == _totalSupply) {\\n      return false;\\n    }\\n    return internalSetTotalSupply(newSupply, getCurrentTick());\\n  }\\n\\n  function doIncrementTotalSupply(uint256 amount) internal {\\n    doUpdateTotalSupply(_totalSupply + amount);\\n  }\\n\\n  function doDecrementTotalSupply(uint256 amount) internal {\\n    doUpdateTotalSupply(_totalSupply - amount);\\n  }\\n\\n  function internalSetTotalSupply(uint256 totalSupply, uint32 at) internal returns (bool rateUpdated) {\\n    (uint256 lastRate, uint32 lastAt) = getRateAndUpdatedAt();\\n    internalMarkRateUpdate(at);\\n\\n    if (lastRate > 0) {\\n      internalRateUpdated(lastRate, lastAt, at);\\n      rateUpdated = lastAt != at;\\n    }\\n\\n    _totalSupply = totalSupply;\\n    return rateUpdated;\\n  }\\n\\n  function internalGetLastAccumRate() internal view returns (uint256) {\\n    return _accumRate;\\n  }\\n\\n  function internalCalcRateAndReward(\\n    RewardBalance memory entry,\\n    uint256 lastAccumRate,\\n    uint32 at\\n  )\\n    internal\\n    view\\n    virtual\\n    override\\n    returns (\\n      uint256 adjRate,\\n      uint256 allocated,\\n      uint32 /* since */\\n    )\\n  {\\n    adjRate = _accumRate;\\n\\n    if (_totalSupply > 0) {\\n      (uint256 rate, uint32 updatedAt) = getRateAndUpdatedAt();\\n\\n      rate *= _maxWeightBase / _totalSupply;\\n      adjRate += rate * (at - updatedAt);\\n    }\\n\\n    if (adjRate == lastAccumRate || entry.rewardBase == 0) {\\n      return (adjRate, 0, entry.claimedAt);\\n    }\\n\\n    allocated = (uint256(entry.rewardBase) * (adjRate - lastAccumRate)) / _maxWeightBase;\\n    return (adjRate, allocated, entry.claimedAt);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/reward/pools/ControlledRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../tools/math/PercentageMath.sol';\\nimport '../interfaces/IRewardController.sol';\\nimport '../interfaces/IManagedRewardPool.sol';\\nimport '../../access/AccessFlags.sol';\\nimport '../../access/AccessHelper.sol';\\nimport '../../tools/Errors.sol';\\n\\nabstract contract ControlledRewardPool is IManagedRewardPool {\\n  using PercentageMath for uint256;\\n\\n  IRewardController private _controller;\\n\\n  uint16 private _baselinePercentage;\\n  bool private _paused;\\n\\n  constructor(\\n    IRewardController controller,\\n    uint256 initialRate,\\n    uint16 baselinePercentage\\n  ) {\\n    _initialize(controller, initialRate, baselinePercentage, '');\\n  }\\n\\n  function _initialize(\\n    IRewardController controller,\\n    uint256 initialRate,\\n    uint16 baselinePercentage,\\n    string memory poolName\\n  ) internal virtual {\\n    poolName;\\n    _controller = controller;\\n\\n    if (baselinePercentage > 0) {\\n      _setBaselinePercentage(baselinePercentage);\\n    }\\n\\n    if (initialRate > 0) {\\n      _setRate(initialRate);\\n    }\\n  }\\n\\n  function getPoolName() public view virtual override returns (string memory) {\\n    return '';\\n  }\\n\\n  function updateBaseline(uint256 baseline)\\n    external\\n    virtual\\n    override\\n    onlyController\\n    returns (bool hasBaseline, uint256 appliedRate)\\n  {\\n    if (_baselinePercentage == 0) {\\n      return (false, internalGetRate());\\n    }\\n    appliedRate = baseline.percentMul(_baselinePercentage);\\n    _setRate(appliedRate);\\n    return (true, appliedRate);\\n  }\\n\\n  function setBaselinePercentage(uint16 factor) external override onlyController {\\n    _setBaselinePercentage(factor);\\n  }\\n\\n  function getBaselinePercentage() public view override returns (uint16) {\\n    return _baselinePercentage;\\n  }\\n\\n  function _mustHaveController() private view {\\n    require(address(_controller) != address(0), 'controller is required');\\n  }\\n\\n  function _setBaselinePercentage(uint16 factor) internal virtual {\\n    _mustHaveController();\\n    require(factor <= PercentageMath.ONE, 'illegal value');\\n    _baselinePercentage = factor;\\n    emit BaselinePercentageUpdated(factor);\\n  }\\n\\n  function _setRate(uint256 rate) internal {\\n    _mustHaveController();\\n    internalSetRate(rate);\\n    emit RateUpdated(rate);\\n  }\\n\\n  function getRate() external view override returns (uint256) {\\n    return internalGetRate();\\n  }\\n\\n  function internalGetRate() internal view virtual returns (uint256);\\n\\n  function internalSetRate(uint256 rate) internal virtual;\\n\\n  function setPaused(bool paused) public override onlyEmergencyAdmin {\\n    if (_paused != paused) {\\n      _paused = paused;\\n      internalPause(paused);\\n    }\\n    emit EmergencyPaused(msg.sender, paused);\\n  }\\n\\n  function isPaused() public view override returns (bool) {\\n    return _paused;\\n  }\\n\\n  function internalPause(bool paused) internal virtual {}\\n\\n  function getRewardController() public view override returns (address) {\\n    return address(_controller);\\n  }\\n\\n  function claimRewardFor(address holder)\\n    external\\n    override\\n    onlyController\\n    returns (\\n      uint256,\\n      uint32,\\n      bool\\n    )\\n  {\\n    return internalGetReward(holder);\\n  }\\n\\n  function claimRewardWithLimitFor(\\n    address holder,\\n    uint256 baseAmount,\\n    uint256 limit,\\n    uint16 minPct\\n  )\\n    external\\n    override\\n    onlyController\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull,\\n      uint256 newLimit\\n    )\\n  {\\n    return internalGetRewardWithLimit(holder, baseAmount, limit, minPct);\\n  }\\n\\n  function calcRewardFor(address holder, uint32 at)\\n    external\\n    view\\n    virtual\\n    override\\n    returns (\\n      uint256 amount,\\n      uint256,\\n      uint32 since\\n    )\\n  {\\n    require(at >= uint32(block.timestamp));\\n    (amount, since) = internalCalcReward(holder, at);\\n    return (amount, 0, since);\\n  }\\n\\n  function internalAllocateReward(\\n    address holder,\\n    uint256 allocated,\\n    uint32 since,\\n    AllocationMode mode\\n  ) internal {\\n    _controller.allocatedByPool(holder, allocated, since, mode);\\n  }\\n\\n  function internalGetRewardWithLimit(\\n    address holder,\\n    uint256 baseAmount,\\n    uint256 limit,\\n    uint16 minBoostPct\\n  )\\n    internal\\n    virtual\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull,\\n      uint256\\n    )\\n  {\\n    (amount, since, keepPull) = internalGetReward(holder);\\n    amount += baseAmount;\\n    if (minBoostPct > 0) {\\n      limit += PercentageMath.percentMul(amount, minBoostPct);\\n    }\\n    return (amount, since, keepPull, limit);\\n  }\\n\\n  function internalGetReward(address holder)\\n    internal\\n    virtual\\n    returns (\\n      uint256,\\n      uint32,\\n      bool\\n    );\\n\\n  function internalCalcReward(address holder, uint32 at) internal view virtual returns (uint256, uint32);\\n\\n  function attachedToRewardController() external override onlyController returns (uint256) {\\n    internalAttachedToRewardController();\\n    return internalGetPreAllocatedLimit();\\n  }\\n\\n  function detachedFromRewardController() external override onlyController returns (uint256) {\\n    return internalGetPreAllocatedLimit();\\n  }\\n\\n  function internalGetPreAllocatedLimit() internal virtual returns (uint256) {\\n    return 0;\\n  }\\n\\n  function internalAttachedToRewardController() internal virtual {}\\n\\n  function _isController(address addr) internal view virtual returns (bool) {\\n    return address(_controller) == addr;\\n  }\\n\\n  function getAccessController() internal view virtual returns (IMarketAccessController) {\\n    return _controller.getAccessController();\\n  }\\n\\n  function _onlyController() private view {\\n    require(_isController(msg.sender), Errors.CALLER_NOT_REWARD_CONTROLLER);\\n  }\\n\\n  modifier onlyController() {\\n    _onlyController();\\n    _;\\n  }\\n\\n  function _isConfigAdmin(address addr) internal view returns (bool) {\\n    return address(_controller) != address(0) && _controller.isConfigAdmin(addr);\\n  }\\n\\n  function _onlyConfigAdmin() private view {\\n    require(_isConfigAdmin(msg.sender), Errors.CALLER_NOT_REWARD_CONFIG_ADMIN);\\n  }\\n\\n  modifier onlyConfigAdmin() {\\n    _onlyConfigAdmin();\\n    _;\\n  }\\n\\n  function _isRateAdmin(address addr) internal view returns (bool) {\\n    return address(_controller) != address(0) && _controller.isRateAdmin(addr);\\n  }\\n\\n  function _onlyRateAdmin() private view {\\n    require(_isRateAdmin(msg.sender), Errors.CALLER_NOT_REWARD_RATE_ADMIN);\\n  }\\n\\n  modifier onlyRateAdmin() {\\n    _onlyRateAdmin();\\n    _;\\n  }\\n\\n  function _onlyEmergencyAdmin() private view {\\n    AccessHelper.requireAnyOf(\\n      getAccessController(),\\n      msg.sender,\\n      AccessFlags.EMERGENCY_ADMIN,\\n      Errors.CALLER_NOT_EMERGENCY_ADMIN\\n    );\\n  }\\n\\n  modifier onlyEmergencyAdmin() {\\n    _onlyEmergencyAdmin();\\n    _;\\n  }\\n\\n  function _notPaused() private view {\\n    require(!_paused, Errors.RW_REWARD_PAUSED);\\n  }\\n\\n  modifier notPaused() {\\n    _notPaused();\\n    _;\\n  }\\n\\n  modifier notPausedCustom(string memory err) {\\n    require(!_paused, err);\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IRewardController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../access/interfaces/IMarketAccessController.sol';\\n\\nenum AllocationMode {\\n  Push,\\n  SetPull,\\n  SetPullSpecial\\n}\\n\\ninterface IRewardController {\\n  function allocatedByPool(\\n    address holder,\\n    uint256 allocated,\\n    uint32 since,\\n    AllocationMode mode\\n  ) external;\\n\\n  function isRateAdmin(address) external view returns (bool);\\n\\n  function isConfigAdmin(address) external view returns (bool);\\n\\n  function getAccessController() external view returns (IMarketAccessController);\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IInitializableRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IRewardController.sol';\\n\\ninterface IInitializableRewardPool {\\n  struct InitRewardPoolData {\\n    IRewardController controller;\\n    string poolName;\\n    uint16 baselinePercentage;\\n  }\\n\\n  function initializeRewardPool(InitRewardPoolData calldata) external;\\n\\n  function initializedRewardPoolWith() external view returns (InitRewardPoolData memory);\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/tokenization/base/PoolTokenBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../../tools/Errors.sol';\\nimport '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport '../../../tools/tokens/ERC20DetailsBase.sol';\\nimport '../../../interfaces/IPoolToken.sol';\\nimport '../../../interfaces/ILendingPoolForTokens.sol';\\nimport '../../../interfaces/IRewardedToken.sol';\\nimport '../../../access/AccessHelper.sol';\\nimport '../../../access/AccessFlags.sol';\\nimport '../../../access/MarketAccessBitmask.sol';\\nimport '../../../access/interfaces/IMarketAccessController.sol';\\nimport '../interfaces/IInitializablePoolToken.sol';\\nimport '../interfaces/PoolTokenConfig.sol';\\n\\nabstract contract PoolTokenBase is\\n  IERC20,\\n  IPoolToken,\\n  IInitializablePoolToken,\\n  IRewardedToken,\\n  ERC20DetailsBase,\\n  MarketAccessBitmaskMin\\n{\\n  using AccessHelper for IMarketAccessController;\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  ILendingPoolForTokens internal _pool;\\n  address internal _underlyingAsset;\\n\\n  constructor(address pool_, address underlyingAsset_)\\n    MarketAccessBitmaskMin(\\n      pool_ != address(0) ? ILendingPoolForTokens(pool_).getAccessController() : IMarketAccessController(address(0))\\n    )\\n  {\\n    _pool = ILendingPoolForTokens(pool_);\\n    _underlyingAsset = underlyingAsset_;\\n  }\\n\\n  function _initializePoolToken(PoolTokenConfig memory config, bytes calldata params) internal virtual {\\n    params;\\n    _pool = ILendingPoolForTokens(config.pool);\\n    _underlyingAsset = config.underlyingAsset;\\n    _remoteAcl = ILendingPoolForTokens(config.pool).getAccessController();\\n  }\\n\\n  function _onlyLendingPool() private view {\\n    require(msg.sender == address(_pool), Errors.CALLER_NOT_LENDING_POOL);\\n  }\\n\\n  modifier onlyLendingPool() {\\n    _onlyLendingPool();\\n    _;\\n  }\\n\\n  function _onlyLendingPoolConfiguratorOrAdmin() private view {\\n    _remoteAcl.requireAnyOf(\\n      msg.sender,\\n      AccessFlags.POOL_ADMIN | AccessFlags.LENDING_POOL_CONFIGURATOR,\\n      Errors.CALLER_NOT_POOL_ADMIN\\n    );\\n  }\\n\\n  modifier onlyLendingPoolConfiguratorOrAdmin() {\\n    _onlyLendingPoolConfiguratorOrAdmin();\\n    _;\\n  }\\n\\n  function updatePool() external override onlyLendingPoolConfiguratorOrAdmin {\\n    address pool = _remoteAcl.getLendingPool();\\n    require(pool != address(0), Errors.LENDING_POOL_REQUIRED);\\n    _pool = ILendingPoolForTokens(pool);\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function UNDERLYING_ASSET_ADDRESS() public view override returns (address) {\\n    return _underlyingAsset;\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function POOL() public view override returns (address) {\\n    return address(_pool);\\n  }\\n\\n  function setIncentivesController(address hook) external override onlyRewardConfiguratorOrAdmin {\\n    internalSetIncentivesController(hook);\\n  }\\n\\n  function internalBalanceOf(address account) internal view virtual returns (uint256);\\n\\n  function internalBalanceAndFlagsOf(address account) internal view virtual returns (uint256, uint32);\\n\\n  function internalSetFlagsOf(address account, uint32 flags) internal virtual;\\n\\n  function internalSetIncentivesController(address hook) internal virtual;\\n\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return internalTotalSupply();\\n  }\\n\\n  function internalTotalSupply() internal view virtual returns (uint256);\\n\\n  function _mintBalance(\\n    address account,\\n    uint256 amount,\\n    uint256 scale\\n  ) internal {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n    _beforeTokenTransfer(address(0), account, amount);\\n    internalUpdateTotalSupply(internalTotalSupply() + amount);\\n    internalIncrementBalance(account, amount, scale);\\n  }\\n\\n  function _burnBalance(\\n    address account,\\n    uint256 amount,\\n    uint256 minLimit,\\n    uint256 scale\\n  ) internal {\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n    _beforeTokenTransfer(account, address(0), amount);\\n    internalUpdateTotalSupply(internalTotalSupply() - amount);\\n    internalDecrementBalance(account, amount, minLimit, scale);\\n  }\\n\\n  function _transferBalance(\\n    address sender,\\n    address recipient,\\n    uint256 amount,\\n    uint256 senderMinLimit,\\n    uint256 scale\\n  ) internal {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n    if (sender != recipient) {\\n      // require(oldSenderBalance >= amount, 'ERC20: transfer amount exceeds balance');\\n      internalDecrementBalance(sender, amount, senderMinLimit, scale);\\n      internalIncrementBalance(recipient, amount, scale);\\n    }\\n  }\\n\\n  function _incrementBalanceWithTotal(\\n    address account,\\n    uint256 amount,\\n    uint256 scale,\\n    uint256 total\\n  ) internal {\\n    internalUpdateTotalSupply(total);\\n    internalIncrementBalance(account, amount, scale);\\n  }\\n\\n  function _decrementBalanceWithTotal(\\n    address account,\\n    uint256 amount,\\n    uint256 scale,\\n    uint256 total\\n  ) internal {\\n    internalUpdateTotalSupply(total);\\n    internalDecrementBalance(account, amount, 0, scale);\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n\\n  function internalIncrementBalance(\\n    address account,\\n    uint256 amount,\\n    uint256 scale\\n  ) internal virtual;\\n\\n  function internalDecrementBalance(\\n    address account,\\n    uint256 amount,\\n    uint256 senderMinLimit,\\n    uint256 scale\\n  ) internal virtual;\\n\\n  function internalUpdateTotalSupply(uint256 newTotal) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/reward/calcs/CalcLinearRewardBalances.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../interfaces/IRewardController.sol';\\n\\nabstract contract CalcLinearRewardBalances {\\n  struct RewardBalance {\\n    uint192 rewardBase;\\n    uint32 custom;\\n    uint32 claimedAt;\\n  }\\n  mapping(address => RewardBalance) private _balances;\\n  mapping(address => uint256) private _accumRates;\\n\\n  uint224 private _rate;\\n  uint32 private _rateUpdatedAt;\\n\\n  function setLinearRate(uint256 rate) internal {\\n    setLinearRateAt(rate, getCurrentTick());\\n  }\\n\\n  function setLinearRateAt(uint256 rate, uint32 at) internal {\\n    if (_rate == rate) {\\n      return;\\n    }\\n    require(rate <= type(uint224).max);\\n\\n    uint32 prevTick = _rateUpdatedAt;\\n    if (at != prevTick) {\\n      uint224 prevRate = _rate;\\n      internalMarkRateUpdate(at);\\n      _rate = uint224(rate);\\n      internalRateUpdated(prevRate, prevTick, at);\\n    }\\n  }\\n\\n  function doSyncRateAt(uint32 at) internal {\\n    uint32 prevTick = _rateUpdatedAt;\\n    if (at != prevTick) {\\n      internalMarkRateUpdate(at);\\n      internalRateUpdated(_rate, prevTick, at);\\n    }\\n  }\\n\\n  function getCurrentTick() internal view virtual returns (uint32);\\n\\n  function internalRateUpdated(\\n    uint256 lastRate,\\n    uint32 lastAt,\\n    uint32 at\\n  ) internal virtual;\\n\\n  function internalMarkRateUpdate(uint32 currentTick) internal {\\n    require(currentTick >= _rateUpdatedAt, 'retroactive update');\\n    _rateUpdatedAt = currentTick;\\n  }\\n\\n  function getLinearRate() internal view returns (uint256) {\\n    return _rate;\\n  }\\n\\n  function getRateAndUpdatedAt() internal view returns (uint256, uint32) {\\n    return (_rate, _rateUpdatedAt);\\n  }\\n\\n  function internalCalcRateAndReward(\\n    RewardBalance memory entry,\\n    uint256 lastAccumRate,\\n    uint32 currentTick\\n  )\\n    internal\\n    view\\n    virtual\\n    returns (\\n      uint256 rate,\\n      uint256 allocated,\\n      uint32 since\\n    );\\n\\n  function getRewardEntry(address holder) internal view returns (RewardBalance memory) {\\n    return _balances[holder];\\n  }\\n\\n  function internalSetRewardEntryCustom(address holder, uint32 custom) internal {\\n    _balances[holder].custom = custom;\\n  }\\n\\n  function doIncrementRewardBalance(address holder, uint256 amount)\\n    internal\\n    returns (\\n      uint256,\\n      uint32,\\n      AllocationMode\\n    )\\n  {\\n    RewardBalance memory entry = _balances[holder];\\n    amount += entry.rewardBase;\\n    require(amount <= type(uint192).max, 'balance is too high');\\n    return _doUpdateRewardBalance(holder, entry, uint192(amount));\\n  }\\n\\n  function doDecrementRewardBalance(\\n    address holder,\\n    uint256 amount,\\n    uint256 minBalance\\n  )\\n    internal\\n    returns (\\n      uint256,\\n      uint32,\\n      AllocationMode\\n    )\\n  {\\n    RewardBalance memory entry = _balances[holder];\\n    require(entry.rewardBase >= minBalance + amount, 'amount exceeds balance');\\n    unchecked {\\n      amount = entry.rewardBase - amount;\\n    }\\n    return _doUpdateRewardBalance(holder, entry, uint192(amount));\\n  }\\n\\n  function doUpdateRewardBalance(address holder, uint256 newBalance)\\n    internal\\n    returns (\\n      uint256 allocated,\\n      uint32 since,\\n      AllocationMode mode\\n    )\\n  {\\n    require(newBalance <= type(uint192).max, 'balance is too high');\\n    return _doUpdateRewardBalance(holder, _balances[holder], uint192(newBalance));\\n  }\\n\\n  function _doUpdateRewardBalance(\\n    address holder,\\n    RewardBalance memory entry,\\n    uint192 newBalance\\n  )\\n    private\\n    returns (\\n      uint256,\\n      uint32,\\n      AllocationMode mode\\n    )\\n  {\\n    if (entry.claimedAt == 0) {\\n      mode = AllocationMode.SetPull;\\n    } else {\\n      mode = AllocationMode.Push;\\n    }\\n\\n    uint32 currentTick = getCurrentTick();\\n    (uint256 adjRate, uint256 allocated, uint32 since) = internalCalcRateAndReward(\\n      entry,\\n      _accumRates[holder],\\n      currentTick\\n    );\\n\\n    _accumRates[holder] = adjRate;\\n    _balances[holder] = RewardBalance(newBalance, entry.custom, currentTick);\\n    return (allocated, since, mode);\\n  }\\n\\n  function doRemoveRewardBalance(address holder) internal returns (uint256 rewardBase) {\\n    rewardBase = _balances[holder].rewardBase;\\n    if (rewardBase == 0 && _balances[holder].claimedAt == 0) {\\n      return 0;\\n    }\\n    delete (_balances[holder]);\\n    return rewardBase;\\n  }\\n\\n  function doGetReward(address holder)\\n    internal\\n    returns (\\n      uint256,\\n      uint32,\\n      bool\\n    )\\n  {\\n    return doGetRewardAt(holder, getCurrentTick());\\n  }\\n\\n  function doGetRewardAt(address holder, uint32 currentTick)\\n    internal\\n    returns (\\n      uint256,\\n      uint32,\\n      bool\\n    )\\n  {\\n    RewardBalance memory balance = _balances[holder];\\n    if (balance.rewardBase == 0) {\\n      return (0, 0, false);\\n    }\\n\\n    (uint256 adjRate, uint256 allocated, uint32 since) = internalCalcRateAndReward(\\n      balance,\\n      _accumRates[holder],\\n      currentTick\\n    );\\n\\n    _accumRates[holder] = adjRate;\\n    _balances[holder].claimedAt = currentTick;\\n    return (allocated, since, true);\\n  }\\n\\n  function doCalcReward(address holder) internal view returns (uint256, uint32) {\\n    return doCalcRewardAt(holder, getCurrentTick());\\n  }\\n\\n  function doCalcRewardAt(address holder, uint32 currentTick) internal view returns (uint256, uint32) {\\n    if (_balances[holder].rewardBase == 0) {\\n      return (0, 0);\\n    }\\n\\n    (, uint256 allocated, uint32 since) = internalCalcRateAndReward(\\n      _balances[holder],\\n      _accumRates[holder],\\n      currentTick\\n    );\\n    return (allocated, since);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IMarketAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IAccessController.sol';\\n\\n/// @dev Main registry of addresses part of or connected to the protocol, including permissioned roles. Also acts a proxy factory.\\ninterface IMarketAccessController is IAccessController {\\n  function getMarketId() external view returns (string memory);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function getLendingRateOracle() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IRemoteAccessBitmask.sol';\\nimport '../../tools/upgradeability/IProxy.sol';\\n\\n/// @dev Main registry of permissions and addresses\\ninterface IAccessController is IRemoteAccessBitmask {\\n  function getAddress(uint256 id) external view returns (address);\\n\\n  function createProxy(\\n    address admin,\\n    address impl,\\n    bytes calldata params\\n  ) external returns (IProxy);\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IRemoteAccessBitmask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IRemoteAccessBitmask {\\n  /**\\n   * @dev Returns access flags granted to the given address and limited by the filterMask. filterMask == 0 has a special meaning.\\n   * @param addr an to get access perfmissions for\\n   * @param filterMask limits a subset of flags to be checked.\\n   * NB! When filterMask == 0 then zero is returned no flags granted, or an unspecified non-zero value otherwise.\\n   * @return Access flags currently granted\\n   */\\n  function queryAccessControlMask(address addr, uint256 filterMask) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/tools/upgradeability/IProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IProxy {\\n  function upgradeToAndCall(address newImplementation, bytes calldata data) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IManagedRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../interfaces/IEmergencyAccess.sol';\\n\\ninterface IManagedRewardPool is IEmergencyAccess {\\n  function updateBaseline(uint256) external returns (bool hasBaseline, uint256 appliedRate);\\n\\n  function setBaselinePercentage(uint16) external;\\n\\n  function getBaselinePercentage() external view returns (uint16);\\n\\n  function getRate() external view returns (uint256);\\n\\n  function getPoolName() external view returns (string memory);\\n\\n  function claimRewardFor(address holder)\\n    external\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull\\n    );\\n\\n  function claimRewardWithLimitFor(\\n    address holder,\\n    uint256 baseAmount,\\n    uint256 limit,\\n    uint16 minPct\\n  )\\n    external\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull,\\n      uint256 newLimit\\n    );\\n\\n  function calcRewardFor(address holder, uint32 at)\\n    external\\n    view\\n    returns (\\n      uint256 amount,\\n      uint256 extra,\\n      uint32 since\\n    );\\n\\n  function addRewardProvider(address provider, address token) external;\\n\\n  function removeRewardProvider(address provider) external;\\n\\n  function getRewardController() external view returns (address);\\n\\n  function attachedToRewardController() external returns (uint256 allocateReward);\\n\\n  function detachedFromRewardController() external returns (uint256 deallocateReward);\\n\\n  event RateUpdated(uint256 rate);\\n  event BaselinePercentageUpdated(uint16);\\n  event ProviderAdded(address provider, address token);\\n  event ProviderRemoved(address provider);\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './interfaces/IRemoteAccessBitmask.sol';\\n\\n/// @dev Helper/wrapper around IRemoteAccessBitmask\\nlibrary AccessHelper {\\n  function getAcl(IRemoteAccessBitmask remote, address subject) internal view returns (uint256) {\\n    return remote.queryAccessControlMask(subject, ~uint256(0));\\n  }\\n\\n  function queryAcl(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 filterMask\\n  ) internal view returns (uint256) {\\n    return remote.queryAccessControlMask(subject, filterMask);\\n  }\\n\\n  function hasAnyOf(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 flags\\n  ) internal view returns (bool) {\\n    uint256 found = queryAcl(remote, subject, flags);\\n    return found & flags != 0;\\n  }\\n\\n  function hasAny(IRemoteAccessBitmask remote, address subject) internal view returns (bool) {\\n    return remote.queryAccessControlMask(subject, 0) != 0;\\n  }\\n\\n  function hasNone(IRemoteAccessBitmask remote, address subject) internal view returns (bool) {\\n    return remote.queryAccessControlMask(subject, 0) == 0;\\n  }\\n\\n  function requireAnyOf(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 flags,\\n    string memory text\\n  ) internal view {\\n    require(hasAnyOf(remote, subject, flags), text);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEmergencyAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IEmergencyAccess {\\n  function setPaused(bool paused) external;\\n\\n  function isPaused() external view returns (bool);\\n\\n  event EmergencyPaused(address indexed by, bool paused);\\n}\\n\"\r\n    },\r\n    \"contracts/tools/tokens/ERC20DetailsBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IERC20Details.sol';\\n\\nabstract contract ERC20DetailsBase is IERC20Details {\\n  string private _name;\\n  string private _symbol;\\n  uint8 private _decimals;\\n\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  ) {\\n    _name = name_;\\n    _symbol = symbol_;\\n    _decimals = decimals_;\\n  }\\n\\n  function _initializeERC20(\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_\\n  ) internal {\\n    _name = name_;\\n    _symbol = symbol_;\\n    _decimals = decimals_;\\n  }\\n\\n  function name() public view override returns (string memory) {\\n    return _name;\\n  }\\n\\n  function symbol() public view override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  function decimals() public view override returns (uint8) {\\n    return _decimals;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolForTokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../access/interfaces/IMarketAccessController.sol';\\nimport '../protocol/libraries/types/DataTypes.sol';\\n\\ninterface ILendingPoolForTokens {\\n  /**\\n   * @dev Validates and finalizes an depositToken transfer\\n   * - Only callable by the overlying depositToken of the `asset`\\n   * @param asset The address of the underlying asset of the depositToken\\n   * @param from The user from which the depositToken are transferred\\n   * @param to The user receiving the depositToken\\n   * @param lastBalanceFrom True when from's balance was non-zero and became zero\\n   * @param firstBalanceTo True when to's balance was zero and became non-zero\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    bool lastBalanceFrom,\\n    bool firstBalanceTo\\n  ) external;\\n\\n  function getAccessController() external view returns (IMarketAccessController);\\n\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function setReservePaused(address asset, bool paused) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IRewardedToken {\\n  function setIncentivesController(address) external;\\n\\n  function getIncentivesController() external view returns (address);\\n\\n  function rewardedBalanceOf(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/access/MarketAccessBitmask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../tools/Errors.sol';\\nimport './interfaces/IMarketAccessController.sol';\\nimport './AccessHelper.sol';\\nimport './AccessFlags.sol';\\n\\n// solhint-disable func-name-mixedcase\\nabstract contract MarketAccessBitmaskMin {\\n  using AccessHelper for IMarketAccessController;\\n  IMarketAccessController internal _remoteAcl;\\n\\n  constructor(IMarketAccessController remoteAcl) {\\n    _remoteAcl = remoteAcl;\\n  }\\n\\n  function _getRemoteAcl(address addr) internal view returns (uint256) {\\n    return _remoteAcl.getAcl(addr);\\n  }\\n\\n  function hasRemoteAcl() internal view returns (bool) {\\n    return _remoteAcl != IMarketAccessController(address(0));\\n  }\\n\\n  function acl_hasAnyOf(address subject, uint256 flags) internal view returns (bool) {\\n    return _remoteAcl.hasAnyOf(subject, flags);\\n  }\\n\\n  modifier aclHas(uint256 flags) virtual {\\n    _remoteAcl.requireAnyOf(msg.sender, flags, Errors.TXT_ACCESS_RESTRICTED);\\n    _;\\n  }\\n\\n  modifier aclAnyOf(uint256 flags) {\\n    _remoteAcl.requireAnyOf(msg.sender, flags, Errors.TXT_ACCESS_RESTRICTED);\\n    _;\\n  }\\n\\n  modifier onlyPoolAdmin() {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.POOL_ADMIN, Errors.CALLER_NOT_POOL_ADMIN);\\n    _;\\n  }\\n\\n  modifier onlyRewardAdmin() {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.REWARD_CONFIG_ADMIN, Errors.CALLER_NOT_REWARD_CONFIG_ADMIN);\\n    _;\\n  }\\n\\n  modifier onlyRewardConfiguratorOrAdmin() {\\n    _remoteAcl.requireAnyOf(\\n      msg.sender,\\n      AccessFlags.REWARD_CONFIG_ADMIN | AccessFlags.REWARD_CONFIGURATOR,\\n      Errors.CALLER_NOT_REWARD_CONFIG_ADMIN\\n    );\\n    _;\\n  }\\n}\\n\\nabstract contract MarketAccessBitmask is MarketAccessBitmaskMin {\\n  using AccessHelper for IMarketAccessController;\\n\\n  constructor(IMarketAccessController remoteAcl) MarketAccessBitmaskMin(remoteAcl) {}\\n\\n  modifier onlyEmergencyAdmin() {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.EMERGENCY_ADMIN, Errors.CALLER_NOT_EMERGENCY_ADMIN);\\n    _;\\n  }\\n\\n  function _onlySweepAdmin() internal view virtual {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.SWEEP_ADMIN, Errors.CALLER_NOT_SWEEP_ADMIN);\\n  }\\n\\n  modifier onlySweepAdmin() {\\n    _onlySweepAdmin();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/tokenization/interfaces/IInitializablePoolToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './PoolTokenConfig.sol';\\n\\n/// @dev Interface for the initialize function on PoolToken or DebtToken\\ninterface IInitializablePoolToken {\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address treasury,\\n    string tokenName,\\n    string tokenSymbol,\\n    uint8 tokenDecimals,\\n    bytes params\\n  );\\n\\n  /// @dev Initializes the depositToken\\n  function initialize(\\n    PoolTokenConfig calldata config,\\n    string calldata tokenName,\\n    string calldata tokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/tools/tokens/IERC20Details.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IERC20Details {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address depositTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the reserve strategy\\n    address strategy;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80: strategy is external\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n\\n  struct InitReserveData {\\n    address asset;\\n    address depositTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address strategy;\\n    bool externalStrategy;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"BalanceTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"BaselinePercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"EmergencyPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OverdraftApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"overdraft\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OverdraftCovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ProviderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ProviderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"RateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"SubBalanceLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"SubBalanceProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"SubBalanceReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"SubBalanceUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_REVISION\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addRewardProvider\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addStakeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addSubBalanceOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attachedToRewardController\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverOfUnderlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"at\",\"type\":\"uint32\"}],\"name\":\"calcRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"since\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"minPct\",\"type\":\"uint16\"}],\"name\":\"claimRewardWithLimitFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"since\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"keepPull\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"collateralBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"detachedFromRewardController\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaselinePercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIncentivesController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScaleIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getScaledUserBalanceAndSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct PoolTokenConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IRewardController\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"baselinePercentage\",\"type\":\"uint16\"}],\"internalType\":\"struct IInitializableRewardPool.InitRewardPoolData\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"initializeRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializedRewardPoolWith\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IRewardController\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"baselinePercentage\",\"type\":\"uint16\"}],\"internalType\":\"struct IInitializableRewardPool.InitRewardPoolData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"}],\"name\":\"lockSubBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"repayOverdraft\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"firstBalance\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"mintToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"}],\"name\":\"provideSubBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"removeRewardProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeSubBalanceOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prevScaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newScaledAmount\",\"type\":\"uint256\"}],\"name\":\"replaceSubBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"preferOverdraft\",\"type\":\"bool\"}],\"name\":\"returnSubBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"rewardedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"scaledBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scaledTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"factor\",\"type\":\"uint16\"}],\"name\":\"setBaselinePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hook\",\"type\":\"address\"}],\"name\":\"setIncentivesController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"overdraftTolerancePct\",\"type\":\"uint16\"}],\"name\":\"setOverdraftTolerancePct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"}],\"name\":\"transferLockedBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferUnderlying\",\"type\":\"bool\"}],\"name\":\"transferOnLiquidation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferUnderlyingTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"transferTo\",\"type\":\"address\"}],\"name\":\"unlockSubBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseline\",\"type\":\"uint256\"}],\"name\":\"updateBaseline\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasBaseline\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"appliedRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"useAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DepositToken","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}