{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.7;\r\n\r\ncontract BatchAirdrop {\r\n    \r\n    address private WFDCContract = 0x311C6769461e1d2173481F8d789AF00B39DF6d75;//0x63D6e1E46d3b72D2BB30D3A8D2C811cCb180Ab60;//0x8d2971C02ec4aE356278ECB094B349b61Fc2820A;\r\n    WrappedFreedomDividendCoin private WFDCToken;\r\n    \r\n    uint private airdropAmount = 11111;//1111;\r\n    \r\n    address private owner;\r\n    \r\n    constructor() {\r\n        owner = msg.sender;\r\n        WFDCToken = WrappedFreedomDividendCoin(WFDCContract);\r\n    }\r\n    \r\n    /*function test() external view returns(uint8) {\r\n        return WFDCToken.decimals();\r\n    }*/\r\n    function batchAirdrop(address[] calldata airdropAddresses) external returns(bool) {\r\n        require(msg.sender == owner, 'only owner');\r\n        \r\n        for (uint airdropCount=0; airdropCount < airdropAddresses.length; airdropCount++) {\r\n            if (WFDCToken.balanceOf(address(this)) >= airdropAmount) {\r\n                TransferHelper.safeTransfer(\r\n                  WFDCContract, airdropAddresses[airdropCount], airdropAmount\r\n                );\r\n            }\r\n        }\r\n        \r\n        return true;\r\n    }\r\n}\r\n\r\ninterface WrappedFreedomDividendCoin {\r\n  function decimals() external view returns (uint8);\r\n  \r\n  function balanceOf(address Address) external view returns (uint);\r\n  \r\n  //function transfer(address to, uint value) external returns (bool);\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"airdropAddresses\",\"type\":\"address[]\"}],\"name\":\"batchAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BatchAirdrop","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://68e890fabca61dc69c5388f3df1e6d0ed6230db96bf71b1d205f37243d8ba299"}]}