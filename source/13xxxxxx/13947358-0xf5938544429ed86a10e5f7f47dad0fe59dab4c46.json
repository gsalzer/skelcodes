{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MasterChef.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\r\\n\\r\\nimport '@sphynxswap/sphynx-swap-lib/contracts/math/SafeMath.sol';\\r\\nimport '@sphynxswap/sphynx-swap-lib/contracts/token/BEP20/IBEP20.sol';\\r\\nimport '@sphynxswap/sphynx-swap-lib/contracts/token/BEP20/SafeBEP20.sol';\\r\\nimport '@sphynxswap/sphynx-swap-lib/contracts/access/Ownable.sol';\\r\\n\\r\\nimport './SphynxToken.sol';\\r\\n\\r\\ninterface IMigratorChef {\\r\\n\\t// Perform LP token migration from legacy PancakeSwap or any swap to SphynxSwap.\\r\\n\\t// Take the current LP token address and return the new LP token address.\\r\\n\\t// Migrator should have full access to the caller's LP token.\\r\\n\\t// Return the new LP token address.\\r\\n\\t//\\r\\n\\t// XXX Migrator must have allowance access to PancakeSwap LP tokens.\\r\\n\\t// SphynxSwap must mint EXACTLY the same amount of SphynxSwap LP tokens or\\r\\n\\t// else something bad will happen. Traditional PancakeSwap does not\\r\\n\\t// do that so be careful!\\r\\n\\tfunction migrate(IBEP20 token) external returns (IBEP20);\\r\\n}\\r\\n\\r\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\r\\ncontract MasterChef is Ownable {\\r\\n\\tusing SafeMath for uint256;\\r\\n\\tusing SafeBEP20 for IBEP20;\\r\\n\\r\\n\\t// Info of each user.\\r\\n\\tstruct UserInfo {\\r\\n\\t\\tuint256 amount; // How many LP tokens the user has provided.\\r\\n\\t\\tuint256 rewardDebt; // Reward debt. See explanation below.\\r\\n\\t\\t//\\r\\n\\t\\t// We do some fancy math here. Basically, any point in time, the amount of Sphynxs\\r\\n\\t\\t// entitled to a user but is pending to be distributed is:\\r\\n\\t\\t//\\r\\n\\t\\t//   pending reward = (user.amount * pool.accsphynxPerShare) - user.rewardDebt\\r\\n\\t\\t//\\r\\n\\t\\t// Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\r\\n\\t\\t//   1. The pool's `accsphynxPerShare` (and `lastRewardBlock`) gets updated.\\r\\n\\t\\t//   2. User receives the pending reward sent to his/her address.\\r\\n\\t\\t//   3. User's `amount` gets updated.\\r\\n\\t\\t//   4. User's `rewardDebt` gets updated.\\r\\n\\t}\\r\\n\\r\\n\\t// Info of each pool.\\r\\n\\tstruct PoolInfo {\\r\\n\\t\\tIBEP20 lpToken; // Address of LP token contract.\\r\\n\\t\\tuint256 allocPoint; // How many allocation points assigned to this pool. sphynxs to distribute per block.\\r\\n\\t\\tuint256 lastRewardBlock; // Last block number that sphynxs distribution occurs.\\r\\n\\t\\tuint256 accSphynxPerShare; // Accumulated Sphynxs per share, times 1e12. See below.\\r\\n\\t}\\r\\n\\r\\n\\t// The sphynx TOKEN!\\r\\n\\tSphynxToken public sphynx;\\r\\n\\t// Dev address.\\r\\n\\taddress public devaddr;\\r\\n\\t// sphynx tokens created per block.\\r\\n\\tuint256 public sphynxPerBlock;\\r\\n\\t// Bonus muliplier for early sphynx makers.\\r\\n\\tuint256 public BONUS_MULTIPLIER = 1;\\r\\n\\t// The migrator contract. It has a lot of power. Can only be set through governance (owner).\\r\\n\\tIMigratorChef public migrator;\\r\\n\\r\\n\\tuint256 public toBurn = 20;\\r\\n\\r\\n\\t// Info of each pool.\\r\\n\\tPoolInfo[] public poolInfo;\\r\\n\\t// Info of each user that stakes LP tokens.\\r\\n\\tmapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n\\t// Total allocation poitns. Must be the sum of all allocation points in all pools.\\r\\n\\tuint256 public totalAllocPoint = 0;\\r\\n\\t// The block number when sphynx mining starts.\\r\\n\\tuint256 public startBlock;\\r\\n\\r\\n\\tevent Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\tevent Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\tevent EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\tevent SetDev(address newDev);\\r\\n\\r\\n\\tconstructor(\\r\\n\\t\\tSphynxToken _sphynx,\\r\\n\\t\\taddress _devaddr,\\r\\n\\t\\tuint256 _sphynxPerBlock,\\r\\n\\t\\tuint256 _startBlock\\r\\n\\t) public {\\r\\n\\t\\tsphynx = _sphynx;\\r\\n\\t\\tdevaddr = _devaddr;\\r\\n\\t\\tsphynxPerBlock = _sphynxPerBlock;\\r\\n\\t\\tstartBlock = _startBlock;\\r\\n\\r\\n\\t\\t// staking pool\\r\\n\\t\\tpoolInfo.push(PoolInfo({ lpToken: _sphynx, allocPoint: 100, lastRewardBlock: startBlock, accSphynxPerShare: 0 }));\\r\\n\\r\\n\\t\\ttotalAllocPoint = 100;\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateMultiplier(uint256 multiplierNumber) public onlyOwner {\\r\\n\\t\\tBONUS_MULTIPLIER = multiplierNumber;\\r\\n\\t}\\r\\n\\r\\n\\tfunction poolLength() external view returns (uint256) {\\r\\n\\t\\treturn poolInfo.length;\\r\\n\\t}\\r\\n\\r\\n\\t// Add a new lp to the pool. Can only be called by the owner.\\r\\n\\t// XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\r\\n\\tfunction add(\\r\\n\\t\\tuint256 _allocPoint,\\r\\n\\t\\tIBEP20 _lpToken,\\r\\n\\t\\tbool _withUpdate\\r\\n\\t) public onlyOwner {\\r\\n\\t\\tif (_withUpdate) {\\r\\n\\t\\t\\tmassUpdatePools();\\r\\n\\t\\t}\\r\\n\\t\\tuint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\r\\n\\t\\ttotalAllocPoint = totalAllocPoint.add(_allocPoint);\\r\\n\\t\\tpoolInfo.push(PoolInfo({ lpToken: _lpToken, allocPoint: _allocPoint, lastRewardBlock: lastRewardBlock, accSphynxPerShare: 0 }));\\r\\n\\t}\\r\\n\\r\\n\\t// Update the given pool's sphynx allocation point. Can only be called by the owner.\\r\\n\\tfunction set(\\r\\n\\t\\tuint256 _pid,\\r\\n\\t\\tuint256 _allocPoint,\\r\\n\\t\\tbool _withUpdate\\r\\n\\t) public onlyOwner {\\r\\n\\t\\tif (_withUpdate) {\\r\\n\\t\\t\\tmassUpdatePools();\\r\\n\\t\\t}\\r\\n\\t\\ttotalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\r\\n\\t\\tpoolInfo[_pid].allocPoint = _allocPoint;\\r\\n\\t}\\r\\n\\r\\n\\t// Set the migrator contract. Can only be called by the owner.\\r\\n\\tfunction setMigrator(IMigratorChef _migrator) public onlyOwner {\\r\\n\\t\\tmigrator = _migrator;\\r\\n\\t}\\r\\n\\r\\n\\t// Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\\r\\n\\tfunction migrate(uint256 _pid) public {\\r\\n\\t\\trequire(address(migrator) != address(0), 'migrate: no migrator');\\r\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\r\\n\\t\\tIBEP20 lpToken = pool.lpToken;\\r\\n\\t\\tuint256 bal = lpToken.balanceOf(address(this));\\r\\n\\t\\tlpToken.safeApprove(address(migrator), bal);\\r\\n\\t\\tIBEP20 newLpToken = migrator.migrate(lpToken);\\r\\n\\t\\trequire(bal == newLpToken.balanceOf(address(this)), 'migrate: bad');\\r\\n\\t\\tpool.lpToken = newLpToken;\\r\\n\\t}\\r\\n\\r\\n\\tfunction changeToBurn(uint256 value) public onlyOwner {\\r\\n\\t\\ttoBurn = value;\\r\\n\\t}\\r\\n\\r\\n\\t// Return reward multiplier over the given _from to _to block.\\r\\n\\tfunction getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\r\\n\\t\\treturn _to.sub(_from).mul(BONUS_MULTIPLIER);\\r\\n\\t}\\r\\n\\r\\n\\t// View function to see pending sphynxs on frontend.\\r\\n\\tfunction pendingSphynx(uint256 _pid, address _user) external view returns (uint256) {\\r\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\r\\n\\t\\tUserInfo storage user = userInfo[_pid][_user];\\r\\n\\t\\tuint256 accSphynxPerShare = pool.accSphynxPerShare;\\r\\n\\t\\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\\r\\n\\t\\tif (block.number > pool.lastRewardBlock && lpSupply != 0) {\\r\\n\\t\\t\\tuint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\r\\n\\t\\t\\tuint256 sphynxReward = multiplier.mul(sphynxPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\r\\n\\t\\t\\taccSphynxPerShare = accSphynxPerShare.add(sphynxReward.mul(1e12).div(lpSupply));\\r\\n\\t\\t}\\r\\n\\t\\treturn user.amount.mul(accSphynxPerShare).div(1e12).sub(user.rewardDebt);\\r\\n\\t}\\r\\n\\r\\n\\t// Update reward variables for all pools. Be careful of gas spending!\\r\\n\\tfunction massUpdatePools() public {\\r\\n\\t\\tuint256 length = poolInfo.length;\\r\\n\\t\\tfor (uint256 pid = 0; pid < length; ++pid) {\\r\\n\\t\\t\\tupdatePool(pid);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// Update reward variables of the given pool to be up-to-date.\\r\\n\\tfunction updatePool(uint256 _pid) public {\\r\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\r\\n\\t\\tif (block.number <= pool.lastRewardBlock) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\tuint256 lpSupply = pool.lpToken.balanceOf(address(this));\\r\\n\\t\\tif (lpSupply == 0) {\\r\\n\\t\\t\\tpool.lastRewardBlock = block.number;\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\tuint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\r\\n\\t\\tuint256 sphynxReward = multiplier.mul(sphynxPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\r\\n\\t\\tsphynx.mint(devaddr, sphynxReward.div(100));\\r\\n\\t\\tsphynx.mint(address(this), sphynxReward);\\r\\n\\t\\tpool.accSphynxPerShare = pool.accSphynxPerShare.add(sphynxReward.mul(1e12).div(lpSupply));\\r\\n\\t\\tpool.lastRewardBlock = block.number;\\r\\n\\t}\\r\\n\\r\\n\\t// Deposit LP tokens to MasterChef for sphynx allocation.\\r\\n\\tfunction deposit(uint256 _pid, uint256 _amount) public {\\r\\n\\t\\trequire(_pid != 0, 'deposit sphynx by staking');\\r\\n\\r\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\r\\n\\t\\tUserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\t\\tupdatePool(_pid);\\r\\n\\t\\tif (user.amount > 0) {\\r\\n\\t\\t\\tuint256 pending = user.amount.mul(pool.accSphynxPerShare).div(1e12).sub(user.rewardDebt);\\r\\n\\t\\t\\tif (pending > 0) {\\r\\n\\t\\t\\t\\tsafeSphynxTransfer(msg.sender, pending);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (_amount > 0) {\\r\\n\\t\\t\\tpool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n\\t\\t\\tuser.amount = user.amount.add(_amount);\\r\\n\\t\\t}\\r\\n\\t\\tuser.rewardDebt = user.amount.mul(pool.accSphynxPerShare).div(1e12);\\r\\n\\t\\temit Deposit(msg.sender, _pid, _amount);\\r\\n\\t}\\r\\n\\r\\n\\t// Withdraw LP tokens from MasterChef.\\r\\n\\tfunction withdraw(uint256 _pid, uint256 _amount) public {\\r\\n\\t\\trequire(_pid != 0, 'withdraw sphynx by unstaking');\\r\\n\\r\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\r\\n\\t\\tUserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\t\\trequire(user.amount >= _amount, 'withdraw: not good');\\r\\n\\t\\tupdatePool(_pid);\\r\\n\\t\\tuint256 pending = user.amount.mul(pool.accSphynxPerShare).div(1e12).sub(user.rewardDebt);\\r\\n\\t\\tif (pending > 0) {\\r\\n\\t\\t\\tsafeSphynxTransfer(msg.sender, pending);\\r\\n\\t\\t}\\r\\n\\t\\tif (_amount > 0) {\\r\\n\\t\\t\\tuser.amount = user.amount.sub(_amount);\\r\\n\\t\\t\\tpool.lpToken.safeTransfer(address(msg.sender), _amount);\\r\\n\\t\\t}\\r\\n\\t\\tuser.rewardDebt = user.amount.mul(pool.accSphynxPerShare).div(1e12);\\r\\n\\t\\temit Withdraw(msg.sender, _pid, _amount);\\r\\n\\t}\\r\\n\\r\\n\\t// Stake sphynx tokens to MasterChef\\r\\n\\tfunction enterStaking(uint256 _amount) public {\\r\\n\\t\\tPoolInfo storage pool = poolInfo[0];\\r\\n\\t\\tUserInfo storage user = userInfo[0][msg.sender];\\r\\n\\t\\tupdatePool(0);\\r\\n\\t\\tif (user.amount > 0) {\\r\\n\\t\\t\\tuint256 pending = user.amount.mul(pool.accSphynxPerShare).div(1e12).sub(user.rewardDebt);\\r\\n\\t\\t\\tif (pending > 0) {\\r\\n\\t\\t\\t\\tsafeSphynxTransfer(msg.sender, pending);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (_amount > 0) {\\r\\n\\t\\t\\tpool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\r\\n\\t\\t\\tuser.amount = user.amount.add(_amount);\\r\\n\\t\\t}\\r\\n\\t\\tuser.rewardDebt = user.amount.mul(pool.accSphynxPerShare).div(1e12);\\r\\n\\t\\temit Deposit(msg.sender, 0, _amount);\\r\\n\\t}\\r\\n\\r\\n\\t// Withdraw sphynx tokens from STAKING.\\r\\n\\tfunction leaveStaking(uint256 _amount) public {\\r\\n\\t\\tPoolInfo storage pool = poolInfo[0];\\r\\n\\t\\tUserInfo storage user = userInfo[0][msg.sender];\\r\\n\\t\\trequire(user.amount >= _amount, 'withdraw: not good');\\r\\n\\t\\tupdatePool(0);\\r\\n\\t\\tuint256 pending = user.amount.mul(pool.accSphynxPerShare).div(1e12).sub(user.rewardDebt);\\r\\n\\t\\tif (pending > 0) {\\r\\n\\t\\t\\tsafeSphynxTransfer(msg.sender, pending);\\r\\n\\t\\t}\\r\\n\\t\\tif (_amount > 0) {\\r\\n\\t\\t\\tuser.amount = user.amount.sub(_amount);\\r\\n\\t\\t\\tpool.lpToken.safeTransfer(address(msg.sender), _amount);\\r\\n\\t\\t}\\r\\n\\t\\tuser.rewardDebt = user.amount.mul(pool.accSphynxPerShare).div(1e12);\\r\\n\\r\\n\\t\\temit Withdraw(msg.sender, 0, _amount);\\r\\n\\t}\\r\\n\\r\\n\\t// Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n\\tfunction emergencyWithdraw(uint256 _pid) public {\\r\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\r\\n\\t\\tUserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\t\\tpool.lpToken.safeTransfer(address(msg.sender), user.amount);\\r\\n\\t\\temit EmergencyWithdraw(msg.sender, _pid, user.amount);\\r\\n\\t\\tuser.amount = 0;\\r\\n\\t\\tuser.rewardDebt = 0;\\r\\n\\t}\\r\\n\\r\\n\\t// Safe sphynx transfer function, just in case if rounding error causes pool to not have enough sphynxs.\\r\\n\\tfunction safeSphynxTransfer(address _to, uint256 _amount) internal {\\r\\n\\t\\tuint256 amount = _amount.mul(toBurn).div(100);\\r\\n\\t\\tsphynx.transfer(0x000000000000000000000000000000000000dEaD, amount);\\r\\n\\t\\tsphynx.transfer(_to, _amount.sub(amount));\\r\\n\\t}\\r\\n\\r\\n\\t// Update dev address by the previous dev.\\r\\n\\tfunction dev(address _devaddr) public {\\r\\n\\t\\trequire(msg.sender == devaddr, 'dev: wut?');\\r\\n\\t\\tdevaddr = _devaddr;\\r\\n\\t\\temit SetDev(_devaddr);\\r\\n\\t}\\r\\n\\r\\n\\t// Sphynx has to add hidden dummy pools inorder to alter the emission, here we make it simple and transparent to all.\\r\\n\\tfunction updateEmissionRate(uint256 _perBlock) public onlyOwner {\\r\\n\\t\\tmassUpdatePools();\\r\\n\\t\\tsphynxPerBlock = _perBlock;\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@sphynxswap/sphynx-swap-lib/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'SafeMath: addition overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, 'SafeMath: subtraction overflow');\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, 'SafeMath: division by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, 'SafeMath: modulo by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/sphynx-swap-lib/contracts/token/BEP20/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/sphynx-swap-lib/contracts/token/BEP20/SafeBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport './IBEP20.sol';\\nimport '../../math/SafeMath.sol';\\nimport '../../utils/Address.sol';\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBEP20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            'SafeBEP20: approve from non-zero to non-zero allowance'\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            'SafeBEP20: decreased allowance below zero'\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/sphynx-swap-lib/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\nimport '../GSN/Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SphynxToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport '@sphynxswap/sphynx-swap-lib/contracts/access/Manageable.sol';\\r\\nimport '@sphynxswap/sphynx-swap-lib/contracts/token/BEP20/BEP20.sol';\\r\\nimport '@sphynxswap/sphynx-swap-lib/contracts/token/BEP20/IBEP20.sol';\\r\\nimport '@sphynxswap/sphynx-swap-lib/contracts/token/BEP20/SafeBEP20.sol';\\r\\nimport '@sphynxswap/swap-core/contracts/interfaces/ISphynxPair.sol';\\r\\nimport '@sphynxswap/swap-core/contracts/interfaces/ISphynxFactory.sol';\\r\\nimport '@sphynxswap/swap-periphery/contracts/interfaces/ISphynxRouter02.sol';\\r\\n\\r\\ninterface AggregatorV3Interface {\\r\\n\\tfunction decimals() external view returns (uint8);\\r\\n\\r\\n\\tfunction description() external view returns (string memory);\\r\\n\\r\\n\\tfunction version() external view returns (uint256);\\r\\n\\r\\n\\t// getRoundData and latestRoundData should both raise \\\"No data present\\\"\\r\\n\\t// if they do not have data to report, instead of returning unset values\\r\\n\\t// which could be misinterpreted as actual reported values.\\r\\n\\tfunction getRoundData(uint80 _roundId)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (\\r\\n\\t\\t\\tuint80 roundId,\\r\\n\\t\\t\\tint256 answer,\\r\\n\\t\\t\\tuint256 startedAt,\\r\\n\\t\\t\\tuint256 updatedAt,\\r\\n\\t\\t\\tuint80 answeredInRound\\r\\n\\t\\t);\\r\\n\\r\\n\\tfunction latestRoundData()\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (\\r\\n\\t\\t\\tuint80 roundId,\\r\\n\\t\\t\\tint256 answer,\\r\\n\\t\\t\\tuint256 startedAt,\\r\\n\\t\\t\\tuint256 updatedAt,\\r\\n\\t\\t\\tuint80 answeredInRound\\r\\n\\t\\t);\\r\\n}\\r\\n\\r\\ncontract SphynxToken is BEP20, Manageable {\\r\\n\\tusing SafeMath for uint256;\\r\\n\\tusing SafeBEP20 for IBEP20;\\r\\n\\r\\n\\tISphynxRouter02 public sphynxSwapRouter;\\r\\n\\taddress public sphynxSwapPair;\\r\\n\\r\\n\\tbool private swapping;\\r\\n\\r\\n\\taddress public masterChef;\\r\\n\\taddress public sphynxBridge;\\r\\n\\r\\n\\taddress payable public marketingWallet = payable(0x3D458e65828d031B46579De28e9BBAAeb2729064);\\r\\n\\taddress payable public developmentWallet = payable(0x7dB8380C7A017F82CC1d2DC7F8F1dE2d29Fd1df6);\\r\\n\\taddress public lotteryAddress;\\r\\n\\r\\n\\tuint256 public usdAmountToSwap = 500;\\r\\n\\r\\n\\tuint256 public marketingFee;\\r\\n\\tuint256 public developmentFee;\\r\\n\\tuint256 public lotteryFee;\\r\\n\\tuint256 public totalFees;\\r\\n\\tuint256 public blockNumber;\\r\\n\\r\\n\\tbool public SwapAndLiquifyEnabled = false;\\r\\n\\tbool public sendToLottery = false;\\r\\n\\tbool public stopTrade = false;\\r\\n\\tbool public claimable = true;\\r\\n\\tuint256 public maxTxAmount = 800000000 * (10 ** 18); // Initial Max Tx Amount\\r\\n\\tmapping(address => bool) signers;\\r\\n\\tmapping(uint256 => address) signersArray;\\r\\n\\tmapping(address => bool) stopTradeSign;\\r\\n\\r\\n\\tAggregatorV3Interface internal priceFeed;\\r\\n\\r\\n\\t// exlcude from fees and max transaction amount\\r\\n\\tmapping(address => bool) private _isExcludedFromFees;\\r\\n\\r\\n\\t// getting fee addresses\\r\\n\\tmapping(address => bool) public _isGetFees;\\r\\n\\r\\n\\t// store addresses that are automated market maker pairs. Any transfer to these addresses\\r\\n\\t// could be subject to a maximum transfer amount\\r\\n\\tmapping(address => bool) public automatedMarketMakerPairs;\\r\\n\\r\\n\\tuint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n\\tmodifier onlyMasterChefAndBridge() {\\r\\n\\t\\trequire(msg.sender == masterChef || msg.sender == sphynxBridge, 'Permission Denied');\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlySigner() {\\r\\n\\t\\trequire(signers[msg.sender], 'not-a-signer');\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n\\t// Contract Events\\r\\n\\tevent ExcludeFromFees(address indexed account, bool isExcluded);\\r\\n\\tevent GetFee(address indexed account, bool isGetFee);\\r\\n\\tevent ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\\r\\n\\tevent SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n\\tevent MarketingWalletUpdated(address indexed newMarketingWallet, address indexed oldMarketingWallet);\\r\\n\\tevent DevelopmentWalletUpdated(address indexed newDevelopmentWallet, address indexed oldDevelopmentWallet);\\r\\n\\tevent LotteryAddressUpdated(address indexed newLotteryAddress, address indexed oldLotteryAddress);\\r\\n\\tevent UpdateSphynxSwapRouter(address indexed newAddress, address indexed oldAddress);\\r\\n\\tevent SwapAndLiquify(uint256 tokensSwapped, uint256 nativeReceived, uint256 tokensIntoLiqudity);\\r\\n\\tevent UpdateSwapAndLiquify(bool value);\\r\\n\\tevent UpdateSendToLottery(bool value);\\r\\n\\tevent SetMarketingFee(uint256 value);\\r\\n\\tevent SetDevelopmentFee(uint256 value);\\r\\n\\tevent SetLotteryFee(uint256 value);\\r\\n\\tevent SetAllFeeToZero(uint256 marketingFee, uint256 developmentFee, uint256 lotteryFee);\\r\\n\\tevent MaxFees(uint256 marketingFee, uint256 developmentFee, uint256 lotteryFee);\\r\\n\\tevent SetUsdAmountToSwap(uint256 usdAmountToSwap);\\r\\n\\tevent SetBlockNumber(uint256 blockNumber);\\r\\n\\tevent UpdateMasterChef(address masterChef);\\r\\n\\tevent UpdateSphynxBridge(address sphynxBridge);\\r\\n\\tevent UpdateMaxTxAmount(uint256 txAmount);\\r\\n\\r\\n\\tconstructor() public BEP20('Sphynx ETH', 'SPHYNX') {\\r\\n\\t\\tuint256 _marketingFee = 5;\\r\\n\\t\\tuint256 _developmentFee = 5;\\r\\n\\t\\tuint256 _lotteryFee = 1;\\r\\n\\r\\n\\t\\tmarketingFee = _marketingFee;\\r\\n\\t\\tdevelopmentFee = _developmentFee;\\r\\n\\t\\tlotteryFee = _lotteryFee;\\r\\n\\t\\ttotalFees = _marketingFee.add(_developmentFee);\\r\\n\\t\\tblockNumber = 0;\\r\\n\\r\\n\\t\\tISphynxRouter02 _sphynxSwapRouter = ISphynxRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // mainnet\\r\\n\\t\\t// Create a sphynxswap pair for SPHYNX\\r\\n\\t\\taddress _sphynxSwapPair = ISphynxFactory(_sphynxSwapRouter.factory()).createPair(address(this), _sphynxSwapRouter.WETH());\\r\\n\\r\\n\\t\\tsphynxSwapRouter = _sphynxSwapRouter;\\r\\n\\t\\tsphynxSwapPair = _sphynxSwapPair;\\r\\n\\r\\n\\t\\t_setAutomatedMarketMakerPair(sphynxSwapPair, true);\\r\\n\\r\\n\\t\\t// exclude from paying fees or having max transaction amount\\r\\n\\t\\texcludeFromFees(marketingWallet, true);\\r\\n\\t\\texcludeFromFees(developmentWallet, true);\\r\\n\\t\\texcludeFromFees(address(this), true);\\r\\n\\t\\texcludeFromFees(owner(), true);\\r\\n\\r\\n\\t\\t// set getFee addresses\\r\\n\\t\\t_isGetFees[address(_sphynxSwapRouter)] = true;\\r\\n\\t\\t_isGetFees[_sphynxSwapPair] = true;\\r\\n\\t\\tpriceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\\r\\n\\r\\n\\t\\t_mint(owner(), 800000000 * (10**18));\\r\\n\\r\\n\\t\\t_status = _NOT_ENTERED;\\r\\n\\r\\n\\t\\t//multi-sign-wallets\\r\\n\\t\\tsigners[0x35BfE8dA53F94d6711F111790643D2D403992b56] = true;\\r\\n\\t\\tsigners[0x96C463B615228981A2c30B842E8A8e4e933CEc46] = true;\\r\\n\\t\\tsigners[0x7278fC9C49A2B6bd072b9d47E3c903ef0e12bb83] = true;\\r\\n\\t\\tsignersArray[0] = 0x35BfE8dA53F94d6711F111790643D2D403992b56;\\r\\n\\t\\tsignersArray[1] = 0x96C463B615228981A2c30B842E8A8e4e933CEc46;\\r\\n\\t\\tsignersArray[2] = 0x7278fC9C49A2B6bd072b9d47E3c903ef0e12bb83;\\r\\n\\t}\\r\\n\\r\\n\\treceive() external payable {}\\r\\n\\r\\n\\t// mint function for masterchef;\\r\\n\\tfunction mint(address to, uint256 amount) public onlyMasterChefAndBridge {\\r\\n\\t\\t_mint(to, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateSwapAndLiquifiy(bool value) public onlyManager {\\r\\n\\t\\tSwapAndLiquifyEnabled = value;\\r\\n\\t\\temit UpdateSwapAndLiquify(value);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateSendToLottery(bool value) public onlyManager {\\r\\n\\t\\tsendToLottery = value;\\r\\n\\t\\temit UpdateSendToLottery(value);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setMarketingFee(uint256 value) external onlyManager {\\r\\n\\t\\trequire(value <= 5, 'SPHYNX: Invalid marketingFee');\\r\\n\\t\\tmarketingFee = value;\\r\\n\\t\\ttotalFees = marketingFee.add(developmentFee);\\r\\n\\t\\temit SetMarketingFee(value);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setDevelopmentFee(uint256 value) external onlyManager {\\r\\n\\t\\trequire(value <= 5, 'SPHYNX: Invalid developmentFee');\\r\\n\\t\\tdevelopmentFee = value;\\r\\n\\t\\ttotalFees = marketingFee.add(developmentFee);\\r\\n\\t\\temit SetDevelopmentFee(value);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setLotteryFee(uint256 value) external onlyManager {\\r\\n\\t\\trequire(value <= 1, 'SPHYNX: Invalid lotteryFee');\\r\\n\\t\\tlotteryFee = value;\\r\\n\\t\\temit SetLotteryFee(value);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setAllFeeToZero() external onlyOwner {\\r\\n\\t\\tmarketingFee = 0;\\r\\n\\t\\tdevelopmentFee = 0;\\r\\n\\t\\tlotteryFee = 0;\\r\\n\\t\\ttotalFees = 0;\\r\\n\\t\\temit SetAllFeeToZero(marketingFee, developmentFee, lotteryFee);\\r\\n\\t}\\r\\n\\r\\n\\tfunction maxFees() external onlyOwner {\\r\\n\\t\\tmarketingFee = 5;\\r\\n\\t\\tdevelopmentFee = 5;\\r\\n\\t\\tlotteryFee = 1;\\r\\n\\t\\ttotalFees = marketingFee.add(developmentFee);\\r\\n\\t\\temit MaxFees(marketingFee, developmentFee, lotteryFee);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateSphynxSwapRouter(address newAddress) public onlyManager {\\r\\n\\t\\trequire(newAddress != address(sphynxSwapRouter), 'SPHYNX: The router already has that address');\\r\\n\\t\\temit UpdateSphynxSwapRouter(newAddress, address(sphynxSwapRouter));\\r\\n\\t\\tsphynxSwapRouter = ISphynxRouter02(newAddress);\\r\\n\\t\\taddress _sphynxSwapPair;\\r\\n\\t\\t_sphynxSwapPair = ISphynxFactory(sphynxSwapRouter.factory()).getPair(address(this), sphynxSwapRouter.WETH());\\r\\n\\t\\tif(_sphynxSwapPair == address(0)) {\\r\\n\\t\\t\\t_sphynxSwapPair = ISphynxFactory(sphynxSwapRouter.factory()).createPair(address(this), sphynxSwapRouter.WETH());\\r\\n\\t\\t}\\r\\n\\t\\t_setAutomatedMarketMakerPair(sphynxSwapPair, false);\\r\\n\\t\\tsphynxSwapPair = _sphynxSwapPair;\\r\\n\\t\\t_setAutomatedMarketMakerPair(sphynxSwapPair, true);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateMasterChef(address _masterChef) public onlyManager {\\r\\n\\t\\trequire(masterChef != _masterChef, 'SPHYNX: MasterChef already exists!');\\r\\n\\t\\tmasterChef = _masterChef;\\r\\n\\t\\temit UpdateMasterChef(_masterChef);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateSphynxBridge(address _sphynxBridge) public onlyManager {\\r\\n\\t\\trequire(sphynxBridge != _sphynxBridge, 'SPHYNX: SphynxBridge already exists!');\\r\\n\\t\\t_isExcludedFromFees[sphynxBridge] = false;\\r\\n\\t\\tsphynxBridge = _sphynxBridge;\\r\\n\\t\\t_isExcludedFromFees[sphynxBridge] = true;\\r\\n\\t\\temit UpdateSphynxBridge(_sphynxBridge);\\r\\n\\t}\\r\\n\\r\\n\\tfunction excludeFromFees(address account, bool excluded) public onlyManager {\\r\\n\\t\\trequire(_isExcludedFromFees[account] != excluded, \\\"SPHYNX: Account is already the value of 'excluded'\\\");\\r\\n\\t\\t_isExcludedFromFees[account] = excluded;\\r\\n\\r\\n\\t\\temit ExcludeFromFees(account, excluded);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setFeeAccount(address account, bool isGetFee) public onlyManager {\\r\\n\\t\\trequire(_isGetFees[account] != isGetFee, \\\"SPHYNX: Account is already the value of 'isGetFee'\\\");\\r\\n\\t\\t_isGetFees[account] = isGetFee;\\r\\n\\r\\n\\t\\temit GetFee(account, isGetFee);\\r\\n\\t}\\r\\n\\r\\n\\tfunction excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\\r\\n\\t\\tfor (uint256 i = 0; i < accounts.length; i++) {\\r\\n\\t\\t\\t_isExcludedFromFees[accounts[i]] = excluded;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit ExcludeMultipleAccountsFromFees(accounts, excluded);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setAutomatedMarketMakerPair(address pair, bool value) public onlyManager {\\r\\n\\t\\t_setAutomatedMarketMakerPair(pair, value);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n\\t\\trequire(automatedMarketMakerPairs[pair] != value, 'SPHYNX: Automated market maker pair is already set to that value');\\r\\n\\t\\tautomatedMarketMakerPairs[pair] = value;\\r\\n\\r\\n\\t\\temit SetAutomatedMarketMakerPair(pair, value);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setUsdAmountToSwap(uint256 _usdAmount) public onlyManager {\\r\\n\\t\\tusdAmountToSwap = _usdAmount;\\r\\n\\t\\temit SetUsdAmountToSwap(usdAmountToSwap);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateMarketingWallet(address newMarketingWallet) public onlyManager {\\r\\n\\t\\trequire(newMarketingWallet != marketingWallet, 'SPHYNX: The marketing wallet is already this address');\\r\\n\\t\\texcludeFromFees(newMarketingWallet, true);\\r\\n\\t\\texcludeFromFees(marketingWallet, false);\\r\\n\\t\\temit MarketingWalletUpdated(newMarketingWallet, marketingWallet);\\r\\n\\t\\tmarketingWallet = payable(newMarketingWallet);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateDevelopmentgWallet(address newDevelopmentWallet) public onlyManager {\\r\\n\\t\\trequire(newDevelopmentWallet != developmentWallet, 'SPHYNX: The development wallet is already this address');\\r\\n\\t\\texcludeFromFees(newDevelopmentWallet, true);\\r\\n\\t\\texcludeFromFees(developmentWallet, false);\\r\\n\\t\\temit DevelopmentWalletUpdated(newDevelopmentWallet, developmentWallet);\\r\\n\\t\\tdevelopmentWallet = payable(newDevelopmentWallet);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateLotteryAddress(address newLotteryAddress) public onlyManager {\\r\\n\\t\\trequire(newLotteryAddress != lotteryAddress, 'SPHYNX: The lottery wallet is already this address');\\r\\n\\t\\texcludeFromFees(newLotteryAddress, true);\\r\\n\\t\\texcludeFromFees(lotteryAddress, false);\\r\\n\\t\\temit LotteryAddressUpdated(newLotteryAddress, lotteryAddress);\\r\\n\\t\\tlotteryAddress = newLotteryAddress;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setBlockNumber() public onlyOwner {\\r\\n\\t\\tblockNumber = block.number;\\r\\n\\t\\temit SetBlockNumber(blockNumber);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateMaxTxAmount(uint256 _amount) public onlyManager {\\r\\n\\t\\tmaxTxAmount = _amount;\\r\\n\\t\\temit UpdateMaxTxAmount(_amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateTokenClaim(bool _claim) public onlyManager {\\r\\n\\t\\tclaimable = _claim;\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateStopTrade(bool _value) external onlySigner {\\r\\n\\t\\trequire(stopTrade != _value, 'already-set');\\r\\n\\t\\trequire(!stopTradeSign[msg.sender], 'already-sign');\\r\\n\\t\\tstopTradeSign[msg.sender] = true;\\r\\n        if (\\r\\n            stopTradeSign[signersArray[0]] &&\\r\\n            stopTradeSign[signersArray[1]] &&\\r\\n            stopTradeSign[signersArray[2]]\\r\\n        ) {\\r\\n\\t\\t\\tstopTrade = _value;\\r\\n\\t\\t\\tstopTradeSign[signersArray[0]] = false;\\r\\n\\t\\t\\tstopTradeSign[signersArray[1]] = false;\\r\\n\\t\\t\\tstopTradeSign[signersArray[2]] = false;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateSignerWallet(address _signer) external onlySigner {\\r\\n\\t\\tsigners[msg.sender] = false;\\r\\n\\t\\tsigners[_signer] = true;\\r\\n\\t\\tfor(uint i = 0; i < 3; i++) {\\r\\n\\t\\t\\tif(signersArray[i] == msg.sender) {\\r\\n\\t\\t\\t\\tsignersArray[i] = _signer;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction isExcludedFromFees(address account) public view returns (bool) {\\r\\n\\t\\treturn _isExcludedFromFees[account];\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transfer(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 amount\\r\\n\\t) internal override {\\r\\n\\t\\trequire(from != address(0), 'BEP20: transfer from the zero address');\\r\\n\\t\\trequire(to != address(0), 'BEP20: transfer to the zero address');\\r\\n\\t\\trequire(!stopTrade, 'trade-stopped');\\r\\n\\t\\trequire(amount <= maxTxAmount, 'max-tx-amount-overflow');\\r\\n\\r\\n\\t\\tif (amount == 0) {\\r\\n\\t\\t\\tsuper._transfer(from, to, 0);\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n        if(SwapAndLiquifyEnabled) {\\r\\n            uint256 contractTokenBalance = balanceOf(address(this));\\r\\n            uint256 nativeTokenAmount = _getTokenAmountFromNative();\\r\\n\\r\\n\\t\\t    bool canSwap = contractTokenBalance >= nativeTokenAmount;\\r\\n\\r\\n            if (canSwap && !swapping && !automatedMarketMakerPairs[from]) {\\r\\n                swapping = true;\\r\\n\\r\\n                // Set number of tokens to sell to nativeTokenAmount\\r\\n                contractTokenBalance = nativeTokenAmount;\\r\\n                swapTokens(contractTokenBalance);\\r\\n                swapping = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\t\\t// indicates if fee should be deducted from transfer\\r\\n\\t\\tbool takeFee = true;\\r\\n\\r\\n\\t\\t// if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n\\t\\tif (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\r\\n\\t\\t\\ttakeFee = false;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (takeFee) {\\r\\n\\t\\t\\tif (block.number - blockNumber <= 10) {\\r\\n\\t\\t\\t\\tuint256 afterBalance = balanceOf(to) + amount;\\r\\n\\t\\t\\t\\trequire(afterBalance <= 250000 * (10**18), 'Owned amount exceeds the maxOwnedAmount');\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tuint256 fees;\\r\\n\\t\\t\\tif (_isGetFees[from] || _isGetFees[to]) {\\r\\n\\t\\t\\t\\tif (block.number - blockNumber <= 5) {\\r\\n\\t\\t\\t\\t\\tfees = amount.mul(99).div(10**2);\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tfees = amount.mul(totalFees).div(10**2);\\r\\n\\t\\t\\t\\t\\tif (sendToLottery) {\\r\\n\\t\\t\\t\\t\\t\\tuint256 lotteryAmount = amount.mul(lotteryFee).div(10**2);\\r\\n\\t\\t\\t\\t\\t\\tamount = amount.sub(lotteryAmount);\\r\\n\\t\\t\\t\\t\\t\\tsuper._transfer(from, lotteryAddress, lotteryAmount);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tamount = amount.sub(fees);\\r\\n\\t\\t\\t\\tsuper._transfer(from, address(this), fees);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tsuper._transfer(from, to, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction swapTokens(uint256 tokenAmount) private {\\r\\n\\t\\tswapTokensForNative(tokenAmount);\\r\\n\\t\\tuint256 swappedNative = address(this).balance;\\r\\n\\t\\tuint256 marketingNative = swappedNative.mul(marketingFee).div(totalFees);\\r\\n\\t\\tuint256 developmentNative = swappedNative.sub(marketingNative);\\r\\n\\t\\ttransferNativeToMarketingWallet(marketingNative);\\r\\n\\t\\ttransferNativeToDevelopmentWallet(developmentNative);\\r\\n\\t}\\r\\n\\r\\n\\t// Swap tokens on PacakeSwap\\r\\n\\tfunction swapTokensForNative(uint256 tokenAmount) private {\\r\\n\\t\\t// generate the sphynxswap pair path of token -> WETH\\r\\n\\t\\taddress[] memory path = new address[](2);\\r\\n\\t\\tpath[0] = address(this);\\r\\n\\t\\tpath[1] = sphynxSwapRouter.WETH();\\r\\n\\r\\n\\t\\t_approve(address(this), address(sphynxSwapRouter), tokenAmount);\\r\\n\\r\\n\\t\\t// make the swap\\r\\n\\t\\tsphynxSwapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\ttokenAmount,\\r\\n\\t\\t\\t0, // accept any amount of Native\\r\\n\\t\\t\\tpath,\\r\\n\\t\\t\\taddress(this),\\r\\n\\t\\t\\tblock.timestamp\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getNativeAmountFromUSD() public view returns (uint256 amount) {\\r\\n\\t\\t(\\r\\n            uint80 roundID, \\r\\n            int price,\\r\\n            uint startedAt,\\r\\n            uint timeStamp,\\r\\n            uint80 answeredInRound\\r\\n        ) = priceFeed.latestRoundData();\\r\\n        amount = usdAmountToSwap.mul(10 ** 26).div(uint256(price));\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getTokenAmountFromNative() internal view returns (uint256) {\\r\\n\\t\\tuint256 tokenAmount;\\r\\n\\t\\taddress[] memory path = new address[](2);\\r\\n\\t\\tpath[0] = sphynxSwapRouter.WETH();\\r\\n\\t\\tpath[1] = address(this);\\r\\n\\r\\n\\t\\tuint256 nativeAmountToSwap = getNativeAmountFromUSD();\\r\\n\\t\\tuint256[] memory amounts = sphynxSwapRouter.getAmountsOut(nativeAmountToSwap, path);\\r\\n\\t\\ttokenAmount = amounts[1];\\r\\n\\t\\treturn tokenAmount;\\r\\n\\t}\\r\\n\\r\\n\\tfunction transferNativeToMarketingWallet(uint256 amount) private {\\r\\n\\t\\tmarketingWallet.transfer(amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction transferNativeToDevelopmentWallet(uint256 amount) private {\\r\\n\\t\\tdevelopmentWallet.transfer(amount);\\r\\n\\t}\\r\\n}\"\r\n    },\r\n    \"@sphynxswap/sphynx-swap-lib/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'Address: unable to send value, recipient may have reverted');\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, 'Address: low-level call failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), 'Address: call to non-contract');\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/sphynx-swap-lib/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/sphynx-swap-lib/contracts/access/Manageable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\nimport '../GSN/Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an manager) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the manager account will be the one that deploys the contract. This\\n * can later be changed with {transferManagement}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyManager`, which can be applied to your functions to restrict their use to\\n * the manager.\\n */\\ncontract Manageable is Context {\\n    address private _manager;\\n\\n    event ManagementTransferred(address indexed previousManager, address indexed newManager);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial manager.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _manager = msgSender;\\n        emit ManagementTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current manager.\\n     */\\n    function manager() public view returns (address) {\\n        return _manager;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        require(_manager == _msgSender(), 'Manageable: caller is not the manager');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without manager. It will not be possible to call\\n     * `onlyManager` functions anymore. Can only be called by the current manager.\\n     *\\n     * NOTE: Renouncing management will leave the contract without an manager,\\n     * thereby removing any functionality that is only available to the manager.\\n     */\\n    function renounceManagement() public onlyManager {\\n        emit ManagementTransferred(_manager, address(0));\\n        _manager = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers management of the contract to a new account (`newManager`).\\n     * Can only be called by the current manager.\\n     */\\n    function transferManagement(address newManager) public onlyManager {\\n        _transferManagement(newManager);\\n    }\\n\\n    /**\\n     * @dev Transfers management of the contract to a new account (`newManager`).\\n     */\\n    function _transferManagement(address newManager) internal {\\n        require(newManager != address(0), 'Manageable: new manager is the zero address');\\n        emit ManagementTransferred(_manager, newManager);\\n        _manager = newManager;\\n    }\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/sphynx-swap-lib/contracts/token/BEP20/BEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.0;\\n\\nimport '../../access/Ownable.sol';\\nimport '../../GSN/Context.sol';\\nimport './IBEP20.sol';\\nimport '../../math/SafeMath.sol';\\nimport '../../utils/Address.sol';\\n\\n/**\\n * @dev Implementation of the {IBEP20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {BEP20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of BEP20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IBEP20-approve}.\\n */\\ncontract BEP20 is Context, IBEP20, Ownable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external override view returns (address) {\\n        return owner();\\n    }\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() public override view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() public override view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() public override view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-totalSupply}.\\n     */\\n    function totalSupply() public override view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-balanceOf}.\\n     */\\n    function balanceOf(address account) public override view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {BEP20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public override view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {BEP20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {BEP20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(amount, 'BEP20: transfer amount exceeds allowance')\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {BEP20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {BEP20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(subtractedValue, 'BEP20: decreased allowance below zero')\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\\n     * the total supply.\\n     *\\n     * Requirements\\n     *\\n     * - `msg.sender` must be the token owner\\n     */\\n    function mint(uint256 amount) public onlyOwner returns (bool) {\\n        _mint(_msgSender(), amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `msg.sender`, decreasing the total supply.\\n     *\\n     */\\n    function burn(uint256 amount) public returns (bool) {\\n        _burn(_msgSender(), amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), 'BEP20: transfer from the zero address');\\n        require(recipient != address(0), 'BEP20: transfer to the zero address');\\n\\n        _balances[sender] = _balances[sender].sub(amount, 'BEP20: transfer amount exceeds balance');\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), 'BEP20: mint to the zero address');\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), 'BEP20: burn from the zero address');\\n\\n        _balances[account] = _balances[account].sub(amount, 'BEP20: burn amount exceeds balance');\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), 'BEP20: approve from the zero address');\\n        require(spender != address(0), 'BEP20: approve to the zero address');\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(\\n            account,\\n            _msgSender(),\\n            _allowances[account][_msgSender()].sub(amount, 'BEP20: burn amount exceeds allowance')\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/swap-core/contracts/interfaces/ISphynxPair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface ISphynxPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n    function swapFee() external view returns (uint32);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n    function setSwapFee(uint32) external;\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/swap-core/contracts/interfaces/ISphynxFactory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface ISphynxFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setSwapFee(address _pair, uint32 _swapFee) external;\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/swap-periphery/contracts/interfaces/ISphynxRouter02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './ISphynxRouter01.sol';\\n\\ninterface ISphynxRouter02 is ISphynxRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/swap-periphery/contracts/interfaces/ISphynxRouter01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface ISphynxRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint swapFee) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint swapFee) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract SphynxToken\",\"name\":\"_sphynx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sphynxPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDev\",\"type\":\"address\"}],\"name\":\"SetDev\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"changeToBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSphynx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSphynxPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sphynx\",\"outputs\":[{\"internalType\":\"contract SphynxToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sphynxPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_perBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplierNumber\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MasterChef","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000094dfd4e2210fa5b752c3cd0f381edad9da6640f8000000000000000000000000074222a8a5b6a155a80c533a54e3ef5ed267ae160000000000000000000000000000000000000000000000022b1c8c1227a000000000000000000000000000000000000000000000000000000000000000d4d1cc","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}