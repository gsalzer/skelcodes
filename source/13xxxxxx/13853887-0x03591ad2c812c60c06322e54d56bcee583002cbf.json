{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PresaleMerkle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\r\\ninterface IERC721Extended {\\r\\n    function purchaseMultipleFor(uint256 count, address to) external payable returns (uint256 id, uint256 purchased);\\r\\n    function giveawayMint(uint256 count, address to) external payable;\\r\\n}\\r\\n\\r\\ncontract PresaleMerkle is Ownable {\\r\\n\\r\\n    /**\\r\\n    * Merkle based whitelist and giveaway module. Works for any IERC721Extended contract \\r\\n    * CAUTION: This approach stores data based on the MERKLE ROOTS themselves. Because of this,\\r\\n    * be careful to AVOID using a previously used merkle root, as previous data could exist.\\r\\n    */\\r\\n\\r\\n\\r\\n    /********* WHITELIST **********/\\r\\n    // mapping of contract address to merkle root\\r\\n    mapping(address /* contractAddress */ => bytes32 /* merkleRoot */) whitelistMerkleRoots;\\r\\n    // maximum presale items per account\\r\\n    mapping(bytes32 /* merkleRoot */ => uint256 /*presaleLimit */) public whitelistLimits;\\r\\n    // mapping of contract addresses to mints per addresses\\r\\n    mapping(bytes32 /*merkleRoot*/ => mapping(address /* userAddress */ => uint256 /* numMinted */)) whitelistMintsPerMerkleRoot;\\r\\n\\r\\n    /********* GIVEAWAY **********/\\r\\n    // mapping of contract address to merkle root\\r\\n    mapping(address /* contractAddress */ => bytes32 /* merkleRoot */) giveawayMerkleRoots;\\r\\n   // maximum presale items per account\\r\\n    mapping(bytes32 /* contractAddress */ => uint256 /*presaleLimit */) public giveawayLimits;\\r\\n    // mapping of contract addresses to mints per addresses\\r\\n    mapping(bytes32 /*merkleRoot*/ => mapping(address /* userAddress */ => uint256 /* numMinted */)) giveawayMintsPerMerkleRoot;\\r\\n\\r\\n\\r\\n\\r\\n    constructor () {\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks whether current account is in the whitelist\\r\\n     */\\r\\n    function inMerkleTree(address addr, bytes32 merkleRoot, bytes32[] memory proof) public pure returns (bool) {\\r\\n        // create hash of leaf data, using target address\\r\\n        bytes32 leafHash = keccak256(abi.encodePacked(addr));\\r\\n        return MerkleProof.verify(proof, merkleRoot, leafHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev View function to check if in whitelist for contract\\r\\n     */\\r\\n    function inWhitelist(address user, address contractAddress, bytes32[] calldata proof) public view returns (bool) {\\r\\n        bytes32 root = whitelistMerkleRoots[contractAddress];\\r\\n        return inMerkleTree(user, root, proof);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev View function to check remaining whitelist mints\\r\\n     */\\r\\n    function whitelistMintsRemaining(address user, address contractAddress, bytes32[] calldata proof) public view returns (uint256) {\\r\\n        bytes32 root = whitelistMerkleRoots[contractAddress];\\r\\n   \\r\\n        if(inMerkleTree(user, root, proof)) {\\r\\n            uint256 mintLimit = whitelistLimits[root];\\r\\n            uint256 alreadyMinted = whitelistMintsPerMerkleRoot[root][user]; \\r\\n            return mintLimit - alreadyMinted;\\r\\n        }\\r\\n        // otherwise not in whitelist so return 0\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev View function to check if in giveaway for contract\\r\\n     */\\r\\n    function inGiveaway(address user, address contractAddress, bytes32[] calldata proof) public view returns (bool) {\\r\\n        bytes32 root = giveawayMerkleRoots[contractAddress];\\r\\n        return inMerkleTree(user, root, proof);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev View function to check remaining giveaway mints\\r\\n     */\\r\\n    function giveawayMintsRemaining(address user, address contractAddress, bytes32[] calldata proof) public view returns (uint256) {\\r\\n        bytes32 root = giveawayMerkleRoots[contractAddress];\\r\\n   \\r\\n        if(inMerkleTree(user, root, proof)) {\\r\\n            uint256 mintLimit = giveawayLimits[root];\\r\\n            uint256 alreadyMinted = giveawayMintsPerMerkleRoot[root][user];\\r\\n            return mintLimit - alreadyMinted;\\r\\n        }\\r\\n        // otherwise not in giveaway so return 0\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates whitelist based on a merkle root\\r\\n     *\\r\\n     */\\r\\n    function setWhitelist(bytes32 merkleRoot, address contractAddress, uint256 mintLimit) public onlyOwner {\\r\\n        whitelistMerkleRoots[contractAddress] = merkleRoot;\\r\\n        whitelistLimits[merkleRoot] = mintLimit;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates giveaway list based on a merkle root\\r\\n     *\\r\\n     */\\r\\n    function setGiveaway(bytes32 merkleRoot, address contractAddress, uint256 mintLimit) public onlyOwner {\\r\\n        giveawayMerkleRoots[contractAddress] = merkleRoot;\\r\\n        giveawayLimits[merkleRoot] = mintLimit;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Try to mint via whitelist\\r\\n     * Checks proof against merkle tree.\\r\\n     * @param to -- the address to mint the asset to. This allows for minting on someone's behalf if neccesary\\r\\n     * @param contractAddress -- the target token contract to mint from\\r\\n     * @param amount -- the num to mint\\r\\n     * @param proof -- the merkle proof for this address\\r\\n     */\\r\\n    function whitelistPurchase(address to, address contractAddress, uint256 amount, bytes32[] calldata proof) external payable {\\r\\n        // validate authorization via merkle proof\\r\\n        bytes32 merkleRoot = whitelistMerkleRoots[contractAddress];\\r\\n        require(inMerkleTree(to, merkleRoot, proof), \\\"PresaleMerkle: Invalid address or proof!\\\");\\r\\n\\r\\n        // validate still remaining mints\\r\\n        uint256 mintLimit = whitelistLimits[merkleRoot];\\r\\n        uint256 alreadyMinted = whitelistMintsPerMerkleRoot[merkleRoot][to];\\r\\n        require(alreadyMinted + amount <= mintLimit, \\\"PresaleMerkle: Too many mints.\\\");\\r\\n\\r\\n        // update mints\\r\\n        whitelistMintsPerMerkleRoot[merkleRoot][to] = alreadyMinted + amount;\\r\\n\\r\\n        // mint from contract, passing along eth\\r\\n        IERC721Extended tokenContract = IERC721Extended(contractAddress);\\r\\n        tokenContract.purchaseMultipleFor{value: msg.value}(amount, to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Try to mint via giveaway -- essnetially the same as whitelist, just different data stores\\r\\n     * Checks proof against merkle tree.\\r\\n     * @param to -- the address to mint the asset to. This allows for minting on someone's behalf if neccesary\\r\\n     * @param contractAddress -- the target token contract to mint from\\r\\n     * @param amount -- the num to mint\\r\\n     * @param proof -- the merkle proof for this address\\r\\n     */\\r\\n    function giveaway(address to, address contractAddress, uint256 amount, bytes32[] calldata proof) external {\\r\\n        // validate authorization via merkle proof\\r\\n        bytes32 merkleRoot = giveawayMerkleRoots[contractAddress];\\r\\n        require(inMerkleTree(to, merkleRoot, proof), \\\"PresaleMerkle: Invalid address or proof!\\\");\\r\\n\\r\\n        // validate mints\\r\\n        uint256 mintLimit = giveawayLimits[merkleRoot];\\r\\n        uint256 alreadyMinted = giveawayMintsPerMerkleRoot[merkleRoot][to];\\r\\n        require(alreadyMinted + amount <= mintLimit, \\\"PresaleMerkle: Too many mints.\\\");\\r\\n\\r\\n        // update mints\\r\\n        giveawayMintsPerMerkleRoot[merkleRoot][to] = alreadyMinted + amount;\\r\\n\\r\\n        // ask contract for giveaway\\r\\n        IERC721Extended tokenContract = IERC721Extended(contractAddress);\\r\\n        tokenContract.giveawayMint(amount, to);\\r\\n    }\\r\\n\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"giveaway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"giveawayLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"giveawayMintsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"inGiveaway\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"inMerkleTree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"inWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintLimit\",\"type\":\"uint256\"}],\"name\":\"setGiveaway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintLimit\",\"type\":\"uint256\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"whitelistLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistMintsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistPurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"PresaleMerkle","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}