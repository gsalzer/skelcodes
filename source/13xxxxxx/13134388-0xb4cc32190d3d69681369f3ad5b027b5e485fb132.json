{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/IDXStrategist.sol\": {\r\n      \"content\": \"// contracts/IDXStrategist.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"./interface/compound/CErc20.sol\\\";\\nimport \\\"./interface/compound/CEther.sol\\\";\\nimport \\\"./interface/compound/Comptroller.sol\\\";\\nimport \\\"./vaults/CompoundVault.sol\\\";\\n\\nimport \\\"./lib/CVault.sol\\\";\\n\\n/**\\n\\nIDX Digital Labs Strategist Smart Contract\\n\\nAuthor: Ian Decentralize\\n\\n  - CREATE VAULT\\n  - UPDATE VAULT FEES\\n  - BORROW FROM A VAULT \\n  - REPAY ON BEHALF OF A VAULT\\n  - LIQUIDATE A POSITION\\n  \\n Other Strategies in the process of...\\n\\n*/\\n\\ncontract IDXStrategist is\\n    Initializable\\n\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using CVaults for CVaults.CompVault;\\n\\n    CErc20 cCOMP;\\n    IERC20Upgradeable COMP;\\n\\n    address payable STRATEGIST;\\n    uint256 public vaultCount;\\n\\n    mapping(address => uint256) public vaultsIds;\\n    mapping(uint256 => CVaults.CompVault) public vaults;\\n\\n    CVaults.CompVault vaultRegistry;\\n \\n    mapping(address => address) public cTokenAddr;\\n    mapping(address => mapping(address => uint256)) avgIdx;\\n\\n    event VaultCreated(uint256 id, uint256 tier, address logic, address asset);\\n\\n    bytes32 STRATEGIST_ROLE;\\n    bytes32 VAULT_ROLE;\\n    bytes32 CONTROLLER_ROLE;\\n\\n     modifier onlyStrategist() {\\n        require(msg.sender == STRATEGIST);\\n        _;\\n    }\\n\\n    function initialize(address startegist) public initializer {\\n        STRATEGIST = payable(startegist);\\n        COMP = IERC20Upgradeable(0x61460874a7196d6a22D1eE4922473664b3E95270);\\n        cCOMP = CErc20(0x70e36f6BF80a52b3B46b3aF8e106CC0ed743E8e4);\\n    }\\n\\n    /// @notice Create and Deploy a new vault\\n    /// @dev Will add a contract vault to the vaults\\n    /// @param cToken collaterall token\\n    /// @param asset native asset\\n    /// @param tier tier access\\n    /// @param fees vault fees\\n    /// @param symbol the symbol of the vault (token)\\n\\n    function createVault(\\n        address deployer,\\n        CErc20 cToken,\\n        IERC20Upgradeable asset,\\n        IERC20Upgradeable protocolAsset,\\n        uint256 tier,\\n        uint256 fees,\\n        uint256 feeBase,\\n        string memory symbol\\n    ) public \\n      onlyStrategist\\n     {\\n      \\n        CVaults.CompVault storage vault = vaults[vaultCount];\\n        vault.id = vaultCount;\\n        vault.tier = tier;\\n        vault.lastClaimBlock = block.number;\\n        vault.accumulatedCompPerShare = 0;\\n        vault.fees = fees;\\n        vault.protocolAsset = IERC20Upgradeable(protocolAsset);\\n        vault.collateral = CErc20(cToken);\\n        vault.asset = IERC20Upgradeable(asset);\\n        vault.logic = new CompoundVault();\\n        vault.logic.initializeIt(\\n            address(this),\\n            deployer,\\n            address(cToken),\\n            address(asset),\\n            fees,\\n            feeBase,\\n            symbol\\n        );\\n\\n        vaultsIds[address(vault.logic)] = vaultCount;\\n        vaultCount += 1;\\n        emit VaultCreated(vault.id, vault.tier, address(vault.logic), address(asset));\\n    }\\n\\n    /// @notice Enter and exit Market con Com Vault\\n    /// @dev Borrowing from a vault increase it's yield in Comp\\n    function enterVaultMarket(address _vault, address cAsset) public onlyStrategist {\\n        CVaults.CompVault memory vault = vaults[vaultsIds[_vault]];\\n        vault.logic._enterCompMarket(cAsset);\\n    }\\n\\n    function exitCompMarket(address _vault, address cAsset) public onlyStrategist {\\n        CVaults.CompVault memory vault = vaults[vaultsIds[_vault]];\\n        vault.logic._exitCompMarket(cAsset);\\n    }\\n\\n    /// @notice Get Vault Return\\n    /// @dev Borrowing from a vault increase it's yield in Comp\\n    /// @param fromVault vault we borrow from\\n    /// @param asset asset to repay / must not be farming asset\\n    /// @param amount to repay\\n    /// @dev the funds must be in this contract\\n\\n    function _VaultSwap(\\n        address fromVault,\\n        address asset,\\n        address cToken,\\n        uint256 amount\\n    ) public onlyStrategist returns(bool){\\n        CVaults.CompVault memory vaultOut = vaults[vaultsIds[fromVault]];\\n        uint256 returnedAmount = vaultOut.logic._borrowComp(amount, cToken, asset);\\n        require(returnedAmount == amount, 'iStrategist : Borrow failed!');\\n        return true;\\n    }\\n\\n\\n    /// @notice REPAY IN A VAULT\\n    /// @dev The funds must be in the contract\\n    /// @param vaultAddress address of the vault\\n    /// @param cAsset asset to repay\\n    /// @param asset asset to repay\\n    /// @param amount to repay\\n    /// @dev the funds must be in this contract\\n\\n    function _RepayCompVaultValue(\\n        address vaultAddress,\\n        address cAsset,\\n        address asset,\\n        uint256 amount\\n    ) public onlyStrategist {\\n        CVaults.CompVault memory vault = vaults[vaultsIds[vaultAddress]];\\n        IERC20Upgradeable _asset = IERC20Upgradeable(asset);\\n        CErc20 _cAsset = CErc20(cAsset);\\n        _asset.safeApprove(address(_cAsset), amount);\\n        require(\\n            _cAsset.repayBorrowBehalf(address(vault.logic), amount) == 0,\\n            \\\"iStrategist : Repay failed!\\\"\\n        );\\n    }\\n\\n    /// @notice Liquidate an account on Compound.\\n    /// @dev fees are already deducted on the share value based on earning\\n    /// @param _borrower address of the vault\\n    /// @param _amount to be repayed\\n    /// @param _collateral the asset to be received\\n    /// @return value the amount transfered to this contract\\n\\n     function liquidateBorrow(address _borrower, uint _amount, address _collateral, address _repayed) \\n        public\\n        onlyStrategist\\n        returns (uint256)\\n    {   \\n        CErc20 repayedAsset = CErc20(_repayed);\\n        repayedAsset.approve(address(repayedAsset), _amount); \\n        return  repayedAsset.liquidateBorrow(_borrower, _amount, _collateral);\\n        \\n    }\\n\\n    /// @notice Redeem and Withdraw fees.\\n    /// @dev fees are already deducted on the share value based on earning\\n    /// @param _vaultAddress address of the vault\\n \\n    function collectFees(address _vaultAddress)\\n        public\\n        onlyStrategist \\n    {\\n        CVaults.CompVault memory vault = vaults[vaultsIds[_vaultAddress]];\\n        vault.logic.getFees();\\n        \\n    }\\n\\n    function withdrawERC20Fees(address _asset) public onlyStrategist {\\n          \\n           IERC20Upgradeable asset = IERC20Upgradeable(_asset);\\n           asset.transfer(msg.sender,asset.balanceOf(address(this)));\\n    }\\n\\n    function withdrawETHFees() public onlyStrategist {\\n          payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    // function changeStrategist(address newStrategist) public onlyStrategist {\\n    //      STRATEGIST = payable(newStrategist);\\n    // }\\n\\n\\n    /// @notice THIS VAULT ACCEPT ETHER\\n    receive() external payable {\\n        // nothing to do\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/compound/CErc20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface CErc20 {\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external view returns (uint);\\n\\n    function underlying() external view returns (address);\\n\\n    function getCash() external view returns (uint);\\n\\n    function supplyRatePerBlock() external view returns (uint);\\n\\n    function borrowRatePerBlock() external view returns (uint);\\n\\n    function totalBorrowsCurrent() external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function totalReserves() external view returns (uint);\\n\\n    function exchangeRateCurrent() external ;\\n\\n    function balanceOfUnderlying(address account) external view returns (uint);\\n\\n    function liquidateBorrow(address borrower, uint amount, address collateral) external returns (uint);\\n}\"\r\n    },\r\n    \"contracts/interface/compound/CEther.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface CEther {\\n    \\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function mint() external payable;\\n\\n    function redeem(uint) external returns (uint);\\n\\n    function redeemUnderlying(uint) external returns (uint);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n\\n    function borrow(uint borrowAmount) external returns (uint);\\n\\n    function repayBorrow() external payable;\\n\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n\\n    function getCash() external view returns (uint);\\n\\n    function supplyRatePerBlock() external view returns (uint);\\n\\n    function borrowRatePerBlock() external view returns (uint);\\n\\n    function totalBorrowsCurrent() external view returns (uint);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function totalReserves() external view returns (uint);\\n\\n    function exchangeRateCurrent() external;\\n\\n    function balanceOfUnderlying(address account) external view returns (uint);\\n\\n    function liquidateBorrow(address borrower, uint amount, address collateral) external returns (uint);\\n\\n}\"\r\n    },\r\n    \"contracts/interface/compound/Comptroller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface Comptroller {\\n\\n    function enterMarkets(address[] calldata) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    function claimComp(address holder, address[] calldata) external;\\n\\n    function getAssetsIn(address account) external view returns (address[] memory);\\n\\n    function markets(address cTokenAddress) external view returns (bool, uint, bool);\\n\\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\\n\\n    function liquidationIncentiveMantissa() external view returns (uint);\\n\\n    function closeFactorMantissa() external returns (uint);\\n\\n}\"\r\n    },\r\n    \"contracts/vaults/CompoundVault.sol\": {\r\n      \"content\": \"// CompoundVault.sol\\n// SPDX-License-Identifier: MIT\\n\\n/**\\n        IDX Digital Labs Earning Protocol.\\n        Compound Vault Strategist\\n        Gihub :\\n        Testnet : \\n\\n */\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/compound/Comptroller.sol\\\";\\nimport \\\"../interface/compound/CErc20.sol\\\";\\nimport \\\"../interface/compound/CEther.sol\\\";\\nimport \\\"../interface/IStrategist.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\n\\ncontract CompoundVault is\\n    Initializable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    enum vaultOwnershp {IDXOWNED, PUBLIC, PRIVATE}\\n\\n    address public ETHER;\\n    address public COMP;\\n    address public collateral;\\n    address public farming;\\n    address public strategist;\\n    address public deployer;\\n    uint256 public fees;\\n    uint256 public feeBase;\\n    uint256 public startBlock;\\n    uint256 public lastClaimBlock;\\n    uint256 public accumulatedCompPerShare;\\n    string public version;\\n    string public symbol;\\n\\n\\n    mapping(address => uint256) public shares;                  // in USD\\n    mapping(address => uint256) public collaterals;             // in Ctoken\\n    mapping(address => uint256) public CompShares;\\n\\n    bytes32 STRATEGIST_ROLE;\\n    StrategistProxy STRATEGIST;\\n    Comptroller comptroller;\\n\\n    event Mint(address asset, uint256 amount);\\n    event Redeem(address asset, uint256 amount);\\n    event CompoundClaimed(address caller, uint256 amount);\\n    event Borrowed(address asset, uint256 amount);\\n\\n    /// @notice Initializer\\n    /// @dev Constructor for Upgradeable Contract\\n    /// @param _strategist adress of the strategist contract the deployer\\n\\n    function initializeIt(\\n        address _strategist,\\n        address _deployer,\\n        address _compoundedAsset,\\n        address _underlyingAsset,\\n        uint256 _protocolFees,\\n        uint256 _feeBase,\\n        string memory _symbol\\n    ) public initializer {\\n        __Pausable_init();\\n        __AccessControl_init();\\n        STRATEGIST_ROLE = keccak256(\\\"STRATEGIST_ROLE\\\");\\n        _setupRole(STRATEGIST_ROLE, _strategist);\\n        strategist = _strategist;\\n        deployer = _deployer;\\n        fees = _protocolFees;\\n        feeBase = _feeBase;\\n        collateral = _compoundedAsset;\\n        farming = _underlyingAsset;\\n        COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\\n        comptroller = Comptroller(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\\n        version = \\\"1.0\\\";\\n        symbol = _symbol;\\n        STRATEGIST = StrategistProxy(_strategist);\\n        _enterCompMarket(_compoundedAsset);\\n    }\\n\\n    /// @notice Mint idxComp.\\n    /// @dev Must be approved\\n    /// @param _amount The amount to deposit that must be approved in farming asset\\n    /// @return returnedCollateral the amount minted\\n\\n    function mint(uint256 _amount)\\n        public\\n        payable\\n        whenNotPaused\\n        returns (uint256 returnedCollateral)\\n    {\\n        IERC20Upgradeable asset = IERC20Upgradeable(farming);\\n        claimComp();\\n\\n        if (farming == ETHER) {\\n            require(msg.value > 0, \\\"iCOMP : Zero Ether!\\\");\\n            returnedCollateral = buyETHPosition(msg.value);\\n            shares[msg.sender] += msg.value;\\n        } else if (farming != ETHER) {\\n            require(_amount > 0, \\\"iCOMP : Zero Amount!\\\");\\n            require(\\n                asset.allowance(msg.sender, address(this)) >= _amount,\\n                \\\"iCOMP : Insuficient allowance!\\\"\\n            );\\n\\n            require(\\n                asset.transferFrom(msg.sender, address(this), _amount),\\n                \\\"iCOMP : Transfer failled!\\\"\\n            );\\n            returnedCollateral = buyERC20Position(_amount);\\n            shares[msg.sender] += _amount;\\n        }\\n\\n        collaterals[msg.sender] += returnedCollateral;\\n        \\n        emit Mint(farming, _amount);\\n\\n        return returnedCollateral;\\n    }\\n\\n    /// @notice Redeem your investement\\n    /// @dev require approval\\n    /// @param _amount the amount in native asset\\n    function redeem(uint256 _amount) external whenNotPaused returns (uint256 transferedAmount) {\\n        require(_amount > 0, \\\"iCOMP : Zero Amount!\\\");\\n           claimComp();\\n          \\n           CompShares[msg.sender] += (_amount * accumulatedCompPerShare / 1e18);   \\n          if(farming == ETHER){\\n                CEther(collateral).exchangeRateCurrent();\\n          }else{\\n                CErc20(collateral).exchangeRateCurrent();\\n          }\\n            \\n        // the the math\\n        uint256[] memory receipt = _vaultComputation(_amount);\\n        require(receipt[0] != 1, \\\"iCOMP : Overflow\\\");\\n\\n        require(\\n            collaterals[msg.sender] >= (receipt[1] + receipt[2]),\\n            \\\"iCOMP : Insufucient collaterals!\\\"\\n        );\\n        // if there was fees\\n        if(receipt[1] > 0){\\n           collaterals[strategist] += receipt[1];\\n        }\\n        \\n        collaterals[msg.sender] -= (receipt[1] + receipt[2]) ;\\n        \\n        if (farming == ETHER) {\\n            transferedAmount = sellETHPosition(receipt[2]);\\n\\n            payable(msg.sender).transfer(transferedAmount);\\n        } else if (farming != ETHER) {\\n            IERC20Upgradeable asset = IERC20Upgradeable(farming);\\n            transferedAmount = sellERC20Position(receipt[2]);\\n        \\n            asset.transfer(msg.sender, transferedAmount);\\n        }\\n          if(transferedAmount >= shares[msg.sender]) {\\n              shares[msg.sender] = 0;\\n          }\\n          else{\\n              shares[msg.sender] -= transferedAmount;\\n          }\\n\\n        emit Redeem(farming, transferedAmount);\\n\\n        return transferedAmount;\\n    }\\n\\n    /// @notice BUY ERC20 Position\\n    /// @dev buy a position\\n    /// @param _amount the amount to deposit in IDXVault\\n    /// @return returnedAmount in collateral shares\\n\\n    function buyERC20Position(uint256 _amount)\\n        internal\\n        whenNotPaused\\n        returns (uint256 returnedAmount)\\n    {\\n        CErc20 cToken = CErc20(collateral);\\n        IERC20Upgradeable asset = IERC20Upgradeable(farming);\\n        uint256 balanceBefore = cToken.balanceOf(address(this));\\n        asset.safeApprove(address(cToken), _amount);\\n        assert(cToken.mint(_amount) == 0);\\n        uint256 balanceAfter = cToken.balanceOf(address(this));\\n        returnedAmount = balanceAfter - balanceBefore;\\n\\n        return returnedAmount;\\n    }\\n\\n    /// @notice BUY ETH Position\\n    /// @dev\\n    /// @param _amount the amount to deposit in IDXVault\\n    /// @return returnedAmount in collateral shares\\n\\n    function buyETHPosition(uint256 _amount)\\n        internal\\n        whenNotPaused\\n        returns (uint256 returnedAmount)\\n    {\\n        CEther cToken = CEther(collateral);\\n        uint256 balanceBefore = cToken.balanceOf(address(this));\\n        cToken.mint{value: _amount}();\\n        uint256 balanceAfter = cToken.balanceOf(address(this));\\n        returnedAmount = balanceAfter - balanceBefore;\\n\\n        return returnedAmount;\\n    }\\n\\n    /// @notice SELL ERC20 Position\\n    /// @dev will get the current rate to sell position at current price.\\n    /// @param _amount the amount in collateralls\\n    /// @return returnedAmount is in native asset\\n\\n    function sellERC20Position(uint256 _amount)\\n        internal\\n        whenNotPaused\\n        returns (uint256 returnedAmount)\\n    {\\n        CErc20 cToken = CErc20(collateral);\\n        IERC20Upgradeable asset = IERC20Upgradeable(farming);\\n        // we want latest rate\\n        uint256 balanceB = asset.balanceOf(address(this));\\n        cToken.approve(address(cToken), _amount);\\n        require(cToken.redeem(_amount) == 0, \\\"iCOMP : CToken Redeemed Error?\\\");\\n        uint256 balanceA = asset.balanceOf(address(this));\\n        returnedAmount = balanceA - balanceB;\\n\\n        return returnedAmount; //in ERC20 native asset\\n    }\\n\\n    /// @notice SELL ERC20 Position\\n    /// @dev will get the current rate to sell position at current price.\\n    /// @param _amount in USD\\n    /// @return returnedAmount in ETH based on balance\\n\\n    function sellETHPosition(uint256 _amount)\\n        internal\\n        whenNotPaused\\n        returns (uint256 returnedAmount)\\n    {\\n        CEther cToken = CEther(collateral);\\n        uint256 balanceBefore = address(this).balance;\\n\\n        cToken.approve(address(cToken), _amount);\\n        require(\\n            cToken.redeem(_amount) == 0,\\n            \\\"iCOMP : CToken Redeemed Error?\\\"\\n        );\\n        uint256 balanceAfter = address(this).balance;\\n        returnedAmount = balanceAfter - balanceBefore;\\n\\n        return returnedAmount; // in Ether\\n    }\\n\\n    function _vaultComputation(uint256 _amount)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n\\n        uint256[] memory txData = new uint256[](4);\\n        uint256 rate;\\n\\n        if(farming == ETHER){\\n            CEther token = CEther(collateral);\\n            rate = token.exchangeRateStored();\\n\\n        }else{\\n           CErc20 token = CErc20(collateral);\\n           rate = token.exchangeRateStored();\\n\\n        }\\n        \\n        uint256 underlyingMax = (rate * collaterals[msg.sender]) / 1e18;\\n\\n        // if we have the available funds\\n        if (underlyingMax >= _amount) {\\n            // if the amount is not exceeding what available\\n\\n            uint256 gainQuotient = quotient(\\n                underlyingMax,\\n                shares[msg.sender],\\n                18\\n            );\\n            uint256 amountWithdraw = _getCollateralAmount(\\n                (gainQuotient * _amount) / 1e18\\n            );\\n            uint256 deductedFees = _getCollateralAmount(\\n                ((((gainQuotient * _amount) / 1e18) - _amount) / feeBase) * fees\\n            );\\n            uint256 shareConsumed = (rate * (amountWithdraw + deductedFees)) /\\n                1e18;\\n\\n            if (amountWithdraw + deductedFees <= collaterals[msg.sender]) {\\n\\n                txData[0] = 0; // 0 error\\n                txData[1] = deductedFees; // the fees in collateral\\n                txData[2] = amountWithdraw; // the collateral amount redeeam/burned must remove fee but not burn\\n                txData[3] = shareConsumed;\\n            } else if (amountWithdraw + deductedFees > collaterals[msg.sender]) {\\n                // we take the maxAvailable\\n                gainQuotient = quotient(underlyingMax, shares[msg.sender], 18); // must be very low\\n                amountWithdraw = _getCollateralAmount(\\n                    (gainQuotient * shares[msg.sender]) / 1e18\\n                );\\n\\n                deductedFees = collaterals[msg.sender] - amountWithdraw; \\n                shareConsumed = (rate * collaterals[msg.sender]) / 1e18;\\n\\n                txData[0] = 2;\\n                txData[1] = deductedFees;\\n                txData[2] = amountWithdraw;\\n                txData[3] = shareConsumed;\\n            }\\n        }\\n        else {\\n            txData[0] = 1;\\n            \\n        }\\n\\n        return txData;\\n    }\\n\\n\\n\\n\\n    function quotient(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 precision\\n    ) internal pure returns (uint256 _quotient) {\\n        uint256 _numerator = numerator * 10**(precision + 1);\\n        _quotient = ((_numerator / denominator) + 5) / 10;\\n        return (_quotient);\\n    }\\n\\n\\n    /// @notice Get the collaterall amount expected\\n    /// @dev\\n    /// @param _amount the amount in farming asset\\n    /// @return collateralAmount : The amount of cToken for the input amount in farmed asset\\n\\n    function _getCollateralAmount(uint256 _amount)\\n        public\\n        view\\n        returns (uint256 collateralAmount)\\n    {   \\n        if(farming == ETHER){\\n            collateralAmount = (_amount * 1e18) / CEther(collateral).exchangeRateStored();\\n        }else{\\n            collateralAmount = (_amount * 1e18) / CErc20(collateral).exchangeRateStored();\\n        }\\n        \\n        return collateralAmount;\\n    }\\n\\n    /// @notice Get the collaterall amount expected\\n    /// @dev\\n    /// @param _amount in cToken\\n    /// @return assetAmount : The amount of cToken for the input amount in farmed asset\\n\\n    function _getAssetAmount(uint256 _amount)\\n        public\\n        view\\n        returns (uint256 assetAmount)\\n    {\\n\\n        if(farming == ETHER){\\n             assetAmount = CEther(collateral).exchangeRateStored() * _amount / 1e18;\\n        }else{\\n             assetAmount = CErc20(collateral).exchangeRateStored() * _amount / 1e18;\\n        }\\n      \\n        return assetAmount;\\n    }\\n\\n\\n    /// @notice Comp Shares Distribution\\n    /// @dev\\n\\n    function claimComp() internal whenNotPaused returns (uint256 amountClaimed) {\\n         CErc20 supplyAsset = CErc20(collateral);\\n        uint256 supply = supplyAsset.balanceOf(address(this));\\n         \\n        if(supply == 0){\\n\\n            return 0;\\n        }\\n        \\n        address[] memory cTokens = new address[](1);\\n        cTokens[0] = collateral;\\n\\n        IERC20Upgradeable Comp = IERC20Upgradeable(COMP);\\n        uint256 cBalanceBefore = Comp.balanceOf(address(this));\\n\\n        if(farming == ETHER){\\n            comptroller.claimComp(address(this), cTokens);\\n        }else{\\n            comptroller.claimComp(address(this), cTokens);\\n        }\\n\\n        uint256 cBalanceAfter = Comp.balanceOf(address(this));\\n        amountClaimed = cBalanceAfter - cBalanceBefore;\\n\\n        accumulatedCompPerShare += amountClaimed * 1e18 / supply;\\n\\n        emit CompoundClaimed(msg.sender, amountClaimed);\\n\\n        return amountClaimed; \\n    }\\n\\n\\n    function claimMyComp() public {\\n        require(CompShares[msg.sender]>0,'iCOMP : No shares!');\\n        IERC20Upgradeable Comp = IERC20Upgradeable(COMP);\\n\\n        uint256 CompReward = CompShares[msg.sender];\\n        uint256 CompFees = CompReward / feeBase * fees; \\n        uint256 transfered = CompReward - CompFees;\\n\\n        if(transfered > Comp.balanceOf(address(this))){\\n            Comp.transfer(msg.sender, Comp.balanceOf(address(this)));\\n\\n        }else{\\n           Comp.transfer(msg.sender, transfered);\\n        }\\n        Comp.transfer(msg.sender,transfered);\\n        CompShares[msg.sender] = 0;\\n        Comp.transfer(strategist, CompFees);\\n\\n    }\\n\\n    /// @notice ENTER COMPOUND MARKET ON DEPLOYMENT\\n    /// @param cAsset Exiting market for unused asset will lower the TX cost with Compound\\n    /// @dev For strategist\\n\\n    function _enterCompMarket(address cAsset) public {\\n        require(hasRole(STRATEGIST_ROLE, msg.sender), \\\"iCOMP : Unauthorized?\\\");\\n        address[] memory cTokens = new address[](1);\\n        cTokens[0] = cAsset;\\n        uint256[] memory errors = comptroller.enterMarkets(cTokens);\\n        require(errors[0] == 0, \\\"iCOMP : Market Fail\\\");\\n    }\\n\\n    /// @notice EXIT COMPOUND MARKET.\\n    /// @param cAsset Exiting market for unused asset will lower the TX cost with Compound\\n    function _exitCompMarket(address cAsset) public {\\n        require(hasRole(STRATEGIST_ROLE, msg.sender), \\\"iCOMP : Unauthorized?\\\");\\n        uint256 errors = comptroller.exitMarket(cAsset);\\n        require(errors == 0, \\\"Exit CMarket?\\\");\\n    }\\n\\n    // @notice EXIT COMPOUND MARKET.\\n    /// @param amount the amount to borrow\\n    /// @param cAsset the asset to borrow\\n    /// @dev funds are sent to strategist. The startegist can use the repayOnBehalf of this vault.\\n\\n    function _borrowComp(\\n        uint256 amount,\\n        address cAsset,\\n        address asset\\n    ) external whenNotPaused returns (uint256 borrowed) {\\n        require(hasRole(STRATEGIST_ROLE, msg.sender), \\\"iCOMP : Unauthorized?\\\");\\n        IERC20Upgradeable token = IERC20Upgradeable(asset);\\n        uint256 balanceBefore = token.balanceOf(address(this));\\n        if(farming == ETHER){\\n            CEther cToken = CEther(cAsset);\\n            require(cToken.borrow(amount) == 0, \\\"got collateral?\\\");\\n        }else{\\n            CErc20 cToken = CErc20(cAsset);\\n            require(cToken.borrow(amount) == 0, \\\"got collateral?\\\");\\n        }\\n\\n        uint256 balanceAfter = token.balanceOf(address(this));\\n        borrowed = balanceAfter - balanceBefore;\\n        token.transfer(address(STRATEGIST), borrowed);\\n\\n        emit Borrowed(asset, amount);\\n        return borrowed;\\n    }\\n\\n    /// @notice SET VAULT FEES.\\n    /// @param _fees the fees in %\\n    /// @dev base3 where  200 = 2%\\n\\n    function setFees(uint256 _fees) external {\\n        require(hasRole(STRATEGIST_ROLE, msg.sender), \\\"iCOMP : Unauthorized?\\\");\\n        fees = _fees;\\n    }\\n\\n    /// @notice Strategist fees.\\n  \\n    function getFees() external {\\n        require(hasRole(STRATEGIST_ROLE, msg.sender), \\\"iCOMP : Unauthorized?\\\");\\n         uint256 feeCollected;\\n        if(farming == ETHER){\\n            CEther cToken = CEther(collateral);\\n            cToken.approve(address(cToken), collaterals[strategist]);\\n            feeCollected = sellETHPosition(collaterals[strategist]);\\n            payable(strategist).transfer(feeCollected);\\n\\n        }else{\\n              IERC20Upgradeable asset = IERC20Upgradeable(farming);\\n              CErc20 cToken = CErc20(collateral);  \\n              cToken.approve(address(cToken), collaterals[strategist]);  \\n              sellERC20Position(collaterals[strategist]);\\n              feeCollected = sellERC20Position(collaterals[strategist]);\\n              asset.transfer(strategist, feeCollected);\\n        }       \\n               collaterals[strategist] = 0;\\n    }\\n\\n\\n    /// @notice THIS VAULT ACCEPT ETHER\\n    receive() external payable {\\n        // nothing to do\\n    }\\n\\n    /// @notice SECURITY.\\n\\n    /// @notice pause or unpause.\\n    /// @dev Security feature to use with Defender for vault monitoring\\n\\n    function pause() public whenNotPaused {\\n        require(\\n            hasRole(STRATEGIST_ROLE, msg.sender),\\n            \\\"iCOMP : Unauthorized to pause\\\"\\n        );\\n        _pause();\\n    }\\n\\n    function unpause() public whenPaused {\\n        require(\\n            hasRole(STRATEGIST_ROLE, msg.sender),\\n            \\\"iCOMP : Unauthorized to unpause\\\"\\n        );\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/CVault.sol\": {\r\n      \"content\": \"// lib/IDXStrategist.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/compound/CErc20.sol\\\";\\nimport \\\"../interface/compound/CEther.sol\\\";\\nimport \\\"../interface/compound/Comptroller.sol\\\";\\nimport \\\"../vaults/CompoundVault.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n\\n\\nlibrary CVaults{\\n\\nstruct  CompVault {\\n        uint256 id;\\n        uint256 tier;\\n        uint256 lastClaimBlock;\\n        uint256 fees;\\n        uint256 feeBase;\\n        uint256 mentissa;\\n        uint256 accumulatedCompPerShare;\\n        CompoundVault logic;\\n        IERC20Upgradeable asset;\\n        CErc20 collateral;\\n        IERC20Upgradeable protocolAsset;\\n        address protocollCollateral;\\n        address creator;\\n    }\\n\\n\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IStrategist.sol\": {\r\n      \"content\": \"// CompoundVault.sol\\n// SPDX-License-Identifier: MIT\\n\\n/**\\n        IDX Digital Labs Earning Protocol.\\n        Compound Vault Strategist\\n        Gihub :\\n        Testnet : \\n\\n */\\npragma solidity ^0.8.0;\\n\\ninterface StrategistProxy {\\n    \\n    function _getVaultReturn(address vaultAddress, address account)\\n        external\\n        view\\n        returns (uint256[] memory strategistData);\\n\\n    function updateCompoundVault(address vault) external;\\n\\n    function getCurrentRate(address vaultAddress)\\n        external\\n        view\\n        returns (uint256 price);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"VaultCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_RepayCompVaultValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_VaultSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"contract CErc20\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"protocolAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBase\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cAsset\",\"type\":\"address\"}],\"name\":\"enterVaultMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cAsset\",\"type\":\"address\"}],\"name\":\"exitCompMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"startegist\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_repayed\",\"type\":\"address\"}],\"name\":\"liquidateBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mentissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedCompPerShare\",\"type\":\"uint256\"},{\"internalType\":\"contract CompoundVault\",\"name\":\"logic\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"contract CErc20\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"protocolAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocollCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultsIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdrawERC20Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETHFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"IDXStrategist","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}