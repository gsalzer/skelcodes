{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"LandSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\n\\ninterface ILand {\\n  function totalSupply() external view returns (uint256);\\n  function maximumSupply() external view returns (uint256);\\n  function mintToken(address account, uint256 count) external;\\n  function burnLastToken(address account) external;\\n}\\n\\ncontract LandSale is Ownable, ReentrancyGuard {\\n  using SafeMath for uint256;\\n\\n  struct Purchase {\\n    uint256 count;\\n    uint256 price;\\n  }\\n\\n  // Land-DAO token contract interface\\n  ILand public tokenContract;\\n\\n  // Stores the allowed minting count and token price for each whitelisted address\\n  mapping (address =\\u003e Purchase) private _allowances;\\n  // Stores the list of purchases along with the pricing\\n  mapping (address =\\u003e Purchase[]) private _purchases;\\n\\n  // Indicates the number of fund addresses (including treasury)\\n  uint8 constant _fundsAddressCount = 5;\\n  // Stores the total amount of owed (unlocked) funds for the founders\\n  uint256 public unlockedFunds;\\n  // Stores the total amount of owed (locked) funds for the founders\\n  uint256 public lockedFunds;\\n  // Stores the total amount of owed funds for the treasury\\n  uint256 public reserveFunds;\\n  // Stores the list of addresses owned by the reserve (at 0-index) and founders\\n  address[] public fundsAddresses;\\n  // Stores the timestamp on which the locked funds can be withdrawn\\n  uint256 public fundsUnlockTimestamp;\\n\\n  constructor() {\\n    // By default, all founder addresses are set to the owner\\n    for (uint8 i = 0; i \\u003c _fundsAddressCount; i++) {\\n      fundsAddresses.push(msg.sender);\\n    }\\n  }\\n\\n  // Add this modifier to all functions which are only accessible by the finance related addresses\\n  modifier onlyFinance() {\\n    require(msg.sender == fundsAddresses[0] ||\\n    msg.sender == fundsAddresses[1] ||\\n    msg.sender == fundsAddresses[2] ||\\n    msg.sender == fundsAddresses[3] ||\\n    msg.sender == fundsAddresses[4], \\\"Unauthorized Access\\\");\\n    _;\\n  }\\n\\n\\n  function setTokenContract(address _newTokenContract) external onlyOwner {\\n    require(_newTokenContract != address(0), \\\"Invalid Address\\\");\\n    tokenContract = ILand(_newTokenContract);\\n  }\\n\\n  function setFundsAddress(uint8 _index, address _address) external onlyOwner {\\n    require(_address != address(0), \\\"Invalid Address\\\");\\n    require(_index \\u003e= 0 \\u0026\\u0026 _index \\u003c _fundsAddressCount, \\\"Invalid Index\\\");\\n    fundsAddresses[_index] = _address;\\n  }\\n\\n  // Set the allowance for the specified address\\n  function setAllowance(address _address, uint256 _count, uint256 _price) public onlyOwner {\\n    require(_address != address(0), \\\"Invalid Address\\\");\\n    _allowances[_address] = Purchase(_count, _price);\\n  }\\n\\n  // Set the allowance for the specified address\\n  function batchSetAllowances(\\n    address[] calldata _addresses,\\n    uint256[] calldata _counts,\\n    uint256[] calldata _prices\\n  ) external onlyOwner {\\n    uint256 count = _addresses.length;\\n\\n    for (uint8 i = 0; i \\u003c count; i++) {\\n      setAllowance(_addresses[i], _counts[i], _prices[i]);\\n    }\\n  }\\n\\n  // Get the allowance for the specified address\\n  function allowance(address _address) public view returns (\\n    uint256 count,\\n    uint256 price\\n  ) {\\n    Purchase memory _allowance = _allowances[_address];\\n    count = _allowance.count;\\n    price = _allowance.price;\\n  }\\n\\n  // Set the UNIX timestamp for the funds unlock time\\n  function setFundsUnlockTimestamp(uint256 _unlock) external onlyOwner {     \\n    fundsUnlockTimestamp = _unlock;\\n  }\\n\\n  // Handles token purchases\\n  receive() external payable nonReentrant {\\n    // Check if tokens are still available for sale\\n    uint256 remainingTokenCount = tokenContract.maximumSupply() - tokenContract.totalSupply();\\n    require(remainingTokenCount \\u003e 0, \\\"Sold Out\\\");\\n\\n    // Check if sufficient funds are sent, and that the address is whitelisted (has valid allowance)\\n    // with enough funds to purchase at least 1 token\\n    uint256 accountLimit;\\n    uint256 tokenPrice;\\n    (accountLimit, tokenPrice) = allowance(msg.sender);\\n    require(accountLimit \\u003e 0, \\\"Not Whitelisted For The Sale Or Insufficient Allowance\\\");\\n    require(msg.value \\u003e= tokenPrice, \\\"Insufficient Funds\\\");\\n\\n    // Calculate the actual amount of tokens to be minted, which must be within the set limits\\n    uint256 specifiedAmount = (tokenPrice == 0 ? accountLimit : msg.value.div(tokenPrice));\\n    uint256 actualAmount = (specifiedAmount \\u003e accountLimit ? accountLimit : specifiedAmount);\\n    actualAmount = (remainingTokenCount \\u003c actualAmount ? remainingTokenCount : actualAmount);\\n    _allowances[msg.sender].count -= actualAmount;\\n    tokenContract.mintToken(msg.sender, actualAmount);\\n\\n    uint256 totalSpent = actualAmount.mul(tokenPrice);\\n    if (totalSpent \\u003e 0) {\\n      // Update the total received funds for the founders\\u0027 share (95%)\\n      // Half of which are locked for 30 days after the end of the sale\\n      uint256 totalFounderShare = totalSpent.mul(95).div(100);\\n      uint256 lockedShare = totalFounderShare.div(2);\\n      uint256 unlockedShare = totalFounderShare.sub(lockedShare);\\n      lockedFunds = lockedFunds.add(lockedShare);\\n      unlockedFunds = unlockedFunds.add(unlockedShare);\\n\\n      // 0-index is reserved for the treasury (5%) fully unlocked\\n      reserveFunds = reserveFunds.add(totalSpent.sub(totalFounderShare));\\n\\n      _purchases[msg.sender].push(Purchase(actualAmount, tokenPrice));\\n    }\\n\\n    // Calculate any excess/unspent funds and transfer it back to the buyer\\n    uint256 unspent = msg.value.sub(totalSpent);\\n    if (unspent \\u003e 0) {\\n      payable(msg.sender).transfer(unspent);\\n    }\\n  }\\n\\n  // Handles refund requests which would send back 50% of the price at the time of purchase\\n  // and also subsequently burn the last token minted for the address\\n  function refund() external nonReentrant {\\n    require(_purchases[msg.sender].length \\u003e 0, \\\"No Refund Available\\\");\\n    Purchase memory purchase = _purchases[msg.sender][_purchases[msg.sender].length - 1];\\n    uint256 refundAmount = purchase.price.div(2);\\n    require(refundAmount \\u003c= lockedFunds, \\\"Insufficient Funds Available\\\");\\n\\n    // Update the purchase records and burn the token\\n    if (purchase.count \\u003e 1) {\\n      _purchases[msg.sender][_purchases[msg.sender].length - 1].count -= 1;\\n    } else {\\n      _purchases[msg.sender].pop();\\n    }\\n\\n    // Deduct from the locked funds\\n    lockedFunds = lockedFunds.sub(refundAmount);\\n\\n    tokenContract.burnLastToken(msg.sender);\\n\\n    payable(msg.sender).transfer(refundAmount);\\n  }\\n\\n  // Used by the fund addresses to withdraw any owed funds\\n  function withdraw() external onlyFinance {\\n    // Calculate total owed funds based on the timing of the withdrawal\\n    uint256 totalOwed;\\n    if (block.timestamp \\u003e= fundsUnlockTimestamp) {\\n      totalOwed = unlockedFunds.add(lockedFunds);\\n      unlockedFunds = 0;\\n      lockedFunds = 0;\\n    } else {\\n      totalOwed = unlockedFunds;\\n      unlockedFunds = 0;\\n    }\\n\\n    require(totalOwed \\u003e 0, \\\"Withdrawal Not Available\\\");\\n\\n    // Starting from 1, as 0 is for the treasury\\n    uint256 individualShare = totalOwed.div(_fundsAddressCount - 1);\\n    for (uint8 i = 1; i \\u003c _fundsAddressCount; i++) {\\n      payable(fundsAddresses[i]).transfer(individualShare);\\n    }\\n\\n    // Doing the same for the treasury\\n    if (reserveFunds \\u003e 0) {\\n      uint256 owed = reserveFunds;\\n      reserveFunds = 0;\\n      payable(fundsAddresses[0]).transfer(owed);\\n    }\\n  }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler\\u0027s built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c \\u003c a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b \\u003e a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003c= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_counts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"batchSetAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundsAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsUnlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFundsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlock\",\"type\":\"uint256\"}],\"name\":\"setFundsUnlockTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTokenContract\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract ILand\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LandSale","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2e6b1df8a479432b6fe0e7760a37e4d695d3bd85b671f4db688c0cfe21da9cc4"}]}