{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n  struct Counter {\r\n    // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n    // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n    // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n    uint256 _value; // default: 0\r\n  }\r\n\r\n  function current(Counter storage counter) internal view returns (uint256) {\r\n    return counter._value;\r\n  }\r\n\r\n  function increment(Counter storage counter) internal {\r\n    unchecked {\r\n      counter._value += 1;\r\n    }\r\n  }\r\n\r\n  function decrement(Counter storage counter) internal {\r\n    uint256 value = counter._value;\r\n    require(value > 0, \"Counter: decrement overflow\");\r\n    unchecked {\r\n      counter._value = value - 1;\r\n    }\r\n  }\r\n\r\n  function reset(Counter storage counter) internal {\r\n    counter._value = 0;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes calldata) {\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    _setOwner(_msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    _setOwner(address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    _setOwner(newOwner);\r\n  }\r\n\r\n  function _setOwner(address newOwner) private {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n}\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n      uint256 c = a + b;\r\n      if (c < a) return (false, 0);\r\n      return (true, c);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n      if (b > a) return (false, 0);\r\n      return (true, a - b);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n      // benefit is lost if 'b' is also tested.\r\n      // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n      if (a == 0) return (true, 0);\r\n      uint256 c = a * b;\r\n      if (c / a != b) return (false, 0);\r\n      return (true, c);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n      if (b == 0) return (false, 0);\r\n      return (true, a / b);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n      if (b == 0) return (false, 0);\r\n      return (true, a % b);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a + b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a * b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers, reverting on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * reverting when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a % b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n   * message unnecessarily. For custom revert reasons use {trySub}.\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    unchecked {\r\n      require(b <= a, errorMessage);\r\n      return a - b;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    unchecked {\r\n      require(b > 0, errorMessage);\r\n      return a / b;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * reverting with custom message when dividing by zero.\r\n   *\r\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n   * message unnecessarily. For custom revert reasons use {tryMod}.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    unchecked {\r\n      require(b > 0, errorMessage);\r\n      return a % b;\r\n    }\r\n  }\r\n}\r\n\r\ninterface IFacelessNFT {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function mint(address to, uint256 tokenId) external;\r\n\r\n  function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n  function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) external;\r\n}\r\n\r\n/**\r\n * Meta Kings - 4\r\n * Metavatars - 9\r\n * Archaeons - 19\r\n * Aeons - 69\r\n * Eos - 900\r\n *\r\n * Total number of NFTs: 1001\r\n */\r\n\r\ncontract NFTInitialSeller is Ownable {\r\n  using Counters for Counters.Counter;\r\n  using SafeMath for uint256;\r\n\r\n  enum SaleStep {\r\n    None,\r\n    EarlyBirdSale,\r\n    Airdrop,\r\n    SecondSale,\r\n    SoldOut\r\n  }\r\n\r\n  uint16 public constant MAX_NFT_SUPPLY = 1001;\r\n\r\n  // Early bird sale prices\r\n  uint256 public constant METAKING_PRICE = 0.5 ether;\r\n  uint256 public constant METAVATARS_PRICE = 0.5 ether;\r\n  uint256 public constant ARCHAEONS_PRICE = 0.3 ether;\r\n  uint256 public constant AEONS_PRICE = 0.3 ether;\r\n  uint256 public constant EOS_PRICE = 0.19 ether;\r\n\r\n  // Second sale price\r\n  uint256 public constant SECOND_SALE_PRICE = 0.3 ether;\r\n\r\n  uint256 public startTime;\r\n\r\n  uint16 public pendingCount = MAX_NFT_SUPPLY;\r\n\r\n  bool[1002] public minted;\r\n\r\n  IFacelessNFT public facelessNFT;\r\n  IFacelessNFT public oldFacelessNFT;\r\n\r\n  uint16[10000] private _pendingIds;\r\n\r\n  // First sale is Early Bird Sale\r\n  SaleStep private _currentSale = SaleStep.None;\r\n\r\n  address private _dev;\r\n\r\n  address[] private _presaleAddresses;\r\n\r\n  modifier airdropPeriod() {\r\n    require(\r\n      _currentSale == SaleStep.Airdrop,\r\n      \"NFTInitialSeller: Airdrop ended\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  modifier earlyBirdSalePeriod() {\r\n    require(\r\n      _currentSale == SaleStep.EarlyBirdSale,\r\n      \"NFTInitialSeller: Early Bird Sale ended\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  modifier secondSalePeriod() {\r\n    require(\r\n      _currentSale == SaleStep.SecondSale,\r\n      \"NFTInitialSeller: Second Sale ended\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  modifier periodStarted() {\r\n    require(\r\n      block.timestamp >= startTime,\r\n      \"NFTInitialSeller: Period not started\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    address oldNftAddress,\r\n    address nftAddress,\r\n    address dev,\r\n    address[] memory presaleAddresses\r\n  ) {\r\n    oldFacelessNFT = IFacelessNFT(oldNftAddress);\r\n    facelessNFT = IFacelessNFT(nftAddress);\r\n    _dev = dev;\r\n    _presaleAddresses = presaleAddresses;\r\n  }\r\n\r\n  function setCurrentSale(SaleStep _sale) external onlyOwner {\r\n    require(_currentSale != _sale, \"NFTInitialSeller: step already set\");\r\n    _currentSale = _sale;\r\n  }\r\n\r\n  function setStartTime(uint256 _startTime) external onlyOwner {\r\n    require(_startTime > 0, \"NFTInitialSeller: invalid _startTime\");\r\n    require(_startTime > block.timestamp, \"NFTInitialSeller: old start time\");\r\n    startTime = _startTime;\r\n  }\r\n\r\n  function airdropTransfer(address to, uint16 tokenId)\r\n    external\r\n    airdropPeriod\r\n    onlyOwner\r\n  {\r\n    uint16 nftIndex = _getPendingIndexById(tokenId, 647, 200);\r\n    require(nftIndex >= 647, \"NFTInitialSeller: too low index\");\r\n    require(nftIndex <= 846, \"NFTInitialSeller: too high index\");\r\n    require(!minted[tokenId], \"NFTInitialSeller: already minted\");\r\n    _popPendingAtIndex(nftIndex);\r\n    minted[tokenId] = true;\r\n    facelessNFT.mint(to, tokenId);\r\n  }\r\n\r\n  function standardPurchase(uint16 tokenId)\r\n    external\r\n    payable\r\n    earlyBirdSalePeriod\r\n    periodStarted\r\n  {\r\n    uint16 nftIndex = _getPendingIndexById(tokenId, 847, 155);\r\n    require(nftIndex >= 847, \"NFTInitialSeller: too low index\");\r\n    require(nftIndex <= 1001, \"NFTInitialSeller: too high index\");\r\n    require(!minted[tokenId], \"NFTInitialSeller: already minted\");\r\n    require(\r\n      msg.value == _getMintPrice(tokenId),\r\n      \"NFTInitialSeller: invalid ether value\"\r\n    );\r\n    _popPendingAtIndex(nftIndex);\r\n    minted[tokenId] = true;\r\n    facelessNFT.mint(msg.sender, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Mint 'numberOfNfts' new tokens\r\n   */\r\n  function randomPurchase(uint256 numberOfNfts)\r\n    external\r\n    payable\r\n    secondSalePeriod\r\n    periodStarted\r\n  {\r\n    require(pendingCount > 0, \"NFTInitialSeller: All minted\");\r\n    require(numberOfNfts > 0, \"NFTInitialSelle: numberOfNfts cannot be 0\");\r\n    require(\r\n      numberOfNfts <= 20,\r\n      \"NFTInitialSeller: You may not buy more than 20 NFTs at once\"\r\n    );\r\n    require(\r\n      facelessNFT.totalSupply().add(numberOfNfts) <= MAX_NFT_SUPPLY,\r\n      \"NFTInitialSeller: sale already ended\"\r\n    );\r\n    require(\r\n      SECOND_SALE_PRICE.mul(numberOfNfts) == msg.value,\r\n      \"NFTInitialSeller: invalid ether value\"\r\n    );\r\n\r\n    for (uint i = 0; i < numberOfNfts; i++) {\r\n      _randomMint(msg.sender);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Withdraw total eth balance on the contract to owner\r\n   */\r\n  function withdraw() external onlyOwner {\r\n    uint256 devShares = (address(this).balance * 15) / 100;\r\n    uint256 treasuryShares = address(this).balance - devShares;\r\n    (bool sentTreasury, ) = payable(msg.sender).call{value: treasuryShares}(\"\");\r\n    (bool sentDev, ) = payable(_dev).call{value: devShares}(\"\");\r\n    require(sentTreasury && sentDev, \"NFTInitialSeller: Failed to withdraw\");\r\n  }\r\n\r\n  function getPendingAtIndex(uint16 _index) public view returns (uint16) {\r\n    return _pendingIds[_index] + _index;\r\n  }\r\n\r\n  function _getPendingIndexById(\r\n    uint16 tokenId,\r\n    uint16 startIndex,\r\n    uint16 totalCount\r\n  ) internal view returns (uint16) {\r\n    for (uint16 i = 0; i < totalCount; i++) {\r\n      uint16 pendingTokenId = getPendingAtIndex(i + startIndex);\r\n      if (pendingTokenId == tokenId) {\r\n        return i + startIndex;\r\n      }\r\n    }\r\n    revert(\"NFTInitialSeller: invalid token id(pending index)\");\r\n  }\r\n\r\n  function _getMintPrice(uint16 tokenId) internal pure returns (uint256) {\r\n    require(tokenId >= 847, \"NFTInitialSeller: low token id\");\r\n    if (tokenId <= 848) return METAKING_PRICE;\r\n    if (tokenId <= 851) return METAVATARS_PRICE;\r\n    if (tokenId <= 862) return ARCHAEONS_PRICE;\r\n    if (tokenId <= 901) return AEONS_PRICE;\r\n    if (tokenId <= 1001) return EOS_PRICE;\r\n    revert(\"NFTInitialSeller: invalid token id(mint price)\");\r\n  }\r\n\r\n  function _popPendingAtIndex(uint16 _index) internal returns (uint16) {\r\n    uint16 tokenId = getPendingAtIndex(_index);\r\n    if (_index != pendingCount) {\r\n      uint16 lastPendingId = getPendingAtIndex(pendingCount);\r\n      _pendingIds[_index] = lastPendingId - _index;\r\n    }\r\n    pendingCount--;\r\n    return tokenId;\r\n  }\r\n\r\n  function _randomMint(address _to) internal {\r\n    uint16 index = uint16((_getRandom() % pendingCount) + 1);\r\n    uint256 tokenId = _popPendingAtIndex(index);\r\n    minted[tokenId] = true;\r\n    facelessNFT.mint(_to, tokenId);\r\n  }\r\n\r\n  function migrate() external {\r\n    for (uint16 idx = 0; idx < _presaleAddresses.length; idx++) {\r\n      address minter = _presaleAddresses[idx];\r\n      for (uint16 i = 847; i <= 1001; i++) {\r\n        if (minter == oldFacelessNFT.ownerOf(i)) {\r\n          // oldFacelessNFT.transferFrom(minter, address(0), i);\r\n          facelessNFT.mint(minter, i);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function _getRandom() internal view returns (uint256) {\r\n    return\r\n      uint256(\r\n        keccak256(\r\n          abi.encodePacked(block.difficulty, block.timestamp, pendingCount)\r\n        )\r\n      );\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldNftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"presaleAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AEONS_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ARCHAEONS_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EOS_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NFT_SUPPLY\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"METAKING_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"METAVATARS_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECOND_SALE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"airdropTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facelessNFT\",\"outputs\":[{\"internalType\":\"contract IFacelessNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"}],\"name\":\"getPendingAtIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldFacelessNFT\",\"outputs\":[{\"internalType\":\"contract IFacelessNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfNfts\",\"type\":\"uint256\"}],\"name\":\"randomPurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTInitialSeller.SaleStep\",\"name\":\"_sale\",\"type\":\"uint8\"}],\"name\":\"setCurrentSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"standardPurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFTInitialSeller","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001591b395035159e966d80751dde1a8eb6b194f9e000000000000000000000000078a570166dfbba60bf09dce363e2cb73a5888a000000000000000000000000046d03da79580d0b9ae6c73c7ed63fb37745366200000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004300000000000000000000000091d1dde1d76d2adf35c162171691d333ed0f7c0a000000000000000000000000f4dd167c2a61f94cf454bc9663a79ea8c38ee78c000000000000000000000000491fd53e5e0d8b4a5f28d008856060cda5380aaf0000000000000000000000005502e750bd44fba15b63cf87b2fdbf74b226df74000000000000000000000000b7626141ef37f183a7a61dce76304c8b074c0988000000000000000000000000f6ed98bcfc8f939e500ceb7d9bc52889404c9b5b000000000000000000000000a32ed307082ed846785df731aeed50a3dc486630000000000000000000000000324e0cdf06d1533f351ae94c1ba73cc8ac0ae10b000000000000000000000000e7c8906083c8dcbc3e76cc2d8aa3067cf33f0b40000000000000000000000000ecafe2f744d2e2e1f30bd8df98a58584ee3806de0000000000000000000000004d6edb2f7ed44f45985fac1f60488d19055ca46000000000000000000000000007c25f06c35c0939f196ab6a501301b2157909fc0000000000000000000000006a7415b36133c6c3957e4772b8009068e170c648000000000000000000000000fcccc29a5498856fd1a3337d3c4ead555151ba940000000000000000000000002f6b7087f39e5cd21ceb18433359f5686234a39e00000000000000000000000002736d5c8dcea65539993d143a3de90cebca9c3c00000000000000000000000009cdd1ec94503878479e472cfb3573e145370a860000000000000000000000001aba4e3c6b4cadb09a715def58eba6852ac661840000000000000000000000004ace1383fe276e0b96f9ce4d5c377bce9e16c6640000000000000000000000002ccc5e98e7ce96321752beb10eb3f8b8af5efcf70000000000000000000000006a7188a3b7d03e38625fe5e733e2102ec972032d0000000000000000000000006acdfba02d390b97ac2b2d42a63e85293bcc160e0000000000000000000000006b1fe4579f7d782120ffc14b2dcc080a5cf8b823000000000000000000000000942b04e62bd86b1e273f3df3e52b7a980b5f07ba000000000000000000000000c1c0e9750fab87ac871ea40d005063f3750fe143000000000000000000000000d0281ae47694fe3cbec2d02464a6c87c55789f71000000000000000000000000d125862a885482fddeb1d5e5ef0ac56a242d3ac50000000000000000000000004d7f4c42e204901366f0dd83a4cf1629c70c1de70000000000000000000000004dd5a4d1fcb6f8938aa8ad070aefe1b19e8f9c0c000000000000000000000000506bf27c20d5e1608c43f044d9cf982fb016412300000000000000000000000055a1fdefc6f7b376ec38143a86b73072face790400000000000000000000000059877d2ae955ef54a6c99a22357bfc00815181f00000000000000000000000005e03b07ae157ee1ca5bf2f3cbe5bc8dc38f3e965000000000000000000000000617f2e3b6afc4460daf33072c987b3622ac068a7000000000000000000000000004bd9fa16b3b37cf5e4619b434685eacc59710000000000000000000000000001e7f16e17c50d070eb66787f25ce3be405d603800000000000000000000000014987ba7b4dfdadbde5c4b43089e0c47110cbd97000000000000000000000000192292a4a5426676277fb1654bad2c06658aa9ad0000000000000000000000007c689f82ba9260cd971f713c8daa175f18962c8600000000000000000000000022c8391317875f66c148537a4072b7edfed6c1d200000000000000000000000027c80f6b3be75c1473a82ae34879f6a74f37a2b400000000000000000000000096acf191c0112806f9709366bad77642b99b21a90000000000000000000000009893360c45ef5a51c3b38dcbdfe0039c80fd6f6000000000000000000000000099ed7190511ac2b714ffbb9e4e1817f6851ef9f50000000000000000000000009d7d086012f6c610efa54de9a6e14ca53629155f0000000000000000000000009dbdad4abcc48610b22d56a6bdd1aa7f97171b06000000000000000000000000313d3768cffe505b5f0215d9d5750ccdfaf0f89d000000000000000000000000324440afc9a624ad2f4bc1cdca6cdb77c4b078eb000000000000000000000000b8195316e759c5d369c35fc3a681c7d95d1d6672000000000000000000000000b968ce68df88e1eac22328ade8d246299fd0d07a0000000000000000000000003753fa57980fd180655c281158e428ca994d6dfa0000000000000000000000003940249ad48113ae634f0c0826313d02bbb958e9000000000000000000000000cb88c892e0c9d55d38cce6c99a02f05fde00686d000000000000000000000000cc968784db072395b1a8c4ed0309f02afca80a460000000000000000000000003fef61237ff56c8b66fe8cf90146be4ff771f7b800000000000000000000000040c8cef5dac8e6d0e4e11d1856c155fc4ee31046000000000000000000000000d711e8975f248216dba4730c06fc86b9aa765f92000000000000000000000000d8ce0194d66f6c612ad46f4c36a313f775123ccb000000000000000000000000bbf401d39c693d3eb1adf3446dd88d97fae00dda00000000000000000000000041d3bed71e3cf5330ff49c0778790c79ad8f6b8b0000000000000000000000004491311f63b89ec32387c47ea97d39880128b48a000000000000000000000000efc051323cf23debf9da65baba61cb90a52a2289000000000000000000000000491e83d1f86d1f753050d17becfba1353cf3dfa40000000000000000000000004ca91513bb72a9f882417f4ad30956a21cb45db5000000000000000000000000f8a36513bf4720f6b7e64d90d8dd70f57c80606f000000000000000000000000f9eda90b87faee8a1f9baa1bbfe7def86997a97a000000000000000000000000dcf37d8aa17142f053aaa7dc56025ab00d897a19","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6dd35e19a346e39d78429629f1ed3a1c3e89ae92b0d8744cdce0a2c38cae5ae4"}]}