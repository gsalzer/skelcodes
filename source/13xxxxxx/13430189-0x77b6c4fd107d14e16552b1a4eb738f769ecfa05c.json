{"status":"1","message":"OK","result":[{"SourceCode":"/** \r\n *  SourceUnit: /home/jgcarv/Dev/NFT/Orcs/orcs-contracts/src/EtherOrcs.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: AGPL-3.0-only\r\npragma solidity 0.8.7;\r\n\r\n\r\n/// @notice Modern and gas efficient ERC-721 + ERC-20/EIP-2612-like implementation,\r\n/// including the MetaData, and partially, Enumerable extensions.\r\ncontract ERC721 {\r\n    /*///////////////////////////////////////////////////////////////\r\n                                  EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 indexed tokenId);\r\n    \r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    \r\n    /*///////////////////////////////////////////////////////////////\r\n                             METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n    \r\n    address        implementation_;\r\n    address public admin; //Lame requirement from opensea\r\n    \r\n    /*///////////////////////////////////////////////////////////////\r\n                             ERC-721 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public oldSupply;\r\n    uint256 public minted;\r\n    \r\n    mapping(address => uint256) public balanceOf;\r\n    \r\n    mapping(uint256 => address) public ownerOf;\r\n        \r\n    mapping(uint256 => address) public getApproved;\r\n \r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             VIEW FUNCTION\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function owner() external view returns (address) {\r\n        return admin;\r\n    }\r\n    \r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC-20-LIKE LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n    \r\n    function transfer(address to, uint256 tokenId) external {\r\n        require(msg.sender == ownerOf[tokenId], \"NOT_OWNER\");\r\n        \r\n        _transfer(msg.sender, to, tokenId);\r\n        \r\n    }\r\n    \r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC-721 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n    \r\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool supported) {\r\n        supported = interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;\r\n    }\r\n    \r\n    function approve(address spender, uint256 tokenId) external {\r\n        address owner_ = ownerOf[tokenId];\r\n        \r\n        require(msg.sender == owner_ || isApprovedForAll[owner_][msg.sender], \"NOT_APPROVED\");\r\n        \r\n        getApproved[tokenId] = spender;\r\n        \r\n        emit Approval(owner_, spender, tokenId); \r\n    }\r\n    \r\n    function setApprovalForAll(address operator, bool approved) external {\r\n        isApprovedForAll[msg.sender][operator] = approved;\r\n        \r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    function transferFrom(address, address to, uint256 tokenId) public {\r\n        address owner_ = ownerOf[tokenId];\r\n        \r\n        require(\r\n            msg.sender == owner_ \r\n            || msg.sender == getApproved[tokenId]\r\n            || isApprovedForAll[owner_][msg.sender], \r\n            \"NOT_APPROVED\"\r\n        );\r\n        \r\n        _transfer(owner_, to, tokenId);\r\n        \r\n    }\r\n    \r\n    function safeTransferFrom(address, address to, uint256 tokenId) external {\r\n        safeTransferFrom(address(0), to, tokenId, \"\");\r\n    }\r\n    \r\n    function safeTransferFrom(address, address to, uint256 tokenId, bytes memory data) public {\r\n        transferFrom(address(0), to, tokenId); \r\n        \r\n        if (to.code.length != 0) {\r\n            // selector = `onERC721Received(address,address,uint,bytes)`\r\n            (, bytes memory returned) = to.staticcall(abi.encodeWithSelector(0x150b7a02,\r\n                msg.sender, address(0), tokenId, data));\r\n                \r\n            bytes4 selector = abi.decode(returned, (bytes4));\r\n            \r\n            require(selector == 0x150b7a02, \"NOT_ERC721_RECEIVER\");\r\n        }\r\n    }\r\n    \r\n    \r\n    /*///////////////////////////////////////////////////////////////\r\n                          INTERNAL UTILS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _transfer(address from, address to, uint256 tokenId) internal {\r\n        require(ownerOf[tokenId] == from);\r\n\r\n        balanceOf[from]--; \r\n        balanceOf[to]++;\r\n        \r\n        delete getApproved[tokenId];\r\n        \r\n        ownerOf[tokenId] = to;\r\n        emit Transfer(msg.sender, to, tokenId); \r\n\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) internal { \r\n        require(ownerOf[tokenId] == address(0), \"ALREADY_MINTED\");\r\n\r\n        uint maxSupply = oldSupply + minted++;\r\n        require(totalSupply++ <= maxSupply, \"MAX SUPPLY REACHED\");\r\n                \r\n        // This is safe because the sum of all user\r\n        // balances can't exceed type(uint256).max!\r\n        unchecked {\r\n            balanceOf[to]++;\r\n        }\r\n        \r\n        ownerOf[tokenId] = to;\r\n                \r\n        emit Transfer(address(0), to, tokenId); \r\n    }\r\n    \r\n    function _burn(uint256 tokenId) internal { \r\n        address owner_ = ownerOf[tokenId];\r\n        \r\n        require(ownerOf[tokenId] != address(0), \"NOT_MINTED\");\r\n        \r\n        totalSupply--;\r\n        balanceOf[owner_]--;\r\n        \r\n        delete ownerOf[tokenId];\r\n                \r\n        emit Transfer(owner_, address(0), tokenId); \r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/jgcarv/Dev/NFT/Orcs/orcs-contracts/src/EtherOrcs.sol\r\n*/\r\n            \r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: AGPL-3.0-only\r\npragma solidity 0.8.7;\r\n\r\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\r\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\r\n/// Taken from Solmate: https://github.com/Rari-Capital/solmate\r\n\r\ncontract ERC20 {\r\n    /*///////////////////////////////////////////////////////////////\r\n                                  EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public constant name     = \"ZUG\";\r\n    string public constant symbol   = \"ZUG\";\r\n    uint8  public constant decimals = 18;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    mapping(address => bool) public isMinter;\r\n\r\n    address public ruler;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor() { ruler = msg.sender;}\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        allowance[msg.sender][spender] = value;\r\n\r\n        emit Approval(msg.sender, spender, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        balanceOf[msg.sender] -= value;\r\n\r\n        // This is safe because the sum of all user\r\n        // balances can't exceed type(uint256).max!\r\n        unchecked {\r\n            balanceOf[to] += value;\r\n        }\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool) {\r\n        if (allowance[from][msg.sender] != type(uint256).max) {\r\n            allowance[from][msg.sender] -= value;\r\n        }\r\n\r\n        balanceOf[from] -= value;\r\n\r\n        // This is safe because the sum of all user\r\n        // balances can't exceed type(uint256).max!\r\n        unchecked {\r\n            balanceOf[to] += value;\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             ORC PRIVILEGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function mint(address to, uint256 value) external {\r\n        require(isMinter[msg.sender], \"FORBIDDEN TO MINT\");\r\n        _mint(to, value);\r\n    }\r\n\r\n    function burn(address from, uint256 value) external {\r\n        require(isMinter[msg.sender], \"FORBIDDEN TO BURN\");\r\n        _burn(from, value);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                         Ruler Function\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function setMinter(address minter, bool status) external {\r\n        require(msg.sender == ruler, \"NOT ALLOWED TO RULE\");\r\n\r\n        isMinter[minter] = status;\r\n    }\r\n\r\n    function setRuler(address ruler_) external {\r\n        require(msg.sender == ruler ||ruler == address(0), \"NOT ALLOWED TO RULE\");\r\n\r\n        ruler = ruler_;\r\n    }\r\n\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                          INTERNAL UTILS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 value) internal {\r\n        totalSupply += value;\r\n\r\n        // This is safe because the sum of all user\r\n        // balances can't exceed type(uint256).max!\r\n        unchecked {\r\n            balanceOf[to] += value;\r\n        }\r\n\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint256 value) internal {\r\n        balanceOf[from] -= value;\r\n\r\n        // This is safe because a user won't ever\r\n        // have a balance larger than totalSupply!\r\n        unchecked {\r\n            totalSupply -= value;\r\n        }\r\n\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n}\r\n\r\n\r\n/** \r\n *  SourceUnit: /home/jgcarv/Dev/NFT/Orcs/orcs-contracts/src/EtherOrcs.sol\r\n*/\r\n\r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: Unlicense\r\npragma solidity 0.8.7;\r\n\r\n////import \"./ERC20.sol\";\r\n////import \"./ERC721.sol\"; \r\n\r\n//    ___ _   _               ___            \r\n//  | __| |_| |_  ___ _ _   / _ \\ _ _ __ ___\r\n//  | _||  _| ' \\/ -_) '_| | (_) | '_/ _(_-<\r\n//  |___|\\__|_||_\\___|_|    \\___/|_| \\__/__/\r\n//\r\n\r\ninterface MetadataHandlerLike {\r\n    function getTokenURI(uint16 id, uint8 body, uint8 helm, uint8 mainhand, uint8 offhand, uint16 level, uint16 zugModifier) external view returns (string memory);\r\n}\r\n\r\n\r\ncontract EtherOrcs is ERC721 {\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                    Global STATE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public constant  cooldown = 10 minutes;\r\n    uint256 public constant  startingTime = 1633951800 + 4.5 hours;\r\n\r\n    address public migrator;\r\n\r\n    bytes32 internal entropySauce;\r\n\r\n    ERC20 public zug;\r\n\r\n    mapping (address => bool)     public auth;\r\n    mapping (uint256 => Orc)      public orcs;\r\n    mapping (uint256 => Action)   public activities;\r\n    mapping (Places  => LootPool) public lootPools;\r\n\r\n    MetadataHandlerLike metadaHandler;\r\n\r\n    function setAddresses(address mig, address meta) external onlyOwner {\r\n        migrator      = mig;\r\n        metadaHandler = MetadataHandlerLike(meta);\r\n    }\r\n\r\n    function setAuth(address add, bool isAuth) external onlyOwner {\r\n        auth[add] = isAuth;\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) external  onlyOwner{\r\n        admin = newOwner;\r\n    }\r\n\r\n    function tokenURI(uint256 id) external view returns(string memory) {\r\n        Orc memory orc = orcs[id];\r\n        return metadaHandler.getTokenURI(uint16(id), orc.body, orc.helm, orc.mainhand, orc.offhand, orc.level, orc.zugModifier);\r\n    }\r\n\r\n    event ActionMade(address owner, uint256 id, uint256 timestamp, uint8 activity);\r\n\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                DATA STRUCTURES \r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    struct LootPool { \r\n        uint8  minLevel; uint8  minLootTier; uint16  cost;   uint16 total;\r\n        uint16 tier_1;   uint16 tier_2;      uint16 tier_3; uint16 tier_4;\r\n    }\r\n\r\n    struct Orc { uint8 body; uint8 helm; uint8 mainhand; uint8 offhand; uint16 level; uint16 zugModifier; uint32 lvlProgress; }\r\n\r\n    enum   Actions { UNSTAKED, FARMING, TRAINING }\r\n    struct Action  { address owner; uint88 timestamp; Actions action; }\r\n\r\n    // These are all the places you can go search for loot\r\n    enum Places { \r\n        TOWN, DUNGEON, CRYPT, CASTLE, DRAGONS_LAIR, THE_ETHER, \r\n        TAINTED_KINGDOM, OOZING_DEN, ANCIENT_CHAMBER, ORC_GODS \r\n    }   \r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                    CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n    function initialize() public onlyOwner {\r\n\r\n        // Here's whats available in each place\r\n        LootPool memory town           = LootPool({ minLevel: 1,  minLootTier:  1, cost:   0, total: 1000, tier_1: 800,  tier_2: 150,  tier_3: 50,  tier_4:   0 });\r\n        LootPool memory dungeon        = LootPool({ minLevel: 3,  minLootTier:  2, cost:   0, total: 1000, tier_1: 800,  tier_2: 150,  tier_3: 50,  tier_4:   0 });\r\n        LootPool memory crypt          = LootPool({ minLevel: 6,  minLootTier:  3, cost:   0, total: 2619, tier_1: 1459, tier_2: 1025, tier_3: 135, tier_4:   0 });\r\n        LootPool memory castle         = LootPool({ minLevel: 15, minLootTier:  4, cost:   0, total: 6000, tier_1: 3300, tier_2: 2400, tier_3: 300, tier_4:   0 });\r\n        LootPool memory dragonsLair    = LootPool({ minLevel: 25, minLootTier:  5, cost:   0, total: 6000, tier_1: 3300, tier_2: 2400, tier_3: 300, tier_4:   0 });\r\n        LootPool memory theEther       = LootPool({ minLevel: 36, minLootTier:  6, cost:   0, total: 3000, tier_1: 1200, tier_2: 1500, tier_3: 300, tier_4:   0 });\r\n        LootPool memory taintedKingdom = LootPool({ minLevel: 15, minLootTier:  4, cost:  50, total:  600, tier_1:  150, tier_2:  150, tier_3: 150, tier_4: 150 });\r\n        LootPool memory oozingDen      = LootPool({ minLevel: 25, minLootTier:  5, cost:  50, total:  600, tier_1:  150, tier_2:  150, tier_3: 150, tier_4: 150 });\r\n        LootPool memory ancientChamber = LootPool({ minLevel: 45, minLootTier:  9, cost: 125, total:  225, tier_1:  225, tier_2:    0, tier_3:   0, tier_4:   0 });\r\n        LootPool memory orcGods        = LootPool({ minLevel: 52, minLootTier: 10, cost: 300, total:   12, tier_1:    0, tier_2:    0, tier_3:   0, tier_4:   0 });\r\n\r\n        lootPools[Places.TOWN]            = town;\r\n        lootPools[Places.DUNGEON]         = dungeon;\r\n        lootPools[Places.CRYPT]           = crypt;\r\n        lootPools[Places.CASTLE]          = castle;\r\n        lootPools[Places.DRAGONS_LAIR]    = dragonsLair;\r\n        lootPools[Places.THE_ETHER]       = theEther;\r\n        lootPools[Places.TAINTED_KINGDOM] = taintedKingdom;\r\n        lootPools[Places.OOZING_DEN]      = oozingDen;\r\n        lootPools[Places.ANCIENT_CHAMBER] = ancientChamber;\r\n        lootPools[Places.ORC_GODS]        = orcGods;\r\n\r\n        admin = msg.sender;\r\n        auth[msg.sender] = true;\r\n\r\n        oldSupply = ERC721(0x7d9d3659dcfbea08a87777c52020BC672deece13).totalSupply();\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                    MODIFIERS \r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    modifier noCheaters() {\r\n        uint256 size = 0;\r\n        address acc = msg.sender;\r\n        assembly { size := extcodesize(acc)}\r\n\r\n        require(auth[msg.sender] || (msg.sender == tx.origin && size == 0), \"you're trying to cheat!\");\r\n        _;\r\n\r\n        // We'll use the last caller hash to add entropy to next caller\r\n        entropySauce = keccak256(abi.encodePacked(acc, block.coinbase));\r\n    }\r\n\r\n    modifier ownerOfOrc(uint256 id) { \r\n        require(ownerOf[id] == msg.sender || activities[id].owner == msg.sender, \"not your orc\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                    PUBLIC FUNCTIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function mint() public noCheaters returns (uint256 id) {\r\n        uint256 cost = _getMintingPrice();\r\n        uint256 rand = _rand();\r\n\r\n        if (cost > 0) zug.burn(msg.sender, cost);\r\n\r\n        return _mintOrc(rand);\r\n    }\r\n\r\n    // Craft an identical orc from v1!\r\n    function craft(address owner_, uint256 id, uint8 body, uint8 helm, uint8 mainhand, uint8 offhand, uint16 level, uint32 lvlProgres) public {\r\n        require(msg.sender == migrator);\r\n\r\n        _mint(owner_, id);\r\n\r\n        uint16 zugModifier = _tier(helm) + _tier(mainhand) + _tier(offhand);\r\n        orcs[uint256(id)] = Orc({body: body, helm: helm, mainhand: mainhand, offhand: offhand, level: level, lvlProgress: lvlProgres, zugModifier:zugModifier});\r\n    }\r\n\r\n    function migrationAction(uint256 id, address owner_, Actions action_) public {\r\n        require(msg.sender == migrator);\r\n\r\n        _doAction(id, owner_, action_);\r\n\r\n        //Add a time bonus\r\n        activities[id].timestamp = uint88(block.timestamp - 120 minutes);\r\n    }\r\n\r\n    function doAction(uint256 id, Actions action_) public ownerOfOrc(id) noCheaters {\r\n       _doAction(id, msg.sender, action_);\r\n    }\r\n\r\n    function _doAction(uint256 id, address orcOwner, Actions action_) internal {\r\n        Action memory action = activities[id];\r\n        require(action.action != action_, \"already doing that\");\r\n\r\n        // Picking the largest value between block.timestamp, action.timestamp and startingTime\r\n        uint88 timestamp = uint88(block.timestamp > action.timestamp ? block.timestamp : action.timestamp);\r\n\r\n        if (action.action == Actions.UNSTAKED)  _transfer(orcOwner, address(this), id);\r\n     \r\n        else {\r\n            if (block.timestamp > action.timestamp) _claim(id);\r\n            timestamp = timestamp > action.timestamp ? timestamp : action.timestamp;\r\n        }\r\n\r\n        address owner_ = action_ == Actions.UNSTAKED ? address(0) : orcOwner;\r\n        if (action_ == Actions.UNSTAKED) _transfer(address(this), orcOwner, id);\r\n\r\n        activities[id] = Action({owner: owner_, action: action_,timestamp: timestamp});\r\n        emit ActionMade(orcOwner, id, block.timestamp, uint8(action_));\r\n    }\r\n\r\n    function doActionWithManyOrcs(uint256[] calldata ids, Actions action_) external {\r\n        for (uint256 index = 0; index < ids.length; index++) {\r\n            _doAction(ids[index], msg.sender, action_);\r\n        }\r\n    }\r\n\r\n    function claim(uint256[] calldata ids) external {\r\n        for (uint256 index = 0; index < ids.length; index++) {\r\n            _claim(ids[index]);\r\n        }\r\n    }\r\n\r\n    function _claim(uint256 id) internal noCheaters {\r\n        Orc    memory orc    = orcs[id];\r\n        Action memory action = activities[id];\r\n\r\n        if(block.timestamp <= action.timestamp) return;\r\n\r\n        uint256 timeDiff = uint256(block.timestamp - action.timestamp);\r\n\r\n        if (action.action == Actions.FARMING) zug.mint(action.owner, claimableZug(timeDiff, orc.zugModifier));\r\n       \r\n        if (action.action == Actions.TRAINING) {\r\n            uint256 progress = timeDiff * 3000 / 1 days;\r\n            orcs[id].lvlProgress = uint16(progress % 1000);\r\n            orcs[id].level      += uint16(progress / 1000);\r\n        }\r\n\r\n        activities[id].timestamp = uint88(block.timestamp);\r\n    }\r\n\r\n    function pillage(uint256 id, Places place, bool tryHelm, bool tryMainhand, bool tryOffhand) public ownerOfOrc(id) noCheaters {\r\n        require(block.timestamp >= uint256(activities[id].timestamp), \"on cooldown\");\r\n        require(place != Places.ORC_GODS,  \"You can't pillage the Orc God\");\r\n\r\n        if(activities[id].timestamp < block.timestamp) _claim(id); // Need to claim to not have equipment reatroactively multiplying\r\n\r\n        uint256 rand_ = _rand();\r\n  \r\n        LootPool memory pool = lootPools[place];\r\n        require(orcs[id].level >= uint16(pool.minLevel), \"below minimum level\");\r\n\r\n        if (pool.cost > 0) {\r\n            require(block.timestamp - startingTime > 14 days);\r\n            zug.burn(msg.sender, uint256(pool.cost) * 1 ether);\r\n        } \r\n\r\n        uint8 item;\r\n        if (tryHelm) {\r\n            ( pool, item ) = _getItemFromPool(pool, _randomize(rand_,\"HELM\", id));\r\n            if (item != 0 ) orcs[id].helm = item;\r\n        }\r\n        if (tryMainhand) {\r\n            ( pool, item ) = _getItemFromPool(pool, _randomize(rand_,\"MAINHAND\", id));\r\n            if (item != 0 ) orcs[id].mainhand = item;\r\n        }\r\n        if (tryOffhand) {\r\n            ( pool, item ) = _getItemFromPool(pool, _randomize(rand_,\"OFFHAND\", id));\r\n            if (item != 0 ) orcs[id].offhand = item;\r\n        }\r\n\r\n        if (uint(place) > 1) lootPools[place] = pool;\r\n\r\n        // Update zug modifier\r\n        Orc memory orc = orcs[id];\r\n        uint16 zugModifier_ = _tier(orc.helm) + _tier(orc.mainhand) + _tier(orc.offhand);\r\n\r\n        orcs[id].zugModifier = zugModifier_;\r\n\r\n        activities[id].timestamp = uint88(block.timestamp + cooldown);\r\n    } \r\n\r\n    function update(uint256 id) public ownerOfOrc(id) noCheaters {\r\n        require(_tier(orcs[id].mainhand) < 10);\r\n        require(block.timestamp - startingTime >= 14 days);\r\n        \r\n        LootPool memory pool = lootPools[Places.ORC_GODS];\r\n        require(orcs[id].level >= pool.minLevel);\r\n\r\n        zug.burn(msg.sender, uint256(pool.cost) * 1 ether);\r\n\r\n        _claim(id); // Need to claim to not have equipment reatroactively multiplying\r\n\r\n        uint8 item = uint8(lootPools[Places.ORC_GODS].total--);\r\n        orcs[id].zugModifier = 30;\r\n        orcs[id].body = orcs[id].helm = orcs[id].mainhand = orcs[id].offhand = item + 40;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                    VIEWERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function claimable(uint256 id) external view returns (uint256 amount) {\r\n        uint256 timeDiff = block.timestamp > activities[id].timestamp ? uint256(block.timestamp - activities[id].timestamp) : 0;\r\n        amount = activities[id].action == Actions.FARMING ? claimableZug(timeDiff, orcs[id].zugModifier) : timeDiff * 3000 / 1 days;\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return \"Ether Orcs Genesis\";\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return \"Orcs\";\r\n    }\r\n\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                    MINT FUNCTION\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mintOrc(uint256 rand) internal returns (uint16 id) {\r\n        (uint8 body,uint8 helm,uint8 mainhand,uint8 offhand) = (0,0,0,0);\r\n\r\n        {\r\n            // Helpers to get Percentages\r\n            uint256 sevenOnePct   = type(uint16).max / 100 * 71;\r\n            uint256 eightyPct     = type(uint16).max / 100 * 80;\r\n            uint256 nineFivePct   = type(uint16).max / 100 * 95;\r\n            uint256 nineNinePct   = type(uint16).max / 100 * 99;\r\n    \r\n            id = uint16(totalSupply + 1);\r\n    \r\n            // Getting Random traits\r\n            uint16 randBody = uint16(_randomize(rand, \"BODY\", id));\r\n                   body     = uint8(randBody > nineNinePct ? randBody % 3 + 25 : \r\n                              randBody > sevenOnePct  ? randBody % 12 + 13 : randBody % 13 + 1 );\r\n    \r\n            uint16 randHelm = uint16(_randomize(rand, \"HELM\", id));\r\n                   helm     = uint8(randHelm < eightyPct ? 0 : randHelm % 4 + 5);\r\n    \r\n            uint16 randOffhand = uint16(_randomize(rand, \"OFFHAND\", id));\r\n                   offhand     = uint8(randOffhand < eightyPct ? 0 : randOffhand % 4 + 5);\r\n    \r\n            uint16 randMainhand = uint16(_randomize(rand, \"MAINHAND\", id));\r\n                   mainhand     = uint8(randMainhand < nineFivePct ? randMainhand % 4 + 1: randMainhand % 4 + 5);\r\n        }\r\n\r\n        _mint(msg.sender, id);\r\n\r\n        uint16 zugModifier = _tier(helm) + _tier(mainhand) + _tier(offhand);\r\n        orcs[uint256(id)] = Orc({body: body, helm: helm, mainhand: mainhand, offhand: offhand, level: 0, lvlProgress: 0, zugModifier:zugModifier});\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                    INTERNAL  HELPERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @dev take an available item from a pool\r\n    function _getItemFromPool(LootPool memory pool, uint256 rand) internal pure returns (LootPool memory, uint8 item) {\r\n        uint draw = rand % pool.total--; \r\n\r\n        if (draw > pool.tier_1 + pool.tier_2 + pool.tier_3 && pool.tier_4-- > 0) {\r\n            item = uint8((draw % 4 + 1) + (pool.minLootTier + 3) * 4);     \r\n            return (pool, item);\r\n        }\r\n\r\n        if (draw > pool.tier_1 + pool.tier_2 && pool.tier_3-- > 0) {\r\n            item = uint8((draw % 4 + 1) + (pool.minLootTier + 2) * 4);\r\n            return (pool, item);\r\n        }\r\n\r\n        if (draw > pool.tier_1 && pool.tier_2-- > 0) {\r\n            item = uint8((draw % 4 + 1) + (pool.minLootTier + 1) * 4);\r\n            return (pool, item);\r\n        }\r\n\r\n        if (pool.tier_1-- > 0) {\r\n            item = uint8((draw % 4 + 1) + pool.minLootTier * 4);\r\n            return (pool, item);\r\n        }\r\n    }\r\n\r\n    function claimableZug(uint256 timeDiff, uint16 zugModifier) internal pure returns (uint256 zugAmount) {\r\n        zugAmount = timeDiff * (4 + zugModifier) * 1 ether / 1 days;\r\n    }\r\n\r\n    /// @dev Convert an id to its tier\r\n    function _tier(uint16 id) internal pure returns (uint16) {\r\n        if (id == 0) return 0;\r\n        return ((id - 1) / 4 );\r\n    }\r\n\r\n    /// @dev Create a bit more of randomness\r\n    function _randomize(uint256 rand, string memory val, uint256 spicy) internal pure returns (uint256) {\r\n        return uint256(keccak256(abi.encode(rand, val, spicy)));\r\n    }\r\n\r\n    function _rand() internal view returns (uint256) {\r\n        return uint256(keccak256(abi.encodePacked(msg.sender, block.timestamp, block.basefee, block.timestamp, entropySauce)));\r\n    }\r\n\r\n    function _getMintingPrice() internal view returns (uint256) {\r\n        uint256 supply = minted + oldSupply;\r\n        if (supply < 1550) return   0;\r\n        if (supply < 2050) return   4 ether;\r\n        if (supply < 2550) return   8 ether;\r\n        if (supply < 3050) return  12 ether;\r\n        if (supply < 3550) return  24 ether;\r\n        if (supply < 4050) return  40 ether;\r\n        if (supply < 4550) return  60 ether;\r\n        if (supply < 5050) return 130 ether;\r\n    }\r\n}\r\n\r\ncontract Proxy {\r\n\r\n    address implementation_;\r\n    address public admin;\r\n\r\n    constructor(address impl) {\r\n        implementation_ = impl;\r\n        admin = msg.sender;\r\n    }\r\n\r\n    function setImplementation(address newImpl) public {\r\n        require(msg.sender == admin);\r\n        implementation_ = newImpl;\r\n    }\r\n\r\n    /**\r\n     * @dev Delegates the current call to `implementation`.\r\n     *\r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _delegate(address implementation) internal virtual {\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\r\n     * and {_fallback} should delegate.\r\n     */\r\n    function _implementation() internal view returns (address) {\r\n        return implementation_;\r\n    }\r\n\r\n    /**\r\n     * @dev Delegates the current call to the address returned by `_implementation()`.\r\n     *\r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _fallback() internal virtual {\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n     * function in the contract matches the call data.\r\n     */\r\n    fallback() external payable virtual {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\r\n     * is empty.\r\n     */\r\n    receive() external payable virtual {\r\n        _fallback();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Proxy","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c91d18fc4445974164bf73810f91932ddb26f038","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://488e98cc58a6cd568560b88d80e6d9d165ed917865823f7adb7c668ef572e649"}]}