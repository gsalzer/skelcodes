{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Proxy/MultiSwap.sol\": {\r\n      \"content\": \"// Be name Khoda\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n// =================================================================================================================\\n//  _|_|_|    _|_|_|_|  _|    _|    _|_|_|      _|_|_|_|  _|                                                       |\\n//  _|    _|  _|        _|    _|  _|            _|            _|_|_|      _|_|_|  _|_|_|      _|_|_|    _|_|       |\\n//  _|    _|  _|_|_|    _|    _|    _|_|        _|_|_|    _|  _|    _|  _|    _|  _|    _|  _|        _|_|_|_|     |\\n//  _|    _|  _|        _|    _|        _|      _|        _|  _|    _|  _|    _|  _|    _|  _|        _|           |\\n//  _|_|_|    _|_|_|_|    _|_|    _|_|_|        _|        _|  _|    _|    _|_|_|  _|    _|    _|_|_|    _|_|_|     |\\n// =================================================================================================================\\n// ========================= MultiSwap ============================\\n// ===============================================================\\n// DEUS Finance: https://github.com/DeusFinance\\n\\n// Primary Author(s)\\n// Kazem\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IDEIProxy {\\n    struct ProxyInput {\\n\\t\\tuint amountIn;\\n\\t\\tuint minAmountOut;\\n\\t\\tuint deusPriceUSD;\\n\\t\\tuint colPriceUSD;\\n\\t\\tuint usdcForMintAmount;\\n\\t\\tuint deusNeededAmount;\\n\\t\\tuint expireBlock;\\n\\t\\tbytes[] sigs;\\n\\t}\\n\\tfunction USDC2DEI(ProxyInput memory proxyInput) external returns (uint deiAmount);\\n    function ERC202DEI(ProxyInput memory proxyInput, address[] memory path) external returns (uint deiAmount);\\n    function Nativecoin2DEI(ProxyInput memory proxyInput, address[] memory path) payable external returns (uint deiAmount);\\n    function getUSDC2DEIInputs(uint amountIn, uint deusPriceUSD, uint colPriceUSD) external view returns (uint amountOut, uint usdcForMintAmount, uint deusNeededAmount);\\n    function getERC202DEIInputs(uint amountIn, uint deusPriceUSD, uint colPriceUSD, address[] memory path) external view returns (uint amountOut, uint usdcForMintAmount, uint deusNeededAmount);\\n}\\n\\n\\ninterface IUniswapV2Router02 {\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n\\n\\tfunction getAmountsOut(\\n\\t\\tuint amountIn, \\n\\t\\taddress[] memory path\\n\\t) external view returns (uint[] memory amounts);\\n}\\n\\ncontract MultiSwap is Ownable {\\n\\t/* ========== STATE VARIABLES ========== */\\n\\n\\taddress public uniswapRouter;\\n\\taddress public deiAddress;\\n\\taddress public usdcAddress;\\n    address public deiProxy;\\n\\n\\taddress[] public dei2deusPath;\\n\\n\\tuint public deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/* ========== CONSTRUCTOR ========== */\\n\\n\\tconstructor(\\n\\t\\taddress _uniswapRouter,\\n\\t\\taddress _deiAddress,\\n\\t\\taddress _usdcAddress,\\n        address _deiProxy,\\n\\t\\taddress[] memory _dei2deusPath\\n\\t) {\\n\\t\\tuniswapRouter = _uniswapRouter;\\n\\t\\tdeiAddress = _deiAddress;\\n\\t\\tusdcAddress = _usdcAddress;\\n        deiProxy = _deiProxy;\\n\\n\\t\\tdei2deusPath = _dei2deusPath;\\n\\n\\t\\tIERC20(usdcAddress).approve(_deiProxy, type(uint256).max);\\n\\t\\tIERC20(deiAddress).approve(_uniswapRouter, type(uint256).max);\\n\\t}\\n\\n\\t/* ========== RESTRICTED FUNCTIONS ========== */\\n\\n\\tfunction approve(address token, address to) external onlyOwner {\\n\\t\\tIERC20(token).approve(to, type(uint256).max);\\n\\t}\\n\\n\\tfunction emergencyWithdrawERC20(address token, address to, uint amount) external onlyOwner {\\n\\t\\tIERC20(token).transfer(to, amount);\\n\\t}\\n\\n\\tfunction emergencyWithdrawETH(address to, uint amount) external onlyOwner {\\n\\t\\tpayable(to).transfer(amount);\\n\\t}\\n\\n\\t/* ========== PUBLIC FUNCTIONS ========== */\\n\\n\\tfunction USDC2DEUS(IDEIProxy.ProxyInput memory proxyInput) external returns (uint deusAmount) {\\n        IERC20(usdcAddress).transferFrom(msg.sender, address(this), proxyInput.amountIn);\\n\\n\\t\\tuint deiAmount = IDEIProxy(deiProxy).USDC2DEI(proxyInput);\\n        \\n        deusAmount = IUniswapV2Router02(uniswapRouter).swapExactTokensForTokens(deiAmount, 1, dei2deusPath, msg.sender, deadline)[1];\\n\\n        require(proxyInput.minAmountOut <= deusAmount, \\\"Multi Swap: Insufficient output amount\\\");\\n\\n        emit Buy(usdcAddress, proxyInput.amountIn, deusAmount);\\n\\t}\\n\\n\\n\\tfunction ERC202DEUS(IDEIProxy.ProxyInput memory proxyInput, address[] memory path) external returns (uint deusAmount) {\\n\\t\\tIERC20(path[0]).transferFrom(msg.sender, address(this), proxyInput.amountIn);\\n\\n\\t\\t// approve if it doesn't have allowance\\n\\t\\tif (IERC20(path[0]).allowance(address(this), deiProxy) == 0) {IERC20(path[0]).approve(deiProxy, type(uint).max);}\\n        \\n        uint deiAmount = IDEIProxy(deiProxy).ERC202DEI(proxyInput, path);\\n        \\n        deusAmount = IUniswapV2Router02(uniswapRouter).swapExactTokensForTokens(deiAmount, 1, dei2deusPath, msg.sender, deadline)[1];\\n\\n        require(proxyInput.minAmountOut <= deusAmount, \\\"Multi Swap: Insufficient output amount\\\");\\n\\n        emit Buy(path[0], proxyInput.amountIn, deusAmount);\\n\\t}\\n\\n\\tfunction Nativecoin2DEUS(IDEIProxy.ProxyInput memory proxyInput, address[] memory path) payable external returns (uint deusAmount) {\\n\\t\\tuint deiAmount = IDEIProxy(deiProxy).Nativecoin2DEI{value: msg.value}(proxyInput, path);\\n        \\n        deusAmount = IUniswapV2Router02(uniswapRouter).swapExactTokensForTokens(deiAmount, 1, dei2deusPath, msg.sender, deadline)[1];\\n\\n        require(proxyInput.minAmountOut <= deusAmount, \\\"Multi Swap: Insufficient output amount\\\");\\n\\n        emit Buy(path[0], proxyInput.amountIn, deusAmount);\\n\\t}\\n\\n\\t/* ========== VIEWS ========== */\\n\\n\\tfunction getUSDC2DEUSInputs(uint amountIn, uint deusPriceUSD, uint colPriceUSD) public view returns (uint amountOut, uint usdcForMintAmount, uint deusNeededAmount) {\\n\\t\\t(amountOut, usdcForMintAmount, deusNeededAmount) = IDEIProxy(deiProxy).getUSDC2DEIInputs(amountIn, deusPriceUSD, colPriceUSD);\\n        amountOut = IUniswapV2Router02(uniswapRouter).getAmountsOut(amountOut, dei2deusPath)[1];\\n\\t}\\n\\n\\tfunction getERC202DEUSInputs(uint amountIn, uint deusPriceUSD, uint colPriceUSD, address[] memory path) public view returns (uint amountOut, uint usdcForMintAmount, uint deusNeededAmount) {\\n\\t\\t(amountOut, usdcForMintAmount, deusNeededAmount) = IDEIProxy(deiProxy).getERC202DEIInputs(amountIn, deusPriceUSD, colPriceUSD, path);\\n        amountOut = IUniswapV2Router02(uniswapRouter).getAmountsOut(amountOut, dei2deusPath)[1];\\n\\t}\\n\\n\\t/* ========== EVENTS ========== */\\n\\n\\tevent Buy(address tokenIn, uint amountIn, uint amountOut);\\n}\\n\\n// Dar panahe Khoda\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deiProxy\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_dei2deusPath\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcForMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusNeededAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"internalType\":\"struct IDEIProxy.ProxyInput\",\"name\":\"proxyInput\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"ERC202DEUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deusAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcForMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusNeededAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"internalType\":\"struct IDEIProxy.ProxyInput\",\"name\":\"proxyInput\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"Nativecoin2DEUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deusAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcForMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusNeededAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"internalType\":\"struct IDEIProxy.ProxyInput\",\"name\":\"proxyInput\",\"type\":\"tuple\"}],\"name\":\"USDC2DEUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deusAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dei2deusPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deiProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getERC202DEUSInputs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcForMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusNeededAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colPriceUSD\",\"type\":\"uint256\"}],\"name\":\"getUSDC2DEUSInputs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcForMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusNeededAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MultiSwap","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000de12c7959e1a72bbe8a5f7a1dc8f8eef9ab011b3000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000b095aa0a0a206ed943faa7f5bd28a47aaf2fec0900000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000de12c7959e1a72bbe8a5f7a1dc8f8eef9ab011b3000000000000000000000000de5ed76e7c05ec5e4572cfc88d1acea165109e44","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}