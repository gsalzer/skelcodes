{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SynthetixSandboxAMM.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"openzeppelin-solidity-2.3.0/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity-2.3.0/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-solidity-2.3.0/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./synthetix/interfaces/IExchangeRates.sol\\\";\\nimport \\\"./synthetix/interfaces/IIssuer.sol\\\";\\nimport \\\"./synthetix/MixinSystemSettings.sol\\\";\\nimport \\\"./synthetix/Owned.sol\\\";\\nimport \\\"./synthetix/SafeDecimalMath.sol\\\";\\n\\ncontract SynthetixSandboxAMM is Owned, MixinSystemSettings {\\n    using SafeMath for uint;\\n    using SafeDecimalMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 internal constant sUSD = \\\"sUSD\\\";\\n\\n    struct ExchangeVolumeAtPeriod {\\n        uint64 time;\\n        uint192 volume;\\n    }\\n\\n    ExchangeVolumeAtPeriod public lastAtomicVolume;\\n\\n    constructor(address _owner, address _resolver) public Owned(_owner) MixinSystemSettings(_resolver) {}\\n\\n    /* ========== ADDRESS RESOLVER CONFIGURATION ========== */\\n\\n    bytes32 private constant CONTRACT_EXRATES = \\\"ExchangeRates\\\";\\n    bytes32 private constant CONTRACT_ISSUER = \\\"Issuer\\\";\\n\\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {\\n        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();\\n        bytes32[] memory newAddresses = new bytes32[](2);\\n        newAddresses[0] = CONTRACT_EXRATES;\\n        newAddresses[1] = CONTRACT_ISSUER;\\n        addresses = combineArrays(existingAddresses, newAddresses);\\n    }\\n\\n    function flexibleStoragePublic() public view returns (address) {\\n        return address(flexibleStorage());\\n    }\\n\\n    function exchangeRates() public view returns (IExchangeRates) {\\n        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));\\n    }\\n\\n    function issuer() public view returns (IIssuer) {\\n        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));\\n    }\\n\\n    /* ========== OWNERSHIP FUNCTIONS ========== */\\n\\n    function sweep(address token, uint amount) external onlyOwner {\\n        IERC20(token).safeTransfer(owner, amount);\\n    }\\n\\n    function sweepAll(address[] calldata tokens) external onlyOwner {\\n        for (uint i = 0; i < tokens.length; ++i) {\\n            IERC20 token = IERC20(tokens[i]);\\n            token.safeTransfer(owner, token.balanceOf(address(this)));\\n        }\\n    }\\n\\n    function sweepEth() external onlyOwner {\\n        address payable payableOwner = address(uint160(owner));\\n        payableOwner.transfer(address(this).balance);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function exchangeAtomically(\\n        /*\\n        address from,\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address destinationAddress,\\n        bytes32 trackingCode\\n        */\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external returns (uint amountReceived) {\\n        address from = msg.sender;\\n        address destinationAddress = msg.sender;\\n\\n        uint fee;\\n        (amountReceived, fee) = _exchangeAtomically(\\n            from,\\n            sourceCurrencyKey,\\n            sourceAmount,\\n            destinationCurrencyKey,\\n            destinationAddress\\n        );\\n\\n        /*\\n        _processTradingRewards(fee, destinationAddress);\\n\\n        if (trackingCode != bytes32(0)) {\\n            _emitTrackingEvent(trackingCode, destinationCurrencyKey, amountReceived, fee);\\n        }\\n        */\\n    }\\n\\n    /* ========== SETTINGS ========== */\\n\\n    function atomicMaxVolumePerBlock() external view returns (uint) {\\n        return getAtomicMaxVolumePerBlock();\\n    }\\n\\n    function atomicTwapWindow() external view returns (uint) {\\n        return getAtomicTwapWindow();\\n    }\\n\\n    function atomicEquivalentForDexPricing(bytes32 currencyKey) external view returns (address) {\\n        return getAtomicEquivalentForDexPricing(currencyKey);\\n    }\\n\\n    function atomicExchangeFeeRate(bytes32 currencyKey) external view returns (uint) {\\n        return getAtomicExchangeFeeRate(currencyKey);\\n    }\\n\\n    function atomicPriceBuffer(bytes32 currencyKey) external view returns (uint) {\\n        return getAtomicPriceBuffer(currencyKey);\\n    }\\n\\n    function atomicVolatilityConsiderationWindow(bytes32 currencyKey) external view returns (uint) {\\n        return getAtomicVolatilityConsiderationWindow(currencyKey);\\n    }\\n\\n    function atomicVolatilityUpdateThreshold(bytes32 currencyKey) external view returns (uint) {\\n        return getAtomicVolatilityUpdateThreshold(currencyKey);\\n    }\\n\\n    function feeRateForAtomicExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey)\\n        external\\n        view\\n        returns (uint exchangeFeeRate)\\n    {\\n        exchangeFeeRate = _feeRateForAtomicExchange(sourceCurrencyKey, destinationCurrencyKey);\\n    }\\n\\n    function getAmountsForAtomicExchange(\\n        uint sourceAmount,\\n        bytes32 sourceCurrencyKey,\\n        bytes32 destinationCurrencyKey\\n    )\\n        external\\n        view\\n        returns (\\n            uint amountReceived,\\n            uint fee,\\n            uint exchangeFeeRate\\n        )\\n    {\\n        (amountReceived, fee, exchangeFeeRate, , , ) = _getAmountsForAtomicExchangeMinusFees(\\n            sourceAmount,\\n            sourceCurrencyKey,\\n            destinationCurrencyKey\\n        );\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    /// @dev See inline comments for replaced/mocked functionality from SIP-120\\n    function _exchangeAtomically(\\n        address from,\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address destinationAddress\\n    ) internal returns (uint amountReceived, uint fee) {\\n        /*\\n        _ensureCanExchange(sourceCurrencyKey, sourceAmount, destinationCurrencyKey);\\n        */\\n\\n        // One of src/dest synth must be sUSD (checked below for gas optimization reasons)\\n        require(\\n            !exchangeRates().synthTooVolatileForAtomicExchange(\\n                sourceCurrencyKey == sUSD ? destinationCurrencyKey : sourceCurrencyKey\\n            ),\\n            \\\"Src/dest synth too volatile\\\"\\n        );\\n\\n        /*\\n        uint sourceAmountAfterSettlement = _settleAndCalcSourceAmountRemaining(sourceAmount, from, sourceCurrencyKey);\\n        */\\n        uint sourceAmountAfterSettlement = sourceAmount;\\n\\n        // If, after settlement the user has no balance left (highly unlikely), then return to prevent\\n        // emitting events of 0 and don't revert so as to ensure the settlement queue is emptied\\n        if (sourceAmountAfterSettlement == 0) {\\n            return (0, 0);\\n        }\\n\\n        uint exchangeFeeRate;\\n        uint systemConvertedAmount;\\n        uint systemSourceRate;\\n        uint systemDestinationRate;\\n\\n        // Note: also ensures the given synths are allowed to be atomically exchanged\\n        (\\n            amountReceived, // output amount with fee taken out (denominated in dest currency)\\n            fee, // fee amount (denominated in dest currency)\\n            exchangeFeeRate, // applied fee rate\\n            systemConvertedAmount, // current system value without fees (denominated in dest currency)\\n            systemSourceRate, // current system rate for src currency\\n            systemDestinationRate // current system rate for dest currency\\n        ) = _getAmountsForAtomicExchangeMinusFees(sourceAmountAfterSettlement, sourceCurrencyKey, destinationCurrencyKey);\\n\\n        /*\\n        // SIP-65: Decentralized Circuit Breaker (checking current system rates)\\n        if (\\n            _suspendIfRateInvalid(sourceCurrencyKey, systemSourceRate) ||\\n            _suspendIfRateInvalid(destinationCurrencyKey, systemDestinationRate)\\n        ) {\\n            return (0, 0);\\n        }\\n        */\\n\\n        // Sanity check atomic output's value against current system value (checking atomic rates)\\n        require(\\n            !_isDeviationAboveThreshold(systemConvertedAmount, amountReceived.add(fee)),\\n            \\\"Atomic rate deviates too much\\\"\\n        );\\n\\n        // Ensure src/dest synth is sUSD and determine sUSD value of exchange\\n        uint sourceSusdValue;\\n        if (sourceCurrencyKey == sUSD) {\\n            // Use after-settled amount as this is amount converted (not sourceAmount)\\n            sourceSusdValue = sourceAmountAfterSettlement;\\n        } else if (destinationCurrencyKey == sUSD) {\\n            // In this case the systemConvertedAmount would be the fee-free sUSD value of the source synth\\n            sourceSusdValue = systemConvertedAmount;\\n        } else {\\n            revert(\\\"Src/dest synth must be sUSD\\\");\\n        }\\n\\n        // Check and update atomic volume limit\\n        _checkAndUpdateAtomicVolume(sourceSusdValue);\\n\\n        /*\\n        // Note: We don't need to check their balance as the _convert() below will do a safe subtraction which requires\\n        // the subtraction to not overflow, which would happen if their balance is not sufficient.\\n\\n        _convert(\\n            sourceCurrencyKey,\\n            from,\\n            sourceAmountAfterSettlement,\\n            destinationCurrencyKey,\\n            amountReceived,\\n            destinationAddress,\\n            false // no vsynths\\n        );\\n        */\\n        _swap(\\n            sourceCurrencyKey,\\n            from,\\n            sourceAmountAfterSettlement,\\n            destinationCurrencyKey,\\n            amountReceived,\\n            destinationAddress\\n        );\\n\\n        // Note: we accrue the fee within this contract's own token balances, similar to other AMM pools\\n\\n        /*\\n        // Remit the fee if required\\n        if (fee > 0) {\\n            // Normalize fee to sUSD\\n            // Note: `fee` is being reused to avoid stack too deep errors.\\n            fee = exchangeRates().effectiveValue(destinationCurrencyKey, fee, sUSD);\\n\\n            // Remit the fee in sUSDs\\n            issuer().synths(sUSD).issue(feePool().FEE_ADDRESS(), fee);\\n\\n            // Tell the fee pool about this\\n            feePool().recordFeePaid(fee);\\n        }\\n\\n        // Note: As of this point, `fee` is denominated in sUSD.\\n\\n        // Note: this update of the debt snapshot will not be accurate because the atomic exchange\\n        // was executed with a different rate than the system rate. To be perfect, issuance data,\\n        // priced in system rates, should have been adjusted on the src and dest synth.\\n        // The debt pool is expected to be deprecated soon, and so we don't bother with being\\n        // perfect here. For now, an inaccuracy will slowly accrue over time with increasing atomic\\n        // exchange volume.\\n        _updateSNXIssuedDebtOnExchange(\\n            [sourceCurrencyKey, destinationCurrencyKey],\\n            [systemSourceRate, systemDestinationRate]\\n        );\\n\\n        // Let the DApps know there was a Synth exchange\\n        ISynthetixInternal(address(synthetix())).emitSynthExchange(\\n            from,\\n            sourceCurrencyKey,\\n            sourceAmountAfterSettlement,\\n            destinationCurrencyKey,\\n            amountReceived,\\n            destinationAddress\\n        );\\n\\n        // Emit separate event to track atomic exchanges\\n        ISynthetixInternal(address(synthetix())).emitAtomicSynthExchange(\\n            from,\\n            sourceCurrencyKey,\\n            sourceAmountAfterSettlement,\\n            destinationCurrencyKey,\\n            amountReceived,\\n            destinationAddress\\n        );\\n\\n        // No need to persist any exchange information, as no settlement is required for atomic exchanges\\n        */\\n\\n        emit AtomicSynthExchange(\\n            from,\\n            sourceCurrencyKey,\\n            sourceAmountAfterSettlement,\\n            destinationCurrencyKey,\\n            amountReceived,\\n            destinationAddress\\n        );\\n    }\\n\\n    function _swap(\\n        bytes32 sourceCurrencyKey,\\n        address from,\\n        uint sourceAmountAfterSettlement,\\n        bytes32 destinationCurrencyKey,\\n        uint amountReceived,\\n        address recipient\\n    ) internal {\\n        IERC20(address(issuer().synths(sourceCurrencyKey))).safeTransferFrom(\\n            from,\\n            address(this),\\n            sourceAmountAfterSettlement\\n        );\\n        IERC20(address(issuer().synths(destinationCurrencyKey))).safeTransfer(recipient, amountReceived);\\n    }\\n\\n    function _checkAndUpdateAtomicVolume(uint sourceSusdValue) internal {\\n        uint currentVolume = uint(lastAtomicVolume.time) == block.timestamp\\n            ? uint(lastAtomicVolume.volume).add(sourceSusdValue)\\n            : sourceSusdValue;\\n        require(currentVolume <= getAtomicMaxVolumePerBlock(), \\\"Surpassed volume limit\\\");\\n        lastAtomicVolume.time = uint64(block.timestamp);\\n        lastAtomicVolume.volume = uint192(currentVolume); // Protected by volume limit check above\\n    }\\n\\n    function _feeRateForAtomicExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey)\\n        internal\\n        view\\n        returns (uint)\\n    {\\n        // Get the exchange fee rate as per destination currencyKey\\n        uint baseRate = getAtomicExchangeFeeRate(destinationCurrencyKey);\\n        if (baseRate == 0) {\\n            // If no atomic rate was set, fallback to the regular exchange rate\\n            baseRate = getExchangeFeeRate(destinationCurrencyKey);\\n        }\\n\\n        return _calculateFeeRateFromExchangeSynths(baseRate, sourceCurrencyKey, destinationCurrencyKey);\\n    }\\n\\n    function _calculateFeeRateFromExchangeSynths(\\n        uint exchangeFeeRate,\\n        bytes32 sourceCurrencyKey,\\n        bytes32 destinationCurrencyKey\\n    ) internal pure returns (uint) {\\n        if (sourceCurrencyKey == sUSD || destinationCurrencyKey == sUSD) {\\n            return exchangeFeeRate;\\n        }\\n\\n        // Is this a swing trade? long to short or short to long skipping sUSD.\\n        if (\\n            (sourceCurrencyKey[0] == 0x73 && destinationCurrencyKey[0] == 0x69) ||\\n            (sourceCurrencyKey[0] == 0x69 && destinationCurrencyKey[0] == 0x73)\\n        ) {\\n            // Double the exchange fee\\n            return exchangeFeeRate.mul(2);\\n        }\\n\\n        return exchangeFeeRate;\\n    }\\n\\n    function _getAmountsForAtomicExchangeMinusFees(\\n        uint sourceAmount,\\n        bytes32 sourceCurrencyKey,\\n        bytes32 destinationCurrencyKey\\n    )\\n        internal\\n        view\\n        returns (\\n            uint amountReceived,\\n            uint fee,\\n            uint exchangeFeeRate,\\n            uint systemConvertedAmount,\\n            uint systemSourceRate,\\n            uint systemDestinationRate\\n        )\\n    {\\n        uint destinationAmount;\\n        (destinationAmount, systemConvertedAmount, systemSourceRate, systemDestinationRate) = exchangeRates()\\n            .effectiveAtomicValueAndRates(sourceCurrencyKey, sourceAmount, destinationCurrencyKey);\\n\\n        exchangeFeeRate = _feeRateForAtomicExchange(sourceCurrencyKey, destinationCurrencyKey);\\n        amountReceived = _deductFeesFromAmount(destinationAmount, exchangeFeeRate);\\n        fee = destinationAmount.sub(amountReceived);\\n    }\\n\\n    function _deductFeesFromAmount(uint destinationAmount, uint exchangeFeeRate)\\n        internal\\n        pure\\n        returns (uint amountReceived)\\n    {\\n        amountReceived = destinationAmount.multiplyDecimal(SafeDecimalMath.unit().sub(exchangeFeeRate));\\n    }\\n\\n    function _isDeviationAboveThreshold(uint base, uint comparison) internal view returns (bool) {\\n        if (base == 0 || comparison == 0) {\\n            return true;\\n        }\\n\\n        uint factor;\\n        if (comparison > base) {\\n            factor = comparison.divideDecimal(base);\\n        } else {\\n            factor = base.divideDecimal(comparison);\\n        }\\n\\n        return factor >= getPriceDeviationThresholdFactor();\\n    }\\n\\n    event AtomicSynthExchange(\\n        address indexed account,\\n        bytes32 fromCurrencyKey,\\n        uint256 fromAmount,\\n        bytes32 toCurrencyKey,\\n        uint256 toAmount,\\n        address toAddress\\n    );\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity-2.3.0/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity-2.3.0/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity-2.3.0/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/synthetix/interfaces/IExchangeRates.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iexchangerates\\ninterface IExchangeRates {\\n    // Structs\\n    struct RateAndUpdatedTime {\\n        uint216 rate;\\n        uint40 time;\\n    }\\n\\n    struct InversePricing {\\n        uint entryPoint;\\n        uint upperLimit;\\n        uint lowerLimit;\\n        bool frozenAtUpperLimit;\\n        bool frozenAtLowerLimit;\\n    }\\n\\n    // Views\\n    function aggregators(bytes32 currencyKey) external view returns (address);\\n\\n    function aggregatorWarningFlags() external view returns (address);\\n\\n    function anyRateIsInvalid(bytes32[] calldata currencyKeys) external view returns (bool);\\n\\n    function canFreezeRate(bytes32 currencyKey) external view returns (bool);\\n\\n    function currentRoundForRate(bytes32 currencyKey) external view returns (uint);\\n\\n    function currenciesUsingAggregator(address aggregator) external view returns (bytes32[] memory);\\n\\n    function effectiveValue(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external view returns (uint value);\\n\\n    function effectiveValueAndRates(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    )\\n        external\\n        view\\n        returns (\\n            uint value,\\n            uint sourceRate,\\n            uint destinationRate\\n        );\\n\\n    function effectiveAtomicValueAndRates(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    )\\n        external\\n        view\\n        returns (\\n            uint value,\\n            uint systemValue,\\n            uint systemSourceRate,\\n            uint systemDestinationRate\\n        );\\n\\n    function effectiveValueAtRound(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        uint roundIdForSrc,\\n        uint roundIdForDest\\n    ) external view returns (uint value);\\n\\n    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint);\\n\\n    function getLastRoundIdBeforeElapsedSecs(\\n        bytes32 currencyKey,\\n        uint startingRoundId,\\n        uint startingTimestamp,\\n        uint timediff\\n    ) external view returns (uint);\\n\\n    function inversePricing(bytes32 currencyKey)\\n        external\\n        view\\n        returns (\\n            uint entryPoint,\\n            uint upperLimit,\\n            uint lowerLimit,\\n            bool frozenAtUpperLimit,\\n            bool frozenAtLowerLimit\\n        );\\n\\n    function lastRateUpdateTimes(bytes32 currencyKey) external view returns (uint256);\\n\\n    function oracle() external view returns (address);\\n\\n    function rateAndTimestampAtRound(bytes32 currencyKey, uint roundId) external view returns (uint rate, uint time);\\n\\n    function rateAndUpdatedTime(bytes32 currencyKey) external view returns (uint rate, uint time);\\n\\n    function rateAndInvalid(bytes32 currencyKey) external view returns (uint rate, bool isInvalid);\\n\\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\\n\\n    function rateIsFlagged(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateIsFrozen(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateIsInvalid(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateStalePeriod() external view returns (uint);\\n\\n    function ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32 currencyKey, uint numRounds)\\n        external\\n        view\\n        returns (uint[] memory rates, uint[] memory times);\\n\\n    function ratesAndInvalidForCurrencies(bytes32[] calldata currencyKeys)\\n        external\\n        view\\n        returns (uint[] memory rates, bool anyRateInvalid);\\n\\n    function ratesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory);\\n\\n    function synthTooVolatileForAtomicExchange(bytes32 currencyKey) external view returns (bool);\\n\\n    // Mutative functions\\n    function freezeRate(bytes32 currencyKey) external;\\n}\\n\"\r\n    },\r\n    \"contracts/synthetix/interfaces/IIssuer.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\nimport \\\"./ISynth.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iissuer\\ninterface IIssuer {\\n    // Views\\n    function anySynthOrSNXRateIsInvalid() external view returns (bool anyRateInvalid);\\n\\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\\n\\n    function availableSynthCount() external view returns (uint);\\n\\n    function availableSynths(uint index) external view returns (ISynth);\\n\\n    function canBurnSynths(address account) external view returns (bool);\\n\\n    function collateral(address account) external view returns (uint);\\n\\n    function collateralisationRatio(address issuer) external view returns (uint);\\n\\n    function collateralisationRatioAndAnyRatesInvalid(address _issuer)\\n        external\\n        view\\n        returns (uint cratio, bool anyRateIsInvalid);\\n\\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint debtBalance);\\n\\n    function issuanceRatio() external view returns (uint);\\n\\n    function lastIssueEvent(address account) external view returns (uint);\\n\\n    function maxIssuableSynths(address issuer) external view returns (uint maxIssuable);\\n\\n    function minimumStakeTime() external view returns (uint);\\n\\n    function remainingIssuableSynths(address issuer)\\n        external\\n        view\\n        returns (\\n            uint maxIssuable,\\n            uint alreadyIssued,\\n            uint totalSystemDebt\\n        );\\n\\n    function synths(bytes32 currencyKey) external view returns (ISynth);\\n\\n    function getSynths(bytes32[] calldata currencyKeys) external view returns (ISynth[] memory);\\n\\n    function synthsByAddress(address synthAddress) external view returns (bytes32);\\n\\n    function totalIssuedSynths(bytes32 currencyKey, bool excludeOtherCollateral) external view returns (uint);\\n\\n    function transferableSynthetixAndAnyRateIsInvalid(address account, uint balance)\\n        external\\n        view\\n        returns (uint transferable, bool anyRateIsInvalid);\\n\\n    // Restricted: used internally to Synthetix\\n    function issueSynths(address from, uint amount) external;\\n\\n    function issueSynthsOnBehalf(\\n        address issueFor,\\n        address from,\\n        uint amount\\n    ) external;\\n\\n    function issueMaxSynths(address from) external;\\n\\n    function issueMaxSynthsOnBehalf(address issueFor, address from) external;\\n\\n    function burnSynths(address from, uint amount) external;\\n\\n    function burnSynthsOnBehalf(\\n        address burnForAddress,\\n        address from,\\n        uint amount\\n    ) external;\\n\\n    function burnSynthsToTarget(address from) external;\\n\\n    function burnSynthsToTargetOnBehalf(address burnForAddress, address from) external;\\n\\n    function liquidateDelinquentAccount(\\n        address account,\\n        uint susdAmount,\\n        address liquidator\\n    ) external returns (uint totalRedeemed, uint amountToLiquidate);\\n}\\n\"\r\n    },\r\n    \"contracts/synthetix/MixinSystemSettings.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"./MixinResolver.sol\\\";\\n\\n// Internal references\\nimport \\\"./interfaces/IFlexibleStorage.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/contracts/mixinsystemsettings\\ncontract MixinSystemSettings is MixinResolver {\\n    bytes32 internal constant SETTING_CONTRACT_NAME = \\\"SystemSettings\\\";\\n\\n    bytes32 internal constant SETTING_WAITING_PERIOD_SECS = \\\"waitingPeriodSecs\\\";\\n    bytes32 internal constant SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR = \\\"priceDeviationThresholdFactor\\\";\\n    bytes32 internal constant SETTING_ISSUANCE_RATIO = \\\"issuanceRatio\\\";\\n    bytes32 internal constant SETTING_FEE_PERIOD_DURATION = \\\"feePeriodDuration\\\";\\n    bytes32 internal constant SETTING_TARGET_THRESHOLD = \\\"targetThreshold\\\";\\n    bytes32 internal constant SETTING_LIQUIDATION_DELAY = \\\"liquidationDelay\\\";\\n    bytes32 internal constant SETTING_LIQUIDATION_RATIO = \\\"liquidationRatio\\\";\\n    bytes32 internal constant SETTING_LIQUIDATION_PENALTY = \\\"liquidationPenalty\\\";\\n    bytes32 internal constant SETTING_RATE_STALE_PERIOD = \\\"rateStalePeriod\\\";\\n    bytes32 internal constant SETTING_EXCHANGE_FEE_RATE = \\\"exchangeFeeRate\\\";\\n    bytes32 internal constant SETTING_MINIMUM_STAKE_TIME = \\\"minimumStakeTime\\\";\\n    bytes32 internal constant SETTING_AGGREGATOR_WARNING_FLAGS = \\\"aggregatorWarningFlags\\\";\\n    bytes32 internal constant SETTING_TRADING_REWARDS_ENABLED = \\\"tradingRewardsEnabled\\\";\\n    bytes32 internal constant SETTING_DEBT_SNAPSHOT_STALE_TIME = \\\"debtSnapshotStaleTime\\\";\\n    bytes32 internal constant SETTING_CROSS_DOMAIN_DEPOSIT_GAS_LIMIT = \\\"crossDomainDepositGasLimit\\\";\\n    bytes32 internal constant SETTING_CROSS_DOMAIN_ESCROW_GAS_LIMIT = \\\"crossDomainEscrowGasLimit\\\";\\n    bytes32 internal constant SETTING_CROSS_DOMAIN_REWARD_GAS_LIMIT = \\\"crossDomainRewardGasLimit\\\";\\n    bytes32 internal constant SETTING_CROSS_DOMAIN_WITHDRAWAL_GAS_LIMIT = \\\"crossDomainWithdrawalGasLimit\\\";\\n    bytes32 internal constant SETTING_ETHER_WRAPPER_MAX_ETH = \\\"etherWrapperMaxETH\\\";\\n    bytes32 internal constant SETTING_ETHER_WRAPPER_MINT_FEE_RATE = \\\"etherWrapperMintFeeRate\\\";\\n    bytes32 internal constant SETTING_ETHER_WRAPPER_BURN_FEE_RATE = \\\"etherWrapperBurnFeeRate\\\";\\n    bytes32 internal constant SETTING_ATOMIC_MAX_VOLUME_PER_BLOCK = \\\"atomicMaxVolumePerBlock\\\";\\n    bytes32 internal constant SETTING_ATOMIC_TWAP_WINDOW = \\\"atomicTwapWindow\\\";\\n    bytes32 internal constant SETTING_ATOMIC_EQUIVALENT_FOR_DEX_PRICING = \\\"atomicEquivalentForDexPricing\\\";\\n    bytes32 internal constant SETTING_ATOMIC_EXCHANGE_FEE_RATE = \\\"atomicExchangeFeeRate\\\";\\n    bytes32 internal constant SETTING_ATOMIC_PRICE_BUFFER = \\\"atomicPriceBuffer\\\";\\n    bytes32 internal constant SETTING_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW = \\\"atomicVolConsiderationWindow\\\";\\n    bytes32 internal constant SETTING_ATOMIC_VOLATILITY_UPDATE_THRESHOLD = \\\"atomicVolUpdateThreshold\\\";\\n\\n    bytes32 internal constant CONTRACT_FLEXIBLESTORAGE = \\\"FlexibleStorage\\\";\\n\\n    enum CrossDomainMessageGasLimits {Deposit, Escrow, Reward, Withdrawal}\\n\\n    constructor(address _resolver) internal MixinResolver(_resolver) {}\\n\\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {\\n        addresses = new bytes32[](1);\\n        addresses[0] = CONTRACT_FLEXIBLESTORAGE;\\n    }\\n\\n    function flexibleStorage() internal view returns (IFlexibleStorage) {\\n        return IFlexibleStorage(requireAndGetAddress(CONTRACT_FLEXIBLESTORAGE));\\n    }\\n\\n    function _getGasLimitSetting(CrossDomainMessageGasLimits gasLimitType) internal pure returns (bytes32) {\\n        if (gasLimitType == CrossDomainMessageGasLimits.Deposit) {\\n            return SETTING_CROSS_DOMAIN_DEPOSIT_GAS_LIMIT;\\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Escrow) {\\n            return SETTING_CROSS_DOMAIN_ESCROW_GAS_LIMIT;\\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Reward) {\\n            return SETTING_CROSS_DOMAIN_REWARD_GAS_LIMIT;\\n        } else if (gasLimitType == CrossDomainMessageGasLimits.Withdrawal) {\\n            return SETTING_CROSS_DOMAIN_WITHDRAWAL_GAS_LIMIT;\\n        } else {\\n            revert(\\\"Unknown gas limit type\\\");\\n        }\\n    }\\n\\n    function getCrossDomainMessageGasLimit(CrossDomainMessageGasLimits gasLimitType) internal view returns (uint) {\\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, _getGasLimitSetting(gasLimitType));\\n    }\\n\\n    function getTradingRewardsEnabled() internal view returns (bool) {\\n        return flexibleStorage().getBoolValue(SETTING_CONTRACT_NAME, SETTING_TRADING_REWARDS_ENABLED);\\n    }\\n\\n    function getWaitingPeriodSecs() internal view returns (uint) {\\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_WAITING_PERIOD_SECS);\\n    }\\n\\n    function getPriceDeviationThresholdFactor() internal view returns (uint) {\\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR);\\n    }\\n\\n    function getIssuanceRatio() internal view returns (uint) {\\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ISSUANCE_RATIO);\\n    }\\n\\n    function getFeePeriodDuration() internal view returns (uint) {\\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_FEE_PERIOD_DURATION);\\n    }\\n\\n    function getTargetThreshold() internal view returns (uint) {\\n        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)\\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_TARGET_THRESHOLD);\\n    }\\n\\n    function getLiquidationDelay() internal view returns (uint) {\\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_DELAY);\\n    }\\n\\n    function getLiquidationRatio() internal view returns (uint) {\\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_RATIO);\\n    }\\n\\n    function getLiquidationPenalty() internal view returns (uint) {\\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_PENALTY);\\n    }\\n\\n    function getRateStalePeriod() internal view returns (uint) {\\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_RATE_STALE_PERIOD);\\n    }\\n\\n    function getExchangeFeeRate(bytes32 currencyKey) internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                keccak256(abi.encodePacked(SETTING_EXCHANGE_FEE_RATE, currencyKey))\\n            );\\n    }\\n\\n    function getMinimumStakeTime() internal view returns (uint) {\\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_MINIMUM_STAKE_TIME);\\n    }\\n\\n    function getAggregatorWarningFlags() internal view returns (address) {\\n        return flexibleStorage().getAddressValue(SETTING_CONTRACT_NAME, SETTING_AGGREGATOR_WARNING_FLAGS);\\n    }\\n\\n    function getDebtSnapshotStaleTime() internal view returns (uint) {\\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_DEBT_SNAPSHOT_STALE_TIME);\\n    }\\n\\n    function getEtherWrapperMaxETH() internal view returns (uint) {\\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_MAX_ETH);\\n    }\\n\\n    function getEtherWrapperMintFeeRate() internal view returns (uint) {\\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_MINT_FEE_RATE);\\n    }\\n\\n    function getEtherWrapperBurnFeeRate() internal view returns (uint) {\\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_BURN_FEE_RATE);\\n    }\\n\\n    function getAtomicMaxVolumePerBlock() internal view returns (uint) {\\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ATOMIC_MAX_VOLUME_PER_BLOCK);\\n    }\\n\\n    function getAtomicTwapWindow() internal view returns (uint) {\\n        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ATOMIC_TWAP_WINDOW);\\n    }\\n\\n    function getAtomicEquivalentForDexPricing(bytes32 currencyKey) internal view returns (address) {\\n        return\\n            flexibleStorage().getAddressValue(\\n                SETTING_CONTRACT_NAME,\\n                keccak256(abi.encodePacked(SETTING_ATOMIC_EQUIVALENT_FOR_DEX_PRICING, currencyKey))\\n            );\\n    }\\n\\n    function getAtomicExchangeFeeRate(bytes32 currencyKey) internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                keccak256(abi.encodePacked(SETTING_ATOMIC_EXCHANGE_FEE_RATE, currencyKey))\\n            );\\n    }\\n\\n    function getAtomicPriceBuffer(bytes32 currencyKey) internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                keccak256(abi.encodePacked(SETTING_ATOMIC_PRICE_BUFFER, currencyKey))\\n            );\\n    }\\n\\n    function getAtomicVolatilityConsiderationWindow(bytes32 currencyKey) internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                keccak256(abi.encodePacked(SETTING_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW, currencyKey))\\n            );\\n    }\\n\\n    function getAtomicVolatilityUpdateThreshold(bytes32 currencyKey) internal view returns (uint) {\\n        return\\n            flexibleStorage().getUIntValue(\\n                SETTING_CONTRACT_NAME,\\n                keccak256(abi.encodePacked(SETTING_ATOMIC_VOLATILITY_UPDATE_THRESHOLD, currencyKey))\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/synthetix/Owned.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\n// https://docs.synthetix.io/contracts/source/contracts/owned\\ncontract Owned {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    constructor(address _owner) public {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner() {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    function _onlyOwner() private view {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\\n\"\r\n    },\r\n    \"contracts/synthetix/SafeDecimalMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\n// Libraries\\nimport \\\"openzeppelin-solidity-2.3.0/contracts/math/SafeMath.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 public constant decimals = 18;\\n    uint8 public constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint public constant UNIT = 10**uint(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() external pure returns (uint) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return Provides an interface to PRECISE_UNIT.\\n     */\\n    function preciseUnit() external pure returns (uint) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a precise unit.\\n     *\\n     * @dev The operands should be in the precise unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * high precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the high precision unit\\n     * is evaluated, so the product of x and the high precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    // Computes `a - b`, setting the value to 0 if b > a.\\n    function floorsub(uint a, uint b) internal pure returns (uint) {\\n        return b >= a ? 0 : a - b;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity-2.3.0/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Collection of functions related to the address type,\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\n     * execution of a contract's constructor, its address will be reported as\\n     * not containing a contract.\\n     *\\n     * > It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/synthetix/interfaces/ISynth.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/isynth\\ninterface ISynth {\\n    // Views\\n    function currencyKey() external view returns (bytes32);\\n\\n    function transferableSynths(address account) external view returns (uint);\\n\\n    // Mutative functions\\n    function transferAndSettle(address to, uint value) external returns (bool);\\n\\n    function transferFromAndSettle(\\n        address from,\\n        address to,\\n        uint value\\n    ) external returns (bool);\\n\\n    // Restricted: used internally to Synthetix\\n    function burn(address account, uint amount) external;\\n\\n    function issue(address account, uint amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/synthetix/MixinResolver.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\n// Internal references\\nimport \\\"./AddressResolver.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/contracts/mixinresolver\\ncontract MixinResolver {\\n    AddressResolver public resolver;\\n\\n    mapping(bytes32 => address) private addressCache;\\n\\n    constructor(address _resolver) internal {\\n        resolver = AddressResolver(_resolver);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function combineArrays(bytes32[] memory first, bytes32[] memory second)\\n        internal\\n        pure\\n        returns (bytes32[] memory combination)\\n    {\\n        combination = new bytes32[](first.length + second.length);\\n\\n        for (uint i = 0; i < first.length; i++) {\\n            combination[i] = first[i];\\n        }\\n\\n        for (uint j = 0; j < second.length; j++) {\\n            combination[first.length + j] = second[j];\\n        }\\n    }\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n\\n    // Note: this function is public not external in order for it to be overridden and invoked via super in subclasses\\n    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {}\\n\\n    function rebuildCache() public {\\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\\n        // The resolver must call this function whenver it updates its state\\n        for (uint i = 0; i < requiredAddresses.length; i++) {\\n            bytes32 name = requiredAddresses[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination =\\n                resolver.requireAndGetAddress(name, string(abi.encodePacked(\\\"Resolver missing target: \\\", name)));\\n            addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory requiredAddresses = resolverAddressesRequired();\\n        for (uint i = 0; i < requiredAddresses.length; i++) {\\n            bytes32 name = requiredAddresses[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function requireAndGetAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = addressCache[name];\\n        require(_foundAddress != address(0), string(abi.encodePacked(\\\"Missing address: \\\", name)));\\n        return _foundAddress;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event CacheUpdated(bytes32 name, address destination);\\n}\\n\"\r\n    },\r\n    \"contracts/synthetix/interfaces/IFlexibleStorage.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iflexiblestorage\\ninterface IFlexibleStorage {\\n    // Views\\n    function getUIntValue(bytes32 contractName, bytes32 record) external view returns (uint);\\n\\n    function getUIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (uint[] memory);\\n\\n    function getIntValue(bytes32 contractName, bytes32 record) external view returns (int);\\n\\n    function getIntValues(bytes32 contractName, bytes32[] calldata records) external view returns (int[] memory);\\n\\n    function getAddressValue(bytes32 contractName, bytes32 record) external view returns (address);\\n\\n    function getAddressValues(bytes32 contractName, bytes32[] calldata records) external view returns (address[] memory);\\n\\n    function getBoolValue(bytes32 contractName, bytes32 record) external view returns (bool);\\n\\n    function getBoolValues(bytes32 contractName, bytes32[] calldata records) external view returns (bool[] memory);\\n\\n    function getBytes32Value(bytes32 contractName, bytes32 record) external view returns (bytes32);\\n\\n    function getBytes32Values(bytes32 contractName, bytes32[] calldata records) external view returns (bytes32[] memory);\\n\\n    // Mutative functions\\n    function deleteUIntValue(bytes32 contractName, bytes32 record) external;\\n\\n    function deleteIntValue(bytes32 contractName, bytes32 record) external;\\n\\n    function deleteAddressValue(bytes32 contractName, bytes32 record) external;\\n\\n    function deleteBoolValue(bytes32 contractName, bytes32 record) external;\\n\\n    function deleteBytes32Value(bytes32 contractName, bytes32 record) external;\\n\\n    function setUIntValue(\\n        bytes32 contractName,\\n        bytes32 record,\\n        uint value\\n    ) external;\\n\\n    function setUIntValues(\\n        bytes32 contractName,\\n        bytes32[] calldata records,\\n        uint[] calldata values\\n    ) external;\\n\\n    function setIntValue(\\n        bytes32 contractName,\\n        bytes32 record,\\n        int value\\n    ) external;\\n\\n    function setIntValues(\\n        bytes32 contractName,\\n        bytes32[] calldata records,\\n        int[] calldata values\\n    ) external;\\n\\n    function setAddressValue(\\n        bytes32 contractName,\\n        bytes32 record,\\n        address value\\n    ) external;\\n\\n    function setAddressValues(\\n        bytes32 contractName,\\n        bytes32[] calldata records,\\n        address[] calldata values\\n    ) external;\\n\\n    function setBoolValue(\\n        bytes32 contractName,\\n        bytes32 record,\\n        bool value\\n    ) external;\\n\\n    function setBoolValues(\\n        bytes32 contractName,\\n        bytes32[] calldata records,\\n        bool[] calldata values\\n    ) external;\\n\\n    function setBytes32Value(\\n        bytes32 contractName,\\n        bytes32 record,\\n        bytes32 value\\n    ) external;\\n\\n    function setBytes32Values(\\n        bytes32 contractName,\\n        bytes32[] calldata records,\\n        bytes32[] calldata values\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/synthetix/AddressResolver.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\n// Inheritance\\nimport \\\"./Owned.sol\\\";\\nimport \\\"./interfaces/IAddressResolver.sol\\\";\\n\\n// Internal references\\nimport \\\"./interfaces/IIssuer.sol\\\";\\nimport \\\"./MixinResolver.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/contracts/addressresolver\\ncontract AddressResolver is Owned, IAddressResolver {\\n    mapping(bytes32 => address) public repository;\\n\\n    constructor(address _owner) public Owned(_owner) {}\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function importAddresses(bytes32[] calldata names, address[] calldata destinations) external onlyOwner {\\n        require(names.length == destinations.length, \\\"Input lengths must match\\\");\\n\\n        for (uint i = 0; i < names.length; i++) {\\n            bytes32 name = names[i];\\n            address destination = destinations[i];\\n            repository[name] = destination;\\n            emit AddressImported(name, destination);\\n        }\\n    }\\n\\n    /* ========= PUBLIC FUNCTIONS ========== */\\n\\n    function rebuildCaches(MixinResolver[] calldata destinations) external {\\n        for (uint i = 0; i < destinations.length; i++) {\\n            destinations[i].rebuildCache();\\n        }\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function areAddressesImported(bytes32[] calldata names, address[] calldata destinations) external view returns (bool) {\\n        for (uint i = 0; i < names.length; i++) {\\n            if (repository[names[i]] != destinations[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function getAddress(bytes32 name) external view returns (address) {\\n        return repository[name];\\n    }\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address) {\\n        address _foundAddress = repository[name];\\n        require(_foundAddress != address(0), reason);\\n        return _foundAddress;\\n    }\\n\\n    function getSynth(bytes32 key) external view returns (address) {\\n        IIssuer issuer = IIssuer(repository[\\\"Issuer\\\"]);\\n        require(address(issuer) != address(0), \\\"Cannot find Issuer address\\\");\\n        return address(issuer.synths(key));\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event AddressImported(bytes32 name, address destination);\\n}\\n\"\r\n    },\r\n    \"contracts/synthetix/interfaces/IAddressResolver.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\\ninterface IAddressResolver {\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getSynth(bytes32 key) external view returns (address);\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/synthetix/SafeDecimalMath.sol\": {\r\n        \"SafeDecimalMath\": \"0x84d626b2bb4d0f064067e4bf80fce7055d8f3e7b\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fromCurrencyKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"toCurrencyKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"AtomicSynthExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"atomicEquivalentForDexPricing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"atomicExchangeFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atomicMaxVolumePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"atomicPriceBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atomicTwapWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"atomicVolatilityConsiderationWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"}],\"name\":\"atomicVolatilityUpdateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sourceCurrencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"destinationCurrencyKey\",\"type\":\"bytes32\"}],\"name\":\"exchangeAtomically\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRates\",\"outputs\":[{\"internalType\":\"contract IExchangeRates\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sourceCurrencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"destinationCurrencyKey\",\"type\":\"bytes32\"}],\"name\":\"feeRateForAtomicExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeFeeRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"flexibleStoragePublic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"sourceCurrencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"destinationCurrencyKey\",\"type\":\"bytes32\"}],\"name\":\"getAmountsForAtomicExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeFeeRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"internalType\":\"contract IIssuer\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastAtomicVolume\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"volume\",\"type\":\"uint192\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebuildCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract AddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolverAddressesRequired\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"addresses\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"sweepAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sweepEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SynthetixSandboxAMM","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000298eccfb4317e66c7ee6a7d0cb5cbedb85a3020500000000000000000000000033a0eefab850a842d3c203751fc287d6d402b0d7","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}