{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-05-06\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2018-06-12\r\n*/\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n        @dev Transfers the ownership of the contract.\r\n\r\n        @param _owner Address of the new owner\r\n    */\r\n    function setOwner(address _owner) public onlyOwner returns (bool) {\r\n        require(_owner != address(0));\r\n        owner = _owner;\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract RpSafeMath {\r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal returns(uint256) {\r\n        if (a < b) {\r\n          return a;\r\n        } else {\r\n          return b;\r\n        }\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal returns(uint256) {\r\n        if (a > b) {\r\n          return a;\r\n        } else {\r\n          return b;\r\n        }\r\n    }\r\n}\r\n\r\ncontract HasWorkers is Ownable {\r\n    mapping(address => uint256) private workerToIndex;\r\n    address[] private workers;\r\n\r\n    event AddedWorker(address _worker);\r\n    event RemovedWorker(address _worker);\r\n\r\n    constructor() public {\r\n        workers.length++;\r\n    }\r\n\r\n    modifier onlyWorker() {\r\n        require(isWorker(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier workerOrOwner() {\r\n        require(isWorker(msg.sender) || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function isWorker(address _worker) public view returns (bool) {\r\n        return workerToIndex[_worker] != 0;\r\n    }\r\n\r\n    function allWorkers() public view returns (address[] memory result) {\r\n        result = new address[](workers.length - 1);\r\n        for (uint256 i = 1; i < workers.length; i++) {\r\n            result[i - 1] = workers[i];\r\n        }\r\n    }\r\n\r\n    function addWorker(address _worker) public onlyOwner returns (bool) {\r\n        require(!isWorker(_worker));\r\n        uint256 index = workers.push(_worker) - 1;\r\n        workerToIndex[_worker] = index;\r\n        emit AddedWorker(_worker);\r\n        return true;\r\n    }\r\n\r\n    function removeWorker(address _worker) public onlyOwner returns (bool) {\r\n        require(isWorker(_worker));\r\n        uint256 index = workerToIndex[_worker];\r\n        address lastWorker = workers[workers.length - 1];\r\n        workerToIndex[lastWorker] = index;\r\n        workers[index] = lastWorker;\r\n        workers.length--;\r\n        delete workerToIndex[_worker];\r\n        emit RemovedWorker(_worker);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Token {\r\n    function transfer(address _to, uint _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n}   \r\n\r\n\r\n/*\r\n    @notice Receives ETH or Tokens and routes them to a list of accounts or to a cold wallet.\r\n*/\r\ncontract Balancer is RpSafeMath, Ownable, HasWorkers {\r\n    address[] public accounts;\r\n    address public coldWallet;\r\n\r\n    uint256 public limitEth;\r\n    mapping(address => uint256) public limitToken;\r\n\r\n    bool public paused;\r\n\r\n    constructor() public {\r\n        coldWallet = msg.sender;\r\n    }\r\n\r\n    /*\r\n        @return All the \"hotwallet\" accounts, it must have at least one.\r\n    */\r\n    function allAccounts() public view returns (address[]) {\r\n        return accounts;\r\n    }\r\n\r\n    /*\r\n        @notice Pauses the balancer, if the Balancer is paused all ETH/tokens\r\n            will be realyed to the coldwallet.\r\n\r\n        @dev Any worker can pause the contract\r\n    */\r\n    function pause() public workerOrOwner returns (bool) {\r\n        paused = true;\r\n        return true;\r\n    }\r\n\r\n    /*\r\n        @notice Unpauses the balancer.\r\n\r\n        @dev Only the owner can unpause\r\n    */\r\n    function unpause() public onlyOwner returns (bool) {\r\n        paused = false;\r\n        return true;\r\n    }\r\n\r\n    /*\r\n        @notice Sets the total max amount in ETH for the accounts to hold,\r\n            any exceeding funds will be sent to the coldWallet.\r\n\r\n        @param limit Max amount in wei\r\n    */\r\n    function setLimitEth(uint256 limit) public onlyOwner returns (bool) {\r\n        limitEth = limit;\r\n        return true;\r\n    }\r\n\r\n    /*\r\n        @notice Sets the total max amount in token for the accounts to hold,\r\n            any exceeding funds will be sent to the coldWallet.\r\n\r\n        @param token Token to set the limit\r\n        @param limit Max amount in wei\r\n    */\r\n    function setLimitToken(Token token, uint256 limit) public onlyOwner returns (bool) {\r\n        limitToken[token] = limit;\r\n        return true;\r\n    }\r\n\r\n    /*\r\n        @notice Adds an account to the \"hotwallet\" group\r\n\r\n        @param account Address of the account\r\n    */\r\n    function addAccount(address account) public onlyOwner returns (bool) {\r\n        accounts.push(account);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n        @notice Removes an account\r\n\r\n        @dev This method iterates over the accounts array, if number of accounts\r\n            is too big this method will fail. Use carefully.\r\n\r\n        @param account Account to remove\r\n    */\r\n    function removeAccountSearch(address account) public onlyOwner returns (bool) {\r\n        for(uint256 index = 0; index < accounts.length; index++) {\r\n            if (accounts[index] == account) {\r\n                return removeAccount(index, account);\r\n            }\r\n        }\r\n\r\n        revert();\r\n    }\r\n\r\n    /*\r\n        @notice Removes an account without searching for the index.\r\n\r\n        @param index Index of the account, must match the account index.\r\n        @param account Account to remove\r\n    */\r\n    function removeAccount(uint256 index, address account) public onlyOwner returns (bool) {\r\n        require(accounts[index] == account);\r\n        accounts[index] = accounts[accounts.length - 1];\r\n        accounts.length -= 1;\r\n        return true;\r\n    }\r\n\r\n    /*\r\n        @notice Changes the coldwallet, exceeding funds will be sent here\r\n\r\n        @param wallet New coldwallet address\r\n    */\r\n    function setColdWallet(address wallet) public onlyOwner returns (bool) {\r\n        coldWallet = wallet;\r\n        return true;\r\n    }\r\n\r\n    /*\r\n        @notice Executes any transaction\r\n    */\r\n    function executeTransaction(address to, uint256 value, bytes data) public onlyOwner returns (bool) {\r\n        return to.call.value(value)(data);\r\n    }\r\n\r\n    /*\r\n        @notice Loads the ETH balances of all the accounts\r\n    */\r\n    function loadEthBalances() public view returns (uint256[] memory, uint256 total) {\r\n        uint256[] memory result = new uint256[](accounts.length);\r\n        uint256 balance;\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            balance = accounts[i].balance;\r\n            result[i] = balance;\r\n            total += balance;\r\n        }\r\n        return (result, total);\r\n    }\r\n\r\n    /*\r\n        @notice Loads the token balance of all the accounts\r\n    */\r\n    function loadTokenBalances(Token token) public view returns (uint256[] memory, uint256 total) {\r\n        uint256[] memory result = new uint256[](accounts.length);\r\n        uint256 balance;\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            balance = token.balanceOf(accounts[i]);\r\n            result[i] = balance;\r\n            total += balance;\r\n        }\r\n        return (result, total);\r\n    }\r\n\r\n    /*\r\n        @notice Calculates the optimal per-wallet balance target\r\n\r\n        @param target The global target\r\n        @param balances The balance of each account\r\n\r\n        @return nTarget The target per account\r\n    */\r\n    function getTargetPerWallet(uint256 target, uint256[] memory balances) internal pure returns (uint256 nTarget) {\r\n        uint256 d = balances.length;\r\n        uint256 oTarget = target / balances.length;\r\n        uint256 t;\r\n\r\n        for (uint256 i = 0; i < balances.length; i++) {\r\n            if (balances[i] > oTarget) {\r\n                d--;\r\n                t += (balances[i] - oTarget);\r\n            }\r\n        }\r\n\r\n        nTarget = oTarget - (t / d);\r\n    }\r\n\r\n    /*\r\n        @notice Forawards the ETH to the defined accounts, if the limit is exceeded\r\n            sends the extra ETH to the coldwallet.\r\n\r\n        @dev If gas is not enought the ETH is temporary stored in the contract\r\n    */\r\n    function() public payable {\r\n        if (gasleft() > 2400) {\r\n            if (paused) {\r\n                coldWallet.transfer(address(this).balance);\r\n            } else {\r\n                uint256[] memory balances;\r\n                uint256 total;\r\n\r\n                (balances, total) = loadEthBalances();\r\n\r\n                uint256 value = address(this).balance;\r\n                uint256 targetTotal = min(limitEth, total + value);\r\n\r\n                if (targetTotal > total) {\r\n                    uint256 targetPerHotwallet = getTargetPerWallet(targetTotal, balances);\r\n\r\n                    for (uint256 i = 0; i < balances.length; i++) {\r\n                        if (balances[i] < targetPerHotwallet) {\r\n                            accounts[i].transfer(targetPerHotwallet - balances[i]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                uint256 toColdWallet = address(this).balance;\r\n                if (toColdWallet != 0) {\r\n                    (bool success, ) = coldWallet.call.value(toColdWallet)(\"\");\r\n                    require(success, \"Transfer failed.\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n        @notice Forawards the tokens to the defined accounts, if the limit is exceeded\r\n            sends the extra tokens to the coldwallet.\r\n\r\n        @param token Token to forward\r\n    */\r\n    function handleTokens(Token token) public returns (bool) {\r\n        if (paused) {\r\n            token.transfer(coldWallet, token.balanceOf(this));\r\n        } else {\r\n            uint256[] memory balances;\r\n            uint256 total;\r\n\r\n            (balances, total) = loadTokenBalances(token);\r\n\r\n            uint256 value = token.balanceOf(address(this));\r\n            uint256 targetTotal = min(limitToken[token], total + value);\r\n\r\n            if (targetTotal > total) {\r\n                uint256 targetPerHotwallet = getTargetPerWallet(targetTotal, balances);\r\n\r\n                for (uint256 i = 0; i < balances.length; i++) {\r\n                    if (balances[i] < targetPerHotwallet) {\r\n                        token.transfer(accounts[i], targetPerHotwallet - balances[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            uint256 toColdWallet = token.balanceOf(address(this));\r\n            if (toColdWallet != 0) {\r\n                //token.transfer(coldWallet, toColdWallet);\r\n                address(token).call(abi.encodeWithSignature(\"transfer(address,uint256)\", coldWallet, toColdWallet));\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setColdWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setLimitEth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"loadTokenBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coldWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"addWorker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loadEthBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"isWorker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"removeWorker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"handleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allWorkers\",\"outputs\":[{\"name\":\"result\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAccountSearch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setLimitToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"AddedWorker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"RemovedWorker\",\"type\":\"event\"}]","ContractName":"Balancer","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8c268b24f83dc18be2fdca628788520a3381546a3e7804638634136f33da2270"}]}