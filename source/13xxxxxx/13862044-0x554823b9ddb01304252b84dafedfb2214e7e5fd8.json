{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/arteQAdmin.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the contracts written for artèQ Investment Fund (https://github.com/billionbuild/arteq-contracts).\\n * Copyright (c) 2021 BillionBuild (2B) Team.\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./IarteQAdmin.sol\\\";\\n\\n/// @author Kam Amini <kam@arteq.io> <kam@2b.team> <kam.cpp@gmail.com>\\n///\\n/// Reviewed and revised by: Masoud Khosravi <masoud_at_2b.team> <mkh_at_arteq.io>\\n///                          Ali Jafari <ali_at_2b.team> <aj_at_arteq.io>\\n///\\n/// @title The admin contract managing all other artèQ contracts\\n///\\n/// We achieve the followings by using this contract as the admin\\n/// account of any other artèQ contract:\\n///\\n/// 1) If one or two of the admin private keys are leaked out, other\\n///    admins can remove or replace the affected admin accounts.\\n///\\n/// 2) The contract having this account set as its admin account\\n///    cannot perform any adminitrative task without gathering\\n///    enough approvals from all admins (more than 50% of the admins\\n///    must approve a task).\\n///\\n///  3) With enough events emitted by this contract, any misuse of\\n///     administrative powers or a malicious behavior can be easily\\n///     tracked down, and if all other admins agree, the offender\\n///     account can get removed or replaced.\\n///\\n/// @notice Use at your own risk\\ncontract arteQAdmin is IarteQAdmin {\\n\\n    uint public MAX_NR_OF_ADMINS = 10;\\n    uint public MIN_NR_OF_ADMINS = 5;\\n\\n    mapping (address => uint) private _admins;\\n    mapping (address => uint) private _finalizers;\\n\\n    mapping (uint256 => uint) private _tasks;\\n    mapping (uint256 => mapping(address => uint)) private _taskApprovals;\\n    mapping (uint256 => uint) private _taskApprovalsCount;\\n    mapping (uint256 => string) private _taskURIs;\\n\\n    uint private _nrOfAdmins;\\n    uint private _minRequiredNrOfApprovals;\\n    uint256 private _taskIdCounter;\\n\\n    modifier onlyOneOfAdmins() {\\n        require(_admins[msg.sender] == 1, \\\"arteQAdmin: not an admin account\\\");\\n        _;\\n    }\\n\\n    modifier onlyFinalizer() {\\n        require(_finalizers[msg.sender] == 1, \\\"arteQAdmin: not a finalizer account\\\");\\n        _;\\n    }\\n\\n    modifier taskMustExist(uint256 taskId) {\\n        require(_tasks[taskId] == 1, \\\"arteQAdmin: task does not exist\\\");\\n        _;\\n    }\\n\\n    modifier mustBeOneOfAdmins(address account) {\\n        require(_admins[account] == 1, \\\"arteQAdmin: not an admin account\\\");\\n        _;\\n    }\\n\\n    modifier taskMustBeApproved(uint256 taskId) {\\n        require(_taskApprovalsCount[taskId] >= _minRequiredNrOfApprovals, \\\"arteQAdmin: task is not approved\\\");\\n        _;\\n    }\\n\\n    constructor(address[] memory initialAdmins) {\\n        require(initialAdmins.length >= MIN_NR_OF_ADMINS, \\\"arteQAdmin: not enough inital admins\\\");\\n        require(initialAdmins.length <= MAX_NR_OF_ADMINS, \\\"arteQAdmin: max nr of admins exceeded\\\");\\n        _nrOfAdmins = 0;\\n        for (uint i = 0; i < initialAdmins.length; i++) {\\n            address admin = initialAdmins[i];\\n            _admins[admin] = 1;\\n            _nrOfAdmins++;\\n            emit AdminAdded(msg.sender, admin);\\n        }\\n\\n        _minRequiredNrOfApprovals = 1 + uint(initialAdmins.length) / uint(2);\\n        emit NewMinRequiredNrOfApprovalsSet(msg.sender, _minRequiredNrOfApprovals);\\n\\n        _taskIdCounter = 1;\\n    }\\n\\n    function minNrOfAdmins() external view virtual override returns (uint) {\\n        return MIN_NR_OF_ADMINS;\\n    }\\n\\n    function maxNrOfAdmins() external view virtual override returns (uint) {\\n        return MAX_NR_OF_ADMINS;\\n    }\\n\\n    function nrOfAdmins() external view virtual override returns (uint) {\\n        return _nrOfAdmins;\\n    }\\n\\n    function minRequiredNrOfApprovals() external view virtual override returns (uint) {\\n        return _minRequiredNrOfApprovals;\\n    }\\n\\n    function isFinalizer(address account) external view virtual override onlyOneOfAdmins returns (bool) {\\n        return _finalizers[account] == 1;\\n    }\\n\\n    function addFinalizer(uint256 taskId, address toBeAdded) external virtual override\\n      onlyOneOfAdmins\\n      taskMustExist(taskId)\\n      taskMustBeApproved(taskId) {\\n        require(_finalizers[toBeAdded] == 0, \\\"arteQAdmin: already a finalizer account\\\");\\n        _finalizers[toBeAdded] = 1;\\n        emit FinalizerAdded(msg.sender, toBeAdded);\\n        // finalize task\\n        _tasks[taskId] = 0;\\n        emit TaskFinalized(msg.sender, msg.sender, taskId);\\n    }\\n\\n    function removeFinalizer(uint256 taskId, address toBeRemoved) external virtual override\\n      onlyOneOfAdmins\\n      taskMustExist(taskId)\\n      taskMustBeApproved(taskId) {\\n        require(_finalizers[toBeRemoved] == 1, \\\"arteQAdmin: not a finalizer account\\\");\\n        _finalizers[toBeRemoved] = 0;\\n        emit FinalizerRemoved(msg.sender, toBeRemoved);\\n        // finalize task\\n        _tasks[taskId] = 0;\\n        emit TaskFinalized(msg.sender, msg.sender, taskId);\\n    }\\n\\n    function createTask(string memory detailsURI) external virtual override onlyOneOfAdmins {\\n        uint256 taskId = _taskIdCounter;\\n        _taskIdCounter++;\\n        _tasks[taskId] = 1;\\n        _taskApprovalsCount[taskId] = 0;\\n        _taskURIs[taskId] = detailsURI;\\n        emit TaskCreated(msg.sender, taskId, detailsURI);\\n    }\\n\\n    function taskURI(uint256 taskId) external view virtual override onlyOneOfAdmins taskMustExist(taskId) returns (string memory) {\\n        return _taskURIs[taskId];\\n    }\\n\\n    function approveTask(uint256 taskId) external virtual override onlyOneOfAdmins taskMustExist(taskId) {\\n        require(_taskApprovals[taskId][msg.sender] == 0, \\\"arteQAdmin: already approved\\\");\\n        _taskApprovals[taskId][msg.sender] = 1;\\n        _taskApprovalsCount[taskId]++;\\n        emit TaskApproved(msg.sender, taskId);\\n    }\\n\\n    function cancelTaskApproval(uint256 taskId) external virtual override onlyOneOfAdmins taskMustExist(taskId) {\\n        require(_taskApprovals[taskId][msg.sender] == 1, \\\"arteQAdmin: no approval to cancel\\\");\\n        _taskApprovals[taskId][msg.sender] = 0;\\n        _taskApprovalsCount[taskId]--;\\n        emit TaskApprovalCancelled(msg.sender, taskId);\\n    }\\n\\n    function nrOfApprovals(uint256 taskId) external view virtual override onlyOneOfAdmins taskMustExist(taskId) returns (uint) {\\n        return _taskApprovalsCount[taskId];\\n    }\\n\\n    function finalizeTask(address origin, uint256 taskId) external virtual override\\n      onlyFinalizer\\n      mustBeOneOfAdmins(origin)\\n      taskMustExist(taskId)\\n      taskMustBeApproved(taskId) {\\n        _tasks[taskId] = 0;\\n        emit TaskFinalized(msg.sender, origin, taskId);\\n    }\\n\\n    function isAdmin(address account) external view virtual override onlyOneOfAdmins returns (bool) {\\n        return _admins[account] == 1;\\n    }\\n\\n    function addAdmin(uint256 taskId, address toBeAdded) external virtual override\\n      onlyOneOfAdmins\\n      taskMustExist(taskId)\\n      taskMustBeApproved(taskId) {\\n        require(_nrOfAdmins < MAX_NR_OF_ADMINS, \\\"arteQAdmin: cannot have more admin accounts\\\");\\n        require(_admins[toBeAdded] == 0, \\\"arteQAdmin: already an admin account\\\");\\n        _admins[toBeAdded] = 1;\\n        _nrOfAdmins++;\\n        emit AdminAdded(msg.sender, toBeAdded);\\n        // adjust min required nr of approvals\\n        if (_minRequiredNrOfApprovals < (1 + uint(_nrOfAdmins) / uint(2))) {\\n            _minRequiredNrOfApprovals = 1 + uint(_nrOfAdmins) / uint(2);\\n            emit NewMinRequiredNrOfApprovalsSet(msg.sender, _minRequiredNrOfApprovals);\\n        }\\n        // finalize task\\n        _tasks[taskId] = 0;\\n        emit TaskFinalized(msg.sender, msg.sender, taskId);\\n    }\\n\\n    function replaceAdmin(uint256 taskId, address toBeRemoved, address toBeReplaced) external virtual override\\n      onlyOneOfAdmins\\n      taskMustExist(taskId)\\n      taskMustBeApproved(taskId) {\\n        require(_admins[toBeRemoved] == 1, \\\"arteQAdmin: no admin account found\\\");\\n        require(_admins[toBeReplaced] == 0, \\\"arteQAdmin: already an admin account\\\");\\n        _admins[toBeRemoved] = 0;\\n        _admins[toBeReplaced] = 1;\\n        emit AdminReplaced(msg.sender, toBeRemoved, toBeReplaced);\\n        // finalize task\\n        _tasks[taskId] = 0;\\n        emit TaskFinalized(msg.sender, msg.sender, taskId);\\n    }\\n\\n    function removeAdmin(uint256 taskId, address toBeRemoved) external virtual override\\n      onlyOneOfAdmins\\n      taskMustExist(taskId)\\n      taskMustBeApproved(taskId) {\\n        require(_nrOfAdmins > MIN_NR_OF_ADMINS, \\\"arteQAdmin: cannot have fewer admin accounts\\\");\\n        require(_admins[toBeRemoved] == 1, \\\"arteQAdmin: no admin account found\\\");\\n        _admins[toBeRemoved] = 0;\\n        _nrOfAdmins--;\\n        emit AdminRemoved(msg.sender, toBeRemoved);\\n        // adjust min required nr of approvals\\n        if (_minRequiredNrOfApprovals > _nrOfAdmins) {\\n            _minRequiredNrOfApprovals = _nrOfAdmins;\\n            emit NewMinRequiredNrOfApprovalsSet(msg.sender, _minRequiredNrOfApprovals);\\n        }\\n        // finalize task\\n        _tasks[taskId] = 0;\\n        emit TaskFinalized(msg.sender, msg.sender, taskId);\\n    }\\n\\n    function setMinRequiredNrOfApprovals(uint256 taskId, uint newMinRequiredNrOfApprovals) external virtual override\\n      onlyOneOfAdmins\\n      taskMustExist(taskId)\\n      taskMustBeApproved(taskId) {\\n        require(newMinRequiredNrOfApprovals != _minRequiredNrOfApprovals , \\\"arteQAdmin: same value\\\");\\n        require(newMinRequiredNrOfApprovals > uint(_nrOfAdmins) / uint(2) , \\\"arteQAdmin: value is too low\\\");\\n        require(newMinRequiredNrOfApprovals <= _nrOfAdmins, \\\"arteQAdmin: value is too high\\\");\\n        _minRequiredNrOfApprovals = newMinRequiredNrOfApprovals;\\n        emit NewMinRequiredNrOfApprovalsSet(msg.sender, _minRequiredNrOfApprovals);\\n        // finalize task\\n        _tasks[taskId] = 0;\\n        emit TaskFinalized(msg.sender, msg.sender, taskId);\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"arteQAdmin: cannot accept ether\\\");\\n    }\\n\\n    fallback() external payable {\\n        revert(\\\"arteQAdmin: cannot accept ether\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IarteQAdmin.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the contracts written for artèQ Investment Fund (https://github.com/billionbuild/arteq-contracts).\\n * Copyright (c) 2021 BillionBuild (2B) Team.\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./IarteQTaskFinalizer.sol\\\";\\n\\n/// @author Kam Amini <kam@arteq.io> <kam@2b.team> <kam.cpp@gmail.com>\\n/// @title The interface of the admin contract controlling all other artèQ smart contracts\\ninterface IarteQAdmin is IarteQTaskFinalizer {\\n\\n    event TaskCreated(address creatorAdmin, uint256 taskId, string detailsURI);\\n    event TaskApproved(address approverAdmin, uint256 taskId);\\n    event TaskApprovalCancelled(address cancellerAdmin, uint256 taskId);\\n    event FinalizerAdded(address granter, address newFinalizer);\\n    event FinalizerRemoved(address revoker, address removedFinalizer);\\n    event AdminAdded(address granter, address newAdmin);\\n    event AdminReplaced(address replacer, address removedAdmin, address replacedAdmin);\\n    event AdminRemoved(address revoker, address removedAdmin);\\n    event NewMinRequiredNrOfApprovalsSet(address setter, uint minRequiredNrOfApprovals);\\n\\n    function minNrOfAdmins() external view returns (uint);\\n    function maxNrOfAdmins() external view returns (uint);\\n    function nrOfAdmins() external view returns (uint);\\n    function minRequiredNrOfApprovals() external view returns (uint);\\n\\n    function isFinalizer(address account) external view returns (bool);\\n    function addFinalizer(uint256 taskId, address toBeAdded) external;\\n    function removeFinalizer(uint256 taskId, address toBeRemoved) external;\\n\\n    function createTask(string memory detailsURI) external;\\n    function taskURI(uint256 taskId) external view returns (string memory);\\n    function approveTask(uint256 taskId) external;\\n    function cancelTaskApproval(uint256 taskId) external;\\n    function nrOfApprovals(uint256 taskId) external view returns (uint);\\n\\n    function isAdmin(address account) external view returns (bool);\\n    function addAdmin(uint256 taskId, address toBeAdded) external;\\n    function replaceAdmin(uint256 taskId, address toBeRemoved, address toBeReplaced) external;\\n    function removeAdmin(uint256 taskId, address toBeRemoved) external;\\n    function setMinRequiredNrOfApprovals(uint256 taskId, uint newMinRequiredNrOfApprovals) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IarteQTaskFinalizer.sol\": {\r\n      \"content\": \"/*\\n * This file is part of the contracts written for artèQ Investment Fund (https://github.com/billionbuild/arteq-contracts).\\n * Copyright (c) 2021 BillionBuild (2B) Team.\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, version 3.\\n *\\n * This program is distributed in the hope that it will be useful, but\\n * WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\\n * General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\\n */\\n// SPDX-License-Identifier: GNU General Public License v3.0\\n\\npragma solidity 0.8.0;\\n\\n/// @author Kam Amini <kam@arteq.io> <kam@2b.team> <kam.cpp@gmail.com>\\n/// @title The interface for finalizing tasks. Mainly used by artèQ contracts to\\n/// perform administrative tasks in conjuction with admin contract.\\ninterface IarteQTaskFinalizer {\\n\\n    event TaskFinalized(address finalizer, address origin, uint256 taskId);\\n\\n    function finalizeTask(address origin, uint256 taskId) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000,\r\n      \"details\": {\r\n        \"yul\": true,\r\n        \"yulDetails\": {\r\n          \"stackAllocation\": true,\r\n          \"optimizerSteps\": \"dhfoDgvulfnTUtnIf\"\r\n        }\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"initialAdmins\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"granter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedAdmin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"replacer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"replacedAdmin\",\"type\":\"address\"}],\"name\":\"AdminReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"granter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFinalizer\",\"type\":\"address\"}],\"name\":\"FinalizerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedFinalizer\",\"type\":\"address\"}],\"name\":\"FinalizerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minRequiredNrOfApprovals\",\"type\":\"uint256\"}],\"name\":\"NewMinRequiredNrOfApprovalsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cancellerAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"TaskApprovalCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approverAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"TaskApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creatorAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"detailsURI\",\"type\":\"string\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"finalizer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"TaskFinalized\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX_NR_OF_ADMINS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NR_OF_ADMINS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toBeAdded\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toBeAdded\",\"type\":\"address\"}],\"name\":\"addFinalizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"approveTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"cancelTaskApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"detailsURI\",\"type\":\"string\"}],\"name\":\"createTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"finalizeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFinalizer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNrOfAdmins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minNrOfAdmins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRequiredNrOfApprovals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nrOfAdmins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"nrOfApprovals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toBeRemoved\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toBeRemoved\",\"type\":\"address\"}],\"name\":\"removeFinalizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toBeRemoved\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toBeReplaced\",\"type\":\"address\"}],\"name\":\"replaceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMinRequiredNrOfApprovals\",\"type\":\"uint256\"}],\"name\":\"setMinRequiredNrOfApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"taskURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"arteQAdmin","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000006000000000000000000000000bf49c5ebe1fabbacd645098fcd2abe294a8fc14500000000000000000000000071f62690a184c7a210e13195a289c46b4e45cfe6000000000000000000000000548730ef6c35ccac1caa7772c2f24d153ef3b1d9000000000000000000000000230570b469886befbbc87cda34b2a92a17bd2c4a0000000000000000000000002a6c2a875d54d431996a415b5cc45493e634b15e000000000000000000000000f4440d0963c986178b025832a6729a312dd07b8b","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}