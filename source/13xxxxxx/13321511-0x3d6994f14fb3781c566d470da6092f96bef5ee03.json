{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/badger-sett/strategies/convex/StrategyCvxCrvHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\\\";\\n\\nimport \\\"interfaces/convex/IBooster.sol\\\";\\nimport \\\"interfaces/convex/CrvDepositor.sol\\\";\\nimport \\\"interfaces/convex/IBaseRewardsPool.sol\\\";\\nimport \\\"interfaces/convex/ICvxRewardsPool.sol\\\";\\n\\nimport \\\"../../libraries/CurveSwapper.sol\\\";\\nimport \\\"../../libraries/UniswapSwapper.sol\\\";\\nimport \\\"../../libraries/TokenSwapPathRegistry.sol\\\";\\n\\nimport \\\"../BaseStrategy.sol\\\";\\n\\n/*\\n    1. Stake cvxCrv\\n    2. Sell earned rewards into cvxCrv position and restake\\n\\n    Changelog:\\n\\n    V1.1\\n    * Implemented the _exchange function from the CurveSwapper library to perform the CRV -> cvxCRV swap through\\n    curve instead of Sushiswap.\\n    * Implemented the _withdrawAll() function\\n*/\\ncontract StrategyCvxCrvHelper is BaseStrategy, CurveSwapper, UniswapSwapper, TokenSwapPathRegistry {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n    using SafeMathUpgradeable for uint256;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    // ===== Token Registry =====\\n    address public constant wbtc = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address public constant crv = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n    address public constant cvx = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\\n    address public constant cvxCrv = 0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7;\\n    address public constant usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address public constant threeCrv = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\\n\\n    IERC20Upgradeable public constant crvToken = IERC20Upgradeable(0xD533a949740bb3306d119CC777fa900bA034cd52);\\n    IERC20Upgradeable public constant cvxToken = IERC20Upgradeable(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\\n    IERC20Upgradeable public constant cvxCrvToken = IERC20Upgradeable(0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7);\\n    IERC20Upgradeable public constant usdcToken = IERC20Upgradeable(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n    IERC20Upgradeable public constant threeCrvToken = IERC20Upgradeable(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\\n\\n    address public constant threeCrvSwap = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\\n\\n    // ===== Convex Registry =====\\n    CrvDepositor public constant crvDepositor = CrvDepositor(0x8014595F2AB54cD7c604B00E9fb932176fDc86Ae); // Convert CRV -> cvxCRV/ETH SLP\\n    IBooster public constant booster = IBooster(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\\n    IBaseRewardsPool public constant cvxCrvRewardsPool = IBaseRewardsPool(0x3Fe65692bfCD0e6CF84cB1E7d24108E434A7587e);\\n\\n    uint256 public constant MAX_UINT_256 = uint256(-1);\\n\\n    uint256 public constant crvCvxCrvPoolIndex = 2;\\n\\n    event HarvestState(uint256 timestamp, uint256 blockNumber);\\n\\n    event WithdrawState(uint256 toWithdraw, uint256 preWant, uint256 postWant, uint256 withdrawn);\\n\\n    struct TokenSwapData {\\n        address tokenIn;\\n        uint256 totalSold;\\n        uint256 wantGained;\\n    }\\n\\n    event TendState(uint256 crvTended, uint256 cvxTended, uint256 cvxCrvHarvested);\\n\\n    function initialize(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _keeper,\\n        address _guardian,\\n        uint256[3] memory _feeConfig\\n    ) public initializer whenNotPaused {\\n        __BaseStrategy_init(_governance, _strategist, _controller, _keeper, _guardian);\\n\\n        want = cvxCrv;\\n\\n        performanceFeeGovernance = _feeConfig[0];\\n        performanceFeeStrategist = _feeConfig[1];\\n        withdrawalFee = _feeConfig[2];\\n\\n        // Set Swap Paths\\n        address[] memory path = new address[](3);\\n        path[0] = cvx;\\n        path[1] = weth;\\n        path[2] = cvxCrv;\\n        _setTokenSwapPath(cvx, cvxCrv, path);\\n\\n        path = new address[](3);\\n        path[0] = usdc;\\n        path[1] = weth;\\n        path[2] = cvxCrv;\\n        _setTokenSwapPath(usdc, cvxCrv, path);\\n\\n        // Approvals: Staking Pool\\n        cvxCrvToken.approve(address(cvxCrvRewardsPool), MAX_UINT_256);\\n    }\\n\\n    /// ===== View Functions =====\\n    function version() external pure returns (string memory) {\\n        return \\\"1.1\\\";\\n    }\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"StrategyCvxCrvHelper\\\";\\n    }\\n\\n    function balanceOfPool() public view override returns (uint256) {\\n        return cvxCrvRewardsPool.balanceOf(address(this));\\n    }\\n\\n    function getProtectedTokens() public view override returns (address[] memory) {\\n        address[] memory protectedTokens = new address[](2);\\n        protectedTokens[0] = want;\\n        protectedTokens[1] = cvxCrv;\\n        return protectedTokens;\\n    }\\n\\n    function isTendable() public view override returns (bool) {\\n        return false;\\n    }\\n\\n    /// ===== Internal Core Implementations =====\\n    function _onlyNotProtectedTokens(address _asset) internal override {\\n        require(!isProtectedToken(_asset));\\n    }\\n\\n    /// @dev Deposit Badger into the staking contract\\n    function _deposit(uint256 _want) internal override {\\n        // Deposit all want in core staking pool\\n        cvxCrvRewardsPool.stake(_want);\\n    }\\n\\n    /// @dev Unroll from all strategy positions, and transfer non-core tokens to controller rewards\\n    function _withdrawAll() internal override {\\n        cvxCrvRewardsPool.withdrawAll(false);\\n        // Note: All want is automatically withdrawn outside this \\\"inner hook\\\" in base strategy function\\n    }\\n\\n    /// @dev Withdraw want from staking rewards, using earnings first\\n    function _withdrawSome(uint256 _amount) internal override returns (uint256) {\\n        // Get idle want in the strategy\\n        uint256 _preWant = IERC20Upgradeable(want).balanceOf(address(this));\\n\\n        // If we lack sufficient idle want, withdraw the difference from the strategy position\\n        if (_preWant < _amount) {\\n            uint256 _toWithdraw = _amount.sub(_preWant);\\n            cvxCrvRewardsPool.withdraw(_toWithdraw, false);\\n            // Note: Withdrawl process will earn sushi, this will be deposited into SushiBar on next tend()\\n        }\\n\\n        // Confirm how much want we actually end up with\\n        uint256 _postWant = IERC20Upgradeable(want).balanceOf(address(this));\\n\\n        // Return the actual amount withdrawn if less than requested\\n        uint256 _withdrawn = MathUpgradeable.min(_postWant, _amount);\\n        emit WithdrawState(_amount, _preWant, _postWant, _withdrawn);\\n\\n        return _withdrawn;\\n    }\\n\\n    function _tendGainsFromPositions() internal {\\n        if (cvxCrvRewardsPool.earned(address(this)) > 0) {\\n            cvxCrvRewardsPool.getReward(address(this), true);\\n        }\\n    }\\n\\n    function patchPaths() external {\\n        _onlyGovernance();\\n        address[] memory path = new address[](3);\\n        path[0] = cvx;\\n        path[1] = weth;\\n        path[2] = crv;\\n        _setTokenSwapPath(cvx, crv, path);\\n\\n        path = new address[](3);\\n        path[0] = usdc;\\n        path[1] = weth;\\n        path[2] = crv;\\n        _setTokenSwapPath(usdc, crv, path);\\n    }\\n\\n    function harvest() external whenNotPaused returns (uint256 cvxCrvHarvested) {\\n        _onlyAuthorizedActors();\\n        // 1. Harvest gains from positions\\n        _tendGainsFromPositions();\\n\\n        // 2. Sell 3Crv (withdraw to USDC -> swap to CRV)\\n        uint256 threeCrvBalance = threeCrvToken.balanceOf(address(this));\\n\\n        if (threeCrvBalance > 0) {\\n            _remove_liquidity_one_coin(threeCrvSwap, threeCrvBalance, 1, 0);\\n            uint256 usdcBalance = usdcToken.balanceOf(address(this));\\n            require(usdcBalance > 0, \\\"window-tint\\\");\\n            if (usdcBalance > 0) {\\n                _swapExactTokensForTokens(sushiswap, usdc, usdcBalance, getTokenSwapPath(usdc, crv));\\n            }\\n        }\\n\\n        // 3. Sell CVX -> CRV\\n        uint256 cvxTokenBalance = cvxToken.balanceOf(address(this));\\n        if (cvxTokenBalance > 0) {\\n            _swapExactTokensForTokens(sushiswap, cvx, cvxTokenBalance, getTokenSwapPath(cvx, crv));\\n        }\\n\\n        // 4. Convert CRV -> cvxCRV\\n        uint256 crvBalance = crvToken.balanceOf(address(this));\\n        if (crvBalance > 0) {\\n            _exchange(crv, cvxCrv, crvBalance, crvCvxCrvPoolIndex, true);\\n        }\\n\\n        // Track harvested + converted coin balance of want\\n        cvxCrvHarvested = cvxCrvToken.balanceOf(address(this));\\n        _processFee(cvxCrv, cvxCrvHarvested, performanceFeeGovernance, IController(controller).rewards());\\n\\n        // 5. Stake all cvxCRV\\n        if (cvxCrvHarvested > 0) {\\n            cvxCrvRewardsPool.stake(cvxCrvToken.balanceOf(address(this)));\\n        }\\n\\n        emit Tend(cvxCrvHarvested);\\n        return cvxCrvHarvested;\\n    }\\n}\\n\"\r\n    },\r\n    \"deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"deps/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deps/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deps/@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/convex/IBooster.sol\": {\r\n      \"content\": \"//  SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IBooster {\\n    struct PoolInfo {\\n        address lptoken;\\n        address token;\\n        address gauge;\\n        address crvRewards;\\n        address stash;\\n        bool shutdown;\\n    }\\n\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory);\\n\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function withdrawAll(uint256 _pid) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"interfaces/convex/CrvDepositor.sol\": {\r\n      \"content\": \"//  SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface CrvDepositor {\\n    //deposit crv for cvxCrv\\n    //can locking immediately or defer locking to someone else by paying a fee.\\n    //while users can choose to lock or defer, this is mostly in place so that\\n    //the cvx reward contract isnt costly to claim rewards\\n    function deposit(uint256 _amount, bool _lock) external;\\n}\\n\"\r\n    },\r\n    \"interfaces/convex/IBaseRewardsPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IBaseRewardsPool {\\n    //balance\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    //withdraw to a convex tokenized deposit\\n    function withdraw(uint256 _amount, bool _claim) external returns (bool);\\n\\n    function withdrawAll(bool _claim) external;\\n\\n    //withdraw directly to curve LP token\\n    function withdrawAndUnwrap(uint256 _amount, bool _claim) external returns (bool);\\n\\n    //claim rewards\\n    function getReward() external returns (bool);\\n\\n    //stake a convex tokenized deposit\\n    function stake(uint256 _amount) external returns (bool);\\n\\n    //stake a convex tokenized deposit for another address(transfering ownership)\\n    function stakeFor(address _account, uint256 _amount) external returns (bool);\\n\\n    function getReward(address _account, bool _claimExtras) external returns (bool);\\n\\n    function rewards(address _account) external view returns (uint256);\\n\\n    function earned(address _account) external view returns (uint256);\\n\\n    function stakingToken() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"interfaces/convex/ICvxRewardsPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface ICvxRewardsPool {\\n    //balance\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    //withdraw to a convex tokenized deposit\\n    function withdraw(uint256 _amount, bool _claim) external;\\n\\n    function withdrawAll(bool _claim) external;\\n\\n    //withdraw directly to curve LP token\\n    function withdrawAndUnwrap(uint256 _amount, bool _claim) external returns (bool);\\n\\n    //claim rewards\\n    function getReward(bool _stake) external;\\n\\n    //stake a convex tokenized deposit\\n    function stake(uint256 _amount) external;\\n\\n    //stake a convex tokenized deposit for another address(transfering ownership)\\n    function stakeFor(address _account, uint256 _amount) external returns (bool);\\n\\n    function rewards(address _account) external view returns (uint256);\\n\\n    function earned(address _account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/badger-sett/libraries/CurveSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"interfaces/curve/ICurveFi.sol\\\";\\nimport \\\"interfaces/curve/ICurveExchange.sol\\\";\\nimport \\\"interfaces/curve/ICurveRegistry.sol\\\";\\nimport \\\"./BaseSwapper.sol\\\";\\n\\n/*\\n    Expands swapping functionality over base strategy\\n    - ETH in and ETH out Variants\\n    - Sushiswap support in addition to Uniswap\\n*/\\ncontract CurveSwapper is BaseSwapper {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n    using SafeMathUpgradeable for uint256;\\n\\n    address public constant addressProvider = 0x0000000022D53366457F9d5E68Ec105046FC4383;\\n\\n    uint256 public constant registryId = 0;\\n    uint256 public constant metaPoolFactoryId = 3;\\n\\n    function _exchange(\\n        address _from,\\n        address _to,\\n        uint256 _dx,\\n        uint256 _index,\\n        bool _isFactoryPool\\n    ) internal {\\n        address poolRegistry = ICurveRegistryAddressProvider(addressProvider).get_address(_isFactoryPool ? metaPoolFactoryId : registryId);\\n        address poolAddress = ICurveRegistry(poolRegistry).find_pool_for_coins(_from, _to, _index);\\n\\n        if (poolAddress != address(0)) {\\n            _safeApproveHelper(_from, poolAddress, _dx);\\n            (int128 i, int128 j, ) = ICurveRegistry(poolRegistry).get_coin_indices(poolAddress, _from, _to);\\n            ICurveFi(poolAddress).exchange(i, j, _dx, 0);\\n        }\\n    }\\n\\n    function _add_liquidity_single_coin(\\n        address swap,\\n        address pool,\\n        address inputToken,\\n        uint256 inputAmount,\\n        uint256 inputPosition,\\n        uint256 numPoolElements,\\n        uint256 min_mint_amount\\n    ) internal {\\n        _safeApproveHelper(inputToken, swap, inputAmount);\\n        if (numPoolElements == 2) {\\n            uint256[2] memory convertedAmounts;\\n            convertedAmounts[inputPosition] = inputAmount;\\n            ICurveFi(swap).add_liquidity(convertedAmounts, min_mint_amount);\\n        } else if (numPoolElements == 3) {\\n            uint256[3] memory convertedAmounts;\\n            convertedAmounts[inputPosition] = inputAmount;\\n            ICurveFi(swap).add_liquidity(convertedAmounts, min_mint_amount);\\n        } else if (numPoolElements == 4) {\\n            uint256[4] memory convertedAmounts;\\n            convertedAmounts[inputPosition] = inputAmount;\\n            ICurveFi(swap).add_liquidity(convertedAmounts, min_mint_amount);\\n        } else {\\n            revert(\\\"Invalid number of amount elements\\\");\\n        }\\n    }\\n\\n    function _add_liquidity(\\n        address pool,\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount\\n    ) internal {\\n        ICurveFi(pool).add_liquidity(amounts, min_mint_amount);\\n    }\\n\\n    function _add_liquidity(\\n        address pool,\\n        uint256[3] memory amounts,\\n        uint256 min_mint_amount\\n    ) internal {\\n        ICurveFi(pool).add_liquidity(amounts, min_mint_amount);\\n    }\\n\\n    function _add_liquidity(\\n        address pool,\\n        uint256[4] memory amounts,\\n        uint256 min_mint_amount\\n    ) internal {\\n        ICurveFi(pool).add_liquidity(amounts, min_mint_amount);\\n    }\\n\\n    function _remove_liquidity_one_coin(\\n        address swap,\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) internal {\\n        ICurveFi(swap).remove_liquidity_one_coin(_token_amount, i, _min_amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/badger-sett/libraries/UniswapSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\nimport \\\"./BaseSwapper.sol\\\";\\nimport \\\"interfaces/uniswap/IUniswapRouterV2.sol\\\";\\nimport \\\"interfaces/uniswap/IUniswapV2Factory.sol\\\";\\n\\n/*\\n    Expands swapping functionality over base strategy\\n    - ETH in and ETH out Variants\\n    - Sushiswap support in addition to Uniswap\\n*/\\ncontract UniswapSwapper is BaseSwapper {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n    using SafeMathUpgradeable for uint256;\\n\\n    address internal constant uniswap = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // Uniswap router\\n    address internal constant sushiswap = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F; // Sushiswap router\\n\\n    function _swapExactTokensForTokens(\\n        address router,\\n        address startToken,\\n        uint256 balance,\\n        address[] memory path\\n    ) internal {\\n        _safeApproveHelper(startToken, router, balance);\\n        IUniswapRouterV2(router).swapExactTokensForTokens(balance, 0, path, address(this), now);\\n    }\\n\\n    function _swapExactETHForTokens(\\n        address router,\\n        uint256 balance,\\n        address[] memory path\\n    ) internal {\\n        IUniswapRouterV2(uniswap).swapExactETHForTokens{value: balance}(0, path, address(this), now);\\n    }\\n\\n    function _swapExactTokensForETH(\\n        address router,\\n        address startToken,\\n        uint256 balance,\\n        address[] memory path\\n    ) internal {\\n        _safeApproveHelper(startToken, router, balance);\\n        IUniswapRouterV2(router).swapExactTokensForETH(balance, 0, path, address(this), now);\\n    }\\n\\n    function _getPair(\\n        address router,\\n        address token0,\\n        address token1\\n    ) internal view returns (address) {\\n        address factory = IUniswapRouterV2(router).factory();\\n        return IUniswapV2Factory(factory).getPair(token0, token1);\\n    }\\n\\n    /// @notice Add liquidity to uniswap for specified token pair, utilizing the maximum balance possible\\n    function _addMaxLiquidity(\\n        address router,\\n        address token0,\\n        address token1\\n    ) internal {\\n        uint256 _token0Balance = IERC20Upgradeable(token0).balanceOf(address(this));\\n        uint256 _token1Balance = IERC20Upgradeable(token1).balanceOf(address(this));\\n\\n        _safeApproveHelper(token0, router, _token0Balance);\\n        _safeApproveHelper(token1, router, _token1Balance);\\n\\n        IUniswapRouterV2(router).addLiquidity(token0, token1, _token0Balance, _token1Balance, 0, 0, address(this), block.timestamp);\\n    }\\n\\n    function _addMaxLiquidityEth(address router, address token0) internal {\\n        uint256 _token0Balance = IERC20Upgradeable(token0).balanceOf(address(this));\\n        uint256 _ethBalance = address(this).balance;\\n\\n        _safeApproveHelper(token0, router, _token0Balance);\\n        IUniswapRouterV2(router).addLiquidityETH{value: address(this).balance}(token0, _token0Balance, 0, 0, address(this), block.timestamp);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/badger-sett/libraries/TokenSwapPathRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"interfaces/curve/ICurveFi.sol\\\";\\n\\n/*\\n    Expands swapping functionality over base strategy\\n    - ETH in and ETH out Variants\\n    - Sushiswap support in addition to Uniswap\\n*/\\ncontract TokenSwapPathRegistry {\\n    mapping(address => mapping(address => address[])) public tokenSwapPaths;\\n\\n    event TokenSwapPathSet(address tokenIn, address tokenOut, address[] path);\\n\\n    function getTokenSwapPath(address tokenIn, address tokenOut) public view returns (address[] memory) {\\n        return tokenSwapPaths[tokenIn][tokenOut];\\n    }\\n\\n    function _setTokenSwapPath(\\n        address tokenIn,\\n        address tokenOut,\\n        address[] memory path\\n    ) internal {\\n        tokenSwapPaths[tokenIn][tokenOut] = path;\\n        emit TokenSwapPathSet(tokenIn, tokenOut, path);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/badger-sett/strategies/BaseStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"interfaces/uniswap/IUniswapRouterV2.sol\\\";\\nimport \\\"interfaces/badger/IController.sol\\\";\\nimport \\\"interfaces/badger/IStrategy.sol\\\";\\n\\nimport \\\"../SettAccessControl.sol\\\";\\n\\n/*\\n    ===== Badger Base Strategy =====\\n    Common base class for all Sett strategies\\n\\n    Changelog\\n    V1.1\\n    - Verify amount unrolled from strategy positions on withdraw() is within a threshold relative to the requested amount as a sanity check\\n    - Add version number which is displayed with baseStrategyVersion(). If a strategy does not implement this function, it can be assumed to be 1.0\\n\\n    V1.2\\n    - Remove idle want handling from base withdraw() function. This should be handled as the strategy sees fit in _withdrawSome()\\n*/\\nabstract contract BaseStrategy is PausableUpgradeable, SettAccessControl {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n    using SafeMathUpgradeable for uint256;\\n\\n    event Withdraw(uint256 amount);\\n    event WithdrawAll(uint256 balance);\\n    event WithdrawOther(address token, uint256 amount);\\n    event SetStrategist(address strategist);\\n    event SetGovernance(address governance);\\n    event SetController(address controller);\\n    event SetWithdrawalFee(uint256 withdrawalFee);\\n    event SetPerformanceFeeStrategist(uint256 performanceFeeStrategist);\\n    event SetPerformanceFeeGovernance(uint256 performanceFeeGovernance);\\n    event Harvest(uint256 harvested, uint256 indexed blockNumber);\\n    event Tend(uint256 tended);\\n\\n    address public want; // Want: Curve.fi renBTC/wBTC (crvRenWBTC) LP token\\n\\n    uint256 public performanceFeeGovernance;\\n    uint256 public performanceFeeStrategist;\\n    uint256 public withdrawalFee;\\n\\n    uint256 public constant MAX_FEE = 10000;\\n\\n    address public controller;\\n    address public guardian;\\n\\n    uint256 public withdrawalMaxDeviationThreshold;\\n\\n    function __BaseStrategy_init(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _keeper,\\n        address _guardian\\n    ) public initializer whenNotPaused {\\n        __Pausable_init();\\n        governance = _governance;\\n        strategist = _strategist;\\n        keeper = _keeper;\\n        controller = _controller;\\n        guardian = _guardian;\\n        withdrawalMaxDeviationThreshold = 50;\\n    }\\n\\n    // ===== Modifiers =====\\n\\n    function _onlyController() internal view {\\n        require(msg.sender == controller, \\\"onlyController\\\");\\n    }\\n\\n    function _onlyAuthorizedActorsOrController() internal view {\\n        require(msg.sender == keeper || msg.sender == governance || msg.sender == controller, \\\"onlyAuthorizedActorsOrController\\\");\\n    }\\n\\n    function _onlyAuthorizedPausers() internal view {\\n        require(msg.sender == guardian || msg.sender == governance, \\\"onlyPausers\\\");\\n    }\\n\\n    /// ===== View Functions =====\\n    function baseStrategyVersion() public view returns (string memory) {\\n        return \\\"1.2\\\";\\n    }\\n\\n    /// @notice Get the balance of want held idle in the Strategy\\n    function balanceOfWant() public view returns (uint256) {\\n        return IERC20Upgradeable(want).balanceOf(address(this));\\n    }\\n\\n    /// @notice Get the total balance of want realized in the strategy, whether idle or active in Strategy positions.\\n    function balanceOf() public virtual view returns (uint256) {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    function isTendable() public virtual view returns (bool) {\\n        return false;\\n    }\\n\\n    function isProtectedToken(address token) public view returns (bool) {\\n        address[] memory protectedTokens = getProtectedTokens();\\n        for (uint256 i = 0; i < protectedTokens.length; i++) {\\n            if (token == protectedTokens[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// ===== Permissioned Actions: Governance =====\\n\\n    function setGuardian(address _guardian) external {\\n        _onlyGovernance();\\n        guardian = _guardian;\\n    }\\n\\n    function setWithdrawalFee(uint256 _withdrawalFee) external {\\n        _onlyGovernance();\\n        require(_withdrawalFee <= MAX_FEE, \\\"base-strategy/excessive-withdrawal-fee\\\");\\n        withdrawalFee = _withdrawalFee;\\n    }\\n\\n    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist) external {\\n        _onlyGovernance();\\n        require(_performanceFeeStrategist <= MAX_FEE, \\\"base-strategy/excessive-strategist-performance-fee\\\");\\n        performanceFeeStrategist = _performanceFeeStrategist;\\n    }\\n\\n    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance) external {\\n        _onlyGovernance();\\n        require(_performanceFeeGovernance <= MAX_FEE, \\\"base-strategy/excessive-governance-performance-fee\\\");\\n        performanceFeeGovernance = _performanceFeeGovernance;\\n    }\\n\\n    function setController(address _controller) external {\\n        _onlyGovernance();\\n        controller = _controller;\\n    }\\n\\n    function setWithdrawalMaxDeviationThreshold(uint256 _threshold) external {\\n        _onlyGovernance();\\n        require(_threshold <= MAX_FEE, \\\"base-strategy/excessive-max-deviation-threshold\\\");\\n        withdrawalMaxDeviationThreshold = _threshold;\\n    }\\n\\n    function deposit() public virtual whenNotPaused {\\n        _onlyAuthorizedActorsOrController();\\n        uint256 _want = IERC20Upgradeable(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            _deposit(_want);\\n        }\\n        _postDeposit();\\n    }\\n\\n    // ===== Permissioned Actions: Controller =====\\n\\n    /// @notice Controller-only function to Withdraw partial funds, normally used with a vault withdrawal\\n    function withdrawAll() external virtual whenNotPaused returns (uint256 balance) {\\n        _onlyController();\\n\\n        _withdrawAll();\\n\\n        _transferToVault(IERC20Upgradeable(want).balanceOf(address(this)));\\n    }\\n\\n    /// @notice Withdraw partial funds from the strategy, unrolling from strategy positions as necessary\\n    /// @notice Processes withdrawal fee if present\\n    /// @dev If it fails to recover sufficient funds (defined by withdrawalMaxDeviationThreshold), the withdrawal should fail so that this unexpected behavior can be investigated\\n    function withdraw(uint256 _amount) external virtual whenNotPaused {\\n        _onlyController();\\n\\n        // Withdraw from strategy positions, typically taking from any idle want first.\\n        _withdrawSome(_amount);\\n        uint256 _postWithdraw = IERC20Upgradeable(want).balanceOf(address(this));\\n\\n        // Sanity check: Ensure we were able to retrieve sufficent want from strategy positions\\n        // If we end up with less than the amount requested, make sure it does not deviate beyond a maximum threshold\\n        if (_postWithdraw < _amount) {\\n            uint256 diff = _diff(_amount, _postWithdraw);\\n\\n            // Require that difference between expected and actual values is less than the deviation threshold percentage\\n            require(diff <= _amount.mul(withdrawalMaxDeviationThreshold).div(MAX_FEE), \\\"base-strategy/withdraw-exceed-max-deviation-threshold\\\");\\n        }\\n\\n        // Return the amount actually withdrawn if less than amount requested\\n        uint256 _toWithdraw = MathUpgradeable.min(_postWithdraw, _amount);\\n\\n        // Process withdrawal fee\\n        uint256 _fee = _processWithdrawalFee(_toWithdraw);\\n\\n        // Transfer remaining to Vault to handle withdrawal\\n        _transferToVault(_toWithdraw.sub(_fee));\\n    }\\n\\n    // NOTE: must exclude any tokens used in the yield\\n    // Controller role - withdraw should return to Controller\\n    function withdrawOther(address _asset) external virtual whenNotPaused returns (uint256 balance) {\\n        _onlyController();\\n        _onlyNotProtectedTokens(_asset);\\n\\n        balance = IERC20Upgradeable(_asset).balanceOf(address(this));\\n        IERC20Upgradeable(_asset).safeTransfer(controller, balance);\\n    }\\n\\n    /// ===== Permissioned Actions: Authoized Contract Pausers =====\\n\\n    function pause() external {\\n        _onlyAuthorizedPausers();\\n        _pause();\\n    }\\n\\n    function unpause() external {\\n        _onlyGovernance();\\n        _unpause();\\n    }\\n\\n    /// ===== Internal Helper Functions =====\\n\\n    /// @notice If withdrawal fee is active, take the appropriate amount from the given value and transfer to rewards recipient\\n    /// @return The withdrawal fee that was taken\\n    function _processWithdrawalFee(uint256 _amount) internal returns (uint256) {\\n        if (withdrawalFee == 0) {\\n            return 0;\\n        }\\n\\n        uint256 fee = _amount.mul(withdrawalFee).div(MAX_FEE);\\n        IERC20Upgradeable(want).safeTransfer(IController(controller).rewards(), fee);\\n        return fee;\\n    }\\n\\n    /// @dev Helper function to process an arbitrary fee\\n    /// @dev If the fee is active, transfers a given portion in basis points of the specified value to the recipient\\n    /// @return The fee that was taken\\n    function _processFee(\\n        address token,\\n        uint256 amount,\\n        uint256 feeBps,\\n        address recipient\\n    ) internal returns (uint256) {\\n        if (feeBps == 0) {\\n            return 0;\\n        }\\n        uint256 fee = amount.mul(feeBps).div(MAX_FEE);\\n        IERC20Upgradeable(token).safeTransfer(recipient, fee);\\n        return fee;\\n    }\\n\\n    function _transferToVault(uint256 _amount) internal {\\n        address _vault = IController(controller).vaults(address(want));\\n        require(_vault != address(0), \\\"!vault\\\"); // additional protection so we don't burn the funds\\n        IERC20Upgradeable(want).safeTransfer(_vault, _amount);\\n    }\\n\\n    /// @notice Utility function to diff two numbers, expects higher value in first position\\n    function _diff(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(a >= b, \\\"diff/expected-higher-number-in-first-position\\\");\\n        return a.sub(b);\\n    }\\n\\n    // ===== Abstract Functions: To be implemented by specific Strategies =====\\n\\n    /// @dev Internal deposit logic to be implemented by Stratgies\\n    function _deposit(uint256 _want) internal virtual;\\n\\n    function _postDeposit() internal virtual {\\n        //no-op by default\\n    }\\n\\n    /// @notice Specify tokens used in yield process, should not be available to withdraw via withdrawOther()\\n    function _onlyNotProtectedTokens(address _asset) internal virtual;\\n\\n    function getProtectedTokens() public virtual view returns (address[] memory) {\\n        return new address[](0);\\n    }\\n\\n    /// @dev Internal logic for strategy migration. Should exit positions as efficiently as possible\\n    function _withdrawAll() internal virtual;\\n\\n    /// @dev Internal logic for partial withdrawals. Should exit positions as efficiently as possible.\\n    /// @dev The withdraw() function shell automatically uses idle want in the strategy before attempting to withdraw more using this\\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\\n\\n    /// @dev Realize returns from positions\\n    /// @dev Returns can be reinvested into positions, or distributed in another fashion\\n    /// @dev Performance fees should also be implemented in this function\\n    /// @dev Override function stub is removed as each strategy can have it's own return signature for STATICCALL\\n    // function harvest() external virtual;\\n\\n    /// @dev User-friendly name for this strategy for purposes of convenient reading\\n    function getName() external virtual pure returns (string memory);\\n\\n    /// @dev Balance of want currently held in strategy positions\\n    function balanceOfPool() public virtual view returns (uint256);\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"deps/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"interfaces/curve/ICurveFi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.8.0;\\n\\ninterface ICurveFi {\\n    function get_virtual_price() external view returns (uint256 out);\\n\\n    function add_liquidity(\\n        // renbtc/tbtc pool\\n        uint256[2] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external;\\n\\n    function add_liquidity(\\n        // sBTC pool\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external;\\n\\n    function add_liquidity(\\n        // bUSD pool\\n        uint256[4] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external;\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external returns (uint256 out);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external returns (uint256 out);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        uint256 deadline\\n    ) external;\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        uint256 deadline\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256 deadline,\\n        uint256[2] calldata min_amounts\\n    ) external;\\n\\n    function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 deadline) external;\\n\\n    function remove_liquidity_imbalance(uint256[3] calldata amounts, uint256 max_burn_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] calldata amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[4] calldata amounts, uint256 max_burn_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] calldata amounts) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n\\n    function commit_new_parameters(\\n        int128 amplification,\\n        int128 new_fee,\\n        int128 new_admin_fee\\n    ) external;\\n\\n    function apply_new_parameters() external;\\n\\n    function revert_new_parameters() external;\\n\\n    function commit_transfer_ownership(address _owner) external;\\n\\n    function apply_transfer_ownership() external;\\n\\n    function revert_transfer_ownership() external;\\n\\n    function withdraw_admin_fees() external;\\n\\n    function coins(int128 arg0) external returns (address out);\\n\\n    function underlying_coins(int128 arg0) external returns (address out);\\n\\n    function balances(int128 arg0) external returns (uint256 out);\\n\\n    function A() external returns (int128 out);\\n\\n    function fee() external returns (int128 out);\\n\\n    function admin_fee() external returns (int128 out);\\n\\n    function owner() external returns (address out);\\n\\n    function admin_actions_deadline() external returns (uint256 out);\\n\\n    function transfer_ownership_deadline() external returns (uint256 out);\\n\\n    function future_A() external returns (int128 out);\\n\\n    function future_fee() external returns (int128 out);\\n\\n    function future_admin_fee() external returns (int128 out);\\n\\n    function future_owner() external returns (address out);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 _i) external view returns (uint256 out);\\n}\\n\"\r\n    },\r\n    \"interfaces/curve/ICurveExchange.sol\": {\r\n      \"content\": \"//  SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface ICurveExchange {\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function get_dy(\\n        int128,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[2] calldata amounts, bool deposit) external view returns (uint256 amount);\\n\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] calldata min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 max_burn_amount) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amounts,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n}\\n\\ninterface ICurveRegistryAddressProvider {\\n    function get_address(uint256 id) external returns (address);\\n}\\n\\ninterface ICurveRegistryExchange {\\n    function get_best_rate(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external view returns (address, uint256);\\n\\n    function exchange(\\n        address pool,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 expected,\\n        address receiver\\n    ) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/curve/ICurveRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.8.0;\\n\\ninterface ICurveRegistry {\\n    function find_pool_for_coins(\\n        address _from,\\n        address _to,\\n        uint256 _index\\n    ) external returns (address);\\n\\n    function get_coin_indices(\\n        address _pool,\\n        address _from,\\n        address _to\\n    )\\n        external\\n        returns (\\n            int128,\\n            int128,\\n            bool\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/badger-sett/libraries/BaseSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"deps/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\n\\n/*\\n    Expands swapping functionality over base strategy\\n    - ETH in and ETH out Variants\\n    - Sushiswap support in addition to Uniswap\\n*/\\ncontract BaseSwapper {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n    using SafeMathUpgradeable for uint256;\\n\\n    /// @dev Reset approval and approve exact amount\\n    function _safeApproveHelper(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        IERC20Upgradeable(token).safeApprove(recipient, 0);\\n        IERC20Upgradeable(token).safeApprove(recipient, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"deps/@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"deps/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using AddressUpgradeable for address;\\n\\n    struct RoleData {\\n        EnumerableSetUpgradeable.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"interfaces/uniswap/IUniswapRouterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.8.0;\\n\\ninterface IUniswapRouterV2 {\\n    function factory() external view returns (address);\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"interfaces/uniswap/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\"\r\n    },\r\n    \"deps/@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/badger/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.8.0;\\n\\ninterface IController {\\n    function withdraw(address, uint256) external;\\n\\n    function withdrawAll(address) external;\\n\\n    function strategies(address) external view returns (address);\\n\\n    function approvedStrategies(address, address) external view returns (address);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function earn(address, uint256) external;\\n\\n    function approveStrategy(address, address) external;\\n\\n    function setStrategy(address, address) external;\\n\\n    function setVault(address, address) external;\\n\\n    function want(address) external view returns (address);\\n\\n    function rewards() external view returns (address);\\n\\n    function vaults(address) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"interfaces/badger/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.8.0;\\n\\ninterface IStrategy {\\n    function want() external view returns (address);\\n\\n    function deposit() external;\\n\\n    // NOTE: must exclude any tokens used in the yield\\n    // Controller role - withdraw should return to Controller\\n    function withdrawOther(address) external returns (uint256 balance);\\n\\n    // Controller | Vault role - withdraw should always return to Vault\\n    function withdraw(uint256) external;\\n\\n    // Controller | Vault role - withdraw should always return to Vault\\n    function withdrawAll() external returns (uint256);\\n\\n    function balanceOf() external view returns (uint256);\\n\\n    function balanceOfPool() external view returns (uint256);\\n\\n    function balanceOfWant() external view returns (uint256);\\n\\n    function getName() external pure returns (string memory);\\n\\n    function setStrategist(address _strategist) external;\\n\\n    function setWithdrawalFee(uint256 _withdrawalFee) external;\\n\\n    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist) external;\\n\\n    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance) external;\\n\\n    function setGovernance(address _governance) external;\\n\\n    function setController(address _controller) external;\\n\\n    function controller() external returns (address);\\n\\n    function governance() external returns (address);\\n\\n    function tend() external;\\n\\n    function harvest() external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/badger-sett/SettAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.11;\\n\\nimport \\\"../../deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/*\\n    Common base for permissioned roles throughout Sett ecosystem\\n*/\\ncontract SettAccessControl is Initializable {\\n    address public governance;\\n    address public strategist;\\n    address public keeper;\\n\\n    // ===== MODIFIERS =====\\n    function _onlyGovernance() internal view {\\n        require(msg.sender == governance, \\\"onlyGovernance\\\");\\n    }\\n\\n    function _onlyGovernanceOrStrategist() internal view {\\n        require(msg.sender == strategist || msg.sender == governance, \\\"onlyGovernanceOrStrategist\\\");\\n    }\\n\\n    function _onlyAuthorizedActors() internal view {\\n        require(msg.sender == keeper || msg.sender == governance, \\\"onlyAuthorizedActors\\\");\\n    }\\n\\n    // ===== PERMISSIONED ACTIONS =====\\n\\n    /// @notice Change strategist address\\n    /// @notice Can only be changed by governance itself\\n    function setStrategist(address _strategist) external {\\n        _onlyGovernance();\\n        strategist = _strategist;\\n    }\\n\\n    /// @notice Change keeper address\\n    /// @notice Can only be changed by governance itself\\n    function setKeeper(address _keeper) external {\\n        _onlyGovernance();\\n        keeper = _keeper;\\n    }\\n\\n    /// @notice Change governance address\\n    /// @notice Can only be changed by governance itself\\n    function setGovernance(address _governance) public {\\n        _onlyGovernance();\\n        governance = _governance;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvested\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"HarvestState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"SetGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFeeGovernance\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFeeGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFeeStrategist\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFeeStrategist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"}],\"name\":\"SetStrategist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tended\",\"type\":\"uint256\"}],\"name\":\"Tend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"crvTended\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cvxTended\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cvxCrvHarvested\",\"type\":\"uint256\"}],\"name\":\"TendState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"TokenSwapPathSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WithdrawAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawOther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preWant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"postWant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"name\":\"WithdrawState\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT_256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"__BaseStrategy_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStrategyVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"booster\",\"outputs\":[{\"internalType\":\"contract IBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvCvxCrvPoolIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvDepositor\",\"outputs\":[{\"internalType\":\"contract CrvDepositor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxCrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxCrvRewardsPool\",\"outputs\":[{\"internalType\":\"contract IBaseRewardsPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxCrvToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtectedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getTokenSwapPath\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cvxCrvHarvested\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_feeConfig\",\"type\":\"uint256[3]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isProtectedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTendable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaPoolFactoryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"patchPaths\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeGovernance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeStrategist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFeeGovernance\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFeeStrategist\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalMaxDeviationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threeCrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threeCrvSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threeCrvToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSwapPaths\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdrawOther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalMaxDeviationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StrategyCvxCrvHelper","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}