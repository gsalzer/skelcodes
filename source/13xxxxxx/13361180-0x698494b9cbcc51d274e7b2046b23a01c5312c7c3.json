{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n// Global Enums and Structs\r\n\r\n\r\n\r\nstruct StrategyParams {\r\n    uint256 performanceFee;\r\n    uint256 activation;\r\n    uint256 debtRatio;\r\n    uint256 minDebtPerHarvest;\r\n    uint256 maxDebtPerHarvest;\r\n    uint256 lastReport;\r\n    uint256 totalDebt;\r\n    uint256 totalGain;\r\n    uint256 totalLoss;\r\n}\r\n\r\n// Part: Account\r\n\r\nlibrary Account {\r\n    enum Status {Normal, Liquid, Vapor}\r\n    struct Info {\r\n        address owner; // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n    struct Storage {\r\n        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\r\n        Status status;\r\n    }\r\n}\r\n\r\n// Part: Actions\r\n\r\nlibrary Actions {\r\n    enum ActionType {\r\n        Deposit, // supply tokens\r\n        Withdraw, // borrow tokens\r\n        Transfer, // transfer balance between accounts\r\n        Buy, // buy an amount of some token (publicly)\r\n        Sell, // sell an amount of some token (publicly)\r\n        Trade, // trade tokens against another account\r\n        Liquidate, // liquidate an undercollateralized or expiring account\r\n        Vaporize, // use excess tokens to zero-out a completely negative account\r\n        Call // send arbitrary data to an address\r\n    }\r\n\r\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\r\n\r\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\r\n\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        Types.AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n\r\n    struct DepositArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address from;\r\n    }\r\n\r\n    struct WithdrawArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address to;\r\n    }\r\n\r\n    struct TransferArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info accountOne;\r\n        Account.Info accountTwo;\r\n        uint256 market;\r\n    }\r\n\r\n    struct BuyArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 makerMarket;\r\n        uint256 takerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct SellArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 takerMarket;\r\n        uint256 makerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct TradeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info takerAccount;\r\n        Account.Info makerAccount;\r\n        uint256 inputMarket;\r\n        uint256 outputMarket;\r\n        address autoTrader;\r\n        bytes tradeData;\r\n    }\r\n\r\n    struct LiquidateArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info liquidAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct VaporizeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info vaporAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct CallArgs {\r\n        Account.Info account;\r\n        address callee;\r\n        bytes data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Decimal {\r\n    struct D256 {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\nlibrary Interest {\r\n    struct Rate {\r\n        uint256 value;\r\n    }\r\n\r\n    struct Index {\r\n        uint96 borrow;\r\n        uint96 supply;\r\n        uint32 lastUpdate;\r\n    }\r\n}\r\n\r\nlibrary Monetary {\r\n    struct Price {\r\n        uint256 value;\r\n    }\r\n    struct Value {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\nlibrary Storage {\r\n    // All information necessary for tracking a market\r\n    struct Market {\r\n        // Contract address of the associated ERC20 token\r\n        address token;\r\n        // Total aggregated supply and borrow amount of the entire market\r\n        Types.TotalPar totalPar;\r\n        // Interest index of the market\r\n        Interest.Index index;\r\n        // Contract address of the price oracle for this market\r\n        address priceOracle;\r\n        // Contract address of the interest setter for this market\r\n        address interestSetter;\r\n        // Multiplier on the marginRatio for this market\r\n        Decimal.D256 marginPremium;\r\n        // Multiplier on the liquidationSpread for this market\r\n        Decimal.D256 spreadPremium;\r\n        // Whether additional borrows are allowed for this market\r\n        bool isClosing;\r\n    }\r\n\r\n    // The global risk parameters that govern the health and security of the system\r\n    struct RiskParams {\r\n        // Required ratio of over-collateralization\r\n        Decimal.D256 marginRatio;\r\n        // Percentage penalty incurred by liquidated accounts\r\n        Decimal.D256 liquidationSpread;\r\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\r\n        Decimal.D256 earningsRate;\r\n        // The minimum absolute borrow value of an account\r\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\r\n        Monetary.Value minBorrowedValue;\r\n    }\r\n\r\n    // The maximum RiskParam values that can be set\r\n    struct RiskLimits {\r\n        uint64 marginRatioMax;\r\n        uint64 liquidationSpreadMax;\r\n        uint64 earningsRateMax;\r\n        uint64 marginPremiumMax;\r\n        uint64 spreadPremiumMax;\r\n        uint128 minBorrowedValueMax;\r\n    }\r\n\r\n    // The entire storage state of Solo\r\n    struct State {\r\n        // number of markets\r\n        uint256 numMarkets;\r\n        // marketId => Market\r\n        mapping(uint256 => Market) markets;\r\n        // owner => account number => Account\r\n        mapping(address => mapping(uint256 => Account.Storage)) accounts;\r\n        // Addresses that can control other users accounts\r\n        mapping(address => mapping(address => bool)) operators;\r\n        // Addresses that can control all users accounts\r\n        mapping(address => bool) globalOperators;\r\n        // mutable risk parameters of the system\r\n        RiskParams riskParams;\r\n        // immutable risk limits of the system\r\n        RiskLimits riskLimits;\r\n    }\r\n}\r\n\r\n\r\n// Part: ICallee\r\n\r\n/**\r\n * @title ICallee\r\n * @author dYdX\r\n *\r\n * Interface that Callees for Solo must implement in order to ingest data.\r\n */\r\ninterface ICallee {\r\n    // ============ Public Functions ============\r\n\r\n    /**\r\n     * Allows users to send this contract arbitrary data.\r\n     *\r\n     * @param  sender       The msg.sender to Solo\r\n     * @param  accountInfo  The account from which the data is being sent\r\n     * @param  data         Arbitrary data given by the sender\r\n     */\r\n    function callFunction(\r\n        address sender,\r\n        Account.Info memory accountInfo,\r\n        bytes memory data\r\n    ) external;\r\n}\r\n\r\n// Part: ISoloMargin\r\n\r\ninterface ISoloMargin {\r\n    struct OperatorArg {\r\n        address operator1;\r\n        bool trusted;\r\n    }\r\n\r\n    function ownerSetSpreadPremium(uint256 marketId, Decimal.D256 memory spreadPremium) external;\r\n\r\n    function getIsGlobalOperator(address operator1) external view returns (bool);\r\n\r\n    function getMarketTokenAddress(uint256 marketId) external view returns (address);\r\n\r\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter) external;\r\n\r\n    function getAccountValues(Account.Info memory account) external view returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketPriceOracle(uint256 marketId) external view returns (address);\r\n\r\n    function getMarketInterestSetter(uint256 marketId) external view returns (address);\r\n\r\n    function getMarketSpreadPremium(uint256 marketId) external view returns (Decimal.D256 memory);\r\n\r\n    function getNumMarkets() external view returns (uint256);\r\n\r\n    function ownerWithdrawUnsupportedTokens(address token, address recipient) external returns (uint256);\r\n\r\n    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue) external;\r\n\r\n    function ownerSetLiquidationSpread(Decimal.D256 memory spread) external;\r\n\r\n    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) external;\r\n\r\n    function getIsLocalOperator(address owner, address operator1) external view returns (bool);\r\n\r\n    function getAccountPar(Account.Info memory account, uint256 marketId) external view returns (Types.Par memory);\r\n\r\n    function ownerSetMarginPremium(uint256 marketId, Decimal.D256 memory marginPremium) external;\r\n\r\n    function getMarginRatio() external view returns (Decimal.D256 memory);\r\n\r\n    function getMarketCurrentIndex(uint256 marketId) external view returns (Interest.Index memory);\r\n\r\n    function getMarketIsClosing(uint256 marketId) external view returns (bool);\r\n\r\n    function getRiskParams() external view returns (Storage.RiskParams memory);\r\n\r\n    function getAccountBalances(Account.Info memory account)\r\n        external\r\n        view\r\n        returns (\r\n            address[] memory,\r\n            Types.Par[] memory,\r\n            Types.Wei[] memory\r\n        );\r\n\r\n    function renounceOwnership() external;\r\n\r\n    function getMinBorrowedValue() external view returns (Monetary.Value memory);\r\n\r\n    function setOperators(OperatorArg[] memory args) external;\r\n\r\n    function getMarketPrice(uint256 marketId) external view returns (address);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function isOwner() external view returns (bool);\r\n\r\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient) external returns (uint256);\r\n\r\n    function ownerAddMarket(\r\n        address token,\r\n        address priceOracle,\r\n        address interestSetter,\r\n        Decimal.D256 memory marginPremium,\r\n        Decimal.D256 memory spreadPremium\r\n    ) external;\r\n\r\n    function operate(Account.Info[] memory accounts, Actions.ActionArgs[] memory actions) external;\r\n\r\n    function getMarketWithInfo(uint256 marketId)\r\n        external\r\n        view\r\n        returns (\r\n            Storage.Market memory,\r\n            Interest.Index memory,\r\n            Monetary.Price memory,\r\n            Interest.Rate memory\r\n        );\r\n\r\n    function ownerSetMarginRatio(Decimal.D256 memory ratio) external;\r\n\r\n    function getLiquidationSpread() external view returns (Decimal.D256 memory);\r\n\r\n    function getAccountWei(Account.Info memory account, uint256 marketId) external view returns (Types.Wei memory);\r\n\r\n    function getMarketTotalPar(uint256 marketId) external view returns (Types.TotalPar memory);\r\n\r\n    function getLiquidationSpreadForPair(uint256 heldMarketId, uint256 owedMarketId) external view returns (Decimal.D256 memory);\r\n\r\n    function getNumExcessTokens(uint256 marketId) external view returns (Types.Wei memory);\r\n\r\n    function getMarketCachedIndex(uint256 marketId) external view returns (Interest.Index memory);\r\n\r\n    function getAccountStatus(Account.Info memory account) external view returns (uint8);\r\n\r\n    function getEarningsRate() external view returns (Decimal.D256 memory);\r\n\r\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle) external;\r\n\r\n    function getRiskLimits() external view returns (Storage.RiskLimits memory);\r\n\r\n    function getMarket(uint256 marketId) external view returns (Storage.Market memory);\r\n\r\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) external;\r\n\r\n    function ownerSetGlobalOperator(address operator1, bool approved) external;\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function getAdjustedAccountValues(Account.Info memory account) external view returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketMarginPremium(uint256 marketId) external view returns (Decimal.D256 memory);\r\n\r\n    function getMarketInterestRate(uint256 marketId) external view returns (Interest.Rate memory);\r\n}\r\n\r\n// Part: IUniswapAnchoredView\r\n\r\ninterface IUniswapAnchoredView {\r\n\tfunction price(string memory) external returns (uint);\r\n}\r\n\r\n// Part: IUniswapV2Router01\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n\r\n// Part: IUniswapV3SwapCallback\r\n\r\n/// @title Callback for IUniswapV3PoolActions#swap\r\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\r\ninterface IUniswapV3SwapCallback {\r\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\r\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\r\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\r\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\r\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\r\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\r\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// Part: InterestRateModel\r\n\r\ninterface InterestRateModel {\r\n    /**\r\n     * @notice Calculates the current borrow interest rate per block\r\n     * @param cash The total amount of cash the market has\r\n     * @param borrows The total amount of borrows the market has outstanding\r\n     * @param reserves The total amount of reserves the market has\r\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\r\n     */\r\n    function getBorrowRate(\r\n        uint256 cash,\r\n        uint256 borrows,\r\n        uint256 reserves\r\n    ) external view returns (uint256, uint256);\r\n\r\n    /**\r\n     * @notice Calculates the current supply interest rate per block\r\n     * @param cash The total amount of cash the market has\r\n     * @param borrows The total amount of borrows the market has outstanding\r\n     * @param reserves The total amount of reserves the market has\r\n     * @param reserveFactorMantissa The current reserve factor the market has\r\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\r\n     */\r\n    function getSupplyRate(\r\n        uint256 cash,\r\n        uint256 borrows,\r\n        uint256 reserves,\r\n        uint256 reserveFactorMantissa\r\n    ) external view returns (uint256);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/Address\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/IERC20\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/Math\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeMath\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Part: Types\r\n\r\nlibrary Types {\r\n    enum AssetDenomination {\r\n        Wei, // the amount is denominated in wei\r\n        Par // the amount is denominated in par\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta, // the amount is given as a delta from the current value\r\n        Target // the amount is given as an exact number to end up at\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    struct TotalPar {\r\n        uint128 borrow;\r\n        uint128 supply;\r\n    }\r\n\r\n    struct Par {\r\n        bool sign; // true if positive\r\n        uint128 value;\r\n    }\r\n\r\n    struct Wei {\r\n        bool sign; // true if positive\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n// Part: iearn-finance/yearn-vaults@0.4.3/HealthCheck\r\n\r\ninterface HealthCheck {\r\n    function check(\r\n        uint256 profit,\r\n        uint256 loss,\r\n        uint256 debtPayment,\r\n        uint256 debtOutstanding,\r\n        uint256 totalDebt\r\n    ) external view returns (bool);\r\n}\r\n\r\n// Part: CTokenI\r\n\r\ninterface CTokenI {\r\n    /*** Market Events ***/\r\n\r\n    /**\r\n     * @notice Event emitted when interest is accrued\r\n     */\r\n    event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\r\n\r\n    /**\r\n     * @notice Event emitted when tokens are minted\r\n     */\r\n    event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\r\n\r\n    /**\r\n     * @notice Event emitted when tokens are redeemed\r\n     */\r\n    event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\r\n\r\n    /**\r\n     * @notice Event emitted when underlying is borrowed\r\n     */\r\n    event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\r\n\r\n    /**\r\n     * @notice Event emitted when a borrow is repaid\r\n     */\r\n    event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows);\r\n\r\n    /**\r\n     * @notice Event emitted when a borrow is liquidated\r\n     */\r\n    event LiquidateBorrow(address liquidator, address borrower, uint256 repayAmount, address cTokenCollateral, uint256 seizeTokens);\r\n\r\n    /*** Admin Events ***/\r\n\r\n    /**\r\n     * @notice Event emitted when pendingAdmin is changed\r\n     */\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n    /**\r\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\r\n     */\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @notice Event emitted when the reserve factor is changed\r\n     */\r\n    event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\r\n\r\n    /**\r\n     * @notice Event emitted when the reserves are added\r\n     */\r\n    event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\r\n\r\n    /**\r\n     * @notice Event emitted when the reserves are reduced\r\n     */\r\n    event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\r\n\r\n    /**\r\n     * @notice EIP20 Transfer event\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    /**\r\n     * @notice EIP20 Approval event\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /**\r\n     * @notice Failure event\r\n     */\r\n    event Failure(uint256 error, uint256 info, uint256 detail);\r\n\r\n    function transfer(address dst, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external returns (uint256);\r\n\r\n    function getAccountSnapshot(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function borrowRatePerBlock() external view returns (uint256);\r\n\r\n    function supplyRatePerBlock() external view returns (uint256);\r\n\r\n    function totalBorrowsCurrent() external returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external returns (uint256);\r\n\r\n    function borrowBalanceStored(address account) external view returns (uint256);\r\n\r\n    function exchangeRateCurrent() external returns (uint256);\r\n\r\n    function accrualBlockNumber() external view returns (uint256);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n\r\n    function getCash() external view returns (uint256);\r\n\r\n    function accrueInterest() external returns (uint256);\r\n\r\n    function interestRateModel() external view returns (InterestRateModel);\r\n\r\n    function totalReserves() external view returns (uint256);\r\n\r\n    function reserveFactorMantissa() external view returns (uint256);\r\n\r\n    function seize(\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 seizeTokens\r\n    ) external returns (uint256);\r\n\r\n    function totalBorrows() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n// Part: IERC20Extended\r\n\r\ninterface IERC20Extended is IERC20 {\r\n\tfunction decimals() external view returns (uint8);\r\n\r\n\tfunction name() external view returns (string memory);\r\n\r\n\tfunction symbol() external view returns (string memory);\r\n}\r\n\r\n// Part: IUniswapV2Router02\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// Part: IUniswapV3Router\r\n\r\n/// @title Router token swapping functionality\r\n/// @notice Functions for swapping tokens via Uniswap V3\r\ninterface IUniswapV3Router is IUniswapV3SwapCallback {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInputSingle(ExactInputSingleParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 amountOut);\r\n\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInput(ExactInputParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 amountOut);\r\n\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 amountIn);\r\n\r\n    struct ExactOutputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutput(ExactOutputParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 amountIn);\r\n}\r\n\r\n// Part: IWETH\r\n\r\ninterface IWETH is IERC20 {\r\n\tfunction deposit() payable external;\r\n\tfunction withdraw(uint256) external;\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/SafeERC20\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// Part: iearn-finance/yearn-vaults@0.4.3/VaultAPI\r\n\r\ninterface VaultAPI is IERC20 {\r\n    function name() external view returns (string calldata);\r\n\r\n    function symbol() external view returns (string calldata);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function apiVersion() external pure returns (string memory);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 expiry,\r\n        bytes calldata signature\r\n    ) external returns (bool);\r\n\r\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\r\n    function deposit() external returns (uint256);\r\n\r\n    function deposit(uint256 amount) external returns (uint256);\r\n\r\n    function deposit(uint256 amount, address recipient) external returns (uint256);\r\n\r\n    // NOTE: Vyper produces multiple signatures for a given function with \"default\" args\r\n    function withdraw() external returns (uint256);\r\n\r\n    function withdraw(uint256 maxShares) external returns (uint256);\r\n\r\n    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function strategies(address _strategy) external view returns (StrategyParams memory);\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function depositLimit() external view returns (uint256);\r\n\r\n    function maxAvailableShares() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault would increase this Strategy's borrow limit,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function creditAvailable() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault would like to pull back from the Strategy,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function debtOutstanding() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault expect this Strategy to return at the current\r\n     * block, based on its present performance (since its last report). Can be\r\n     * used to determine expectedReturn in your Strategy.\r\n     */\r\n    function expectedReturn() external view returns (uint256);\r\n\r\n    /**\r\n     * This is the main contact point where the Strategy interacts with the\r\n     * Vault. It is critical that this call is handled as intended by the\r\n     * Strategy. Therefore, this function will be called by BaseStrategy to\r\n     * make sure the integration is correct.\r\n     */\r\n    function report(\r\n        uint256 _gain,\r\n        uint256 _loss,\r\n        uint256 _debtPayment\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * This function should only be used in the scenario where the Strategy is\r\n     * being retired but no migration of the positions are possible, or in the\r\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\r\n     * mode in order for it to exit as quickly as possible. The latter scenario\r\n     * could be for any reason that is considered \"critical\" that the Strategy\r\n     * exits its position as fast as possible, such as a sudden change in\r\n     * market conditions leading to losses, or an imminent failure in an\r\n     * external dependency.\r\n     */\r\n    function revokeStrategy() external;\r\n\r\n    /**\r\n     * View the governance address of the Vault to assert privileged functions\r\n     * can only be called by governance. The Strategy serves the Vault, so it\r\n     * is subject to governance defined by the Vault.\r\n     */\r\n    function governance() external view returns (address);\r\n\r\n    /**\r\n     * View the management address of the Vault to assert privileged functions\r\n     * can only be called by management. The Strategy serves the Vault, so it\r\n     * is subject to management defined by the Vault.\r\n     */\r\n    function management() external view returns (address);\r\n\r\n    /**\r\n     * View the guardian address of the Vault to assert privileged functions\r\n     * can only be called by guardian. The Strategy serves the Vault, so it\r\n     * is subject to guardian defined by the Vault.\r\n     */\r\n    function guardian() external view returns (address);\r\n}\r\n\r\n// Part: CErc20I\r\n\r\ninterface CErc20I is CTokenI {\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external returns (uint256);\r\n\r\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\r\n\r\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\r\n\r\n    function liquidateBorrow(\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        CTokenI cTokenCollateral\r\n    ) external returns (uint256);\r\n\r\n    function underlying() external view returns (address);\r\n}\r\n\r\n// Part: CEtherI\r\n\r\ninterface CEtherI is CTokenI {\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function liquidateBorrow(address borrower, CTokenI cTokenCollateral) external payable;\r\n\r\n    function borrow(uint256 borrowAmount) external returns (uint);\r\n\r\n    function mint() external payable;\r\n    function repayBorrow() external payable;\r\n}\r\n\r\n// Part: ComptrollerI\r\n\r\ninterface ComptrollerI {\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\r\n\r\n    function exitMarket(address cToken) external returns (uint256);\r\n\r\n    /*** Policy Hooks ***/\r\n\r\n    function mintAllowed(\r\n        address cToken,\r\n        address minter,\r\n        uint256 mintAmount\r\n    ) external returns (uint256);\r\n\r\n    function mintVerify(\r\n        address cToken,\r\n        address minter,\r\n        uint256 mintAmount,\r\n        uint256 mintTokens\r\n    ) external;\r\n\r\n    function redeemAllowed(\r\n        address cToken,\r\n        address redeemer,\r\n        uint256 redeemTokens\r\n    ) external returns (uint256);\r\n\r\n    function redeemVerify(\r\n        address cToken,\r\n        address redeemer,\r\n        uint256 redeemAmount,\r\n        uint256 redeemTokens\r\n    ) external;\r\n\r\n    function borrowAllowed(\r\n        address cToken,\r\n        address borrower,\r\n        uint256 borrowAmount\r\n    ) external returns (uint256);\r\n\r\n    function borrowVerify(\r\n        address cToken,\r\n        address borrower,\r\n        uint256 borrowAmount\r\n    ) external;\r\n\r\n    function repayBorrowAllowed(\r\n        address cToken,\r\n        address payer,\r\n        address borrower,\r\n        uint256 repayAmount\r\n    ) external returns (uint256);\r\n\r\n    function repayBorrowVerify(\r\n        address cToken,\r\n        address payer,\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        uint256 borrowerIndex\r\n    ) external;\r\n\r\n    function liquidateBorrowAllowed(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 repayAmount\r\n    ) external returns (uint256);\r\n\r\n    function liquidateBorrowVerify(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        uint256 seizeTokens\r\n    ) external;\r\n\r\n    function seizeAllowed(\r\n        address cTokenCollateral,\r\n        address cTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 seizeTokens\r\n    ) external returns (uint256);\r\n\r\n    function seizeVerify(\r\n        address cTokenCollateral,\r\n        address cTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 seizeTokens\r\n    ) external;\r\n\r\n    function transferAllowed(\r\n        address cToken,\r\n        address src,\r\n        address dst,\r\n        uint256 transferTokens\r\n    ) external returns (uint256);\r\n\r\n    function transferVerify(\r\n        address cToken,\r\n        address src,\r\n        address dst,\r\n        uint256 transferTokens\r\n    ) external;\r\n\r\n    /*** Liquidity/Liquidation Calculations ***/\r\n\r\n    function liquidateCalculateSeizeTokens(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        uint256 repayAmount\r\n    ) external view returns (uint256, uint256);\r\n\r\n    function getAccountLiquidity(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    /***  Comp claims ****/\r\n    function claimComp(address holder) external;\r\n\r\n    function claimComp(address holder, CTokenI[] memory cTokens) external;\r\n\r\n    function markets(address ctoken)\r\n        external\r\n        view\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            bool\r\n        );\r\n\r\n    function compSpeeds(address ctoken) external view returns (uint256); // will be deprecated\r\n    function compSupplySpeeds(address ctoken) external view returns (uint256);\r\n    function compBorrowSpeeds(address ctoken) external view returns (uint256);\r\n\r\n    function oracle() external view returns (address);\r\n}\r\n\r\n// Part: iearn-finance/yearn-vaults@0.4.3/BaseStrategy\r\n\r\n/**\r\n * @title Yearn Base Strategy\r\n * @author yearn.finance\r\n * @notice\r\n *  BaseStrategy implements all of the required functionality to interoperate\r\n *  closely with the Vault contract. This contract should be inherited and the\r\n *  abstract methods implemented to adapt the Strategy to the particular needs\r\n *  it has to create a return.\r\n *\r\n *  Of special interest is the relationship between `harvest()` and\r\n *  `vault.report()'. `harvest()` may be called simply because enough time has\r\n *  elapsed since the last report, and not because any funds need to be moved\r\n *  or positions adjusted. This is critical so that the Vault may maintain an\r\n *  accurate picture of the Strategy's performance. See  `vault.report()`,\r\n *  `harvest()`, and `harvestTrigger()` for further details.\r\n */\r\n\r\nabstract contract BaseStrategy {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    string public metadataURI;\r\n\r\n    // health checks\r\n    bool public doHealthCheck;\r\n    address public healthCheck;\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to track which version of `StrategyAPI` this Strategy\r\n     *  implements.\r\n     * @dev The Strategy's version must match the Vault's `API_VERSION`.\r\n     * @return A string which holds the current API version of this contract.\r\n     */\r\n    function apiVersion() public pure returns (string memory) {\r\n        return \"0.4.3\";\r\n    }\r\n\r\n    /**\r\n     * @notice This Strategy's name.\r\n     * @dev\r\n     *  You can use this field to manage the \"version\" of this Strategy, e.g.\r\n     *  `StrategySomethingOrOtherV1`. However, \"API Version\" is managed by\r\n     *  `apiVersion()` function above.\r\n     * @return This Strategy's name.\r\n     */\r\n    function name() external view virtual returns (string memory);\r\n\r\n    /**\r\n     * @notice\r\n     *  The amount (priced in want) of the total assets managed by this strategy should not count\r\n     *  towards Yearn's TVL calculations.\r\n     * @dev\r\n     *  You can override this field to set it to a non-zero value if some of the assets of this\r\n     *  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.\r\n     *  Note that this value must be strictly less than or equal to the amount provided by\r\n     *  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.\r\n     *  Also note that this value is used to determine the total assets under management by this\r\n     *  strategy, for the purposes of computing the management fee in `Vault`\r\n     * @return\r\n     *  The amount of assets this strategy manages that should not be included in Yearn's Total Value\r\n     *  Locked (TVL) calculation across it's ecosystem.\r\n     */\r\n    function delegatedAssets() external view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    VaultAPI public vault;\r\n    address public strategist;\r\n    address public rewards;\r\n    address public keeper;\r\n\r\n    IERC20 public want;\r\n\r\n    // So indexers can keep track of this\r\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\r\n\r\n    event UpdatedStrategist(address newStrategist);\r\n\r\n    event UpdatedKeeper(address newKeeper);\r\n\r\n    event UpdatedRewards(address rewards);\r\n\r\n    event UpdatedMinReportDelay(uint256 delay);\r\n\r\n    event UpdatedMaxReportDelay(uint256 delay);\r\n\r\n    event UpdatedProfitFactor(uint256 profitFactor);\r\n\r\n    event UpdatedDebtThreshold(uint256 debtThreshold);\r\n\r\n    event EmergencyExitEnabled();\r\n\r\n    event UpdatedMetadataURI(string metadataURI);\r\n\r\n    // The minimum number of seconds between harvest calls. See\r\n    // `setMinReportDelay()` for more details.\r\n    uint256 public minReportDelay;\r\n\r\n    // The maximum number of seconds between harvest calls. See\r\n    // `setMaxReportDelay()` for more details.\r\n    uint256 public maxReportDelay;\r\n\r\n    // The minimum multiple that `callCost` must be above the credit/profit to\r\n    // be \"justifiable\". See `setProfitFactor()` for more details.\r\n    uint256 public profitFactor;\r\n\r\n    // Use this to adjust the threshold at which running a debt causes a\r\n    // harvest trigger. See `setDebtThreshold()` for more details.\r\n    uint256 public debtThreshold;\r\n\r\n    // See note on `setEmergencyExit()`.\r\n    bool public emergencyExit;\r\n\r\n    // modifiers\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyEmergencyAuthorized() {\r\n        require(\r\n            msg.sender == strategist || msg.sender == governance() || msg.sender == vault.guardian() || msg.sender == vault.management(),\r\n            \"!authorized\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyStrategist() {\r\n        require(msg.sender == strategist, \"!strategist\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyKeepers() {\r\n        require(\r\n            msg.sender == keeper ||\r\n                msg.sender == strategist ||\r\n                msg.sender == governance() ||\r\n                msg.sender == vault.guardian() ||\r\n                msg.sender == vault.management(),\r\n            \"!authorized\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyVaultManagers() {\r\n        require(msg.sender == vault.management() || msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _vault) public {\r\n        _initialize(_vault, msg.sender, msg.sender, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Initializes the Strategy, this is called only once, when the\r\n     *  contract is deployed.\r\n     * @dev `_vault` should implement `VaultAPI`.\r\n     * @param _vault The address of the Vault responsible for this Strategy.\r\n     * @param _strategist The address to assign as `strategist`.\r\n     * The strategist is able to change the reward address\r\n     * @param _rewards  The address to use for pulling rewards.\r\n     * @param _keeper The adddress of the _keeper. _keeper\r\n     * can harvest and tend a strategy.\r\n     */\r\n    function _initialize(\r\n        address _vault,\r\n        address _strategist,\r\n        address _rewards,\r\n        address _keeper\r\n    ) internal {\r\n        require(address(want) == address(0), \"Strategy already initialized\");\r\n\r\n        vault = VaultAPI(_vault);\r\n        want = IERC20(vault.token());\r\n        want.safeApprove(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\r\n        strategist = _strategist;\r\n        rewards = _rewards;\r\n        keeper = _keeper;\r\n\r\n        // initialize variables\r\n        minReportDelay = 0;\r\n        maxReportDelay = 86400;\r\n        profitFactor = 100;\r\n        debtThreshold = 0;\r\n\r\n        vault.approve(rewards, uint256(-1)); // Allow rewards to be pulled\r\n    }\r\n\r\n    function setHealthCheck(address _healthCheck) external onlyVaultManagers {\r\n        healthCheck = _healthCheck;\r\n    }\r\n\r\n    function setDoHealthCheck(bool _doHealthCheck) external onlyVaultManagers {\r\n        doHealthCheck = _doHealthCheck;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `strategist`.\r\n     *\r\n     *  This may only be called by governance or the existing strategist.\r\n     * @param _strategist The new address to assign as `strategist`.\r\n     */\r\n    function setStrategist(address _strategist) external onlyAuthorized {\r\n        require(_strategist != address(0));\r\n        strategist = _strategist;\r\n        emit UpdatedStrategist(_strategist);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `keeper`.\r\n     *\r\n     *  `keeper` is the only address that may call `tend()` or `harvest()`,\r\n     *  other than `governance()` or `strategist`. However, unlike\r\n     *  `governance()` or `strategist`, `keeper` may *only* call `tend()`\r\n     *  and `harvest()`, and no other authorized functions, following the\r\n     *  principle of least privilege.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _keeper The new address to assign as `keeper`.\r\n     */\r\n    function setKeeper(address _keeper) external onlyAuthorized {\r\n        require(_keeper != address(0));\r\n        keeper = _keeper;\r\n        emit UpdatedKeeper(_keeper);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `rewards`. EOA or smart contract which has the permission\r\n     *  to pull rewards from the vault.\r\n     *\r\n     *  This may only be called by the strategist.\r\n     * @param _rewards The address to use for pulling rewards.\r\n     */\r\n    function setRewards(address _rewards) external onlyStrategist {\r\n        require(_rewards != address(0));\r\n        vault.approve(rewards, 0);\r\n        rewards = _rewards;\r\n        vault.approve(rewards, uint256(-1));\r\n        emit UpdatedRewards(_rewards);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\r\n     *  of blocks that should pass for `harvest()` to be called.\r\n     *\r\n     *  For external keepers (such as the Keep3r network), this is the minimum\r\n     *  time between jobs to wait. (see `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _delay The minimum number of seconds to wait between harvests.\r\n     */\r\n    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\r\n        minReportDelay = _delay;\r\n        emit UpdatedMinReportDelay(_delay);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `maxReportDelay`. `maxReportDelay` is the maximum number\r\n     *  of blocks that should pass for `harvest()` to be called.\r\n     *\r\n     *  For external keepers (such as the Keep3r network), this is the maximum\r\n     *  time between jobs to wait. (see `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _delay The maximum number of seconds to wait between harvests.\r\n     */\r\n    function setMaxReportDelay(uint256 _delay) external onlyAuthorized {\r\n        maxReportDelay = _delay;\r\n        emit UpdatedMaxReportDelay(_delay);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `profitFactor`. `profitFactor` is used to determine\r\n     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _profitFactor A ratio to multiply anticipated\r\n     * `harvest()` gas cost against.\r\n     */\r\n    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\r\n        profitFactor = _profitFactor;\r\n        emit UpdatedProfitFactor(_profitFactor);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Sets how far the Strategy can go into loss without a harvest and report\r\n     *  being required.\r\n     *\r\n     *  By default this is 0, meaning any losses would cause a harvest which\r\n     *  will subsequently report the loss to the Vault for tracking. (See\r\n     *  `harvestTrigger()` for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _debtThreshold How big of a loss this Strategy may carry without\r\n     * being required to report to the Vault.\r\n     */\r\n    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\r\n        debtThreshold = _debtThreshold;\r\n        emit UpdatedDebtThreshold(_debtThreshold);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `metadataURI`. `metadataURI` is used to store the URI\r\n     * of the file describing the strategy.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _metadataURI The URI that describe the strategy.\r\n     */\r\n    function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {\r\n        metadataURI = _metadataURI;\r\n        emit UpdatedMetadataURI(_metadataURI);\r\n    }\r\n\r\n    /**\r\n     * Resolve governance address from Vault contract, used to make assertions\r\n     * on protected functions in the Strategy.\r\n     */\r\n    function governance() internal view returns (address) {\r\n        return vault.governance();\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)\r\n     *  to `want` (using the native decimal characteristics of `want`).\r\n     * @dev\r\n     *  Care must be taken when working with decimals to assure that the conversion\r\n     *  is compatible. As an example:\r\n     *\r\n     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),\r\n     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)\r\n     *\r\n     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`\r\n     * @return The amount in `want` of `_amtInEth` converted to `want`\r\n     **/\r\n    function ethToWant(uint256 _amtInWei) public view virtual returns (uint256);\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide an accurate estimate for the total amount of assets\r\n     *  (principle + return) that this Strategy is currently managing,\r\n     *  denominated in terms of `want` tokens.\r\n     *\r\n     *  This total should be \"realizable\" e.g. the total value that could\r\n     *  *actually* be obtained from this Strategy if it were to divest its\r\n     *  entire position based on current on-chain conditions.\r\n     * @dev\r\n     *  Care must be taken in using this function, since it relies on external\r\n     *  systems, which could be manipulated by the attacker to give an inflated\r\n     *  (or reduced) value produced by this function, based on current on-chain\r\n     *  conditions (e.g. this function is possible to influence through\r\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\r\n     *  mechanisms).\r\n     *\r\n     *  It is up to governance to use this function to correctly order this\r\n     *  Strategy relative to its peers in the withdrawal queue to minimize\r\n     *  losses for the Vault based on sudden withdrawals. This value should be\r\n     *  higher than the total debt of the Strategy and higher than its expected\r\n     *  value to be \"safe\".\r\n     * @return The estimated total assets in this Strategy.\r\n     */\r\n    function estimatedTotalAssets() public view virtual returns (uint256);\r\n\r\n    /*\r\n     * @notice\r\n     *  Provide an indication of whether this strategy is currently \"active\"\r\n     *  in that it is managing an active position, or will manage a position in\r\n     *  the future. This should correlate to `harvest()` activity, so that Harvest\r\n     *  events can be tracked externally by indexing agents.\r\n     * @return True if the strategy is actively managing a position.\r\n     */\r\n    function isActive() public view returns (bool) {\r\n        return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;\r\n    }\r\n\r\n    /**\r\n     * Perform any Strategy unwinding or other calls necessary to capture the\r\n     * \"free return\" this Strategy has generated since the last time its core\r\n     * position(s) were adjusted. Examples include unwrapping extra rewards.\r\n     * This call is only used during \"normal operation\" of a Strategy, and\r\n     * should be optimized to minimize losses as much as possible.\r\n     *\r\n     * This method returns any realized profits and/or realized losses\r\n     * incurred, and should return the total amounts of profits/losses/debt\r\n     * payments (in `want` tokens) for the Vault's accounting (e.g.\r\n     * `want.balanceOf(this) >= _debtPayment + _profit`).\r\n     *\r\n     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\r\n     * debt limit, otherwise its value will be how far past the debt limit\r\n     * the Strategy is. The Strategy's debt limit is configured in the Vault.\r\n     *\r\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\r\n     *       It is okay for it to be less than `_debtOutstanding`, as that\r\n     *       should only used as a guide for how much is left to pay back.\r\n     *       Payments should be made to minimize loss from slippage, debt,\r\n     *       withdrawal fees, etc.\r\n     *\r\n     * See `vault.debtOutstanding()`.\r\n     */\r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        virtual\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        );\r\n\r\n    /**\r\n     * Perform any adjustments to the core position(s) of this Strategy given\r\n     * what change the Vault made in the \"investable capital\" available to the\r\n     * Strategy. Note that all \"free capital\" in the Strategy after the report\r\n     * was made is available for reinvestment. Also note that this number\r\n     * could be 0, and you should handle that scenario accordingly.\r\n     *\r\n     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\r\n     */\r\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\r\n\r\n    /**\r\n     * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,\r\n     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\r\n     * This function should return the amount of `want` tokens made available by the\r\n     * liquidation. If there is a difference between them, `_loss` indicates whether the\r\n     * difference is due to a realized loss, or if there is some other sitution at play\r\n     * (e.g. locked funds) where the amount made available is less than what is needed.\r\n     *\r\n     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\r\n     */\r\n    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);\r\n\r\n    /**\r\n     * Liquidate everything and returns the amount that got freed.\r\n     * This function is used during emergency exit instead of `prepareReturn()` to\r\n     * liquidate all of the Strategy's positions back to the Vault.\r\n     */\r\n\r\n    function liquidateAllPositions() internal virtual returns (uint256 _amountFreed);\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide a signal to the keeper that `tend()` should be called. The\r\n     *  keeper will provide the estimated gas cost that they would pay to call\r\n     *  `tend()`, and this function should use that estimate to make a\r\n     *  determination if calling it is \"worth it\" for the keeper. This is not\r\n     *  the only consideration into issuing this trigger, for example if the\r\n     *  position would be negatively affected if `tend()` is not called\r\n     *  shortly, then this can return `true` even if the keeper might be\r\n     *  \"at a loss\" (keepers are always reimbursed by Yearn).\r\n     * @dev\r\n     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\r\n     *\r\n     *  This call and `harvestTrigger()` should never return `true` at the same\r\n     *  time.\r\n     * @param callCostInWei The keeper's estimated gas cost to call `tend()` (in wei).\r\n     * @return `true` if `tend()` should be called, `false` otherwise.\r\n     */\r\n    function tendTrigger(uint256 callCostInWei) public view virtual returns (bool) {\r\n        // We usually don't need tend, but if there are positions that need\r\n        // active maintainence, overriding this function is how you would\r\n        // signal for that.\r\n        // If your implementation uses the cost of the call in want, you can\r\n        // use uint256 callCost = ethToWant(callCostInWei);\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Adjust the Strategy's position. The purpose of tending isn't to\r\n     *  realize gains, but to maximize yield by reinvesting any returns.\r\n     *\r\n     *  See comments on `adjustPosition()`.\r\n     *\r\n     *  This may only be called by governance, the strategist, or the keeper.\r\n     */\r\n    function tend() external onlyKeepers {\r\n        // Don't take profits with this call, but adjust for better gains\r\n        adjustPosition(vault.debtOutstanding());\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide a signal to the keeper that `harvest()` should be called. The\r\n     *  keeper will provide the estimated gas cost that they would pay to call\r\n     *  `harvest()`, and this function should use that estimate to make a\r\n     *  determination if calling it is \"worth it\" for the keeper. This is not\r\n     *  the only consideration into issuing this trigger, for example if the\r\n     *  position would be negatively affected if `harvest()` is not called\r\n     *  shortly, then this can return `true` even if the keeper might be \"at a\r\n     *  loss\" (keepers are always reimbursed by Yearn).\r\n     * @dev\r\n     *  `callCostInWei` must be priced in terms of `wei` (1e-18 ETH).\r\n     *\r\n     *  This call and `tendTrigger` should never return `true` at the\r\n     *  same time.\r\n     *\r\n     *  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the\r\n     *  strategist-controlled parameters that will influence whether this call\r\n     *  returns `true` or not. These parameters will be used in conjunction\r\n     *  with the parameters reported to the Vault (see `params`) to determine\r\n     *  if calling `harvest()` is merited.\r\n     *\r\n     *  It is expected that an external system will check `harvestTrigger()`.\r\n     *  This could be a script run off a desktop or cloud bot (e.g.\r\n     *  https://github.com/iearn-finance/yearn-vaults/blob/main/scripts/keep.py),\r\n     *  or via an integration with the Keep3r network (e.g.\r\n     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\r\n     * @param callCostInWei The keeper's estimated gas cost to call `harvest()` (in wei).\r\n     * @return `true` if `harvest()` should be called, `false` otherwise.\r\n     */\r\n    function harvestTrigger(uint256 callCostInWei) public view virtual returns (bool) {\r\n        uint256 callCost = ethToWant(callCostInWei);\r\n        StrategyParams memory params = vault.strategies(address(this));\r\n\r\n        // Should not trigger if Strategy is not activated\r\n        if (params.activation == 0) return false;\r\n\r\n        // Should not trigger if we haven't waited long enough since previous harvest\r\n        if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;\r\n\r\n        // Should trigger if hasn't been called in a while\r\n        if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;\r\n\r\n        // If some amount is owed, pay it back\r\n        // NOTE: Since debt is based on deposits, it makes sense to guard against large\r\n        //       changes to the value from triggering a harvest directly through user\r\n        //       behavior. This should ensure reasonable resistance to manipulation\r\n        //       from user-initiated withdrawals as the outstanding debt fluctuates.\r\n        uint256 outstanding = vault.debtOutstanding();\r\n        if (outstanding > debtThreshold) return true;\r\n\r\n        // Check for profits and losses\r\n        uint256 total = estimatedTotalAssets();\r\n        // Trigger if we have a loss to report\r\n        if (total.add(debtThreshold) < params.totalDebt) return true;\r\n\r\n        uint256 profit = 0;\r\n        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\r\n\r\n        // Otherwise, only trigger if it \"makes sense\" economically (gas cost\r\n        // is <N% of value moved)\r\n        uint256 credit = vault.creditAvailable();\r\n        return (profitFactor.mul(callCost) < credit.add(profit));\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Harvests the Strategy, recognizing any profits or losses and adjusting\r\n     *  the Strategy's position.\r\n     *\r\n     *  In the rare case the Strategy is in emergency shutdown, this will exit\r\n     *  the Strategy's position.\r\n     *\r\n     *  This may only be called by governance, the strategist, or the keeper.\r\n     * @dev\r\n     *  When `harvest()` is called, the Strategy reports to the Vault (via\r\n     *  `vault.report()`), so in some cases `harvest()` must be called in order\r\n     *  to take in profits, to borrow newly available funds from the Vault, or\r\n     *  otherwise adjust its position. In other cases `harvest()` must be\r\n     *  called to report to the Vault on the Strategy's position, especially if\r\n     *  any losses have occurred.\r\n     */\r\n    function harvest() external onlyKeepers {\r\n        uint256 profit = 0;\r\n        uint256 loss = 0;\r\n        uint256 debtOutstanding = vault.debtOutstanding();\r\n        uint256 debtPayment = 0;\r\n        if (emergencyExit) {\r\n            // Free up as much capital as possible\r\n            uint256 amountFreed = liquidateAllPositions();\r\n            if (amountFreed < debtOutstanding) {\r\n                loss = debtOutstanding.sub(amountFreed);\r\n            } else if (amountFreed > debtOutstanding) {\r\n                profit = amountFreed.sub(debtOutstanding);\r\n            }\r\n            debtPayment = debtOutstanding.sub(loss);\r\n        } else {\r\n            // Free up returns for Vault to pull\r\n            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);\r\n        }\r\n\r\n        // Allow Vault to take up to the \"harvested\" balance of this contract,\r\n        // which is the amount it has earned since the last time it reported to\r\n        // the Vault.\r\n        uint256 totalDebt = vault.strategies(address(this)).totalDebt;\r\n        debtOutstanding = vault.report(profit, loss, debtPayment);\r\n\r\n        // Check if free returns are left, and re-invest them\r\n        adjustPosition(debtOutstanding);\r\n\r\n        // call healthCheck contract\r\n        if (doHealthCheck && healthCheck != address(0)) {\r\n            require(HealthCheck(healthCheck).check(profit, loss, debtPayment, debtOutstanding, totalDebt), \"!healthcheck\");\r\n        } else {\r\n            doHealthCheck = true;\r\n        }\r\n\r\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Withdraws `_amountNeeded` to `vault`.\r\n     *\r\n     *  This may only be called by the Vault.\r\n     * @param _amountNeeded How much `want` to withdraw.\r\n     * @return _loss Any realized losses\r\n     */\r\n    function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {\r\n        require(msg.sender == address(vault), \"!vault\");\r\n        // Liquidate as much as possible to `want`, up to `_amountNeeded`\r\n        uint256 amountFreed;\r\n        (amountFreed, _loss) = liquidatePosition(_amountNeeded);\r\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\r\n        want.safeTransfer(msg.sender, amountFreed);\r\n        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\r\n    }\r\n\r\n    /**\r\n     * Do anything necessary to prepare this Strategy for migration, such as\r\n     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\r\n     * value.\r\n     */\r\n    function prepareMigration(address _newStrategy) internal virtual;\r\n\r\n    /**\r\n     * @notice\r\n     *  Transfers all `want` from this Strategy to `_newStrategy`.\r\n     *\r\n     *  This may only be called by the Vault.\r\n     * @dev\r\n     * The new Strategy's Vault must be the same as this Strategy's Vault.\r\n     *  The migration process should be carefully performed to make sure all\r\n     * the assets are migrated to the new address, which should have never\r\n     * interacted with the vault before.\r\n     * @param _newStrategy The Strategy to migrate to.\r\n     */\r\n    function migrate(address _newStrategy) external {\r\n        require(msg.sender == address(vault));\r\n        require(BaseStrategy(_newStrategy).vault() == vault);\r\n        prepareMigration(_newStrategy);\r\n        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Activates emergency exit. Once activated, the Strategy will exit its\r\n     *  position upon the next harvest, depositing all funds into the Vault as\r\n     *  quickly as is reasonable given on-chain conditions.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @dev\r\n     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\r\n     */\r\n    function setEmergencyExit() external onlyEmergencyAuthorized {\r\n        emergencyExit = true;\r\n        vault.revokeStrategy();\r\n\r\n        emit EmergencyExitEnabled();\r\n    }\r\n\r\n    /**\r\n     * Override this to add all tokens/tokenized positions this contract\r\n     * manages on a *persistent* basis (e.g. not just for swapping back to\r\n     * want ephemerally).\r\n     *\r\n     * NOTE: Do *not* include `want`, already included in `sweep` below.\r\n     *\r\n     * Example:\r\n     * ```\r\n     *    function protectedTokens() internal override view returns (address[] memory) {\r\n     *      address[] memory protected = new address[](3);\r\n     *      protected[0] = tokenA;\r\n     *      protected[1] = tokenB;\r\n     *      protected[2] = tokenC;\r\n     *      return protected;\r\n     *    }\r\n     * ```\r\n     */\r\n    function protectedTokens() internal view virtual returns (address[] memory);\r\n\r\n    /**\r\n     * @notice\r\n     *  Removes tokens from this Strategy that are not the type of tokens\r\n     *  managed by this Strategy. This may be used in case of accidentally\r\n     *  sending the wrong kind of token to this Strategy.\r\n     *\r\n     *  Tokens will be sent to `governance()`.\r\n     *\r\n     *  This will fail if an attempt is made to sweep `want`, or any tokens\r\n     *  that are protected by this Strategy.\r\n     *\r\n     *  This may only be called by governance.\r\n     * @dev\r\n     *  Implement `protectedTokens()` to specify any additional tokens that\r\n     *  should be protected from sweeping in addition to `want`.\r\n     * @param _token The token to transfer out of this vault.\r\n     */\r\n    function sweep(address _token) external onlyGovernance {\r\n        require(_token != address(want), \"!want\");\r\n        require(_token != address(vault), \"!shares\");\r\n\r\n        address[] memory _protectedTokens = protectedTokens();\r\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \"!protected\");\r\n\r\n        IERC20(_token).safeTransfer(governance(), IERC20(_token).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\n// Part: FlashLoanLib\r\n\r\nlibrary FlashLoanLib {\r\n\tusing SafeMath for uint256;\r\n\tevent Leverage(uint256 amountRequested, uint256 amountGiven, bool deficit, address flashLoan);\r\n\r\n\tuint256 constant private PRICE_DECIMALS = 1e6;\r\n\tuint256 constant private WETH_DECIMALS = 1e18;\r\n\tuint256 constant private COLLAT_RATIO_ETH = 0.74 ether;\r\n\taddress private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\taddress private constant WBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\r\n\tComptrollerI private constant COMP = ComptrollerI(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\r\n\tISoloMargin public constant SOLO = ISoloMargin(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);\r\n\tCEtherI public constant CETH = CEtherI(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\r\n\r\n\tfunction doDyDxFlashLoan(bool deficit, uint256 amountDesired, address want) public returns (uint256) {\r\n\t\tif(amountDesired == 0){\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// calculate amount of ETH we need\r\n\t\t(uint256 requiredETH, uint256 amountWant)= getFlashLoanParams(want, amountDesired); \r\n\r\n\t\t// Array of actions to be done during FlashLoan\r\n\t\tActions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\r\n\r\n\t\t// 1. Take FlashLoan\r\n\t\toperations[0] = _getWithdrawAction(0, requiredETH); // hardcoded market ID to 0 (ETH)\r\n\r\n\t\t// 2. Encode arguments of functions and create action for calling it \r\n\t\tbytes memory data = abi.encode(deficit, amountWant);\r\n\r\n\t\toperations[1] = _getCallAction(\r\n\t\t\tdata\r\n\t\t);\r\n\r\n\t\t// 3. Repay FlashLoan\r\n\t\toperations[2] = _getDepositAction(0, requiredETH.add(2));\r\n\r\n\t\t// Create Account Info\r\n\t\tAccount.Info[] memory accountInfos = new Account.Info[](1);\r\n\t\taccountInfos[0] = _getAccountInfo();\r\n\r\n\t\tSOLO.operate(accountInfos, operations);\r\n\r\n\t\temit Leverage(amountDesired, requiredETH, deficit, address(SOLO));\r\n\r\n\t\treturn amountWant; // we need to return the amount of Want we have changed our position in\r\n\t}\r\n\t\r\n\tfunction getFlashLoanParams(address want, uint256 amountDesired) internal returns (uint256 requiredETH, uint256 amountWant) {\r\n\t\t(uint256 priceETHWant, uint256 decimalsDifference, uint256 _requiredETH) = getPriceETHWant(want, amountDesired);\r\n\t\t// to avoid stack too deep\t\r\n\t\trequiredETH = _requiredETH;\r\n\t\tamountWant = amountDesired;\r\n\t\t// Not enough want in DyDx. So we take all we can\r\n\t\tuint256 dxdyLiquidity = IERC20(WETH).balanceOf(address(SOLO));\r\n\t\tif(requiredETH > dxdyLiquidity) {\r\n\t\t\trequiredETH = dxdyLiquidity;\r\n\t\t\t// NOTE: if we cap amountETH, we reduce amountWant we are taking too\r\n\t\t\tamountWant = requiredETH.mul(COLLAT_RATIO_ETH).div(priceETHWant).div(1e18).div(decimalsDifference);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getPriceETHWant(address want, uint256 amountDesired) internal returns (uint256 priceETHWant, uint256 decimalsDifference, uint256 requiredETH) {\r\n\t\tuint256 wantDecimals = 10 ** uint256(IERC20Extended(want).decimals());\r\n\t\tdecimalsDifference = WETH_DECIMALS > wantDecimals ? WETH_DECIMALS.div(wantDecimals) : wantDecimals.div(WETH_DECIMALS);\r\n\t\tif(want == WETH) {\r\n\t\t\trequiredETH = amountDesired.mul(1e18).div(COLLAT_RATIO_ETH);\r\n\t\t\tpriceETHWant = 1e6; // 1:1\r\n\t\t} else {\r\n\t\t\tpriceETHWant = getOraclePrice(WETH).mul(PRICE_DECIMALS).div(getOraclePrice(want));\r\n\t\t\t// requiredETH = desiredWantInETH / COLLAT_RATIO_ETH\r\n\t\t\t// desiredWBTCInETH = (desiredWant / priceETHWant)\r\n\t\t\t// NOTE: decimals need adjustment (e.g. BTC: 8 / ETH: 18)\r\n\t\t\trequiredETH = amountDesired.mul(PRICE_DECIMALS).mul(1e18).mul(decimalsDifference).div(priceETHWant).div(COLLAT_RATIO_ETH);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getOraclePrice(address token) internal returns (uint256) {\r\n\t\tstring memory symbol = IERC20Extended(token).symbol(); \r\n\t\t// Symbol for WBTC is BTC in oracle\r\n\t\tif(token == WBTC) {\r\n\t\t\tsymbol = \"BTC\";\r\n\t\t} else if (token == WETH) {\r\n\t\t\tsymbol = \"ETH\";\r\n\t\t}\r\n\t\tIUniswapAnchoredView oracle = IUniswapAnchoredView(COMP.oracle());\r\n\t\treturn oracle.price(symbol);\r\n\t}\r\n\r\n\tfunction loanLogic(\r\n\t\tbool deficit,\r\n\t\tuint256 amount,\r\n\t\tCErc20I cToken\r\n\t) public {\r\n\t\tuint256 wethBal = IERC20(WETH).balanceOf(address(this));\r\n\t\t// NOTE: weth balance should always be > amount/0.75\r\n\t\trequire(wethBal >= amount, \"!bal\"); // to stop malicious calls\r\n\r\n\t\tuint256 wethBalance = IERC20(WETH).balanceOf(address(this));\r\n\t\t// 0. Unwrap WETH\r\n\t\tIWETH(WETH).withdraw(wethBalance);\r\n\t\t// 1. Deposit ETH in Compound as collateral\r\n\t\t// will revert if it fails\r\n\t\tCETH.mint{value: wethBalance}();\r\n\r\n\t\t//if in deficit we repay amount and then withdraw\r\n\t\tif (deficit) {\r\n\t\t\t// 2a. if in deficit withdraw amount and repay it\r\n\t\t\trequire(cToken.redeemUnderlying(amount) == 0, \"!redeem_down\");\r\n\t\t\trequire(cToken.repayBorrow(IERC20(cToken.underlying()).balanceOf(address(this))) == 0, \"!repay_down\");\r\n\t\t} else {\r\n\t\t\t// 2b. if levering up borrow and deposit\r\n\t\t\trequire(cToken.borrow(amount) == 0, \"!borrow_up\");\r\n\t\t\trequire(cToken.mint(IERC20(cToken.underlying()).balanceOf(address(this))) == 0, \"!mint_up\");\r\n\t\t}\r\n\t\t// 3. Redeem collateral (ETH borrowed from DyDx) from Compound\r\n\t\trequire(CETH.redeemUnderlying(wethBalance) == 0, \"!redeem\");\r\n\t\t// 4. Wrap ETH into WETH\r\n\t\tIWETH(WETH).deposit{value: address(this).balance}();\r\n\r\n\t\t// NOTE: after this, WETH will be taken by DyDx\r\n\t}\r\n\r\n\tfunction _getAccountInfo() internal view returns (Account.Info memory) {\r\n\t\treturn Account.Info({owner: address(this), number: 1});\r\n\t}\r\n\r\n\tfunction _getWithdrawAction(uint256 marketId, uint256 amount) internal view returns (Actions.ActionArgs memory) {\r\n\t\treturn\r\n\t\tActions.ActionArgs({\r\n\t\t\tactionType: Actions.ActionType.Withdraw,\r\n\t\t\taccountId: 0,\r\n\t\t\tamount: Types.AssetAmount({\r\n\t\t\t\tsign: false,\r\n\t\t\t\tdenomination: Types.AssetDenomination.Wei,\r\n\t\t\t\tref: Types.AssetReference.Delta,\r\n\t\t\t\tvalue: amount\r\n\t\t\t}),\r\n\t\t\tprimaryMarketId: marketId,\r\n\t\t\tsecondaryMarketId: 0,\r\n\t\t\totherAddress: address(this),\r\n\t\t\totherAccountId: 0,\r\n\t\t\tdata: \"\"\r\n\t\t});\r\n\t}\r\n\r\n\tfunction _getCallAction(bytes memory data) internal view returns (Actions.ActionArgs memory) {\r\n\t\treturn\r\n\t\tActions.ActionArgs({\r\n\t\t\tactionType: Actions.ActionType.Call,\r\n\t\t\taccountId: 0,\r\n\t\t\tamount: Types.AssetAmount({sign: false, denomination: Types.AssetDenomination.Wei, ref: Types.AssetReference.Delta, value: 0}),\r\n\t\t\tprimaryMarketId: 0,\r\n\t\t\tsecondaryMarketId: 0,\r\n\t\t\totherAddress: address(this),\r\n\t\t\totherAccountId: 0,\r\n\t\t\tdata: data\r\n\t\t});\r\n\t}\r\n\r\n\tfunction _getDepositAction(uint256 marketId, uint256 amount) internal view returns (Actions.ActionArgs memory) {\r\n\t\treturn\r\n\t\tActions.ActionArgs({\r\n\t\t\tactionType: Actions.ActionType.Deposit,\r\n\t\t\taccountId: 0,\r\n\t\t\tamount: Types.AssetAmount({\r\n\t\t\t\tsign: true,\r\n\t\t\t\tdenomination: Types.AssetDenomination.Wei,\r\n\t\t\t\tref: Types.AssetReference.Delta,\r\n\t\t\t\tvalue: amount\r\n\t\t\t}),\r\n\t\t\tprimaryMarketId: marketId,\r\n\t\t\tsecondaryMarketId: 0,\r\n\t\t\totherAddress: address(this),\r\n\t\t\totherAccountId: 0,\r\n\t\t\tdata: \"\"\r\n\t\t});\r\n\t}\r\n}\r\n\r\n// Part: Strategy\r\n\r\n/********************\r\n *\r\n *   A lender optimisation strategy for any erc20 asset\r\n *   https://github.com/Grandthrax/yearnV2-generic-lender-strat\r\n *   v0.4.2\r\n *\r\n ********************* */\r\n\r\ncontract Strategy is BaseStrategy, ICallee {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    // @notice emitted when trying to do Flash Loan. flashLoan address is 0x00 when no flash loan used\r\n    event Leverage(uint256 amountRequested, uint256 amountGiven, bool deficit, address flashLoan);\r\n\r\n    // Comptroller address for compound.finance\r\n    ComptrollerI private constant compound = ComptrollerI(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\r\n\r\n    //Only three tokens we use\r\n    address private constant comp = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\r\n    address private constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    CErc20I public cToken;\r\n\r\n    bool public useUniV3;\r\n    // fee pool to use in UniV3 in basis points(default: 0.3% = 3000)\r\n    uint24 public compToWethSwapFee;\r\n    uint24 public wethToWantSwapFee;\r\n    IUniswapV2Router02 public currentV2Router;\r\n    IUniswapV2Router02 private constant UNI_V2_ROUTER =\r\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Router02 private constant SUSHI_V2_ROUTER =\r\n        IUniswapV2Router02(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\r\n    IUniswapV3Router private constant UNI_V3_ROUTER =\r\n        IUniswapV3Router(0xE592427A0AEce92De3Edee1F18E0157C05861564);\r\n    \r\n\r\n    uint256 public collateralTarget; // total borrow / total supply ratio we are targeting (100% = 1e18) \r\n    uint256 public blocksToLiquidationDangerZone; // minimum number of blocks before liquidation\r\n\r\n    uint256 public minWant; // minimum amount of want to act on\r\n\r\n    // Rewards handling\r\n    bool public dontClaimComp; // enable/disables COMP claiming\r\n    uint256 public minCompToSell; // minimum amount of COMP to be sold\r\n\r\n    bool public DyDxActive; // To deactivate flash loan provider if needed\r\n\r\n    bool public forceMigrate;\r\n\r\n    constructor(address _vault, address _cToken) public BaseStrategy(_vault) {\r\n        _initializeThis(_cToken);\r\n    }\r\n\r\n    function approveTokenMax(address token, address spender) internal {\r\n        IERC20(token).safeApprove(spender, type(uint256).max);\r\n    }\r\n\r\n    // To receive ETH from compound and WETH contract\r\n    receive() external payable {}\r\n\r\n    function name() external override view returns (string memory){\r\n        return \"GenLevCompV2\";\r\n    }\r\n\r\n    function initialize(\r\n        address _vault,\r\n        address _cToken\r\n    ) external {\r\n        _initialize(_vault, msg.sender, msg.sender, msg.sender);\r\n        _initializeThis(_cToken);\r\n    }\r\n\r\n    function _initializeThis(address _cToken) internal {\r\n        cToken = CErc20I(address(_cToken));\r\n\r\n        currentV2Router = SUSHI_V2_ROUTER;\r\n        \r\n        //pre-set approvals\r\n        approveTokenMax(comp, address(UNI_V2_ROUTER));\r\n        approveTokenMax(comp, address(SUSHI_V2_ROUTER));\r\n        approveTokenMax(comp, address(UNI_V3_ROUTER));\r\n        approveTokenMax(address(want), address(cToken));\r\n        approveTokenMax(weth, address(FlashLoanLib.SOLO));\r\n        // Enter Compound's ETH market to take it into account when using ETH as collateral\r\n        address[] memory markets = new address[](2);\r\n        markets[0] = address(FlashLoanLib.CETH);\r\n        markets[1] = address(cToken);\r\n        compound.enterMarkets(markets);\r\n\r\n        //comp speed is amount to borrow or deposit (so half the total distribution for want)\r\n        compToWethSwapFee = 3000;\r\n        wethToWantSwapFee = 3000;\r\n        // You can set these parameters on deployment to whatever you want\r\n        maxReportDelay = 86400; // once per 24 hours\r\n        profitFactor = 100; // multiple before triggering harvest\r\n\r\n        minCompToSell = 0.1 ether;\r\n        collateralTarget = 0.63 ether;\r\n        blocksToLiquidationDangerZone = 46500;\r\n        DyDxActive = true;\r\n    }\r\n\r\n    /*\r\n     * Control Functions\r\n     */\r\n    function setUniV3PathFees(uint24 _compToWethSwapFee, uint24 _wethToWantSwapFee) external management {\r\n        compToWethSwapFee = _compToWethSwapFee;\r\n        wethToWantSwapFee = _wethToWantSwapFee;\r\n    }\r\n\r\n    function setDontClaimComp(bool _dontClaimComp) external management {\r\n        dontClaimComp = _dontClaimComp;\r\n    }\r\n\r\n    function setUseUniV3(bool _useUniV3) external management {\r\n        useUniV3 = _useUniV3;\r\n    }\r\n\r\n    function setToggleV2Router() external management {\r\n        currentV2Router = currentV2Router == SUSHI_V2_ROUTER ? UNI_V2_ROUTER : SUSHI_V2_ROUTER;\r\n    }\r\n\r\n    function setDyDx(bool _dydx) external management {\r\n        DyDxActive = _dydx;\r\n    }\r\n\r\n    function setForceMigrate(bool _force) external onlyGovernance {\r\n        forceMigrate = _force;\r\n    }\r\n\r\n    function setMinCompToSell(uint256 _minCompToSell) external management {\r\n        minCompToSell = _minCompToSell;\r\n    }\r\n\r\n    function setMinWant(uint256 _minWant) external management {\r\n        minWant = _minWant;\r\n    }\r\n\r\n    function setCollateralTarget(uint256 _collateralTarget) external management {\r\n        (, uint256 collateralFactorMantissa, ) = compound.markets(address(cToken));\r\n        require(collateralFactorMantissa > _collateralTarget);\r\n        collateralTarget = _collateralTarget;\r\n    }\r\n\r\n    /*\r\n     * Base External Facing Functions\r\n     */\r\n    /*\r\n     * An accurate estimate for the total amount of assets (principle + return)\r\n     * that this strategy is currently managing, denominated in terms of want tokens.\r\n     */\r\n    function estimatedTotalAssets() public override view returns (uint256) {\r\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\r\n\r\n        uint256 _claimableComp = predictCompAccrued();\r\n        uint256 currentComp = balanceOfToken(comp);\r\n\r\n        // Use touch price. it doesnt matter if we are wrong as this is not used for decision making\r\n        uint256 estimatedWant =  priceCheck(comp, address(want),_claimableComp.add(currentComp));\r\n        uint256 conservativeWant = estimatedWant.mul(9).div(10); //10% pessimist\r\n\r\n        return balanceOfToken(address(want)).add(deposits).add(conservativeWant).sub(borrows);\r\n    }\r\n\r\n    function balanceOfToken(address token) internal view returns (uint256) {\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n    //predicts our profit at next report\r\n    function expectedReturn() public view returns (uint256) {\r\n        uint256 estimateAssets = estimatedTotalAssets();\r\n\r\n        uint256 debt = vault.strategies(address(this)).totalDebt;\r\n        if (debt > estimateAssets) {\r\n            return 0;\r\n        } else {\r\n            return estimateAssets.sub(debt);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Provide a signal to the keeper that `tend()` should be called.\r\n     * (keepers are always reimbursed by yEarn)\r\n     *\r\n     * NOTE: this call and `harvestTrigger` should never return `true` at the same time.\r\n     * tendTrigger should be called with same gasCost as harvestTrigger\r\n     */\r\n    function tendTrigger(uint256 gasCost) public override view returns (bool) {\r\n        if (harvestTrigger(gasCost)) {\r\n            //harvest takes priority\r\n            return false;\r\n        }\r\n\r\n        return getblocksUntilLiquidation() <= blocksToLiquidationDangerZone;\r\n    }\r\n\r\n\r\n    //WARNING. manipulatable and simple routing. Only use for safe functions\r\n    function priceCheck(address start, address end, uint256 _amount) public view returns (uint256) {\r\n        if (_amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256[] memory amounts = currentV2Router.getAmountsOut(_amount, getTokenOutPathV2(start, end));\r\n\r\n        return amounts[amounts.length - 1];\r\n    }\r\n\r\n    /*****************\r\n     * Public non-base function\r\n     ******************/\r\n\r\n    //Calculate how many blocks until we are in liquidation based on current interest rates\r\n    //WARNING does not include compounding so the estimate becomes more innacurate the further ahead we look\r\n    //equation. Compound doesn't include compounding for most blocks\r\n    //((deposits*colateralThreshold - borrows) / (borrows*borrowrate - deposits*colateralThreshold*interestrate));\r\n    function getblocksUntilLiquidation() public view returns (uint256) {\r\n        (, uint256 collateralFactorMantissa, ) = compound.markets(address(cToken));\r\n\r\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\r\n\r\n        uint256 borrrowRate = cToken.borrowRatePerBlock();\r\n\r\n        uint256 supplyRate = cToken.supplyRatePerBlock();\r\n\r\n        uint256 collateralisedDeposit1 = deposits.mul(collateralFactorMantissa).div(1e18);\r\n        uint256 collateralisedDeposit = collateralisedDeposit1;\r\n\r\n        uint256 denom1 = borrows.mul(borrrowRate);\r\n        uint256 denom2 = collateralisedDeposit.mul(supplyRate);\r\n\r\n        if (denom2 >= denom1) {\r\n            return type(uint256).max;\r\n        } else {\r\n            uint256 numer = collateralisedDeposit.sub(borrows);\r\n            uint256 denom = denom1.sub(denom2);\r\n            //minus 1 for this block\r\n            return numer.mul(1e18).div(denom);\r\n        }\r\n    }\r\n\r\n    // This function makes a prediction on how much comp is accrued\r\n    // It is not 100% accurate as it uses current balances in Compound to predict into the past\r\n    function predictCompAccrued() public view returns (uint256) {\r\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\r\n        if (deposits == 0) {\r\n            return 0; // should be impossible to have 0 balance and positive comp accrued\r\n        }\r\n\r\n        uint256 distributionPerBlockSupply = compound.compSupplySpeeds(address(cToken));\r\n        uint256 distributionPerBlockBorrow = compound.compBorrowSpeeds(address(cToken));\r\n        uint256 totalBorrow = cToken.totalBorrows();\r\n\r\n        //total supply needs to be echanged to underlying using exchange rate\r\n        uint256 totalSupplyCtoken = cToken.totalSupply();\r\n        uint256 totalSupply = totalSupplyCtoken.mul(cToken.exchangeRateStored()).div(1e18);\r\n\r\n        uint256 blockShareSupply = 0;\r\n        if(totalSupply > 0) {\r\n            blockShareSupply = deposits.mul(distributionPerBlockSupply).div(totalSupply);\r\n        }\r\n\r\n        uint256 blockShareBorrow = 0;\r\n        if(totalBorrow > 0) {\r\n            blockShareBorrow = borrows.mul(distributionPerBlockBorrow).div(totalBorrow);\r\n        }\r\n\r\n        //how much we expect to earn per block\r\n        uint256 blockShare = blockShareSupply.add(blockShareBorrow);\r\n\r\n        //last time we ran harvest\r\n        uint256 lastReport = vault.strategies(address(this)).lastReport;\r\n        uint256 blocksSinceLast= (block.timestamp.sub(lastReport)).div(13); //roughly 13 seconds per block\r\n\r\n        return blocksSinceLast.mul(blockShare);\r\n    }\r\n\r\n    //Returns the current position\r\n    //WARNING - this returns just the balance at last time someone touched the cToken token. Does not accrue interst in between\r\n    //cToken is very active so not normally an issue.\r\n    function getCurrentPosition() public view returns (uint256 deposits, uint256 borrows) {\r\n        (, uint256 ctokenBalance, uint256 borrowBalance, uint256 exchangeRate) = cToken.getAccountSnapshot(address(this));\r\n        borrows = borrowBalance;\r\n\r\n        deposits = ctokenBalance.mul(exchangeRate).div(1e18);\r\n    }\r\n\r\n    //statechanging version\r\n    function getLivePosition() public returns (uint256 deposits, uint256 borrows) {\r\n        deposits = cToken.balanceOfUnderlying(address(this));\r\n\r\n        //we can use non state changing now because we updated state with balanceOfUnderlying call\r\n        borrows = cToken.borrowBalanceStored(address(this));\r\n    }\r\n\r\n    //Same warning as above\r\n    function netBalanceLent() public view returns (uint256) {\r\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\r\n        return deposits.sub(borrows);\r\n    }\r\n\r\n    /***********\r\n     * internal core logic\r\n     *********** */\r\n    /*\r\n     * A core method.\r\n     * Called at beggining of harvest before providing report to owner\r\n     * 1 - claim accrued comp\r\n     * 2 - if enough to be worth it we sell\r\n     * 3 - because we lose money on our loans we need to offset profit from comp.\r\n     */\r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        override\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        ) \r\n    {\r\n        _profit = 0;\r\n        _loss = 0; //for clarity. also reduces bytesize\r\n\r\n        if (balanceOfToken(address(cToken)) == 0) {\r\n            uint256 wantBalance = balanceOfToken(address(want));\r\n            //no position to harvest\r\n            //but we may have some debt to return\r\n            //it is too expensive to free more debt in this method so we do it in adjust position\r\n            _debtPayment = Math.min(wantBalance, _debtOutstanding);\r\n            return (_profit, _loss, _debtPayment);\r\n        }\r\n\r\n        (uint256 deposits, uint256 borrows) = getLivePosition();\r\n\r\n        //claim comp accrued\r\n        _claimComp();\r\n        //sell comp\r\n        _disposeOfComp();\r\n\r\n        uint256 wantBalance = balanceOfToken(address(want));\r\n\r\n        uint256 investedBalance = deposits.sub(borrows);\r\n        uint256 balance = investedBalance.add(wantBalance);\r\n\r\n        uint256 debt = vault.strategies(address(this)).totalDebt;\r\n\r\n        //Balance - Total Debt is profit\r\n        if (balance > debt) {\r\n            _profit = balance.sub(debt);\r\n\r\n            if (wantBalance < _profit) {\r\n                //all reserve is profit\r\n                _profit = wantBalance;\r\n            } else if (wantBalance > _profit.add(_debtOutstanding)) {\r\n                _debtPayment = _debtOutstanding;\r\n            } else {\r\n                _debtPayment = wantBalance.sub(_profit);\r\n            }\r\n\r\n        } else {\r\n            //we will lose money until we claim comp then we will make money\r\n            //this has an unintended side effect of slowly lowering our total debt allowed\r\n            _loss = debt.sub(balance);\r\n            _debtPayment = Math.min(wantBalance, _debtOutstanding);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Second core function. Happens after report call.\r\n     *\r\n     * Similar to deposit function from V1 strategy\r\n     */\r\n\r\n    function adjustPosition(uint256 _debtOutstanding) internal override {\r\n        //emergency exit is dealt with in prepareReturn\r\n        if (emergencyExit) {\r\n            return;\r\n        }\r\n\r\n        //we are spending all our cash unless we have debt outstanding\r\n        uint256 _wantBal = balanceOfToken(address(want));\r\n        if(_wantBal < _debtOutstanding){\r\n            //this is graceful withdrawal. dont use backup\r\n            //we use more than 1 because withdrawunderlying causes problems with 1 token due to different decimals\r\n            if(balanceOfToken(address(cToken)) > 1){\r\n                _withdrawSome(_debtOutstanding.sub(_wantBal));\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        (uint256 position, bool deficit) = _calculateDesiredPosition(_wantBal - _debtOutstanding, true);\r\n\r\n        //if we are below minimun want change it is not worth doing\r\n        //need to be careful in case this pushes to liquidation\r\n        if (position > minWant) {\r\n            //if dydx is not active we just try our best with basic leverage\r\n            if (!DyDxActive) {\r\n                uint i = 0;\r\n                while(position > 0){\r\n                    position = position.sub(_noFlashLoan(position, deficit));\r\n                    if(i >= 6){\r\n                        break;\r\n                    }\r\n                    i++;\r\n                }\r\n            } else {\r\n                //if there is huge position to improve we want to do normal leverage. it is quicker\r\n                if (position > want.balanceOf(address(FlashLoanLib.SOLO))) {\r\n                    position = position.sub(_noFlashLoan(position, deficit));\r\n                }\r\n\r\n                //flash loan to position\r\n                if(position > minWant){\r\n                    doDyDxFlashLoan(deficit, position);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /*************\r\n     * Very important function\r\n     * Input: amount we want to withdraw and whether we are happy to pay extra for Aave.\r\n     *       cannot be more than we have\r\n     * Returns amount we were able to withdraw. notall if user has some balance left\r\n     *\r\n     * Deleverage position -> redeem our cTokens\r\n     ******************** */\r\n    function _withdrawSome(uint256 _amount) internal returns (bool notAll) {\r\n        (uint256 position, bool deficit) = _calculateDesiredPosition(_amount, false);\r\n\r\n        //If there is no deficit we dont need to adjust position\r\n        //if the position change is tiny do nothing\r\n        if (deficit && position > minWant) {\r\n            //we do a flash loan to give us a big gap. from here on out it is cheaper to use normal deleverage. Use Aave for extremely large loans\r\n            if (DyDxActive) {\r\n                position = position.sub(doDyDxFlashLoan(deficit, position));\r\n            }\r\n\r\n            uint8 i = 0;\r\n            //position will equal 0 unless we haven't been able to deleverage enough with flash loan\r\n            //if we are not in deficit we dont need to do flash loan\r\n            while (position > minWant.add(100)) {\r\n                position = position.sub(_noFlashLoan(position, true));\r\n                i++;\r\n\r\n                //A limit set so we don't run out of gas\r\n                if (i >= 5) {\r\n                    notAll = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        //now withdraw\r\n        //if we want too much we just take max\r\n\r\n        //This part makes sure our withdrawal does not force us into liquidation\r\n        (uint256 depositBalance, uint256 borrowBalance) = getCurrentPosition();\r\n\r\n        uint256 tempColla = collateralTarget;\r\n\r\n        uint256 reservedAmount = 0;\r\n        if(tempColla == 0){\r\n            tempColla = 1e15; // 0.001 * 1e18. lower we have issues\r\n        }\r\n\r\n        reservedAmount = borrowBalance.mul(1e18).div(tempColla);\r\n\r\n        if(depositBalance >= reservedAmount){\r\n            uint256 redeemable = depositBalance.sub(reservedAmount);\r\n\r\n            if (redeemable < _amount) {\r\n                cToken.redeemUnderlying(redeemable);\r\n\r\n            } else {\r\n                cToken.redeemUnderlying(_amount);\r\n            }\r\n        }\r\n\r\n        if(collateralTarget == 0 && balanceOfToken(address(want)) > borrowBalance){\r\n            cToken.repayBorrow(borrowBalance);\r\n        }\r\n    }\r\n\r\n    /***********\r\n     *  This is the main logic for calculating how to change our lends and borrows\r\n     *  Input: balance. The net amount we are going to deposit/withdraw.\r\n     *  Input: dep. Is it a deposit or withdrawal\r\n     *  Output: position. The amount we want to change our current borrow position.\r\n     *  Output: deficit. True if we are reducing position size\r\n     *\r\n     *  For instance deficit =false, position 100 means increase borrowed balance by 100\r\n     ****** */\r\n    function _calculateDesiredPosition(uint256 balance, bool dep) internal returns (uint256 position, bool deficit) {\r\n        //we want to use statechanging for safety\r\n        (uint256 deposits, uint256 borrows) = getLivePosition();\r\n\r\n        //When we unwind we end up with the difference between borrow and supply\r\n        uint256 unwoundDeposit = deposits.sub(borrows);\r\n\r\n        //we want to see how close to collateral target we are.\r\n        //So we take our unwound deposits and add or remove the balance we are are adding/removing.\r\n        //This gives us our desired future undwoundDeposit (desired supply)\r\n\r\n        uint256 desiredSupply = 0;\r\n        if (dep) {\r\n            desiredSupply = unwoundDeposit.add(balance);\r\n        } else {\r\n            if(balance > unwoundDeposit) balance = unwoundDeposit;\r\n            desiredSupply = unwoundDeposit.sub(balance);\r\n        }\r\n\r\n        //(ds *c)/(1-c)\r\n        uint256 num = desiredSupply.mul(collateralTarget);\r\n        uint256 den = uint256(1e18).sub(collateralTarget);\r\n\r\n        uint256 desiredBorrow = num.div(den);\r\n        if (desiredBorrow > 1e5) {\r\n            //stop us going right up to the wire\r\n            desiredBorrow = desiredBorrow.sub(1e5);\r\n        }\r\n\r\n        //now we see if we want to add or remove balance\r\n        // if the desired borrow is less than our current borrow we are in deficit. so we want to reduce position\r\n        if (desiredBorrow < borrows) {\r\n            deficit = true;\r\n            position = borrows.sub(desiredBorrow); //safemath check done in if statement\r\n        } else {\r\n            //otherwise we want to increase position\r\n            deficit = false;\r\n            position = desiredBorrow.sub(borrows);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Liquidate as many assets as possible to `want`, irregardless of slippage,\r\n     * up to `_amount`. Any excess should be re-invested here as well.\r\n     */\r\n    function liquidatePosition(uint256 _amountNeeded) internal override returns (uint256 _amountFreed, uint256 _loss) {\r\n        uint256 _balance = balanceOfToken(address(want));\r\n        uint256 assets = netBalanceLent().add(_balance);\r\n\r\n        uint256 debtOutstanding = vault.debtOutstanding();\r\n\r\n        if(debtOutstanding > assets){\r\n            _loss = debtOutstanding.sub(assets);\r\n        }\r\n\r\n        if (assets < _amountNeeded) {\r\n            //if we cant afford to withdraw we take all we can\r\n            //withdraw all we can\r\n            (uint256 deposits, uint256 borrows) = getLivePosition();\r\n\r\n            //1 token causes rounding error with withdrawUnderlying\r\n            if(balanceOfToken(address(cToken)) > 1){\r\n                _withdrawSome(deposits.sub(borrows));\r\n            }\r\n\r\n            _amountFreed = Math.min(_amountNeeded, balanceOfToken(address(want)));\r\n\r\n        } else {\r\n            if (_balance < _amountNeeded) {\r\n                _withdrawSome(_amountNeeded.sub(_balance));\r\n\r\n                //overflow error if we return more than asked for\r\n                _amountFreed = Math.min(_amountNeeded, balanceOfToken(address(want)));\r\n            }else{\r\n                _amountFreed = _amountNeeded;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _claimComp() internal {\r\n        if(dontClaimComp) {\r\n            return;\r\n        }\r\n        CTokenI[] memory tokens = new CTokenI[](1);\r\n        tokens[0] = cToken;\r\n\t\r\n        compound.claimComp(address(this), tokens);\r\n    }\r\n\r\n    //sell comp function\r\n    function _disposeOfComp() internal {\r\n        uint256 _comp = balanceOfToken(comp);\r\n        if (_comp < minCompToSell) {\r\n            return;\r\n        }\r\n\r\n        if (useUniV3) {\r\n            UNI_V3_ROUTER.exactInput(\r\n                IUniswapV3Router.ExactInputParams(\r\n                    getTokenOutPathV3(comp, address(want)),\r\n                    address(this),\r\n                    now,\r\n                    _comp,\r\n                    0\r\n                )\r\n            );\r\n        } else {\r\n            currentV2Router.swapExactTokensForTokens(\r\n                _comp,\r\n                0,\r\n                getTokenOutPathV2(comp, address(want)),\r\n                address(this),\r\n                now\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    function getTokenOutPathV2(address _tokenIn, address _tokenOut)\r\n        internal\r\n        pure\r\n        returns (address[] memory _path)\r\n    {\r\n        bool isWeth =\r\n            _tokenIn == address(weth) || _tokenOut == address(weth);\r\n        _path = new address[](isWeth ? 2 : 3);\r\n        _path[0] = _tokenIn;\r\n\r\n        if (isWeth) {\r\n            _path[1] = _tokenOut;\r\n        } else {\r\n            _path[1] = address(weth);\r\n            _path[2] = _tokenOut;\r\n        }\r\n    }\r\n\r\n    function getTokenOutPathV3(address _tokenIn, address _tokenOut)\r\n        internal\r\n        view\r\n        returns (bytes memory _path)\r\n    {\r\n        if (address(want) == weth) {\r\n            _path = abi.encodePacked(\r\n                address(_tokenIn),\r\n                compToWethSwapFee,\r\n                address(weth)\r\n            );\r\n        } else {\r\n            _path = abi.encodePacked(\r\n                address(_tokenIn),\r\n                compToWethSwapFee,\r\n                address(weth),\r\n                wethToWantSwapFee,\r\n                address(_tokenOut)\r\n            );\r\n        }\r\n    }\r\n\r\n    //lets leave\r\n    //if we can't deleverage in one go set collateralFactor to 0 and call harvest multiple times until delevered\r\n    function prepareMigration(address _newStrategy) internal override {\r\n\r\n        if(!forceMigrate){\r\n            (uint256 deposits, uint256 borrows) = getLivePosition();\r\n            _withdrawSome(deposits.sub(borrows));\r\n\r\n            (, , uint256 borrowBalance, ) = cToken.getAccountSnapshot(address(this));\r\n\r\n            require(borrowBalance < 10_000);\r\n\r\n            IERC20 _comp = IERC20(comp);\r\n            uint _compB = balanceOfToken(address(_comp));\r\n            if(_compB > 0){\r\n                _comp.safeTransfer(_newStrategy, _compB);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Three functions covering normal leverage and deleverage situations\r\n    // max is the max amount we want to increase our borrowed balance\r\n    // returns the amount we actually did\r\n    function _noFlashLoan(uint256 max, bool deficit) internal returns (uint256 amount) {\r\n        //we can use non-state changing because this function is always called after _calculateDesiredPosition\r\n        (uint256 lent, uint256 borrowed) = getCurrentPosition();\r\n\r\n        //if we have nothing borrowed then we can't deleverage any more\r\n        if (borrowed == 0 && deficit) {\r\n            return 0;\r\n        }\r\n\r\n        (, uint256 collateralFactorMantissa, ) = compound.markets(address(cToken));\r\n\r\n        if (deficit) {\r\n            amount = _normalDeleverage(max, lent, borrowed, collateralFactorMantissa);\r\n        } else {\r\n            amount = _normalLeverage(max, lent, borrowed, collateralFactorMantissa);\r\n        }\r\n\r\n        emit Leverage(max, amount, deficit, address(0));\r\n    }\r\n\r\n    //maxDeleverage is how much we want to reduce by\r\n    function _normalDeleverage(\r\n        uint256 maxDeleverage,\r\n        uint256 lent,\r\n        uint256 borrowed,\r\n        uint256 collatRatio\r\n    ) internal returns (uint256 deleveragedAmount) {\r\n        uint256 theoreticalLent = 0;\r\n\r\n        //collat ration should never be 0. if it is something is very wrong... but just incase\r\n        if(collatRatio != 0){\r\n            theoreticalLent = borrowed.mul(1e18).div(collatRatio);\r\n        }\r\n        deleveragedAmount = lent.sub(theoreticalLent);\r\n\r\n        if (deleveragedAmount >= borrowed) {\r\n            deleveragedAmount = borrowed;\r\n        }\r\n        if (deleveragedAmount >= maxDeleverage) {\r\n            deleveragedAmount = maxDeleverage;\r\n        }\r\n        uint256 exchangeRateStored = cToken.exchangeRateStored();\r\n        //redeemTokens = redeemAmountIn *1e18 / exchangeRate. must be more than 0\r\n        //a rounding error means we need another small addition\r\n        if(deleveragedAmount.mul(1e18) >= exchangeRateStored && deleveragedAmount > 10){\r\n            deleveragedAmount = deleveragedAmount.sub(uint256(10));\r\n            cToken.redeemUnderlying(deleveragedAmount);\r\n\r\n            //our borrow has been increased by no more than maxDeleverage\r\n            cToken.repayBorrow(deleveragedAmount);\r\n        }\r\n    }\r\n\r\n    //maxDeleverage is how much we want to increase by\r\n    function _normalLeverage(\r\n        uint256 maxLeverage,\r\n        uint256 lent,\r\n        uint256 borrowed,\r\n        uint256 collatRatio\r\n    ) internal returns (uint256 leveragedAmount) {\r\n        uint256 theoreticalBorrow = lent.mul(collatRatio).div(1e18);\r\n\r\n        leveragedAmount = theoreticalBorrow.sub(borrowed);\r\n\r\n        if (leveragedAmount >= maxLeverage) {\r\n            leveragedAmount = maxLeverage;\r\n        }\r\n        if(leveragedAmount > 10){\r\n            leveragedAmount = leveragedAmount.sub(uint256(10));\r\n            cToken.borrow(leveragedAmount);\r\n            cToken.mint(balanceOfToken(address(want)));\r\n        }\r\n\r\n    }\r\n\r\n    //emergency function that we can use to deleverage manually if something is broken\r\n    function manualDeleverage(uint256 amount) external management{\r\n        require(cToken.redeemUnderlying(amount) == 0);\r\n        require(cToken.repayBorrow(amount) == 0);\r\n    }\r\n    //emergency function that we can use to deleverage manually if something is broken\r\n    function manualReleaseWant(uint256 amount) external onlyGovernance{\r\n        require(cToken.redeemUnderlying(amount) ==0);\r\n    }\r\n\r\n    function protectedTokens() internal override view returns (address[] memory) {\r\n    }\r\n\r\n    /******************\r\n     * Flash loan stuff\r\n     ****************/\r\n\r\n    // Flash loan DXDY\r\n    // amount desired is how much we are willing for position to change\r\n    function doDyDxFlashLoan(bool deficit, uint256 amountDesired) internal returns (uint256) {\r\n        return FlashLoanLib.doDyDxFlashLoan(deficit, amountDesired, address(want));\r\n    }\r\n\r\n    //returns our current collateralisation ratio. Should be compared with collateralTarget\r\n    function storedCollateralisation() public view returns (uint256 collat) {\r\n        (uint256 lend, uint256 borrow) = getCurrentPosition();\r\n        if (lend == 0) {\r\n            return 0;\r\n        }\r\n        collat = uint256(1e18).mul(borrow).div(lend);\r\n    }\r\n\r\n    //DyDx calls this function after doing flash loan\r\n    function callFunction(\r\n        address sender,\r\n        Account.Info memory account,\r\n        bytes memory data\r\n    ) public override {\r\n        (bool deficit, uint256 amount) = abi.decode(data, (bool, uint256));\r\n        require(msg.sender == address(FlashLoanLib.SOLO));\r\n        require(sender == address(this));\r\n\r\n        FlashLoanLib.loanLogic(deficit, amount, cToken);\r\n    }\r\n\r\n    // -- Internal Helper functions -- //\r\n\r\n    function ethToWant(uint256 _amtInWei) public view override returns (uint256) {\r\n        return priceCheck(weth, address(want), _amtInWei);\r\n    }\r\n\r\n    function liquidateAllPositions() internal override returns (uint256 _amountFreed) {\r\n        (_amountFreed,) = liquidatePosition(vault.debtOutstanding());\r\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\r\n\r\n        uint256 position = deposits.sub(borrows);\r\n\r\n        //we want to revert if we can't liquidateall\r\n        if(!forceMigrate) {\r\n          require(position < minWant);\r\n        }\r\n    }\r\n\r\n    function mgtm_check() internal {\r\n      require(msg.sender == governance() || msg.sender == vault.management() || msg.sender == strategist);\r\n    }\r\n\r\n    modifier management() {\r\n        mgtm_check();\r\n        _;\r\n    }\r\n}\r\n\r\n// File: LevCompFactory.sol\r\n\r\ncontract LevCompFactory {\r\n    address public immutable original;\r\n\r\n    event Cloned(address indexed clone);\r\n    event Deployed(address indexed original);\r\n\r\n    constructor(\r\n        address _vault,\r\n        address _cToken\r\n    ) public {\r\n        Strategy _original = new Strategy(_vault, _cToken);\r\n        emit Deployed(address(_original));\r\n\r\n        original = address(_original);\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return string(abi.encodePacked(\"Factory\", Strategy(payable(original)).name(), \"@\", Strategy(payable(original)).apiVersion()));\r\n    }\r\n\r\n    function cloneLevComp(\r\n        address _vault,\r\n        address _cToken\r\n    ) external returns (address payable newStrategy) {\r\n        // Copied from https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol\r\n        bytes20 addressBytes = bytes20(original);\r\n        assembly {\r\n            // EIP-1167 bytecode\r\n            let clone_code := mload(0x40)\r\n            mstore(\r\n                clone_code,\r\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\r\n            )\r\n            mstore(add(clone_code, 0x14), addressBytes)\r\n            mstore(\r\n                add(clone_code, 0x28),\r\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n            )\r\n            newStrategy := create(0, clone_code, 0x37)\r\n        }\r\n\r\n        Strategy(newStrategy).initialize(_vault, _cToken);\r\n\r\n        emit Cloned(newStrategy);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRequested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGiven\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"deficit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"flashLoan\",\"type\":\"address\"}],\"name\":\"Leverage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CETH\",\"outputs\":[{\"internalType\":\"contract CEtherI\",\"name\":\"\",\"type\":\"CEtherI\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLO\",\"outputs\":[{\"internalType\":\"contract ISoloMargin\",\"name\":\"\",\"type\":\"ISoloMargin\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FlashLoanLib","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://85eac413634da79bc0c6c9a095900db9e4b415c3b99d15f0887bdf9d0bf24535"}]}