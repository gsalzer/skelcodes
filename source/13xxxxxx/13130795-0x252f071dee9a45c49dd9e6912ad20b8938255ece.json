{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract EtherRock {\r\n    function getRockInfo (uint rockNumber) virtual public returns (address, bool, uint, uint);\r\n    function buyRock (uint rockNumber) virtual public payable;\r\n    function sellRock (uint rockNumber, uint price) virtual public;\r\n    function giftRock (uint rockNumber, address receiver) virtual public;\r\n}\r\n\r\ncontract RockHelperV1 {\r\n    address payable owner;\r\n    EtherRock etherRock = EtherRock(0x37504AE0282f5f334ED29b4548646f887977b7cC);\r\n\r\n    constructor () {\r\n        owner = payable(msg.sender);\r\n    }\r\n    \r\n    event PurchaseRock(address purchaser, uint256 rockId, uint256 rockPrice);\r\n\r\n    function buy(uint256[] memory ids) public payable {\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            address rockOwner;\r\n            bool rockCanBid;\r\n            uint256 rockPrice;\r\n            uint256 rockTimeSold;\r\n            (rockOwner, rockCanBid, rockPrice, rockTimeSold) = etherRock.getRockInfo(ids[i]);\r\n\r\n            etherRock.buyRock{value: rockPrice}(ids[i]);\r\n            etherRock.sellRock(ids[i], type(uint256).max);\r\n            etherRock.giftRock(ids[i], msg.sender);\r\n            \r\n            emit PurchaseRock(msg.sender, ids[i], rockPrice);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function tip() external payable {}\r\n\r\n    function withdraw() external {\r\n        require(msg.sender == owner, \"Not owner!\");\r\n        owner.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rockPrice\",\"type\":\"uint256\"}],\"name\":\"PurchaseRock\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tip\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"RockHelperV1","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a4f39494afeee39925c311dcd817bda74b96976562f16e9bc7adb725ad127c6a"}]}