{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string internal _name;\r\n\r\n    // Token symbol\r\n    string internal _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface for the NFT Royalty Standard\r\n */\r\ninterface IERC2981 is IERC165 {\r\n    /** \r\n     * ERC165 bytes to add to interface array - set in parent contract\r\n     * implementing this standard\r\n     *\r\n     * bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\r\n     * bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\r\n     * _registerInterface(_INTERFACE_ID_ERC2981);\r\n     */\r\n\r\n    /**\r\n     * @notice Called with the sale price to determine how much royalty\r\n     *          is owed and to whom.\r\n     * @param _tokenId - the NFT asset queried for royalty information\r\n     * @param _salePrice - the sale price of the NFT asset specified by _tokenId\r\n     * @return receiver - address of who should be sent the royalty payment\r\n     * @return royaltyAmount - the royalty payment amount for _salePrice\r\n     */\r\n    function royaltyInfo(\r\n        uint256 _tokenId,\r\n        uint256 _salePrice\r\n    ) external view returns (\r\n        address receiver,\r\n        uint256 royaltyAmount\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev External interface of the EaselyPayout contract\r\n */\r\ninterface IEaselyPayout {\r\n    /**\r\n     * @dev Takes in a payable amount and splits it among the given royalties. \r\n     * Also takes a cut of the payable amount depending on the sender and the primaryPayout address.\r\n     * Ensures that this method never splits over 100% of the payin amount.\r\n     */\r\n    function splitPayable(address primaryPayout, address[] memory royalties, uint256[] memory bps) external payable;\r\n}\r\n\r\n/** \r\n * @dev Extension of the ERC721Enumerable contract that integrates a marketplace so that simple lazy-sales\r\n * and auctions do not have to be done on another contract. This saves gas fees on secondary sales because\r\n * buyers will not have to pay a gas fee to setApprovalForAll for another marketplace contract after buying.\r\n *\r\n * Easely will help power the lazy-selling and auctions as well as lazy minting that take place on \r\n * directly on the collection, which is why we take a cut of these transactions. Our cut can \r\n * be publically seen in the connected EaselyPayout contract.\r\n */\r\nabstract contract EaselyMarketplaceCollection is ERC721Enumerable, Ownable {\r\n    using ECDSA for bytes32;\r\n    using Strings for uint256;\r\n\r\n    /**\r\n     * @dev Auction structure that includes:\r\n     * \r\n     * @param address topBidder - Current top bidder who has already paid the price param below. Is\r\n     *        initialized with address(0) when there have been no bids. When a bidder gets outBid,\r\n     *        the old topBidder will get the price they paid returned.\r\n     * @param uint256 price - Current top price paid by the topBidder.\r\n     * @param uint256 startTimestamp - When the auction can start getting bidded on.\r\n     * @param uint256 endTimestamp - When the auction can no longer get bid on.\r\n     * @param uint256 minBidIncrement - The minimum each new bid has to be greater than the previous\r\n     *        bid in order to be the next topBidder.\r\n     * @param uint256 minLastBidDuration - The minimum time each bid must hold the highest price before\r\n     *        the auction can settle. If people keep bidding, the auction can last for much longer than \r\n     *        the initial endTimestamp, and endTimestamp will continually be updated.\r\n     */\r\n    struct Auction {\r\n        address topBidder;\r\n        uint256 tokenId;\r\n        uint256 price;\r\n        uint256 startTimestamp;\r\n        uint256 endTimestamp;\r\n        uint256 minBidIncrement;\r\n        uint256 minLastBidDuration;\r\n    }\r\n\r\n    /* see {IEaselyPayout} for more */\r\n    address public payoutContractAddress;\r\n    /* Let's the owner enable another address to lazy mint */\r\n    address public alternateSignerAddress;\r\n    uint256 internal nextAuctionId;\r\n    uint256 public timePerDecrement;\r\n\r\n    uint256 public constant maxRoyaltiesBPS = 9500;\r\n    /* Optional basis points for the owner for secondary sales of this collection */\r\n    uint256 public constant maxSecondaryBPS = 1000;\r\n    \r\n    /* Optional basis points for the owner for secondary sales of this collection */\r\n    uint256 public secondaryOwnerBPS;\r\n    /* Optional addresses to distribute royalties for primary sales of this collection */\r\n    address[] public royalties;\r\n    /* Optional basis points for above royalties addresses for primary sales of this collection */\r\n    uint256[] public royaltiesBPS;\r\n\r\n    /* Mapping if a tokenId has an active auction or not */\r\n    mapping(uint256 => uint256) private _tokenIdToAuctionId;\r\n    /* Mapping for all auctions that have happened. */\r\n    mapping(uint256 => Auction) private _auctionIdToAuction;\r\n\r\n    /* Mapping to the active version for all signed transactions */\r\n    mapping(address => uint256) internal _addressToActiveVersion;\r\n    /* Cancelled or finalized sales by hash to determine buyabliity */\r\n    mapping(bytes32 => bool) internal _cancelledOrFinalizedSales;\r\n\r\n    // Events related to an auction\r\n    event AuctionCreated(uint256 indexed auctionId, uint256 indexed tokenId, uint256 startingPrice, uint256 startingTimestamp, uint256 endingTimestamp, uint256 minBidIncrement, uint256 minLastBidDuration, address indexed seller);\r\n    event AuctionTimeAltered(uint256 indexed auctionId, uint256 indexed tokenId, uint256 startTime, uint256 endTime, address indexed seller);\r\n    event AuctionCancelled(uint256 indexed auctionId, uint256 indexed tokenId, address indexed seller);\r\n    event AuctionBidded(uint256 indexed auctionId, uint256 indexed tokenId, uint256 newPrice, uint256 timestamp, address indexed bidder);\r\n    event AuctionSettled(uint256 indexed auctionId, uint256 indexed tokenId, uint256 price, address buyer, address indexed seller);\r\n\r\n    // Events related to lazy selling\r\n    event SaleCancelled(address indexed seller, bytes32 hash);\r\n    event SaleCompleted(uint256 indexed tokenId, uint256 price, address indexed seller, address indexed buyer, bytes32 hash);\r\n\r\n    // Miscellaneous events\r\n    event VersionChanged(address indexed seller, uint256 version);\r\n    event AltSignerChanged(address newSigner);\r\n    \r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId \r\n            || interfaceId == type(Ownable).interfaceId\r\n            || interfaceId == type(IERC2981).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev see {IERC2981-supportsInterface}\r\n     */\r\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view returns (address receiver, uint256 royaltyAmount) {\r\n        uint256 royalty = _salePrice * secondaryOwnerBPS / 10000;\r\n        return (owner(), royalty);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current auction variables for a tokenId if the auction is present\r\n     */\r\n    function getAuctionForTokenId(uint256 tokenId) external view returns (Auction memory) {\r\n        // _getAuctionId will error if token is not on an auction\r\n        uint256 auctionId = _getAuctionId(tokenId);\r\n\r\n        return _auctionIdToAuction[auctionId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {_getAuctionId}\r\n     */\r\n    function getAuctionId(uint256 tokenId) external view returns (uint256) {\r\n        return _getAuctionId(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current auction variables for a tokenId if the auction is present\r\n     */\r\n    function getAuction(uint256 auctionId) external view returns (Auction memory) {\r\n        require(_auctionIdToAuction[auctionId].minBidIncrement != 0, \"This auction does not exist\");\r\n        return _auctionIdToAuction[auctionId];\r\n    }\r\n\r\n    /** \r\n     * @dev See {_currentPrice}\r\n     */\r\n    function getCurrentPrice(uint256[4] memory pricesAndTimestamps) external view returns (uint256) {\r\n        return _currentPrice(pricesAndTimestamps);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current activeVersion of an address both used to create signatures\r\n     * and to verify signatures of {buyToken} and {buyNewToken}\r\n     */\r\n    function getActiveVersion(address address_) external view returns (uint256) {\r\n        return _addressToActiveVersion[address_];\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to change who the alternate signer is \r\n     */\r\n    function setAltSigner(address alt) external onlyOwner {\r\n        alternateSignerAddress = alt;\r\n        emit AltSignerChanged(alt);\r\n    }\r\n\r\n    /**\r\n     * @dev see {_setRoyalties}\r\n     */\r\n    function setRoyalties(address[4] memory newRoyalties, uint256[4] memory bps) external onlyOwner {\r\n        _setRoyalties(newRoyalties, bps);\r\n    }\r\n\r\n    /**\r\n     * @dev see {_setSecondary}\r\n     */\r\n    function setSecondaryBPS(uint256 bps) external onlyOwner() {\r\n        _setSecondary(bps);\r\n    }\r\n\r\n    /**\r\n     * @dev Usable by any user to update the version that they want their signatures to check. This is helpful if\r\n     * an address wants to mass invalidate their signatures without having to call cancelSale on each one.\r\n     */\r\n    function updateVersion(uint256 version) external {\r\n        _addressToActiveVersion[_msgSender()] = version;\r\n        emit VersionChanged(_msgSender(), version);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates an auction for a token and locks it from being transferred until the auction ends\r\n     * the auction can end if the endTimestamp has been reached and can be cancelled prematurely if\r\n     * there has been no bids yet.\r\n     *\r\n     * @param tokenId uint256 for the token to put on auction. Must exist and be on the auction already\r\n     * @param startingPrice uint256 for the starting price an interested owner must bid\r\n     * @param startingTimestamp uint256 for when the auction can start taking bids\r\n     * @param endingTimestamp uint256 for when the auction has concluded and can no longer take bids\r\n     * @param minBidIncrement uint256 the minimum each interested owner must bid over the latest bid\r\n     * @param minLastBidDuration uint256 the minimum time a bid needs to be live before the auction can end.\r\n     *        this means that an auction can extend past its original endingTimestamp\r\n     */\r\n    function createAuction(\r\n        uint256 tokenId,\r\n        uint256 startingPrice,\r\n        uint256 startingTimestamp,\r\n        uint256 endingTimestamp,\r\n        uint256 minBidIncrement,\r\n        uint256 minLastBidDuration\r\n    ) external {\r\n        require(endingTimestamp > block.timestamp, \"Cannot create an auction in the past\");\r\n        require(!_onAuction(tokenId), \"Token is already on auction\");\r\n        require(minBidIncrement > 0, \"Min bid must be a positive number\");\r\n        require(_msgSender() == ownerOf(tokenId), \"Must own token to create auction\");\r\n\r\n        Auction memory auction = Auction(address(0), tokenId, startingPrice, startingTimestamp, endingTimestamp, minBidIncrement, minLastBidDuration);\r\n        // This locks the token from being sold\r\n        _tokenIdToAuctionId[tokenId] = nextAuctionId;\r\n        _auctionIdToAuction[nextAuctionId] = auction;\r\n        \r\n        emit AuctionCreated(nextAuctionId, tokenId, startingPrice, startingTimestamp, endingTimestamp, minBidIncrement, minLastBidDuration, ownerOf(tokenId));\r\n        nextAuctionId += 1;\r\n    }\r\n\r\n    /** \r\n     * @dev Lets the token owner alter the start and end time of an auction in case they want to \r\n     * end an auction early, extend the auction, or start it early. \r\n     * \r\n     * Changes to endTime can only be made when the auction is not within a minLastBidDuration from ending.\r\n     * Changes to startTime can only be made when the auction has not yet started.\r\n     */\r\n    function alterAuctionTime(uint256 tokenId, uint256 startTime, uint256 endTime) external {\r\n        // _getAuctionId will error if token is not on an auction\r\n        uint256 auctionId = _getAuctionId(tokenId);\r\n        uint256 time = block.timestamp;\r\n\r\n        require(_msgSender() == ownerOf(tokenId), \"Only token owner can alter end time\");\r\n        Auction memory auction = _auctionIdToAuction[auctionId];\r\n        require(auction.endTimestamp > time + auction.minLastBidDuration, \"Auction has ended or is close to ending\");\r\n\r\n        // if the auction has already started we cannot change the start time\r\n        if (auction.startTimestamp > time) {\r\n            auction.startTimestamp = startTime;\r\n        }\r\n        auction.endTimestamp = endTime;\r\n\r\n        _auctionIdToAuction[auctionId] = auction;\r\n        emit AuctionTimeAltered(auctionId, tokenId, startTime, endTime, ownerOf(tokenId));\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the token owner to cancel an auction that does not yet have a bid.\r\n     */\r\n    function cancelAuction(uint256 tokenId) external {\r\n        // _getAuctionId will error if token is not on an auction\r\n        uint256 auctionId = _getAuctionId(tokenId);\r\n\r\n        require(_msgSender() == ownerOf(tokenId), \"Only token owner can cancel auction\");\r\n        require(_auctionIdToAuction[auctionId].topBidder == address(0), \"Cannot cancel an auction with a bid\");\r\n\r\n        _tokenIdToAuctionId[tokenId] = 0;\r\n\r\n        emit AuctionCancelled(auctionId, tokenId, ownerOf(tokenId));\r\n    }\r\n\r\n    /**\r\n     * @dev Method that anyone can call to settle the auction. It is available to everyone\r\n     * because the settlement is not dependent on the message sender, and will allow either\r\n     * the buyer, the seller, or a third party to cover the gas fees to settle. The burdern of\r\n     * the auction to settle should be on the seller, but in case there are issues with\r\n     * the seller settling we will not be locked from settling.\r\n     *\r\n     * If the seller is the contract owner, this is considered a primary sale and royalties will\r\n     * be paid to primiary royalties. If the seller is a user then it is a secondary sale and\r\n     * the contract owner will get a secondary sale cut.\r\n     */\r\n    function settleAuction(uint256 tokenId) external {\r\n        // _getAuctionId will error if token is not on an auction\r\n        uint256 auctionId = _getAuctionId(tokenId);        \r\n        \r\n        Auction memory auction = _auctionIdToAuction[auctionId];\r\n        address tokenOwner = ownerOf(tokenId);\r\n        require(block.timestamp > auction.endTimestamp, \"Auction must end to be settled\");\r\n        require(auction.topBidder != address(0), \"No bidder, cancel the auction instead\");\r\n\r\n        // This will allow transfers again\r\n        _tokenIdToAuctionId[tokenId] = 0;\r\n\r\n        _transfer(tokenOwner, auction.topBidder, tokenId);\r\n    \r\n        if (tokenOwner == owner()) {\r\n            IEaselyPayout(payoutContractAddress).splitPayable{ value: auction.price }(tokenOwner, royalties, royaltiesBPS);\r\n        } else {\r\n            address[] memory ownerRoyalties = new address[](1);\r\n            uint256[] memory ownerBPS = new uint256[](1);\r\n            ownerRoyalties[0] = owner();\r\n            ownerBPS[0] = secondaryOwnerBPS;\r\n\r\n            IEaselyPayout(payoutContractAddress).splitPayable{ value: auction.price }(tokenOwner, ownerRoyalties, ownerBPS);\r\n        }\r\n\r\n        emit AuctionSettled(auctionId, tokenId, auction.price, auction.topBidder, tokenOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows any potential buyer to submit a bid on a token with an auction. When outbidding the current topBidder\r\n     * the contract returns the value that the previous bidder had escrowed to the contract.\r\n     */\r\n    function bidOnAuction(uint256 tokenId) external payable {\r\n        // _getAuctionId will error if token is not on an auction\r\n        uint256 auctionId = _getAuctionId(tokenId);      \r\n        \r\n        uint256 timestamp = block.timestamp;\r\n        Auction memory auction = _auctionIdToAuction[auctionId];\r\n        uint256 msgValue = msg.value;\r\n\r\n        address prevBidder = auction.topBidder;\r\n        uint256 prevPrice = auction.price;\r\n\r\n        // Tokens that are not on auction always have an endTimestamp of 0\r\n        require(timestamp <= auction.endTimestamp, \"Auction has already ended\");\r\n        require(timestamp >= auction.startTimestamp, \"Auction has not started yet\");\r\n\r\n        uint256 minPrice = prevPrice + auction.minBidIncrement;\r\n        if (prevBidder == address(0)) {\r\n            minPrice = prevPrice;\r\n        }\r\n        require(msgValue >= minPrice, \"Bid is too small\");\r\n\r\n        uint256 endTime = auction.endTimestamp;\r\n        if (endTime < auction.minLastBidDuration + timestamp) {\r\n            endTime = timestamp + auction.minLastBidDuration;\r\n        }\r\n\r\n        auction.endTimestamp = endTime;\r\n        auction.price = msgValue;\r\n        auction.topBidder = _msgSender();\r\n\r\n        _auctionIdToAuction[auctionId] = auction;\r\n        \r\n        if (prevBidder != address(0)) {\r\n            // Give the old top bidder their money back\r\n            payable(prevBidder).transfer(prevPrice);\r\n        }\r\n        emit AuctionBidded(auctionId, tokenId, auction.price, timestamp, auction.topBidder);\r\n    }\r\n\r\n    /**\r\n     * @dev Usable by the owner of any token initiate a sale for their token. This does not\r\n     * lock the tokenId and the owner can freely trade their token because unlike auctions\r\n     * sales would be immediate.\r\n     */\r\n    function hashToSignToSellToken(\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 tokenId,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) external view returns (bytes32) {\r\n        require(_msgSender() == ownerOf(tokenId), \"Not the owner of the token\");\r\n        return _hashForSale(_msgSender(), version, nonce, tokenId, pricesAndTimestamps);\r\n    }\r\n\r\n    /**\r\n     * @dev With a hash signed by the method {hashToSignToSellToken} any user sending enough value can buy\r\n     * the token from the seller. These are all considered secondary sales and will give a cut to the \r\n     * owner of the contract based on the secondaryOwnerBPS.\r\n     */\r\n    function buyToken(\r\n        address seller,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 tokenId,\r\n        uint256[4] memory pricesAndTimestamps,\r\n        bytes memory signature\r\n    ) external payable {\r\n        uint256 currentPrice = _currentPrice(pricesAndTimestamps);\r\n\r\n        require(_addressToActiveVersion[seller] == version, \"Incorrect signature version\");\r\n        require(msg.value >= currentPrice, \"Not enough ETH to buy\");\r\n\r\n        _markHashSold(seller, version, nonce, tokenId, pricesAndTimestamps, currentPrice, signature);\r\n\r\n        _transfer(seller, _msgSender(), tokenId);\r\n\r\n        IEaselyPayout(payoutContractAddress).splitPayable{ value: currentPrice }(seller, _ownerRoyalties(), _ownerBPS());\r\n        payable(_msgSender()).transfer(msg.value - currentPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Usable to cancel hashes generated from {hashToSignToSellToken}\r\n     */\r\n    function cancelSale(\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 tokenId,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) external {\r\n        bytes32 hash = _hashToCheckForSale(_msgSender(), version, nonce, tokenId, pricesAndTimestamps);\r\n        _cancelledOrFinalizedSales[hash] = true;\r\n        emit SaleCancelled(_msgSender(), hash);\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return \"ipfs://\";\r\n    }\r\n\r\n    /**\r\n     * @dev Changing _beforeTokenTransfer to lock tokens that are in an auction so\r\n     * that owner cannot transfer the token as people are bidding on it.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override { \r\n        require(!_onAuction(tokenId), \"Cannot transfer a token in an auction\");\r\n\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev checks if a token is in an auction or not. We make sure that no active auction can \r\n     * have an endTimestamp of 0.\r\n     */\r\n    function _onAuction(uint256 tokenId) internal view returns (bool) {\r\n        return _tokenIdToAuctionId[tokenId] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the auctionId of a tokenId if the token is on auction.\r\n     */\r\n    function _getAuctionId(uint256 tokenId) internal view returns (uint256) {\r\n        require(_onAuction(tokenId), \"This token is not on auction\");\r\n        return _tokenIdToAuctionId[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev helper method get ownerRoyalties into an array form\r\n     */\r\n    function _ownerRoyalties() internal view returns (address[] memory) {\r\n        address[] memory ownerRoyalties = new address[](1);\r\n        ownerRoyalties[0] = owner();\r\n        return ownerRoyalties;\r\n    }\r\n\r\n    /**\r\n     * @dev helper method get secondary BPS into array form\r\n     */\r\n    function _ownerBPS() internal view returns (uint256[] memory) {\r\n        uint256[] memory ownerBPS = new uint256[](1);\r\n        ownerBPS[0] = secondaryOwnerBPS;\r\n        return ownerBPS;\r\n    }\r\n\r\n    /**\r\n     * @dev Current price for a sale which is calculated for the case of a descending auction. So\r\n     * the ending price must be less than the starting price and the auction must have already started.\r\n     * Standard single fare sales will have a matching starting and ending price.\r\n     */\r\n    function _currentPrice(uint256[4] memory pricesAndTimestamps) internal view returns (uint256) {\r\n        uint256 startingPrice = pricesAndTimestamps[0];\r\n        uint256 endingPrice = pricesAndTimestamps[1];\r\n        uint256 startingTimestamp = pricesAndTimestamps[2];\r\n        uint256 endingTimestamp = pricesAndTimestamps[3];\r\n\r\n        uint256 currTime = block.timestamp;\r\n        require(currTime >= startingTimestamp, \"Has not started yet\");\r\n        require(startingTimestamp < endingTimestamp, \"Must end after it starts\");\r\n        require(startingPrice >= endingPrice, \"Ending price cannot be bigger\");\r\n\r\n        if (startingPrice == endingPrice || currTime > endingTimestamp) {\r\n            return endingPrice;\r\n        }\r\n\r\n        uint256 diff = startingPrice - endingPrice;\r\n        uint256 decrements = (currTime - startingTimestamp) / timePerDecrement;\r\n        if (decrements == 0) {\r\n            return startingPrice;\r\n        }\r\n\r\n        // decrements will equal 0 before totalDecrements does so we will not divide by 0\r\n        uint256 totalDecrements = (endingTimestamp - startingTimestamp) / timePerDecrement;\r\n\r\n        return startingPrice - diff / totalDecrements * decrements;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets secondary BPS amount\r\n     */\r\n    function _setSecondary(uint256 secondary) internal {\r\n        secondaryOwnerBPS = secondary;\r\n        require(secondaryOwnerBPS <= maxSecondaryBPS, \"Cannot take more than 10% of secondaries\");\r\n    }\r\n\r\n    /**\r\n     * @dev Sets primary royalties\r\n     */\r\n    function _setRoyalties(address[4] memory newRoyalties, uint256[4] memory bps) internal {\r\n        require(bps[0] + bps[1] + bps[2] + bps[3] <= maxRoyaltiesBPS, \"Royalties too high\");\r\n        royalties = newRoyalties;\r\n        royaltiesBPS = bps;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if an address is either the owner, or the approved alternate signer.\r\n     */\r\n    function _checkValidSigner(address signer) internal view {\r\n        require(signer == owner() || signer == alternateSignerAddress, \"Not valid signer.\");\r\n    }\r\n\r\n    /**\r\n     * toEthSignedMessageHash\r\n     * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n     * and hash the result\r\n     */\r\n    function _toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev First checks if a sale is valid by checking that the hash has not been cancelled or already completed\r\n     * and that the correct address has given the signature. If both checks pass we mark the hash as complete and\r\n     * emit an event.\r\n     */\r\n    function _markHashSold(\r\n        address owner,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 tokenId,\r\n        uint256[4] memory pricesAndTimestamps,\r\n        uint256 salePrice,\r\n        bytes memory signature\r\n    ) internal {\r\n        bytes32 hash = _hashToCheckForSale(owner, version, nonce, tokenId, pricesAndTimestamps);\r\n        require(!_cancelledOrFinalizedSales[hash], \"Sale no longer active\");\r\n        require(hash.recover(signature) == owner, \"Not signed by current token owner\");\r\n        _cancelledOrFinalizedSales[hash] = true;\r\n\r\n        emit SaleCompleted(tokenId, salePrice, owner, _msgSender(), hash);\r\n    }\r\n\r\n    /**\r\n     * @dev Hash an order, returning the hash that a client must sign, including the standard message prefix\r\n     * @return Hash of message prefix and order hash per Ethereum format\r\n     */\r\n    function _hashToCheckForSale(\r\n        address owner,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 tokenId,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) internal view returns (bytes32) {\r\n        return _toEthSignedMessageHash(_hashForSale(owner, version, nonce, tokenId, pricesAndTimestamps));\r\n    }\r\n\r\n    /**\r\n     * @dev Hash an order, returning the hash that a client must sign, including the standard message prefix\r\n     * @return Hash of message prefix and order hash per Ethereum format\r\n     */\r\n    function _hashForSale(\r\n        address owner,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 tokenId,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) internal view returns (bytes32) {\r\n        return keccak256(abi.encode(address(this), block.chainid, owner, version, nonce, tokenId, pricesAndTimestamps));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev External interface of the EaselyContractInitializer. Formatted to enable ContractFactory\r\n * to have a single method that can deploy a wide variety of different contracts.\r\n */\r\ninterface IEaselyContractInitializer {\r\n    function init(bool[8] memory bools, address[8] memory addresses, uint256[32] memory uints, string[8] memory strings) external;\r\n}\r\n\r\n/**\r\n * @dev This implements a lazy-minted, fixed collection of EaselyMarketplaceCollection.\r\n * It requires that the creator knows the total number of NFTs they want and has an IPFS\r\n * hash that is a directory with all the tokenIds from 0 to the #NFTs - 1.\r\n *\r\n * It has two main methods to lazy-mint, one allows the owner to approve single use signatures\r\n * for specific wallet addresses and the other allows a general mint signature that anyone can use.\r\n *\r\n * Minting from this fixed collection is always random, this can be done either with a reveal\r\n * mechanism that has a random offset, or on-chain randomness if the collection is already revealed. \r\n */\r\ncontract EaselyFixedCollection is EaselyMarketplaceCollection, IEaselyContractInitializer {  \r\n    using ECDSA for bytes32;  \r\n    using Strings for uint256;\r\n\r\n    bool public burnable;\r\n    bool public isRevealed = false;\r\n    bool private hasInit = false;\r\n\r\n    uint256 public constant MAX_SUPPLY_LIMIT = 10 ** 9;\r\n    uint256 public maxSupply;\r\n    // Limits how much any single transaction can be\r\n    uint256 public transactionMax;\r\n    // Limits how much any single wallet can mint on a collection.\r\n    uint256 public maxMint;\r\n    \r\n    mapping(address => uint256) public mintCount;\r\n\r\n    // Used to shuffle tokenURI upon reveal\r\n    uint256 public offset;\r\n    // Used when switching from incremental tokenId to \r\n    uint256 private randOffset;\r\n\r\n    // Mapping to enable constant time onchain randomness\r\n    uint256[MAX_SUPPLY_LIMIT] private indices;\r\n    string private ipfsHash;\r\n\r\n    event Minted(address indexed buyer, uint256 amount, uint256 unitPrice, bytes32 hash);\r\n    event IpfsRevealed(string indexed ipfsHash, bool locked);\r\n\r\n    /**\r\n     * @dev Constructor function\r\n     */\r\n    constructor(\r\n        bool[8] memory bools, address[8] memory addresses, uint256[32] memory uints, string[8] memory strings\r\n    ) ERC721(strings[0], strings[1]) {\r\n        addresses[0] = _msgSender();\r\n        _init(bools, addresses, uints, strings);\r\n    }\r\n\r\n    function init(\r\n        bool[8] memory bools, \r\n        address[8] memory addresses, \r\n        uint256[32] memory uints, \r\n        string[8] memory strings\r\n    ) external override {\r\n        _init(bools, addresses, uints, strings);\r\n    }\r\n\r\n    function _init(\r\n        bool[8] memory bools, \r\n        address[8] memory addresses, \r\n        uint256[32] memory uints, \r\n        string[8] memory strings\r\n    ) internal {\r\n        require(!hasInit, \"Already has be initiated\");\r\n        hasInit = true;\r\n\r\n        burnable = bools[0];\r\n        isRevealed = bools[1];\r\n        if (isRevealed) {\r\n            emit IpfsRevealed(ipfsHash, false);\r\n        }\r\n\r\n        _owner = addresses[0];\r\n        address[4] memory royaltiesAddrs = [addresses[1], addresses[2], addresses[3], addresses[4]];\r\n        alternateSignerAddress = addresses[5];\r\n        \r\n        payoutContractAddress = 0xc495c35C7220D93aA3CA77E8D394bdf7241257d6; \r\n\r\n        /* Start at 1 because we reserve 0 for tokens that are not on auction */\r\n        nextAuctionId = 1;\r\n        _setSecondary(uints[0]);\r\n        _setRoyalties(royaltiesAddrs, [uints[1], uints[2], uints[3], uints[4]]);\r\n        maxSupply = uints[5];\r\n        require(maxSupply < MAX_SUPPLY_LIMIT, \"Collection is too big\");\r\n\r\n        if (uints[6] != 0) {\r\n            timePerDecrement = uints[6];\r\n        } else {\r\n            timePerDecrement = 300;\r\n        }\r\n\r\n        if (uints[7] != 0){\r\n            transactionMax = uints[7];\r\n        } else {\r\n            transactionMax = 10;\r\n        }\r\n        maxMint = uints[8];\r\n\r\n        _name = strings[0];\r\n        _symbol = strings[1];\r\n        ipfsHash = strings[2];\r\n    }\r\n\r\n    /**\r\n     * @dev If this collection was created with burnable on, owners of tokens\r\n     * can use this method to burn their tokens. Easely will keep track of \r\n     * burns in case creators want to reward users for burning tokens.\r\n     */\r\n    function burn(uint256 tokenId) external {\r\n        require(ownerOf(tokenId) == _msgSender(), \"Cannot burn a token you do not own\");\r\n        require(burnable, \"Tokens from this collection are not burnable\");\r\n\r\n        _burn(tokenId);\r\n    }\r\n    \r\n    /**\r\n     * @dev Method used if the creator wants to keep their collection hidden until\r\n     * a later release date. On reveal, a creator can decide if they want to \r\n     * lock the unminted tokens or enable them for on-chain randomness minting.\r\n     * \r\n     * IMPORTANT - this function can only be called ONCE, if a wrong IPFS hash\r\n     * is submitted by the owner, it cannot ever be switched to a different one.\r\n     */\r\n    function lockTokenURI(string calldata revealIPFSHash, bool lockOnReveal) external onlyOwner {\r\n        require(!isRevealed, \"The token URI has already been set\");\r\n        offset = _random(maxSupply);\r\n        ipfsHash = revealIPFSHash;\r\n        isRevealed = true;\r\n\r\n        if (!lockOnReveal) {\r\n            // so we know what index to start generating random numbers from\r\n            randOffset = totalSupply();\r\n        } else {\r\n            // This will lock the unminted tokens at reveal time\r\n            maxSupply = totalSupply();\r\n        }\r\n\r\n        emit IpfsRevealed(revealIPFSHash, lockOnReveal);\r\n    }\r\n\r\n    /**\r\n     * @dev tokenURI of a tokenId, will change to include the tokeId and an offset in\r\n     * the URI once the collection has been revealed.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        if (!isRevealed) {\r\n            return string(abi.encodePacked(_baseURI(), ipfsHash));\r\n        }\r\n\r\n        require(_exists(tokenId), \"URI query for nonexistent token\");\r\n\r\n        uint256 offsetId = (tokenId + offset) % maxSupply;\r\n        return string(abi.encodePacked(_baseURI(), ipfsHash, \"/\", offsetId.toString()));\r\n    }\r\n\r\n    /**\r\n     * @dev Hash that the owner or approved alternate signer then sign that the approved buyer\r\n     * can use in order to call the {mintAllow} method.\r\n     */\r\n    function hashToSignForAllowList(\r\n        address allowedAddress,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 price,\r\n        uint256 amount\r\n    ) external view returns (bytes32) {\r\n        _checkValidSigner(_msgSender());\r\n        return _hashForAllowList(allowedAddress, version, nonce, price, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev A way to invalidate a signature so the given params cannot be used in the {mintAllow} method.\r\n     */\r\n    function cancelAllowList(\r\n        address allowedAddress,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 price,\r\n        uint256 amount\r\n    ) external {\r\n        _checkValidSigner(_msgSender());\r\n        bytes32 hash = _hashToCheckForAllowList(allowedAddress, version, nonce, price, amount);\r\n        _cancelledOrFinalizedSales[hash] = true;\r\n        emit SaleCancelled(_msgSender(), hash);\r\n    }\r\n    \r\n    /**\r\n     * @dev Allows a user with an approved signature to mint at a price and quantity specified by the\r\n     * contract. A user is still limited by totalSupply, transactionMax, and mintMax if populated.\r\n     */\r\n    function mintAllow(\r\n        address allowedAddress,\r\n        uint256 version,\r\n        uint256 nonce,\r\n        uint256 price,\r\n        uint256 amount,\r\n        uint256 buyAmount,\r\n        bytes memory signature\r\n    ) external payable {\r\n        require(totalSupply() + buyAmount <= maxSupply, \"Over token supply limit\");\r\n        require(buyAmount <= amount, \"Over signature amount\");\r\n        require(buyAmount <= transactionMax, \"Over transaction limit\");\r\n        require(version == _addressToActiveVersion[owner()], \"This presale version is disabled\");\r\n        require(allowedAddress == _msgSender(), \"Invalid sender\");\r\n\r\n        uint256 totalPrice = price * buyAmount;\r\n        uint256 msgValue = msg.value;\r\n        require(msgValue >= totalPrice, \"Msg value too small\");\r\n\r\n        bytes32 hash = _hashToCheckForAllowList(allowedAddress, version, nonce, price, amount);\r\n        require(!_cancelledOrFinalizedSales[hash], \"Signature no longer active\");\r\n        address signer = hash.recover(signature);\r\n        _checkValidSigner(signer);\r\n        _cancelledOrFinalizedSales[hash] = true;\r\n\r\n        _mintRandom(_msgSender(), buyAmount);\r\n        emit Minted(_msgSender(), buyAmount, price, hash);\r\n\r\n        IEaselyPayout payoutContract = IEaselyPayout(payoutContractAddress);\r\n        payoutContract.splitPayable{ value: totalPrice }(owner(), royalties, royaltiesBPS);\r\n        payable(_msgSender()).transfer(msgValue - totalPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Hash that the owner or approved alternate signer then sign that buyers use \r\n     * in order to call the {mint} method.\r\n     */\r\n    function hashToSignForMint(uint256 version, uint256 amount, uint256[4] memory pricesAndTimestamps) external view returns (bytes32) {\r\n        _checkValidSigner(_msgSender());\r\n        require(amount <= transactionMax, \"Over transaction limit\");\r\n\r\n        return _hashForMint(version, amount, pricesAndTimestamps);\r\n    }\r\n\r\n    /**\r\n     * @dev A way to invalidate a signature so the given params cannot be used in the {mint} method.\r\n     */\r\n    function cancelMint(uint256 version, uint256 amount, uint256[4] memory pricesAndTimestamps) external {\r\n        _checkValidSigner(_msgSender());\r\n        bytes32 hash = _hashToCheckForMint(version, amount, pricesAndTimestamps);\r\n        _cancelledOrFinalizedSales[hash] = true;\r\n        emit SaleCancelled(_msgSender(), hash);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anyone to buy an amount of tokens at a price which matches\r\n     * the signature that the owner or alternate signer has approved\r\n     */\r\n    function mint(\r\n        uint256 version,\r\n        uint256 amount,\r\n        uint256[4] memory pricesAndTimestamps, \r\n        bytes memory signature\r\n    ) external payable {\r\n        require(totalSupply() + amount <= maxSupply, \"Over token supply limit\");\r\n        require(amount <= transactionMax, \"Over transaction limit\");\r\n        require(version == _addressToActiveVersion[owner()], \"Invalid version\");\r\n\r\n        uint256 unitPrice = _currentPrice(pricesAndTimestamps);\r\n        uint256 totalPrice = amount * unitPrice;\r\n        uint256 msgValue = msg.value;\r\n        require(msgValue >= totalPrice, \"Msg value too small\");\r\n\r\n        bytes32 hash = _hashToCheckForMint(version, amount, pricesAndTimestamps);\r\n        require(!_cancelledOrFinalizedSales[hash], \"Signature no longer active\");\r\n        address signer = hash.recover(signature);\r\n        _checkValidSigner(signer);\r\n\r\n        _mintRandom(_msgSender(), amount);\r\n        emit Minted(_msgSender(), amount, unitPrice, hash);\r\n\r\n        IEaselyPayout payoutContract = IEaselyPayout(payoutContractAddress);\r\n        payoutContract.splitPayable{ value: totalPrice }(owner(), royalties, royaltiesBPS);\r\n        payable(_msgSender()).transfer(msgValue - totalPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Hash an order that we need to check against the signature to see who the signer is.\r\n     * see {_hashForAllowList} to see the hash that needs to be signed.\r\n     */\r\n    function _hashToCheckForAllowList(\r\n        address allowedAddress,\r\n        uint256 nonce,\r\n        uint256 version,\r\n        uint256 price,\r\n        uint256 amount\r\n    ) internal view returns (bytes32) {\r\n        return _toEthSignedMessageHash(_hashForAllowList(allowedAddress, nonce, version, price, amount));\r\n    }\r\n\r\n    /**\r\n     * @dev Hash that the owner or alternate wallet must sign to enable a {mintAllow} for a user\r\n     * @return Hash of message prefix and order hash per Ethereum format\r\n     */\r\n    function _hashForAllowList(        \r\n        address allowedAddress,\r\n        uint256 nonce,\r\n        uint256 version,\r\n        uint256 price,\r\n        uint256 amount\r\n    ) internal view returns (bytes32) {\r\n        return keccak256(abi.encode(address(this), block.chainid, owner(), allowedAddress, nonce, version, price, amount));\r\n    }\r\n\r\n    /**\r\n     * @dev Hash an order that we need to check against the signature to see who the signer is.\r\n    * see {_hashForMint} to see the hash that needs to be signed.\r\n     */\r\n    function _hashToCheckForMint(\r\n        uint256 version,\r\n        uint256 amount,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) internal view returns (bytes32) {\r\n        return _toEthSignedMessageHash(_hashForMint(version, amount, pricesAndTimestamps));\r\n    }\r\n\r\n    /**\r\n     * @dev Hash that the owner or alternate wallet must sign to enable {mint} for all users \r\n     */\r\n    function _hashForMint(        \r\n        uint256 version,\r\n        uint256 amount,\r\n        uint256[4] memory pricesAndTimestamps\r\n    ) internal view returns (bytes32) {\r\n        return keccak256(abi.encode(address(this), block.chainid, owner(), amount, pricesAndTimestamps, version));\r\n    }\r\n\r\n    /// @notice Generates a pseudo random index of our tokens that has not been used so far\r\n    function _mintRandomIndex(address buyer, uint256 amount) internal {\r\n        //  number of tokens left to create\r\n        uint256 totalSize = maxSupply - totalSupply();\r\n\r\n        for (uint256 i = 0; i < amount; i++) {\r\n            // generate a random index\r\n            uint256 index = _random(totalSize);\r\n            uint256 tokenAtPlace = indices[index];\r\n\r\n            uint256 tokenId;\r\n            // if we havent stored a replacement token...\r\n            if (tokenAtPlace == 0) {\r\n                //... we just return the current index\r\n                tokenId = index;\r\n            } else {\r\n                // else we take the replace we stored with logic below\r\n                tokenId = tokenAtPlace;\r\n            }\r\n\r\n            // get the highest token id we havent handed out\r\n            uint256 lastTokenAvailable = indices[totalSize - 1];\r\n            // we need to store a replacement token for the next time we roll the same index\r\n            // if the last token is still unused...\r\n            if (lastTokenAvailable == 0) {\r\n                // ... we store the last token as index\r\n                indices[index] = totalSize - 1;\r\n            } else {\r\n                // ... we store the token that was stored for the last token\r\n                indices[index] = lastTokenAvailable;\r\n            }\r\n\r\n            _safeMint(buyer, tokenId + randOffset);\r\n            totalSize--;\r\n        }\r\n    }\r\n\r\n    /// @notice Generates a pseudo random number based on arguments with decent entropy\r\n    /// @param max The maximum value we want to receive\r\n    /// @return A random number less than the max\r\n    function _random(uint256 max) internal view returns (uint256) {\r\n        if (max == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 rand = uint256(\r\n            keccak256(\r\n                abi.encode(\r\n                    msg.sender,\r\n                    block.difficulty,\r\n                    block.timestamp,\r\n                    blockhash(block.number - 1)\r\n                )\r\n            )\r\n        );\r\n        return rand % max;\r\n    }\r\n\r\n    /**\r\n     * @dev Wrapper around {_mintRandomIndex} that incrementally if the collection has not \r\n     * been revealed yet, which also checks the buyer has not exceeded maxMint count \r\n     */\r\n    function _mintRandom(address buyer, uint256 amount) internal {\r\n        require(maxMint == 0 || mintCount[buyer] + amount <= maxMint, \"Buyer over mint maximum\");\r\n        mintCount[buyer] += amount;\r\n\r\n        if (isRevealed) {\r\n            _mintRandomIndex(buyer, amount);\r\n            return;\r\n        }\r\n\r\n        uint256 nextTokenId = totalSupply();\r\n\r\n        for (uint256 i = 0; i < amount; i++) {\r\n            _safeMint(buyer, nextTokenId + i);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"bool[8]\",\"name\":\"bools\",\"type\":\"bool[8]\"},{\"internalType\":\"address[8]\",\"name\":\"addresses\",\"type\":\"address[8]\"},{\"internalType\":\"uint256[32]\",\"name\":\"uints\",\"type\":\"uint256[32]\"},{\"internalType\":\"string[8]\",\"name\":\"strings\",\"type\":\"string[8]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"AltSignerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"AuctionBidded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endingTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBidIncrement\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minLastBidDuration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"AuctionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"AuctionTimeAltered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"IpfsRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"SaleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"SaleCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"alterAuctionTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alternateSignerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"bidOnAuction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cancelAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"}],\"name\":\"cancelMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"}],\"name\":\"cancelSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLastBidDuration\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"getActiveVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"topBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLastBidDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct EaselyMarketplaceCollection.Auction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuctionForTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"topBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBidIncrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLastBidDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct EaselyMarketplaceCollection.Auction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuctionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"}],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hashToSignForAllowList\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"}],\"name\":\"hashToSignForMint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"}],\"name\":\"hashToSignToSellToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[8]\",\"name\":\"bools\",\"type\":\"bool[8]\"},{\"internalType\":\"address[8]\",\"name\":\"addresses\",\"type\":\"address[8]\"},{\"internalType\":\"uint256[32]\",\"name\":\"uints\",\"type\":\"uint256[32]\"},{\"internalType\":\"string[8]\",\"name\":\"strings\",\"type\":\"string[8]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"revealIPFSHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"lockOnReveal\",\"type\":\"bool\"}],\"name\":\"lockTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRoyaltiesBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSecondaryBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"pricesAndTimestamps\",\"type\":\"uint256[4]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintAllow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royalties\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royaltiesBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondaryOwnerBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"alt\",\"type\":\"address\"}],\"name\":\"setAltSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[4]\",\"name\":\"newRoyalties\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"bps\",\"type\":\"uint256[4]\"}],\"name\":\"setRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"setSecondaryBPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timePerDecrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"updateVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EaselyFixedCollection","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"300","ConstructorArgumentsa000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000006456173656c79000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044541534500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://61d8a6083a51b1efd02eecefa86f3a21b9611e9bbbd6e2120981424ee0aa01a1"}]}