{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;\r\n\r\n//import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n/* openzeppelin*/\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n/* openzeppelin*/\r\n\r\nlibrary TransferHelper {\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n\r\n    \r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n\tfunction approve(address guy, uint256 wad) external returns (bool);\r\n\tfunction transferFrom(\r\n\t\taddress src,\r\n\t\taddress dst,\r\n\t\tuint256 wad\r\n\t) external returns (bool);\r\n}\r\n\r\ncontract bid  is Ownable ,Pausable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 maintainerPayment;\r\n    uint256 creatorPayment;\r\n    uint256 ownerPayment;\r\n\r\n    address private aart;\r\n    address private platformAddress;\r\n\r\n    // Percentage to owner of SupeRare. (* 10) to allow for < 1% \r\n    uint256 public maintainerPercentage = 150;\r\n\r\n    // Percentage to creator of artwork. (* 10) to allow for tens decimal. \r\n    uint256 public creatorPercentage = 100;\r\n\r\n    \r\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n    \r\n    struct currentbidder{\r\n        address   token;\r\n        address   curr;\r\n        uint256   price;\r\n        uint256   lastbid;\r\n        uint256   addpercentage;\r\n        bool      status;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n      constructor(address _aart,address _platformAddress) public {  \r\n        require(_aart != address(0),\"_aart is zero\");\r\n        aart = _aart;\r\n        platformAddress = _platformAddress;\r\n    }\r\n    \r\n\r\n    event PlatformAddressUpdated (address platformAddress);\r\n    event AcceptBid(address from,address to, uint256 id,uint256 value);\r\n    event Bid(address bidder,uint256 value,uint256 id);\r\n    //event Bid2(address from,address owner ,uint256 id);\r\n    event SaleBidSet(address token,uint256 tokenId, uint256 salePrice);\r\n    event SalePriceSet(uint256 indexed _tokenId, uint256 indexed _price);\r\n    event Sold(address indexed _buyer, address indexed _seller, uint256 _amount, uint256 indexed _tokenId);\r\n   \r\n    mapping(uint256 => currentbidder) public cb;\r\n\r\n    // Mapping from token ID to the owner sale price\r\n    mapping(uint256 => uint256) private tokenSalePrice;\r\n\r\n\r\n    //Check that the sender is the owner or maintainer\r\n    modifier ownerOrtokenof(uint256 _tokenid) {\r\n        require( msg.sender == IERC721(aart).ownerOf(_tokenid) || owner() == msg.sender,\"must be owner or admin\" );\r\n        _;      \r\n    }\r\n\r\n    //Check that the sender is the token of owner\r\n    modifier onlyOwnerOf(uint256 _tokenid) {\r\n        require( msg.sender == IERC721(aart).ownerOf(_tokenid) ,\"must be token of owner\" );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Guarantees msg.sender is not the owner of the given token\r\n     * @param _tokenid uint256 ID of the token to validate its ownership does not belongs to msg.sender\r\n     */\r\n    modifier notOwnerOf(uint256 _tokenid) {\r\n        require(IERC721(aart).ownerOf(_tokenid) != msg.sender,\"only other accounts are allowed\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function pause() public onlyOwner() {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner() {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @dev Set the bid price of the token\r\n     * @param _tokenid uint256 ID of the token with the standing bid\r\n     */\r\n    function setbid(address _token,uint256 _tokenid,uint256 _price,uint256 _addpercentage) public onlyOwnerOf(_tokenid) whenNotPaused() {\r\n        require(cb[_tokenid].status != true,\"Repeat setting\");\r\n        require(_price > 0,\"must gt zero\");\r\n        require(_addpercentage > 0,\"must gt zero\");\r\n        cb[_tokenid].token = _token;\r\n        cb[_tokenid].price = _price;\r\n        cb[_tokenid].addpercentage = _addpercentage;\r\n        cb[_tokenid].status = true;\r\n        emit SaleBidSet(_token,_tokenid, _price);\r\n    }\r\n\r\n    // update the Platform Address\r\n    function updatePlatformAddress(address newPlatformAddress) public onlyOwner() {\r\n        require(newPlatformAddress != address(0));\r\n        platformAddress = newPlatformAddress;\r\n\r\n        emit PlatformAddressUpdated(newPlatformAddress);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the sale price of the token\r\n    * @param _tokenid uint256 ID of the token\r\n    * @return sale price of the token\r\n    */\r\n    function SalePriceOfToken(uint256 _tokenid) public view returns (uint256) {\r\n        return tokenSalePrice[_tokenid];\r\n    }\r\n\r\n     /**\r\n    * @dev Gets the current bid and bidder of the token\r\n    * @param _tokenid uint256 ID of the token to get bid details\r\n    * @return bid amount and last bid amount and bidder address of token\r\n    */\r\n    function currentBidDetailsOfToken(uint256 _tokenid) public view returns (uint256, address,uint256) {\r\n        return (cb[_tokenid].price, cb[_tokenid].curr,cb[_tokenid].lastbid);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Cancels the bid on the token, returning the bid amount to the bidder.\r\n     * @param _tokenid uint256 ID of the token with a bid\r\n     */\r\n    function cacelbid(uint256 _tokenid) public ownerOrtokenof(_tokenid) whenNotPaused() {\r\n        require(cb[_tokenid].status,\"status is not true\");\r\n\r\n        address tk = cb[_tokenid].token;\r\n        address cur = cb[_tokenid].curr;\r\n        uint value = cb[_tokenid].lastbid;\r\n\r\n        returnCurrentBid(tk,cur,0,value,_tokenid);\r\n\r\n        // add 210615 delete\r\n        delete cb[_tokenid];\r\n    }\r\n\r\n    function _safeTransfer(address token, address to, uint value) private {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'AART BID: TRANSFER_FAILED');\r\n    }\r\n\r\n     /**\r\n     * @dev Set the maintainer Percentage. Needs to be 10 * target percentage\r\n     * @param _percentage uint256 percentage * 10.\r\n     */\r\n    function setMaintainerPercentage(uint256 _percentage) public onlyOwner() {\r\n       maintainerPercentage = _percentage;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the creator Percentage. Needs to be 10 * target percentage\r\n     * @param _percentage uint256 percentage * 10.\r\n     */\r\n    function setCreatorPercentage(uint256 _percentage) public onlyOwner() {\r\n       creatorPercentage = _percentage;\r\n    }\r\n\r\n    /**\r\n     * @dev Set the sale price of the token\r\n     * @param _tokenid uint256 ID of the token with the standing bid\r\n     */\r\n    function setSalePrice(uint256 _tokenid, uint256 _salePrice) public onlyOwnerOf(_tokenid) {\r\n        tokenSalePrice[_tokenid] = _salePrice;\r\n        emit SalePriceSet(_tokenid, _salePrice);\r\n    }\r\n\r\n     /**\r\n     * @dev Purchase the token if there is a sale price; transfers ownership to buyer and pays out owner.\r\n     * @param _tokenid uint256 ID of the token to be purchased\r\n     */\r\n    function buy(uint256 _tokenid) public payable whenNotPaused() notOwnerOf(_tokenid) {\r\n        uint256 salePrice = tokenSalePrice[_tokenid];\r\n        uint256 sentPrice = msg.value;\r\n        address buyer = msg.sender;\r\n        require(salePrice > 0);\r\n        require(sentPrice >= salePrice);\r\n\r\n        maintainerPayment = sentPrice.mul(maintainerPercentage).div(1000);\r\n        ownerPayment = sentPrice.sub(maintainerPayment);\r\n\r\n        address tokenOwner = IERC721(aart).ownerOf(_tokenid);\r\n\r\n        TransferHelper.safeTransferETH(platformAddress,maintainerPayment);\r\n        TransferHelper.safeTransferETH(tokenOwner,ownerPayment);\r\n\r\n        IERC721(aart).transferFrom(tokenOwner,buyer,_tokenid);\r\n\r\n        tokenSalePrice[_tokenid] = 0;\r\n        emit Sold(buyer, tokenOwner, sentPrice, _tokenid);\r\n    }\r\n\r\n     /**\r\n    * @dev Internal function to check that the bid is larger than current bid\r\n    * @param _tokenid uint256 ID of the token with the standing bid\r\n    */\r\n    function isGreaterBid(address _token,uint256 _tokenid,uint256 _value) private view returns (bool) {\r\n    \r\n        uint256  addbid = cb[_tokenid].lastbid.mul(cb[_tokenid].addpercentage ).div(1000);  \r\n        uint256  currbid = cb[_tokenid].lastbid.add(addbid);\r\n\r\n          //Check bid amount\r\n        if (_token == address(0)) {\r\n            //require(msg.value > cb[_tokenid].price && msg.value > cb[_tokenid].lastbid,\"Bid must be greater than price or lastbid \");\r\n            require(msg.value > cb[_tokenid].price && msg.value >= currbid,\"Bid must be greater than price or lastbid\");\r\n        } else {\r\n            //require(_value > cb[_tokenid].price && _value > cb[_tokenid].lastbid,\"Bid must be greater than price or lastbid\");\r\n            require(_value > cb[_tokenid].price && _value >= currbid,\"Bid must be greater than price or lastbid\");\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Accept the bid on the token, transferring ownership to the current bidder and paying out the owner.\r\n     * @param _tokenid uint256 ID of the token with the standing bid\r\n     */\r\n    function acceptbid(uint256 _tokenid) public payable ownerOrtokenof(_tokenid) whenNotPaused() {\r\n        // Get the nft token of owner\r\n        address own = IERC721(aart).ownerOf(_tokenid);\r\n\r\n        address tk = cb[_tokenid].token;\r\n        address to = cb[_tokenid].curr;\r\n        uint256 value  = cb[_tokenid].lastbid;\r\n\r\n        //transfer nft to the last bidder\r\n        IERC721(aart).transferFrom(own,to,_tokenid);\r\n\r\n        maintainerPayment = value.mul(maintainerPercentage).div(1000);\r\n        ownerPayment = value.sub(maintainerPayment);       \r\n\r\n        //transfer token\r\n        if (tk == address(0)) {\r\n            TransferHelper.safeTransferETH(platformAddress,maintainerPayment);\r\n            TransferHelper.safeTransferETH(own,ownerPayment);\r\n        } else {\r\n            // token transfer to the receiver\r\n            _safeTransfer(tk, platformAddress, maintainerPayment);\r\n            _safeTransfer(tk, own, ownerPayment);\r\n        }\r\n\r\n        // add 210615 delete\r\n        delete cb[_tokenid];\r\n\r\n        emit AcceptBid(msg.sender,to,_tokenid,value);\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Internal function to return funds to current bidder.\r\n    * @param _tokenid uint256 ID of the token with the standing bid\r\n    */\r\n    function returnCurrentBid(address _token,address _receiver,uint256 _value,uint256 _rvalue,uint256 _tokenid) private returns(uint256) {\r\n\r\n        uint256  value;       \r\n        if (_token == address(0)) {\r\n            //require(msg.value > cp,\"msg.value must be greater than\");\r\n            TransferHelper.safeTransferETH(_receiver,_rvalue);\r\n            cb[_tokenid].lastbid = msg.value;\r\n            value = msg.value;\r\n        } else {\r\n            // token transfer to this contract\r\n            if (_value > 0){\r\n            TransferHelper.safeTransferFrom(_token, msg.sender, address(this), _value);\r\n            }\r\n            // token refund to ths last bider\r\n            if (_rvalue > 0){\r\n                _safeTransfer(_token, _receiver, _rvalue);\r\n            }\r\n            \r\n            cb[_tokenid].lastbid = _value;\r\n            value = _value;\r\n        }\r\n        return value;\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Bids on the token, replacing the bid if the bid is higher than the current bid. You cannot bid on a token you already own.\r\n    * @param _tokenid uint256 ID of the token to bid on\r\n    * @param _token erc20 token contract address\r\n    * @param _value \berc20 token current bid,others is 0\r\n    */\r\n    function bid1(address _token,uint256 _value,uint256 _tokenid) public payable whenNotPaused()  notOwnerOf(_tokenid) returns(bool) {\r\n\r\n        // check nft token status\r\n        require(cb[_tokenid].status,\"status is false\");\r\n        require(cb[_tokenid].token == _token,\"token check failed\");\r\n        require(IERC721(aart).ownerOf(_tokenid) != msg.sender,\"only other accounts are allowed\");\r\n        \r\n        //Check bid amount\r\n        require(isGreaterBid(_token,_tokenid,_value),\"check bid amount failed\");\r\n\r\n        // last bidder\r\n        address  lastbidder = cb[_tokenid].curr;\r\n        uint256  cp = cb[_tokenid].lastbid;\r\n\r\n        //return funds to current bidder\r\n        uint256 value = returnCurrentBid(_token,lastbidder,_value,cp,_tokenid);\r\n\r\n        \r\n        cb[_tokenid].token = _token;\r\n        cb[_tokenid].curr = msg.sender;\r\n        \r\n        // emit event\r\n        emit Bid(msg.sender,value,_tokenid);\r\n        return true;\r\n    }\r\n\r\n \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aart\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AcceptBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"platformAddress\",\"type\":\"address\"}],\"name\":\"PlatformAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"SaleBidSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"SalePriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"}],\"name\":\"SalePriceOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"}],\"name\":\"acceptbid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"}],\"name\":\"bid1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"}],\"name\":\"cacelbid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastbid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addpercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"}],\"name\":\"currentBidDetailsOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintainerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setCreatorPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setMaintainerPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_addpercentage\",\"type\":\"uint256\"}],\"name\":\"setbid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPlatformAddress\",\"type\":\"address\"}],\"name\":\"updatePlatformAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"bid","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d47ac9ba97493034f10d1193dce8e322ade8d91900000000000000000000000091d3ad4c9c95e857f80d7acf79fccdde54d9884a","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1ba4ab24af0346d7f4724c72b933c9c93b07caba5f56045cece419f81dbc7f97"}]}