{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * \\u003e To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * \\u003e a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Strings.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 =\\u003e address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address =\\u003e uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 =\\u003e address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length \\u003e 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``\\u0027s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``\\u0027s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"},\"ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 =\\u003e uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 =\\u003e uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index \\u003c ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index \\u003c ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``\\u0027s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``\\u0027s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension\\u0027s ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension\\u0027s token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension\\u0027s ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from\\u0027s tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token\\u0027s index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension\\u0027s token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an \\u0027if\\u0027 statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token\\u0027s index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``\\u0027s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"},\"IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"Immutables.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// All Rights Reserved\\r\\n\\r\\n/*\\r\\n██╗███╗   ███╗███╗   ███╗██╗   ██╗████████╗ █████╗ ██████╗ ██╗     ███████╗███████╗\\r\\n██║████╗ ████║████╗ ████║██║   ██║╚══██╔══╝██╔══██╗██╔══██╗██║     ██╔════╝██╔════╝\\r\\n██║██╔████╔██║██╔████╔██║██║   ██║   ██║   ███████║██████╔╝██║     █████╗  ███████╗\\r\\n██║██║╚██╔╝██║██║╚██╔╝██║██║   ██║   ██║   ██╔══██║██╔══██╗██║     ██╔══╝  ╚════██║\\r\\n██║██║ ╚═╝ ██║██║ ╚═╝ ██║╚██████╔╝   ██║   ██║  ██║██████╔╝███████╗███████╗███████║\\r\\n╚═╝╚═╝     ╚═╝╚═╝     ╚═╝ ╚═════╝    ╚═╝   ╚═╝  ╚═╝╚═════╝ ╚══════╝╚══════╝╚══════╝\\r\\n*/\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Strings.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./ERC721.sol\\\";\\r\\nimport \\\"./IERC2981.sol\\\";\\r\\nimport \\\"./Clones.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\n\\r\\nimport \\\"./ImmutablesPageRoyaltyManager.sol\\\";\\r\\n\\r\\n/// @author Gutenblock.eth\\r\\n/// @title ImmutablesAdmin\\r\\ncontract ImmutablesAdmin is Ownable, ReentrancyGuard {\\r\\n  using Address for address payable;\\r\\n\\r\\n  /// @dev Address of a third party curator.\\r\\n  address public curator;\\r\\n  /// @dev basis point (1/10,000th) share of third party curator on payout.\\r\\n  uint16 public curatorPercent;\\r\\n\\r\\n  /// @dev Address of a third party beneficiary.\\r\\n  address public beneficiary;\\r\\n  /// @dev basis point (1/10,000th) share of third party beneficiary on payout.\\r\\n  uint16 public beneficiaryPercent;\\r\\n\\r\\n  /// @dev whether or not users need to be pre-screened.\\r\\n  bool public userScreeningEnabled = false;\\r\\n\\r\\n  /// @dev Teammember administration mapping\\r\\n  mapping(address =\\u003e bool) public isTeammember;\\r\\n\\r\\n  /// @dev Allowed user administration mapping\\r\\n  mapping(address =\\u003e bool) public isAllowedUser;\\r\\n\\r\\n  /// @dev MODIFIERS\\r\\n\\r\\n  modifier onlyTeammember() {\\r\\n      require(isTeammember[msg.sender], \\\"team\\\");\\r\\n      _;\\r\\n  }\\r\\n\\r\\n  modifier onlyAllowedUser() {\\r\\n    if(userScreeningEnabled) {\\r\\n      require(isAllowedUser[msg.sender] || isTeammember[msg.sender], \\\"auth\\\");\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n  /// @dev EVENTS\\r\\n\\r\\n  event AdminModifiedTeammembers(\\r\\n    address indexed user,\\r\\n    bool isTeammember\\r\\n  );\\r\\n\\r\\n  event AdminModifiedAllowedUsers(\\r\\n    address indexed user,\\r\\n    bool isAllowedUser\\r\\n  );\\r\\n\\r\\n  /** @dev Allows the contract owner to add a teammember.\\r\\n    * @param _address of teammember to add\\r\\n    */\\r\\n  function contractOwnerAddTeammember(address _address) external onlyOwner() {\\r\\n      isTeammember[_address] = true;\\r\\n      emit AdminModifiedTeammembers(_address, true);\\r\\n  }\\r\\n\\r\\n  /** @dev Allows the contract owner to remove a teammember.\\r\\n    * @param _address of teammember to remove\\r\\n    */\\r\\n  function contractOwnerRemoveTeammember(address _address) external onlyOwner() {\\r\\n      isTeammember[_address] = false;\\r\\n      emit AdminModifiedTeammembers(_address, false);\\r\\n  }\\r\\n\\r\\n  /** @dev Allows the contract owner to add a user.\\r\\n    * @param _address of user to add\\r\\n    */\\r\\n  function teamAddAllowedUser(address _address) external onlyTeammember() {\\r\\n      isAllowedUser[_address] = true;\\r\\n      emit AdminModifiedAllowedUsers(_address, true);\\r\\n  }\\r\\n\\r\\n  /** @dev Allows the contract owner to remove a user.\\r\\n    * @param _address of a user to remove\\r\\n    */\\r\\n  function teamRemoveAllowedUser(address _address) external onlyTeammember() {\\r\\n      isAllowedUser[_address] = false;\\r\\n      emit AdminModifiedAllowedUsers(_address, false);\\r\\n  }\\r\\n\\r\\n  function teamToggleUserScreeningEnabled() external onlyTeammember() {\\r\\n    userScreeningEnabled = !userScreeningEnabled;\\r\\n  }\\r\\n\\r\\n  // FINANCIAL\\r\\n\\r\\n    /** @dev Allows the contract owner to set a curator address and percentage.\\r\\n    * @dev Force payout of any curator that was previously set\\r\\n    * @dev so that funds paid with a curator set are paid out as promised.\\r\\n    * @param _newCurator address of a curator teammember.\\r\\n    * @param _newPercent the basis point (1/10,000th) share of contract revenue for the curator.\\r\\n    */\\r\\n  function contractOwnerUpdateCuratorAddressAndPercent(address _newCurator, uint16 _newPercent) external onlyOwner() nonReentrant() {\\r\\n    // checks\\r\\n    require(_newPercent \\u003c= (10000-beneficiaryPercent));\\r\\n\\r\\n    // effects\\r\\n    uint256 _startingBalance = address(this).balance;\\r\\n    uint256 _curatorValue = _startingBalance * curatorPercent / 10000;\\r\\n    uint256 _beneficiaryValue = _startingBalance * beneficiaryPercent / 10000;\\r\\n    uint256 _contractValue = _startingBalance - _curatorValue - _beneficiaryValue;\\r\\n\\r\\n    address oldCurator = curator;\\r\\n    isTeammember[curator] = false;\\r\\n    emit AdminModifiedTeammembers(curator, false);\\r\\n    curator = _newCurator;\\r\\n    isTeammember[_newCurator] = true;\\r\\n    emit AdminModifiedTeammembers(_newCurator, true);\\r\\n    curatorPercent = _newPercent;\\r\\n\\r\\n    // interactions\\r\\n    payable(this.owner()).sendValue(_contractValue);\\r\\n    payable(oldCurator).sendValue(_curatorValue);\\r\\n    payable(beneficiary).sendValue(_beneficiaryValue);\\r\\n  }\\r\\n\\r\\n  /** @dev Allows the contract owner to set a beneficiary address and percentage.\\r\\n    * @dev Force payout of any beneficiary that was previously set\\r\\n    * @dev so that funds paid with a beneficiary set are paid out as promised.\\r\\n    * @param _newBeneficiary address of a beneficiary.\\r\\n    * @param _newPercent the basis point (1/10,000th) share of contract revenue for the beneficiary.\\r\\n    */\\r\\n  function contractOwnerUpdateBeneficiaryAddressAndPercent(address _newBeneficiary, uint16 _newPercent) external onlyOwner() nonReentrant() {\\r\\n    // checks\\r\\n    require(_newPercent \\u003c= (10000-curatorPercent));\\r\\n\\r\\n    // effects\\r\\n    uint256 _startingBalance = address(this).balance;\\r\\n    uint256 _curatorValue = _startingBalance * curatorPercent / 10000;\\r\\n    uint256 _beneficiaryValue = _startingBalance * beneficiaryPercent / 10000;\\r\\n    uint256 _contractValue = _startingBalance - _curatorValue - _beneficiaryValue;\\r\\n    address oldBeneficiary = beneficiary;\\r\\n    beneficiary = _newBeneficiary;\\r\\n    beneficiaryPercent = _newPercent;\\r\\n\\r\\n    // interactions\\r\\n    payable(this.owner()).sendValue(_contractValue);\\r\\n    payable(curator).sendValue(_curatorValue);\\r\\n    payable(oldBeneficiary).sendValue(_beneficiaryValue);\\r\\n  }\\r\\n\\r\\n  /** @dev Allows the withdraw of funds.\\r\\n    * @dev Everyone is paid and the contract balance is zeroed out.\\r\\n    */\\r\\n  function withdraw() external nonReentrant() {\\r\\n    // checks\\r\\n    // effects\\r\\n    uint256 _startingBalance = address(this).balance;\\r\\n    uint256 _curatorValue = _startingBalance * curatorPercent / 10000;\\r\\n    uint256 _beneficiaryValue = _startingBalance * beneficiaryPercent / 10000;\\r\\n    uint256 _contractValue = _startingBalance - _curatorValue - _beneficiaryValue;\\r\\n\\r\\n    // interactions\\r\\n    payable(this.owner()).sendValue(_contractValue);\\r\\n    payable(curator).sendValue(_curatorValue);\\r\\n    payable(beneficiary).sendValue(_beneficiaryValue);\\r\\n  }\\r\\n}\\r\\n\\r\\n/// @author Gutenblock.eth\\r\\n/// @title ImmutablesAdminPostPage\\r\\ncontract ImmutablesAdminPostPage is ImmutablesAdmin {\\r\\n    /// @dev GLOBAL VARIABLES\\r\\n    /// @dev The fee paid to the contract to post an Immutables.\\r\\n    uint256 public postingFee;\\r\\n    /// @dev The fee paid into the contract to purchase a Page.\\r\\n    uint256 public pageFee;\\r\\n\\r\\n    /// @dev The basis point (1/10,000ths) percentage of value the contract gets\\r\\n    ///      when payment made to a post.\\r\\n    uint16 public contractTipPercentage;\\r\\n    /// @dev The basis point (1/10,000ths) percentage of value the poster gets\\r\\n    ///      when payment made to a post.\\r\\n    uint16 public posterTipPercentage;\\r\\n\\r\\n    /// @dev The basis point (1/10,000ths) percentage of value the poster gets\\r\\n    ///      when payment made to a post.\\r\\n    uint16 public contractSecondaryRoyaltyPercentage;\\r\\n\\r\\n    /// @dev EVENTS\\r\\n    event AddressPostedPageTagContent(\\r\\n      address indexed poster,\\r\\n      bytes32 indexed pageHash,\\r\\n      bytes32 indexed tagHash,\\r\\n      string page,\\r\\n      string tag,\\r\\n      string content\\r\\n    );\\r\\n\\r\\n    event AddressPaidPageTagValue(\\r\\n      address indexed poster,\\r\\n      bytes32 indexed pageHash,\\r\\n      bytes32 indexed tagHash,\\r\\n      string page,\\r\\n      string tag,\\r\\n      uint256 value\\r\\n    );\\r\\n\\r\\n    /// @dev HELPER FUNCTIONS\\r\\n\\r\\n    /** @dev Determines if a string is a valid page (a-z|A-Z|0-9| |_|-) cannot start with 0\\r\\n      * @param _str The proposed page name.\\r\\n      * @return _ Whether the page contains only valid characters.\\r\\n      */\\r\\n    function isValidPageName(string calldata _str) public pure returns (bool) {\\r\\n       bytes memory b = bytes(_str);\\r\\n       require(b.length \\u003e 0, \\\"can not be empty string\\\");\\r\\n       require(b[0] != 0x30 \\u0026\\u0026 b[0] != 0x20, \\\"page cannot start with 0 or space\\\");\\r\\n       for(uint i; i \\u003c b.length; i++) {\\r\\n            // if not 0-9, A-Z, a-z, space \\u0027 \\u0027, dash - or underscore _ return false\\r\\n           if(!(((b[i] \\u003e= 0x30) \\u0026\\u0026 (b[i] \\u003c= 0x39)) || ((b[i] \\u003e= 0x41) \\u0026\\u0026 (b[i] \\u003c= 0x5A)) || ((b[i] \\u003e= 0x61) \\u0026\\u0026 (b[i] \\u003c= 0x7A)) || (b[i] == 0x20) || (b[i] == 0x2D) || (b[i] == 0x5F))) {\\r\\n              return false;\\r\\n            }\\r\\n       }\\r\\n       // otherwise, the string is OK to use as a page\\r\\n       return true;\\r\\n     }\\r\\n\\r\\n    // @dev CONTRACT ADMINISTRATION\\r\\n\\r\\n    /** @dev Allows the contract owner to update the posting fee.\\r\\n      * @param _newPostingFee The new posting fee in Wei.\\r\\n      */\\r\\n    function contractOwnerUpdatePostingFee(uint256 _newPostingFee) external onlyOwner() {\\r\\n      postingFee = _newPostingFee;\\r\\n    }\\r\\n\\r\\n    /** @dev Allows the contract owner to update the page fee.\\r\\n      * @param _newPageFee The new posting fee in Wei.\\r\\n      */\\r\\n    function contractOwnerUpdatePageFee(uint256 _newPageFee) external onlyOwner() {\\r\\n      pageFee = _newPageFee;\\r\\n    }\\r\\n\\r\\n    /** @dev Allows the contract owner to update the contractTipPercentage.\\r\\n      * @param _newcontractTipPercentage The new contractTipPercentage fee in basis point (1/10,000th)s (e.g., 200 = 2.00%).\\r\\n      */\\r\\n    function contractOwnerUpdatecontractTipPercentage(uint16 _newcontractTipPercentage) external onlyOwner() {\\r\\n      contractTipPercentage = _newcontractTipPercentage;\\r\\n    }\\r\\n\\r\\n    /** @dev Allows the contract owner to update the posterTipPercentage.\\r\\n      * @param _newposterTipPercentage The new posterTipPercentage fee in basis point (1/10,000th)s (e.g., 1000 = 10.00%).\\r\\n      */\\r\\n    function contractOwnerUpdateposterTipPercentage(uint16 _newposterTipPercentage) external onlyOwner() {\\r\\n      posterTipPercentage = _newposterTipPercentage;\\r\\n    }\\r\\n\\r\\n    /** @dev Allows the contract owner to update the contractSecondaryRoyaltyPercentage.\\r\\n      * @param _newContractSecondaryRoyaltyPercentage The new contractSecondaryRoyaltyPercentage fee in basis point (1/10,000th)s (e.g., 20 = 10.0%).\\r\\n      */\\r\\n    function contractOwnerUpdateContractSecondaryRoyaltyPercentage(uint16 _newContractSecondaryRoyaltyPercentage) external onlyOwner() {\\r\\n      require(_newContractSecondaryRoyaltyPercentage \\u003c= 1000, \\\"too big\\\");\\r\\n      contractSecondaryRoyaltyPercentage = _newContractSecondaryRoyaltyPercentage;\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @author Gutenblock.eth\\r\\n/// @title ImmutablesOptionalMetadataServer\\r\\ncontract ImmutablesOptionalMetadataServer is Ownable {\\r\\n    /// @dev Stores the base web address for the Immutables web server.\\r\\n    string public immutablesWEB;\\r\\n    /// @dev Stores the base URI for the Immutables Metadata server.\\r\\n    string public immutablesURI;\\r\\n    /// @dev Whether to serve metadata from the server, or from the contract.\\r\\n    bool public useMetadataServer;\\r\\n\\r\\n    constructor () {\\r\\n      immutablesWEB = \\\"http://immutables.co/\\\";\\r\\n      immutablesURI = \\\"http://nft.immutables.co/\\\";\\r\\n      useMetadataServer = false;\\r\\n    }\\r\\n\\r\\n    /** @dev Allows the contract owner to update the website URL.\\r\\n      * @param _newImmutablesWEB The new website URL as a string.\\r\\n      */\\r\\n    function contractOwnerUpdateWebsite(string calldata _newImmutablesWEB) external onlyOwner() {\\r\\n      immutablesWEB = _newImmutablesWEB;\\r\\n    }\\r\\n\\r\\n    /** @dev Allows the contract owner to update the metadata server URL.\\r\\n      * @param _newImmutablesURI The new metadata server url as a string.\\r\\n      */\\r\\n    function contractOwnerUpdateAPIURL(string calldata _newImmutablesURI) external onlyOwner() {\\r\\n      immutablesURI = _newImmutablesURI;\\r\\n    }\\r\\n\\r\\n    /** @dev Allows the contract owner to set the metadata source.\\r\\n      * @param _shouldUseMetadataServer true or false\\r\\n      */\\r\\n    function contractOwnerUpdateUseMetadataServer(bool _shouldUseMetadataServer) external onlyOwner() {\\r\\n      useMetadataServer = _shouldUseMetadataServer;\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @author Gutenblock.eth\\r\\n/// @title Immutables - Ownable Pages\\r\\ncontract Immutables is ImmutablesAdminPostPage, ImmutablesOptionalMetadataServer, ERC721, IERC2981 {\\r\\n    using Strings for uint256;\\r\\n    using Address for address payable;\\r\\n\\r\\n    /// @dev GLOBAL VARIABLES\\r\\n    /// @dev The total suppliy of tokens (Pages).\\r\\n    uint256 public maxTotalSupply;\\r\\n    /// @dev The last tokenId minted.\\r\\n    uint256 public currentTokenId;\\r\\n\\r\\n    /// @dev The metadata description provided by the contract for all tokens.\\r\\n    string public globalMetadataDescription;\\r\\n\\r\\n    /// @dev Template Cloneable Royalty Manager Contract\\r\\n    ImmutablesPageRoyaltyManager public implementation;\\r\\n\\r\\n    /// @dev Mappings between the page string and tokenId.\\r\\n    mapping(string =\\u003e uint256) public pageToTokenId;\\r\\n    mapping(uint256 =\\u003e string) public tokenIdToPage;\\r\\n\\r\\n    mapping(uint256 =\\u003e address) public tokenIdToRoyaltyAddress;\\r\\n    mapping(uint256 =\\u003e uint16) public tokenIdToSecondaryRoyaltyPercent;\\r\\n\\r\\n    /// @dev EVENTS\\r\\n\\r\\n    event PaymentReceived(address from, uint256 amount);\\r\\n\\r\\n    event AddressReservedPage(address indexed owner, uint256 tokenId, string page, address manager);\\r\\n\\r\\n    // @dev CONSTRUCTOR\\r\\n\\r\\n    constructor() ERC721(\\\"Immutables\\\", \\\"][\\\") ImmutablesOptionalMetadataServer() {\\r\\n      postingFee = 0 ether;\\r\\n      pageFee = 0 ether;\\r\\n\\r\\n      maxTotalSupply = ~uint256(0);\\r\\n      currentTokenId = 0;\\r\\n\\r\\n      curator = address(0);\\r\\n      curatorPercent = 0;\\r\\n\\r\\n      beneficiary = address(0);\\r\\n      beneficiaryPercent = 0;\\r\\n\\r\\n      contractTipPercentage = 250; //  2.50%\\r\\n      posterTipPercentage = 1000;  // 10.00%\\r\\n      contractSecondaryRoyaltyPercentage = 1000; // 10.00%\\r\\n\\r\\n      globalMetadataDescription = \\\"Immutables are NFTs stored completely on the Ethereum Blockchain.\\\";\\r\\n\\r\\n      isTeammember[msg.sender] = true;\\r\\n      emit AdminModifiedTeammembers(msg.sender, true);\\r\\n\\r\\n      implementation = new ImmutablesPageRoyaltyManager();\\r\\n      implementation.initialize(address(this), 1, \\\"I\\\", address(this), 10000, address(0), 0);\\r\\n    }\\r\\n\\r\\n    /// @dev FINANCIAL\\r\\n\\r\\n    receive() external payable virtual {\\r\\n        emit PaymentReceived(_msgSender(), msg.value);\\r\\n    }\\r\\n\\r\\n    // @dev HELPER FUNCTIONS\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n      return immutablesURI;\\r\\n    }\\r\\n\\r\\n    // @dev DATA INSERTION: TEXT\\r\\n\\r\\n    /** @dev Allows anyone to log data into the contract with a page _page, optional citation _tag, and content.\\r\\n      * @param _page A page value (like an account)\\r\\n      * @param _tag A citation to other data (like a parent post, another transaction, etc.)\\r\\n      * @param _content A content string to log into the page with the optional citation.\\r\\n      */\\r\\n    function anyonePostPageTagContent(string calldata _page, string calldata _tag, string calldata _content) external payable {\\r\\n        require(msg.value \\u003e= postingFee, \\\"posting fee\\\");\\r\\n        require(bytes(_page).length \\u003e 0, \\\"page name\\\");\\r\\n        if(userScreeningEnabled) {\\r\\n          // If user screening is enabled,\\r\\n          //    the user must be an allowed user, or the owner of the page, and\\r\\n          //    the user must be posting in a public page, or the page they own.\\r\\n          require(\\r\\n            (isAllowedUser[msg.sender] || ownerOf(pageToTokenId[_page]) == msg.sender) \\u0026\\u0026\\r\\n            (!this.isValidPageName(_page) || ownerOf(pageToTokenId[_page]) == msg.sender)\\r\\n          , \\\"auth\\\");\\r\\n        } else {\\r\\n          // If user screening is not enabled,\\r\\n          //    Anyone can post in a public page, or\\r\\n          //    a page that they own.\\r\\n          require(!this.isValidPageName(_page) || ownerOf(pageToTokenId[_page]) == msg.sender, \\\"auth\\\");\\r\\n        }\\r\\n        bytes32 _pageHash = keccak256(abi.encodePacked(_page));\\r\\n        bytes32 _tagHash = keccak256(abi.encodePacked(_tag));\\r\\n\\r\\n        emit AddressPostedPageTagContent(msg.sender, _pageHash, _tagHash, _page, _tag, _content);\\r\\n    }\\r\\n\\r\\n    // @dev DATA INSERTION: VALUE\\r\\n\\r\\n    /** @dev Allows anyone to pay into the contract with a page _page, optional post transaction Hash, and poster address.\\r\\n      * @dev Payment is split between page owner, poster, and contract.\\r\\n      * @param _page An optional page value.\\r\\n      * @param _postTransactionHash An optional citation to a post transaction hash.\\r\\n      * @param _poster The address of the poster of the post to tip.\\r\\n      */\\r\\n    function anyonePayPagePostPosterValue(string calldata _page, string calldata _postTransactionHash, address _poster) external payable nonReentrant() {\\r\\n        // checks\\r\\n        require(msg.value \\u003e 0, \\\"value\\\");\\r\\n        require(bytes(_postTransactionHash).length == 66, \\\"txhash\\\");\\r\\n\\r\\n        // effects\\r\\n        bytes32 _pageHash = \\\"\\\";\\r\\n        bytes32 _tagHash = keccak256(abi.encodePacked(\\u0027V\\u0027,_postTransactionHash));\\r\\n        string memory _tag = string(abi.encodePacked(\\u0027V\\u0027,_postTransactionHash));\\r\\n\\r\\n        if(bytes(_page).length == 0) {\\r\\n          // If there is no page specified\\r\\n          uint256 _contractValue = msg.value * contractTipPercentage / 10000;\\r\\n          uint256 _posterValue = msg.value - _contractValue;\\r\\n          // interaction: pay the poster\\r\\n          payable(_poster).sendValue(_posterValue);\\r\\n        } else {\\r\\n          // If a page is specified\\r\\n          address _pageOwner = ownerOf(pageToTokenId[_page]);\\r\\n          _pageHash = keccak256(abi.encodePacked(_page));\\r\\n\\r\\n          uint256 _contractValue = msg.value * contractTipPercentage / 10000;\\r\\n          uint256 _posterValue = msg.value * posterTipPercentage / 10000;\\r\\n          uint256 _pageOwnerValue = msg.value - _contractValue - _posterValue;\\r\\n\\r\\n          // interaction: pay the page owner, and pay the poster\\r\\n          payable(_pageOwner).sendValue(_pageOwnerValue);\\r\\n          payable(_poster).sendValue(_posterValue);\\r\\n        }\\r\\n        emit AddressPaidPageTagValue(msg.sender, _pageHash, _tagHash, _page, _tag, msg.value);\\r\\n    }\\r\\n\\r\\n    // @dev RESERVE PAGE\\r\\n\\r\\n    /** @dev Allows anyone to reserve an unclaimed reservable page.\\r\\n      * @param _page A page name to reserve.\\r\\n      */\\r\\n    function anyoneReserveUnclaimedPage(string calldata _page) external payable onlyAllowedUser() {\\r\\n      require(msg.value \\u003e= pageFee, \\\"page fee\\\");\\r\\n      require(currentTokenId \\u003c maxTotalSupply, \\\"sold out\\\");\\r\\n      require(isValidPageName(_page), \\\"invalid name\\\");\\r\\n      require(pageToTokenId[_page] == 0, \\\"page taken\\\");\\r\\n\\r\\n      currentTokenId++;\\r\\n      uint256 _newTokenId = currentTokenId;\\r\\n      _mint(msg.sender, _newTokenId);\\r\\n\\r\\n      pageToTokenId[_page] = _newTokenId;\\r\\n      tokenIdToPage[_newTokenId] = _page;\\r\\n\\r\\n      setupImmutablesPageRoyaltyManagerForTokenId(_newTokenId);\\r\\n\\r\\n      emit AddressReservedPage(msg.sender, _newTokenId, _page, tokenIdToRoyaltyAddress[_newTokenId]);\\r\\n    }\\r\\n\\r\\n    /** @dev Clones a Royalty Manager Contract for a new Token ID\\r\\n      * @param _tokenId the TokenId.\\r\\n      */\\r\\n    function setupImmutablesPageRoyaltyManagerForTokenId(uint256 _tokenId) internal {\\r\\n        // checks\\r\\n        require(tokenIdToRoyaltyAddress[_tokenId] == address(0), \\\"royalty manager already exists for _tokenId\\\");\\r\\n\\r\\n        // effects\\r\\n        address _newManager = Clones.clone(address(implementation));\\r\\n        tokenIdToRoyaltyAddress[_tokenId] = address(_newManager);\\r\\n        tokenIdToSecondaryRoyaltyPercent[_tokenId] = 1000;  // 10.00%\\r\\n\\r\\n        // interactions\\r\\n        ImmutablesPageRoyaltyManager(payable(_newManager)).initialize(\\r\\n            address(this),\\r\\n            _tokenId, tokenIdToPage[_tokenId],\\r\\n            ownerOf(_tokenId), 10000-contractSecondaryRoyaltyPercentage,\\r\\n            address(0), 0\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // @dev ROYALTIES - IERC2981\\r\\n\\r\\n    /** @dev IERC2981 royaltyInfo function\\r\\n      * @param _tokenId The tokenId for which royaltyInfo is being requested.\\r\\n      * @param _salePrice The sales price to calculate the royalty from.\\r\\n      * @return receiver the royalty recipient.\\r\\n      * @return royaltyAmount the royalty amount.\\r\\n      */\\r\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view override returns (address receiver, uint256 royaltyAmount) {\\r\\n      return (tokenIdToRoyaltyAddress[_tokenId], _salePrice * tokenIdToSecondaryRoyaltyPercent[_tokenId] / 10000);\\r\\n    }\\r\\n\\r\\n    /** @dev Allows contract owner or the current royalty recipient to change\\r\\n      * @dev the receiver or percentage for a specified tokenId.\\r\\n      * @param _tokenId The tokenId.\\r\\n      * @param _newRoyaltyRecipient The new royalty receipient.\\r\\n      * @param _royaltyPercent The new royalty percent.\\r\\n      */\\r\\n    function royaltyRecipientUpdateRoyaltyInfo(uint256 _tokenId, address _newRoyaltyRecipient, uint16 _royaltyPercent) external {\\r\\n      require(ImmutablesPageRoyaltyManager(payable(tokenIdToRoyaltyAddress[_tokenId])).royaltyRecipient() == msg.sender, \\\"auth\\\");\\r\\n      require(_royaltyPercent \\u003e= 0 \\u0026\\u0026 _royaltyPercent \\u003c= 1000, \\\"percent\\\"); // 0% to 10.00%\\r\\n      ImmutablesPageRoyaltyManager(payable(tokenIdToRoyaltyAddress[_tokenId])).royaltyRecipientUpdateAddress(_newRoyaltyRecipient);\\r\\n      tokenIdToSecondaryRoyaltyPercent[_tokenId] = _royaltyPercent;\\r\\n    }\\r\\n\\r\\n    /** @dev Allows the royaltyRecipient to update additional payee info for a\\r\\n      * @dev spedified tokenId.\\r\\n      * @param _tokenId the tokenId.\\r\\n      * @param _additionalPayee the additional payee address.\\r\\n      * @param _additionalPayeePercent the basis point (1/10,000th) share for the _additionalPayee up to artistPercent (e.g., 5000 = 50.0%).\\r\\n      */\\r\\n    function royaltyRecipientUpdateTokenAdditionalPayeeInfo(uint256 _tokenId, address _additionalPayee, uint16 _additionalPayeePercent) external  {\\r\\n        // checks\\r\\n        require(ImmutablesPageRoyaltyManager(payable(tokenIdToRoyaltyAddress[_tokenId])).royaltyRecipient() == msg.sender, \\\"auth\\\");\\r\\n        // effects\\r\\n        // interactions\\r\\n        ImmutablesPageRoyaltyManager(payable(tokenIdToRoyaltyAddress[_tokenId])).royaltyRecipientUpdateAdditionalPayeeInfo(_additionalPayee, _additionalPayeePercent);\\r\\n    }\\r\\n\\r\\n    /** @dev Releases funds from a Royalty Manager for a Token Id\\r\\n      * @param _tokenId the tokenId.\\r\\n      */\\r\\n    function releaseRoyaltiesForTokenId(uint256 _tokenId) external {\\r\\n        ImmutablesPageRoyaltyManager(payable(tokenIdToRoyaltyAddress[_tokenId])).release();\\r\\n    }\\r\\n\\r\\n    // @dev METADATA\\r\\n\\r\\n    /** @dev Returns a string from a uint256\\r\\n      * @param value uint256 data type string\\r\\n      * @return _ string data type.\\r\\n      */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n            if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /** @dev Returns a simple SVG for a tokenId\\r\\n      * @param _tokenId uint256 tokenId to get the SVG for\\r\\n      * @return _ string SVG for image of tokenId\\r\\n      */\\r\\n    function getSVGForTokenId(uint256 _tokenId) public view returns (string memory) {\\r\\n      string memory output = \\u0027\\u003csvg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 350 350\\\"\\u003e\\u003cstyle\\u003e .edition { fill: #F5F5F5; font-family: Open Sans; font-size: 12px; } .base { fill: #F5F5F5; font-family: Open Sans; font-size: 180px; } \\u003c/style\\u003e \\u003crect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#708090\\\" /\\u003e \\u003ctext class=\\\"edition\\\" x=\\\"50%\\\" y=\\\"5%\\\" dominant-baseline=\\\"middle\\\" text-anchor=\\\"middle\\\"\\u003e\\u0027;\\r\\n      output = string(abi.encodePacked(output, tokenIdToPage[_tokenId]));\\r\\n      output = string(abi.encodePacked(output,\\u0027\\u003c/text\\u003e\\u003ctext class=\\\"edition\\\" x=\\\"50%\\\" y=\\\"10%\\\" dominant-baseline=\\\"middle\\\" text-anchor=\\\"middle\\\"\\u003e][ # \\u0027, toString(_tokenId)));\\r\\n      output = string(abi.encodePacked(output,\\u0027\\u003c/text\\u003e\\u003ctext class=\\\"base\\\" x=\\\"50%\\\" y = \\\"50%\\\" dominant-baseline=\\\"middle\\\" text-anchor=\\\"middle\\\"\\u003e][\\u003c/text\\u003e\\u003c/svg\\u003e\\u0027));\\r\\n      return output;\\r\\n    }\\r\\n\\r\\n    /** @dev Allows the contract owner to update the globalMetadataDescription.\\r\\n      * @param _newDescription The new desciption text\\r\\n      */\\r\\n    function contractOwnerUpdateGlobalMetadataDescription(string calldata _newDescription) external onlyOwner() {\\r\\n      globalMetadataDescription = _newDescription;\\r\\n    }\\r\\n\\r\\n    function getMetadataStringForTokenId(uint256 _tokenId) internal view returns (string memory) {\\r\\n      string memory _url = string(abi.encodePacked(immutablesWEB, \\u0027#/\\u0027, tokenIdToPage[_tokenId]));\\r\\n      string memory output = string(\\r\\n        abi.encodePacked(\\r\\n          \\u0027{\\\"name\\\": \\\"][ \\u0027,\\r\\n          tokenIdToPage[_tokenId],\\r\\n          \\u0027\\\", \\\"description\\\": \\\"\\u0027, globalMetadataDescription, \\u0027 ( \\u0027, _url, \\u0027 ).\\\", \\\"external_url\\\": \\\"\\u0027, _url\\r\\n        )\\r\\n      );\\r\\n      return output;\\r\\n    }\\r\\n\\r\\n    /** @dev Returns a tokenURI URL or Metadata string depending on useMetadataServer\\r\\n      * @param _tokenId The _token to return the URI or Metadata for.\\r\\n      * @return _ String of a URI or Base64 encoded metadata and image string.\\r\\n      */\\r\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\r\\n      require(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n      if(useMetadataServer) { // IF THE METADATA SERVER IS IN USE RETURN A URL\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length \\u003e 0 ? string(abi.encodePacked(baseURI, _tokenId.toString())) : \\\"\\\";\\r\\n      } else { // ELSE WE ARE SERVERLESS AND RETURN METADATA DIRECTLY h/t DEAFBEEF FIRST NFT\\r\\n        string memory json = Base64.encode(\\r\\n          bytes(\\r\\n            string(\\r\\n              abi.encodePacked(\\r\\n                getMetadataStringForTokenId(_tokenId),\\r\\n                \\u0027\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,\\u0027,\\r\\n                Base64.encode(bytes(getSVGForTokenId(_tokenId))),\\r\\n                \\u0027\\\"}\\u0027\\r\\n              )\\r\\n            )\\r\\n          )\\r\\n        );\\r\\n        json = string(abi.encodePacked(\\u0027data:application/json;base64,\\u0027, json));\\r\\n        return json;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    /** @dev Determines if a string is a valid page that is not taken.\\r\\n      * @param _str The proposed page name.\\r\\n      * @return _ Whether the page is valid and available to purchase.\\r\\n      */\\r\\n    function isValidAndAvailablePageName(string calldata _str) public view returns (bool) {\\r\\n      bool vaild = isValidPageName(_str);\\r\\n      return ((pageToTokenId[_str] == 0) \\u0026\\u0026 vaild);\\r\\n    }\\r\\n\\r\\n    /** @dev Allows the contract owner to update the max number of pages.\\r\\n      * @param _newMaxTotalSupply The new max total supply.\\r\\n      */\\r\\n    function contractOwnerUpdateMaxTotalSupply(uint256 _newMaxTotalSupply) external onlyOwner() {\\r\\n      require(_newMaxTotalSupply \\u003e= currentTokenId, \\\"Can not set maxTotalSupply to a value lower than currentTokenId.\\\");\\r\\n      maxTotalSupply = _newMaxTotalSupply;\\r\\n    }\\r\\n}\\r\\n\\r\\n/// [MIT License]\\r\\n/// @title Base64\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\n/// @author Brecht Devos \\u003cbrecht@loopring.org\\u003e\\r\\nlibrary Base64 {\\r\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    /// @notice Encodes some bytes to the base64 representation\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        uint256 len = data.length;\\r\\n        if (len == 0) return \\\"\\\";\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\r\\n\\r\\n        // Add some extra buffer at the end\\r\\n        bytes memory result = new bytes(encodedLen + 32);\\r\\n\\r\\n        bytes memory table = TABLE;\\r\\n\\r\\n        assembly {\\r\\n            let tablePtr := add(table, 1)\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            for {\\r\\n                let i := 0\\r\\n            } lt(i, len) {\\r\\n\\r\\n            } {\\r\\n                i := add(i, 3)\\r\\n                let input := and(mload(add(data, i)), 0xffffff)\\r\\n\\r\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\r\\n                out := shl(224, out)\\r\\n\\r\\n                mstore(resultPtr, out)\\r\\n\\r\\n                resultPtr := add(resultPtr, 4)\\r\\n            }\\r\\n\\r\\n            switch mod(len, 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n\\r\\n            mstore(result, encodedLen)\\r\\n        }\\r\\n\\r\\n        return string(result);\\r\\n    }\\r\\n}\\r\\n\"},\"ImmutablesPageRoyaltyManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// All Rights Reserved\\r\\n\\r\\n/*\\r\\n$$$$$$\\\\ $$\\\\      $$\\\\ $$\\\\      $$\\\\ $$\\\\   $$\\\\ $$$$$$$$\\\\  $$$$$$\\\\  $$$$$$$\\\\  $$\\\\       $$$$$$$$\\\\  $$$$$$\\\\\\r\\n\\\\_$$  _|$$$\\\\    $$$ |$$$\\\\    $$$ |$$ |  $$ |\\\\__$$  __|$$  __$$\\\\ $$  __$$\\\\ $$ |      $$  _____|$$  __$$\\\\\\r\\n  $$ |  $$$$\\\\  $$$$ |$$$$\\\\  $$$$ |$$ |  $$ |   $$ |   $$ /  $$ |$$ |  $$ |$$ |      $$ |      $$ /  \\\\__|\\r\\n  $$ |  $$\\\\$$\\\\$$ $$ |$$\\\\$$\\\\$$ $$ |$$ |  $$ |   $$ |   $$$$$$$$ |$$$$$$$\\\\ |$$ |      $$$$$\\\\    \\\\$$$$$$\\\\\\r\\n  $$ |  $$ \\\\$$$  $$ |$$ \\\\$$$  $$ |$$ |  $$ |   $$ |   $$  __$$ |$$  __$$\\\\ $$ |      $$  __|    \\\\____$$\\\\\\r\\n  $$ |  $$ |\\\\$  /$$ |$$ |\\\\$  /$$ |$$ |  $$ |   $$ |   $$ |  $$ |$$ |  $$ |$$ |      $$ |      $$\\\\   $$ |\\r\\n$$$$$$\\\\ $$ | \\\\_/ $$ |$$ | \\\\_/ $$ |\\\\$$$$$$  |   $$ |   $$ |  $$ |$$$$$$$  |$$$$$$$$\\\\ $$$$$$$$\\\\ \\\\$$$$$$  |\\r\\n\\\\______|\\\\__|     \\\\__|\\\\__|     \\\\__| \\\\______/    \\\\__|   \\\\__|  \\\\__|\\\\_______/ \\\\________|\\\\________| \\\\______/\\r\\n$$$$$$$\\\\   $$$$$$\\\\ $$\\\\     $$\\\\  $$$$$$\\\\  $$\\\\    $$$$$$$$\\\\ $$\\\\     $$\\\\\\r\\n$$  __$$\\\\ $$  __$$\\\\\\\\$$\\\\   $$  |$$  __$$\\\\ $$ |   \\\\__$$  __|\\\\$$\\\\   $$  |\\r\\n$$ |  $$ |$$ /  $$ |\\\\$$\\\\ $$  / $$ /  $$ |$$ |      $$ |    \\\\$$\\\\ $$  /\\r\\n$$$$$$$  |$$ |  $$ | \\\\$$$$  /  $$$$$$$$ |$$ |      $$ |     \\\\$$$$  /\\r\\n$$  __$$\\u003c $$ |  $$ |  \\\\$$  /   $$  __$$ |$$ |      $$ |      \\\\$$  /\\r\\n$$ |  $$ |$$ |  $$ |   $$ |    $$ |  $$ |$$ |      $$ |       $$ |\\r\\n$$ |  $$ | $$$$$$  |   $$ |    $$ |  $$ |$$$$$$$$\\\\ $$ |       $$ |\\r\\n\\\\__|  \\\\__| \\\\______/    \\\\__|    \\\\__|  \\\\__|\\\\________|\\\\__|       \\\\__|\\r\\n$$\\\\      $$\\\\  $$$$$$\\\\  $$\\\\   $$\\\\  $$$$$$\\\\   $$$$$$\\\\  $$$$$$$$\\\\ $$$$$$$\\\\\\r\\n$$$\\\\    $$$ |$$  __$$\\\\ $$$\\\\  $$ |$$  __$$\\\\ $$  __$$\\\\ $$  _____|$$  __$$\\\\\\r\\n$$$$\\\\  $$$$ |$$ /  $$ |$$$$\\\\ $$ |$$ /  $$ |$$ /  \\\\__|$$ |      $$ |  $$ |\\r\\n$$\\\\$$\\\\$$ $$ |$$$$$$$$ |$$ $$\\\\$$ |$$$$$$$$ |$$ |$$$$\\\\ $$$$$\\\\    $$$$$$$  |\\r\\n$$ \\\\$$$  $$ |$$  __$$ |$$ \\\\$$$$ |$$  __$$ |$$ |\\\\_$$ |$$  __|   $$  __$$\\u003c\\r\\n$$ |\\\\$  /$$ |$$ |  $$ |$$ |\\\\$$$ |$$ |  $$ |$$ |  $$ |$$ |      $$ |  $$ |\\r\\n$$ | \\\\_/ $$ |$$ |  $$ |$$ | \\\\$$ |$$ |  $$ |\\\\$$$$$$  |$$$$$$$$\\\\ $$ |  $$ |\\r\\n\\\\__|     \\\\__|\\\\__|  \\\\__|\\\\__|  \\\\__|\\\\__|  \\\\__| \\\\______/ \\\\________|\\\\__|  \\\\__|\\r\\n*/\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @royaltyRecipient Gutenblock.eth\\r\\n * @title ImmutablesPageRoyaltyManager\\r\\n * @dev This contract allows to split Ether royalty payments between the\\r\\n * Immutables.co contract and an Immutables.co page royaltyRecipient.\\r\\n *\\r\\n * `ImmutablesPageRoyaltyManager` follows a _pull payment_ model. This means that payments\\r\\n * are not automatically forwarded to the accounts but kept in this contract,\\r\\n * and the actual transfer is triggered as a separate step by calling the\\r\\n * {release} function.\\r\\n *\\r\\n * The contract is written to serve as an implementation for minimal proxy clones.\\r\\n */\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./Initializable.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract ImmutablesPageRoyaltyManager is Context, Initializable, ReentrancyGuard {\\r\\n    using Address for address payable;\\r\\n\\r\\n    /// @dev Reentrancy protection.\\r\\n    //bool locked = false;\\r\\n\\r\\n    /// @dev The address of the ImmutablesPage contract.\\r\\n    address public immutablesPageContract;\\r\\n    /// @dev The tokenId of the associated ImmutablesPage.\\r\\n    uint256 public immutablesPageTokenId;\\r\\n    /// @dev The name of the associated ImmutablesPage.\\r\\n    string public immutablesPage;\\r\\n\\r\\n    /// @dev The address of the royaltyRecipient.\\r\\n    address public royaltyRecipient;\\r\\n    /// @dev The address of the additionalPayee set by the royaltyRecipient.\\r\\n    address public additionalPayee;\\r\\n    /// @dev The royaltyRecipient\\u0027s percentage of the total expressed as 1/1000ths.\\r\\n    ///      The royaltyRecipient can allot up to all of this to an additionalPayee.\\r\\n    uint16 public royaltyRecipientPercent;\\r\\n    /// @dev The royaltyRecipient\\u0027s percentage, after additional payee,\\r\\n    ///      of the total expressed in basis points.\\r\\n    uint16 public royaltyRecipientPercentMinusAdditionalPayeePercent;\\r\\n    /// @dev The royaltyRecipient\\u0027s additional payee percentae of the total\\r\\n    /// @dev expressed in basis points.  Valid from 0 to royaltyRecipientPercent.\\r\\n    uint16 public additionalPayeePercent;\\r\\n\\r\\n    /// EVENTS\\r\\n\\r\\n    event PayeeAdded(address account, uint256 percent);\\r\\n    event PayeeRemoved(address account, uint256 percent);\\r\\n    event PaymentReleased(address to, uint256 amount);\\r\\n    event PaymentReceived(address from, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Creates an uninitialized instance of `ImmutablesPageRoyaltyManager`.\\r\\n     */\\r\\n    constructor() { }\\r\\n\\r\\n    /**\\r\\n     * @dev Initialized an instance of `ImmutablesPageRoyaltyManager`\\r\\n     */\\r\\n    function initialize(address _immutablesPageContract,\\r\\n                        uint256 _immutablesPageTokenId, string calldata _immutablesPage,\\r\\n                        address _royaltyRecipient, uint16 _royaltyRecipientPercent,\\r\\n                        address _additionalPayee, uint16 _additionalPayeePercent\\r\\n                        ) public initializer() {\\r\\n        immutablesPageContract = _immutablesPageContract;\\r\\n        immutablesPageTokenId = _immutablesPageTokenId;\\r\\n        immutablesPage = _immutablesPage;\\r\\n\\r\\n        royaltyRecipient = _royaltyRecipient;\\r\\n        royaltyRecipientPercent = _royaltyRecipientPercent;\\r\\n        additionalPayee = _additionalPayee;\\r\\n        additionalPayeePercent = _additionalPayeePercent;\\r\\n        royaltyRecipientPercentMinusAdditionalPayeePercent = _royaltyRecipientPercent - _additionalPayeePercent;\\r\\n\\r\\n        emit PayeeAdded(immutablesPageContract, 10000 - royaltyRecipientPercent);\\r\\n        emit PayeeAdded(royaltyRecipient, royaltyRecipientPercentMinusAdditionalPayeePercent);\\r\\n        if(additionalPayee != address(0)) {\\r\\n          emit PayeeAdded(additionalPayee, additionalPayeePercent);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\r\\n     * reliable: it\\u0027s possible for a contract to receive Ether without triggering this function. This only affects the\\r\\n     * reliability of the events, and not the actual splitting of Ether.\\r\\n     *\\r\\n     * To learn more about this see the Solidity documentation for\\r\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\r\\n     * functions].\\r\\n     */\\r\\n    receive() external payable virtual {\\r\\n        emit PaymentReceived(_msgSender(), msg.value);\\r\\n    }\\r\\n\\r\\n    /** @dev Allows the current royalty recipient to set/update the royalty recipieint address.\\r\\n      * @param _newRoyaltyRecipient The new royalty recipieint.\\r\\n      */\\r\\n    function royaltyRecipientUpdateAddress(address _newRoyaltyRecipient) public {\\r\\n        // only the parent contract and the royaltyRecipient can call this function.\\r\\n        // the parent contract only calls this function at the request of the royaltyRecipient.\\r\\n        require(_msgSender() == immutablesPageContract || _msgSender() == royaltyRecipient, \\\"auth\\\");\\r\\n\\r\\n        // update the royaltyRecipient address\\r\\n        emit PayeeRemoved(royaltyRecipient, royaltyRecipientPercentMinusAdditionalPayeePercent);\\r\\n        royaltyRecipient = _newRoyaltyRecipient;\\r\\n        emit PayeeAdded(royaltyRecipient, royaltyRecipientPercentMinusAdditionalPayeePercent);\\r\\n    }\\r\\n\\r\\n    /** @dev Allows the current royalty recipient to update additional payee information.\\r\\n      * @param _newAdditionalPayee The new additional payee.\\r\\n      * @param _newPercent A new additional payee percentage in basis points.\\r\\n      */\\r\\n\\r\\n    /** @dev Allows the royaltyRecipient to update additional payee info.\\r\\n      * @param _newAdditionalPayee the additional payee address.\\r\\n      * @param _newPercent the basis point (1/10,000th) share for the _additionalPayee up to artistPercent (e.g., 5000 = 50.0%).\\r\\n      */\\r\\n    function royaltyRecipientUpdateAdditionalPayeeInfo(address _newAdditionalPayee, uint16 _newPercent) public {\\r\\n        // only the parent contract and the royaltyRecipient can call this function.\\r\\n        // the parent contract only calls this function at the request of the royaltyRecipient.\\r\\n        require(_msgSender() == immutablesPageContract || _msgSender() == royaltyRecipient, \\\"auth\\\");\\r\\n\\r\\n        // the maximum amount the royaltyRecipient can give to an additional payee is\\r\\n        // the current royaltyRecipientPercent plus the current additionalPayeePercent.\\r\\n        require(_newPercent \\u003c= royaltyRecipientPercent, \\\"percent too big\\\");\\r\\n\\r\\n        // Before changing the additional payee information,\\r\\n        // payout everyone as indicated when prior payments were made.\\r\\n        release();\\r\\n\\r\\n        // Change the additional payee and relevant percentages.\\r\\n        emit PayeeRemoved(royaltyRecipient, royaltyRecipientPercentMinusAdditionalPayeePercent);\\r\\n        if(additionalPayee != address(0)) {\\r\\n          emit PayeeRemoved(additionalPayee, additionalPayeePercent);\\r\\n        }\\r\\n\\r\\n        additionalPayee = _newAdditionalPayee;\\r\\n        additionalPayeePercent = _newPercent;\\r\\n        royaltyRecipientPercentMinusAdditionalPayeePercent = royaltyRecipientPercent - _newPercent;\\r\\n\\r\\n        emit PayeeAdded(royaltyRecipient, royaltyRecipientPercentMinusAdditionalPayeePercent);\\r\\n        if(additionalPayee != address(0)) {\\r\\n          emit PayeeAdded(additionalPayee, additionalPayeePercent);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers payout of all royalties.\\r\\n     */\\r\\n    function release() public virtual nonReentrant() {\\r\\n        // checks\\r\\n        // effects\\r\\n        uint256 _startingBalance = address(this).balance;\\r\\n        uint256 _royaltyRecipientAmount = _startingBalance * royaltyRecipientPercentMinusAdditionalPayeePercent / 10000;\\r\\n        uint256 _additionalPayeeAmount = _startingBalance * additionalPayeePercent / 10000;\\r\\n        uint256 _contractAmount = _startingBalance - _royaltyRecipientAmount - _additionalPayeeAmount;\\r\\n\\r\\n        // interactions\\r\\n        if(_startingBalance \\u003e 0) {\\r\\n          payable(immutablesPageContract).sendValue(_contractAmount);\\r\\n          emit PaymentReleased(immutablesPageContract, _contractAmount);\\r\\n\\r\\n          payable(royaltyRecipient).sendValue(_royaltyRecipientAmount);\\r\\n          emit PaymentReleased(royaltyRecipient, _royaltyRecipientAmount);\\r\\n        }\\r\\n\\r\\n        if(_startingBalance \\u003e 0 \\u0026\\u0026 additionalPayee != address(0) \\u0026\\u0026 additionalPayeePercent \\u003e 0) {\\r\\n          payable(additionalPayee).sendValue(_additionalPayeeAmount);\\r\\n          emit PaymentReleased(additionalPayee, _additionalPayeeAmount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can\\u0027t have a constructor, it\\u0027s common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp \\u003e\\u003e= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poster\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pageHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tagHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"page\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AddressPaidPageTagValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poster\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pageHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tagHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"page\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"name\":\"AddressPostedPageTagContent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"page\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"AddressReservedPage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowedUser\",\"type\":\"bool\"}],\"name\":\"AdminModifiedAllowedUsers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTeammember\",\"type\":\"bool\"}],\"name\":\"AdminModifiedTeammembers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_page\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_postTransactionHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_poster\",\"type\":\"address\"}],\"name\":\"anyonePayPagePostPosterValue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_page\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tag\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"anyonePostPageTagContent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_page\",\"type\":\"string\"}],\"name\":\"anyoneReserveUnclaimedPage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiaryPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"contractOwnerAddTeammember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"contractOwnerRemoveTeammember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newImmutablesURI\",\"type\":\"string\"}],\"name\":\"contractOwnerUpdateAPIURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBeneficiary\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_newPercent\",\"type\":\"uint16\"}],\"name\":\"contractOwnerUpdateBeneficiaryAddressAndPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newContractSecondaryRoyaltyPercentage\",\"type\":\"uint16\"}],\"name\":\"contractOwnerUpdateContractSecondaryRoyaltyPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCurator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_newPercent\",\"type\":\"uint16\"}],\"name\":\"contractOwnerUpdateCuratorAddressAndPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newDescription\",\"type\":\"string\"}],\"name\":\"contractOwnerUpdateGlobalMetadataDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"contractOwnerUpdateMaxTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPageFee\",\"type\":\"uint256\"}],\"name\":\"contractOwnerUpdatePageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPostingFee\",\"type\":\"uint256\"}],\"name\":\"contractOwnerUpdatePostingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldUseMetadataServer\",\"type\":\"bool\"}],\"name\":\"contractOwnerUpdateUseMetadataServer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newImmutablesWEB\",\"type\":\"string\"}],\"name\":\"contractOwnerUpdateWebsite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newcontractTipPercentage\",\"type\":\"uint16\"}],\"name\":\"contractOwnerUpdatecontractTipPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newposterTipPercentage\",\"type\":\"uint16\"}],\"name\":\"contractOwnerUpdateposterTipPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractSecondaryRoyaltyPercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractTipPercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curatorPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSVGForTokenId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalMetadataDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"immutablesURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"immutablesWEB\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"contract ImmutablesPageRoyaltyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAllowedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTeammember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_str\",\"type\":\"string\"}],\"name\":\"isValidAndAvailablePageName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_str\",\"type\":\"string\"}],\"name\":\"isValidPageName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"pageToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"posterTipPercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"releaseRoyaltiesForTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newRoyaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_royaltyPercent\",\"type\":\"uint16\"}],\"name\":\"royaltyRecipientUpdateRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_additionalPayee\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_additionalPayeePercent\",\"type\":\"uint16\"}],\"name\":\"royaltyRecipientUpdateTokenAdditionalPayeeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"teamAddAllowedUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"teamRemoveAllowedUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamToggleUserScreeningEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToPage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToRoyaltyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToSecondaryRoyaltyPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useMetadataServer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userScreeningEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Immutables","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bc8056d5b814ec05e02637dba6fb4be8fa815b56fff22cfc0378ccc87841b0ac"}]}