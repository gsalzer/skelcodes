{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ncontract SMPPRewardFarmers {\r\n\r\n    address private owner;\r\n    uint total_value;\r\n\r\n\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n\r\n\r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() payable{\r\n        owner = msg.sender;\r\n        emit OwnerSet(address(0), owner);\r\n        total_value = msg.value;  \r\n    }\r\n\r\n    function changeOwner(address newOwner) public isOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function charge() payable public isOwner {\r\n        total_value += msg.value;\r\n    }\r\n\r\n    receive() external payable virtual {\r\n        total_value += msg.value;\r\n    }\r\n\r\n    function sum(uint[] memory amounts) private returns (uint retVal) {\r\n        uint totalAmnt = 0;\r\n        for (uint i=0; i < amounts.length; i++) {\r\n            totalAmnt += amounts[i];\r\n        }\r\n\r\n        return totalAmnt;\r\n    }\r\n\r\n    function withdraw(address payable receiverAddr, uint receiverAmnt) private {\r\n        receiverAddr.transfer(receiverAmnt);\r\n    }\r\n\r\n    function withdrawls(address payable[] memory addrs, uint[] memory amnts) payable public isOwner {\r\n        total_value += msg.value;\r\n        require(addrs.length == amnts.length, \"The length of two array should be the same\");\r\n        uint totalAmnt = sum(amnts);\r\n        require(total_value >= totalAmnt, \"The value is not sufficient or exceed\");\r\n        for (uint i=0; i < addrs.length; i++) {\r\n            total_value -= amnts[i];\r\n            withdraw(addrs[i], amnts[i]);\r\n        }\r\n    }\r\n\r\n    function balance() public view returns(uint) {\r\n        return total_value;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amnts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawls\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SMPPRewardFarmers","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://be77250a7018ff2f9370aa6e47da44880af1fa1bd367e1d1400c9247224f1444"}]}