{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/lib/InitializableOwnable.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    SPDX-License-Identifier: Apache-2.0\r\n\r\n*/\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract InitializableOwnable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n    bool internal _INITIALIZED_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier notInitialized() {\r\n        require(!_INITIALIZED_, \"DODO_INITIALIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function initOwner(address newOwner) public notInitialized {\r\n        _INITIALIZED_ = true;\r\n        _OWNER_ = newOwner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/DODOVendingMachine/intf/IDVM.sol\r\n\r\n\r\ninterface IDVM {\r\n    function init(\r\n        address maintainer,\r\n        address baseTokenAddress,\r\n        address quoteTokenAddress,\r\n        uint256 lpFeeRate,\r\n        address mtFeeRateModel,\r\n        uint256 i,\r\n        uint256 k,\r\n        bool isOpenTWAP\r\n    ) external;\r\n\r\n    function _BASE_TOKEN_() external returns (address);\r\n\r\n    function _QUOTE_TOKEN_() external returns (address);\r\n\r\n    function _MT_FEE_RATE_MODEL_() external returns (address);\r\n\r\n    function getVaultReserve() external returns (uint256 baseReserve, uint256 quoteReserve);\r\n\r\n    function sellBase(address to) external returns (uint256);\r\n\r\n    function sellQuote(address to) external returns (uint256);\r\n\r\n    function buyShares(address to) external returns (uint256,uint256,uint256);\r\n\r\n    function addressToShortString(address _addr) external pure returns (string memory);\r\n\r\n    function getMidPrice() external view returns (uint256 midPrice);\r\n\r\n    function sellShares(\r\n        uint256 shareAmount,\r\n        address to,\r\n        uint256 baseMinAmount,\r\n        uint256 quoteMinAmount,\r\n        bytes calldata data,\r\n        uint256 deadline\r\n    ) external  returns (uint256 baseAmount, uint256 quoteAmount);\r\n\r\n}\r\n\r\n// File: contracts/GeneralizedFragment/intf/IFragment.sol\r\n\r\n\r\n\r\ninterface IFragment {\r\n\r\n    function init(\r\n      address dvm, \r\n      address vaultPreOwner,\r\n      address collateralVault,\r\n      uint256 totalSupply, \r\n      uint256 ownerRatio,\r\n      uint256 buyoutTimestamp,\r\n      address defaultMaintainer,\r\n      address buyoutModel,\r\n      uint256 distributionRatio,\r\n      string memory fragSymbol\r\n    ) external;\r\n\r\n    function buyout(address newVaultOwner) external;\r\n\r\n    function redeem(address to) external;\r\n\r\n    function _QUOTE_() external view returns (address);\r\n\r\n    function _COLLATERAL_VAULT_() external view returns (address);\r\n\r\n    function _DVM_() external view returns (address);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/Factory/Registries/DODONFTRegistry.sol\r\n\r\n\r\n\r\ninterface IDODONFTRegistry {\r\n    function addRegistry(\r\n        address vault,\r\n        address fragment, \r\n        address quoteToken,\r\n        address dvm\r\n    ) external;\r\n\r\n    function removeRegistry(address fragment) external;\r\n}\r\n\r\n/**\r\n * @title DODONFT Registry\r\n * @author DODO Breeder\r\n *\r\n * @notice Register DODONFT Pools \r\n */\r\ncontract DODONFTRegistry is InitializableOwnable, IDODONFTRegistry {\r\n\r\n    mapping (address => bool) public isAdminListed;\r\n    \r\n    // ============ Registry ============\r\n    // Vault -> Frag\r\n    mapping(address => address) public _VAULT_FRAG_REGISTRY_;\r\n\r\n    // base -> quote -> DVM address list\r\n    mapping(address => mapping(address => address[])) public _REGISTRY_;\r\n\r\n    // ============ Events ============\r\n\r\n    event NewRegistry(\r\n        address vault,\r\n        address fragment,\r\n        address dvm\r\n    );\r\n\r\n    event RemoveRegistry(address fragment);\r\n\r\n\r\n    // ============ Admin Operation Functions ============\r\n\r\n    function addRegistry(\r\n        address vault,\r\n        address fragment, \r\n        address quoteToken,\r\n        address dvm\r\n    ) override external {\r\n        require(isAdminListed[msg.sender], \"ACCESS_DENIED\");\r\n        _VAULT_FRAG_REGISTRY_[vault] = fragment;\r\n        _REGISTRY_[fragment][quoteToken].push(dvm);\r\n        emit NewRegistry(vault, fragment, dvm);\r\n    }\r\n\r\n    function removeRegistry(address fragment) override external {\r\n        require(isAdminListed[msg.sender], \"ACCESS_DENIED\");\r\n        address vault = IFragment(fragment)._COLLATERAL_VAULT_();\r\n        address dvm = IFragment(fragment)._DVM_();\r\n\r\n        _VAULT_FRAG_REGISTRY_[vault] = address(0);\r\n\r\n        address quoteToken = IDVM(dvm)._QUOTE_TOKEN_();\r\n        address[] memory registryList = _REGISTRY_[fragment][quoteToken];\r\n        for (uint256 i = 0; i < registryList.length; i++) {\r\n            if (registryList[i] == dvm) {\r\n                if(i != registryList.length - 1) {\r\n                    _REGISTRY_[fragment][quoteToken][i] = _REGISTRY_[fragment][quoteToken][registryList.length - 1];\r\n                }                \r\n                _REGISTRY_[fragment][quoteToken].pop();\r\n                break;\r\n            }\r\n        }\r\n\r\n        emit RemoveRegistry(fragment);\r\n    }\r\n\r\n    function addAdminList (address contractAddr) external onlyOwner {\r\n        isAdminListed[contractAddr] = true;\r\n    }\r\n\r\n    function removeAdminList (address contractAddr) external onlyOwner {\r\n        isAdminListed[contractAddr] = false;\r\n    }\r\n\r\n    function getDODOPool(address baseToken, address quoteToken)\r\n        external\r\n        view\r\n        returns (address[] memory pools)\r\n    {\r\n        return _REGISTRY_[baseToken][quoteToken];\r\n    }\r\n\r\n    function getDODOPoolBidirection(address token0, address token1)\r\n        external\r\n        view\r\n        returns (address[] memory baseToken0Pool, address[] memory baseToken1Pool)\r\n    {\r\n        return (_REGISTRY_[token0][token1], _REGISTRY_[token1][token0]);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fragment\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dvm\",\"type\":\"address\"}],\"name\":\"NewRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fragment\",\"type\":\"address\"}],\"name\":\"RemoveRegistry\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_REGISTRY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_VAULT_FRAG_REGISTRY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"addAdminList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fragment\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dvm\",\"type\":\"address\"}],\"name\":\"addRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"}],\"name\":\"getDODOPool\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getDODOPoolBidirection\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"baseToken0Pool\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"baseToken1Pool\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdminListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"removeAdminList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fragment\",\"type\":\"address\"}],\"name\":\"removeRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DODONFTRegistry","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7b7bfeb5b4504088fc081b5532fb95756fccd6e62f0fcd2e0699633543130769"}]}