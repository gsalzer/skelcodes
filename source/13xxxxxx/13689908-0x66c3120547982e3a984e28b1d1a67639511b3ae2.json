{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n contract ERC20Interface {\r\n      function totalSupply() public constant returns (uint);\r\n      function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n      function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n      function transfer(address to, uint tokens) public returns (bool success);\r\n      function approve(address spender, uint tokens) public returns (bool success);\r\n      function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n  \r\n      event Transfer(address indexed from, address indexed to, uint tokens);\r\n      event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n  }\r\n\r\nlibrary SafeMath {\r\n      function add(uint a, uint b) internal pure returns (uint c) {\r\n          c = a + b;\r\n          require(c >= a);\r\n      }\r\n      function sub(uint a, uint b) internal pure returns (uint c) {\r\n          require(b <= a);\r\n          c = a - b;\r\n      }\r\n      function mul(uint a, uint b) internal pure returns (uint c) {\r\n          c = a * b;\r\n          require(a == 0 || c / a == b);\r\n      }\r\n      function div(uint a, uint b) internal pure returns (uint c) {\r\n          require(b > 0);\r\n          c = a / b;\r\n      }\r\n }\r\n\r\ncontract ICO is ERC20Interface {\r\n    using SafeMath for uint;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint public decimals;\r\n    uint public bonusEnds;\r\n    uint public icoEnds;\r\n    uint public icoStarts;\r\n    uint public allContributers;\r\n    uint allTokens;\r\n    address admin;\r\n\r\n    mapping (address => uint) public balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    function ICO () public {\r\n        name = \"Mic Drop Dollar\";\r\n        decimals = 18;\r\n        symbol = \"MDD\";\r\n        bonusEnds = now + 2 weeks;\r\n        icoEnds = now + 4 weeks;\r\n        icoStarts = now;\r\n        allTokens = 500000000000;\r\n        admin = (msg.sender);\r\n        balances[msg.sender] = allTokens;\r\n    }\r\n\r\n\r\n    function buyTokens() public payable {\r\n\r\n        uint tokens;\r\n\r\n        if(now <= bonusEnds) {\r\n            tokens = msg.value.mul(105);  // 5% bonus\r\n        }else {\r\n            tokens = msg.value.mul(100); // no bonus\r\n        }\r\n\r\n        tokens =msg.value.mul(100);\r\n        balances[msg.sender] = balances[msg.sender].add(tokens);\r\n        allTokens = allTokens.add(tokens);\r\n        emit Transfer(address(0), msg.sender, tokens);\r\n\r\n        allContributers++;\r\n\r\n    }\r\n     \r\n     function totalSupply() public constant returns (uint) {\r\n         return allTokens;\r\n     }\r\n\r\n    // ------------------------------------------------------------------------\r\n     // Get the token balance for account `tokenOwner`\r\n     // ------------------------------------------------------------------------\r\n     function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n         return balances[tokenOwner];\r\n     }\r\n \r\n \r\n     // ------------------------------------------------------------------------\r\n     // Transfer the balance from token owner's account to `to` account\r\n     // - Owner's account must have sufficient balance to transfer\r\n     // - 0 value transfers are allowed\r\n     // ------------------------------------------------------------------------\r\n     function transfer(address to, uint tokens) public returns (bool success) {\r\n         balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n         balances[to] = balances[to].add(tokens);\r\n         emit Transfer(msg.sender, to, tokens);\r\n         return true;\r\n     }\r\n \r\n \r\n     // ------------------------------------------------------------------------\r\n     // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n     // from the token owner's account\r\n     //\r\n     // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n     // recommends that there are no checks for the approval double-spend attack\r\n     // as this should be implemented in user interfaces \r\n     // ------------------------------------------------------------------------\r\n     function approve(address spender, uint tokens) public returns (bool success) {\r\n         allowed[msg.sender][spender] = tokens;\r\n         emit Approval(msg.sender, spender, tokens);\r\n         return true;\r\n     }\r\n \r\n \r\n     // ------------------------------------------------------------------------\r\n     // Transfer `tokens` from the `from` account to the `to` account\r\n     // \r\n     // The calling account must already have sufficient tokens approve(...)-d\r\n     // for spending from the `from` account and\r\n     // - From account must have sufficient balance to transfer\r\n     // - Spender must have sufficient allowance to transfer\r\n     // - 0 value transfers are allowed\r\n     // ------------------------------------------------------------------------\r\n     function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n         balances[from] = balances[from].sub(tokens);\r\n         allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n         balances[to] = balances[to].add(tokens);\r\n         emit Transfer(from, to, tokens);\r\n         return true;\r\n     }\r\n \r\n \r\n     // ------------------------------------------------------------------------\r\n     // Returns the amount of tokens approved by the owner that can be\r\n     // transferred to the spender's account\r\n     // ------------------------------------------------------------------------\r\n     function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n         return allowed[tokenOwner][spender];\r\n     }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     function myBalance() public constant returns (uint) {\r\n         return (balances[msg.sender]);\r\n     }\r\n\r\n     function myAddress() public constant returns (address) {\r\n         address myAdr = msg.sender;\r\n         return myAdr;\r\n     }\r\n\r\n     function endSale() public {\r\n         require(msg.sender == admin);\r\n         admin.transfer(address(this).balance);\r\n     }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allContributers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusEnds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEnds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStarts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ICO","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b5f9f8d8e2a9874c66b1dbfbc1f677fbebd81ee617510bb7206ca48b97760749"}]}