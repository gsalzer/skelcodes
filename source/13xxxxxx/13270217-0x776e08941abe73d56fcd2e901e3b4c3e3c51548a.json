{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/sablierhq/Sablier.sol\": {\r\n      \"content\": \"pragma solidity =0.7.6;\\n\\nimport \\\"../openzeppelin/utils/Pausable.sol\\\";\\nimport \\\"../openzeppelin/access/Ownable.sol\\\";\\nimport \\\"../openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport \\\"../openzeppelin/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./compound/Exponential.sol\\\";\\nimport \\\"./interfaces/IERC1620.sol\\\";\\nimport \\\"./Types.sol\\\";\\n\\n/**\\n * @title Sablier's Money Streaming\\n * @author Sablier\\n */\\ncontract Sablier is IERC1620, Exponential, ReentrancyGuard {\\n\\t/*** Storage Properties ***/\\n\\n\\t/**\\n\\t * @dev The amount of interest has been accrued per token address.\\n\\t */\\n\\tmapping(address => uint256) private earnings;\\n\\n\\t/**\\n\\t * @notice The percentage fee charged by the contract on the accrued interest.\\n\\t */\\n\\tExp public fee;\\n\\n\\t/**\\n\\t * @notice Counter for new stream ids.\\n\\t */\\n\\tuint256 public nextStreamId;\\n\\n\\t/**\\n\\t * @dev The stream objects identifiable by their unsigned integer ids.\\n\\t */\\n\\tmapping(uint256 => Types.Stream) private streams;\\n\\n\\t/*** Modifiers ***/\\n\\n\\t/**\\n\\t * @dev Throws if the caller is not the sender of the recipient of the stream.\\n\\t */\\n\\tmodifier onlySenderOrRecipient(uint256 streamId) {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == streams[streamId].sender ||\\n\\t\\t\\t\\tmsg.sender == streams[streamId].recipient,\\n\\t\\t\\t\\\"caller is not the sender or the recipient of the stream\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if the provided id does not point to a valid stream.\\n\\t */\\n\\tmodifier streamExists(uint256 streamId) {\\n\\t\\trequire(streams[streamId].isEntity, \\\"stream does not exist\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/*** Contract Logic Starts Here */\\n\\n\\tconstructor() public {\\n\\t\\tnextStreamId = 1;\\n\\t}\\n\\n\\t/*** View Functions ***/\\n\\tfunction isEntity(uint256 streamId) external view returns (bool) {\\n\\t\\treturn streams[streamId].isEntity;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the compounding stream with all its properties.\\n\\t * @dev Throws if the id does not point to a valid stream.\\n\\t * @param streamId The id of the stream to query.\\n\\t * @dev The stream object.\\n\\t */\\n\\tfunction getStream(uint256 streamId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\tstreamExists(streamId)\\n\\t\\treturns (\\n\\t\\t\\taddress sender,\\n\\t\\t\\taddress recipient,\\n\\t\\t\\tuint256 deposit,\\n\\t\\t\\taddress tokenAddress,\\n\\t\\t\\tuint256 startTime,\\n\\t\\t\\tuint256 stopTime,\\n\\t\\t\\tuint256 remainingBalance,\\n\\t\\t\\tuint256 ratePerSecond\\n\\t\\t)\\n\\t{\\n\\t\\tsender = streams[streamId].sender;\\n\\t\\trecipient = streams[streamId].recipient;\\n\\t\\tdeposit = streams[streamId].deposit;\\n\\t\\ttokenAddress = streams[streamId].tokenAddress;\\n\\t\\tstartTime = streams[streamId].startTime;\\n\\t\\tstopTime = streams[streamId].stopTime;\\n\\t\\tremainingBalance = streams[streamId].remainingBalance;\\n\\t\\tratePerSecond = streams[streamId].ratePerSecond;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns either the delta in seconds between `block.timestamp` and `startTime` or\\n\\t *  between `stopTime` and `startTime, whichever is smaller. If `block.timestamp` is before\\n\\t *  `startTime`, it returns 0.\\n\\t * @dev Throws if the id does not point to a valid stream.\\n\\t * @param streamId The id of the stream for which to query the delta.\\n\\t * @dev The time delta in seconds.\\n\\t */\\n\\tfunction deltaOf(uint256 streamId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tstreamExists(streamId)\\n\\t\\treturns (uint256 delta)\\n\\t{\\n\\t\\tTypes.Stream memory stream = streams[streamId];\\n\\t\\tif (block.timestamp <= stream.startTime) return 0;\\n\\t\\tif (block.timestamp < stream.stopTime)\\n\\t\\t\\treturn block.timestamp - stream.startTime;\\n\\t\\treturn stream.stopTime - stream.startTime;\\n\\t}\\n\\n\\tstruct BalanceOfLocalVars {\\n\\t\\tMathError mathErr;\\n\\t\\tuint256 recipientBalance;\\n\\t\\tuint256 withdrawalAmount;\\n\\t\\tuint256 senderBalance;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the available funds for the given stream id and address.\\n\\t * @dev Throws if the id does not point to a valid stream.\\n\\t * @param streamId The id of the stream for which to query the balance.\\n\\t * @param who The address for which to query the balance.\\n\\t * @dev @balance uint256 The total funds allocated to `who` as uint256.\\n\\t */\\n\\tfunction balanceOf(uint256 streamId, address who)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\tstreamExists(streamId)\\n\\t\\treturns (uint256 balance)\\n\\t{\\n\\t\\tTypes.Stream memory stream = streams[streamId];\\n\\t\\tBalanceOfLocalVars memory vars;\\n\\n\\t\\tuint256 delta = deltaOf(streamId);\\n\\t\\t(vars.mathErr, vars.recipientBalance) = mulUInt(\\n\\t\\t\\tdelta,\\n\\t\\t\\tstream.ratePerSecond\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tvars.mathErr == MathError.NO_ERROR,\\n\\t\\t\\t\\\"recipient balance calculation error\\\"\\n\\t\\t);\\n\\n\\t\\t/*\\n\\t\\t * If the stream `balance` does not equal `deposit`, it means there have been withdrawals.\\n\\t\\t * We have to subtract the total amount withdrawn from the amount of money that has been\\n\\t\\t * streamed until now.\\n\\t\\t */\\n\\t\\tif (stream.deposit > stream.remainingBalance) {\\n\\t\\t\\t(vars.mathErr, vars.withdrawalAmount) = subUInt(\\n\\t\\t\\t\\tstream.deposit,\\n\\t\\t\\t\\tstream.remainingBalance\\n\\t\\t\\t);\\n\\t\\t\\tassert(vars.mathErr == MathError.NO_ERROR);\\n\\t\\t\\t(vars.mathErr, vars.recipientBalance) = subUInt(\\n\\t\\t\\t\\tvars.recipientBalance,\\n\\t\\t\\t\\tvars.withdrawalAmount\\n\\t\\t\\t);\\n\\t\\t\\t/* `withdrawalAmount` cannot and should not be bigger than `recipientBalance`. */\\n\\t\\t\\tassert(vars.mathErr == MathError.NO_ERROR);\\n\\t\\t}\\n\\n\\t\\tif (who == stream.recipient) return vars.recipientBalance;\\n\\t\\tif (who == stream.sender) {\\n\\t\\t\\t(vars.mathErr, vars.senderBalance) = subUInt(\\n\\t\\t\\t\\tstream.remainingBalance,\\n\\t\\t\\t\\tvars.recipientBalance\\n\\t\\t\\t);\\n\\t\\t\\t/* `recipientBalance` cannot and should not be bigger than `remainingBalance`. */\\n\\t\\t\\tassert(vars.mathErr == MathError.NO_ERROR);\\n\\t\\t\\treturn vars.senderBalance;\\n\\t\\t}\\n\\t\\treturn 0;\\n\\t}\\n\\n\\t/*** Public Effects & Interactions Functions ***/\\n\\n\\tstruct CreateStreamLocalVars {\\n\\t\\tMathError mathErr;\\n\\t\\tuint256 duration;\\n\\t\\tuint256 ratePerSecond;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Creates a new stream funded by `msg.sender` and paid towards `recipient`.\\n\\t * @dev Throws if paused.\\n\\t *  Throws if the recipient is the zero address, the contract itself or the caller.\\n\\t *  Throws if the deposit is 0.\\n\\t *  Throws if the start time is before `block.timestamp`.\\n\\t *  Throws if the stop time is before the start time.\\n\\t *  Throws if the duration calculation has a math error.\\n\\t *  Throws if the deposit is smaller than the duration.\\n\\t *  Throws if the deposit is not a multiple of the duration.\\n\\t *  Throws if the rate calculation has a math error.\\n\\t *  Throws if the next stream id calculation has a math error.\\n\\t *  Throws if the contract is not allowed to transfer enough tokens.\\n\\t *  Throws if there is a token transfer failure.\\n\\t * @param recipient The address towards which the money is streamed.\\n\\t * @param deposit The amount of money to be streamed.\\n\\t * @param tokenAddress The ERC20 token to use as streaming currency.\\n\\t * @param startTime The unix timestamp for when the stream starts.\\n\\t * @param stopTime The unix timestamp for when the stream stops.\\n\\t * @return The uint256 id of the newly created stream.\\n\\t */\\n\\tfunction createStream(\\n\\t\\taddress recipient,\\n\\t\\tuint256 deposit,\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 startTime,\\n\\t\\tuint256 stopTime\\n\\t) public override returns (uint256) {\\n\\t\\trequire(recipient != address(0x00), \\\"stream to the zero address\\\");\\n\\t\\trequire(recipient != address(this), \\\"stream to the contract itself\\\");\\n\\t\\trequire(recipient != msg.sender, \\\"stream to the caller\\\");\\n\\t\\trequire(deposit > 0, \\\"deposit is zero\\\");\\n\\t\\trequire(\\n\\t\\t\\tstartTime >= block.timestamp,\\n\\t\\t\\t\\\"start time before block.timestamp\\\"\\n\\t\\t);\\n\\t\\trequire(stopTime > startTime, \\\"stop time before the start time\\\");\\n\\n\\t\\tCreateStreamLocalVars memory vars;\\n\\t\\t(vars.mathErr, vars.duration) = subUInt(stopTime, startTime);\\n\\t\\t/* `subUInt` can only return MathError.INTEGER_UNDERFLOW but we know `stopTime` is higher than `startTime`. */\\n\\t\\tassert(vars.mathErr == MathError.NO_ERROR);\\n\\n\\t\\t/* Without this, the rate per second would be zero. */\\n\\t\\trequire(deposit >= vars.duration, \\\"deposit smaller than time delta\\\");\\n\\n\\t\\trequire(\\n\\t\\t\\tdeposit % vars.duration == 0,\\n\\t\\t\\t\\\"deposit not multiple of time delta\\\"\\n\\t\\t);\\n\\n\\t\\t(vars.mathErr, vars.ratePerSecond) = divUInt(deposit, vars.duration);\\n\\t\\t/* `divUInt` can only return MathError.DIVISION_BY_ZERO but we know `duration` is not zero. */\\n\\t\\tassert(vars.mathErr == MathError.NO_ERROR);\\n\\n\\t\\t/* Create and store the stream object. */\\n\\t\\tuint256 streamId = nextStreamId;\\n\\t\\tstreams[streamId] = Types.Stream({\\n\\t\\t\\tremainingBalance: deposit,\\n\\t\\t\\tdeposit: deposit,\\n\\t\\t\\tisEntity: true,\\n\\t\\t\\tratePerSecond: vars.ratePerSecond,\\n\\t\\t\\trecipient: recipient,\\n\\t\\t\\tsender: msg.sender,\\n\\t\\t\\tstartTime: startTime,\\n\\t\\t\\tstopTime: stopTime,\\n\\t\\t\\ttokenAddress: tokenAddress\\n\\t\\t});\\n\\n\\t\\t/* Increment the next stream id. */\\n\\t\\t(vars.mathErr, nextStreamId) = addUInt(nextStreamId, uint256(1));\\n\\t\\trequire(\\n\\t\\t\\tvars.mathErr == MathError.NO_ERROR,\\n\\t\\t\\t\\\"next stream id calculation error\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tIERC20(tokenAddress).transferFrom(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tdeposit\\n\\t\\t\\t),\\n\\t\\t\\t\\\"token transfer failure\\\"\\n\\t\\t);\\n\\t\\temit CreateStream(\\n\\t\\t\\tstreamId,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\trecipient,\\n\\t\\t\\tdeposit,\\n\\t\\t\\ttokenAddress,\\n\\t\\t\\tstartTime,\\n\\t\\t\\tstopTime\\n\\t\\t);\\n\\t\\treturn streamId;\\n\\t}\\n\\n\\tstruct WithdrawFromStreamLocalVars {\\n\\t\\tMathError mathErr;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Withdraws from the contract to the recipient's account.\\n\\t * @dev Throws if the id does not point to a valid stream.\\n\\t *  Throws if the caller is not the sender or the recipient of the stream.\\n\\t *  Throws if the amount exceeds the available balance.\\n\\t *  Throws if there is a token transfer failure.\\n\\t * @param streamId The id of the stream to withdraw tokens from.\\n\\t * @param amount The amount of tokens to withdraw.\\n\\t * @return bool true=success, otherwise false.\\n\\t */\\n\\tfunction withdrawFromStream(uint256 streamId, uint256 amount)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tnonReentrant\\n\\t\\tstreamExists(streamId)\\n\\t\\tonlySenderOrRecipient(streamId)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\trequire(amount > 0, \\\"amount is zero\\\");\\n\\t\\tTypes.Stream memory stream = streams[streamId];\\n\\t\\tWithdrawFromStreamLocalVars memory vars;\\n\\n\\t\\tuint256 balance = balanceOf(streamId, stream.recipient);\\n\\t\\trequire(balance >= amount, \\\"amount exceeds the available balance\\\");\\n\\n\\t\\t(vars.mathErr, streams[streamId].remainingBalance) = subUInt(\\n\\t\\t\\tstream.remainingBalance,\\n\\t\\t\\tamount\\n\\t\\t);\\n\\t\\t/**\\n\\t\\t * `subUInt` can only return MathError.INTEGER_UNDERFLOW but we know that `remainingBalance` is at least\\n\\t\\t * as big as `amount`.\\n\\t\\t */\\n\\t\\tassert(vars.mathErr == MathError.NO_ERROR);\\n\\n\\t\\tif (streams[streamId].remainingBalance == 0) delete streams[streamId];\\n\\n\\t\\trequire(\\n\\t\\t\\tIERC20(stream.tokenAddress).transfer(stream.recipient, amount),\\n\\t\\t\\t\\\"token transfer failure\\\"\\n\\t\\t);\\n\\t\\temit WithdrawFromStream(streamId, stream.recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Cancels the stream and transfers the tokens back on a pro rata basis.\\n\\t * @dev Throws if the id does not point to a valid stream.\\n\\t *  Throws if the caller is not the sender or the recipient of the stream.\\n\\t *  Throws if there is a token transfer failure.\\n\\t * @param streamId The id of the stream to cancel.\\n\\t * @return bool true=success, otherwise false.\\n\\t */\\n\\tfunction cancelStream(uint256 streamId)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tnonReentrant\\n\\t\\tstreamExists(streamId)\\n\\t\\tonlySenderOrRecipient(streamId)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\tTypes.Stream memory stream = streams[streamId];\\n\\t\\tuint256 senderBalance = balanceOf(streamId, stream.sender);\\n\\t\\tuint256 recipientBalance = balanceOf(streamId, stream.recipient);\\n\\n\\t\\tdelete streams[streamId];\\n\\n\\t\\tIERC20 token = IERC20(stream.tokenAddress);\\n\\t\\tif (recipientBalance > 0)\\n\\t\\t\\trequire(\\n\\t\\t\\t\\ttoken.transfer(stream.recipient, recipientBalance),\\n\\t\\t\\t\\t\\\"recipient token transfer failure\\\"\\n\\t\\t\\t);\\n\\t\\tif (senderBalance > 0)\\n\\t\\t\\trequire(\\n\\t\\t\\t\\ttoken.transfer(stream.sender, senderBalance),\\n\\t\\t\\t\\t\\\"sender token transfer failure\\\"\\n\\t\\t\\t);\\n\\n\\t\\temit CancelStream(\\n\\t\\t\\tstreamId,\\n\\t\\t\\tstream.sender,\\n\\t\\t\\tstream.recipient,\\n\\t\\t\\tsenderBalance,\\n\\t\\t\\trecipientBalance\\n\\t\\t);\\n\\t\\treturn true;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n\\taddress private _owner;\\n\\n\\tevent OwnershipTransferred(\\n\\t\\taddress indexed previousOwner,\\n\\t\\taddress indexed newOwner\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the contract setting the deployer as the initial owner.\\n\\t */\\n\\tconstructor() {\\n\\t\\taddress msgSender = _msgSender();\\n\\t\\t_owner = msgSender;\\n\\t\\temit OwnershipTransferred(address(0), msgSender);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the current owner.\\n\\t */\\n\\tfunction owner() public view virtual returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the owner.\\n\\t */\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Leaves the contract without owner. It will not be possible to call\\n\\t * `onlyOwner` functions anymore. Can only be called by the current owner.\\n\\t *\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\n\\t * thereby removing any functionality that is only available to the owner.\\n\\t */\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\temit OwnershipTransferred(_owner, address(0));\\n\\t\\t_owner = address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n\\t * Can only be called by the current owner.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\tnewOwner != address(0),\\n\\t\\t\\t\\\"Ownable: new owner is the zero address\\\"\\n\\t\\t);\\n\\t\\temit OwnershipTransferred(_owner, newOwner);\\n\\t\\t_owner = newOwner;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n\\t/**\\n\\t * @dev Returns the amount of tokens in existence.\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the amount of tokens owned by `account`.\\n\\t */\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transfer(address recipient, uint256 amount)\\n\\t\\texternal\\n\\t\\treturns (bool);\\n\\n\\t/**\\n\\t * @dev Returns the remaining number of tokens that `spender` will be\\n\\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n\\t * zero by default.\\n\\t *\\n\\t * This value changes when {approve} or {transferFrom} are called.\\n\\t */\\n\\tfunction allowance(address owner, address spender)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256);\\n\\n\\t/**\\n\\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n\\t * that someone may use both the old and the new allowance by unfortunate\\n\\t * transaction ordering. One possible solution to mitigate this race\\n\\t * condition is to first reduce the spender's allowance to 0 and set the\\n\\t * desired value afterwards:\\n\\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t */\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n\\t * allowance mechanism. `amount` is then deducted from the caller's\\n\\t * allowance.\\n\\t *\\n\\t * Returns a boolean value indicating whether the operation succeeded.\\n\\t *\\n\\t * Emits a {Transfer} event.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n\\t * another (`to`).\\n\\t *\\n\\t * Note that `value` may be zero.\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n\\t * a call to {approve}. `value` is the new allowance.\\n\\t */\\n\\tevent Approval(\\n\\t\\taddress indexed owner,\\n\\t\\taddress indexed spender,\\n\\t\\tuint256 value\\n\\t);\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/sablierhq/compound/Exponential.sol\": {\r\n      \"content\": \"pragma solidity =0.7.6;\\n\\nimport \\\"./CarefulMath.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-decision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath {\\n\\tuint256 constant expScale = 1e18;\\n\\tuint256 constant halfExpScale = expScale / 2;\\n\\tuint256 constant mantissaOne = expScale;\\n\\n\\tstruct Exp {\\n\\t\\tuint256 mantissa;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates an exponential from numerator and denominator values.\\n\\t *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n\\t *            or if `denom` is zero.\\n\\t */\\n\\tfunction getExp(uint256 num, uint256 denom)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, Exp memory)\\n\\t{\\n\\t\\t(MathError err0, uint256 scaledNumerator) = mulUInt(num, expScale);\\n\\t\\tif (err0 != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err0, Exp({ mantissa: 0 }));\\n\\t\\t}\\n\\n\\t\\t(MathError err1, uint256 rational) = divUInt(scaledNumerator, denom);\\n\\t\\tif (err1 != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err1, Exp({ mantissa: 0 }));\\n\\t\\t}\\n\\n\\t\\treturn (MathError.NO_ERROR, Exp({ mantissa: rational }));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Adds two exponentials, returning a new exponential.\\n\\t */\\n\\tfunction addExp(Exp memory a, Exp memory b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, Exp memory)\\n\\t{\\n\\t\\t(MathError error, uint256 result) = addUInt(a.mantissa, b.mantissa);\\n\\n\\t\\treturn (error, Exp({ mantissa: result }));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Subtracts two exponentials, returning a new exponential.\\n\\t */\\n\\tfunction subExp(Exp memory a, Exp memory b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, Exp memory)\\n\\t{\\n\\t\\t(MathError error, uint256 result) = subUInt(a.mantissa, b.mantissa);\\n\\n\\t\\treturn (error, Exp({ mantissa: result }));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiply an Exp by a scalar, returning a new Exp.\\n\\t */\\n\\tfunction mulScalar(Exp memory a, uint256 scalar)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, Exp memory)\\n\\t{\\n\\t\\t(MathError err0, uint256 scaledMantissa) = mulUInt(a.mantissa, scalar);\\n\\t\\tif (err0 != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err0, Exp({ mantissa: 0 }));\\n\\t\\t}\\n\\n\\t\\treturn (MathError.NO_ERROR, Exp({ mantissa: scaledMantissa }));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n\\t */\\n\\tfunction mulScalarTruncate(Exp memory a, uint256 scalar)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, uint256)\\n\\t{\\n\\t\\t(MathError err, Exp memory product) = mulScalar(a, scalar);\\n\\t\\tif (err != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err, 0);\\n\\t\\t}\\n\\n\\t\\treturn (MathError.NO_ERROR, truncate(product));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n\\t */\\n\\tfunction mulScalarTruncateAddUInt(\\n\\t\\tExp memory a,\\n\\t\\tuint256 scalar,\\n\\t\\tuint256 addend\\n\\t) internal pure returns (MathError, uint256) {\\n\\t\\t(MathError err, Exp memory product) = mulScalar(a, scalar);\\n\\t\\tif (err != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err, 0);\\n\\t\\t}\\n\\n\\t\\treturn addUInt(truncate(product), addend);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Divide an Exp by a scalar, returning a new Exp.\\n\\t */\\n\\tfunction divScalar(Exp memory a, uint256 scalar)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, Exp memory)\\n\\t{\\n\\t\\t(MathError err0, uint256 descaledMantissa) =\\n\\t\\t\\tdivUInt(a.mantissa, scalar);\\n\\t\\tif (err0 != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err0, Exp({ mantissa: 0 }));\\n\\t\\t}\\n\\n\\t\\treturn (MathError.NO_ERROR, Exp({ mantissa: descaledMantissa }));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Divide a scalar by an Exp, returning a new Exp.\\n\\t */\\n\\tfunction divScalarByExp(uint256 scalar, Exp memory divisor)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, Exp memory)\\n\\t{\\n\\t\\t/*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n\\t\\t(MathError err0, uint256 numerator) = mulUInt(expScale, scalar);\\n\\t\\tif (err0 != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err0, Exp({ mantissa: 0 }));\\n\\t\\t}\\n\\t\\treturn getExp(numerator, divisor.mantissa);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n\\t */\\n\\tfunction divScalarByExpTruncate(uint256 scalar, Exp memory divisor)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, uint256)\\n\\t{\\n\\t\\t(MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n\\t\\tif (err != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err, 0);\\n\\t\\t}\\n\\n\\t\\treturn (MathError.NO_ERROR, truncate(fraction));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiplies two exponentials, returning a new exponential.\\n\\t */\\n\\tfunction mulExp(Exp memory a, Exp memory b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, Exp memory)\\n\\t{\\n\\t\\t(MathError err0, uint256 doubleScaledProduct) =\\n\\t\\t\\tmulUInt(a.mantissa, b.mantissa);\\n\\t\\tif (err0 != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err0, Exp({ mantissa: 0 }));\\n\\t\\t}\\n\\n\\t\\t// We add half the scale before dividing so that we get rounding instead of truncation.\\n\\t\\t//  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n\\t\\t// Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n\\t\\t(MathError err1, uint256 doubleScaledProductWithHalfScale) =\\n\\t\\t\\taddUInt(halfExpScale, doubleScaledProduct);\\n\\t\\tif (err1 != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err1, Exp({ mantissa: 0 }));\\n\\t\\t}\\n\\n\\t\\t(MathError err2, uint256 product) =\\n\\t\\t\\tdivUInt(doubleScaledProductWithHalfScale, expScale);\\n\\t\\t// The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n\\t\\tassert(err2 == MathError.NO_ERROR);\\n\\n\\t\\treturn (MathError.NO_ERROR, Exp({ mantissa: product }));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n\\t */\\n\\tfunction mulExp(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, Exp memory)\\n\\t{\\n\\t\\treturn mulExp(Exp({ mantissa: a }), Exp({ mantissa: b }));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiplies three exponentials, returning a new exponential.\\n\\t */\\n\\tfunction mulExp3(\\n\\t\\tExp memory a,\\n\\t\\tExp memory b,\\n\\t\\tExp memory c\\n\\t) internal pure returns (MathError, Exp memory) {\\n\\t\\t(MathError err, Exp memory ab) = mulExp(a, b);\\n\\t\\tif (err != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err, ab);\\n\\t\\t}\\n\\t\\treturn mulExp(ab, c);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Divides two exponentials, returning a new exponential.\\n\\t *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n\\t *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n\\t */\\n\\tfunction divExp(Exp memory a, Exp memory b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, Exp memory)\\n\\t{\\n\\t\\treturn getExp(a.mantissa, b.mantissa);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Truncates the given exp to a whole number value.\\n\\t *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n\\t */\\n\\tfunction truncate(Exp memory exp) internal pure returns (uint256) {\\n\\t\\t// Note: We are not using careful math here as we're performing a division that cannot fail\\n\\t\\treturn exp.mantissa / expScale;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if first Exp is less than second Exp.\\n\\t */\\n\\tfunction lessThanExp(Exp memory left, Exp memory right)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn left.mantissa < right.mantissa; //TODO: Add some simple tests and this in another PR yo.\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if left Exp <= right Exp.\\n\\t */\\n\\tfunction lessThanOrEqualExp(Exp memory left, Exp memory right)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn left.mantissa <= right.mantissa;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if left Exp > right Exp.\\n\\t */\\n\\tfunction greaterThanExp(Exp memory left, Exp memory right)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn left.mantissa > right.mantissa;\\n\\t}\\n\\n\\t/**\\n\\t * @dev returns true if Exp is exactly zero\\n\\t */\\n\\tfunction isZeroExp(Exp memory value) internal pure returns (bool) {\\n\\t\\treturn value.mantissa == 0;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/sablierhq/interfaces/IERC1620.sol\": {\r\n      \"content\": \"pragma solidity =0.7.6;\\n\\n/**\\n * @title ERC-1620 Money Streaming Standard\\n * @author Sablier\\n * @dev See https://eips.ethereum.org/EIPS/eip-1620\\n */\\ninterface IERC1620 {\\n\\t/**\\n\\t * @notice Emits when a stream is successfully created.\\n\\t */\\n\\tevent CreateStream(\\n\\t\\tuint256 indexed streamId,\\n\\t\\taddress indexed sender,\\n\\t\\taddress indexed recipient,\\n\\t\\tuint256 deposit,\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 startTime,\\n\\t\\tuint256 stopTime\\n\\t);\\n\\n\\t/**\\n\\t * @notice Emits when the recipient of a stream withdraws a portion or all their pro rata share of the stream.\\n\\t */\\n\\tevent WithdrawFromStream(\\n\\t\\tuint256 indexed streamId,\\n\\t\\taddress indexed recipient,\\n\\t\\tuint256 amount\\n\\t);\\n\\n\\t/**\\n\\t * @notice Emits when a stream is successfully cancelled and tokens are transferred back on a pro rata basis.\\n\\t */\\n\\tevent CancelStream(\\n\\t\\tuint256 indexed streamId,\\n\\t\\taddress indexed sender,\\n\\t\\taddress indexed recipient,\\n\\t\\tuint256 senderBalance,\\n\\t\\tuint256 recipientBalance\\n\\t);\\n\\n\\tfunction balanceOf(uint256 streamId, address who)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256 balance);\\n\\n\\tfunction getStream(uint256 streamId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress sender,\\n\\t\\t\\taddress recipient,\\n\\t\\t\\tuint256 deposit,\\n\\t\\t\\taddress token,\\n\\t\\t\\tuint256 startTime,\\n\\t\\t\\tuint256 stopTime,\\n\\t\\t\\tuint256 remainingBalance,\\n\\t\\t\\tuint256 ratePerSecond\\n\\t\\t);\\n\\n\\tfunction createStream(\\n\\t\\taddress recipient,\\n\\t\\tuint256 deposit,\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 startTime,\\n\\t\\tuint256 stopTime\\n\\t) external returns (uint256 streamId);\\n\\n\\tfunction withdrawFromStream(uint256 streamId, uint256 funds)\\n\\t\\texternal\\n\\t\\treturns (bool);\\n\\n\\tfunction cancelStream(uint256 streamId) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/sablierhq/Types.sol\": {\r\n      \"content\": \"pragma solidity =0.7.6;\\n\\n/**\\n * @title Sablier Types\\n * @author Sablier\\n */\\nlibrary Types {\\n\\tstruct Stream {\\n\\t\\tuint256 deposit;\\n\\t\\tuint256 ratePerSecond;\\n\\t\\tuint256 remainingBalance;\\n\\t\\tuint256 startTime;\\n\\t\\tuint256 stopTime;\\n\\t\\taddress recipient;\\n\\t\\taddress sender;\\n\\t\\taddress tokenAddress;\\n\\t\\tbool isEntity;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n\\tfunction _msgSender() internal view virtual returns (address payable) {\\n\\t\\treturn msg.sender;\\n\\t}\\n\\n\\tfunction _msgData() internal view virtual returns (bytes memory) {\\n\\t\\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n\\t\\treturn msg.data;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/sablierhq/compound/CarefulMath.sol\": {\r\n      \"content\": \"pragma solidity =0.7.6;\\n\\n/**\\n * @title Careful Math\\n * @author Compound\\n * @notice Derived from OpenZeppelin's SafeMath library\\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n */\\ncontract CarefulMath {\\n\\t/**\\n\\t * @dev Possible error codes that we can return\\n\\t */\\n\\tenum MathError {\\n\\t\\tNO_ERROR,\\n\\t\\tDIVISION_BY_ZERO,\\n\\t\\tINTEGER_OVERFLOW,\\n\\t\\tINTEGER_UNDERFLOW\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiplies two numbers, returns an error on overflow.\\n\\t */\\n\\tfunction mulUInt(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, uint256)\\n\\t{\\n\\t\\tif (a == 0) {\\n\\t\\t\\treturn (MathError.NO_ERROR, 0);\\n\\t\\t}\\n\\n\\t\\tuint256 c = a * b;\\n\\n\\t\\tif (c / a != b) {\\n\\t\\t\\treturn (MathError.INTEGER_OVERFLOW, 0);\\n\\t\\t} else {\\n\\t\\t\\treturn (MathError.NO_ERROR, c);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Integer division of two numbers, truncating the quotient.\\n\\t */\\n\\tfunction divUInt(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, uint256)\\n\\t{\\n\\t\\tif (b == 0) {\\n\\t\\t\\treturn (MathError.DIVISION_BY_ZERO, 0);\\n\\t\\t}\\n\\n\\t\\treturn (MathError.NO_ERROR, a / b);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n\\t */\\n\\tfunction subUInt(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, uint256)\\n\\t{\\n\\t\\tif (b <= a) {\\n\\t\\t\\treturn (MathError.NO_ERROR, a - b);\\n\\t\\t} else {\\n\\t\\t\\treturn (MathError.INTEGER_UNDERFLOW, 0);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Adds two numbers, returns an error on overflow.\\n\\t */\\n\\tfunction addUInt(uint256 a, uint256 b)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (MathError, uint256)\\n\\t{\\n\\t\\tuint256 c = a + b;\\n\\n\\t\\tif (c >= a) {\\n\\t\\t\\treturn (MathError.NO_ERROR, c);\\n\\t\\t} else {\\n\\t\\t\\treturn (MathError.INTEGER_OVERFLOW, 0);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev add a and b and then subtract c\\n\\t */\\n\\tfunction addThenSubUInt(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tuint256 c\\n\\t) internal pure returns (MathError, uint256) {\\n\\t\\t(MathError err0, uint256 sum) = addUInt(a, b);\\n\\n\\t\\tif (err0 != MathError.NO_ERROR) {\\n\\t\\t\\treturn (err0, 0);\\n\\t\\t}\\n\\n\\t\\treturn subUInt(sum, c);\\n\\t}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senderBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipientBalance\",\"type\":\"uint256\"}],\"name\":\"CancelStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"CreateStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromStream\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"cancelStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"createStream\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"deltaOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerSecond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isEntity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextStreamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Sablier","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}