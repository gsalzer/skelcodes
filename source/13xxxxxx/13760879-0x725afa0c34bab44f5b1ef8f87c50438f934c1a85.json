{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PianoKing.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./lib/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./PianoKingWhitelist.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"./interfaces/IPianoKingRNConsumer.sol\\\";\\n\\n/**\\n * @dev The contract of Piano King NFTs.\\n */\\ncontract PianoKing is ERC721, Ownable, IERC2981 {\\n  using Address for address payable;\\n  using Strings for uint256;\\n\\n  uint256 private constant MAX_TOKEN_PER_ADDRESS = 25;\\n  // The amount in Wei (0.2 ETH by default) required to give to this contract\\n  // in order to premint an NFT for the 7000 tokens following the 1000 in presale\\n  uint256 public constant MIN_PRICE = 200000000000000000;\\n  // The royalties taken on each sale. Can range from 0 to 10000\\n  // 500 => 5%\\n  uint16 internal constant ROYALTIES = 500;\\n  // The current minted supply\\n  uint256 public totalSupply;\\n  // The base url for the metadata of each token\\n  string public baseURI =\\n    \\\"ipfs://QmX1wiZB72EnXdTxQCeZhRxtmT9GkBuWpD7TtDrfAcSio4/\\\";\\n  // The supply left before next batch mint\\n  // Start at 0 as there is no premint for presale\\n  uint256 public supplyLeft = 0;\\n\\n  // Address => how many tokens this address will receive on the next batch mint\\n  mapping(address => uint256) public preMintAllowance;\\n\\n  // Addresses that have paid to get a token in the next batch mint\\n  address[] public preMintAddresses;\\n\\n  // The random number used as a seed for the random sequence for batch mint\\n  uint256 internal randomSeed;\\n  // The random number used as the base for the incrementor in the sequence\\n  uint256 internal randomIncrementor;\\n  // Indicate if the random number is ready to be used\\n  bool internal canUseRandomNumber;\\n  // Allow to keep track of iterations through multiple consecutives\\n  // transactions for batch mints\\n  uint16 internal lastBatchIndex;\\n\\n  IPianoKingRNConsumer public pianoKingRNConsumer;\\n  PianoKingWhitelist public pianoKingWhitelist;\\n  // Address authorized to withdraw the funds\\n  address public pianoKingWallet = 0xA263f5e0A44Cb4e22AfB21E957dE825027A1e586;\\n  // Address where the royalties should be sent to\\n  address public pianoKingFunds;\\n\\n  // Doesn't have to be defined straight away, can be defined later\\n  // at least before phase 2\\n  address public pianoKingDutchAuction;\\n\\n  constructor(\\n    address _pianoKingWhitelistAddress,\\n    address _pianoKingRNConsumer,\\n    address _pianoKingFunds\\n  ) ERC721(\\\"Piano King NFT\\\", \\\"PK\\\") {\\n    require(_pianoKingWhitelistAddress != address(0), \\\"Invalid address\\\");\\n    require(_pianoKingRNConsumer != address(0), \\\"Invalid address\\\");\\n    require(_pianoKingFunds != address(0), \\\"Invalid address\\\");\\n    pianoKingWhitelist = PianoKingWhitelist(_pianoKingWhitelistAddress);\\n    pianoKingRNConsumer = IPianoKingRNConsumer(_pianoKingRNConsumer);\\n    pianoKingFunds = _pianoKingFunds;\\n  }\\n\\n  /**\\n   * @dev Let anyone premint a random token as long as they send at least\\n   * the min price required to do so\\n   * The actual minting will happen later in a batch to reduce the fees\\n   * of random number request to off-chain oracles\\n   */\\n  function preMint() external payable {\\n    // The sender must send at least the min price to mint\\n    // and acquire the NFT\\n    preMintFor(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Premint a token for a given address.\\n   * Meant to be used by the Dutch Auction contract or anyone wishing to\\n   * offer a token to someone else or simply paying the gas fee for that person\\n   */\\n  function preMintFor(address addr) public payable {\\n    require(addr != address(0), \\\"Invalid address\\\");\\n    // The presale mint has to be completed before this function can be called\\n    require(totalSupply >= 1000, \\\"Presale mint not completed\\\");\\n    bool isDutchAuction = totalSupply >= 8000;\\n    // After the first phase only the Piano King Dutch Auction contract\\n    // can mint\\n    if (isDutchAuction) {\\n      require(msg.sender == pianoKingDutchAuction, \\\"Only through auction\\\");\\n    }\\n    uint256 amountOfToken = isDutchAuction ? 1 : msg.value / MIN_PRICE;\\n    // If the result is 0 then not enough funds was sent\\n    require(amountOfToken > 0, \\\"Not enough funds\\\");\\n\\n    // We check there is enough supply left\\n    require(supplyLeft >= amountOfToken, \\\"Not enough tokens left\\\");\\n    // Check that the amount desired by the sender is below or\\n    // equal to the maximum per address\\n    require(\\n      amountOfToken + preMintAllowance[addr] <= MAX_TOKEN_PER_ADDRESS,\\n      \\\"Above maximum\\\"\\n    );\\n\\n    // Add the address to the list if it's not in there yet\\n    if (preMintAllowance[addr] == 0) {\\n      preMintAddresses.push(addr);\\n    }\\n    // Assign the number of token to the sender\\n    preMintAllowance[addr] += amountOfToken;\\n\\n    // Remove the newly acquired tokens from the supply left before next batch mint\\n    supplyLeft -= amountOfToken;\\n  }\\n\\n  /**\\n   * @dev Do a batch mint for the tokens after the first 1000 of presale\\n   * This function is meant to be called multiple times in row to loop\\n   * through consecutive ranges of the array to spread gas costs as doing it\\n   * in one single transaction may cost more than a block gas limit\\n   * @param count How many addresses to loop through\\n   */\\n  function batchMint(uint256 count) external onlyOwner {\\n    _batchMint(preMintAddresses, count);\\n  }\\n\\n  /**\\n   * @dev Mint all the token pre-purchased during the presale\\n   * @param count How many addresses to loop through\\n   */\\n  function presaleMint(uint256 count) external onlyOwner {\\n    _batchMint(pianoKingWhitelist.getWhitelistedAddresses(), count);\\n  }\\n\\n  /**\\n   * @dev Fetch the random numbers from RNConsumer contract\\n   */\\n  function fetchRandomNumbers() internal {\\n    // Will revert if the numbers are not ready\\n    (uint256 seed, uint256 incrementor) = pianoKingRNConsumer\\n      .getRandomNumbers();\\n    // By checking this we enforce the use of a different random number for\\n    // each batch mint\\n    // There is still the case in which two subsequent random number requests\\n    // return the same random number. However since it's a true random number\\n    // using the full range of a uint128 this has an extremely low chance of occuring.\\n    // And if it does we can still request another number.\\n    // We can't use the randomSeed for comparison as it changes during the batch mint\\n    require(incrementor != randomIncrementor, \\\"Cannot use old random numbers\\\");\\n    randomIncrementor = incrementor;\\n    randomSeed = seed;\\n    canUseRandomNumber = true;\\n  }\\n\\n  /**\\n   * @dev Generic batch mint\\n   * We don't use neither the _mint nor the _safeMint function\\n   * to optimize the process as much as possible in terms of gas\\n   * @param addrs Addresses meant to receive tokens\\n   * @param count How many addresses to loop through in this call\\n   */\\n  function _batchMint(address[] memory addrs, uint256 count) internal {\\n    // To mint a batch all of its tokens need to have been preminted\\n    require(supplyLeft == 0, \\\"Batch not yet sold out\\\");\\n    if (!canUseRandomNumber) {\\n      // Will revert the transaction if the random numbers are not ready\\n      fetchRandomNumbers();\\n    }\\n    // Get the ending index from the start index and the number of\\n    // addresses to loop through\\n    uint256 end = lastBatchIndex + count;\\n    // Check that the end is not longer than the addrs array\\n    require(end <= addrs.length, \\\"Out of bounds\\\");\\n    // Get the bounds of the current phase/slot\\n    (uint256 lowerBound, uint256 upperBound) = getBounds();\\n    // Set the token id to the value of the random number variable\\n    // If it's the start, then it will be the random number returned\\n    // by Chainlink VRF. If not it will be the last token id generated\\n    // in the batch needed to continue the sequence\\n    uint256 tokenId = randomSeed;\\n    uint256 incrementor = randomIncrementor;\\n    for (uint256 i = lastBatchIndex; i < end; i++) {\\n      address addr = addrs[i];\\n      uint256 allowance = getAllowance(addr);\\n      for (uint256 j = 0; j < allowance; j++) {\\n        // Generate a number from the random number for the given\\n        // address and this given token to be minted\\n        tokenId = generateTokenId(tokenId, lowerBound, upperBound, incrementor);\\n        _owners[tokenId] = addr;\\n        emit Transfer(address(0), addr, tokenId);\\n      }\\n      // Update the balance of the address\\n      _balances[addr] += allowance;\\n      if (lowerBound >= 1000) {\\n        // We clear the mapping at this address as it's no longer needed\\n        delete preMintAllowance[addr];\\n      }\\n    }\\n    if (end == addrs.length) {\\n      // We've minted all the tokens of this batch, so this random number\\n      // cannot be used anymore\\n      canUseRandomNumber = false;\\n      if (lowerBound >= 1000) {\\n        // And we can clear the preMintAddresses array to free it for next batch\\n        // It's always nice to free unused storage anyway\\n        delete preMintAddresses;\\n      }\\n      // Add the supply at the end to minimize interactions with storage\\n      // It's not critical to know the actual current evolving supply\\n      // during the batch mint so we can do that here\\n      totalSupply += upperBound - lowerBound;\\n      // Get the bounds of the next range now that this batch mint is completed\\n      (lowerBound, upperBound) = getBounds();\\n      // Assign the supply available to premint for the next batch\\n      supplyLeft = upperBound - lowerBound;\\n      // Set the index back to 0 so that next batch mint can start at the beginning\\n      lastBatchIndex = 0;\\n    } else {\\n      // Save the token id in the random number variable to continue the sequence\\n      // on next call\\n      randomSeed = tokenId;\\n      // Save the index to set as start of next call\\n      lastBatchIndex = uint16(end);\\n    }\\n  }\\n\\n  /**\\n   * @dev Get the allowance of an address depending of the current supply\\n   * @param addr Address to get the allowance of\\n   */\\n  function getAllowance(address addr) internal view virtual returns (uint256) {\\n    // If the supply is below a 1000 then we're getting the white list allowance\\n    // otherwise it's the premint allowance\\n    return\\n      totalSupply < 1000\\n        ? pianoKingWhitelist.getWhitelistAllowance(addr)\\n        : preMintAllowance[addr];\\n  }\\n\\n  /**\\n   * @dev Generate a number from a random number for the tokenId that is guarranteed\\n   * not to repeat within one cycle (defined by the size of the modulo) if we call\\n   * this function many times in a row.\\n   * We use the properties of prime numbers to prevent collisions naturally without\\n   * manual checks that would be expensive since they would require writing the\\n   * storage or the memory.\\n   * @param randomNumber True random number which has been previously provided by oracles\\n   * or previous tokenId that was generated from it. Since we're generating a sequence\\n   * of numbers defined by recurrence we need the previous number as the base for the next.\\n   * @param lowerBound Lower bound of current batch\\n   * @param upperBound Upper bound of current batch\\n   * @param incrementor Random incrementor based on the random number provided by oracles\\n   */\\n  function generateTokenId(\\n    uint256 randomNumber,\\n    uint256 lowerBound,\\n    uint256 upperBound,\\n    uint256 incrementor\\n  ) internal pure returns (uint256 tokenId) {\\n    if (lowerBound < 8000) {\\n      // For the presale of 1000 tokens and the 7 batches of\\n      // 1000 after  that\\n      tokenId = getTokenIdInRange(\\n        randomNumber,\\n        1009,\\n        incrementor,\\n        lowerBound,\\n        upperBound\\n      );\\n    } else {\\n      // Dutch auction mints of 200 tokens\\n      tokenId = getTokenIdInRange(\\n        randomNumber,\\n        211,\\n        incrementor,\\n        lowerBound,\\n        upperBound\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Get a token id in a given range\\n   * @param randomNumber True random number which has been previously provided by oracles\\n   * or previous tokenId that was generated from it. Since we're generating a sequence\\n   * of numbers defined by recurrence we need the previous number as the base for the next.\\n   * @param lowerBound Lower bound of current batch\\n   * @param upperBound Upper bound of current batch\\n   * @param incrementor Random incrementor based on the random number provided by oracles\\n   */\\n  function getTokenIdInRange(\\n    uint256 randomNumber,\\n    uint256 modulo,\\n    uint256 incrementor,\\n    uint256 lowerBound,\\n    uint256 upperBound\\n  ) internal pure returns (uint256 tokenId) {\\n    // Special case in which the incrementor would be equivalent to 0\\n    // so we need to add 1 to it.\\n    if (incrementor % modulo == modulo - 1 - (lowerBound % modulo)) {\\n      incrementor += 1;\\n    }\\n    tokenId = lowerBound + ((randomNumber + incrementor) % modulo) + 1;\\n    // Shouldn't trigger too many iterations\\n    while (tokenId > upperBound) {\\n      tokenId = lowerBound + ((tokenId + incrementor) % modulo) + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev Get the bounds of the range to generate the ids in\\n   * @return lowerBound The starting position from which the tokenId will be randomly picked\\n   * @return upperBound The ending position until which the tokenId will be randomly picked\\n   */\\n  function getBounds()\\n    internal\\n    view\\n    returns (uint256 lowerBound, uint256 upperBound)\\n  {\\n    if (totalSupply < 8000) {\\n      // For 8 batch mints of 1000 tokens including the presale\\n      lowerBound = (totalSupply / 1000) * 1000;\\n      upperBound = lowerBound + 1000;\\n    } else if (totalSupply < 10000) {\\n      // To get the 200 tokens slots to be distributed by Dutch auctions\\n      lowerBound = 8000 + ((totalSupply - 8000) / 200) * 200;\\n      upperBound = lowerBound + 200;\\n    } else {\\n      // Set both at zero to mark that we reached the end of the max supply\\n      lowerBound = 0;\\n      upperBound = 0;\\n    }\\n  }\\n\\n  /**\\n   * @dev Set the address of the Piano King Wallet\\n   */\\n  function setPianoKingWallet(address addr) external onlyOwner {\\n    require(addr != address(0), \\\"Invalid address\\\");\\n    pianoKingWallet = addr;\\n  }\\n\\n  /**\\n   * @dev Set the address of the Piano King Whitelist\\n   */\\n  function setWhitelist(address addr) external onlyOwner {\\n    require(addr != address(0), \\\"Invalid address\\\");\\n    pianoKingWhitelist = PianoKingWhitelist(addr);\\n  }\\n\\n  /**\\n   * @dev Set the address of the contract authorized to do Dutch Auction\\n   * of the tokens of this contract\\n   */\\n  function setDutchAuction(address addr) external onlyOwner {\\n    require(addr != address(0), \\\"Invalid address\\\");\\n    pianoKingDutchAuction = addr;\\n  }\\n\\n  /**\\n   * @dev Set the address of the contract meant to hold the royalties\\n   */\\n  function setFundsContract(address addr) external onlyOwner {\\n    require(addr != address(0), \\\"Invalid address\\\");\\n    pianoKingFunds = addr;\\n  }\\n\\n  /**\\n   * @dev Set the address of the contract meant to request the\\n   * random number\\n   */\\n  function setRNConsumerContract(address addr) external onlyOwner {\\n    require(addr != address(0), \\\"Invalid address\\\");\\n    pianoKingRNConsumer = IPianoKingRNConsumer(addr);\\n  }\\n\\n  /**\\n   * @dev Set the base URI of every token URI\\n   */\\n  function setBaseURI(string memory uri) external onlyOwner {\\n    baseURI = uri;\\n  }\\n\\n  /**\\n   * @dev Set addresses directly in the list as if they preminted for free\\n   * like for giveaway.\\n   */\\n  function setPreApprovedAddresses(\\n    address[] memory addrs,\\n    uint256[] memory amounts\\n  ) external onlyOwner {\\n    require(addrs.length <= 10, \\\"Too many addresses\\\");\\n    require(addrs.length == amounts.length, \\\"Arrays length do not match\\\");\\n    for (uint256 i = 0; i < addrs.length; i++) {\\n      address addr = addrs[i];\\n      require(addr != address(0), \\\"Invalid address\\\");\\n      uint256 amount = amounts[i];\\n      require(amount > 0, \\\"Amount too low\\\");\\n      require(\\n        amount + preMintAllowance[addr] <= MAX_TOKEN_PER_ADDRESS,\\n        \\\"Above maximum\\\"\\n      );\\n      if (preMintAllowance[addr] == 0) {\\n        preMintAddresses.push(addr);\\n      }\\n      preMintAllowance[addr] = amount;\\n    }\\n  }\\n\\n  /**\\n   * @dev Retrieve the funds of the sale\\n   */\\n  function retrieveFunds() external {\\n    // Only the Piano King Wallet or the owner can withraw the funds\\n    require(\\n      msg.sender == pianoKingWallet || msg.sender == owner(),\\n      \\\"Not allowed\\\"\\n    );\\n    payable(pianoKingWallet).sendValue(address(this).balance);\\n  }\\n\\n  // The following functions are overrides required by Solidity.\\n\\n  /**\\n   * @dev Override of an OpenZeppelin hook called on before any token transfer\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal override {\\n    // This will prevent anyone from burning a token if he or she tries\\n    // to send it to the zero address\\n    require(to != address(0), \\\"Burning not allowed\\\");\\n    super._beforeTokenTransfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Get the URI for a given token\\n   */\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    override\\n    returns (string memory)\\n  {\\n    require(_exists(tokenId), \\\"URI query for nonexistent token\\\");\\n    // Concatenate the baseURI and the tokenId as the tokenId should\\n    // just be appended at the end to access the token metadata\\n    return string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"));\\n  }\\n\\n  // View and pure functions\\n\\n  /**\\n   * @dev Get the address of the Piano King wallet\\n   */\\n  function getPianoKingWallet() external view returns (address) {\\n    return pianoKingWallet;\\n  }\\n\\n  /**\\n   * @dev Get the addresses that preminted\\n   */\\n  function getPremintAddresses() external view returns (address[] memory) {\\n    return preMintAddresses;\\n  }\\n\\n  /**\\n   * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n   * @param tokenId - the NFT asset queried for royalty information\\n   * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n   * @return receiver - address of who should be sent the royalty payment\\n   * @return royaltyAmount - the royalty payment amount for `salePrice`\\n   */\\n  function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n    external\\n    view\\n    override\\n    returns (address receiver, uint256 royaltyAmount)\\n  {\\n    // The funds should be sent to the funds contract\\n    receiver = pianoKingFunds;\\n    // We divide it by 10000 as the royalties can change from\\n    // 0 to 10000 representing percents with 2 decimals\\n    royaltyAmount = (salePrice * ROYALTIES) / 10000;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * We customize the ERC721 model of OpenZeppelin to make the variable internal\\n * instead of private as we want to access it to reduce fees for batch mints.\\n * And since we don't use OpenZeppelin mint functions and they are not part of\\n * of the official specification of the ERC721 (EIP-721), we removed them.\\n * Same for the burning function as we purposely forbid burning of a token once\\n * it has been minted.\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n  using Address for address;\\n  using Strings for uint256;\\n\\n  // Token name\\n  string internal _name;\\n\\n  // Token symbol\\n  string internal _symbol;\\n\\n  // Mapping from token ID to owner address\\n  mapping(uint256 => address) internal _owners;\\n\\n  // Mapping owner address to token count\\n  mapping(address => uint256) internal _balances;\\n\\n  // Mapping from token ID to approved address\\n  mapping(uint256 => address) internal _tokenApprovals;\\n\\n  // Mapping from owner to operator approvals\\n  mapping(address => mapping(address => bool)) internal _operatorApprovals;\\n\\n  /**\\n   * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n   */\\n  constructor(string memory name_, string memory symbol_) {\\n    _name = name_;\\n    _symbol = symbol_;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC165, IERC165)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IERC721).interfaceId ||\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-balanceOf}.\\n   */\\n  function balanceOf(address owner)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n    return _balances[owner];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-ownerOf}.\\n   */\\n  function ownerOf(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (address)\\n  {\\n    address owner = _owners[tokenId];\\n    require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n    return owner;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-name}.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-symbol}.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-tokenURI}.\\n   */\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (string memory)\\n  {\\n    // Implementation in child contract\\n    return \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev See {IERC721-approve}.\\n   */\\n  function approve(address to, uint256 tokenId) public virtual override {\\n    address owner = ERC721.ownerOf(tokenId);\\n    require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n    require(\\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n      \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n    );\\n\\n    _approve(to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-getApproved}.\\n   */\\n  function getApproved(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (address)\\n  {\\n    require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n    return _tokenApprovals[tokenId];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved)\\n    public\\n    virtual\\n    override\\n  {\\n    require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n    _operatorApprovals[_msgSender()][operator] = approved;\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address owner, address operator)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _operatorApprovals[owner][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-transferFrom}.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    //solhint-disable-next-line max-line-length\\n    require(\\n      _isApprovedOrOwner(_msgSender(), tokenId),\\n      \\\"ERC721: transfer caller is not owner nor approved\\\"\\n    );\\n\\n    _transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) public virtual override {\\n    require(\\n      _isApprovedOrOwner(_msgSender(), tokenId),\\n      \\\"ERC721: transfer caller is not owner nor approved\\\"\\n    );\\n    _safeTransfer(from, to, tokenId, _data);\\n  }\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n   *\\n   * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n   *\\n   * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n   * implement alternative mechanisms to perform token transfer, such as signature-based.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _safeTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) internal virtual {\\n    _transfer(from, to, tokenId);\\n    require(\\n      _checkOnERC721Received(from, to, tokenId, _data),\\n      \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns whether `tokenId` exists.\\n   *\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n   *\\n   * Tokens start existing when they are minted (`_mint`),\\n   * and stop existing when they are burned (`_burn`).\\n   */\\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n    return _owners[tokenId] != address(0);\\n  }\\n\\n  /**\\n   * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function _isApprovedOrOwner(address spender, uint256 tokenId)\\n    internal\\n    view\\n    virtual\\n    returns (bool)\\n  {\\n    require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n    address owner = ERC721.ownerOf(tokenId);\\n    return (spender == owner ||\\n      getApproved(tokenId) == spender ||\\n      isApprovedForAll(owner, spender));\\n  }\\n\\n  /**\\n   * @dev Transfers `tokenId` from `from` to `to`.\\n   *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual {\\n    require(\\n      ERC721.ownerOf(tokenId) == from,\\n      \\\"ERC721: transfer of token that is not own\\\"\\n    );\\n    require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfer(from, to, tokenId);\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId);\\n\\n    _balances[from] -= 1;\\n    _balances[to] += 1;\\n    _owners[tokenId] = to;\\n\\n    emit Transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Approve `to` to operate on `tokenId`\\n   *\\n   * Emits a {Approval} event.\\n   */\\n  function _approve(address to, uint256 tokenId) internal virtual {\\n    _tokenApprovals[tokenId] = to;\\n    emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n   * The call is not executed if the target address is not a contract.\\n   *\\n   * @param from address representing the previous owner of the given token ID\\n   * @param to target address that will receive the tokens\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param _data bytes optional data to send along with the call\\n   * @return bool whether the call correctly returned the expected magic value\\n   */\\n  function _checkOnERC721Received(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) private returns (bool) {\\n    if (to.isContract()) {\\n      try\\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\\n      returns (bytes4 retval) {\\n        return retval == IERC721Receiver.onERC721Received.selector;\\n      } catch (bytes memory reason) {\\n        if (reason.length == 0) {\\n          revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        } else {\\n          assembly {\\n            revert(add(32, reason), mload(reason))\\n          }\\n        }\\n      }\\n    } else {\\n      return true;\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any token transfer. This includes minting\\n   * and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\n   * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PianoKingWhitelist.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract PianoKingWhitelist is Ownable, ReentrancyGuard {\\n  using Address for address payable;\\n\\n  // Address => amount of tokens allowed for white listed address\\n  mapping(address => uint256) private whiteListAmount;\\n  address[] private whiteListedAddresses;\\n  // Supply left to be distributed\\n  uint256 private supplyLeft = 1000;\\n  uint256 private constant MAX_TOKEN_PER_ADDRESS = 25;\\n  // In wei\\n  uint256 private constant PRICE_PER_TOKEN = 100000000000000000;\\n  // Address authorized to withdraw the funds\\n  address private pianoKingWallet = 0xA263f5e0A44Cb4e22AfB21E957dE825027A1e586;\\n  // Indicate if the sale is open\\n  bool private saleOpen = true;\\n\\n  event AddressWhitelisted(\\n    address indexed addr,\\n    uint256 amountOfToken,\\n    uint256 fundsDeposited\\n  );\\n\\n  /**\\n   * @dev White list an address for a given amount of tokens\\n   */\\n  function whiteListSender() external payable nonReentrant {\\n    // Check that the sale is still open\\n    require(saleOpen, \\\"Sale not open\\\");\\n    // We check the value is at least greater or equal to that of\\n    // one token\\n    require(msg.value >= PRICE_PER_TOKEN, \\\"Not enough funds\\\");\\n    // We get the amount of tokens according to the value passed\\n    // by the sender. Since Solidity only supports integer numbers\\n    // the division will be an integer whose value is floored\\n    // (i.e. 15.9 => 15 and not 16)\\n    uint256 amountOfToken = msg.value / PRICE_PER_TOKEN;\\n    // We check there is enough supply left\\n    require(supplyLeft >= amountOfToken, \\\"Not enough tokens left\\\");\\n    // Check that the amount desired by the sender is below or\\n    // equal to the maximum per address\\n    require(\\n      amountOfToken + whiteListAmount[msg.sender] <= MAX_TOKEN_PER_ADDRESS,\\n      \\\"Above maximum\\\"\\n    );\\n    // If the amount is set to zero then the sender\\n    // is not yet whitelisted so we add it to the list\\n    // of whitelisted addresses\\n    if (whiteListAmount[msg.sender] == 0) {\\n      whiteListedAddresses.push(msg.sender);\\n    }\\n    // Assign the number of token to the sender\\n    whiteListAmount[msg.sender] += amountOfToken;\\n\\n    // Remove the assigned tokens from the supply left\\n    supplyLeft -= amountOfToken;\\n\\n    // Some events for easy to access info\\n    emit AddressWhitelisted(msg.sender, amountOfToken, msg.value);\\n  }\\n\\n  /**\\n   * @dev Set the address of the Piano King Wallet\\n   */\\n  function setPianoKingWallet(address addr) external onlyOwner {\\n    require(addr != address(0), \\\"Invalid address\\\");\\n    pianoKingWallet = addr;\\n  }\\n\\n  /**\\n    @dev Set the status of the sale\\n    @param open Whether the sale is open\\n   */\\n  function setSaleStatus(bool open) external onlyOwner {\\n    saleOpen = open;\\n  }\\n\\n  /**\\n   * @dev Get the supply left\\n   */\\n  function getSupplyLeft() external view returns (uint256) {\\n    return supplyLeft;\\n  }\\n\\n  /**\\n   * @dev Get the amount of tokens the address has been whitelisted for\\n   * If the value is equal to 0 then the address is not whitelisted\\n   * @param adr The address to check\\n   */\\n  function getWhitelistAllowance(address adr) public view returns (uint256) {\\n    return whiteListAmount[adr];\\n  }\\n\\n  /**\\n   * @dev Get the list of all whitelisted addresses\\n   */\\n  function getWhitelistedAddresses() public view returns (address[] memory) {\\n    return whiteListedAddresses;\\n  }\\n\\n  /**\\n   * @dev Retrieve the funds of the sale\\n   */\\n  function retrieveFunds() external {\\n    // Only the Piano King Wallet or the owner can withraw the funds\\n    require(\\n      msg.sender == pianoKingWallet || msg.sender == owner(),\\n      \\\"Not allowed\\\"\\n    );\\n    payable(pianoKingWallet).sendValue(address(this).balance);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPianoKingRNConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPianoKingRNConsumer {\\n  function getRandomNumbers()\\n    external\\n    view\\n    returns (uint256 _randomSeed, uint256 _randomIncrementor);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pianoKingWhitelistAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pianoKingRNConsumer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pianoKingFunds\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPianoKingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPremintAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pianoKingDutchAuction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pianoKingFunds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pianoKingRNConsumer\",\"outputs\":[{\"internalType\":\"contract IPianoKingRNConsumer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pianoKingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pianoKingWhitelist\",\"outputs\":[{\"internalType\":\"contract PianoKingWhitelist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"preMintAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"preMintAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"preMintFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"presaleMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setDutchAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setPianoKingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"setPreApprovedAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setRNConsumerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PianoKing","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b2e31c3d51bbfefb4653789cf0965f9dfa7c902a00000000000000000000000025c246da9775aeb0fa25773e7a703c762d0c3e58000000000000000000000000832790eb7323d94deffa877ac9eb843aed91edd3","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}