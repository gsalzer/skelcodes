{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Controller.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./interfaces/IController.sol\\\";\\nimport \\\"./interfaces/INeuronPool.sol\\\";\\nimport \\\"./interfaces/INeuronPoolConverter.sol\\\";\\nimport \\\"./interfaces/IOneSplitAudit.sol\\\";\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"./interfaces/IConverter.sol\\\";\\n\\n// Deployed once (in contrast with nPools - those are created individually for each strategy).\\n// Then new nPools are added via setNPool function\\ncontract Controller {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    address public constant burn = 0x000000000000000000000000000000000000dEaD;\\n    address public onesplit = 0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E;\\n\\n    address public governance;\\n    address public strategist;\\n    address public devfund;\\n    address public treasury;\\n    address public timelock;\\n\\n    // Convenience fee 0.1%\\n    uint256 public convenienceFee = 100;\\n    uint256 public constant convenienceFeeMax = 100000;\\n\\n    mapping(address => address) public nPools;\\n    mapping(address => address) public strategies;\\n    mapping(address => mapping(address => address)) public converters;\\n    mapping(address => mapping(address => bool)) public approvedStrategies;\\n    mapping(address => bool) public approvedNPoolConverters;\\n\\n    uint256 public split = 500;\\n    uint256 public constant max = 10000;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _timelock,\\n        address _devfund,\\n        address _treasury\\n    ) {\\n        governance = _governance;\\n        strategist = _strategist;\\n        timelock = _timelock;\\n        devfund = _devfund;\\n        treasury = _treasury;\\n    }\\n\\n    function setDevFund(address _devfund) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        devfund = _devfund;\\n    }\\n\\n    function setTreasury(address _treasury) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        treasury = _treasury;\\n    }\\n\\n    function setStrategist(address _strategist) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        strategist = _strategist;\\n    }\\n\\n    function setSplit(uint256 _split) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(_split <= max, \\\"numerator cannot be greater than denominator\\\");\\n        split = _split;\\n    }\\n\\n    function setOneSplit(address _onesplit) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        onesplit = _onesplit;\\n    }\\n\\n    function setGovernance(address _governance) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        governance = _governance;\\n    }\\n\\n    function setTimelock(address _timelock) public {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        timelock = _timelock;\\n    }\\n\\n    function setNPool(address _token, address _nPool) public {\\n        require(\\n            msg.sender == strategist || msg.sender == governance,\\n            \\\"!strategist\\\"\\n        );\\n        require(nPools[_token] == address(0), \\\"nPool\\\");\\n        nPools[_token] = _nPool;\\n    }\\n\\n    function approveNPoolConverter(address _converter) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        approvedNPoolConverters[_converter] = true;\\n    }\\n\\n    function revokeNPoolConverter(address _converter) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        approvedNPoolConverters[_converter] = false;\\n    }\\n\\n    // Called before adding strategy to controller, turns the strategy 'on-off'\\n    // We're in need of an additional array for strategies' on-off states (are we?)\\n    // Called when deploying\\n    function approveStrategy(address _token, address _strategy) public {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        approvedStrategies[_token][_strategy] = true;\\n    }\\n\\n    // Turns off/revokes strategy\\n    function revokeStrategy(address _token, address _strategy) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(\\n            strategies[_token] != _strategy,\\n            \\\"cannot revoke active strategy\\\"\\n        );\\n        approvedStrategies[_token][_strategy] = false;\\n    }\\n\\n    function setConvenienceFee(uint256 _convenienceFee) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        convenienceFee = _convenienceFee;\\n    }\\n\\n    // Adding or updating a strategy\\n    function setStrategy(address _token, address _strategy) public {\\n        require(\\n            msg.sender == strategist || msg.sender == governance,\\n            \\\"!strategist\\\"\\n        );\\n        require(approvedStrategies[_token][_strategy] == true, \\\"!approved\\\");\\n\\n        address _current = strategies[_token];\\n        if (_current != address(0)) {\\n            IStrategy(_current).withdrawAll();\\n        }\\n        strategies[_token] = _strategy;\\n    }\\n\\n    // Depositing token to a pool\\n    function earn(address _token, uint256 _amount) public {\\n        address _strategy = strategies[_token];\\n        // Token needed for strategy\\n        address _want = IStrategy(_strategy).want();\\n        if (_want != _token) {\\n            // Convert if token other than wanted deposited\\n            address converter = converters[_token][_want];\\n            IERC20(_token).safeTransfer(converter, _amount);\\n            _amount = IConverter(converter).convert(_strategy);\\n            IERC20(_want).safeTransfer(_strategy, _amount);\\n        } else {\\n            // Transferring to the strategy address\\n            IERC20(_token).safeTransfer(_strategy, _amount);\\n        }\\n        // Calling deposit @ strategy\\n        IStrategy(_strategy).deposit();\\n    }\\n\\n    function balanceOf(address _token) external view returns (uint256) {\\n        return IStrategy(strategies[_token]).balanceOf();\\n    }\\n\\n    function withdrawAll(address _token) public {\\n        require(\\n            msg.sender == strategist || msg.sender == governance,\\n            \\\"!strategist\\\"\\n        );\\n        IStrategy(strategies[_token]).withdrawAll();\\n    }\\n\\n    function inCaseTokensGetStuck(address _token, uint256 _amount) public {\\n        require(\\n            msg.sender == strategist || msg.sender == governance,\\n            \\\"!governance\\\"\\n        );\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    function inCaseStrategyTokenGetStuck(address _strategy, address _token)\\n        public\\n    {\\n        require(\\n            msg.sender == strategist || msg.sender == governance,\\n            \\\"!governance\\\"\\n        );\\n        IStrategy(_strategy).withdraw(_token);\\n    }\\n\\n    function getExpectedReturn(\\n        address _strategy,\\n        address _token,\\n        uint256 parts\\n    ) public view returns (uint256 expected) {\\n        uint256 _balance = IERC20(_token).balanceOf(_strategy);\\n        address _want = IStrategy(_strategy).want();\\n        (expected, ) = IOneSplitAudit(onesplit).getExpectedReturn(\\n            _token,\\n            _want,\\n            _balance,\\n            parts,\\n            0\\n        );\\n    }\\n\\n    // Only allows to withdraw non-core strategy tokens and send to treasury ~ this is over and above normal yield\\n    function yearn(\\n        address _strategy,\\n        address _token,\\n        uint256 parts\\n    ) public {\\n        require(\\n            msg.sender == strategist || msg.sender == governance,\\n            \\\"!governance\\\"\\n        );\\n        // This contract should never have value in it, but just incase since this is a public call\\n        uint256 _before = IERC20(_token).balanceOf(address(this));\\n        IStrategy(_strategy).withdraw(_token);\\n        uint256 _after = IERC20(_token).balanceOf(address(this));\\n        if (_after > _before) {\\n            uint256 _amount = _after.sub(_before);\\n            address _want = IStrategy(_strategy).want();\\n            uint256[] memory _distribution;\\n            uint256 _expected;\\n            _before = IERC20(_want).balanceOf(address(this));\\n            IERC20(_token).safeApprove(onesplit, 0);\\n            IERC20(_token).safeApprove(onesplit, _amount);\\n            (_expected, _distribution) = IOneSplitAudit(onesplit)\\n            .getExpectedReturn(_token, _want, _amount, parts, 0);\\n            IOneSplitAudit(onesplit).swap(\\n                _token,\\n                _want,\\n                _amount,\\n                _expected,\\n                _distribution,\\n                0\\n            );\\n            _after = IERC20(_want).balanceOf(address(this));\\n            if (_after > _before) {\\n                _amount = _after.sub(_before);\\n                uint256 _treasury = _amount.mul(split).div(max);\\n                earn(_want, _amount.sub(_treasury));\\n                IERC20(_want).safeTransfer(treasury, _treasury);\\n            }\\n        }\\n    }\\n\\n    function withdraw(address _token, uint256 _amount) public {\\n        require(msg.sender == nPools[_token], \\\"!nPool\\\");\\n        IStrategy(strategies[_token]).withdraw(_amount);\\n    }\\n\\n    // Function to swap between nPools\\n    // Seems to be called when a new version of NPool is created\\n    // With NPool functioning, unwanted tokens are sometimes landing here; this function helps transfer them to another pool\\n    // A transaction example https://etherscan.io/tx/0xc6f15e55f8520bc22a0bb9ac15b6f3fd80a0295e5c40b0e255eb7f3be34733f2\\n    // https://etherscan.io/txs?a=0x6847259b2B3A4c17e7c43C54409810aF48bA5210&ps=100&p=3 - Pickle's transaction calls\\n    // Last called ~140 days ago\\n    // Seems to be the culprit of recent Pickle's attack https://twitter.com/n2ckchong/status/1330244058669850624?lang=en\\n    // Googling the function returns some hack explanations https://halborn.com/category/explained-hacks/\\n    // >The problem with this function is that it doesn’t check the validity of the nPools presented to it\\n    function swapExactNPoolForNPool(\\n        address _fromNPool, // From which NPool\\n        address _toNPool, // To which NPool\\n        uint256 _fromNPoolAmount, // How much nPool tokens to swap\\n        uint256 _toNPoolMinAmount, // How much nPool tokens you'd like at a minimum\\n        address payable[] calldata _targets, // targets - converters' contract addresses\\n        bytes[] calldata _data\\n    ) external returns (uint256) {\\n        require(_targets.length == _data.length, \\\"!length\\\");\\n\\n        // Only return last response\\n        for (uint256 i = 0; i < _targets.length; i++) {\\n            require(_targets[i] != address(0), \\\"!converter\\\");\\n            require(approvedNPoolConverters[_targets[i]], \\\"!converter\\\");\\n        }\\n\\n        address _fromNPoolToken = INeuronPool(_fromNPool).token();\\n        address _toNPoolToken = INeuronPool(_toNPool).token();\\n\\n        // Get pTokens from msg.sender\\n        IERC20(_fromNPool).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _fromNPoolAmount\\n        );\\n\\n        // Calculate how much underlying\\n        // is the amount of pTokens worth\\n        uint256 _fromNPoolUnderlyingAmount = _fromNPoolAmount\\n        .mul(INeuronPool(_fromNPool).getRatio())\\n        .div(10**uint256(INeuronPool(_fromNPool).decimals()));\\n\\n        // Call 'withdrawForSwap' on NPool's current strategy if NPool\\n        // doesn't have enough initial capital.\\n        // This has moves the funds from the strategy to the NPool's\\n        // 'earnable' amount. Enabling 'free' withdrawals\\n        uint256 _fromNPoolAvailUnderlying = IERC20(_fromNPoolToken).balanceOf(\\n            _fromNPool\\n        );\\n        if (_fromNPoolAvailUnderlying < _fromNPoolUnderlyingAmount) {\\n            IStrategy(strategies[_fromNPoolToken]).withdrawForSwap(\\n                _fromNPoolUnderlyingAmount.sub(_fromNPoolAvailUnderlying)\\n            );\\n        }\\n\\n        // Withdraw from NPool\\n        // Note: this is free since its still within the \\\"earnable\\\" amount\\n        //       as we transferred the access\\n        IERC20(_fromNPool).safeApprove(_fromNPool, 0);\\n        IERC20(_fromNPool).safeApprove(_fromNPool, _fromNPoolAmount);\\n        INeuronPool(_fromNPool).withdraw(_fromNPoolAmount);\\n\\n        // Calculate fee\\n        uint256 _fromUnderlyingBalance = IERC20(_fromNPoolToken).balanceOf(\\n            address(this)\\n        );\\n        uint256 _convenienceFee = _fromUnderlyingBalance\\n        .mul(convenienceFee)\\n        .div(convenienceFeeMax);\\n\\n        if (_convenienceFee > 1) {\\n            IERC20(_fromNPoolToken).safeTransfer(\\n                devfund,\\n                _convenienceFee.div(2)\\n            );\\n            IERC20(_fromNPoolToken).safeTransfer(\\n                treasury,\\n                _convenienceFee.div(2)\\n            );\\n        }\\n\\n        // Executes sequence of logic\\n        for (uint256 i = 0; i < _targets.length; i++) {\\n            _execute(_targets[i], _data[i]);\\n        }\\n\\n        // Deposit into new NPool\\n        uint256 _toBal = IERC20(_toNPoolToken).balanceOf(address(this));\\n        IERC20(_toNPoolToken).safeApprove(_toNPool, 0);\\n        IERC20(_toNPoolToken).safeApprove(_toNPool, _toBal);\\n        INeuronPool(_toNPool).deposit(_toBal);\\n\\n        // Send NPool Tokens to user\\n        uint256 _toNPoolBal = INeuronPool(_toNPool).balanceOf(address(this));\\n        if (_toNPoolBal < _toNPoolMinAmount) {\\n            revert(\\\"!min-nPool-amount\\\");\\n        }\\n\\n        INeuronPool(_toNPool).transfer(msg.sender, _toNPoolBal);\\n\\n        return _toNPoolBal;\\n    }\\n\\n    function _execute(address _target, bytes memory _data)\\n        internal\\n        returns (bytes memory response)\\n    {\\n        require(_target != address(0), \\\"!target\\\");\\n\\n        // Call contract in current context\\n        assembly {\\n            let succeeded := delegatecall(\\n                sub(gas(), 5000),\\n                _target,\\n                add(_data, 0x20),\\n                mload(_data),\\n                0,\\n                0\\n            )\\n            let size := returndatasize()\\n\\n            response := mload(0x40)\\n            mstore(\\n                0x40,\\n                add(response, and(add(add(size, 0x20), 0x1f), not(0x1f)))\\n            )\\n            mstore(response, size)\\n            returndatacopy(add(response, 0x20), 0, size)\\n\\n            switch iszero(succeeded)\\n            case 1 {\\n                // throw if delegatecall failed\\n                revert(add(response, 0x20), size)\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IController.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\ninterface IController {\\n    function nPools(address) external view returns (address);\\n\\n    function rewards() external view returns (address);\\n\\n    function devfund() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(address, uint256) external;\\n\\n    function earn(address, uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INeuronPool.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface INeuronPool is IERC20 {\\n    function token() external view returns (address);\\n\\n    function claimInsurance() external; // NOTE: Only yDelegatedVault implements this\\n\\n    function getRatio() external view returns (uint256);\\n\\n    function depositAll() external;\\n\\n    function deposit(uint256) external;\\n\\n    function withdrawAll() external;\\n\\n    function withdraw(uint256) external;\\n\\n    function earn() external;\\n\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INeuronPoolConverter.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\ninterface INeuronPoolConverter {\\n    function convert(\\n        address _refundExcess, // address to send the excess amount when adding liquidity\\n        uint256 _amount, // UNI LP Amount\\n        bytes calldata _data\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOneSplitAudit.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\ninterface IOneSplitAudit {\\n    function getExpectedReturn(\\n        address fromToken,\\n        address toToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 featureFlags\\n    )\\n        external\\n        view\\n        returns (uint256 returnAmount, uint256[] memory distribution);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] calldata distribution,\\n        uint256 featureFlags\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategy.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\ninterface IStrategy {\\n    function rewards() external view returns (address);\\n\\n    function gauge() external view returns (address);\\n\\n    function want() external view returns (address);\\n\\n    function timelock() external view returns (address);\\n\\n    function deposit() external;\\n\\n    function withdrawForSwap(uint256) external returns (uint256);\\n\\n    function withdraw(address) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function skim() external;\\n\\n    function withdrawAll() external returns (uint256);\\n\\n    function balanceOf() external view returns (uint256);\\n\\n    function harvest() external;\\n\\n    function setTimelock(address) external;\\n\\n    function setController(address _controller) external;\\n\\n    function execute(address _target, bytes calldata _data)\\n        external\\n        payable\\n        returns (bytes memory response);\\n\\n    function execute(bytes calldata _data)\\n        external\\n        payable\\n        returns (bytes memory response);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConverter.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\ninterface IConverter {\\n    function convert(address) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategyCurveSteCrv.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../interfaces/INeuronPool.sol\\\";\\nimport \\\"../interfaces/IStEth.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../interfaces/ICurve.sol\\\";\\nimport \\\"../interfaces/IUniswapRouterV2.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\n\\nimport \\\"./StrategyBase.sol\\\";\\n\\ncontract StrategyCurveSteCrv is StrategyBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // Curve\\n    IStEth public constant stEth = IStEth(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84); // lido stEth\\n    IERC20 public constant steCRV = IERC20(0x06325440D014e39736583c165C2963BA99fAf14E); // ETH-stETH curve lp\\n\\n    // Curve DAO\\n    ICurveGauge public gauge =\\n        ICurveGauge(0x182B723a58739a9c974cFDB385ceaDb237453c28); // stEthGauge\\n    ICurveFi public curve =\\n        ICurveFi(0xDC24316b9AE028F1497c275EB9192a3Ea0f67022); // stEthSwap\\n    address public mintr = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\\n\\n    // Tokens we're farming\\n    IERC20 public constant crv =\\n        IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52);\\n    IERC20 public constant ldo =\\n        IERC20(0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32);\\n\\n    // How much CRV tokens to keep\\n    uint256 public keepCRV = 500;\\n    uint256 public keepCRVMax = 10000;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        StrategyBase(\\n            address(steCRV),\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {\\n        steCRV.approve(address(gauge), type(uint256).max);\\n        stEth.approve(address(curve), type(uint256).max);\\n        ldo.safeApprove(address(univ2Router2), type(uint256).max);\\n        crv.approve(address(univ2Router2), type(uint256).max);\\n    }\\n\\n    // Swap for ETH\\n    receive() external payable {}\\n\\n    // **** Getters ****\\n\\n    function balanceOfPool() public view override returns (uint256) {\\n        return gauge.balanceOf(address(this));\\n    }\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"StrategyCurveStETH\\\";\\n    }\\n\\n    function getHarvestable() external view returns (uint256) {\\n        return gauge.claimable_reward(address(this), address(crv));\\n    }\\n\\n    function getHarvestableEth() external view returns (uint256) {\\n        uint256 claimableLdo = gauge.claimable_reward(\\n            address(this),\\n            address(ldo)\\n        );\\n        uint256 claimableCrv = gauge.claimable_reward(\\n            address(this),\\n            address(crv)\\n        );\\n\\n        return\\n            _estimateSell(address(crv), claimableCrv).add(\\n                _estimateSell(address(ldo), claimableLdo)\\n            );\\n    }\\n\\n    function _estimateSell(address currency, uint256 amount)\\n        internal\\n        view\\n        returns (uint256 outAmount)\\n    {\\n        address[] memory path = new address[](2);\\n        path[0] = currency;\\n        path[1] = weth;\\n        uint256[] memory amounts = IUniswapRouterV2(univ2Router2).getAmountsOut(\\n            amount,\\n            path\\n        );\\n        outAmount = amounts[amounts.length - 1];\\n\\n        return outAmount;\\n    }\\n\\n    // **** Setters ****\\n\\n    function setKeepCRV(uint256 _keepCRV) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        keepCRV = _keepCRV;\\n    }\\n\\n    // **** State Mutations ****\\n\\n    function deposit() public override {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            gauge.deposit(_want);\\n        }\\n    }\\n\\n    function _withdrawSome(uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        gauge.withdraw(_amount);\\n        return _amount;\\n    }\\n\\n    function harvest() public override onlyBenevolent {\\n        // Anyone can harvest it at any given time.\\n        // I understand the possibility of being frontrun / sandwiched\\n        // But ETH is a dark forest, and I wanna see how this plays out\\n        // i.e. will be be heavily frontrunned/sandwiched?\\n        //      if so, a new strategy will be deployed.\\n\\n        gauge.claim_rewards();\\n        ICurveMintr(mintr).mint(address(gauge));\\n\\n        uint256 _ldo = ldo.balanceOf(address(this));\\n        uint256 _crv = crv.balanceOf(address(this));\\n\\n        if (_crv > 0) {\\n            _swapToNeurAndDistributePerformanceFees(address(crv), sushiRouter);\\n        }\\n\\n        if (_ldo > 0) {\\n            _swapToNeurAndDistributePerformanceFees(address(ldo), sushiRouter);\\n        }\\n\\n        _ldo = ldo.balanceOf(address(this));\\n        _crv = crv.balanceOf(address(this));\\n\\n        if (_crv > 0) {\\n            // How much CRV to keep to restake?\\n            uint256 _keepCRV = _crv.mul(keepCRV).div(keepCRVMax);\\n            // IERC20(crv).safeTransfer(address(crvLocker), _keepCRV);\\n            if (_keepCRV > 0) {\\n                IERC20(crv).safeTransfer(\\n                    IController(controller).treasury(),\\n                    _keepCRV\\n                );\\n            }\\n\\n            // How much CRV to swap?\\n            _crv = _crv.sub(_keepCRV);\\n            _swapUniswap(address(crv), weth, _crv);\\n        }\\n        if (_ldo > 0) {\\n            _swapUniswap(address(ldo), weth, _ldo);\\n        }\\n        IWETH(weth).withdraw(IWETH(weth).balanceOf(address(this)));\\n\\n        uint256 _eth = address(this).balance;\\n        stEth.submit{value: _eth / 2}(strategist);\\n        _eth = address(this).balance;\\n        uint256 _stEth = stEth.balanceOf(address(this));\\n\\n        uint256[2] memory liquidity;\\n        liquidity[0] = _eth;\\n        liquidity[1] = _stEth;\\n\\n        curve.add_liquidity{value: _eth}(liquidity, 0);\\n\\n        // We want to get back sCRV\\n        deposit();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStEth.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IStEth is IERC20 {\\n    function submit(address) external payable returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\ninterface IWETH {\\n    function name() external view returns (string memory);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function deposit() external payable;\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurve.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\ninterface ICurveFi {\\n    function add_liquidity(\\n        // stETH pool\\n        uint256[2] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external payable;\\n\\n    function balances(int128) external view returns (uint256);\\n}\\n\\ninterface ICurveFi_2 {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\\n        external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts)\\n        external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function balances(int128) external view returns (uint256);\\n}\\n\\ninterface ICurveFi_3 {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount)\\n        external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] calldata amounts)\\n        external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function balances(uint256) external view returns (uint256);\\n}\\n\\ninterface ICurveFi_4 {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount)\\n        external;\\n\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\\n        external\\n        payable;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] calldata amounts)\\n        external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function balances(int128) external view returns (uint256);\\n}\\n\\ninterface ICurveZap_4 {\\n    function add_liquidity(\\n        uint256[4] calldata uamounts,\\n        uint256 min_mint_amount\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] calldata min_uamounts)\\n        external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] calldata uamounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n        external\\n        returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_uamount\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_uamount,\\n        bool donate_dust\\n    ) external;\\n\\n    function withdraw_donated_dust() external;\\n\\n    function coins(int128 arg0) external returns (address);\\n\\n    function underlying_coins(int128 arg0) external returns (address);\\n\\n    function curve() external returns (address);\\n\\n    function token() external returns (address);\\n}\\n\\ninterface ICurveZap {\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_uamount\\n    ) external;\\n}\\n\\n// Interface to manage Crv strategies' interactions\\ninterface ICurveGauge {\\n    function deposit(uint256 _value) external;\\n\\n    function deposit(uint256 _value, address addr) external;\\n\\n    function balanceOf(address arg0) external view returns (uint256);\\n\\n    function withdraw(uint256 _value) external;\\n\\n    function withdraw(uint256 _value, bool claim_rewards) external;\\n\\n    function claim_rewards() external;\\n\\n    function claim_rewards(address addr) external;\\n\\n    function claimable_tokens(address addr) external returns (uint256);\\n\\n    function claimable_reward(address addr) external view returns (uint256);\\n\\n    function claimable_reward(address, address) external view returns (uint256);\\n\\n    function integrate_fraction(address arg0) external view returns (uint256);\\n}\\n\\ninterface ICurveMintr {\\n    function mint(address) external;\\n\\n    function minted(address arg0, address arg1) external view returns (uint256);\\n}\\n\\ninterface ICurveVotingEscrow {\\n    function locked(address arg0)\\n        external\\n        view\\n        returns (int128 amount, uint256 end);\\n\\n    function locked__end(address _addr) external view returns (uint256);\\n\\n    function create_lock(uint256, uint256) external;\\n\\n    function increase_amount(uint256) external;\\n\\n    function increase_unlock_time(uint256 _unlock_time) external;\\n\\n    function withdraw() external;\\n\\n    function smart_wallet_checker() external returns (address);\\n}\\n\\ninterface ICurveSmartContractChecker {\\n    function wallets(address) external returns (bool);\\n\\n    function approveWallet(address _wallet) external;\\n}\\n\\ninterface ICurveFi_Polygon_3 {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount)\\n        external;\\n\\n    function add_liquidity(\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] calldata amounts)\\n        external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function balances(uint256) external view returns (uint256);\\n}\\n\\ninterface ICurveFi_Polygon_2 {\\n    function A() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function dynamic_fee(int128 i, int128 j) external view returns (uint256);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function calc_token_amount(uint256[2] calldata _amounts, bool is_deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function add_liquidity(uint256[2] calldata _amounts, uint256 _min_mint_amount)\\n        external\\n        returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] calldata _amounts,\\n        uint256 _min_mint_amount,\\n        bool _use_underlying\\n    ) external returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] calldata _min_amounts)\\n        external\\n        returns (uint256[2] calldata);\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[2] calldata _min_amounts,\\n        bool _use_underlying\\n    ) external returns (uint256[2] calldata);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] calldata _amounts,\\n        uint256 _max_burn_amount\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] calldata _amounts,\\n        uint256 _max_burn_amount,\\n        bool _use_underlying\\n    ) external returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount,\\n        bool _use_underlying\\n    ) external returns (uint256);\\n\\n    function ramp_A(uint256 _future_A, uint256 _future_time) external;\\n\\n    function stop_ramp_A() external;\\n\\n    function commit_new_fee(\\n        uint256 new_fee,\\n        uint256 new_admin_fee,\\n        uint256 new_offpeg_fee_multiplier\\n    ) external;\\n\\n    function apply_new_fee() external;\\n\\n    function revert_new_parameters() external;\\n\\n    function commit_transfer_ownership(address _owner) external;\\n\\n    function apply_transfer_ownership() external;\\n\\n    function revert_transfer_ownership() external;\\n\\n    function withdraw_admin_fees() external;\\n\\n    function donate_admin_fees() external;\\n\\n    function kill_me() external;\\n\\n    function unkill_me() external;\\n\\n    function set_aave_referral(uint256 referral_code) external;\\n\\n    function set_reward_receiver(address _reward_receiver) external;\\n\\n    function set_admin_fee_receiver(address _admin_fee_receiver) external;\\n\\n    function coins(uint256 arg0) external view returns (address);\\n\\n    function underlying_coins(uint256 arg0) external view returns (address);\\n\\n    function admin_balances(uint256 arg0) external view returns (uint256);\\n\\n    function fee() external view returns (uint256);\\n\\n    function offpeg_fee_multiplier() external view returns (uint256);\\n\\n    function admin_fee() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function lp_token() external view returns (address);\\n\\n    function initial_A() external view returns (uint256);\\n\\n    function future_A() external view returns (uint256);\\n\\n    function initial_A_time() external view returns (uint256);\\n\\n    function future_A_time() external view returns (uint256);\\n\\n    function admin_actions_deadline() external view returns (uint256);\\n\\n    function transfer_ownership_deadline() external view returns (uint256);\\n\\n    function future_fee() external view returns (uint256);\\n\\n    function future_admin_fee() external view returns (uint256);\\n\\n    function future_offpeg_fee_multiplier() external view returns (uint256);\\n\\n    function future_owner() external view returns (address);\\n\\n    function reward_receiver() external view returns (address);\\n\\n    function admin_fee_receiver() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapRouterV2.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\ninterface IUniswapRouterV2 {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategyBase.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../interfaces/INeuronPool.sol\\\";\\nimport \\\"../interfaces/IStakingRewards.sol\\\";\\nimport \\\"../interfaces/IUniswapRouterV2.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\n\\n// Strategy Contract Basics\\n\\nabstract contract StrategyBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // Perfomance fees - start with 30%\\n    uint256 public performanceTreasuryFee = 3000;\\n    uint256 public constant performanceTreasuryMax = 10000;\\n\\n    // Withdrawal fee 0%\\n    // - 0% to treasury\\n    // - 0% to dev fund\\n    uint256 public withdrawalTreasuryFee = 0;\\n    uint256 public constant withdrawalTreasuryMax = 100000;\\n\\n    uint256 public withdrawalDevFundFee = 0;\\n    uint256 public constant withdrawalDevFundMax = 100000;\\n\\n    // Tokens\\n    // Input token accepted by the contract\\n    address public immutable neuronTokenAddress;\\n    address public immutable want;\\n    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    // User accounts\\n    address public governance;\\n    address public controller;\\n    address public strategist;\\n    address public timelock;\\n\\n    // Dex\\n    address public constant univ2Router2 =\\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    address public constant sushiRouter =\\n        0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\\n\\n    mapping(address => bool) public harvesters;\\n\\n    constructor(\\n        // Input token accepted by the contract\\n        address _want,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    ) {\\n        require(_want != address(0));\\n        require(_governance != address(0));\\n        require(_strategist != address(0));\\n        require(_controller != address(0));\\n        require(_neuronTokenAddress != address(0));\\n        require(_timelock != address(0));\\n\\n        want = _want;\\n        governance = _governance;\\n        strategist = _strategist;\\n        controller = _controller;\\n        neuronTokenAddress = _neuronTokenAddress;\\n        timelock = _timelock;\\n    }\\n\\n    // **** Modifiers **** //\\n\\n    modifier onlyBenevolent() {\\n        require(\\n            harvesters[msg.sender] ||\\n                msg.sender == governance ||\\n                msg.sender == strategist\\n        );\\n        _;\\n    }\\n\\n    // **** Views **** //\\n\\n    function balanceOfWant() public view returns (uint256) {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    function balanceOfPool() public view virtual returns (uint256);\\n\\n    function balanceOf() public view returns (uint256) {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    function getName() external pure virtual returns (string memory);\\n\\n    // **** Setters **** //\\n\\n    function whitelistHarvester(address _harvester) external {\\n        require(\\n            msg.sender == governance || msg.sender == strategist,\\n            \\\"not authorized\\\"\\n        );\\n        harvesters[_harvester] = true;\\n    }\\n\\n    function revokeHarvester(address _harvester) external {\\n        require(\\n            msg.sender == governance || msg.sender == strategist,\\n            \\\"not authorized\\\"\\n        );\\n        harvesters[_harvester] = false;\\n    }\\n\\n    function setWithdrawalDevFundFee(uint256 _withdrawalDevFundFee) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        withdrawalDevFundFee = _withdrawalDevFundFee;\\n    }\\n\\n    function setWithdrawalTreasuryFee(uint256 _withdrawalTreasuryFee) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        withdrawalTreasuryFee = _withdrawalTreasuryFee;\\n    }\\n\\n    function setPerformanceTreasuryFee(uint256 _performanceTreasuryFee)\\n        external\\n    {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        performanceTreasuryFee = _performanceTreasuryFee;\\n    }\\n\\n    function setStrategist(address _strategist) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        strategist = _strategist;\\n    }\\n\\n    function setGovernance(address _governance) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        governance = _governance;\\n    }\\n\\n    function setTimelock(address _timelock) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        timelock = _timelock;\\n    }\\n\\n    function setController(address _controller) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        controller = _controller;\\n    }\\n\\n    // **** State mutations **** //\\n    function deposit() public virtual;\\n\\n    // Controller only function for creating additional rewards from dust\\n    function withdraw(IERC20 _asset) external returns (uint256 balance) {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        require(want != address(_asset), \\\"want\\\");\\n        balance = _asset.balanceOf(address(this));\\n        _asset.safeTransfer(controller, balance);\\n    }\\n\\n    // Withdraw partial funds, normally used with a pool withdrawal\\n    function withdraw(uint256 _amount) external {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        uint256 _balance = IERC20(want).balanceOf(address(this));\\n        if (_balance < _amount) {\\n            _amount = _withdrawSome(_amount.sub(_balance));\\n            _amount = _amount.add(_balance);\\n        }\\n\\n        uint256 _feeDev = _amount.mul(withdrawalDevFundFee).div(\\n            withdrawalDevFundMax\\n        );\\n        IERC20(want).safeTransfer(IController(controller).devfund(), _feeDev);\\n\\n        uint256 _feeTreasury = _amount.mul(withdrawalTreasuryFee).div(\\n            withdrawalTreasuryMax\\n        );\\n        IERC20(want).safeTransfer(\\n            IController(controller).treasury(),\\n            _feeTreasury\\n        );\\n\\n        address _nPool = IController(controller).nPools(address(want));\\n        require(_nPool != address(0), \\\"!nPool\\\"); // additional protection so we don't burn the funds\\n\\n        IERC20(want).safeTransfer(\\n            _nPool,\\n            _amount.sub(_feeDev).sub(_feeTreasury)\\n        );\\n    }\\n\\n    // Withdraw funds, used to swap between strategies\\n    function withdrawForSwap(uint256 _amount)\\n        external\\n        returns (uint256 balance)\\n    {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _withdrawSome(_amount);\\n\\n        balance = IERC20(want).balanceOf(address(this));\\n\\n        address _nPool = IController(controller).nPools(address(want));\\n        require(_nPool != address(0), \\\"!nPool\\\");\\n        IERC20(want).safeTransfer(_nPool, balance);\\n    }\\n\\n    // Withdraw all funds, normally used when migrating strategies\\n    function withdrawAll() external returns (uint256 balance) {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _withdrawAll();\\n\\n        balance = IERC20(want).balanceOf(address(this));\\n\\n        address _nPool = IController(controller).nPools(address(want));\\n        require(_nPool != address(0), \\\"!nPool\\\"); // additional protection so we don't burn the funds\\n        IERC20(want).safeTransfer(_nPool, balance);\\n    }\\n\\n    function _withdrawAll() internal {\\n        _withdrawSome(balanceOfPool());\\n    }\\n\\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\\n\\n    function harvest() public virtual;\\n\\n    // **** Emergency functions ****\\n\\n    function execute(address _target, bytes memory _data)\\n        public\\n        payable\\n        returns (bytes memory response)\\n    {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        require(_target != address(0), \\\"!target\\\");\\n\\n        // call contract in current context\\n        assembly {\\n            let succeeded := delegatecall(\\n                sub(gas(), 5000),\\n                _target,\\n                add(_data, 0x20),\\n                mload(_data),\\n                0,\\n                0\\n            )\\n            let size := returndatasize()\\n\\n            response := mload(0x40)\\n            mstore(\\n                0x40,\\n                add(response, and(add(add(size, 0x20), 0x1f), not(0x1f)))\\n            )\\n            mstore(response, size)\\n            returndatacopy(add(response, 0x20), 0, size)\\n\\n            switch iszero(succeeded)\\n            case 1 {\\n                // throw if delegatecall failed\\n                revert(add(response, 0x20), size)\\n            }\\n        }\\n    }\\n\\n    // **** Internal functions ****\\n    function _swapUniswap(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(_to != address(0));\\n\\n        address[] memory path;\\n\\n        if (_from == weth || _to == weth) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = weth;\\n            path[2] = _to;\\n        }\\n\\n        IUniswapRouterV2(univ2Router2).swapExactTokensForTokens(\\n            _amount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp.add(60)\\n        );\\n    }\\n\\n    function _swapUniswapWithPath(address[] memory path, uint256 _amount)\\n        internal\\n    {\\n        require(path[1] != address(0));\\n\\n        IUniswapRouterV2(univ2Router2).swapExactTokensForTokens(\\n            _amount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp.add(60)\\n        );\\n    }\\n\\n    function _swapSushiswap(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(_to != address(0));\\n\\n        address[] memory path;\\n\\n        if (_from == weth || _to == weth) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = weth;\\n            path[2] = _to;\\n        }\\n\\n        IUniswapRouterV2(sushiRouter).swapExactTokensForTokens(\\n            _amount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp.add(60)\\n        );\\n    }\\n\\n    function _swapWithUniLikeRouter(\\n        address routerAddress,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (bool) {\\n        require(_to != address(0));\\n        require(\\n            routerAddress != address(0),\\n            \\\"_swapWithUniLikeRouter routerAddress cant be zero\\\"\\n        );\\n\\n        address[] memory path;\\n\\n        if (_from == weth || _to == weth) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = weth;\\n            path[2] = _to;\\n        }\\n\\n        try\\n            IUniswapRouterV2(routerAddress).swapExactTokensForTokens(\\n                _amount,\\n                0,\\n                path,\\n                address(this),\\n                block.timestamp.add(60)\\n            )\\n        {\\n            return true;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    function _swapSushiswapWithPath(address[] memory path, uint256 _amount)\\n        internal\\n    {\\n        require(path[1] != address(0));\\n\\n        IUniswapRouterV2(sushiRouter).swapExactTokensForTokens(\\n            _amount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp.add(60)\\n        );\\n    }\\n\\n    function _swapToNeurAndDistributePerformanceFees(\\n        address swapToken,\\n        address swapRouterAddress\\n    ) internal {\\n        uint256 swapTokenBalance = IERC20(swapToken).balanceOf(address(this));\\n\\n        if (swapTokenBalance > 0 && performanceTreasuryFee > 0) {\\n            uint256 performanceTreasuryFeeAmount = swapTokenBalance\\n                .mul(performanceTreasuryFee)\\n                .div(performanceTreasuryMax);\\n            uint256 totalFeeAmout = performanceTreasuryFeeAmount;\\n\\n            _swapAmountToNeurAndDistributePerformanceFees(\\n                swapToken,\\n                totalFeeAmout,\\n                swapRouterAddress\\n            );\\n        }\\n    }\\n\\n    function _swapAmountToNeurAndDistributePerformanceFees(\\n        address swapToken,\\n        uint256 amount,\\n        address swapRouterAddress\\n    ) internal {\\n        uint256 swapTokenBalance = IERC20(swapToken).balanceOf(address(this));\\n\\n        require(\\n            swapTokenBalance >= amount,\\n            \\\"Amount is bigger than token balance\\\"\\n        );\\n\\n        IERC20(swapToken).safeApprove(swapRouterAddress, 0);\\n        IERC20(weth).safeApprove(swapRouterAddress, 0);\\n        IERC20(swapToken).safeApprove(swapRouterAddress, amount);\\n        IERC20(weth).safeApprove(swapRouterAddress, type(uint256).max);\\n        bool isSuccesfullSwap = _swapWithUniLikeRouter(\\n            swapRouterAddress,\\n            swapToken,\\n            neuronTokenAddress,\\n            amount\\n        );\\n\\n        if (isSuccesfullSwap) {\\n            uint256 neuronTokenBalance = IERC20(neuronTokenAddress).balanceOf(\\n                address(this)\\n            );\\n\\n            if (neuronTokenBalance > 0) {\\n                // Treasury fees\\n                // Sending strategy's tokens to treasury. Initially @ 30% (set by performanceTreasuryFee constant) of strategy's assets\\n                IERC20(neuronTokenAddress).safeTransfer(\\n                    IController(controller).treasury(),\\n                    neuronTokenBalance\\n                );\\n            }\\n        } else {\\n            // If failed swap to Neuron just transfer swap token to treasury\\n            IERC20(swapToken).safeApprove(IController(controller).treasury(), 0);\\n            IERC20(swapToken).safeApprove(IController(controller).treasury(), amount);\\n            IERC20(swapToken).safeTransfer(\\n                IController(controller).treasury(),\\n                amount\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface IStakingRewards {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function exit() external;\\n\\n    function getReward() external;\\n\\n    function getRewardForDuration() external view returns (uint256);\\n\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function lastUpdateTime() external view returns (uint256);\\n\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    function periodFinish() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function rewardPerTokenStored() external view returns (uint256);\\n\\n    function rewardRate() external view returns (uint256);\\n\\n    function rewards(address) external view returns (uint256);\\n\\n    function rewardsDistribution() external view returns (address);\\n\\n    function rewardsDuration() external view returns (uint256);\\n\\n    function rewardsToken() external view returns (address);\\n\\n    function stake(uint256 amount) external;\\n\\n    function stakeWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function stakingToken() external view returns (address);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function userRewardPerTokenPaid(address) external view returns (uint256);\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\\ninterface IStakingRewardsFactory {\\n    function deploy(address stakingToken, uint256 rewardAmount) external;\\n\\n    function isOwner() external view returns (bool);\\n\\n    function notifyRewardAmount(address stakingToken) external;\\n\\n    function notifyRewardAmounts() external;\\n\\n    function owner() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function rewardsToken() external view returns (address);\\n\\n    function stakingRewardsGenesis() external view returns (uint256);\\n\\n    function stakingRewardsInfoByStakingToken(address)\\n        external\\n        view\\n        returns (address stakingRewards, uint256 rewardAmount);\\n\\n    function stakingTokens(uint256) external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategySushiFarmBaseCustomHarvest.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./StrategyBase.sol\\\";\\nimport \\\"../interfaces/ISushiChef.sol\\\";\\n\\nabstract contract StrategySushiFarmBaseCustomHarvest is StrategyBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // Token addresses\\n    address public constant sushi = 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2;\\n    address public constant masterChef =\\n        0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd;\\n\\n    // WETH/<token1> pair\\n    address public token1;\\n\\n    // How much SUSHI tokens to keep?\\n    uint256 public keepSUSHI = 0;\\n    uint256 public constant keepSUSHIMax = 10000;\\n\\n    uint256 public poolId;\\n\\n    constructor(\\n        address _token1,\\n        uint256 _poolId,\\n        address _lp,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        StrategyBase(\\n            _lp,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {\\n        poolId = _poolId;\\n        token1 = _token1;\\n        IERC20(sushi).safeApprove(sushiRouter, type(uint256).max);\\n        IERC20(weth).safeApprove(sushiRouter, type(uint256).max);\\n    }\\n\\n    function balanceOfPool() public view override returns (uint256) {\\n        (uint256 amount, ) = ISushiChef(masterChef).userInfo(\\n            poolId,\\n            address(this)\\n        );\\n        return amount;\\n    }\\n\\n    function getHarvestable() external view returns (uint256) {\\n        return ISushiChef(masterChef).pendingSushi(poolId, address(this));\\n    }\\n\\n    // **** Setters ****\\n\\n    function deposit() public override {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            IERC20(want).safeApprove(masterChef, 0);\\n            IERC20(want).safeApprove(masterChef, _want);\\n            ISushiChef(masterChef).deposit(poolId, _want);\\n        }\\n    }\\n\\n    function _withdrawSome(uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        ISushiChef(masterChef).withdraw(poolId, _amount);\\n        return _amount;\\n    }\\n\\n    // **** Setters ****\\n\\n    function setKeepSUSHI(uint256 _keepSUSHI) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        keepSUSHI = _keepSUSHI;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISushiChef.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\n// interface for Sushiswap MasterChef contract\\ninterface ISushiChef {\\n    function BONUS_MULTIPLIER() external view returns (uint256);\\n\\n    function add(\\n        uint256 _allocPoint,\\n        address _lpToken,\\n        bool _withUpdate\\n    ) external;\\n\\n    function bonusEndBlock() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function dev(address _devaddr) external;\\n\\n    function devFundDivRate() external view returns (uint256);\\n\\n    function devaddr() external view returns (address);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function massUpdatePools() external;\\n\\n    function owner() external view returns (address);\\n\\n    function pendingSushi(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function sushi() external view returns (address);\\n\\n    function sushiPerBlock() external view returns (uint256);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address lpToken,\\n            uint256 allocPoint,\\n            uint256 lastRewardBlock,\\n            uint256 accsushiPerShare\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function renounceOwnership() external;\\n\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) external;\\n\\n    function setBonusEndBlock(uint256 _bonusEndBlock) external;\\n\\n    function setDevFundDivRate(uint256 _devFundDivRate) external;\\n\\n    function setsushiPerBlock(uint256 _sushiPerBlock) external;\\n\\n    function startBlock() external view returns (uint256);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function userInfo(uint256, address)\\n        external\\n        view\\n        returns (uint256 amount, uint256 rewardDebt);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategySushiFarmBase.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./StrategyBase.sol\\\";\\nimport \\\"../interfaces/ISushiChef.sol\\\";\\n\\nabstract contract StrategySushiFarmBase is StrategyBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // Token addresses\\n    address public constant sushi = 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2;\\n    address public constant masterChef =\\n        0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd;\\n\\n    // WETH/<token1> pair\\n    address public token1;\\n\\n    // How much SUSHI tokens to keep?\\n    uint256 public keepSUSHI = 0;\\n    uint256 public constant keepSUSHIMax = 10000;\\n\\n    uint256 public poolId;\\n\\n    constructor(\\n        address _token1,\\n        uint256 _poolId,\\n        address _lp,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        StrategyBase(\\n            _lp,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {\\n        poolId = _poolId;\\n        token1 = _token1;\\n        IERC20(sushi).safeApprove(sushiRouter, type(uint256).max);\\n        IERC20(weth).safeApprove(sushiRouter, type(uint256).max);\\n    }\\n\\n    function balanceOfPool() public view override returns (uint256) {\\n        (uint256 amount, ) = ISushiChef(masterChef).userInfo(\\n            poolId,\\n            address(this)\\n        );\\n        return amount;\\n    }\\n\\n    function getHarvestable() external view returns (uint256) {\\n        return ISushiChef(masterChef).pendingSushi(poolId, address(this));\\n    }\\n\\n    // **** Setters ****\\n\\n    function deposit() public override {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            IERC20(want).safeApprove(masterChef, 0);\\n            IERC20(want).safeApprove(masterChef, _want);\\n            ISushiChef(masterChef).deposit(poolId, _want);\\n        }\\n    }\\n\\n    function _withdrawSome(uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        ISushiChef(masterChef).withdraw(poolId, _amount);\\n        return _amount;\\n    }\\n\\n    // **** Setters ****\\n\\n    function setKeepSUSHI(uint256 _keepSUSHI) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        keepSUSHI = _keepSUSHI;\\n    }\\n\\n    // **** State Mutations ****\\n\\n    function harvest() public override onlyBenevolent {\\n        // Anyone can harvest it at any given time.\\n        // I understand the possibility of being frontrun\\n        // But ETH is a dark forest, and I wanna see how this plays out\\n        // i.e. will be be heavily frontrunned?\\n        //      if so, a new strategy will be deployed.\\n\\n        // Collects SUSHI tokens\\n        ISushiChef(masterChef).deposit(poolId, 0);\\n        uint256 _sushi = IERC20(sushi).balanceOf(address(this));\\n\\n        if (_sushi > 0) {\\n            _swapToNeurAndDistributePerformanceFees(sushi, sushiRouter);\\n        }\\n\\n        _sushi = IERC20(sushi).balanceOf(address(this));\\n\\n        if (_sushi > 0) {\\n            // 10% is locked up for future gov\\n            uint256 _keepSUSHI = _sushi.mul(keepSUSHI).div(keepSUSHIMax);\\n            IERC20(sushi).safeTransfer(\\n                IController(controller).treasury(),\\n                _keepSUSHI\\n            );\\n            uint256 _swap = _sushi.sub(_keepSUSHI);\\n            IERC20(sushi).safeApprove(sushiRouter, 0);\\n            IERC20(sushi).safeApprove(sushiRouter, _swap);\\n            _swapSushiswap(sushi, weth, _swap);\\n        }\\n\\n        // Swap half WETH for token1\\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\\n        if (_weth > 0) {\\n            _swapSushiswap(weth, token1, _weth.div(2));\\n        }\\n\\n        // Adds in liquidity for ETH/token1\\n        _weth = IERC20(weth).balanceOf(address(this));\\n        uint256 _token1 = IERC20(token1).balanceOf(address(this));\\n        if (_weth > 0 && _token1 > 0) {\\n            IERC20(token1).safeApprove(sushiRouter, 0);\\n            IERC20(token1).safeApprove(sushiRouter, _token1);\\n\\n            IUniswapRouterV2(sushiRouter).addLiquidity(\\n                weth,\\n                token1,\\n                _weth,\\n                _token1,\\n                0,\\n                0,\\n                address(this),\\n                block.timestamp + 60\\n            );\\n\\n            // Donates DUST\\n            IERC20(weth).transfer(\\n                IController(controller).treasury(),\\n                IERC20(weth).balanceOf(address(this))\\n            );\\n            IERC20(token1).safeTransfer(\\n                IController(controller).treasury(),\\n                IERC20(token1).balanceOf(address(this))\\n            );\\n        }\\n\\n        deposit();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategySushiEthWbtcLp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./StrategySushiFarmBase.sol\\\";\\n\\ncontract StrategySushiEthWbtcLp is StrategySushiFarmBase {\\n    // Token/ETH pool id in MasterChef contract\\n    uint256 public constant sushi_wbtc_poolId = 21;\\n    // Token addresses\\n    address public constant sushi_eth_wbtc_lp = 0xCEfF51756c56CeFFCA006cD410B03FFC46dd3a58;\\n    address public constant wbtc = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        StrategySushiFarmBase(\\n            wbtc,\\n            sushi_wbtc_poolId,\\n            sushi_eth_wbtc_lp,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external override pure returns (string memory) {\\n        return \\\"StrategySushiEthWbtcLp\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategySushiEthUsdcLp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./StrategySushiFarmBase.sol\\\";\\n\\ncontract StrategySushiEthUsdcLp is StrategySushiFarmBase {\\n    // Token/ETH pool id in MasterChef contract\\n    uint256 public constant sushi_usdc_poolId = 1;\\n    // Token addresses\\n    address public constant sushi_eth_usdc_lp =\\n        0x397FF1542f962076d0BFE58eA045FfA2d347ACa0;\\n    address public constant usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        StrategySushiFarmBase(\\n            usdc,\\n            sushi_usdc_poolId,\\n            sushi_eth_usdc_lp,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"StrategySushiEthUsdcLp\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategyFeiTribeLp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./StrategyFeiFarmBase.sol\\\";\\n\\ncontract StrategyFeiTribeLp is StrategyFeiFarmBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // Token addresses\\n    address public constant fei_rewards = 0x18305DaAe09Ea2F4D51fAa33318be5978D251aBd;\\n    address public constant uni_fei_tribe_lp =\\n        0x9928e4046d7c6513326cCeA028cD3e7a91c7590A;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        StrategyFeiFarmBase(\\n            fei_rewards,\\n            uni_fei_tribe_lp,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"StrategyFeiTribeLp\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategyFeiFarmBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./StrategyStakingRewardsBase.sol\\\";\\n\\nabstract contract StrategyFeiFarmBase is StrategyStakingRewardsBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // Token addresses\\n    address public constant fei = 0x956F47F50A910163D8BF957Cf5846D573E7f87CA;\\n    address public constant tribe = 0xc7283b66Eb1EB5FB86327f08e1B5816b0720212B;\\n\\n    // How much TRIBE tokens to keep?\\n    uint256 public keepTRIBE = 0;\\n    uint256 public constant keepTRIBEMax = 10000;\\n\\n    // Uniswap swap paths\\n    address[] public tribe_fei_path;\\n\\n    constructor(\\n        address _rewards,\\n        address _lp,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        StrategyStakingRewardsBase(\\n            _rewards,\\n            _lp,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {\\n        tribe_fei_path = new address[](2);\\n        tribe_fei_path[0] = tribe;\\n        tribe_fei_path[1] = fei;\\n\\n        IERC20(fei).approve(univ2Router2, type(uint256).max);\\n        IERC20(tribe).approve(univ2Router2, type(uint256).max);\\n    }\\n\\n    // **** Setters ****\\n\\n    function setKeepTRIBE(uint256 _keepTRIBE) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        keepTRIBE = _keepTRIBE;\\n    }\\n\\n    // **** State Mutations ****\\n\\n    function harvest() public override onlyBenevolent {\\n        // Anyone can harvest it at any given time.\\n        // I understand the possibility of being frontrun\\n        // But ETH is a dark forest, and I wanna see how this plays out\\n        // i.e. will be be heavily frontrunned?\\n        //      if so, a new strategy will be deployed.\\n\\n        // Collects TRIBE tokens\\n        IStakingRewards(rewards).getReward();\\n        uint256 _tribe = IERC20(tribe).balanceOf(address(this));\\n        uint256 _fei = IERC20(fei).balanceOf(address(this));\\n\\n        if (_tribe > 0 && performanceTreasuryFee > 0) {\\n            uint256 tribePerfomanceFeeAmount = _tribe\\n                .mul(performanceTreasuryFee)\\n                .div(performanceTreasuryMax);\\n            _swapUniswapWithPath(tribe_fei_path, tribePerfomanceFeeAmount);\\n            _fei = IERC20(fei).balanceOf(address(this));\\n            _swapAmountToNeurAndDistributePerformanceFees(\\n                fei,\\n                _fei,\\n                sushiRouter\\n            );\\n        }\\n\\n        _tribe = IERC20(tribe).balanceOf(address(this));\\n\\n        if (_tribe > 0 && performanceTreasuryFee > 0) {\\n            // 10% is locked up for future gov\\n            uint256 _keepTRIBE = _tribe.mul(keepTRIBE).div(keepTRIBEMax);\\n            IERC20(tribe).safeTransfer(\\n                IController(controller).treasury(),\\n                _keepTRIBE\\n            );\\n            _tribe = _tribe.sub(_keepTRIBE);\\n\\n            _swapUniswapWithPath(tribe_fei_path, _tribe.div(2));\\n        }\\n\\n        // Adds in liquidity for FEI/TRIBE\\n        _fei = IERC20(fei).balanceOf(address(this));\\n        _tribe = IERC20(tribe).balanceOf(address(this));\\n        if (_fei > 0 && _tribe > 0) {\\n            IUniswapRouterV2(univ2Router2).addLiquidity(\\n                fei,\\n                tribe,\\n                _fei,\\n                _tribe,\\n                0,\\n                0,\\n                address(this),\\n                block.timestamp + 60\\n            );\\n\\n            // Donates DUST\\n            IERC20(fei).safeTransfer(\\n                IController(controller).treasury(),\\n                IERC20(fei).balanceOf(address(this))\\n            );\\n            IERC20(tribe).safeTransfer(\\n                IController(controller).treasury(),\\n                IERC20(tribe).balanceOf(address(this))\\n            );\\n        }\\n\\n        // We want to get back FEI-TRIBE LP tokens\\n        deposit();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategyStakingRewardsBase.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport \\\"./StrategyBase.sol\\\";\\n\\n// Base contract for SNX Staking rewards contract interfaces\\n\\nabstract contract StrategyStakingRewardsBase is StrategyBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    address public rewards;\\n\\n    // **** Getters ****\\n    constructor(\\n        address _rewards,\\n        address _want,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    ) StrategyBase(_want, _governance, _strategist, _controller, _neuronTokenAddress, _timelock) {\\n        rewards = _rewards;\\n    }\\n\\n    function balanceOfPool() public view override returns (uint256) {\\n        return IStakingRewards(rewards).balanceOf(address(this));\\n    }\\n\\n    function getHarvestable() external view returns (uint256) {\\n        return IStakingRewards(rewards).earned(address(this));\\n    }\\n\\n    // **** Setters ****\\n\\n    function deposit() public override {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            IERC20(want).safeApprove(rewards, 0);\\n            IERC20(want).safeApprove(rewards, _want);\\n            IStakingRewards(rewards).stake(_want);\\n        }\\n    }\\n\\n    function _withdrawSome(uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        IStakingRewards(rewards).withdraw(_amount);\\n        return _amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategySushiEthSushiLp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./StrategySushiFarmBaseCustomHarvest.sol\\\";\\n\\ncontract StrategySushiEthSushiLp is StrategySushiFarmBaseCustomHarvest {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // Token/ETH pool id in MasterChef contract\\n    uint256 public constant sushi_eth_poolId = 12;\\n    // Token addresses\\n    address public constant sushi_eth_sushi_lp =\\n        0x795065dCc9f64b5614C407a6EFDC400DA6221FB0;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        StrategySushiFarmBaseCustomHarvest(\\n            sushi,\\n            sushi_eth_poolId,\\n            sushi_eth_sushi_lp,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"StrategySushiEthSushiLp\\\";\\n    }\\n\\n    // **** State Mutations ****\\n\\n    function harvest() public override onlyBenevolent {\\n        // Anyone can harvest it at any given time.\\n        // I understand the possibility of being frontrun\\n        // But ETH is a dark forest, and I wanna see how this plays out\\n        // i.e. will be be heavily frontrunned?\\n        //      if so, a new strategy will be deployed.\\n\\n        // Collects SUSHI tokens\\n        ISushiChef(masterChef).deposit(poolId, 0);\\n        uint256 _sushi = IERC20(sushi).balanceOf(address(this));\\n\\n        if (_sushi > 0) {\\n            _swapToNeurAndDistributePerformanceFees(sushi, sushiRouter);\\n        }\\n\\n        _sushi = IERC20(sushi).balanceOf(address(this));\\n\\n        if (_sushi > 0) {\\n            // 10% is locked up for future gov\\n            uint256 _keepSUSHI = _sushi.mul(keepSUSHI).div(keepSUSHIMax);\\n            IERC20(sushi).safeTransfer(\\n                IController(controller).treasury(),\\n                _keepSUSHI\\n            );\\n            uint256 _swap = _sushi.sub(_keepSUSHI);\\n            IERC20(sushi).safeApprove(sushiRouter, 0);\\n            IERC20(sushi).safeApprove(sushiRouter, _swap);\\n\\n            // swap only half of sushi cause since it's used in lp itself\\n            _swapSushiswap(sushi, weth, _swap.div(2));\\n        }\\n\\n        // Swap entire WETH for token1\\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\\n        // Adds in liquidity for ETH/sushi\\n        uint256 _token1 = IERC20(token1).balanceOf(address(this));\\n        if (_weth > 0 && _token1 > 0) {\\n            IERC20(token1).safeApprove(sushiRouter, 0);\\n            IERC20(token1).safeApprove(sushiRouter, _token1);\\n\\n            IUniswapRouterV2(sushiRouter).addLiquidity(\\n                weth,\\n                token1,\\n                _weth,\\n                _token1,\\n                0,\\n                0,\\n                address(this),\\n                block.timestamp + 60\\n            );\\n\\n            // Donates DUST\\n            IERC20(weth).transfer(\\n                IController(controller).treasury(),\\n                IERC20(weth).balanceOf(address(this))\\n            );\\n            IERC20(token1).safeTransfer(\\n                IController(controller).treasury(),\\n                IERC20(token1).balanceOf(address(this))\\n            );\\n        }\\n\\n        deposit();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategyYearnAffiliate.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../lib/YearnAffiliateWrapper.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\n\\ncontract StrategyYearnAffiliate is YearnAffiliateWrapper {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    // User accounts\\n    address public governance;\\n    address public controller;\\n    address public strategist;\\n    address public timelock;\\n\\n    address public want;\\n\\n    string public name;\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance);\\n        _;\\n    }\\n\\n    // **** Getters ****\\n    constructor(\\n        address _want,\\n        address _yearnRegistry,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    ) YearnAffiliateWrapper(_want, _yearnRegistry) {\\n        require(_want != address(0));\\n        require(_governance != address(0));\\n        require(_strategist != address(0));\\n        require(_controller != address(0));\\n        require(_timelock != address(0));\\n\\n        want = _want;\\n        governance = _governance;\\n        strategist = _strategist;\\n        controller = _controller;\\n        timelock = _timelock;\\n\\n        name = string(\\n            abi.encodePacked(\\\"y\\\", ERC20(_want).symbol(), \\\" Affiliate Strategy\\\")\\n        );\\n    }\\n\\n    function balanceOfWant() public view returns (uint256) {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    function balanceOf() public view returns (uint256) {\\n        return totalVaultBalance(address(this));\\n    }\\n\\n    function balanceOfPool() public view returns (uint256) {\\n        return balanceOf();\\n    }\\n\\n    function getName() external view returns (string memory) {\\n        return name;\\n    }\\n\\n    // **** Setters ****\\n\\n    function setGovernance(address _governance) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        governance = _governance;\\n    }\\n\\n    function setController(address _controller) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        controller = _controller;\\n    }\\n\\n    function deposit() public {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        _deposit(address(this), address(this), _want, false);\\n    }\\n\\n    // Controller only function for creating additional rewards from dust\\n    function withdraw(IERC20 _asset) external returns (uint256 balance) {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        require(want != address(_asset), \\\"want\\\");\\n        balance = _asset.balanceOf(address(this));\\n        _asset.safeTransfer(controller, balance);\\n    }\\n\\n    // Withdraw partial funds, normally used with a pool withdrawal\\n    function withdraw(uint256 _amount) external {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n\\n        _withdrawSome(_amount);\\n\\n        uint256 _balance = IERC20(want).balanceOf(address(this));\\n\\n        address _pool = IController(controller).nPools(address(want));\\n        require(_pool != address(0), \\\"!pool\\\"); // additional protection so we don't burn the funds\\n\\n        IERC20(want).safeTransfer(_pool, _balance);\\n    }\\n\\n    // Withdraw funds, used to swap between strategies\\n    function withdrawForSwap(uint256 _amount)\\n        external\\n        returns (uint256 balance)\\n    {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _withdrawSome(_amount);\\n\\n        balance = IERC20(want).balanceOf(address(this));\\n\\n        address _pool = IController(controller).nPools(address(want));\\n        require(_pool != address(0), \\\"!pool\\\");\\n        IERC20(want).safeTransfer(_pool, balance);\\n    }\\n\\n    // Withdraw all funds, normally used when migrating strategies\\n    function withdrawAll() external returns (uint256 balance) {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _withdrawSome(balanceOf());\\n\\n        balance = IERC20(want).balanceOf(address(this));\\n\\n        address _pool = IController(controller).nPools(address(want));\\n        require(_pool != address(0), \\\"!pool\\\"); // additional protection so we don't burn the funds\\n        IERC20(want).safeTransfer(_pool, balance);\\n    }\\n\\n    function _withdrawSome(uint256 _amount) internal returns (uint256) {\\n        return _withdraw(address(this), address(this), _amount, true); // `true` = withdraw from `bestVault`\\n    }\\n\\n    // **** Emergency functions ****\\n\\n    function execute(address _target, bytes memory _data)\\n        public\\n        payable\\n        returns (bytes memory response)\\n    {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        require(_target != address(0), \\\"!target\\\");\\n\\n        // call contract in current context\\n        assembly {\\n            let succeeded := delegatecall(\\n                sub(gas(), 5000),\\n                _target,\\n                add(_data, 0x20),\\n                mload(_data),\\n                0,\\n                0\\n            )\\n            let size := returndatasize()\\n\\n            response := mload(0x40)\\n            mstore(\\n                0x40,\\n                add(response, and(add(add(size, 0x20), 0x1f), not(0x1f)))\\n            )\\n            mstore(response, size)\\n            returndatacopy(add(response, 0x20), 0, size)\\n\\n            switch iszero(succeeded)\\n            case 1 {\\n                // throw if delegatecall failed\\n                revert(add(response, 0x20), size)\\n            }\\n        }\\n    }\\n\\n    function migrate() external onlyGovernance returns (uint256) {\\n        return _migrate(address(this));\\n    }\\n\\n    function migrate(uint256 amount) external onlyGovernance returns (uint256) {\\n        return _migrate(address(this), amount);\\n    }\\n\\n    function migrate(uint256 amount, uint256 maxMigrationLoss)\\n        external\\n        onlyGovernance\\n        returns (uint256)\\n    {\\n        return _migrate(address(this), amount, maxMigrationLoss);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/YearnAffiliateWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\ninterface RegistryAPI {\\n    function governance() external view returns (address);\\n\\n    function latestVault(address token) external view returns (address);\\n\\n    function numVaults(address token) external view returns (uint256);\\n\\n    function vaults(address token, uint256 deploymentId) external view returns (address);\\n}\\n\\ninterface VaultAPI is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function apiVersion() external pure returns (string memory);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 expiry,\\n        bytes calldata signature\\n    ) external returns (bool);\\n\\n    // NOTE: Vyper produces multiple signatures for a given function with \\\"default\\\" args\\n    function deposit() external returns (uint256);\\n\\n    function deposit(uint256 amount) external returns (uint256);\\n\\n    function deposit(uint256 amount, address recipient) external returns (uint256);\\n\\n    // NOTE: Vyper produces multiple signatures for a given function with \\\"default\\\" args\\n    function withdraw() external returns (uint256);\\n\\n    function withdraw(uint256 maxShares) external returns (uint256);\\n\\n    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    // function strategies(address _strategy) external view returns (StrategyParams memory);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function depositLimit() external view returns (uint256);\\n\\n    function maxAvailableShares() external view returns (uint256);\\n\\n    /**\\n     * View how much the Vault would increase this Strategy's borrow limit,\\n     * based on its present performance (since its last report). Can be used to\\n     * determine expectedReturn in your Strategy.\\n     */\\n    function creditAvailable() external view returns (uint256);\\n\\n    /**\\n     * View how much the Vault would like to pull back from the Strategy,\\n     * based on its present performance (since its last report). Can be used to\\n     * determine expectedReturn in your Strategy.\\n     */\\n    function debtOutstanding() external view returns (uint256);\\n\\n    /**\\n     * View how much the Vault expect this Strategy to return at the current\\n     * block, based on its present performance (since its last report). Can be\\n     * used to determine expectedReturn in your Strategy.\\n     */\\n    function expectedReturn() external view returns (uint256);\\n\\n    /**\\n     * This is the main contact point where the Strategy interacts with the\\n     * Vault. It is critical that this call is handled as intended by the\\n     * Strategy. Therefore, this function will be called by BaseStrategy to\\n     * make sure the integration is correct.\\n     */\\n    function report(\\n        uint256 _gain,\\n        uint256 _loss,\\n        uint256 _debtPayment\\n    ) external returns (uint256);\\n\\n    /**\\n     * This function should only be used in the scenario where the Strategy is\\n     * being retired but no migration of the positions are possible, or in the\\n     * extreme scenario that the Strategy needs to be put into \\\"Emergency Exit\\\"\\n     * mode in order for it to exit as quickly as possible. The latter scenario\\n     * could be for any reason that is considered \\\"critical\\\" that the Strategy\\n     * exits its position as fast as possible, such as a sudden change in\\n     * market conditions leading to losses, or an imminent failure in an\\n     * external dependency.\\n     */\\n    function revokeStrategy() external;\\n\\n    /**\\n     * View the governance address of the Vault to assert privileged functions\\n     * can only be called by governance. The Strategy serves the Vault, so it\\n     * is subject to governance defined by the Vault.\\n     */\\n    function governance() external view returns (address);\\n\\n    /**\\n     * View the management address of the Vault to assert privileged functions\\n     * can only be called by management. The Strategy serves the Vault, so it\\n     * is subject to management defined by the Vault.\\n     */\\n    function management() external view returns (address);\\n\\n    /**\\n     * View the guardian address of the Vault to assert privileged functions\\n     * can only be called by guardian. The Strategy serves the Vault, so it\\n     * is subject to guardian defined by the Vault.\\n     */\\n    function guardian() external view returns (address);\\n}\\n\\nabstract contract YearnAffiliateWrapper {\\n    using Math for uint256;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public token;\\n\\n    // Reduce number of external calls (SLOADs stay the same)\\n    VaultAPI[] private _cachedVaults;\\n\\n    RegistryAPI public registry;\\n\\n    // ERC20 Unlimited Approvals (short-circuits VaultAPI.transferFrom)\\n    uint256 constant UNLIMITED_APPROVAL = type(uint256).max;\\n    // Sentinal values used to save gas on deposit/withdraw/migrate\\n    // NOTE: DEPOSIT_EVERYTHING == WITHDRAW_EVERYTHING == MIGRATE_EVERYTHING\\n    uint256 constant DEPOSIT_EVERYTHING = type(uint256).max;\\n    uint256 constant WITHDRAW_EVERYTHING = type(uint256).max;\\n    uint256 constant MIGRATE_EVERYTHING = type(uint256).max;\\n    // VaultsAPI.depositLimit is unlimited\\n    uint256 constant UNCAPPED_DEPOSITS = type(uint256).max;\\n\\n    constructor(address _token, address _registry) {\\n        // Recommended to use a token with a `Registry.latestVault(_token) != address(0)`\\n        token = IERC20(_token);\\n        // Recommended to use `v2.registry.ychad.eth`\\n        registry = RegistryAPI(_registry);\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to update the yearn registry.\\n     * @param _registry The new _registry address.\\n     */\\n    function setRegistry(address _registry) external {\\n        require(msg.sender == registry.governance());\\n        // In case you want to override the registry instead of re-deploying\\n        registry = RegistryAPI(_registry);\\n        // Make sure there's no change in governance\\n        // NOTE: Also avoid bricking the wrapper from setting a bad registry\\n        require(msg.sender == registry.governance());\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to get the most revent vault for the token using the registry.\\n     * @return An instance of a VaultAPI\\n     */\\n    function bestVault() public virtual view returns (VaultAPI) {\\n        return VaultAPI(registry.latestVault(address(token)));\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to get all vaults from the registery for the token\\n     * @return An array containing instances of VaultAPI\\n     */\\n    function allVaults() public virtual view returns (VaultAPI[] memory) {\\n        uint256 cache_length = _cachedVaults.length;\\n        uint256 num_vaults = registry.numVaults(address(token));\\n\\n        // Use cached\\n        if (cache_length == num_vaults) {\\n            return _cachedVaults;\\n        }\\n\\n        VaultAPI[] memory vaults = new VaultAPI[](num_vaults);\\n\\n        for (uint256 vault_id = 0; vault_id < cache_length; vault_id++) {\\n            vaults[vault_id] = _cachedVaults[vault_id];\\n        }\\n\\n        for (uint256 vault_id = cache_length; vault_id < num_vaults; vault_id++) {\\n            vaults[vault_id] = VaultAPI(registry.vaults(address(token), vault_id));\\n        }\\n\\n        return vaults;\\n    }\\n\\n    function _updateVaultCache(VaultAPI[] memory vaults) internal {\\n        // NOTE: even though `registry` is update-able by Yearn, the intended behavior\\n        //       is that any future upgrades to the registry will replay the version\\n        //       history so that this cached value does not get out of date.\\n        if (vaults.length > _cachedVaults.length) {\\n            _cachedVaults = vaults;\\n        }\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to get the balance of an account accross all the vaults for a token.\\n     *  @dev will be used to get the wrapper balance using totalVaultBalance(address(this)).\\n     *  @param account The address of the account.\\n     *  @return balance of token for the account accross all the vaults.\\n     */\\n    function totalVaultBalance(address account) public view returns (uint256 balance) {\\n        VaultAPI[] memory vaults = allVaults();\\n\\n        for (uint256 id = 0; id < vaults.length; id++) {\\n            balance = balance.add(vaults[id].balanceOf(account).mul(vaults[id].pricePerShare()).div(10**uint256(vaults[id].decimals())));\\n        }\\n    }\\n\\n    /**\\n     * @notice\\n     *  Used to get the TVL on the underlying vaults.\\n     *  @return assets the sum of all the assets managed by the underlying vaults.\\n     */\\n    function totalAssets() public view returns (uint256 assets) {\\n        VaultAPI[] memory vaults = allVaults();\\n\\n        for (uint256 id = 0; id < vaults.length; id++) {\\n            assets = assets.add(vaults[id].totalAssets());\\n        }\\n    }\\n\\n    function _deposit(\\n        address depositor,\\n        address receiver,\\n        uint256 amount, // if `MAX_UINT256`, just deposit everything\\n        bool pullFunds // If true, funds need to be pulled from `depositor` via `transferFrom`\\n    ) internal returns (uint256 deposited) {\\n        VaultAPI _bestVault = bestVault();\\n\\n        if (pullFunds) {\\n            if (amount != DEPOSIT_EVERYTHING) {\\n                token.safeTransferFrom(depositor, address(this), amount);\\n            } else {\\n                token.safeTransferFrom(depositor, address(this), token.balanceOf(depositor));\\n            }\\n        }\\n\\n        if (token.allowance(address(this), address(_bestVault)) < amount) {\\n            token.safeApprove(address(_bestVault), 0); // Avoid issues with some tokens requiring 0\\n            token.safeApprove(address(_bestVault), UNLIMITED_APPROVAL); // Vaults are trusted\\n        }\\n\\n        // Depositing returns number of shares deposited\\n        // NOTE: Shortcut here is assuming the number of tokens deposited is equal to the\\n        //       number of shares credited, which helps avoid an occasional multiplication\\n        //       overflow if trying to adjust the number of shares by the share price.\\n        uint256 beforeBal = token.balanceOf(address(this));\\n        if (receiver != address(this)) {\\n            _bestVault.deposit(amount, receiver);\\n        } else if (amount != DEPOSIT_EVERYTHING) {\\n            _bestVault.deposit(amount);\\n        } else {\\n            _bestVault.deposit();\\n        }\\n\\n        uint256 afterBal = token.balanceOf(address(this));\\n        deposited = beforeBal.sub(afterBal);\\n        // `receiver` now has shares of `_bestVault` as balance, converted to `token` here\\n        // Issue a refund if not everything was deposited\\n        if (depositor != address(this) && afterBal > 0) token.safeTransfer(depositor, afterBal);\\n    }\\n\\n    function _withdraw(\\n        address sender,\\n        address receiver,\\n        uint256 amount, // if `MAX_UINT256`, just withdraw everything\\n        bool withdrawFromBest // If true, also withdraw from `_bestVault`\\n    ) internal returns (uint256 withdrawn) {\\n        VaultAPI _bestVault = bestVault();\\n\\n        VaultAPI[] memory vaults = allVaults();\\n        _updateVaultCache(vaults);\\n\\n        // NOTE: This loop will attempt to withdraw from each Vault in `allVaults` that `sender`\\n        //       is deposited in, up to `amount` tokens. The withdraw action can be expensive,\\n        //       so it if there is a denial of service issue in withdrawing, the downstream usage\\n        //       of this wrapper contract must give an alternative method of withdrawing using\\n        //       this function so that `amount` is less than the full amount requested to withdraw\\n        //       (e.g. \\\"piece-wise withdrawals\\\"), leading to less loop iterations such that the\\n        //       DoS issue is mitigated (at a tradeoff of requiring more txns from the end user).\\n        for (uint256 id = 0; id < vaults.length; id++) {\\n            if (!withdrawFromBest && vaults[id] == _bestVault) {\\n                continue; // Don't withdraw from the best\\n            }\\n\\n            // Start with the total shares that `sender` has\\n            uint256 availableShares = vaults[id].balanceOf(sender);\\n\\n            // Restrict by the allowance that `sender` has to this contract\\n            // NOTE: No need for allowance check if `sender` is this contract\\n            if (sender != address(this)) {\\n                availableShares = Math.min(availableShares, vaults[id].allowance(sender, address(this)));\\n            }\\n\\n            // Limit by maximum withdrawal size from each vault\\n            availableShares = Math.min(availableShares, vaults[id].maxAvailableShares());\\n\\n            if (availableShares > 0) {\\n                // Intermediate step to move shares to this contract before withdrawing\\n                // NOTE: No need for share transfer if this contract is `sender`\\n                if (sender != address(this)) vaults[id].transferFrom(sender, address(this), availableShares);\\n\\n                if (amount != WITHDRAW_EVERYTHING) {\\n                    // Compute amount to withdraw fully to satisfy the request\\n                    uint256 estimatedShares = amount\\n                        .sub(withdrawn) // NOTE: Changes every iteration\\n                        .mul(10**uint256(vaults[id].decimals()))\\n                        .div(vaults[id].pricePerShare()); // NOTE: Every Vault is different\\n\\n                    // Limit amount to withdraw to the maximum made available to this contract\\n                    // NOTE: Avoid corner case where `estimatedShares` isn't precise enough\\n                    // NOTE: If `0 < estimatedShares < 1` but `availableShares > 1`, this will withdraw more than necessary\\n                    if (estimatedShares > 0 && estimatedShares < availableShares) {\\n                        withdrawn = withdrawn.add(vaults[id].withdraw(estimatedShares));\\n                    } else {\\n                        withdrawn = withdrawn.add(vaults[id].withdraw(availableShares));\\n                    }\\n                } else {\\n                    withdrawn = withdrawn.add(vaults[id].withdraw());\\n                }\\n\\n                // Check if we have fully satisfied the request\\n                // NOTE: use `amount = WITHDRAW_EVERYTHING` for withdrawing everything\\n                if (amount <= withdrawn) break; // withdrawn as much as we needed\\n            }\\n        }\\n\\n        // If we have extra, deposit back into `_bestVault` for `sender`\\n        // NOTE: Invariant is `withdrawn <= amount`\\n        if (withdrawn > amount) {\\n            // Don't forget to approve the deposit\\n            if (token.allowance(address(this), address(_bestVault)) < withdrawn.sub(amount)) {\\n                token.safeApprove(address(_bestVault), UNLIMITED_APPROVAL); // Vaults are trusted\\n            }\\n\\n            _bestVault.deposit(withdrawn.sub(amount), sender);\\n            withdrawn = amount;\\n        }\\n\\n        // `receiver` now has `withdrawn` tokens as balance\\n        if (receiver != address(this)) token.safeTransfer(receiver, withdrawn);\\n    }\\n\\n    function _migrate(address account) internal returns (uint256) {\\n        return _migrate(account, MIGRATE_EVERYTHING);\\n    }\\n\\n    function _migrate(address account, uint256 amount) internal returns (uint256) {\\n        // NOTE: In practice, it was discovered that <50 was the maximum we've see for this variance\\n        return _migrate(account, amount, 0);\\n    }\\n\\n    function _migrate(\\n        address account,\\n        uint256 amount,\\n        uint256 maxMigrationLoss\\n    ) internal returns (uint256 migrated) {\\n        VaultAPI _bestVault = bestVault();\\n\\n        // NOTE: Only override if we aren't migrating everything\\n        uint256 _depositLimit = _bestVault.depositLimit();\\n        uint256 _totalAssets = _bestVault.totalAssets();\\n        if (_depositLimit <= _totalAssets) return 0; // Nothing to migrate (not a failure)\\n\\n        uint256 _amount = amount;\\n        if (_depositLimit < UNCAPPED_DEPOSITS && _amount < WITHDRAW_EVERYTHING) {\\n            // Can only deposit up to this amount\\n            uint256 _depositLeft = _depositLimit.sub(_totalAssets);\\n            if (_amount > _depositLeft) _amount = _depositLeft;\\n        }\\n\\n        if (_amount > 0) {\\n            // NOTE: `false` = don't withdraw from `_bestVault`\\n            uint256 withdrawn = _withdraw(account, address(this), _amount, false);\\n            if (withdrawn == 0) return 0; // Nothing to migrate (not a failure)\\n\\n            // NOTE: `false` = don't do `transferFrom` because it's already local\\n            migrated = _deposit(address(this), account, withdrawn, false);\\n            // NOTE: Due to the precision loss of certain calculations, there is a small inefficency\\n            //       on how migrations are calculated, and this could lead to a DoS issue. Hence, this\\n            //       value is made to be configurable to allow the user to specify how much is acceptable\\n            require(withdrawn.sub(migrated) <= maxMigrationLoss);\\n        } // else: nothing to migrate! (not a failure)\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategyYearnUsdcV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./StrategyYearnAffiliate.sol\\\";\\n\\ncontract StrategyYearnUsdcV2 is StrategyYearnAffiliate {\\n    // Token addresses\\n    address public constant usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address public constant yearn_registry = 0x50c1a2eA0a861A967D9d0FFE2AE4012c2E053804;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n        StrategyYearnAffiliate(\\n            usdc,\\n            yearn_registry,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _timelock\\n        )\\n    {}\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategyYearnCrvSteth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./StrategyYearnAffiliate.sol\\\";\\n\\ncontract StrategyYearnCrvSteth is StrategyYearnAffiliate {\\n    // Token addresses\\n    address public constant crv_steth_lp = 0x06325440D014e39736583c165C2963BA99fAf14E;\\n    address public constant yearn_registry = 0x50c1a2eA0a861A967D9d0FFE2AE4012c2E053804;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n        StrategyYearnAffiliate(\\n            crv_steth_lp,\\n            yearn_registry,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _timelock\\n        )\\n    {}\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategyYearnCrvLusd.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./StrategyYearnAffiliate.sol\\\";\\n\\ncontract StrategyYearnCrvLusd is StrategyYearnAffiliate {\\n    // Token addresses\\n    address public constant crv_lusd_lp = 0xEd279fDD11cA84bEef15AF5D39BB4d4bEE23F0cA;\\n    address public constant yearn_registry = 0x50c1a2eA0a861A967D9d0FFE2AE4012c2E053804;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n        StrategyYearnAffiliate(\\n            crv_lusd_lp,\\n            yearn_registry,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _timelock\\n        )\\n    {}\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategyYearnCrvFrax.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./StrategyYearnAffiliate.sol\\\";\\n\\ncontract StrategyYearnCrvFrax is StrategyYearnAffiliate {\\n    // Token addresses\\n    address public constant crv_frax_lp = 0xd632f22692FaC7611d2AA1C0D552930D43CAEd3B;\\n    address public constant yearn_registry = 0x50c1a2eA0a861A967D9d0FFE2AE4012c2E053804;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n        StrategyYearnAffiliate(\\n            crv_frax_lp,\\n            yearn_registry,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _timelock\\n        )\\n    {}\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategyCurveRenCrv.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../interfaces/INeuronPool.sol\\\";\\nimport \\\"../interfaces/ICurve.sol\\\";\\nimport \\\"../interfaces/IUniswapRouterV2.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\n\\nimport \\\"./StrategyCurveBase.sol\\\";\\n\\ncontract StrategyCurveRenCrv is StrategyCurveBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // https://www.curve.fi/ren\\n    // Curve stuff\\n    address public constant ren_pool = 0x93054188d876f558f4a66B2EF1d97d16eDf0895B;\\n    address public constant ren_gauge = 0xB1F2cdeC61db658F091671F5f199635aEF202CAC;\\n    address public constant ren_crv = 0x49849C98ae39Fff122806C06791Fa73784FB3675;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        StrategyCurveBase(\\n            ren_pool,\\n            ren_gauge,\\n            ren_crv,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {\\n        IERC20(crv).approve(univ2Router2, type(uint256).max);\\n    }\\n\\n    // **** Views ****\\n\\n    function getMostPremium() public view override returns (address, uint256) {\\n        // Both 8 decimals\\n        uint256[] memory balances = new uint256[](3);\\n        balances[0] = ICurveFi_2(curve).balances(0); // RENBTC\\n        balances[1] = ICurveFi_2(curve).balances(1); // WBTC\\n\\n        // renBTC\\n        if (balances[0] < balances[1]) {\\n            return (renbtc, 0);\\n        }\\n\\n        // WBTC\\n        if (balances[1] < balances[0]) {\\n            return (wbtc, 1);\\n        }\\n\\n        // If they're somehow equal, we just want RENBTC\\n        return (renbtc, 0);\\n    }\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"StrategyCurveRenCrv\\\";\\n    }\\n\\n    // **** State Mutations ****\\n\\n    function harvest() public override onlyBenevolent {\\n        // Anyone can harvest it at any given time.\\n        // I understand the possibility of being frontrun\\n        // But ETH is a dark forest, and I wanna see how this plays out\\n        // i.e. will be be heavily frontrunned?\\n        //      if so, a new strategy will be deployed.\\n\\n        // stablecoin we want to convert to\\n        (address to, uint256 toIndex) = getMostPremium();\\n\\n        // Collects crv tokens\\n        // Don't bother voting in v1\\n        ICurveMintr(mintr).mint(gauge);\\n\\n        uint256 _crv = IERC20(crv).balanceOf(address(this));\\n\\n        if (_crv > 0) {\\n            _swapToNeurAndDistributePerformanceFees(crv, sushiRouter);\\n        }\\n\\n        _crv = IERC20(crv).balanceOf(address(this));\\n\\n        if (_crv > 0) {\\n            // x% is sent back to the rewards holder\\n            // to be used to lock up in as veCRV in a future date\\n            uint256 _keepCRV = _crv.mul(keepCRV).div(keepCRVMax);\\n            if (_keepCRV > 0) {\\n                IERC20(crv).safeTransfer(\\n                    IController(controller).treasury(),\\n                    _keepCRV\\n                );\\n            }\\n            _crv = _crv.sub(_keepCRV);\\n            _swapUniswap(crv, to, _crv);\\n        }\\n\\n        // Adds liquidity to curve.fi's pool\\n        // to get back want (scrv)\\n        uint256 _to = IERC20(to).balanceOf(address(this));\\n        if (_to > 0) {\\n            IERC20(to).safeApprove(curve, 0);\\n            IERC20(to).safeApprove(curve, _to);\\n            uint256[2] memory liquidity;\\n            liquidity[toIndex] = _to;\\n            ICurveFi_2(curve).add_liquidity(liquidity, 0);\\n        }\\n\\n        deposit();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategyCurveBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./StrategyBase.sol\\\";\\nimport \\\"../interfaces/ICurve.sol\\\";\\n\\n// Base contract for Curve based staking contract interfaces\\n\\nabstract contract StrategyCurveBase is StrategyBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // Curve DAO\\n    // Pool's gauge => all the interactions are held through this address, ICurveGauge interface\\n    address public gauge;\\n    // Curve's contract address => depositing here\\n    address public curve;\\n    address public constant mintr = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\\n\\n    // stablecoins\\n    address public constant dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address public constant usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address public constant usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address public constant susd = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\\n\\n    // bitcoins\\n    address public constant wbtc = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n    address public constant renbtc = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D;\\n\\n    // rewards\\n    address public constant crv = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n\\n    // How much CRV tokens to keep\\n    uint256 public keepCRV = 500;\\n    uint256 public keepCRVMax = 10000;\\n\\n    constructor(\\n        // Curve's contract address => depositing here\\n        address _curve,\\n        address _gauge,\\n        // Token accepted by the contract\\n        address _want,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        StrategyBase(\\n            _want,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {\\n        curve = _curve;\\n        gauge = _gauge;\\n    }\\n\\n    // **** Getters ****\\n\\n    function balanceOfPool() public view override returns (uint256) {\\n        return ICurveGauge(gauge).balanceOf(address(this));\\n    }\\n\\n    function getHarvestable() external returns (uint256) {\\n        return ICurveGauge(gauge).claimable_tokens(address(this));\\n    }\\n\\n    function getMostPremium() public view virtual returns (address, uint256);\\n\\n    // **** Setters ****\\n\\n    function setKeepCRV(uint256 _keepCRV) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        keepCRV = _keepCRV;\\n    }\\n\\n    // **** State Mutation functions ****\\n\\n    function deposit() public override {\\n        // Checking our contract's wanted/accepted token balance\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            IERC20(want).safeApprove(gauge, 0);\\n            IERC20(want).safeApprove(gauge, _want);\\n            ICurveGauge(gauge).deposit(_want);\\n        }\\n    }\\n\\n    function _withdrawSome(uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        ICurveGauge(gauge).withdraw(_amount);\\n        return _amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategyCurve3Crv.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../interfaces/INeuronPool.sol\\\";\\nimport \\\"../interfaces/ICurve.sol\\\";\\nimport \\\"../interfaces/IUniswapRouterV2.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\n\\nimport \\\"./StrategyCurveBase.sol\\\";\\n\\ncontract StrategyCurve3Crv is StrategyCurveBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // Curve stuff\\n    // Pool to deposit to. In this case it's 3CRV, accepting DAI + USDC + USDT\\n    address public constant three_pool = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\\n    // Pool's Gauge - interactions are mediated through ICurveGauge interface @ this address\\n    address public constant three_gauge = 0xbFcF63294aD7105dEa65aA58F8AE5BE2D9d0952A;\\n\\n    // Curve 3Crv token contract address.\\n    // https://etherscan.io/address/0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490\\n    // Etherscan states this contract manages 3Crv and USDC\\n    // The starting deposit is made with this token ^^^\\n    address public constant three_crv = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        StrategyCurveBase(\\n            three_pool,\\n            three_gauge,\\n            three_crv,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {\\n        IERC20(crv).approve(univ2Router2, type(uint256).max);\\n    }\\n\\n    // **** Views ****\\n\\n    function getMostPremium() public view override returns (address, uint256) {\\n        uint256[] memory balances = new uint256[](3);\\n        balances[0] = ICurveFi_3(curve).balances(0); // DAI\\n        balances[1] = ICurveFi_3(curve).balances(1).mul(10**12); // USDC\\n        balances[2] = ICurveFi_3(curve).balances(2).mul(10**12); // USDT\\n\\n        // DAI\\n        if (balances[0] < balances[1] && balances[0] < balances[2]) {\\n            return (dai, 0);\\n        }\\n\\n        // USDC\\n        if (balances[1] < balances[0] && balances[1] < balances[2]) {\\n            return (usdc, 1);\\n        }\\n\\n        // USDT\\n        if (balances[2] < balances[0] && balances[2] < balances[1]) {\\n            return (usdt, 2);\\n        }\\n\\n        // If they're somehow equal, we just want DAI\\n        return (dai, 0);\\n    }\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"StrategyCurve3Crv\\\";\\n    }\\n\\n    // **** State Mutations ****\\n    // Function to harvest pool rewards, convert to stablecoins and reinvest to pool\\n    function harvest() public override onlyBenevolent {\\n        // Anyone can harvest it at any given time.\\n        // I understand the possibility of being frontrun\\n        // But ETH is a dark forest, and I wanna see how this plays out\\n        // i.e. will be be heavily frontrunned?\\n        //      if so, a new strategy will be deployed.\\n\\n        // stablecoin we want to convert to\\n        (address to, uint256 toIndex) = getMostPremium();\\n\\n        // Collects Crv tokens\\n        // Don't bother voting in v1\\n        // Creates CRV and transfers to strategy's address (?)\\n        ICurveMintr(mintr).mint(gauge);\\n        uint256 _crv = IERC20(crv).balanceOf(address(this));\\n\\n        if (_crv > 0) {\\n            _swapToNeurAndDistributePerformanceFees(crv, sushiRouter);\\n        }\\n\\n        _crv = IERC20(crv).balanceOf(address(this));\\n\\n        if (_crv > 0) {\\n            // x% is sent back to the rewards holder\\n            // to be used to lock up in as veCRV in a future date\\n            // Some tokens are accumulated in \\\"treasury\\\" and controller. The % is always subject to discussion.\\n            uint256 _keepCRV = _crv.mul(keepCRV).div(keepCRVMax);\\n            if (_keepCRV > 0) {\\n                IERC20(crv).safeTransfer(\\n                    IController(controller).treasury(),\\n                    _keepCRV\\n                );\\n            }\\n            _crv = _crv.sub(_keepCRV);\\n            // Converts CRV to stablecoins\\n            _swapUniswap(crv, to, _crv);\\n        }\\n\\n        // Adds liquidity to curve.fi's pool\\n        // to get back want (scrv)\\n        uint256 _to = IERC20(to).balanceOf(address(this));\\n        if (_to > 0) {\\n            IERC20(to).safeApprove(curve, 0);\\n            IERC20(to).safeApprove(curve, _to);\\n            uint256[3] memory liquidity;\\n            liquidity[toIndex] = _to;\\n            // Transferring stablecoins back to Curve\\n            ICurveFi_3(curve).add_liquidity(liquidity, 0);\\n        }\\n\\n        deposit();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/PolygonStrategyCurveRenBtc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../interfaces/INeuronPool.sol\\\";\\nimport \\\"../interfaces/ICurve.sol\\\";\\nimport \\\"../interfaces/IUniswapRouterV2.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\n\\nimport \\\"./PolygonStrategyCurveBase.sol\\\";\\n\\ncontract PolygonStrategyCurveRenBtc is PolygonStrategyCurveBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // Curve stuff\\n    // Pool to deposit to. In this case it's renBTC, accepting wBTC + renBTC\\n    // https://polygon.curve.fi/ren\\n    address public constant curve_renBTC_pool =\\n        0xC2d95EEF97Ec6C17551d45e77B590dc1F9117C67;\\n    // Pool's Gauge - interactions are mediated through ICurveGauge interface @ this address\\n    address public constant curve_renBTC_gauge =\\n        0xffbACcE0CC7C19d46132f1258FC16CF6871D153c;\\n    // Curve.fi amWBTC/renBTC (btcCRV) token contract address.\\n    // The starting deposit is made with this token ^^^\\n    address public constant curve_renBTC_lp = 0xf8a57c1d3b9629b77b6726a042ca48990A84Fb49;\\n    address public constant wbtc = 0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6;\\n    address public constant renBTC = 0xDBf31dF14B66535aF65AaC99C32e9eA844e14501;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        PolygonStrategyCurveBase(\\n            curve_renBTC_pool,\\n            curve_renBTC_gauge,\\n            curve_renBTC_lp,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {\\n        IERC20(crv).approve(quickswapRouter, type(uint256).max);\\n    }\\n\\n    // **** Views ****\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"PolygonStrategyCurveRenBtc\\\";\\n    }\\n\\n    function getMostPremium() pure public override returns (address, uint256) {\\n        // Always return wbtc because there is no liquidity for renBTC tokens\\n        return (wbtc, 0);\\n    }\\n\\n    // **** State Mutations ****\\n    // Function to harvest pool rewards, convert to stablecoins and reinvest to pool\\n    function harvest() public override onlyBenevolent {\\n        // Anyone can harvest it at any given time.\\n        // I understand the possibility of being frontrun\\n        // But ETH is a dark forest, and I wanna see how this plays out\\n        // i.e. will be be heavily frontrunned?\\n        //      if so, a new strategy will be deployed.\\n\\n        // stablecoin we want to convert to\\n        (address to, uint256 toIndex) = getMostPremium();\\n\\n        ICurveGauge(gauge).claim_rewards(address(this));\\n\\n        uint256 _crv = IERC20(crv).balanceOf(address(this));\\n\\n        if (_crv > 0) {\\n            _swapToNeurAndDistributePerformanceFees(crv, quickswapRouter);\\n        }\\n\\n        uint256 _wmatic = IERC20(wmatic).balanceOf(address(this));\\n\\n        if (_wmatic > 0) {\\n            _swapToNeurAndDistributePerformanceFees(wmatic, quickswapRouter);\\n        }\\n\\n        _crv = IERC20(crv).balanceOf(address(this));\\n\\n        if (_crv > 0) {\\n            IERC20(crv).safeApprove(quickswapRouter, 0);\\n            IERC20(crv).safeApprove(quickswapRouter, _crv);\\n            _swapQuickswap(crv, to, _crv);\\n        }\\n\\n        _wmatic = IERC20(wmatic).balanceOf(address(this));\\n        if (_wmatic > 0) {\\n            IERC20(wmatic).safeApprove(quickswapRouter, 0);\\n            IERC20(wmatic).safeApprove(quickswapRouter, _wmatic);\\n            _swapQuickswap(wmatic, to, _wmatic);\\n        }\\n\\n        // Adds liquidity to curve.fi's pool\\n        // to get back want (scrv)\\n        uint256 _to = IERC20(to).balanceOf(address(this));\\n        if (_to > 0) {\\n            IERC20(to).safeApprove(curve, 0);\\n            IERC20(to).safeApprove(curve, _to);\\n            uint256[3] memory liquidity;\\n            liquidity[toIndex] = _to;\\n            // Transferring stablecoins back to Curve\\n            ICurveFi_Polygon_3(curve).add_liquidity(liquidity, 0, true);\\n        }\\n\\n        deposit();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/PolygonStrategyCurveBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./PolygonStrategyBase.sol\\\";\\nimport \\\"../interfaces/ICurve.sol\\\";\\n\\n// Base contract for Curve based staking contract interfaces\\n\\nabstract contract PolygonStrategyCurveBase is PolygonStrategyBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // Curve DAO\\n    // Pool's gauge => all the interactions are held through this address, ICurveGauge interface\\n    address public immutable gauge;\\n    // Curve's contract address => depositing here\\n    address public immutable curve;\\n\\n    // stablecoins\\n    address public constant dai = 0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063;\\n    address public constant usdc = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n    address public constant usdt = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\\n\\n    // rewards\\n    address public constant crv = 0x172370d5Cd63279eFa6d502DAB29171933a610AF;\\n\\n    // How much CRV tokens to keep\\n    uint256 public keepCRV = 500;\\n    uint256 public keepCRVMax = 10000;\\n\\n    constructor(\\n        address _curve,\\n        address _gauge,\\n        address _want,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        PolygonStrategyBase(\\n            _want,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {\\n        curve = _curve;\\n        gauge = _gauge;\\n    }\\n\\n    // **** Getters ****\\n\\n    function balanceOfPool() public view override returns (uint256) {\\n        return ICurveGauge(gauge).balanceOf(address(this));\\n    }\\n\\n    function getHarvestable() external returns (uint256) {\\n        return ICurveGauge(gauge).claimable_tokens(address(this));\\n    }\\n\\n    function getMostPremium() public view virtual returns (address, uint256);\\n\\n    // **** Setters ****\\n\\n    function setKeepCRV(uint256 _keepCRV) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        keepCRV = _keepCRV;\\n    }\\n\\n    // **** State Mutation functions ****\\n\\n    function deposit() public override {\\n        // Checking our contract's wanted/accepted token balance\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            IERC20(want).safeApprove(gauge, 0);\\n            IERC20(want).safeApprove(gauge, _want);\\n            ICurveGauge(gauge).deposit(_want);\\n        }\\n    }\\n\\n    function _withdrawSome(uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        ICurveGauge(gauge).withdraw(_amount);\\n        return _amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/PolygonStrategyBase.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../interfaces/INeuronPool.sol\\\";\\nimport \\\"../interfaces/IStakingRewards.sol\\\";\\nimport \\\"../interfaces/IUniswapRouterV2.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\n\\n// Strategy Contract Basics\\n\\nabstract contract PolygonStrategyBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // Perfomance fees - start with 30%\\n    uint256 public performanceTreasuryFee = 3000;\\n    uint256 public constant performanceTreasuryMax = 10000;\\n\\n    // Withdrawal fee 0%\\n    // - 0% to treasury\\n    // - 0% to dev fund\\n    uint256 public withdrawalTreasuryFee = 0;\\n    uint256 public constant withdrawalTreasuryMax = 100000;\\n\\n    uint256 public withdrawalDevFundFee = 0;\\n    uint256 public constant withdrawalDevFundMax = 100000;\\n\\n    // Tokens\\n    // Input token accepted by the contract\\n    address public immutable neuronTokenAddress;\\n    address public immutable want;\\n    address public constant weth = 0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619;\\n    address public constant wmatic = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\\n\\n    // User accounts\\n    address public governance;\\n    address public controller;\\n    address public strategist;\\n    address public timelock;\\n\\n    // Dex - quickswap\\n    address public quickswapRouter = 0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff;\\n    address public sushiRouter = 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506;\\n\\n    mapping(address => bool) public harvesters;\\n\\n    constructor(\\n        // Input token accepted by the contract\\n        address _want,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    ) {\\n        require(_want != address(0));\\n        require(_governance != address(0));\\n        require(_strategist != address(0));\\n        require(_controller != address(0));\\n        require(_neuronTokenAddress != address(0));\\n        require(_timelock != address(0));\\n\\n        want = _want;\\n        governance = _governance;\\n        strategist = _strategist;\\n        controller = _controller;\\n        neuronTokenAddress = _neuronTokenAddress;\\n        timelock = _timelock;\\n    }\\n\\n    // **** Modifiers **** //\\n\\n    modifier onlyBenevolent() {\\n        require(\\n            harvesters[msg.sender] ||\\n                msg.sender == governance ||\\n                msg.sender == strategist\\n        );\\n        _;\\n    }\\n\\n    // **** Views **** //\\n\\n    function balanceOfWant() public view returns (uint256) {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    function balanceOfPool() public view virtual returns (uint256);\\n\\n    function balanceOf() public view returns (uint256) {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    function getName() external pure virtual returns (string memory);\\n\\n    // **** Setters **** //\\n\\n    function whitelistHarvester(address _harvester) external {\\n        require(\\n            msg.sender == governance || msg.sender == strategist,\\n            \\\"not authorized\\\"\\n        );\\n        harvesters[_harvester] = true;\\n    }\\n\\n    function revokeHarvester(address _harvester) external {\\n        require(\\n            msg.sender == governance || msg.sender == strategist,\\n            \\\"not authorized\\\"\\n        );\\n        harvesters[_harvester] = false;\\n    }\\n\\n    function setWithdrawalDevFundFee(uint256 _withdrawalDevFundFee) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        withdrawalDevFundFee = _withdrawalDevFundFee;\\n    }\\n\\n    function setWithdrawalTreasuryFee(uint256 _withdrawalTreasuryFee) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        withdrawalTreasuryFee = _withdrawalTreasuryFee;\\n    }\\n\\n    function setPerformanceTreasuryFee(uint256 _performanceTreasuryFee)\\n        external\\n    {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        performanceTreasuryFee = _performanceTreasuryFee;\\n    }\\n\\n    function setStrategist(address _strategist) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        strategist = _strategist;\\n    }\\n\\n    function setGovernance(address _governance) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        governance = _governance;\\n    }\\n\\n    function setTimelock(address _timelock) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        timelock = _timelock;\\n    }\\n\\n    function setController(address _controller) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        controller = _controller;\\n    }\\n\\n    // **** State mutations **** //\\n    function deposit() public virtual;\\n\\n    // Controller only function for creating additional rewards from dust\\n    function withdraw(IERC20 _asset) external returns (uint256 balance) {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        require(want != address(_asset), \\\"want\\\");\\n        balance = _asset.balanceOf(address(this));\\n        _asset.safeTransfer(controller, balance);\\n    }\\n\\n    // Withdraw partial funds, normally used with a pool withdrawal\\n    function withdraw(uint256 _amount) external {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        uint256 _balance = IERC20(want).balanceOf(address(this));\\n        if (_balance < _amount) {\\n            _amount = _withdrawSome(_amount.sub(_balance));\\n            _amount = _amount.add(_balance);\\n        }\\n\\n        uint256 _feeDev = _amount.mul(withdrawalDevFundFee).div(\\n            withdrawalDevFundMax\\n        );\\n        IERC20(want).safeTransfer(IController(controller).devfund(), _feeDev);\\n\\n        uint256 _feeTreasury = _amount.mul(withdrawalTreasuryFee).div(\\n            withdrawalTreasuryMax\\n        );\\n        IERC20(want).safeTransfer(\\n            IController(controller).treasury(),\\n            _feeTreasury\\n        );\\n\\n        address _nPool = IController(controller).nPools(address(want));\\n        require(_nPool != address(0), \\\"!nPool\\\"); // additional protection so we don't burn the funds\\n\\n        IERC20(want).safeTransfer(\\n            _nPool,\\n            _amount.sub(_feeDev).sub(_feeTreasury)\\n        );\\n    }\\n\\n    // Withdraw funds, used to swap between strategies\\n    function withdrawForSwap(uint256 _amount)\\n        external\\n        returns (uint256 balance)\\n    {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _withdrawSome(_amount);\\n\\n        balance = IERC20(want).balanceOf(address(this));\\n\\n        address _nPool = IController(controller).nPools(address(want));\\n        require(_nPool != address(0), \\\"!nPool\\\");\\n        IERC20(want).safeTransfer(_nPool, balance);\\n    }\\n\\n    // Withdraw all funds, normally used when migrating strategies\\n    function withdrawAll() external returns (uint256 balance) {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _withdrawAll();\\n\\n        balance = IERC20(want).balanceOf(address(this));\\n\\n        address _nPool = IController(controller).nPools(address(want));\\n        require(_nPool != address(0), \\\"!nPool\\\"); // additional protection so we don't burn the funds\\n        IERC20(want).safeTransfer(_nPool, balance);\\n    }\\n\\n    function _withdrawAll() internal {\\n        _withdrawSome(balanceOfPool());\\n    }\\n\\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\\n\\n    function harvest() public virtual;\\n\\n    // **** Emergency functions ****\\n\\n    function execute(address _target, bytes memory _data)\\n        public\\n        payable\\n        returns (bytes memory response)\\n    {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        require(_target != address(0), \\\"!target\\\");\\n\\n        // call contract in current context\\n        assembly {\\n            let succeeded := delegatecall(\\n                sub(gas(), 5000),\\n                _target,\\n                add(_data, 0x20),\\n                mload(_data),\\n                0,\\n                0\\n            )\\n            let size := returndatasize()\\n\\n            response := mload(0x40)\\n            mstore(\\n                0x40,\\n                add(response, and(add(add(size, 0x20), 0x1f), not(0x1f)))\\n            )\\n            mstore(response, size)\\n            returndatacopy(add(response, 0x20), 0, size)\\n\\n            switch iszero(succeeded)\\n            case 1 {\\n                // throw if delegatecall failed\\n                revert(add(response, 0x20), size)\\n            }\\n        }\\n    }\\n\\n    // **** Internal functions ****\\n    function _swapQuickswap(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(_to != address(0));\\n\\n        address[] memory path;\\n\\n        if (_from == weth || _to == weth) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = weth;\\n            path[2] = _to;\\n        }\\n\\n        IUniswapRouterV2(quickswapRouter).swapExactTokensForTokens(\\n            _amount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp.add(60)\\n        );\\n    }\\n\\n    function _swapQuickswapWithPath(address[] memory path, uint256 _amount)\\n        internal\\n    {\\n        require(path[1] != address(0));\\n\\n        IUniswapRouterV2(quickswapRouter).swapExactTokensForTokens(\\n            _amount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp.add(60)\\n        );\\n    }\\n\\n    function _swapSushiswap(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(_to != address(0));\\n\\n        address[] memory path;\\n\\n        if (_from == weth || _to == weth) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = weth;\\n            path[2] = _to;\\n        }\\n\\n        IUniswapRouterV2(sushiRouter).swapExactTokensForTokens(\\n            _amount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp.add(60)\\n        );\\n    }\\n\\n    function _swapSushiswapWithPath(address[] memory path, uint256 _amount)\\n        internal\\n    {\\n        require(path[1] != address(0));\\n\\n        IUniswapRouterV2(sushiRouter).swapExactTokensForTokens(\\n            _amount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp.add(60)\\n        );\\n    }\\n\\n    function _swapWithUniLikeRouter(\\n        address routerAddress,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (bool) {\\n        require(_to != address(0));\\n        require(\\n            routerAddress != address(0),\\n            \\\"_swapWithUniLikeRouter routerAddress cant be zero\\\"\\n        );\\n\\n        address[] memory path;\\n\\n        if (_from == weth || _to == weth) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = weth;\\n            path[2] = _to;\\n        }\\n\\n        try\\n            IUniswapRouterV2(routerAddress).swapExactTokensForTokens(\\n                _amount,\\n                0,\\n                path,\\n                address(this),\\n                block.timestamp.add(60)\\n            )\\n        {\\n            return true;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    function _swapToNeurAndDistributePerformanceFees(\\n        address swapToken,\\n        address swapRouterAddress\\n    ) internal {\\n        uint256 swapTokenBalance = IERC20(swapToken).balanceOf(address(this));\\n\\n        if (swapTokenBalance > 0 && performanceTreasuryFee > 0) {\\n            uint256 performanceTreasuryFeeAmount = swapTokenBalance\\n                .mul(performanceTreasuryFee)\\n                .div(performanceTreasuryMax);\\n            uint256 totalFeeAmout = performanceTreasuryFeeAmount;\\n\\n            _swapAmountToNeurAndDistributePerformanceFees(\\n                swapToken,\\n                totalFeeAmout,\\n                swapRouterAddress\\n            );\\n        }\\n    }\\n\\n    function _swapAmountToNeurAndDistributePerformanceFees(\\n        address swapToken,\\n        uint256 amount,\\n        address swapRouterAddress\\n    ) internal {\\n        uint256 swapTokenBalance = IERC20(swapToken).balanceOf(address(this));\\n\\n        require(\\n            swapTokenBalance >= amount,\\n            \\\"Amount is bigger than token balance\\\"\\n        );\\n\\n        IERC20(swapToken).safeApprove(swapRouterAddress, 0);\\n        IERC20(weth).safeApprove(swapRouterAddress, 0);\\n        IERC20(swapToken).safeApprove(swapRouterAddress, amount);\\n        IERC20(weth).safeApprove(swapRouterAddress, type(uint256).max);\\n        bool isSuccesfullSwap = _swapWithUniLikeRouter(\\n            swapRouterAddress,\\n            swapToken,\\n            neuronTokenAddress,\\n            amount\\n        );\\n\\n        if (isSuccesfullSwap) {\\n            uint256 neuronTokenBalance = IERC20(neuronTokenAddress).balanceOf(\\n                address(this)\\n            );\\n\\n            if (neuronTokenBalance > 0) {\\n                // Treasury fees\\n                // Sending strategy's tokens to treasury. Initially @ 30% (set by performanceTreasuryFee constant) of strategy's assets\\n                IERC20(neuronTokenAddress).safeTransfer(\\n                    IController(controller).treasury(),\\n                    neuronTokenBalance\\n                );\\n            }\\n        } else {\\n            // If failed swap to Neuron just transfer swap token to treasury\\n            IERC20(swapToken).safeApprove(\\n                IController(controller).treasury(),\\n                0\\n            );\\n            IERC20(swapToken).safeApprove(\\n                IController(controller).treasury(),\\n                amount\\n            );\\n            IERC20(swapToken).safeTransfer(\\n                IController(controller).treasury(),\\n                amount\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/PolygonStrategySushiDoubleRewardBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./PolygonStrategyBase.sol\\\";\\nimport \\\"../interfaces/IPolygonSushiMiniChef.sol\\\";\\nimport \\\"../interfaces/IPolygonSushiRewarder.sol\\\";\\n\\nabstract contract PolygonStrategySushiDoubleRewardBase is PolygonStrategyBase {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    // Token addresses\\n    address public constant sushi = 0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a;\\n    address public constant rewardToken = wmatic;\\n\\n    address public constant sushiMiniChef =\\n        0x0769fd68dFb93167989C6f7254cd0D766Fb2841F;\\n\\n    uint256 public immutable poolId;\\n    address public immutable token0;\\n    address public immutable token1;\\n\\n    // How much Reward tokens to keep\\n    uint256 public keepRewardToken = 500;\\n    uint256 public keepRewardTokenMax = 10000;\\n\\n    constructor(\\n        address _token0,\\n        address _token1,\\n        uint256 _poolId,\\n        address _lp,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        PolygonStrategyBase(\\n            _lp,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {\\n        poolId = _poolId;\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    function setKeepRewardToken(uint256 _keepRewardToken) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        keepRewardToken = _keepRewardToken;\\n    }\\n\\n    function balanceOfPool() public view override returns (uint256) {\\n        (uint256 amount, ) = IPolygonSushiMiniChef(sushiMiniChef).userInfo(\\n            poolId,\\n            address(this)\\n        );\\n        return amount;\\n    }\\n\\n    function getHarvestable() external view returns (uint256, uint256) {\\n        uint256 _pendingSushi = IPolygonSushiMiniChef(sushiMiniChef)\\n            .pendingSushi(poolId, address(this));\\n        IPolygonSushiRewarder rewarder = IPolygonSushiRewarder(\\n            IPolygonSushiMiniChef(sushiMiniChef).rewarder(poolId)\\n        );\\n        (, uint256[] memory _rewardAmounts) = rewarder.pendingTokens(\\n            poolId,\\n            address(this),\\n            0\\n        );\\n\\n        uint256 _pendingRewardToken;\\n        if (_rewardAmounts.length > 0) {\\n            _pendingRewardToken = _rewardAmounts[0];\\n        }\\n        return (_pendingSushi, _pendingRewardToken);\\n    }\\n\\n    // **** Setters ****\\n\\n    function deposit() public override {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            IERC20(want).safeApprove(sushiMiniChef, 0);\\n            IERC20(want).safeApprove(sushiMiniChef, _want);\\n            IPolygonSushiMiniChef(sushiMiniChef).deposit(\\n                poolId,\\n                _want,\\n                address(this)\\n            );\\n        }\\n    }\\n\\n    function _withdrawSome(uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        IPolygonSushiMiniChef(sushiMiniChef).withdraw(\\n            poolId,\\n            _amount,\\n            address(this)\\n        );\\n        return _amount;\\n    }\\n\\n    // **** State Mutations ****\\n\\n    function harvest() public override onlyBenevolent {\\n        // Anyone can harvest it at any given time.\\n        // I understand the possibility of being frontrun\\n        // But ETH is a dark forest, and I wanna see how this plays out\\n        // i.e. will be be heavily frontrunned?\\n        //      if so, a new strategy will be deployed.\\n\\n        // Collects Sushi and Reward tokens\\n        IPolygonSushiMiniChef(sushiMiniChef).harvest(poolId, address(this));\\n\\n        uint256 _rewardToken = IERC20(rewardToken).balanceOf(address(this));\\n        uint256 _sushi = IERC20(sushi).balanceOf(address(this));\\n\\n        if (_rewardToken > 0) {\\n            _swapToNeurAndDistributePerformanceFees(rewardToken, sushiRouter);\\n            uint256 _keepRewardToken = _rewardToken.mul(keepRewardToken).div(\\n                keepRewardTokenMax\\n            );\\n            if (_keepRewardToken > 0) {\\n                IERC20(rewardToken).safeTransfer(\\n                    IController(controller).treasury(),\\n                    _keepRewardToken\\n                );\\n            }\\n            _rewardToken = IERC20(rewardToken).balanceOf(address(this));\\n        }\\n\\n        if (_sushi > 0) {\\n            _swapToNeurAndDistributePerformanceFees(sushi, sushiRouter);\\n            _sushi = IERC20(sushi).balanceOf(address(this));\\n        }\\n\\n        if (_rewardToken > 0) {\\n            IERC20(rewardToken).safeApprove(sushiRouter, 0);\\n            IERC20(rewardToken).safeApprove(sushiRouter, _rewardToken);\\n            _swapSushiswap(rewardToken, weth, _rewardToken);\\n        }\\n\\n        if (_sushi > 0) {\\n            IERC20(sushi).safeApprove(sushiRouter, 0);\\n            IERC20(sushi).safeApprove(sushiRouter, _sushi);\\n\\n            _swapSushiswap(sushi, weth, _sushi);\\n        }\\n\\n        // Swap half WETH for token0\\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\\n        if (_weth > 0 && token0 != weth) {\\n            _swapSushiswap(weth, token0, _weth.div(2));\\n        }\\n\\n        // Swap half WETH for token1\\n        if (_weth > 0 && token1 != weth) {\\n            _swapSushiswap(weth, token1, _weth.div(2));\\n        }\\n\\n        uint256 _token0 = IERC20(token0).balanceOf(address(this));\\n        uint256 _token1 = IERC20(token1).balanceOf(address(this));\\n        if (_token0 > 0 && _token1 > 0) {\\n            IERC20(token0).safeApprove(sushiRouter, 0);\\n            IERC20(token0).safeApprove(sushiRouter, _token0);\\n            IERC20(token1).safeApprove(sushiRouter, 0);\\n            IERC20(token1).safeApprove(sushiRouter, _token1);\\n\\n            IUniswapRouterV2(sushiRouter).addLiquidity(\\n                token0,\\n                token1,\\n                _token0,\\n                _token1,\\n                0,\\n                0,\\n                address(this),\\n                block.timestamp + 60\\n            );\\n\\n            // Donates DUST\\n            IERC20(token0).transfer(\\n                IController(controller).treasury(),\\n                IERC20(token0).balanceOf(address(this))\\n            );\\n            IERC20(token1).safeTransfer(\\n                IController(controller).treasury(),\\n                IERC20(token1).balanceOf(address(this))\\n            );\\n        }\\n\\n        deposit();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPolygonSushiMiniChef.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\ninterface IPolygonSushiMiniChef {\\n    event Deposit(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount,\\n        address indexed to\\n    );\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount,\\n        address indexed to\\n    );\\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\\n    event LogPoolAddition(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        address indexed lpToken,\\n        address indexed rewarder\\n    );\\n    event LogSetPool(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        address indexed rewarder,\\n        bool overwrite\\n    );\\n    event LogSushiPerSecond(uint256 sushiPerSecond);\\n    event LogUpdatePool(\\n        uint256 indexed pid,\\n        uint64 lastRewardTime,\\n        uint256 lpSupply,\\n        uint256 accSushiPerShare\\n    );\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event Withdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount,\\n        address indexed to\\n    );\\n\\n    function SUSHI() external view returns (address);\\n\\n    function add(\\n        uint256 allocPoint,\\n        address _lpToken,\\n        address _rewarder\\n    ) external;\\n\\n    function batch(bytes[] memory calls, bool revertOnFail)\\n        external\\n        payable\\n        returns (bool[] memory successes, bytes[] memory results);\\n\\n    function claimOwnership() external;\\n\\n    function deposit(\\n        uint256 pid,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function emergencyWithdraw(uint256 pid, address to) external;\\n\\n    function harvest(uint256 pid, address to) external;\\n\\n    function lpToken(uint256) external view returns (address);\\n\\n    function massUpdatePools(uint256[] memory pids) external;\\n\\n    function migrate(uint256 _pid) external;\\n\\n    function migrator() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function pendingSushi(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function permitToken(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            uint128 accSushiPerShare,\\n            uint64 lastRewardTime,\\n            uint64 allocPoint\\n        );\\n\\n    function poolLength() external view returns (uint256 pools);\\n\\n    function rewarder(uint256) external view returns (address);\\n\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        address _rewarder,\\n        bool overwrite\\n    ) external;\\n\\n    function setMigrator(address _migrator) external;\\n\\n    function setSushiPerSecond(uint256 _sushiPerSecond) external;\\n\\n    function sushiPerSecond() external view returns (uint256);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) external;\\n\\n    function updatePool(uint256 pid)\\n        external\\n        returns (MiniChefV2.PoolInfo memory pool);\\n\\n    function userInfo(uint256, address)\\n        external\\n        view\\n        returns (uint256 amount, int256 rewardDebt);\\n\\n    function withdraw(\\n        uint256 pid,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function withdrawAndHarvest(\\n        uint256 pid,\\n        uint256 amount,\\n        address to\\n    ) external;\\n}\\n\\ninterface MiniChefV2 {\\n    struct PoolInfo {\\n        uint128 accSushiPerShare;\\n        uint64 lastRewardTime;\\n        uint64 allocPoint;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPolygonSushiRewarder.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\ninterface IPolygonSushiRewarder {\\n    event LogInit();\\n    event LogOnReward(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount,\\n        address indexed to\\n    );\\n    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint);\\n    event LogRewardPerSecond(uint256 rewardPerSecond);\\n    event LogSetPool(uint256 indexed pid, uint256 allocPoint);\\n    event LogUpdatePool(\\n        uint256 indexed pid,\\n        uint64 lastRewardTime,\\n        uint256 lpSupply,\\n        uint256 accSushiPerShare\\n    );\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function add(uint256 allocPoint, uint256 _pid) external;\\n\\n    function claimOwnership() external;\\n\\n    function massUpdatePools(uint256[] memory pids) external;\\n\\n    function onSushiReward(\\n        uint256 pid,\\n        address _user,\\n        address to,\\n        uint256,\\n        uint256 lpToken\\n    ) external;\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function pendingToken(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256 pending);\\n\\n    function pendingTokens(\\n        uint256 pid,\\n        address user,\\n        uint256\\n    )\\n        external\\n        view\\n        returns (address[] memory rewardTokens, uint256[] memory rewardAmounts);\\n\\n    function poolIds(uint256) external view returns (uint256);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            uint128 accSushiPerShare,\\n            uint64 lastRewardTime,\\n            uint64 allocPoint\\n        );\\n\\n    function poolLength() external view returns (uint256 pools);\\n\\n    function rewardPerSecond() external view returns (uint256);\\n\\n    function set(uint256 _pid, uint256 _allocPoint) external;\\n\\n    function setRewardPerSecond(uint256 _rewardPerSecond) external;\\n\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) external;\\n\\n    function updatePool(uint256 pid)\\n        external\\n        returns (ComplexRewarderTime.PoolInfo memory pool);\\n\\n    function userInfo(uint256, address)\\n        external\\n        view\\n        returns (uint256 amount, uint256 rewardDebt);\\n}\\n\\ninterface ComplexRewarderTime {\\n    struct PoolInfo {\\n        uint128 accSushiPerShare;\\n        uint64 lastRewardTime;\\n        uint64 allocPoint;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/PolygonStrategyQuickswapBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./PolygonStrategyBase.sol\\\";\\nimport \\\"../interfaces/IPolygonSushiMiniChef.sol\\\";\\nimport \\\"../interfaces/IPolygonSushiRewarder.sol\\\";\\nimport \\\"./PolygonStrategyStakingRewardsBase.sol\\\";\\n\\nabstract contract PolygonStrategyQuickswapBase is\\n    PolygonStrategyStakingRewardsBase\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    // Token addresses\\n    address public constant quick = 0x831753DD7087CaC61aB5644b308642cc1c33Dc13;\\n    address public constant rewardToken = quick;\\n\\n\\n    address public token0;\\n    address public token1;\\n\\n    // How much Reward tokens to keep\\n    uint256 public keepRewardToken = 0;\\n    uint256 public keepRewardTokenMax = 10000;\\n\\n    constructor(\\n        address _token0,\\n        address _token1,\\n        address _staking_rewards,\\n        address _lp_token,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        PolygonStrategyStakingRewardsBase(\\n            _staking_rewards,\\n            _lp_token,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {\\n        token0 = _token0;\\n        token1 = _token1;\\n\\n        IERC20(token0).approve(quickswapRouter, type(uint256).max);\\n        IERC20(token1).approve(quickswapRouter, type(uint256).max);\\n    }\\n\\n    function setKeepRewardToken(uint256 _keepRewardToken) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        keepRewardToken = _keepRewardToken;\\n    }\\n\\n    // **** State Mutations ****\\n\\n    function harvest() public override onlyBenevolent {\\n        // Collects Quick tokens\\n        IStakingRewards(rewards).getReward();\\n\\n        uint256 _rewardToken = IERC20(rewardToken).balanceOf(address(this));\\n\\n        if (_rewardToken > 0 && performanceTreasuryFee > 0) {\\n            _swapToNeurAndDistributePerformanceFees(rewardToken, quickswapRouter);\\n            uint256 _keepRewardToken = _rewardToken.mul(keepRewardToken).div(\\n                keepRewardTokenMax\\n            );\\n            if (_keepRewardToken > 0) {\\n                IERC20(rewardToken).safeTransfer(\\n                    IController(controller).treasury(),\\n                    _keepRewardToken\\n                );\\n            }\\n            _rewardToken = IERC20(rewardToken).balanceOf(address(this));\\n        }\\n\\n        if (_rewardToken > 0) {\\n            IERC20(rewardToken).safeApprove(sushiRouter, 0);\\n            IERC20(rewardToken).safeApprove(sushiRouter, _rewardToken);\\n            _swapQuickswap(rewardToken, weth, _rewardToken);\\n        }\\n\\n        // Swap half WETH for token0\\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\\n        if (_weth > 0 && token0 != weth) {\\n            _swapQuickswap(weth, token0, _weth.div(2));\\n        }\\n\\n        // Swap half WETH for token1\\n        if (_weth > 0 && token1 != weth) {\\n            _swapQuickswap(weth, token1, _weth.div(2));\\n        }\\n\\n        uint256 _token0 = IERC20(token0).balanceOf(address(this));\\n        uint256 _token1 = IERC20(token1).balanceOf(address(this));\\n        if (_token0 > 0 && _token1 > 0) {\\n            IERC20(token0).safeApprove(quickswapRouter, 0);\\n            IERC20(token0).safeApprove(quickswapRouter, _token0);\\n            IERC20(token1).safeApprove(quickswapRouter, 0);\\n            IERC20(token1).safeApprove(quickswapRouter, _token1);\\n\\n            IUniswapRouterV2(quickswapRouter).addLiquidity(\\n                token0,\\n                token1,\\n                _token0,\\n                _token1,\\n                0,\\n                0,\\n                address(this),\\n                block.timestamp + 60\\n            );\\n\\n            // Donates DUST\\n            IERC20(token0).transfer(\\n                IController(controller).treasury(),\\n                IERC20(token0).balanceOf(address(this))\\n            );\\n            IERC20(token1).safeTransfer(\\n                IController(controller).treasury(),\\n                IERC20(token1).balanceOf(address(this))\\n            );\\n        }\\n\\n        deposit();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/PolygonStrategyStakingRewardsBase.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport \\\"./PolygonStrategyBase.sol\\\";\\n\\nabstract contract PolygonStrategyStakingRewardsBase is PolygonStrategyBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    address public rewards;\\n\\n    // **** Getters ****\\n    constructor(\\n        address _rewards,\\n        address _want,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        PolygonStrategyBase(\\n            _want,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {\\n        rewards = _rewards;\\n    }\\n\\n    function balanceOfPool() public view override returns (uint256) {\\n        return IStakingRewards(rewards).balanceOf(address(this));\\n    }\\n\\n    function getHarvestable() external view returns (uint256) {\\n        return IStakingRewards(rewards).earned(address(this));\\n    }\\n\\n    // **** Setters ****\\n\\n    function deposit() public override {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            IERC20(want).safeApprove(rewards, 0);\\n            IERC20(want).safeApprove(rewards, _want);\\n            IStakingRewards(rewards).stake(_want);\\n        }\\n    }\\n\\n    function _withdrawSome(uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        IStakingRewards(rewards).withdraw(_amount);\\n        return _amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/PolygonStrategyQuickswapWmaticEthLp.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport {PolygonStrategyQuickswapBase} from \\\"./PolygonStrategyQuickswapBase.sol\\\";\\n\\ncontract PolygonStrategyQuickswapWmaticEthLp is PolygonStrategyQuickswapBase {\\n    address public constant wmaticEthLpToken =\\n        0xadbF1854e5883eB8aa7BAf50705338739e558E5b;\\n    address public constant wmaticEthRewards =\\n        0x8FF56b5325446aAe6EfBf006a4C1D88e4935a914;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        PolygonStrategyQuickswapBase(\\n            wmatic,\\n            weth,\\n            wmaticEthRewards,\\n            wmaticEthLpToken,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"PolygonStrategyQuickswapWmaticEthLp\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/PolygonStrategyQuickswapWbtcEthLp.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport {PolygonStrategyQuickswapBase} from \\\"./PolygonStrategyQuickswapBase.sol\\\";\\n\\ncontract PolygonStrategyQuickswapWbtcEthLp is PolygonStrategyQuickswapBase {\\n    // token0\\n    address public constant wbtc = 0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6;\\n    address public constant wbtcWethLpToken =\\n        0xdC9232E2Df177d7a12FdFf6EcBAb114E2231198D;\\n\\n    address public constant wbtcWethRewards =\\n        0x070D182EB7E9C3972664C959CE58C5fC6219A7ad;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        PolygonStrategyQuickswapBase(\\n            wbtc,\\n            weth,\\n            wbtcWethRewards,\\n            wbtcWethLpToken,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"PolygonStrategyQuickswapWbtcEthLp\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/PolygonStrategyQuickswapUsdcUsdtLp.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport {PolygonStrategyQuickswapBase} from \\\"./PolygonStrategyQuickswapBase.sol\\\";\\n\\ncontract PolygonStrategyQuickswapUsdcUsdtLp is PolygonStrategyQuickswapBase {\\n    // token0\\n    address public constant usdc = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n    // token1\\n    address public constant usdt = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\\n    address public constant usdcUsdtLpToken =\\n        0x2cF7252e74036d1Da831d11089D326296e64a728;\\n    address public constant usdcUsdtRewards =\\n        0x251d9837a13F38F3Fe629ce2304fa00710176222;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        PolygonStrategyQuickswapBase(\\n            usdc,\\n            usdt,\\n            usdcUsdtRewards,\\n            usdcUsdtLpToken,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"PolygonStrategyQuickswapUsdcUsdtLp\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/PolygonStrategyQuickswapMimaticUsdcLp.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport {PolygonStrategyQuickswapBase} from \\\"./PolygonStrategyQuickswapBase.sol\\\";\\n\\ncontract PolygonStrategyQuickswapMimaticUsdcLp is PolygonStrategyQuickswapBase {\\n    // token0\\n    address public constant usdc = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n    // token1\\n    address public constant miMatic =\\n        0xa3Fa99A148fA48D14Ed51d610c367C61876997F1;\\n    address public constant miMaticUsdcLpToken =\\n        0x160532D2536175d65C03B97b0630A9802c274daD;\\n    address public constant miMaticUsdcRewards =\\n        0x1fdDd7F3A4c1f0e7494aa8B637B8003a64fdE21A;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        PolygonStrategyQuickswapBase(\\n            usdc,\\n            miMatic,\\n            miMaticUsdcRewards,\\n            miMaticUsdcLpToken,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"PolygonStrategyQuickswapMimaticUsdcLp\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/PolygonStrategyQuickswapDaiUsdtLp.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport {PolygonStrategyQuickswapBase} from \\\"./PolygonStrategyQuickswapBase.sol\\\";\\n\\ncontract PolygonStrategyQuickswapDaiUsdtLp is PolygonStrategyQuickswapBase {\\n    // token0\\n    address public constant dai = 0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063;\\n    // token1\\n    address public constant usdt = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\\n    address public constant daiUsdtLpToken =\\n        0x59153f27eeFE07E5eCE4f9304EBBa1DA6F53CA88;\\n    address public constant daiUsdtRewards =\\n        0x97Efe8470727FeE250D7158e6f8F63bb4327c8A2;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        PolygonStrategyQuickswapBase(\\n            usdt,\\n            dai,\\n            daiUsdtRewards,\\n            daiUsdtLpToken,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"PolygonStrategyQuickswapDaiUsdtLp\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/PolygonStrategyQuickswapDaiUsdcLp.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport {PolygonStrategyQuickswapBase} from \\\"./PolygonStrategyQuickswapBase.sol\\\";\\n\\ncontract PolygonStrategyQuickswapDaiUsdcLp is PolygonStrategyQuickswapBase {\\n    // token0\\n    address public constant dai =0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063;\\n    // token1\\n    address public constant usdc = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n    address public constant daiUsdcLpToken =\\n        0xf04adBF75cDFc5eD26eeA4bbbb991DB002036Bdd;\\n    address public constant daiUsdcRewards =\\n        0xEd8413eCEC87c3d4664975743c02DB3b574012a7;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        PolygonStrategyQuickswapBase(\\n            usdc,\\n            dai,\\n            daiUsdcRewards,\\n            daiUsdcLpToken,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"PolygonStrategyQuickswapDaiUsdcLp\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategySushiEthFarmDoubleRewardBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./StrategyBase.sol\\\";\\nimport \\\"../interfaces/ISushiMasterchefV2.sol\\\";\\nimport \\\"../interfaces/ISushiRewarder.sol\\\";\\n\\nabstract contract StrategySushiEthFarmDoubleRewardBase is StrategyBase {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    // Token addresses\\n    address public constant sushi = 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2;\\n    address public immutable rewardToken;\\n\\n    address public constant sushiMasterChef =\\n        0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d;\\n\\n    uint256 public poolId;\\n\\n    // How much Reward tokens to keep\\n    uint256 public keepRewardToken = 500;\\n    uint256 public keepRewardTokenMax = 10000;\\n\\n    constructor(\\n        uint256 _poolId,\\n        address _lp,\\n        address _rewardToken,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        StrategyBase(\\n            _lp,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {\\n        poolId = _poolId;\\n        rewardToken = _rewardToken;\\n    }\\n\\n    function setKeepRewardToken(uint256 _keepRewardToken) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        keepRewardToken = _keepRewardToken;\\n    }\\n\\n    function balanceOfPool() public view override returns (uint256) {\\n        (uint256 amount, ) = ISushiMasterchefV2(sushiMasterChef).userInfo(\\n            poolId,\\n            address(this)\\n        );\\n        return amount;\\n    }\\n\\n    function getHarvestableSushi() public view returns (uint256) {\\n        return\\n            ISushiMasterchefV2(sushiMasterChef).pendingSushi(\\n                poolId,\\n                address(this)\\n            );\\n    }\\n\\n    function getHarvestableRewardToken() public view returns (uint256) {\\n        address rewarder = ISushiMasterchefV2(sushiMasterChef).rewarder(poolId);\\n        return ISushiRewarder(rewarder).pendingToken(poolId, address(this));\\n    }\\n\\n    // **** Setters ****\\n\\n    function deposit() public override {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            IERC20(want).safeApprove(sushiMasterChef, 0);\\n            IERC20(want).safeApprove(sushiMasterChef, _want);\\n            ISushiMasterchefV2(sushiMasterChef).deposit(\\n                poolId,\\n                _want,\\n                address(this)\\n            );\\n        }\\n    }\\n\\n    function _withdrawSome(uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        ISushiMasterchefV2(sushiMasterChef).withdraw(\\n            poolId,\\n            _amount,\\n            address(this)\\n        );\\n        return _amount;\\n    }\\n\\n    // **** State Mutations ****\\n\\n    function harvest() public override onlyBenevolent {\\n        // Anyone can harvest it at any given time.\\n        // I understand the possibility of being frontrun\\n        // But ETH is a dark forest, and I wanna see how this plays out\\n        // i.e. will be be heavily frontrunned?\\n        //      if so, a new strategy will be deployed.\\n\\n        // Collects Sushi and Reward tokens\\n        ISushiMasterchefV2(sushiMasterChef).harvest(poolId, address(this));\\n\\n        uint256 _rewardToken = IERC20(rewardToken).balanceOf(address(this));\\n        uint256 _sushi = IERC20(sushi).balanceOf(address(this));\\n\\n        if (_rewardToken > 0) {\\n            _swapToNeurAndDistributePerformanceFees(rewardToken, sushiRouter);\\n            uint256 _keepRewardToken = _rewardToken.mul(keepRewardToken).div(\\n                keepRewardTokenMax\\n            );\\n            if (_keepRewardToken > 0) {\\n                IERC20(rewardToken).safeTransfer(\\n                    IController(controller).treasury(),\\n                    _keepRewardToken\\n                );\\n            }\\n            _rewardToken = IERC20(rewardToken).balanceOf(address(this));\\n        }\\n\\n        if (_sushi > 0) {\\n            _swapToNeurAndDistributePerformanceFees(sushi, sushiRouter);\\n            _sushi = IERC20(sushi).balanceOf(address(this));\\n        }\\n\\n        if (_rewardToken > 0) {\\n            uint256 _amount = _rewardToken.div(2);\\n            IERC20(rewardToken).safeApprove(sushiRouter, 0);\\n            IERC20(rewardToken).safeApprove(sushiRouter, _amount);\\n            _swapSushiswap(rewardToken, weth, _amount);\\n        }\\n\\n        if (_sushi > 0) {\\n            uint256 _amount = _sushi.div(2);\\n            IERC20(sushi).safeApprove(sushiRouter, 0);\\n            IERC20(sushi).safeApprove(sushiRouter, _sushi);\\n\\n            _swapSushiswap(sushi, weth, _amount);\\n            _swapSushiswap(sushi, rewardToken, _amount);\\n        }\\n\\n        // Adds in liquidity for WETH/rewardToken\\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\\n\\n        _rewardToken = IERC20(rewardToken).balanceOf(address(this));\\n\\n        if (_weth > 0 && _rewardToken > 0) {\\n            IERC20(weth).safeApprove(sushiRouter, 0);\\n            IERC20(weth).safeApprove(sushiRouter, _weth);\\n\\n            IERC20(rewardToken).safeApprove(sushiRouter, 0);\\n            IERC20(rewardToken).safeApprove(sushiRouter, _rewardToken);\\n\\n            IUniswapRouterV2(sushiRouter).addLiquidity(\\n                weth,\\n                rewardToken,\\n                _weth,\\n                _rewardToken,\\n                0,\\n                0,\\n                address(this),\\n                block.timestamp + 60\\n            );\\n\\n            // Donates DUST\\n            IERC20(weth).transfer(\\n                IController(controller).treasury(),\\n                IERC20(weth).balanceOf(address(this))\\n            );\\n            IERC20(rewardToken).safeTransfer(\\n                IController(controller).treasury(),\\n                IERC20(rewardToken).balanceOf(address(this))\\n            );\\n        }\\n\\n        deposit();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISushiMasterchefV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\n// interface for Sushiswap MasterChef contract\\ninterface ISushiMasterchefV2 {\\n    function MASTER_PID() external view returns (uint256);\\n\\n    function MASTER_CHEF() external view returns (address);\\n\\n    function rewarder(uint256 pid) external view returns (address);\\n\\n    function add(\\n        uint256 _allocPoint,\\n        address _lpToken,\\n        address _rewarder\\n    ) external;\\n\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n\\n    function pendingSushi(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function sushiPerBlock() external view returns (uint256);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            uint256 lastRewardBlock,\\n            uint256 accsushiPerShare,\\n            uint256 allocPoint\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        address _rewarder,\\n        bool overwrite\\n    ) external;\\n\\n    function harvestFromMasterChef() external;\\n\\n    function harvest(uint256 pid, address to) external;\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function userInfo(uint256, address)\\n        external\\n        view\\n        returns (uint256 amount, uint256 rewardDebt);\\n\\n    function withdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n\\n    function withdrawAndHarvest(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISushiRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\n// interface for Sushiswap MasterChef contract\\ninterface ISushiRewarder {\\n    function pendingToken(uint256 pid, address user)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategySushiDoubleEthRulerLp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./StrategySushiEthFarmDoubleRewardBase.sol\\\";\\n\\ncontract StrategySushiDoubleEthRulerLp is StrategySushiEthFarmDoubleRewardBase {\\n    uint256 public constant sushi_ruler_poolId = 7;\\n\\n    address public constant sushi_eth_ruler_lp =\\n        0xb1EECFea192907fC4bF9c4CE99aC07186075FC51;\\n    address public constant ruler = 0x2aECCB42482cc64E087b6D2e5Da39f5A7A7001f8;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        StrategySushiEthFarmDoubleRewardBase(\\n            sushi_ruler_poolId,\\n            sushi_eth_ruler_lp,\\n            ruler,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"StrategySushiDoubleEthRulerLp\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategySushiDoubleEthPickleLp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./StrategySushiEthFarmDoubleRewardBase.sol\\\";\\n\\ncontract StrategySushiDoubleEthPickleLp is StrategySushiEthFarmDoubleRewardBase {\\n    uint256 public constant sushi_pickle_poolId = 3;\\n\\n    address public constant sushi_eth_pickle_lp =\\n        0x269Db91Fc3c7fCC275C2E6f22e5552504512811c;\\n    address public constant pickle = 0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        StrategySushiEthFarmDoubleRewardBase(\\n            sushi_pickle_poolId,\\n            sushi_eth_pickle_lp,\\n            pickle,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"StrategySushiDoubleEthPickleLp\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategySushiDoubleEthCvxLp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./StrategySushiEthFarmDoubleRewardBase.sol\\\";\\n\\ncontract StrategySushiDoubleEthCvxLp is StrategySushiEthFarmDoubleRewardBase {\\n    uint256 public constant sushi_cvx_poolId = 1;\\n\\n    address public constant sushi_eth_cvx_lp =\\n        0x05767d9EF41dC40689678fFca0608878fb3dE906;\\n    address public constant cvx = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        StrategySushiEthFarmDoubleRewardBase(\\n            sushi_cvx_poolId,\\n            sushi_eth_cvx_lp,\\n            cvx,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"StrategySushiDoubleEthCvxLp\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/StrategySushiDoubleEthAlcxLp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./StrategySushiEthFarmDoubleRewardBase.sol\\\";\\n\\ncontract StrategySushiDoubleEthAlcxLp is StrategySushiEthFarmDoubleRewardBase {\\n    uint256 public constant sushi_alcx_poolId = 0;\\n\\n    address public constant sushi_eth_alcx_lp =\\n        0xC3f279090a47e80990Fe3a9c30d24Cb117EF91a8;\\n    address public constant alcx = 0xdBdb4d16EdA451D0503b854CF79D55697F90c8DF;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        StrategySushiEthFarmDoubleRewardBase(\\n            sushi_alcx_poolId,\\n            sushi_eth_alcx_lp,\\n            alcx,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"StrategySushiDoubleEthAlcxLp\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/PolygonStrategySushiDoubleDaiPickleLp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./PolygonStrategySushiDoubleRewardBase.sol\\\";\\n\\ncontract PolygonStrategySushiDoubleDaiPickleLp is PolygonStrategyBase {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    // Token addresses\\n    address public constant sushi = 0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a;\\n    address public constant rewardToken = wmatic;\\n\\n    address public constant sushiMiniChef =\\n        0x0769fd68dFb93167989C6f7254cd0D766Fb2841F;\\n\\n    // How much Reward tokens to keep\\n    uint256 public keepRewardToken = 500;\\n    uint256 public keepRewardTokenMax = 10000;\\n\\n    address public constant sushi_dai_pickle_lp =\\n        0x57602582eB5e82a197baE4E8b6B80E39abFC94EB;\\n    uint256 public constant sushi_dai_pickle_poolId = 37;\\n    // Token0\\n    address public constant pickle_token =\\n        0x2b88aD57897A8b496595925F43048301C37615Da;\\n    // Token1\\n    address public constant dai = 0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063;\\n    address public constant token0 = pickle_token;\\n    address public constant token1 = dai;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        PolygonStrategyBase(\\n            sushi_dai_pickle_lp,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"PolygonStrategySushiDoubleDaiPickleLp\\\";\\n    }\\n\\n    function setKeepRewardToken(uint256 _keepRewardToken) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        keepRewardToken = _keepRewardToken;\\n    }\\n\\n    function balanceOfPool() public view override returns (uint256) {\\n        (uint256 amount, ) = IPolygonSushiMiniChef(sushiMiniChef).userInfo(\\n            sushi_dai_pickle_poolId,\\n            address(this)\\n        );\\n        return amount;\\n    }\\n\\n    function getHarvestable() external view returns (uint256, uint256) {\\n        uint256 _pendingSushi = IPolygonSushiMiniChef(sushiMiniChef)\\n            .pendingSushi(sushi_dai_pickle_poolId, address(this));\\n        IPolygonSushiRewarder rewarder = IPolygonSushiRewarder(\\n            IPolygonSushiMiniChef(sushiMiniChef).rewarder(\\n                sushi_dai_pickle_poolId\\n            )\\n        );\\n        (, uint256[] memory _rewardAmounts) = rewarder.pendingTokens(\\n            sushi_dai_pickle_poolId,\\n            address(this),\\n            0\\n        );\\n\\n        uint256 _pendingRewardToken;\\n        if (_rewardAmounts.length > 0) {\\n            _pendingRewardToken = _rewardAmounts[0];\\n        }\\n        return (_pendingSushi, _pendingRewardToken);\\n    }\\n\\n    // **** Setters ****\\n\\n    function deposit() public override {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            IERC20(want).safeApprove(sushiMiniChef, 0);\\n            IERC20(want).safeApprove(sushiMiniChef, _want);\\n            IPolygonSushiMiniChef(sushiMiniChef).deposit(\\n                sushi_dai_pickle_poolId,\\n                _want,\\n                address(this)\\n            );\\n        }\\n    }\\n\\n    function _withdrawSome(uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        IPolygonSushiMiniChef(sushiMiniChef).withdraw(\\n            sushi_dai_pickle_poolId,\\n            _amount,\\n            address(this)\\n        );\\n        return _amount;\\n    }\\n\\n    function harvest() public override onlyBenevolent {\\n        // Anyone can harvest it at any given time.\\n        // I understand the possibility of being frontrun\\n        // But ETH is a dark forest, and I wanna see how this plays out\\n        // i.e. will be be heavily frontrunned?\\n        //      if so, a new strategy will be deployed.\\n\\n        // Collects Sushi and Reward tokens\\n        IPolygonSushiMiniChef(sushiMiniChef).harvest(\\n            sushi_dai_pickle_poolId,\\n            address(this)\\n        );\\n\\n        uint256 _rewardToken = IERC20(rewardToken).balanceOf(address(this));\\n        uint256 _sushi = IERC20(sushi).balanceOf(address(this));\\n\\n        if (_rewardToken > 0) {\\n            _swapToNeurAndDistributePerformanceFees(rewardToken, sushiRouter);\\n            uint256 _keepRewardToken = _rewardToken.mul(keepRewardToken).div(\\n                keepRewardTokenMax\\n            );\\n            if (_keepRewardToken > 0) {\\n                IERC20(rewardToken).safeTransfer(\\n                    IController(controller).treasury(),\\n                    _keepRewardToken\\n                );\\n            }\\n            _rewardToken = IERC20(rewardToken).balanceOf(address(this));\\n        }\\n\\n        if (_sushi > 0) {\\n            _swapToNeurAndDistributePerformanceFees(sushi, sushiRouter);\\n            _sushi = IERC20(sushi).balanceOf(address(this));\\n        }\\n\\n        if (_rewardToken > 0) {\\n            IERC20(rewardToken).safeApprove(sushiRouter, 0);\\n            IERC20(rewardToken).safeApprove(sushiRouter, _rewardToken);\\n            _swapSushiswap(rewardToken, weth, _rewardToken);\\n        }\\n\\n        if (_sushi > 0) {\\n            IERC20(sushi).safeApprove(sushiRouter, 0);\\n            IERC20(sushi).safeApprove(sushiRouter, _sushi);\\n\\n            _swapSushiswap(sushi, weth, _sushi);\\n        }\\n\\n        // Swap all WETH for DAI first\\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\\n\\n        if (_weth > 0) {\\n            _swapSushiswap(weth, dai, _weth);\\n        }\\n\\n        uint256 _dai = IERC20(dai).balanceOf(address(this));\\n        // Swap half DAI for pickle\\n        if (_dai > 0) {\\n            IERC20(dai).safeApprove(sushiRouter, 0);\\n            IERC20(dai).safeApprove(sushiRouter, _dai.div(2));\\n            _swapSushiswap(dai, pickle_token, _dai.div(2));\\n        }\\n\\n        uint256 _token0 = IERC20(token0).balanceOf(address(this));\\n        uint256 _token1 = IERC20(token1).balanceOf(address(this));\\n        if (_token0 > 0 && _token1 > 0) {\\n            IERC20(token0).safeApprove(sushiRouter, 0);\\n            IERC20(token0).safeApprove(sushiRouter, _token0);\\n            IERC20(token1).safeApprove(sushiRouter, 0);\\n            IERC20(token1).safeApprove(sushiRouter, _token1);\\n\\n            IUniswapRouterV2(sushiRouter).addLiquidity(\\n                token0,\\n                token1,\\n                _token0,\\n                _token1,\\n                0,\\n                0,\\n                address(this),\\n                block.timestamp + 60\\n            );\\n\\n            // Donates DUST\\n            IERC20(token0).transfer(\\n                IController(controller).treasury(),\\n                IERC20(token0).balanceOf(address(this))\\n            );\\n            IERC20(token1).safeTransfer(\\n                IController(controller).treasury(),\\n                IERC20(token1).balanceOf(address(this))\\n            );\\n        }\\n\\n        deposit();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/PolygonStrategyCurveAm3Crv.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../interfaces/INeuronPool.sol\\\";\\nimport \\\"../interfaces/ICurve.sol\\\";\\nimport \\\"../interfaces/IUniswapRouterV2.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\n\\nimport \\\"./PolygonStrategyCurveBase.sol\\\";\\n\\ncontract PolygonStrategyCurveAm3Crv is PolygonStrategyCurveBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // Curve stuff\\n    // Pool to deposit to. In this case it's 3CRV, accepting DAI + USDC + USDT\\n    address public three_pool = 0x445FE580eF8d70FF569aB36e80c647af338db351;\\n    // Pool's Gauge - interactions are mediated through ICurveGauge interface @ this address\\n    address public three_gauge = 0x19793B454D3AfC7b454F206Ffe95aDE26cA6912c;\\n    // Curve 3Crv token contract address.\\n    // https://etherscan.io/address/0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490\\n    // Etherscan states this contract manages 3Crv and USDC\\n    // The starting deposit is made with this token ^^^\\n    address public three_crv = 0xE7a24EF0C5e95Ffb0f6684b813A78F2a3AD7D171;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        PolygonStrategyCurveBase(\\n            three_pool,\\n            three_gauge,\\n            three_crv,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {\\n        IERC20(crv).approve(quickswapRouter, type(uint256).max);\\n    }\\n\\n    // **** Views ****\\n\\n    function getMostPremium() public view override returns (address, uint256) {\\n        uint256[] memory balances = new uint256[](3);\\n        balances[0] = ICurveFi_Polygon_3(curve).balances(0); // DAI\\n        balances[1] = ICurveFi_Polygon_3(curve).balances(1).mul(10**12); // USDC\\n        balances[2] = ICurveFi_Polygon_3(curve).balances(2).mul(10**12); // USDT\\n\\n        // DAI\\n        if (balances[0] < balances[1] && balances[0] < balances[2]) {\\n            return (dai, 0);\\n        }\\n\\n        // USDC\\n        if (balances[1] < balances[0] && balances[1] < balances[2]) {\\n            return (usdc, 1);\\n        }\\n\\n        // USDT\\n        if (balances[2] < balances[0] && balances[2] < balances[1]) {\\n            return (usdt, 2);\\n        }\\n\\n        // If they're somehow equal, we just want DAI\\n        return (dai, 0);\\n    }\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"PolygonStrategyCurveAm3Crv\\\";\\n    }\\n\\n    // **** State Mutations ****\\n    // Function to harvest pool rewards, convert to stablecoins and reinvest to pool\\n    function harvest() public override onlyBenevolent {\\n        // Anyone can harvest it at any given time.\\n        // I understand the possibility of being frontrun\\n        // But ETH is a dark forest, and I wanna see how this plays out\\n        // i.e. will be be heavily frontrunned?\\n        // if so, a new strategy will be deployed.\\n\\n        // stablecoin we want to convert to\\n        (address to, uint256 toIndex) = getMostPremium();\\n\\n        ICurveGauge(gauge).claim_rewards(address(this));\\n\\n        uint256 _crv = IERC20(crv).balanceOf(address(this));\\n\\n        if (_crv > 0) {\\n            _swapToNeurAndDistributePerformanceFees(crv, quickswapRouter);\\n        }\\n\\n        uint256 _wmatic = IERC20(wmatic).balanceOf(address(this));\\n\\n        if (_wmatic > 0) {\\n            _swapToNeurAndDistributePerformanceFees(wmatic, quickswapRouter);\\n        }\\n\\n        _crv = IERC20(crv).balanceOf(address(this));\\n\\n        if (_crv > 0) {\\n            IERC20(crv).safeApprove(quickswapRouter, 0);\\n            IERC20(crv).safeApprove(quickswapRouter, _crv);\\n            _swapQuickswap(crv, to, _crv);\\n        }\\n\\n        _wmatic = IERC20(wmatic).balanceOf(address(this));\\n        if (_wmatic > 0) {\\n            IERC20(wmatic).safeApprove(quickswapRouter, 0);\\n            IERC20(wmatic).safeApprove(quickswapRouter, _wmatic);\\n            _swapQuickswap(wmatic, to, _wmatic);\\n        }\\n\\n        // Adds liquidity to curve.fi's pool\\n        // to get back want (scrv)\\n        uint256 _to = IERC20(to).balanceOf(address(this));\\n        if (_to > 0) {\\n            IERC20(to).safeApprove(curve, 0);\\n            IERC20(to).safeApprove(curve, _to);\\n            uint256[3] memory liquidity;\\n            liquidity[toIndex] = _to;\\n            // Transferring stablecoins back to Curve\\n            ICurveFi_Polygon_3(curve).add_liquidity(liquidity, 0, true);\\n        }\\n\\n        deposit();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NeuronPool.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./interfaces/IController.sol\\\";\\n\\nimport {GaugesDistributor} from \\\"./GaugesDistributor.sol\\\";\\nimport {Gauge} from \\\"./Gauge.sol\\\";\\n\\ncontract NeuronPool is ERC20 {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // Token accepted by the contract. E.g. 3Crv for 3poolCrv pool\\n    // Usually want/_want in strategies\\n    IERC20 public token;\\n\\n    uint256 public min = 9500;\\n    uint256 public constant max = 10000;\\n\\n    uint8 public immutable _decimals;\\n\\n    address public governance;\\n    address public timelock;\\n    address public controller;\\n    address public masterchef;\\n    GaugesDistributor public gaugesDistributor;\\n\\n    constructor(\\n        // Token accepted by the contract. E.g. 3Crv for 3poolCrv pool\\n        // Usually want/_want in strategies\\n        address _token,\\n        address _governance,\\n        address _timelock,\\n        address _controller,\\n        address _masterchef,\\n        address _gaugesDistributor\\n    )\\n        ERC20(\\n            string(abi.encodePacked(\\\"neuroned\\\", ERC20(_token).name())),\\n            string(abi.encodePacked(\\\"neur\\\", ERC20(_token).symbol()))\\n        )\\n    {\\n        _decimals = ERC20(_token).decimals();\\n        token = IERC20(_token);\\n        governance = _governance;\\n        timelock = _timelock;\\n        controller = _controller;\\n        masterchef = _masterchef;\\n        gaugesDistributor = GaugesDistributor(_gaugesDistributor);\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    // Balance = pool's balance + pool's token controller contract balance\\n    function balance() public view returns (uint256) {\\n        return\\n            token.balanceOf(address(this)).add(\\n                IController(controller).balanceOf(address(token))\\n            );\\n    }\\n\\n    function setMin(uint256 _min) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(_min <= max, \\\"numerator cannot be greater than denominator\\\");\\n        min = _min;\\n    }\\n\\n    function setGovernance(address _governance) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        governance = _governance;\\n    }\\n\\n    function setTimelock(address _timelock) public {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        timelock = _timelock;\\n    }\\n\\n    function setController(address _controller) public {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        controller = _controller;\\n    }\\n\\n    // Returns tokens available for deposit into the pool\\n    // Custom logic in here for how much the pools allows to be borrowed\\n    function available() public view returns (uint256) {\\n        return token.balanceOf(address(this)).mul(min).div(max);\\n    }\\n\\n    // Depositing tokens into pool\\n    // Usually called manually in tests\\n    function earn() public {\\n        uint256 _bal = available();\\n        token.safeTransfer(controller, _bal);\\n        IController(controller).earn(address(token), _bal);\\n    }\\n\\n    function depositAll() external {\\n        deposit(token.balanceOf(msg.sender));\\n    }\\n\\n    // User's entry point; called on pressing Deposit in Neuron's UI\\n    function deposit(uint256 _amount) public {\\n        // Pool's + controller balances\\n        uint256 _pool = balance();\\n        uint256 _before = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n        uint256 _after = token.balanceOf(address(this));\\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\\n        uint256 shares = 0;\\n        // totalSupply - total supply of pToken, given in exchange for depositing to a pool, eg p3CRV for 3Crv\\n        if (totalSupply() == 0) {\\n            // Tokens user will get in exchange for deposit. First user receives tokens equal to deposit.\\n            shares = _amount;\\n        } else {\\n            // For subsequent users: (tokens_stacked * exist_pTokens) / total_tokens_stacked. total_tokesn_stacked - not considering first users\\n            shares = (_amount.mul(totalSupply())).div(_pool);\\n        }\\n        _mint(msg.sender, shares);\\n    }\\n\\n    function depositAndFarm(uint256 _amount) public {\\n        // Pool's + controller balances\\n        uint256 _pool = balance();\\n        uint256 _before = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n        uint256 _after = token.balanceOf(address(this));\\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\\n        uint256 shares = 0;\\n        // totalSupply - total supply of pToken, given in exchange for depositing to a pool, eg p3CRV for 3Crv\\n        if (totalSupply() == 0) {\\n            // Tokens user will get in exchange for deposit. First user receives tokens equal to deposit.\\n            shares = _amount;\\n        } else {\\n            // For subsequent users: (tokens_stacked * exist_pTokens) / total_tokens_stacked. total_tokesn_stacked - not considering first users\\n            shares = (_amount.mul(totalSupply())).div(_pool);\\n        }\\n\\n        Gauge gauge = Gauge(gaugesDistributor.getGauge(address(this)));\\n        _mint(address(gauge), shares);\\n        gauge.depositStateUpdateByPool(msg.sender, shares);\\n    }\\n\\n    function withdrawAll() external {\\n        withdrawFor(msg.sender, balanceOf(msg.sender), msg.sender);\\n    }\\n\\n    function withdraw(uint256 _shares) external {\\n        withdrawFor(msg.sender, _shares, msg.sender);\\n    }\\n\\n    // Used to swap any borrowed reserve over the debt limit to liquidate to 'token'\\n    function harvest(address reserve, uint256 amount) external {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        require(reserve != address(token), \\\"token\\\");\\n        IERC20(reserve).safeTransfer(controller, amount);\\n    }\\n\\n    // No rebalance implementation for lower fees and faster swaps\\n    function withdrawFor(\\n        address holder,\\n        uint256 _shares,\\n        address burnFrom\\n    ) internal {\\n        // _shares - tokens user wants to withdraw\\n        uint256 r = (balance().mul(_shares)).div(totalSupply());\\n        _burn(burnFrom, _shares);\\n\\n        // Check balance\\n        uint256 b = token.balanceOf(address(this));\\n        // If pool balance's not enough, we're withdrawing the controller's tokens\\n        if (b < r) {\\n            uint256 _withdraw = r.sub(b);\\n            IController(controller).withdraw(address(token), _withdraw);\\n            uint256 _after = token.balanceOf(address(this));\\n            uint256 _diff = _after.sub(b);\\n            if (_diff < _withdraw) {\\n                r = b.add(_diff);\\n            }\\n        }\\n\\n        token.safeTransfer(holder, r);\\n    }\\n\\n    function withdrawAllRightFromFarm() external {\\n        Gauge gauge = Gauge(gaugesDistributor.getGauge(address(this)));\\n        uint256 shares = gauge.withdrawAllStateUpdateByPool(msg.sender);\\n        withdrawFor(msg.sender, shares, address(gauge));\\n    }\\n\\n    function getRatio() public view returns (uint256) {\\n        uint256 currentTotalSupply = totalSupply();\\n        if (currentTotalSupply == 0) {\\n            return 0;\\n        }\\n        return balance().mul(1e18).div(currentTotalSupply);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/GaugesDistributor.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./Gauge.sol\\\";\\n\\ninterface IMinter {\\n    function collect() external;\\n}\\n\\ncontract GaugesDistributor {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable NEURON;\\n    IERC20 public immutable AXON;\\n    address public governance;\\n    address public admin;\\n\\n    uint256 public pid;\\n    uint256 public totalWeight;\\n    IMinter public minter;\\n    bool public isManualWeights = true;\\n\\n    address[] internal _tokens;\\n    mapping(address => address) public gauges; // token => gauge\\n    mapping(address => uint256) public weights; // token => weight\\n    mapping(address => mapping(address => uint256)) public votes; // msg.sender => votes\\n    mapping(address => address[]) public tokenVote; // msg.sender => token\\n    mapping(address => uint256) public usedWeights; // msg.sender => total voting weight of user\\n\\n    constructor(\\n        address _minter,\\n        address _neuronToken,\\n        address _axon,\\n        address _governance,\\n        address _admin\\n    ) {\\n        minter = IMinter(_minter);\\n        NEURON = IERC20(_neuronToken);\\n        AXON = IERC20(_axon);\\n        governance = _governance;\\n        admin = _admin;\\n    }\\n\\n    function setMinter(address _minter) public {\\n        require(\\n            msg.sender == governance,\\n            \\\"!admin and !governance\\\"\\n        );\\n        minter = IMinter(_minter);\\n    }\\n\\n    function tokens() external view returns (address[] memory) {\\n        return _tokens;\\n    }\\n\\n    function getGauge(address _token) external view returns (address) {\\n        return gauges[_token];\\n    }\\n\\n    // Reset votes to 0\\n    function reset() external {\\n        _reset(msg.sender);\\n    }\\n\\n    // Reset votes to 0\\n    function _reset(address _owner) internal {\\n        address[] storage _tokenVote = tokenVote[_owner];\\n        uint256 _tokenVoteCnt = _tokenVote.length;\\n\\n        for (uint256 i = 0; i < _tokenVoteCnt; i++) {\\n            address _token = _tokenVote[i];\\n            uint256 _votes = votes[_owner][_token];\\n\\n            if (_votes > 0) {\\n                totalWeight = totalWeight.sub(_votes);\\n                weights[_token] = weights[_token].sub(_votes);\\n\\n                votes[_owner][_token] = 0;\\n            }\\n        }\\n\\n        delete tokenVote[_owner];\\n    }\\n\\n    // Adjusts _owner's votes according to latest _owner's AXON balance\\n    function poke(address _owner) public {\\n        address[] memory _tokenVote = tokenVote[_owner];\\n        uint256 _tokenCnt = _tokenVote.length;\\n        uint256[] memory _weights = new uint256[](_tokenCnt);\\n\\n        uint256 _prevUsedWeight = usedWeights[_owner];\\n        uint256 _weight = AXON.balanceOf(_owner);\\n\\n        for (uint256 i = 0; i < _tokenCnt; i++) {\\n            uint256 _prevWeight = votes[_owner][_tokenVote[i]];\\n            _weights[i] = _prevWeight.mul(_weight).div(_prevUsedWeight);\\n        }\\n\\n        _vote(_owner, _tokenVote, _weights);\\n    }\\n\\n    function _vote(\\n        address _owner,\\n        address[] memory _tokenVote,\\n        uint256[] memory _weights\\n    ) internal {\\n        _reset(_owner);\\n        uint256 _tokenCnt = _tokenVote.length;\\n        uint256 _weight = AXON.balanceOf(_owner);\\n        uint256 _totalVoteWeight = 0;\\n        uint256 _usedWeight = 0;\\n\\n        for (uint256 i = 0; i < _tokenCnt; i++) {\\n            _totalVoteWeight = _totalVoteWeight.add(_weights[i]);\\n        }\\n\\n        for (uint256 i = 0; i < _tokenCnt; i++) {\\n            address _token = _tokenVote[i];\\n            address _gauge = gauges[_token];\\n            uint256 _tokenWeight = _weights[i].mul(_weight).div(\\n                _totalVoteWeight\\n            );\\n\\n            if (_gauge != address(0x0)) {\\n                _usedWeight = _usedWeight.add(_tokenWeight);\\n                totalWeight = totalWeight.add(_tokenWeight);\\n                weights[_token] = weights[_token].add(_tokenWeight);\\n                tokenVote[_owner].push(_token);\\n                votes[_owner][_token] = _tokenWeight;\\n            }\\n        }\\n\\n        usedWeights[_owner] = _usedWeight;\\n    }\\n\\n    function setWeights(\\n        address[] memory _tokensToVote,\\n        uint256[] memory _weights\\n    ) external {\\n        require(\\n            msg.sender == admin || msg.sender == governance,\\n            \\\"Set weights function can only be executed by admin or governance\\\"\\n        );\\n        require(isManualWeights, \\\"Manual weights mode is off\\\");\\n\\n        require(\\n            _tokensToVote.length == _weights.length,\\n            \\\"Number Tokens to vote should be the same as weights number\\\"\\n        );\\n\\n        uint256 _tokensCnt = _tokensToVote.length;\\n        uint256 _totalWeight = 0;\\n        for (uint256 i = 0; i < _tokensCnt; i++) {\\n            address _token = _tokensToVote[i];\\n            address _gauge = gauges[_token];\\n            uint256 _tokenWeight = _weights[i];\\n\\n            if (_gauge != address(0x0)) {\\n                _totalWeight = _totalWeight.add(_tokenWeight);\\n                weights[_token] = _tokenWeight;\\n            }\\n        }\\n        totalWeight = _totalWeight;\\n    }\\n\\n    function setIsManualWeights(bool _isManualWeights) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n\\n        isManualWeights = _isManualWeights;\\n    }\\n\\n    // Vote with AXON on a gauge\\n    function vote(address[] calldata _tokenVote, uint256[] calldata _weights)\\n        external\\n    {\\n        require(_tokenVote.length == _weights.length);\\n        require(!isManualWeights, \\\"isManualWeights should be false\\\");\\n        _vote(msg.sender, _tokenVote, _weights);\\n    }\\n\\n    function addGauge(address _token) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(gauges[_token] == address(0x0), \\\"exists\\\");\\n        gauges[_token] = address(\\n            new Gauge(_token, address(NEURON), address(AXON))\\n        );\\n        _tokens.push(_token);\\n    }\\n\\n    // Fetches Neurons\\n    function collect() internal {\\n        minter.collect();\\n    }\\n\\n    function length() external view returns (uint256) {\\n        return _tokens.length;\\n    }\\n\\n    function distribute() external {\\n        require(\\n            msg.sender == admin || msg.sender == governance,\\n            \\\"Distribute function can only be executed by admin or governance\\\"\\n        );\\n        collect();\\n        uint256 _balance = NEURON.balanceOf(address(this));\\n        if (_balance > 0 && totalWeight > 0) {\\n            for (uint256 i = 0; i < _tokens.length; i++) {\\n                address _token = _tokens[i];\\n                address _gauge = gauges[_token];\\n                uint256 _reward = _balance.mul(weights[_token]).div(\\n                    totalWeight\\n                );\\n                if (_reward > 0) {\\n                    NEURON.safeApprove(_gauge, 0);\\n                    NEURON.safeApprove(_gauge, _reward);\\n                    Gauge(_gauge).notifyRewardAmount(_reward);\\n                }\\n            }\\n        }\\n    }\\n\\n    function setAdmin(address _admin) external {\\n        require(\\n            msg.sender == admin || msg.sender == governance,\\n            \\\"Only governance or admin can set admin\\\"\\n        );\\n\\n        admin = _admin;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Gauge.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport {IAxon} from \\\"./interfaces/IAxon.sol\\\";\\n\\ncontract Gauge is ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable NEURON;\\n    IAxon public immutable AXON;\\n\\n    IERC20 public immutable TOKEN;\\n    address public immutable DISTRIBUTION;\\n    uint256 public constant DURATION = 7 days;\\n\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    modifier onlyDistribution() {\\n        require(\\n            msg.sender == DISTRIBUTION,\\n            \\\"Caller is not RewardsDistribution contract\\\"\\n        );\\n        _;\\n    }\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 public _totalSupply;\\n    uint256 public derivedSupply;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => uint256) public derivedBalances;\\n    mapping(address => uint256) private _base;\\n\\n    constructor(\\n        address _token,\\n        address _neuron,\\n        address _axon\\n    ) {\\n        NEURON = IERC20(_neuron);\\n        AXON = IAxon(_axon);\\n        TOKEN = IERC20(_token);\\n        DISTRIBUTION = msg.sender;\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(derivedSupply)\\n            );\\n    }\\n\\n    function derivedBalance(address account) public view returns (uint256) {\\n        uint256 _balance = _balances[account];\\n        uint256 _derived = _balance.mul(40).div(100);\\n        uint256 axonMultiplier = 0;\\n        uint256 axonTotalSupply = AXON.totalSupply();\\n        if (axonTotalSupply != 0) {\\n            axonMultiplier = AXON.balanceOf(account).div(AXON.totalSupply());\\n        }\\n        uint256 _adjusted = (_totalSupply.mul(axonMultiplier)).mul(60).div(100);\\n        return Math.min(_derived.add(_adjusted), _balance);\\n    }\\n\\n    function kick(address account) public {\\n        uint256 _derivedBalance = derivedBalances[account];\\n        derivedSupply = derivedSupply.sub(_derivedBalance);\\n        _derivedBalance = derivedBalance(account);\\n        derivedBalances[account] = _derivedBalance;\\n        derivedSupply = derivedSupply.add(_derivedBalance);\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            derivedBalances[account]\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function getRewardForDuration() external view returns (uint256) {\\n        return rewardRate.mul(DURATION);\\n    }\\n\\n    function depositAll() external {\\n        _deposit(TOKEN.balanceOf(msg.sender), msg.sender, msg.sender);\\n    }\\n\\n    function deposit(uint256 amount) external {\\n        _deposit(amount, msg.sender, msg.sender);\\n    }\\n\\n    function depositFor(uint256 amount, address account) external {\\n        _deposit(amount, account, account);\\n    }\\n\\n    function depositFromSenderFor(uint256 amount, address account) external {\\n        _deposit(amount, msg.sender, account);\\n    }\\n\\n    function depositStateUpdate(address holder, uint256 amount)\\n        internal\\n        updateReward(holder)\\n    {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[holder] = _balances[holder].add(amount);\\n        emit Staked(holder, amount);\\n    }\\n\\n    function depositStateUpdateByPool(address holder, uint256 amount) external {\\n        require(\\n            msg.sender == address(TOKEN),\\n            \\\"State update without transfer can only be called by pool\\\"\\n        );\\n        depositStateUpdate(holder, amount);\\n    }\\n\\n    function _deposit(\\n        uint256 amount,\\n        address spender,\\n        address recipient\\n    ) internal nonReentrant {\\n        depositStateUpdate(recipient, amount);\\n        TOKEN.safeTransferFrom(spender, address(this), amount);\\n    }\\n\\n    function withdrawAll() external {\\n        _withdraw(_balances[msg.sender]);\\n    }\\n\\n    function withdraw(uint256 amount) external {\\n        _withdraw(amount);\\n    }\\n\\n    function _withdraw(uint256 amount)\\n        internal\\n        nonReentrant\\n    {\\n        withdrawStateUpdate(msg.sender, amount);\\n        TOKEN.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function withdrawStateUpdate(address holder, uint256 amount) internal updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[holder] = _balances[holder].sub(amount);\\n        emit Withdrawn(holder, amount);\\n    }\\n\\n    // We use this function when withdraw right from pool. No transfer because after that we burn this amount from contract.\\n    function withdrawAllStateUpdateByPool(address holder)\\n        external\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(\\n            msg.sender == address(TOKEN),\\n            \\\"Only corresponding pool can withdraw tokens for someone\\\"\\n        );\\n        uint256 amount = _balances[holder];\\n        withdrawStateUpdate(holder, amount);\\n        return amount;\\n    }\\n\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            NEURON.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function exit() external {\\n        _withdraw(_balances[msg.sender]);\\n        getReward();\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        onlyDistribution\\n        updateReward(address(0))\\n    {\\n        NEURON.safeTransferFrom(DISTRIBUTION, address(this), reward);\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(DURATION);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(DURATION);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = NEURON.balanceOf(address(this));\\n        require(\\n            rewardRate <= balance.div(DURATION),\\n            \\\"Provided reward too high\\\"\\n        );\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(DURATION);\\n        emit RewardAdded(reward);\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n        if (account != address(0)) {\\n            kick(account);\\n        }\\n    }\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAxon.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\ninterface IAxon {\\n    function balanceOf(address addr, uint256 _t) external view returns (uint256);\\n\\n    function balanceOf(address addr) external view returns (uint256);\\n\\n    function balanceOfAt(address addr, uint256 _block)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalSupply(uint256 t) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/GaugePolygon.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract GaugePolygon is ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable NEURON;\\n\\n    IERC20 public immutable TOKEN;\\n    address public immutable DISTRIBUTION;\\n    uint256 public constant DURATION = 7 days;\\n\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    modifier onlyDistribution() {\\n        require(\\n            msg.sender == DISTRIBUTION,\\n            \\\"Caller is not RewardsDistribution contract\\\"\\n        );\\n        _;\\n    }\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 public _totalSupply;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => uint256) private _base;\\n\\n    constructor(address _token, address _neuron) {\\n        NEURON = IERC20(_neuron);\\n        TOKEN = IERC20(_token);\\n        DISTRIBUTION = msg.sender;\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(_totalSupply)\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            _balances[account]\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function getRewardForDuration() external view returns (uint256) {\\n        return rewardRate.mul(DURATION);\\n    }\\n\\n    function depositAll() external {\\n        _deposit(TOKEN.balanceOf(msg.sender), msg.sender, msg.sender);\\n    }\\n\\n    function deposit(uint256 amount) external {\\n        _deposit(amount, msg.sender, msg.sender);\\n    }\\n\\n    function depositFor(uint256 amount, address account) external {\\n        _deposit(amount, account, account);\\n    }\\n\\n    function depositFromSenderFor(uint256 amount, address account) external {\\n        _deposit(amount, msg.sender, account);\\n    }\\n\\n    function depositStateUpdate(address holder, uint256 amount)\\n        internal\\n        updateReward(holder)\\n    {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[holder] = _balances[holder].add(amount);\\n        emit Staked(holder, amount);\\n    }\\n\\n    function depositStateUpdateByPool(address holder, uint256 amount) external {\\n        require(\\n            msg.sender == address(TOKEN),\\n            \\\"State update without transfer can only be called by pool\\\"\\n        );\\n        depositStateUpdate(holder, amount);\\n    }\\n\\n    function _deposit(\\n        uint256 amount,\\n        address spender,\\n        address recipient\\n    ) internal nonReentrant {\\n        depositStateUpdate(recipient, amount);\\n        TOKEN.safeTransferFrom(spender, address(this), amount);\\n    }\\n\\n    function withdrawAll() external {\\n        _withdraw(_balances[msg.sender]);\\n    }\\n\\n    function withdraw(uint256 amount) external {\\n        _withdraw(amount);\\n    }\\n\\n    function _withdraw(uint256 amount) internal nonReentrant {\\n        withdrawStateUpdate(msg.sender, amount);\\n        TOKEN.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function withdrawStateUpdate(address holder, uint256 amount)\\n        internal\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[holder] = _balances[holder].sub(amount);\\n        emit Withdrawn(holder, amount);\\n    }\\n\\n    // We use this function when withdraw right from pool. No transfer because after that we burn this amount from contract.\\n    function withdrawAllStateUpdateByPool(address holder)\\n        external\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(\\n            msg.sender == address(TOKEN),\\n            \\\"Only corresponding pool can withdraw tokens for someone\\\"\\n        );\\n        uint256 amount = _balances[holder];\\n        withdrawStateUpdate(holder, amount);\\n        return amount;\\n    }\\n\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            NEURON.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function exit() external {\\n        _withdraw(_balances[msg.sender]);\\n        getReward();\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        onlyDistribution\\n        updateReward(address(0))\\n    {\\n        NEURON.safeTransferFrom(DISTRIBUTION, address(this), reward);\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(DURATION);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(DURATION);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = NEURON.balanceOf(address(this));\\n        require(\\n            rewardRate <= balance.div(DURATION),\\n            \\\"Provided reward too high\\\"\\n        );\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(DURATION);\\n        emit RewardAdded(reward);\\n    }\\n\\n    // BEFORE_DEPLOY gauges shouldn't be empty at the moment of first users staking. Set rewardPerTokenStored\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n}\\n\"\r\n    },\r\n    \"contracts/GaugesDistributorPolygon.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./GaugePolygon.sol\\\";\\n\\ninterface IMinter {\\n    function collect() external;\\n}\\n\\ncontract GaugesDistributorPolygon {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable NEURON;\\n    address public governance;\\n    address public admin;\\n\\n    uint256 public pid;\\n    uint256 public totalWeight;\\n    IMinter public minter;\\n\\n    address[] internal _tokens;\\n    mapping(address => address) public gauges; // token => gauge\\n    mapping(address => uint256) public weights; // token => weight\\n    mapping(address => mapping(address => uint256)) public votes; // msg.sender => votes\\n\\n    constructor(\\n        address _minter,\\n        address _neuronToken,\\n        address _governance,\\n        address _admin\\n    ) {\\n        minter = IMinter(_minter);\\n        NEURON = IERC20(_neuronToken);\\n        governance = _governance;\\n        admin = _admin;\\n    }\\n\\n    function setMinter(address _minter) public {\\n        require(msg.sender == governance, \\\"!admin and !governance\\\");\\n        minter = IMinter(_minter);\\n    }\\n\\n    function tokens() external view returns (address[] memory) {\\n        return _tokens;\\n    }\\n\\n    function getGauge(address _token) external view returns (address) {\\n        return gauges[_token];\\n    }\\n\\n    function setWeights(\\n        address[] memory _tokensToVote,\\n        uint256[] memory _weights\\n    ) external {\\n        require(\\n            msg.sender == admin || msg.sender == governance,\\n            \\\"Set weights function can only be executed by admin or governance\\\"\\n        );\\n        require(\\n            _tokensToVote.length == _weights.length,\\n            \\\"Number Tokens to vote should be the same as weights number\\\"\\n        );\\n\\n        uint256 _tokensCnt = _tokensToVote.length;\\n        uint256 _totalWeight = 0;\\n        for (uint256 i = 0; i < _tokensCnt; i++) {\\n            address _token = _tokensToVote[i];\\n            address _gauge = gauges[_token];\\n            uint256 _tokenWeight = _weights[i];\\n\\n            if (_gauge != address(0x0)) {\\n                _totalWeight = _totalWeight.add(_tokenWeight);\\n                weights[_token] = _tokenWeight;\\n            }\\n        }\\n        totalWeight = _totalWeight;\\n    }\\n\\n    function addGauge(address _token) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        require(gauges[_token] == address(0x0), \\\"exists\\\");\\n        gauges[_token] = address(new GaugePolygon(_token, address(NEURON)));\\n        _tokens.push(_token);\\n    }\\n\\n    // Fetches Neurons\\n    function collect() internal {\\n        minter.collect();\\n    }\\n\\n    function length() external view returns (uint256) {\\n        return _tokens.length;\\n    }\\n\\n    function distribute() external {\\n        require(\\n            msg.sender == admin || msg.sender == governance,\\n            \\\"Distribute function can only be executed by admin or governance\\\"\\n        );\\n        collect();\\n        uint256 _balance = NEURON.balanceOf(address(this));\\n        if (_balance > 0 && totalWeight > 0) {\\n            for (uint256 i = 0; i < _tokens.length; i++) {\\n                address _token = _tokens[i];\\n                address _gauge = gauges[_token];\\n                uint256 _reward = _balance.mul(weights[_token]).div(\\n                    totalWeight\\n                );\\n                if (_reward > 0) {\\n                    NEURON.safeApprove(_gauge, 0);\\n                    NEURON.safeApprove(_gauge, _reward);\\n                    GaugePolygon(_gauge).notifyRewardAmount(_reward);\\n                }\\n            }\\n        }\\n    }\\n\\n    function setAdmin(address _admin) external {\\n        require(\\n            msg.sender == admin || msg.sender == governance,\\n            \\\"Only governance or admin can set admin\\\"\\n        );\\n\\n        admin = _admin;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MasterChef.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {AnyswapV5ERC20} from \\\"./lib/AnyswapV5ERC20.sol\\\";\\n\\ncontract MasterChef is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // The NEURON TOKEN\\n    AnyswapV5ERC20 public neuronToken;\\n    // Dev fund (10%, initially)\\n    uint256 public devFundPercentage = 10;\\n    // Treasury (10%, initially)\\n    uint256 public treasuryPercentage = 10;\\n    address public governance;\\n    // Dev address.\\n    address public devaddr;\\n    address public treasuryAddress;\\n    // Block number when bonus NEURON period ends.\\n    uint256 public bonusEndBlock;\\n    // NEURON tokens created per block.\\n    uint256 public neuronTokenPerBlock;\\n    // Bonus muliplier for early nueron makers.\\n    uint256 public constant BONUS_MULTIPLIER = 10;\\n\\n    // The block number when NEURON mining starts.\\n    uint256 public startBlock;\\n\\n    address public distributor;\\n    uint256 public distributorLastRewardBlock;\\n\\n    // Events\\n    event Recovered(address token, uint256 amount);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    modifier onlyGovernance() {\\n        require(\\n            governance == _msgSender(),\\n            \\\"Governance: caller is not the governance\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        address _neuronToken,\\n        address _governance,\\n        address _devaddr,\\n        address _treasuryAddress,\\n        uint256 _neuronTokenPerBlock,\\n        uint256 _startBlock,\\n        uint256 _bonusEndBlock\\n    ) {\\n        neuronToken = AnyswapV5ERC20(_neuronToken);\\n        governance = _governance;\\n        devaddr = _devaddr;\\n        treasuryAddress = _treasuryAddress;\\n\\n        distributorLastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n\\n        neuronTokenPerBlock = _neuronTokenPerBlock;\\n        startBlock = _startBlock;\\n        bonusEndBlock = _bonusEndBlock;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_to <= bonusEndBlock) {\\n            return _to.sub(_from).mul(BONUS_MULTIPLIER);\\n        } else if (_from >= bonusEndBlock) {\\n            return _to.sub(_from);\\n        } else {\\n            return\\n                bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\\n                    _to.sub(bonusEndBlock)\\n                );\\n        }\\n    }\\n\\n    function collect() external {\\n        require(msg.sender == distributor, \\\"Only distributor can collect\\\");\\n        uint256 multiplier = getMultiplier(\\n            distributorLastRewardBlock,\\n            block.number\\n        );\\n        distributorLastRewardBlock = block.number;\\n        uint256 neuronTokenReward = multiplier.mul(neuronTokenPerBlock);\\n        neuronToken.mint(devaddr, neuronTokenReward.div(100).mul(devFundPercentage));\\n        neuronToken.mint(treasuryAddress, neuronTokenReward.div(100).mul(treasuryPercentage));\\n        neuronToken.mint(distributor, neuronTokenReward);\\n    }\\n\\n    // Safe neuronToken transfer function, just in case if rounding error causes pool to not have enough NEURs.\\n    function safeNeuronTokenTransfer(address _to, uint256 _amount) internal {\\n        uint256 neuronTokenBalance = neuronToken.balanceOf(address(this));\\n        if (_amount > neuronTokenBalance) {\\n            neuronToken.transfer(_to, neuronTokenBalance);\\n        } else {\\n            neuronToken.transfer(_to, _amount);\\n        }\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function setDevAddr(address _devaddr) external {\\n        require(msg.sender == devaddr, \\\"dev: wut?\\\");\\n        devaddr = _devaddr;\\n    }\\n\\n    // **** Additional functions separate from the original masterchef contract ****\\n\\n    function setNeuronTokenPerBlock(uint256 _neuronTokenPerBlock)\\n        external\\n        onlyGovernance\\n    {\\n        require(_neuronTokenPerBlock > 0, \\\"!neuronTokenPerBlock-0\\\");\\n\\n        neuronTokenPerBlock = _neuronTokenPerBlock;\\n    }\\n\\n    function setBonusEndBlock(uint256 _bonusEndBlock) external onlyGovernance {\\n        bonusEndBlock = _bonusEndBlock;\\n    }\\n\\n    function setDevFundPercentage(uint256 _devFundPercentage)\\n        external\\n        onlyGovernance\\n    {\\n        require(_devFundPercentage > 0, \\\"!devFundPercentage-0\\\");\\n        devFundPercentage = _devFundPercentage;\\n    }\\n\\n    function setTreasuryPercentage(uint256 _treasuryPercentage)\\n        external\\n        onlyGovernance\\n    {\\n        require(_treasuryPercentage > 0, \\\"!treasuryPercentage-0\\\");\\n        treasuryPercentage = _treasuryPercentage;\\n    }\\n\\n    function setDistributor(address _distributor) external onlyGovernance {\\n        distributor = _distributor;\\n        distributorLastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/AnyswapV5ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.2;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address target,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function transferWithPermit(\\n        address target,\\n        address to,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\n/**\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\n *\\n * Adds the {permit} method, which can be used to change one's\\n * {IERC20-allowance} without having to send a transaction, by signing a\\n * message. This allows users to spend tokens without having to hold Ether.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\n */\\ninterface IERC2612 {\\n    /**\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n}\\n\\n/// @dev Wrapped ERC-20 v10 (AnyswapV3ERC20) is an ERC-20 ERC-20 wrapper. You can `deposit` ERC-20 and obtain an AnyswapV3ERC20 balance which can then be operated as an ERC-20 token. You can\\n/// `withdraw` ERC-20 from AnyswapV3ERC20, which will then burn AnyswapV3ERC20 token in your wallet. The amount of AnyswapV3ERC20 token in any wallet is always identical to the\\n/// balance of ERC-20 deposited minus the ERC-20 withdrawn with that specific wallet.\\ninterface IAnyswapV3ERC20 is IERC20, IERC2612 {\\n    /// @dev Sets `value` as allowance of `spender` account over caller account's AnyswapV3ERC20 token,\\n    /// after which a call is executed to an ERC677-compliant contract with the `data` parameter.\\n    /// Emits {Approval} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// For more information on approveAndCall format, see https://github.com/ethereum/EIPs/issues/677.\\n    function approveAndCall(\\n        address spender,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool);\\n\\n    /// @dev Moves `value` AnyswapV3ERC20 token from caller's account to account (`to`),\\n    /// after which a call is executed to an ERC677-compliant contract with the `data` parameter.\\n    /// A transfer to `address(0)` triggers an ERC-20 withdraw matching the sent AnyswapV3ERC20 token in favor of caller.\\n    /// Emits {Transfer} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` AnyswapV3ERC20 token.\\n    /// For more information on transferAndCall format, see https://github.com/ethereum/EIPs/issues/677.\\n    function transferAndCall(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\\ninterface ITransferReceiver {\\n    function onTokenTransfer(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external returns (bool);\\n}\\n\\ninterface IApprovalReceiver {\\n    function onTokenApproval(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external returns (bool);\\n}\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        bytes32 codehash;\\n\\n            bytes32 accountHash\\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != 0x0 && codehash != accountHash);\\n    }\\n}\\n\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\\ncontract AnyswapV5ERC20 is IAnyswapV3ERC20 {\\n    using SafeERC20 for IERC20;\\n    string public name;\\n    string public symbol;\\n    uint8 public immutable override decimals;\\n\\n    address public immutable underlying;\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n    bytes32 public constant TRANSFER_TYPEHASH =\\n        keccak256(\\n            \\\"Transfer(address owner,address to,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n    /// @dev Records amount of AnyswapV3ERC20 token owned by account.\\n    mapping(address => uint256) public override balanceOf;\\n    uint256 private _totalSupply;\\n\\n    // init flag for setting immediate vault, needed for CREATE2 support\\n    bool private _init;\\n\\n    // flag to enable/disable swapout vs vault.burn so multiple events are triggered\\n    bool private _vaultOnly;\\n\\n    // configurable delay for timelock functions\\n    // BEFORE_DEPLOY discuss delay. 2 days (default value) maybe too much. Now set to 0 for testing\\n    // uint256 public delay = 2 * 24 * 3600;\\n    uint256 public delay = 0;\\n\\n    // set of minters, can be this bridge or other bridges\\n    mapping(address => bool) public isMinter;\\n    address[] public minters;\\n\\n    // primary controller of the token contract\\n    address public vault;\\n\\n    address public pendingMinter;\\n    uint256 public delayMinter;\\n\\n    address public pendingVault;\\n    uint256 public delayVault;\\n\\n    uint256 public pendingDelay;\\n    uint256 public delayDelay;\\n\\n    modifier onlyAuth() {\\n        require(isMinter[msg.sender], \\\"AnyswapV4ERC20: FORBIDDEN\\\");\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == mpc(), \\\"AnyswapV3ERC20: FORBIDDEN\\\");\\n        _;\\n    }\\n\\n    function owner() public view returns (address) {\\n        return mpc();\\n    }\\n\\n    function mpc() public view returns (address) {\\n        if (block.timestamp >= delayVault) {\\n            return pendingVault;\\n        }\\n        return vault;\\n    }\\n\\n    function setVaultOnly(bool enabled) external onlyVault {\\n        _vaultOnly = enabled;\\n    }\\n\\n    function initVault(address _vault) external onlyVault {\\n        require(_init);\\n        vault = _vault;\\n        pendingVault = _vault;\\n        isMinter[_vault] = true;\\n        minters.push(_vault);\\n        delayVault = block.timestamp;\\n        _init = false;\\n    }\\n\\n    function setMinter(address _auth) external onlyVault {\\n        pendingMinter = _auth;\\n        delayMinter = block.timestamp + delay;\\n    }\\n\\n    function setVault(address _vault) external onlyVault {\\n        pendingVault = _vault;\\n        delayVault = block.timestamp + delay;\\n    }\\n\\n    function applyVault() external onlyVault {\\n        require(block.timestamp >= delayVault);\\n        vault = pendingVault;\\n    }\\n\\n    function applyMinter() external onlyVault {\\n        require(block.timestamp >= delayMinter);\\n        isMinter[pendingMinter] = true;\\n        minters.push(pendingMinter);\\n    }\\n\\n    // No time delay revoke minter emergency function\\n    function revokeMinter(address _auth) external onlyVault {\\n        isMinter[_auth] = false;\\n    }\\n\\n    function getAllMinters() external view returns (address[] memory) {\\n        return minters;\\n    }\\n\\n    function changeVault(address newVault) external onlyVault returns (bool) {\\n        require(newVault != address(0), \\\"AnyswapV3ERC20: address(0x0)\\\");\\n        pendingVault = newVault;\\n        delayVault = block.timestamp + delay;\\n        emit LogChangeVault(vault, pendingVault, delayVault);\\n        return true;\\n    }\\n\\n    function changeMPCOwner(address newVault) public onlyVault returns (bool) {\\n        require(newVault != address(0), \\\"AnyswapV3ERC20: address(0x0)\\\");\\n        pendingVault = newVault;\\n        delayVault = block.timestamp + delay;\\n        emit LogChangeMPCOwner(vault, pendingVault, delayVault);\\n        return true;\\n    }\\n\\n    function mint(address to, uint256 amount) external onlyAuth returns (bool) {\\n        _mint(to, amount);\\n        return true;\\n    }\\n\\n    function burn(address from, uint256 amount)\\n        external\\n        onlyAuth\\n        returns (bool)\\n    {\\n        require(from != address(0), \\\"AnyswapV3ERC20: address(0x0)\\\");\\n        _burn(from, amount);\\n        return true;\\n    }\\n\\n    function Swapin(\\n        bytes32 txhash,\\n        address account,\\n        uint256 amount\\n    ) public onlyAuth returns (bool) {\\n        _mint(account, amount);\\n        emit LogSwapin(txhash, account, amount);\\n        return true;\\n    }\\n\\n    function Swapout(uint256 amount, address bindaddr) public returns (bool) {\\n        require(!_vaultOnly, \\\"AnyswapV4ERC20: onlyAuth\\\");\\n        require(bindaddr != address(0), \\\"AnyswapV3ERC20: address(0x0)\\\");\\n        _burn(msg.sender, amount);\\n        emit LogSwapout(msg.sender, bindaddr, amount);\\n        return true;\\n    }\\n\\n    /// @dev Records current ERC2612 nonce for account. This value must be included whenever signature is generated for {permit}.\\n    /// Every successful call to {permit} increases account's nonce by one. This prevents signature from being used multiple times.\\n    mapping(address => uint256) public override nonces;\\n\\n    /// @dev Records number of AnyswapV3ERC20 token that account (second) will be allowed to spend on behalf of another account (first) through {transferFrom}.\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    event LogChangeVault(\\n        address indexed oldVault,\\n        address indexed newVault,\\n        uint256 indexed effectiveTime\\n    );\\n    event LogChangeMPCOwner(\\n        address indexed oldOwner,\\n        address indexed newOwner,\\n        uint256 indexed effectiveHeight\\n    );\\n    event LogSwapin(\\n        bytes32 indexed txhash,\\n        address indexed account,\\n        uint256 amount\\n    );\\n    event LogSwapout(\\n        address indexed account,\\n        address indexed bindaddr,\\n        uint256 amount\\n    );\\n    event LogAddAuth(address indexed auth, uint256 timestamp);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        address _underlying,\\n        address _vault\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        underlying = _underlying;\\n        if (_underlying != address(0x0)) {\\n            require(_decimals == IERC20(_underlying).decimals());\\n        }\\n\\n        // Use init to allow for CREATE2 accross all chains\\n        _init = true;\\n\\n        // Disable/Enable swapout for v1 tokens vs mint/burn for v3 tokens\\n        _vaultOnly = false;\\n\\n        vault = _vault;\\n        pendingVault = _vault;\\n        delayVault = block.timestamp;\\n\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /// @dev Returns the total supply of AnyswapV3ERC20 token as the ETH held in this contract.\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function depositWithPermit(\\n        address target,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        address to\\n    ) external returns (uint256) {\\n        IERC20(underlying).permit(\\n            target,\\n            address(this),\\n            value,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n        IERC20(underlying).safeTransferFrom(target, address(this), value);\\n        return _deposit(value, to);\\n    }\\n\\n    function depositWithTransferPermit(\\n        address target,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        address to\\n    ) external returns (uint256) {\\n        IERC20(underlying).transferWithPermit(\\n            target,\\n            address(this),\\n            value,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n        return _deposit(value, to);\\n    }\\n\\n    function deposit() external returns (uint256) {\\n        uint256 _amount = IERC20(underlying).balanceOf(msg.sender);\\n        IERC20(underlying).safeTransferFrom(msg.sender, address(this), _amount);\\n        return _deposit(_amount, msg.sender);\\n    }\\n\\n    function deposit(uint256 amount) external returns (uint256) {\\n        IERC20(underlying).safeTransferFrom(msg.sender, address(this), amount);\\n        return _deposit(amount, msg.sender);\\n    }\\n\\n    function deposit(uint256 amount, address to) external returns (uint256) {\\n        IERC20(underlying).safeTransferFrom(msg.sender, address(this), amount);\\n        return _deposit(amount, to);\\n    }\\n\\n    function depositVault(uint256 amount, address to)\\n        external\\n        onlyVault\\n        returns (uint256)\\n    {\\n        return _deposit(amount, to);\\n    }\\n\\n    function _deposit(uint256 amount, address to) internal returns (uint256) {\\n        require(underlying != address(0x0) && underlying != address(this));\\n        _mint(to, amount);\\n        return amount;\\n    }\\n\\n    function withdraw() external returns (uint256) {\\n        return _withdraw(msg.sender, balanceOf[msg.sender], msg.sender);\\n    }\\n\\n    function withdraw(uint256 amount) external returns (uint256) {\\n        return _withdraw(msg.sender, amount, msg.sender);\\n    }\\n\\n    function withdraw(uint256 amount, address to) external returns (uint256) {\\n        return _withdraw(msg.sender, amount, to);\\n    }\\n\\n    function withdrawVault(\\n        address from,\\n        uint256 amount,\\n        address to\\n    ) external onlyVault returns (uint256) {\\n        return _withdraw(from, amount, to);\\n    }\\n\\n    function _withdraw(\\n        address from,\\n        uint256 amount,\\n        address to\\n    ) internal returns (uint256) {\\n        _burn(from, amount);\\n        IERC20(underlying).safeTransfer(to, amount);\\n        return amount;\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply += amount;\\n        balanceOf[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        balanceOf[account] -= amount;\\n        _totalSupply -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /// @dev Sets `value` as allowance of `spender` account over caller account's AnyswapV3ERC20 token.\\n    /// Emits {Approval} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    function approve(address spender, uint256 value)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        // _approve(msg.sender, spender, value);\\n        allowance[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n    }\\n\\n    /// @dev Sets `value` as allowance of `spender` account over caller account's AnyswapV3ERC20 token,\\n    /// after which a call is executed to an ERC677-compliant contract with the `data` parameter.\\n    /// Emits {Approval} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// For more information on approveAndCall format, see https://github.com/ethereum/EIPs/issues/677.\\n    function approveAndCall(\\n        address spender,\\n        uint256 value,\\n        bytes calldata data\\n    ) external override returns (bool) {\\n        // _approve(msg.sender, spender, value);\\n        allowance[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n\\n        return\\n            IApprovalReceiver(spender).onTokenApproval(msg.sender, value, data);\\n    }\\n\\n    /// @dev Sets `value` as allowance of `spender` account over `owner` account's AnyswapV3ERC20 token, given `owner` account's signed approval.\\n    /// Emits {Approval} event.\\n    /// Requirements:\\n    ///   - `deadline` must be timestamp in future.\\n    ///   - `v`, `r` and `s` must be valid `secp256k1` signature from `owner` account over EIP712-formatted function arguments.\\n    ///   - the signature must use `owner` account's current nonce (see {nonces}).\\n    ///   - the signer cannot be zero address and must be `owner` account.\\n    /// For more information on signature format, see https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\\n    /// AnyswapV3ERC20 token implementation adapted from https://github.com/albertocuestacanada/ERC20Permit/blob/master/contracts/ERC20Permit.sol.\\n    function permit(\\n        address target,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(block.timestamp <= deadline, \\\"AnyswapV3ERC20: Expired permit\\\");\\n\\n        bytes32 hashStruct = keccak256(\\n            abi.encode(\\n                PERMIT_TYPEHASH,\\n                target,\\n                spender,\\n                value,\\n                nonces[target]++,\\n                deadline\\n            )\\n        );\\n\\n        require(\\n            verifyEIP712(target, hashStruct, v, r, s) ||\\n                verifyPersonalSign(target, hashStruct, v, r, s)\\n        );\\n\\n        // _approve(owner, spender, value);\\n        allowance[target][spender] = value;\\n        emit Approval(target, spender, value);\\n    }\\n\\n    function transferWithPermit(\\n        address target,\\n        address to,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override returns (bool) {\\n        require(block.timestamp <= deadline, \\\"AnyswapV3ERC20: Expired permit\\\");\\n\\n        bytes32 hashStruct = keccak256(\\n            abi.encode(\\n                TRANSFER_TYPEHASH,\\n                target,\\n                to,\\n                value,\\n                nonces[target]++,\\n                deadline\\n            )\\n        );\\n\\n        require(\\n            verifyEIP712(target, hashStruct, v, r, s) ||\\n                verifyPersonalSign(target, hashStruct, v, r, s)\\n        );\\n\\n        require(to != address(0) || to != address(this));\\n\\n        uint256 balance = balanceOf[target];\\n        require(\\n            balance >= value,\\n            \\\"AnyswapV3ERC20: transfer amount exceeds balance\\\"\\n        );\\n\\n        balanceOf[target] = balance - value;\\n        balanceOf[to] += value;\\n        emit Transfer(target, to, value);\\n\\n        return true;\\n    }\\n\\n    function verifyEIP712(\\n        address target,\\n        bytes32 hashStruct,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (bool) {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, hashStruct)\\n        );\\n        address signer = ecrecover(hash, v, r, s);\\n        return (signer != address(0) && signer == target);\\n    }\\n\\n    function verifyPersonalSign(\\n        address target,\\n        bytes32 hashStruct,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (bool) {\\n        bytes32 hash = prefixed(hashStruct);\\n        address signer = ecrecover(hash, v, r, s);\\n        return (signer != address(0) && signer == target);\\n    }\\n\\n    // Builds a prefixed hash to mimic the behavior of eth_sign.\\n    function prefixed(bytes32 hash) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    DOMAIN_SEPARATOR,\\n                    hash\\n                )\\n            );\\n    }\\n\\n    /// @dev Moves `value` AnyswapV3ERC20 token from caller's account to account (`to`).\\n    /// A transfer to `address(0)` triggers an ETH withdraw matching the sent AnyswapV3ERC20 token in favor of caller.\\n    /// Emits {Transfer} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` AnyswapV3ERC20 token.\\n    function transfer(address to, uint256 value)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        require(to != address(0) || to != address(this));\\n        uint256 balance = balanceOf[msg.sender];\\n        require(\\n            balance >= value,\\n            \\\"AnyswapV3ERC20: transfer amount exceeds balance\\\"\\n        );\\n\\n        balanceOf[msg.sender] = balance - value;\\n        balanceOf[to] += value;\\n        emit Transfer(msg.sender, to, value);\\n\\n        return true;\\n    }\\n\\n    /// @dev Moves `value` AnyswapV3ERC20 token from account (`from`) to account (`to`) using allowance mechanism.\\n    /// `value` is then deducted from caller account's allowance, unless set to `type(uint256).max`.\\n    /// A transfer to `address(0)` triggers an ETH withdraw matching the sent AnyswapV3ERC20 token in favor of caller.\\n    /// Emits {Approval} event to reflect reduced allowance `value` for caller account to spend from account (`from`),\\n    /// unless allowance is set to `type(uint256).max`\\n    /// Emits {Transfer} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Requirements:\\n    ///   - `from` account must have at least `value` balance of AnyswapV3ERC20 token.\\n    ///   - `from` account must have approved caller to spend at least `value` of AnyswapV3ERC20 token, unless `from` and caller are the same account.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external override returns (bool) {\\n        require(to != address(0) || to != address(this));\\n        if (from != msg.sender) {\\n            // _decreaseAllowance(from, msg.sender, value);\\n            uint256 allowed = allowance[from][msg.sender];\\n            if (allowed != type(uint256).max) {\\n                require(\\n                    allowed >= value,\\n                    \\\"AnyswapV3ERC20: request exceeds allowance\\\"\\n                );\\n                uint256 reduced = allowed - value;\\n                allowance[from][msg.sender] = reduced;\\n                emit Approval(from, msg.sender, reduced);\\n            }\\n        }\\n\\n        uint256 balance = balanceOf[from];\\n        require(\\n            balance >= value,\\n            \\\"AnyswapV3ERC20: transfer amount exceeds balance\\\"\\n        );\\n\\n        balanceOf[from] = balance - value;\\n        balanceOf[to] += value;\\n        emit Transfer(from, to, value);\\n\\n        return true;\\n    }\\n\\n    /// @dev Moves `value` AnyswapV3ERC20 token from caller's account to account (`to`),\\n    /// after which a call is executed to an ERC677-compliant contract with the `data` parameter.\\n    /// A transfer to `address(0)` triggers an ETH withdraw matching the sent AnyswapV3ERC20 token in favor of caller.\\n    /// Emits {Transfer} event.\\n    /// Returns boolean value indicating whether operation succeeded.\\n    /// Requirements:\\n    ///   - caller account must have at least `value` AnyswapV3ERC20 token.\\n    /// For more information on transferAndCall format, see https://github.com/ethereum/EIPs/issues/677.\\n    function transferAndCall(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external override returns (bool) {\\n        require(to != address(0) || to != address(this));\\n\\n        uint256 balance = balanceOf[msg.sender];\\n        require(\\n            balance >= value,\\n            \\\"AnyswapV3ERC20: transfer amount exceeds balance\\\"\\n        );\\n\\n        balanceOf[msg.sender] = balance - value;\\n        balanceOf[to] += value;\\n        emit Transfer(msg.sender, to, value);\\n\\n        return ITransferReceiver(to).onTokenTransfer(msg.sender, value, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NeuronToken.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport {AnyswapV5ERC20} from \\\"./lib/AnyswapV5ERC20.sol\\\";\\n\\n// SPDX-License-Identifier: ISC\\n\\ncontract NeuronToken is AnyswapV5ERC20 {\\n    constructor(address _governance) AnyswapV5ERC20(\\\"NeuronToken\\\", \\\"NEUR\\\", 18, address(0x0), _governance) {\\n        // governance will become admin who can add and revoke roles\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardsDistributionRecipient.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewardsDistributionRecipient {\\n    function notifyRewardAmount(uint256 reward) external;\\n    function getRewardToken() external view returns (IERC20);\\n}\"\r\n    },\r\n    \"contracts/lib/StableMath.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title   StableMath\\n * @author  Stability Labs Pty. Ltd.\\n *   A library providing safe mathematical operations to multiply and\\n *          divide with standardised precision.\\n * @dev     Derives from OpenZeppelin's SafeMath lib and uses generic system\\n *          wide variables for managing precision.\\n */\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n    uint256 private constant RATIO_SCALE = 1e8;\\n\\n    /**\\n     * @dev Provides an interface to the scaling unit\\n     * @return Scaling unit (1e18 or 1 * 10**18)\\n     */\\n    function getFullScale() internal pure returns (uint256) {\\n        return FULL_SCALE;\\n    }\\n\\n    /**\\n     * @dev Provides an interface to the ratio unit\\n     * @return Ratio scale unit (1e8 or 1 * 10**8)\\n     */\\n    function getRatioScale() internal pure returns (uint256) {\\n        return RATIO_SCALE;\\n    }\\n\\n    /**\\n     * @dev Scales a given integer to the power of the full scale.\\n     * @param x   Simple uint256 to scale\\n     * @return    Scaled value a to an exact number\\n     */\\n    function scaleInteger(uint256 x) internal pure returns (uint256) {\\n        return x.mul(FULL_SCALE);\\n    }\\n\\n    /***************************************\\n              PRECISE ARITHMETIC\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x     Left hand input to multiplication\\n     * @param y     Right hand input to multiplication\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x     Left hand input to multiplication\\n     * @param y     Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e38 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x     Left hand input to multiplication\\n     * @param y     Right hand input to multiplication\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x     Left hand input to division\\n     * @param y     Right hand input to division\\n     * @return      Result after multiplying the left operand by the scale, and\\n     *              executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n\\n    /***************************************\\n                  RATIO FUNCS\\n    ****************************************/\\n    function mulRatioTruncate(uint256 x, uint256 ratio)\\n        internal\\n        pure\\n        returns (uint256 c)\\n    {\\n        return mulTruncateScale(x, ratio, RATIO_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies and truncates a token ratio, rounding up the result\\n     *      i.e. How much mAsset is this bAsset worth?\\n     * @param x     Left hand input to multiplication (i.e Exact quantity)\\n     * @param ratio bAsset ratio\\n     * @return      Result after multiplying the two inputs and then dividing by the shared\\n     *              ratio scale, rounded up to the closest base unit.\\n     */\\n    function mulRatioTruncateCeil(uint256 x, uint256 ratio)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. How much mAsset should I burn for this bAsset (x)?\\n        // 1e18 * 1e8 = 1e26\\n        uint256 scaled = x.mul(ratio);\\n        // 1e26 + 9.99e7 = 100..00.999e8\\n        uint256 ceil = scaled.add(RATIO_SCALE.sub(1));\\n        // return 100..00.999e8 / 1e8 = 1e18\\n        return ceil.div(RATIO_SCALE);\\n    }\\n    function divRatioPrecisely(uint256 x, uint256 ratio)\\n        internal\\n        pure\\n        returns (uint256 c)\\n    {\\n        // e.g. 1e14 * 1e8 = 1e22\\n        uint256 y = x.mul(RATIO_SCALE);\\n        // return 1e22 / 1e12 = 1e10\\n        return y.div(ratio);\\n    }\\n\\n    /***************************************\\n                    HELPERS\\n    ****************************************/\\n\\n    /**\\n     * @dev Calculates minimum of two numbers\\n     * @param x     Left hand input\\n     * @param y     Right hand input\\n     * @return      Minimum of the two inputs\\n     */\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? y : x;\\n    }\\n\\n    /**\\n     * @dev Calculated maximum of two numbers\\n     * @param x     Left hand input\\n     * @param y     Right hand input\\n     * @return      Maximum of the two inputs\\n     */\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? x : y;\\n    }\\n\\n    /**\\n     * @dev Clamps a value to an upper bound\\n     * @param x           Left hand input\\n     * @param upperBound  Maximum possible value to return\\n     * @return            Input x clamped to a maximum value, upperBound\\n     */\\n    function clamp(uint256 x, uint256 upperBound)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return x > upperBound ? upperBound : x;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Root.sol\": {\r\n      \"content\": \"pragma solidity 0.8.2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary Root {\\n\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Returns the square root of a given number\\n     * @param x Input\\n     * @return y Square root of Input\\n     */\\n    function sqrt(uint x) internal pure returns (uint y) {\\n        uint z = (x.add(1)).div(2);\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x.div(z).add(z)).div(2);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/strategies/StrategySushiEthDaiLp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"./StrategySushiFarmBase.sol\\\";\\n\\ncontract StrategySushiEthDaiLp is StrategySushiFarmBase {\\n    // Token/ETH pool id in MasterChef contract\\n    uint256 public constant sushi_dai_poolId = 2;\\n    // Token addresses\\n    address public constant sushi_eth_dai_lp =\\n        0xC3D03e4F041Fd4cD388c549Ee2A29a9E5075882f;\\n    address public constant dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _neuronTokenAddress,\\n        address _timelock\\n    )\\n        StrategySushiFarmBase(\\n            dai,\\n            sushi_dai_poolId,\\n            sushi_eth_dai_lp,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _neuronTokenAddress,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external pure override returns (string memory) {\\n        return \\\"StrategySushiEthDaiLp\\\";\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_neuronToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_axon\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AXON\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NEURON\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gauges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isManualWeights\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"contract IMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isManualWeights\",\"type\":\"bool\"}],\"name\":\"setIsManualWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokensToVote\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"setWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenVote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usedWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenVote\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GaugesDistributor","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f594df6c166e3c09417dda3c2d81f48ff2094fd5000000000000000000000000ad447b514a6b365af81b7646bdc976ae36c1d2d100000000000000000000000044a2491c8b7fffce87e2c6e490fa1db290eb511f00000000000000000000000001578d5d038e48e5119c23a1a16b03fe9857ca2b000000000000000000000000616e9f458251b93597fa0e1c937d6dcd27036008","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}