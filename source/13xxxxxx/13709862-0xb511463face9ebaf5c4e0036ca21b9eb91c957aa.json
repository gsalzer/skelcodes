{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BrincStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ninterface IBrincGovToken is IERC20Upgradeable {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function mintToTreasury(uint256 _amount) external;\\n\\n    function getTreasuryOwner() external view returns (address);\\n}\\n\\ninterface IStakedBrincGovToken {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burnFrom(address _to, uint256 _amount) external;\\n}\\n\\n// BrincStaking is the contract in which the Brinc token can be staked to earn\\n// Brinc governance tokens as rewards.\\n//\\n// Note that it's ownable and the owner wields tremendous power. Staking will\\n// governable in the future with the Brinc Governance token.\\n\\ncontract BrincStaking is OwnableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeERC20Upgradeable for IBrincGovToken;\\n    // Stake mode\\n    enum StakeMode {MODE1, MODE2, MODE3, MODE4, MODE5, MODE6}\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 brcStakedAmount; // Amount of BRC tokens the user will stake.\\n        uint256 gBrcStakedAmount; // Amount of gBRC tokens the user will stake.\\n        uint256 blockNumber; // Stake block number.\\n        uint256 rewardDebt; // Receivable reward. See explanation below.\\n        StakeMode mode; // Stake mode\\n\\n        // We do some fancy math here. Basically, any point in time, the amount of govBrinc tokens\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.brcStakedAmount * accGovBrincPerShare) - user.rewardDebt\\n        //   rewardDebt = staked rewards for a user \\n\\n        // Whenever a user deposits or withdraws LP tokens to a pool. The following happens:\\n        //   1. The pool's `accGovBrincPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n    // Info of each pool.\\n    struct PoolInfo {\\n        uint256 supply; // Weighted balance of Brinc tokens in the pool\\n        uint256 lockBlockCount; // Lock block count\\n        uint256 weight; // Weight for the pool\\n        uint256 accGovBrincPerShare; // Accumulated govBrinc tokens per share, times 1e12. See below.\\n        bool brcOnly;\\n    }\\n\\n    // Last block number that govBrinc token distribution occurs.\\n    uint256 lastRewardBlock;\\n\\n    // The Brinc TOKEN!\\n    IERC20Upgradeable public brincToken;\\n    // The governance Brinc TOKEN!\\n    IBrincGovToken public govBrincToken;\\n    // The staked governance Brinc TOKEN!\\n    IStakedBrincGovToken public stakedGovBrincToken;\\n    // govBrinc tokens created per block.\\n    uint256 public govBrincPerBlock;\\n    // Info of each pool.\\n    mapping(StakeMode => PoolInfo) public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(address => UserInfo[]) public userInfo;\\n\\n    // ratioBrcToGov is the ratio of Brinc to govBrinc tokens needed to stake\\n    uint256 public ratioBrcToGov;\\n    // gBrcStakeAmount = brc * ratio / 1e10\\n\\n    // treasuryRewardBalance is the number of tokens awarded to the treasury address\\n    // this is implemented this way so that the treasury address will be responsible for paying for the minting of rewards.\\n    uint256 public treasuryRewardBalance;\\n\\n    // paused indicates whether staking is paused.\\n    // when paused, the staking pools will not update, nor will any gov tokens be minted.\\n    bool public paused;\\n    // pausedBlock is the block number that pause was started.\\n    // 0 if not paused.\\n    uint256 public pausedBlock;\\n\\n    event Deposit(address indexed user, uint256 amount, StakeMode mode);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n    event TreasuryMint(uint256 amount);\\n\\n    event LockBlockCountChanged(\\n        StakeMode mode,\\n        uint256 oldLockBlockCount,\\n        uint256 newLockBlockCount\\n    );\\n    event WeightChanged(\\n        StakeMode mode,\\n        uint256 oldWeight,\\n        uint256 newWeight\\n    );\\n    event GovBrincPerBlockChanged(\\n        uint256 oldGovBrincPerBlock,\\n        uint256 newGovBrincPerBlock\\n    );\\n    event RatioBrcToGovChanged(\\n        uint256 oldRatioBrcToGov, \\n        uint256 newRatioBrcToGov\\n    );\\n\\n    event Paused();\\n    event Resumed();\\n\\n    function initialize(\\n        IERC20Upgradeable _brincToken,\\n        IBrincGovToken _brincGovToken,\\n        IStakedBrincGovToken _stakedGovBrincToken,\\n        uint256 _govBrincPerBlock,\\n        uint256 _ratioBrcToGov\\n    ) initializer public {\\n        brincToken = _brincToken;\\n        govBrincToken = _brincGovToken;\\n        stakedGovBrincToken = _stakedGovBrincToken;\\n        govBrincPerBlock = _govBrincPerBlock;\\n        lastRewardBlock = block.number;\\n        ratioBrcToGov = _ratioBrcToGov;\\n        paused = false;\\n        pausedBlock = 0;\\n        poolInfo[StakeMode.MODE1] = PoolInfo({\\n            supply: 0,\\n            lockBlockCount: uint256(199384), // 30 days in block count. 1 block = 13 seconds\\n            weight: 10,\\n            accGovBrincPerShare: 0,\\n            // represents the reward amount for each brinc token in the pool\\n            brcOnly: true\\n        });\\n        poolInfo[StakeMode.MODE2] = PoolInfo({\\n            supply: 0,\\n            lockBlockCount: uint256(398769), // 60 days in block count. 1 block = 13 seconds\\n            weight: 15,\\n            accGovBrincPerShare: 0,\\n            brcOnly: true\\n        });\\n        poolInfo[StakeMode.MODE3] = PoolInfo({\\n            supply: 0,\\n            lockBlockCount: uint256(598153), // 90 days in block count. 1 block = 13 seconds\\n            weight: 25,\\n            accGovBrincPerShare: 0,\\n            brcOnly: true\\n        });\\n        poolInfo[StakeMode.MODE4] = PoolInfo({\\n            supply: 0,\\n            lockBlockCount: uint256(199384), // 30 days in block count. 1 block = 13 seconds\\n            weight: 80,\\n            accGovBrincPerShare: 0,\\n            brcOnly: false\\n        });\\n        poolInfo[StakeMode.MODE5] = PoolInfo({\\n            supply: 0,\\n            lockBlockCount: uint256(398769), // 60 days in block count. 1 block = 13 seconds\\n            weight: 140,\\n            accGovBrincPerShare: 0,\\n            brcOnly: false\\n        });\\n        poolInfo[StakeMode.MODE6] = PoolInfo({\\n            supply: 0,\\n            lockBlockCount: uint256(598153), // 90 days in block count. 1 block = 13 seconds\\n            weight: 256,\\n            accGovBrincPerShare: 0,\\n            brcOnly: false\\n        });\\n\\n        __Ownable_init();\\n    }\\n\\n    modifier isNotPaused {\\n     require(paused == false, \\\"paused: operations are paused by admin\\\");\\n     _;\\n   }\\n\\n   /**\\n     * @dev pause the staking contract\\n     * paused features:\\n     * - deposit\\n     * - withdraw\\n     * - updating pools\\n     */\\n    /// #if_succeeds {:msg \\\"pause: paused is true\\\"}\\n        /// paused == true;\\n    function pause() public onlyOwner {\\n        paused = true;\\n        pausedBlock = block.number;\\n        emit Paused();\\n    }\\n\\n    /**\\n     * @dev resume the staking contract\\n     * resumed features:\\n     * - deposit\\n     * - withdraw\\n     * - updating pools\\n     */\\n    /// #if_succeeds {:msg \\\"resume: paused is false\\\"}\\n        /// paused == false;\\n    function resume() public onlyOwner {\\n        paused = false;\\n        pausedBlock = 0;\\n        emit Resumed();\\n    }\\n\\n    /**\\n     * @dev if paused or not \\n     *\\n     * @return paused\\n     */\\n    /// #if_succeeds {:msg \\\"isPaused: returns paused\\\"}\\n        /// $result == paused;\\n    function isPaused() public view returns(bool) {\\n        return paused;\\n    }\\n\\n    /**\\n     * @dev block that pause was called.\\n     *\\n     * @return pausedBlock\\n     */\\n    /// #if_succeeds {:msg \\\"getPausedBlock: returns PausedBlock\\\"}\\n        /// $result == pausedBlock;\\n    function getPausedBlock() public view returns(uint256) {\\n        return pausedBlock;\\n    }\\n\\n    /**\\n     * @dev last reward block that has been recorded\\n     *\\n     * @return lastRewardBlock\\n     */\\n    /// #if_succeeds {:msg \\\"getLastRewardBlock: returns lastRewardBlock\\\"}\\n        /// $result == lastRewardBlock;\\n    function getLastRewardBlock() public view returns(uint256) {\\n        return lastRewardBlock;\\n    }\\n\\n    /**\\n     * @dev address of the Brinc token contract \\n     *\\n     * @return Brinc token address\\n     */\\n    /// #if_succeeds {:msg \\\"getBrincTokenAddress: returns Brinc Token address\\\"}\\n        /// $result == address(brincToken);\\n    function getBrincTokenAddress() public view returns(address) {\\n        return address(brincToken);\\n    }\\n\\n    /**\\n     * @dev address of the Brinc Governance token contract \\n     *\\n     * @return Brinc Gov token address\\n     */\\n    /// #if_succeeds {:msg \\\"getGovTokenAddress: returns Brinc Gov token address\\\"}\\n        /// $result == address(govBrincToken);\\n    function getGovTokenAddress() public view returns(address) {\\n        return address(govBrincToken);\\n    }\\n\\n    /**\\n     * @dev the number of Gov tokens that can be issued per block\\n     *\\n     * @return Brinc Gov reward tokens per block\\n     */\\n    /// #if_succeeds {:msg \\\"getGovBrincPerBlock: returns Brinc Gov reward tokens per block\\\"}\\n        /// $result == govBrincPerBlock;\\n    function getGovBrincPerBlock() public view returns(uint256) {\\n        return govBrincPerBlock;\\n    }\\n\\n    /**\\n     * @dev The ratio of BRC to gBRC tokens \\n     * The ratio dictates the amount of tokens of BRC and gBRC required for staking\\n     *\\n     * @return BRC to gBRC ratio required for staking\\n     */\\n    /// #if_succeeds {:msg \\\"getRatioBtoG: returns BRC to gBRC ratio required for staking\\\"}\\n        /// $result == ratioBrcToGov;\\n    function getRatioBtoG() public view returns(uint256) {\\n        return ratioBrcToGov;\\n    }\\n\\n    /**\\n     * @dev get specified pool supply\\n     *\\n     * @return pool's supply\\n     */\\n    /// #if_succeeds {:msg \\\"getPoolSupply: returns pool's supply\\\"}\\n        /// $result == poolInfo[_mode].supply;\\n    function getPoolSupply(StakeMode _mode) public view returns(uint256) {\\n        return poolInfo[_mode].supply;\\n    }\\n\\n    /**\\n     * @dev get specified pool lockBlockCount\\n     *\\n     * @return pool's lockBlockCount\\n     */\\n    /// #if_succeeds {:msg \\\"getPoolLockBlockCount: returns pool's lockBlockCount\\\"}\\n        /// $result == poolInfo[_mode].lockBlockCount;\\n    function getPoolLockBlockCount(StakeMode _mode) public view returns(uint256) {\\n        return poolInfo[_mode].lockBlockCount;\\n    }\\n    \\n    /**\\n     * @dev get specified pool weight\\n     *\\n     * @return pool's weight\\n     */\\n    /// #if_succeeds {:msg \\\"getPoolWeight: returns pool's weight\\\"}\\n        /// $result == poolInfo[_mode].weight;\\n    function getPoolWeight(StakeMode _mode) public view returns(uint256) {\\n        return poolInfo[_mode].weight;\\n    }\\n\\n    /**\\n     * @dev get specified pool accGovBrincPerShare\\n     *\\n     * @return pool's accGovBrincPerShare\\n     */\\n    /// #if_succeeds {:msg \\\"getPoolAccGovBrincPerShare: returns pool's accGovBrincPerShare\\\"}\\n        /// $result == poolInfo[_mode].accGovBrincPerShare;\\n    function getPoolAccGovBrincPerShare(StakeMode _mode) public view returns(uint256) {\\n        return poolInfo[_mode].accGovBrincPerShare;\\n    }\\n\\n    /**\\n     * @dev get specified user information with correlating index\\n     * _address will be required to have an active staking deposit.\\n     * \\n     * @return UserInfo\\n     */\\n    function getUserInfo(address _address, uint256 _index) public view returns(UserInfo memory) {\\n        require(userInfo[_address].length > 0, \\\"getUserInfo: user has not made any stakes\\\");\\n        return userInfo[_address][_index];\\n    }\\n\\n    /**\\n     * @dev gets the number of stakes the user has made.\\n     * \\n     * @return UserStakeCount\\n     */\\n    /// #if_succeeds {:msg \\\"getStakeCount: returns user's active stakes\\\"}\\n        /// $result == userInfo[_msgSender()].length;\\n    function getStakeCount() public view returns (uint256) {\\n        return userInfo[_msgSender()].length;\\n    }\\n\\n    /**\\n     * @dev gets the total supply of all the rewards that .\\n     * totalSupply = ( poolSupply1 * poolWeight1 ) + ( poolSupply2 * poolWeight2 ) + ( poolSupply3 * poolWeight3 )\\n     *\\n     * @return total supply of all pools\\n     */\\n    /*\\n    // there is an error: `throw e;`\\n    // seems to be an issue with the scribble compiler\\n    /// #if_succeeds {:msg \\\"getTotalSupplyOfAllPools: returns total supply of all pool tokens\\\"}\\n        /// let pool1 := poolInfo[StakeMode.MODE1].supply.mul(poolInfo[StakeMode.MODE1].weight) in\\n        /// let pool2 := poolInfo[StakeMode.MODE2].supply.mul(poolInfo[StakeMode.MODE2].weight) in\\n        /// let pool3 := poolInfo[StakeMode.MODE3].supply.mul(poolInfo[StakeMode.MODE3].weight) in\\n        /// let pool4 := poolInfo[StakeMode.MODE4].supply.mul(poolInfo[StakeMode.MODE4].weight) in\\n        /// let pool5 := poolInfo[StakeMode.MODE5].supply.mul(poolInfo[StakeMode.MODE5].weight) in\\n        /// let pool6 := poolInfo[StakeMode.MODE6].supply.mul(poolInfo[StakeMode.MODE6].weight) in\\n        /// $result == pool1.add(pool2).add(pool3).add(pool4).add(pool5).add(pool6);\\n    */\\n    function getTotalSupplyOfAllPools() private view returns (uint256) {\\n        uint256 totalSupply;\\n\\n        totalSupply = totalSupply.add(\\n            poolInfo[StakeMode.MODE1].supply.mul(poolInfo[StakeMode.MODE1].weight)\\n        )\\n        .add(\\n            poolInfo[StakeMode.MODE2].supply.mul(poolInfo[StakeMode.MODE2].weight)\\n        )\\n        .add(\\n            poolInfo[StakeMode.MODE3].supply.mul(poolInfo[StakeMode.MODE3].weight)\\n        )\\n        .add(\\n            poolInfo[StakeMode.MODE4].supply.mul(poolInfo[StakeMode.MODE4].weight)\\n        )\\n        .add(\\n            poolInfo[StakeMode.MODE5].supply.mul(poolInfo[StakeMode.MODE5].weight)\\n        )\\n        .add(\\n            poolInfo[StakeMode.MODE6].supply.mul(poolInfo[StakeMode.MODE6].weight)\\n        );\\n\\n        return totalSupply;\\n    }\\n\\n    /**\\n     * @dev gets the pending rewards of a user.]\\n     * View function to see pending govBrinc on frontend.\\n     *\\n     * formula:\\n     * reward = multiplier * govBrincPerBlock * pool.supply * pool.weight / totalSupply\\n     *\\n     * @return pending reward of a user\\n     */\\n\\n    /// #if_succeeds {:msg \\\"pendingRewards: the pending rewards of a given user should be correct - case: maturity has not passed\\\"}\\n        /// let pendingReward, complete := $result in\\n        /// userInfo[_user][_id].blockNumber > block.number ==> \\n        /// pendingReward == 0 && complete == false;\\n    /// #if_succeeds {:msg \\\"pendingRewards: the pending rewards of a given user should be correct - case: maturity has passed with no pending rewards\\\"}\\n        /// let accGovBrincPerShare := old(poolInfo[userInfo[_user][_id].mode].accGovBrincPerShare) in\\n        /// let totalSupply := old(getTotalSupplyOfAllPools()) in\\n        /// let multiplier := old(block.number.sub(lastRewardBlock)) in\\n        /// let govBrincReward := multiplier.mul(govBrincPerBlock).mul(poolInfo[userInfo[_user][_id].mode].supply).mul(poolInfo[userInfo[_user][_id].mode].weight).div(totalSupply) in\\n        /// let scaled := govBrincReward.mul(1e12).div(poolInfo[userInfo[_user][_id].mode].supply) in\\n        /// let updatedAccGovBrincPerShare := accGovBrincPerShare.add(scaled) in\\n        /// let pendingReward, complete := $result in\\n        /// (block.number > lastRewardBlock) && (poolInfo[userInfo[_user][_id].mode].supply != 0) ==> pendingReward == userInfo[_user][_id].brcStakedAmount.mul(updatedAccGovBrincPerShare).div(1e12).sub(userInfo[_user][_id].rewardDebt) && complete == true;\\n    /// #if_succeeds {:msg \\\"pendingRewards: the pending rewards of a given user should be correct - case: maturity has passed with pending rewards\\\"}\\n        /// let accGovBrincPerShare := poolInfo[userInfo[_user][_id].mode].accGovBrincPerShare in\\n        /// let pendingReward, complete := $result in\\n        /// (userInfo[_user][_id].blockNumber <= block.number) || (poolInfo[userInfo[_user][_id].mode].supply == 0) ==> pendingReward == userInfo[_user][_id].brcStakedAmount.mul(accGovBrincPerShare).div(1e12).sub(userInfo[_user][_id].rewardDebt) && complete == true;\\n    function pendingRewards(address _user, uint256 _id) public view returns (uint256, bool) {\\n        require(_id < userInfo[_user].length, \\\"pendingRewards: invalid stake id\\\");\\n\\n        UserInfo storage user = userInfo[_user][_id];\\n\\n        bool withdrawable; // false\\n\\n        // only withdrawable after the user's stake has passed maturity\\n        if (block.number >= user.blockNumber) {\\n            withdrawable = true;\\n        }\\n\\n        PoolInfo storage pool = poolInfo[user.mode];\\n        uint256 accGovBrincPerShare = pool.accGovBrincPerShare;\\n        uint256 totalSupply = getTotalSupplyOfAllPools();\\n        if (block.number > lastRewardBlock && pool.supply != 0) {\\n            uint256 multiplier;\\n            if (paused) {\\n                multiplier = pausedBlock.sub(lastRewardBlock);\\n            } else {\\n                multiplier = block.number.sub(lastRewardBlock);\\n            }\\n            \\n            uint256 govBrincReward =\\n                multiplier\\n                    .mul(govBrincPerBlock)\\n                    .mul(pool.supply) // supply is the number of staked Brinc tokens\\n                    .mul(pool.weight)\\n                    .div(totalSupply);\\n            accGovBrincPerShare = accGovBrincPerShare.add(\\n                govBrincReward.mul(1e12).div(pool.supply)\\n            );\\n        }\\n        return\\n            (user.brcStakedAmount.mul(accGovBrincPerShare).div(1e12).sub(user.rewardDebt), withdrawable);\\n    }\\n\\n    function totalRewards(address _user) external view returns (uint256) {\\n        UserInfo[] storage stakes = userInfo[_user];\\n        uint256 total;\\n        for (uint256 i = 0; i < stakes.length; i++) {\\n            (uint256 reward, bool withdrawable) = pendingRewards(_user, i);\\n            if (withdrawable) {\\n                total = total.add(reward);\\n            }\\n        }\\n        return total;\\n    }\\n\\n    /**\\n     * @dev updates the lockBlockCount required for stakers to lock up their stakes for. \\n     * This will be taken as seconds but will be converted to blocks by multiplying by the average block time.\\n     * This can only be called by the owner of the contract.\\n     * \\n     * lock up blocks = lock up time * 13 [avg. block time]\\n     *\\n     * @param _updatedLockBlockCount new lock up time\\n     */\\n    /// #if_succeeds {:msg \\\"updateLockBlockCount: the sender must be Owner\\\"}\\n        /// old(msg.sender == this.owner());\\n    /// #if_succeeds {:msg \\\"updateLockBlockCount: sets lockBlockCount correctly\\\"}\\n        /// poolInfo[_mode].lockBlockCount == _updatedLockBlockCount;\\n    function updateLockBlockCount(StakeMode _mode, uint256 _updatedLockBlockCount) public onlyOwner {\\n        PoolInfo storage pool = poolInfo[_mode];\\n        uint256 oldLockBlockCount = pool.lockBlockCount;\\n        pool.lockBlockCount = _updatedLockBlockCount;\\n        emit LockBlockCountChanged(_mode, oldLockBlockCount, _updatedLockBlockCount);\\n    }\\n\\n    /**\\n     * @dev updates the weight of a specified pool. The mode specified will map to the period \\n     *\\n     * @param _mode period of the pool you wish to update\\n     * @param _weight new weight\\n     */\\n    /// #if_succeeds {:msg \\\"updateWeight: the sender must be Owner\\\"}\\n        /// old(msg.sender == this.owner());\\n    /// #if_succeeds {:msg \\\"updateWeight: sets weight correctly\\\"}\\n        /// poolInfo[_mode].weight == _weight;\\n    function updateWeight(StakeMode _mode, uint256 _weight) public onlyOwner {\\n        massUpdatePools();\\n        PoolInfo storage pool = poolInfo[_mode];\\n        uint256 oldWeight = pool.weight;\\n        pool.weight = _weight;\\n        emit WeightChanged(_mode, oldWeight, _weight);\\n    }\\n\\n    /**\\n     * @dev updates the govBrincPerBlock reward amount that will be issued to the stakers. This can only be called by the owner of the contract.\\n     *\\n     * @param _updatedGovBrincPerBlock new reward amount\\n     */\\n    /// #if_succeeds {:msg \\\"updateGovBrincPerBlock: the sender must be Owner\\\"}\\n        /// old(msg.sender == this.owner());\\n    /// #if_succeeds {:msg \\\"updateGovBrincPerBlock: sets govBrincPerBlock correctly\\\"}\\n        /// govBrincPerBlock == _updatedGovBrincPerBlock;\\n    function updateGovBrincPerBlock(uint256 _updatedGovBrincPerBlock) public onlyOwner {\\n        massUpdatePools();\\n        uint256 oldGovBrincPerBlock = govBrincPerBlock;\\n        govBrincPerBlock = _updatedGovBrincPerBlock;\\n        emit GovBrincPerBlockChanged(oldGovBrincPerBlock, govBrincPerBlock);\\n    }\\n\\n    /**\\n     * @dev updates the ratio of BRC to gBRC tokens required for staking.\\n     *\\n     * @param _updatedRatioBrcToGov new ratio of BRC to gBRC for staking\\n     */\\n    /// #if_succeeds {:msg \\\"updateRatioBrcToGov: the sender must be Owner\\\"}\\n        /// old(msg.sender == this.owner());\\n    /// #if_succeeds {:msg \\\"updateRatioBrcToGov: sets ratioBrcToGov correctly\\\"}\\n        /// ratioBrcToGov == _updatedRatioBrcToGov;\\n    function updateRatioBrcToGov(uint256 _updatedRatioBrcToGov) public onlyOwner {\\n        uint256 oldRatioBrcToGov = ratioBrcToGov;\\n        ratioBrcToGov = _updatedRatioBrcToGov;\\n        emit RatioBrcToGovChanged(oldRatioBrcToGov, ratioBrcToGov);\\n    }\\n\\n    /**\\n     * @dev staking owner will call to mint treasury tokens\\n     * implemented this way so that users will not have to pay for the minting of the treasury tokens\\n     * when pools are updated\\n     * the `treasuryBalance` variable is used to keep track of the total number of tokens that the\\n     * the treasury address will be able to mint at any given time.\\n     */\\n    /// #if_succeeds {:msg \\\"treasuryMint: the sender must be Owner\\\"}\\n        /// old(msg.sender == this.owner());\\n    function treasuryMint() public onlyOwner {\\n        require(treasuryRewardBalance > 0, \\\"treasuryMint: not enough balance to mint\\\");\\n        uint256 balanceToMint;\\n        balanceToMint = treasuryRewardBalance;\\n        treasuryRewardBalance = 0;\\n        govBrincToken.mintToTreasury(balanceToMint);\\n        emit TreasuryMint(balanceToMint);\\n    }\\n\\n    /**\\n     * @dev updates all pool information.\\n     *\\n     * Note Update reward vairables for all pools. Be careful of gas spending!\\n     */\\n    /// #if_succeeds {:msg \\\"massUpdatePools: case totalSupply == 0\\\"}\\n        /// let multiplier := block.number - lastRewardBlock in\\n        /// let unusedReward := multiplier.mul(govBrincPerBlock) in\\n        /// getTotalSupplyOfAllPools() > 0 ==> treasuryRewardBalance == old(treasuryRewardBalance) + unusedReward;\\n    /// #if_succeeds {:msg \\\"massUpdatePools: updates lastRewardBlock\\\"}\\n        /// lastRewardBlock == block.number;\\n    function massUpdatePools() internal isNotPaused {\\n        uint256 totalSupply = getTotalSupplyOfAllPools();\\n        if (totalSupply == 0) {\\n            if (block.number > lastRewardBlock) {\\n                uint256 multiplier = block.number.sub(lastRewardBlock);\\n                uint256 unusedReward = multiplier.mul(govBrincPerBlock);\\n                treasuryRewardBalance = treasuryRewardBalance.add(unusedReward);\\n            }\\n        } else {\\n            updatePool(StakeMode.MODE1);\\n            updatePool(StakeMode.MODE2);\\n            updatePool(StakeMode.MODE3);\\n            updatePool(StakeMode.MODE4);\\n            updatePool(StakeMode.MODE5);\\n            updatePool(StakeMode.MODE6);\\n        }\\n        lastRewardBlock = block.number;\\n    }\\n\\n    /**\\n     * @dev update a given pool. This should be done every time a deposit or withdraw is made. \\n     *\\n     * Note Update reward variables of the given pool to be up-to-date.\\n     */\\n    /// #if_succeeds {:msg \\\"updatePool: updates pool's information and mint's reward\\\"}\\n        /// let totalSupply := getTotalSupplyOfAllPools() in\\n        /// let multiplier := block.number.sub(lastRewardBlock) in\\n        /// let govBrincReward := multiplier.mul(govBrincPerBlock).mul(poolInfo[mode].supply).mul(poolInfo[mode].weight).div(totalSupply) in\\n        /// (block.number > lastRewardBlock) && (poolInfo[mode].supply != 0) ==> \\n        /// govBrincToken.balanceOf(address(this)) == govBrincReward && poolInfo[mode].accGovBrincPerShare == poolInfo[mode].accGovBrincPerShare.add(govBrincReward.mul(1e12).div(poolInfo[mode].supply));\\n    function updatePool(StakeMode mode) internal isNotPaused {\\n        PoolInfo storage pool = poolInfo[mode];\\n        if (block.number <= lastRewardBlock) {\\n            return;\\n        }\\n        if (pool.supply == 0) {\\n            return;\\n        }\\n        uint256 totalSupply = getTotalSupplyOfAllPools();\\n        uint256 multiplier = block.number.sub(lastRewardBlock);\\n        uint256 govBrincReward =\\n            multiplier\\n                .mul(govBrincPerBlock)\\n                .mul(pool.supply)\\n                .mul(pool.weight)\\n                .div(totalSupply);\\n        govBrincToken.mint(address(this), govBrincReward);\\n        pool.accGovBrincPerShare = pool.accGovBrincPerShare.add(\\n            govBrincReward.mul(1e12).div(pool.supply)\\n        );\\n    }\\n\\n    /**\\n     * @dev a user deposits some Brinc token for a given period. The period will be determined based on the pools.\\n     * Every time a user deposits any stake, the pool will be updated.\\n     * The user will only be allowed to deposit Brinc tokens to stake if they deposit the equivalent amount in governance tokens.\\n     *\\n     * Note Deposit Brinc tokens to BrincStaking for govBrinc token allocation.\\n     */\\n    /// #if_succeeds {:msg \\\"deposit: deposit Brinc token amount is correct\\\"}\\n        /// poolInfo[_mode].brcOnly == true ==> brincToken.balanceOf(address(this)) == _amount && govBrincToken.balanceOf(address(this)) == old(govBrincToken.balanceOf(address(this)));\\n    /// #if_succeeds {:msg \\\"deposit: deposit Brinc Gov token amount is correct\\\"}\\n        /// poolInfo[_mode].brcOnly == false ==> brincToken.balanceOf(address(this)) == _amount && govBrincToken.balanceOf(address(this)) == _amount.mul(ratioBrcToGov).div(1e10);\\n    /// #if_succeeds {:msg \\\"deposit: successful deposit should update user information correctly\\\"}\\n        /// let depositNumber := getStakeCount().sub(1) in\\n        /// depositNumber > 0 ==>\\n        /// userInfo[msg.sender][depositNumber].brcStakedAmount == _amount && userInfo[msg.sender][depositNumber].blockNumber == block.number.add(poolInfo[_mode].lockBlockCount) && userInfo[msg.sender][depositNumber].rewardDebt == userInfo[msg.sender][depositNumber].brcStakedAmount.mul(poolInfo[_mode].accGovBrincPerShare).div(1e12) && userInfo[msg.sender][depositNumber].mode == _mode;\\n    /// #if_succeeds {:msg \\\"deposit: pool supply is updated correctly\\\"}\\n        /// let depositNumber := getStakeCount().sub(1) in\\n        /// depositNumber > 0 ==>\\n        /// poolInfo[_mode].supply == old(poolInfo[_mode].supply) + userInfo[msg.sender][depositNumber].brcStakedAmount;\\n    /// #if_succeeds {:msg \\\"deposit: userInfo array should increment by one\\\"}\\n        /// userInfo[msg.sender].length == old(userInfo[msg.sender].length) + 1;\\n    function deposit(uint256 _amount, StakeMode _mode) public {\\n        require(_amount > 0, \\\"deposit: invalid amount\\\");\\n        UserInfo memory user;\\n        massUpdatePools();\\n        PoolInfo storage pool = poolInfo[_mode];\\n        brincToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        user.brcStakedAmount = _amount;\\n        if (!pool.brcOnly) {\\n            govBrincToken.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _amount.mul(ratioBrcToGov).div(1e10)\\n            );\\n            user.gBrcStakedAmount = _amount.mul(ratioBrcToGov).div(1e10);\\n            stakedGovBrincToken.mint(msg.sender, user.gBrcStakedAmount);\\n        }\\n        user.blockNumber = block.number.add(pool.lockBlockCount);\\n        user.rewardDebt = user.brcStakedAmount.mul(pool.accGovBrincPerShare).div(1e12);\\n        user.mode = _mode;\\n\\n        pool.supply = pool.supply.add(user.brcStakedAmount);\\n        emit Deposit(msg.sender, _amount, _mode);\\n\\n        userInfo[msg.sender].push(user);\\n    }\\n\\n    /**\\n     * @dev a user withdraws their Brinc token that they have staked, including their rewards.\\n     * Every time a user withdraws their stake, the pool will be updated.\\n     *\\n     * Note Withdraw Brinc tokens from BrincStaking.\\n     */\\n    /// #if_succeeds {:msg \\\"withdraw: token deducted from staking contract correctly\\\"}\\n        /// let depositNumber := getStakeCount().sub(1) in\\n        /// let _amount := userInfo[msg.sender][depositNumber].brcStakedAmount in\\n        /// depositNumber > 0 ==>\\n        /// old(brincToken.balanceOf(address(this))) == brincToken.balanceOf(address(this)) - _amount;\\n    /// #if_succeeds {:msg \\\"withdraw: user's withdrawn Brinc token amount is correct\\\"}\\n        /// let depositNumber := getStakeCount().sub(1) in\\n        /// let _amount := userInfo[msg.sender][depositNumber].brcStakedAmount in\\n        /// depositNumber > 0 ==>\\n        /// brincToken.balanceOf(msg.sender) == old(brincToken.balanceOf(msg.sender)) + _amount;\\n    /// #if_succeeds {:msg \\\"withdraw: user's withdrawn Brinc Gov reward amount is correct\\\"}\\n        /// let reward, complete := old(pendingRewards(msg.sender, userInfo[msg.sender].length - 1)) in\\n        /// govBrincToken.balanceOf(msg.sender) == reward && complete == true;\\n    /// #if_succeeds {:msg \\\"withdraw: user information is updated correctly\\\"}\\n        /// let depositNumber := getStakeCount().sub(1) in\\n        /// let _amount := userInfo[msg.sender][depositNumber].brcStakedAmount in\\n        /// depositNumber > 0 ==>\\n        /// userInfo[msg.sender][depositNumber].rewardDebt == userInfo[msg.sender][depositNumber].brcStakedAmount.mul(poolInfo[userInfo[msg.sender][depositNumber].mode].accGovBrincPerShare).div(1e12) && userInfo[msg.sender][depositNumber].mode == userInfo[msg.sender][depositNumber].mode;\\n    /// #if_succeeds {:msg \\\"withdraw: pool supply is updated correctly\\\"}\\n        /// let depositNumber := getStakeCount().sub(1) in\\n        /// depositNumber > 0 ==>\\n        /// poolInfo[userInfo[msg.sender][depositNumber].mode].supply == old(poolInfo[userInfo[msg.sender][depositNumber].mode].supply).sub(userInfo[msg.sender][depositNumber].brcStakedAmount);\\n    function withdraw(uint256 _id) public {\\n        require(_id < userInfo[msg.sender].length, \\\"withdraw: invalid stake id\\\");\\n\\n        UserInfo memory user = userInfo[msg.sender][_id];\\n        require(user.brcStakedAmount > 0, \\\"withdraw: nothing to withdraw\\\");\\n        require(user.blockNumber <= block.number, \\\"withdraw: stake is still locked\\\");\\n        massUpdatePools();\\n        PoolInfo storage pool = poolInfo[user.mode];\\n        uint256 pending =\\n            user.brcStakedAmount.mul(pool.accGovBrincPerShare).div(1e12).sub(user.rewardDebt);\\n        safeGovBrincTransfer(msg.sender, pending + user.gBrcStakedAmount);\\n        stakedGovBrincToken.burnFrom(msg.sender, user.gBrcStakedAmount);\\n        uint256 _amount = user.brcStakedAmount;\\n        brincToken.safeTransfer(msg.sender, _amount);\\n        pool.supply = pool.supply.sub(_amount);\\n        emit Withdraw(msg.sender, _amount);\\n\\n        _removeStake(msg.sender, _id);\\n    }\\n\\n    /**\\n     * @dev a user withdraws their Brinc token that they have staked, without caring their rewards.\\n     * Only pool's supply will be updated.\\n     *\\n     * Note EmergencyWithdraw Brinc tokens from BrincStaking.\\n     */\\n    function emergencyWithdraw(uint256 _id) public {\\n        require(_id < userInfo[msg.sender].length, \\\"emergencyWithdraw: invalid stake id\\\");\\n\\n        UserInfo storage user = userInfo[msg.sender][_id];\\n        require(user.brcStakedAmount > 0, \\\"emergencyWithdraw: nothing to withdraw\\\");\\n        PoolInfo storage pool = poolInfo[user.mode];\\n        safeGovBrincTransfer(msg.sender, user.gBrcStakedAmount);\\n        stakedGovBrincToken.burnFrom(msg.sender, user.gBrcStakedAmount);\\n        delete user.gBrcStakedAmount;\\n        uint256 _amount = user.brcStakedAmount;\\n        delete user.brcStakedAmount;\\n        brincToken.safeTransfer(msg.sender, _amount);\\n        pool.supply = pool.supply.sub(_amount);\\n        emit EmergencyWithdraw(msg.sender, _amount);\\n\\n        _removeStake(msg.sender, _id);\\n    }\\n\\n    function _removeStake(address _user, uint256 _id) internal {\\n        userInfo[_user][_id] = userInfo[_user][userInfo[_user].length - 1];\\n        userInfo[_user].pop();\\n    }\\n\\n    /**\\n     * @dev the safe transfer of the governance token rewards to the designated adress with the specified reward. \\n     * Safe govBrinc transfer function, just in case if rounding error causes pool to not have enough govBrinc tokens.\\n     *\\n     * @param _to address to send Brinc Gov token rewards to\\n     * @param _amount amount of Brinc Gov token rewards to send\\n     *\\n     * Note this will be only used internally inside the contract.\\n     */\\n    /// #if_succeeds {:msg \\\"safeGovBrincTransfer: transfer of Brinc Gov token is correct - case _amount > govBrincBal\\\"}\\n        /// let initGovBrincBal := old(govBrincToken.balanceOf(_to)) in\\n        /// let govBrincBal := old(govBrincToken.balanceOf(address(this))) in\\n        /// _amount > govBrincBal ==> govBrincToken.balanceOf(_to) == initGovBrincBal + govBrincBal;\\n    /// #if_succeeds {:msg \\\"safeGovBrincTransfer: transfer of Brinc Gov token is correct - case _amount < govBrincBal\\\"}\\n        /// let initGovBrincBal := old(govBrincToken.balanceOf(_to)) in\\n        /// let govBrincBal := old(govBrincToken.balanceOf(address(this))) in\\n        /// _amount <= govBrincBal ==> govBrincToken.balanceOf(_to) == initGovBrincBal + _amount;\\n    function safeGovBrincTransfer(address _to, uint256 _amount) internal {\\n        uint256 govBrincBal = govBrincToken.balanceOf(address(this));\\n        if (_amount > govBrincBal) {\\n            govBrincToken.transfer(_to, govBrincBal);\\n        } else {\\n            govBrincToken.transfer(_to, _amount);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldGovBrincPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGovBrincPerBlock\",\"type\":\"uint256\"}],\"name\":\"GovBrincPerBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLockBlockCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLockBlockCount\",\"type\":\"uint256\"}],\"name\":\"LockBlockCountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRatioBrcToGov\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRatioBrcToGov\",\"type\":\"uint256\"}],\"name\":\"RatioBrcToGovChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Resumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TreasuryMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWeight\",\"type\":\"uint256\"}],\"name\":\"WeightChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"brincToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBrincTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovBrincPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPausedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"getPoolAccGovBrincPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"getPoolLockBlockCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"getPoolSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"getPoolWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatioBtoG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"brcStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gBrcStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"internalType\":\"struct BrincStaking.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govBrincPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govBrincToken\",\"outputs\":[{\"internalType\":\"contract IBrincGovToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_brincToken\",\"type\":\"address\"},{\"internalType\":\"contract IBrincGovToken\",\"name\":\"_brincGovToken\",\"type\":\"address\"},{\"internalType\":\"contract IStakedBrincGovToken\",\"name\":\"_stakedGovBrincToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_govBrincPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratioBrcToGov\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockBlockCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accGovBrincPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"brcOnly\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioBrcToGov\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedGovBrincToken\",\"outputs\":[{\"internalType\":\"contract IStakedBrincGovToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updatedGovBrincPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateGovBrincPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"_mode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_updatedLockBlockCount\",\"type\":\"uint256\"}],\"name\":\"updateLockBlockCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updatedRatioBrcToGov\",\"type\":\"uint256\"}],\"name\":\"updateRatioBrcToGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"_mode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"updateWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"brcStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gBrcStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"enum BrincStaking.StakeMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BrincStaking","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}