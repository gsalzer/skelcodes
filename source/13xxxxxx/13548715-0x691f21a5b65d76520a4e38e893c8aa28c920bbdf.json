{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Gate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./interfaces/IGate.sol\\\";\\n\\n/**\\n * @title Gate contract between Boson router and ERC1155NonTransferable\\n * Enables conditional commit\\n */\\n\\ncontract Gate is IGate, Ownable, Pausable {\\n    mapping(uint256 => uint256) private voucherToToken;\\n    mapping(address => mapping(uint256 => bool)) private isDeactivated; // mapping user => voucherSet => bool\\n\\n    IERC1155 private nonTransferableTokenContract;\\n    address private bosonRouterAddress;\\n  \\n    /**\\n     * @notice Construct and initialze the contract. Inizializes associated contract address. \\n     * @param _bosonRouterAddress address of the associated BosonRouter contract instance\\n     */\\n    constructor(address _bosonRouterAddress, address _nonTransferableTokenContractAddress)\\n    notZeroAddress(_nonTransferableTokenContractAddress) notZeroAddress(_bosonRouterAddress) {\\n          bosonRouterAddress = _bosonRouterAddress;\\n        nonTransferableTokenContract = IERC1155(_nonTransferableTokenContractAddress\\n                );\\n\\n        emit LogBosonRouterSet(_bosonRouterAddress, owner());\\n        emit LogNonTransferableContractSet(_nonTransferableTokenContractAddress, owner());\\n    }\\n\\n    modifier onlyFromRouter() {\\n        require(msg.sender == bosonRouterAddress, \\\"UNAUTHORIZED_BR\\\"); \\n        _;\\n    }\\n\\n    modifier onlyRouterOrOwner() {\\n        require(msg.sender == bosonRouterAddress || msg.sender == owner(), \\\"UNAUTHORIZED_O_BR\\\"); \\n        _;\\n    }\\n\\n    /**\\n     * @notice  Checking if a non-zero address is provided, otherwise reverts.\\n     */\\n    modifier notZeroAddress(address _tokenAddress) {\\n        require(_tokenAddress != address(0), \\\"0A\\\"); //zero address\\n        _;\\n    }\\n\\n    /**\\n     * @notice For a given _tokenIdSupply, it tells on which NFT it depends\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155) [voucherSetID]\\n     * @return quest NFT token ID\\n     */\\n    function getNftTokenId(uint256 _tokenIdSupply) external view override returns (uint256) {\\n        return voucherToToken[_tokenIdSupply];\\n    }\\n\\n    /**\\n     * @notice Sets the contract, where gate contract checks if quest NFT token exists\\n     * @param _nonTransferableTokenContractAddress address of a non-transferable token contract\\n     */\\n    function setNonTransferableTokenContract(\\n        address _nonTransferableTokenContractAddress\\n    ) external override onlyOwner notZeroAddress(_nonTransferableTokenContractAddress) whenPaused {\\n        nonTransferableTokenContract = IERC1155(\\n            _nonTransferableTokenContractAddress\\n        );\\n\\n        emit LogNonTransferableContractSet(_nonTransferableTokenContractAddress, owner());\\n    }\\n\\n      /**\\n     * @notice Gets the contract address, where gate contract checks if quest NFT token exists\\n     * @return Address of contract that hold non transferable NFTs (quest NFTs)\\n     */\\n    function getNonTransferableTokenContract(\\n    ) external view override returns (address) {\\n        return address(nonTransferableTokenContract);\\n    }\\n\\n    /**\\n     * @notice Sets the Boson router contract address, from which deactivate is accepted\\n     * @param _bosonRouterAddress address of a non-transferable token contract\\n     */\\n    function setBosonRouterAddress(address _bosonRouterAddress)\\n        external\\n        override\\n        onlyOwner\\n        notZeroAddress(_bosonRouterAddress)\\n        whenPaused\\n    {\\n        bosonRouterAddress = _bosonRouterAddress;\\n\\n        emit LogBosonRouterSet(_bosonRouterAddress, owner());\\n    }\\n\\n    /**\\n     * @notice Registers connection between setID and tokenID\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155) [voucherSetID]\\n     * @param _nftTokenId an ID of a quest token\\n     */\\n    function registerVoucherSetId(uint256 _tokenIdSupply, uint256 _nftTokenId)\\n        external\\n        override\\n        whenNotPaused\\n        onlyRouterOrOwner\\n    {\\n        require(_nftTokenId != 0, \\\"TOKEN_ID_0_NOT_ALLOWED\\\");\\n        require(_tokenIdSupply != 0, \\\"INVALID_TOKEN_SUPPLY\\\");\\n\\n        voucherToToken[_tokenIdSupply] = _nftTokenId;\\n\\n        emit LogVoucherSetRegistered(_tokenIdSupply, _nftTokenId);\\n    }\\n\\n    /**\\n     * @notice Checks if user possesses the required quest NFT token for given voucher set\\n     * @param _user user address\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155) [voucherSetID]\\n     * @return true if user possesses quest NFT token, and the token is not deactivated\\n     */\\n    function check(address _user, uint256 _tokenIdSupply)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            !isDeactivated[_user][_tokenIdSupply] &&\\n            nonTransferableTokenContract.balanceOf(\\n                _user,\\n                voucherToToken[_tokenIdSupply]\\n            ) > 0;\\n    }\\n\\n    /**\\n     * @notice Stores information that certain user already claimed\\n     * @param _user user address\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155) [voucherSetID]\\n     */\\n    function deactivate(address _user, uint256 _tokenIdSupply)\\n        external\\n        override\\n        whenNotPaused\\n        onlyFromRouter\\n    {\\n        isDeactivated[_user][_tokenIdSupply] = true;\\n\\n        emit LogUserVoucherDeactivated(_user, _tokenIdSupply);\\n    }\\n\\n    /**\\n     * @notice Pause register and deactivate\\n     */\\n    function pause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause the contract and allows register and deactivate\\n     */\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-or-later\\n\\npragma solidity 0.7.6;\\n\\ninterface IGate {\\n    event LogNonTransferableContractSet(\\n        address indexed _nonTransferableTokenContractAddress,\\n        address indexed _triggeredBy\\n    );\\n    event LogBosonRouterSet(\\n        address indexed _bosonRouter,\\n        address indexed _triggeredBy\\n    );\\n    event LogVoucherSetRegistered(\\n        uint256 indexed _tokenIdSupply,\\n        uint256 indexed _nftTokenId\\n    );\\n    event LogUserVoucherDeactivated(\\n        address indexed _user,\\n        uint256 indexed _tokenIdSupply\\n    );\\n\\n    /**\\n     * @notice For a given _tokenIdSupply, it tells on which NFT it depends\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155) [voucherSetID]\\n     * @return quest NFT token ID\\n     */\\n    function getNftTokenId(uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Sets the contract, where gate contract checks if quest NFT token exists\\n     * @param _nonTransferableTokenContractAddress address of a non-transferable token contract\\n     */\\n    function setNonTransferableTokenContract(\\n        address _nonTransferableTokenContractAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets the Boson router contract address, from which deactivate is accepted\\n     * @param _bosonRouter address of a non-transferable token contract\\n     */\\n    function setBosonRouterAddress(address _bosonRouter) external;\\n\\n    /**\\n     * @notice Registers connection between setID and tokenID\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155)\\n     * @param _nftTokenId an ID of a quest token\\n     */\\n    function registerVoucherSetId(uint256 _tokenIdSupply, uint256 _nftTokenId)\\n        external;\\n\\n    /**\\n     * @notice Gets the contract address, where gate contract checks if quest NFT token exists\\n     * @return Address of contract that hold non transferable NFTs (quest NFTs)\\n     */\\n    function getNonTransferableTokenContract() external view returns (address);\\n\\n    /**\\n     * @notice Checks if user possesses the required quest NFT token for given voucher set\\n     * @param _user user address\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155) [voucherSetID]\\n     * @return true if user possesses quest NFT token, and the token is not deactivated\\n     */\\n    function check(address _user, uint256 _tokenIdSupply)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Stores information that certain user already claimed\\n     * @param _user user address\\n     * @param _tokenIdSupply an ID of a supply token (ERC-1155) [voucherSetID]\\n     */\\n    function deactivate(address _user, uint256 _tokenIdSupply) external;\\n\\n    /**\\n     * @notice Pause register and deactivate\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @notice Unpause the contract and allows register and deactivate\\n     */\\n    function unpause() external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bosonRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nonTransferableTokenContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bosonRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogBosonRouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_nonTransferableTokenContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_triggeredBy\",\"type\":\"address\"}],\"name\":\"LogNonTransferableContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"}],\"name\":\"LogUserVoucherDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_nftTokenId\",\"type\":\"uint256\"}],\"name\":\"LogVoucherSetRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"}],\"name\":\"deactivate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"}],\"name\":\"getNftTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonTransferableTokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIdSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftTokenId\",\"type\":\"uint256\"}],\"name\":\"registerVoucherSetId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bosonRouterAddress\",\"type\":\"address\"}],\"name\":\"setBosonRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nonTransferableTokenContractAddress\",\"type\":\"address\"}],\"name\":\"setNonTransferableTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Gate","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000048093736f038935c50dc587d14ba8c7857683293000000000000000000000000bad188ec8b4e168df2a39c462a7293955ef04bf8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}