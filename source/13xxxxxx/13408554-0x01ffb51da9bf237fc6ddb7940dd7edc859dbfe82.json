{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.5.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libs/TransferHelper.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeVaultForStaking.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev Stake xtoken, earn dcu\r\ninterface IHedgeVaultForStaking {\r\n\r\n    /// @dev Initialize ore drawing weight\r\n    /// @param xtokens xtoken array\r\n    /// @param cycles cycle array\r\n    /// @param weights weight array\r\n    function batchSetPoolWeight(\r\n        address[] calldata xtokens, \r\n        uint64[] calldata cycles, \r\n        uint160[] calldata weights\r\n    ) external;\r\n\r\n    /// @dev Get stake channel information\r\n    /// @param xtoken xtoken address\r\n    /// @param cycle cycle\r\n    /// @return totalStaked Total lock volume of target xtoken\r\n    /// @return totalRewards 通道总出矿量\r\n    /// @return unlockBlock 解锁区块号\r\n    function getChannelInfo(\r\n        address xtoken, \r\n        uint64 cycle\r\n    ) external view returns (\r\n        uint totalStaked, \r\n        uint totalRewards,\r\n        uint unlockBlock\r\n    );\r\n\r\n    /// @dev Get staked amount of target address\r\n    /// @param xtoken xtoken address\r\n    /// @param addr Target address\r\n    /// @return Staked amount of target address\r\n    function balanceOf(address xtoken, uint64 cycle, address addr) external view returns (uint);\r\n\r\n    /// @dev Get the number of dcu to be collected by the target address on the designated transaction pair lock\r\n    /// @param xtoken xtoken address\r\n    /// @param addr Target address\r\n    /// @return The number of dcu to be collected by the target address on the designated transaction lock\r\n    function earned(address xtoken, uint64 cycle, address addr) external view returns (uint);\r\n\r\n    /// @dev Stake xtoken to earn dcu\r\n    /// @param xtoken xtoken address\r\n    /// @param amount Stake amount\r\n    function stake(address xtoken, uint64 cycle, uint160 amount) external;\r\n\r\n    /// @dev Withdraw xtoken, and claim earned dcu\r\n    /// @param xtoken xtoken address\r\n    function withdraw(address xtoken, uint64 cycle) external;\r\n\r\n    /// @dev Claim dcu\r\n    /// @param xtoken xtoken address\r\n    function getReward(address xtoken, uint64 cycle) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeMapping.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev The interface defines methods for Hedge builtin contract address mapping\r\ninterface IHedgeMapping {\r\n\r\n    /// @dev Set the built-in contract address of the system\r\n    /// @param dcuToken Address of dcu token contract\r\n    /// @param hedgeDAO IHedgeDAO implementation contract address\r\n    /// @param hedgeOptions IHedgeOptions implementation contract address\r\n    /// @param hedgeFutures IHedgeFutures implementation contract address\r\n    /// @param hedgeVaultForStaking IHedgeVaultForStaking implementation contract address\r\n    /// @param nestPriceFacade INestPriceFacade implementation contract address\r\n    function setBuiltinAddress(\r\n        address dcuToken,\r\n        address hedgeDAO,\r\n        address hedgeOptions,\r\n        address hedgeFutures,\r\n        address hedgeVaultForStaking,\r\n        address nestPriceFacade\r\n    ) external;\r\n\r\n    /// @dev Get the built-in contract address of the system\r\n    /// @return dcuToken Address of dcu token contract\r\n    /// @return hedgeDAO IHedgeDAO implementation contract address\r\n    /// @return hedgeOptions IHedgeOptions implementation contract address\r\n    /// @return hedgeFutures IHedgeFutures implementation contract address\r\n    /// @return hedgeVaultForStaking IHedgeVaultForStaking implementation contract address\r\n    /// @return nestPriceFacade INestPriceFacade implementation contract address\r\n    function getBuiltinAddress() external view returns (\r\n        address dcuToken,\r\n        address hedgeDAO,\r\n        address hedgeOptions,\r\n        address hedgeFutures,\r\n        address hedgeVaultForStaking,\r\n        address nestPriceFacade\r\n    );\r\n\r\n    /// @dev Get address of dcu token contract\r\n    /// @return Address of dcu token contract\r\n    function getDCUTokenAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeDAO implementation contract address\r\n    /// @return IHedgeDAO implementation contract address\r\n    function getHedgeDAOAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeOptions implementation contract address\r\n    /// @return IHedgeOptions implementation contract address\r\n    function getHedgeOptionsAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeFutures implementation contract address\r\n    /// @return IHedgeFutures implementation contract address\r\n    function getHedgeFuturesAddress() external view returns (address);\r\n\r\n    /// @dev Get IHedgeVaultForStaking implementation contract address\r\n    /// @return IHedgeVaultForStaking implementation contract address\r\n    function getHedgeVaultForStakingAddress() external view returns (address);\r\n\r\n    /// @dev Get INestPriceFacade implementation contract address\r\n    /// @return INestPriceFacade implementation contract address\r\n    function getNestPriceFacade() external view returns (address);\r\n\r\n    /// @dev Registered address. The address registered here is the address accepted by Hedge system\r\n    /// @param key The key\r\n    /// @param addr Destination address. 0 means to delete the registration information\r\n    function registerAddress(string calldata key, address addr) external;\r\n\r\n    /// @dev Get registered address\r\n    /// @param key The key\r\n    /// @return Destination address. 0 means empty\r\n    function checkAddress(string calldata key) external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeGovernance.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev This interface defines the governance methods\r\ninterface IHedgeGovernance is IHedgeMapping {\r\n\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) external;\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) external view returns (uint);\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this weight \r\n    /// to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IHedgeDAO.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev This interface defines the DAO methods\r\ninterface IHedgeDAO {\r\n\r\n    /// @dev Application Flag Changed event\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    event ApplicationChanged(address addr, uint flag);\r\n    \r\n    /// @dev Set DAO application\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function setApplication(address addr, uint flag) external;\r\n\r\n    /// @dev Check DAO application flag\r\n    /// @param addr DAO application contract address\r\n    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function checkApplication(address addr) external view returns (uint);\r\n\r\n    /// @dev Add reward\r\n    /// @param pool Destination pool\r\n    function addETHReward(address pool) external payable;\r\n\r\n    /// @dev The function returns eth rewards of specified pool\r\n    /// @param pool Destination pool\r\n    function totalETHRewards(address pool) external view returns (uint);\r\n\r\n    /// @dev Settlement\r\n    /// @param pool Destination pool. Indicates which pool to pay with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function settle(address pool, address tokenAddress, address to, uint value) external payable;\r\n}\r\n\r\n\r\n// File contracts/HedgeBase.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Base contract of Hedge\r\ncontract HedgeBase {\r\n\r\n    /// @dev IHedgeGovernance implementation contract address\r\n    address public _governance;\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param governance IHedgeGovernance implementation contract address\r\n    function initialize(address governance) public virtual {\r\n        require(_governance == address(0), \"Hedge:!initialize\");\r\n        _governance = governance;\r\n    }\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(newGovernance) when overriding, and override method without onlyGovernance\r\n    /// @param newGovernance IHedgeGovernance implementation contract address\r\n    function update(address newGovernance) public virtual {\r\n\r\n        address governance = _governance;\r\n        require(governance == msg.sender || IHedgeGovernance(governance).checkGovernance(msg.sender, 0), \"Hedge:!gov\");\r\n        _governance = newGovernance;\r\n    }\r\n\r\n    /// @dev Migrate funds from current contract to HedgeDAO\r\n    /// @param tokenAddress Destination token address.(0 means eth)\r\n    /// @param value Migrate amount\r\n    function migrate(address tokenAddress, uint value) external onlyGovernance {\r\n\r\n        address to = IHedgeGovernance(_governance).getHedgeDAOAddress();\r\n        if (tokenAddress == address(0)) {\r\n            IHedgeDAO(to).addETHReward { value: value } (address(0));\r\n        } else {\r\n            TransferHelper.safeTransfer(tokenAddress, to, value);\r\n        }\r\n    }\r\n\r\n    //---------modifier------------\r\n\r\n    modifier onlyGovernance() {\r\n        require(IHedgeGovernance(_governance).checkGovernance(msg.sender, 0), \"Hedge:!gov\");\r\n        _;\r\n    }\r\n\r\n    modifier noContract() {\r\n        require(msg.sender == tx.origin, \"Hedge:!contract\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/HedgeFrequentlyUsed.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Base contract of Hedge\r\ncontract HedgeFrequentlyUsed is HedgeBase {\r\n\r\n    // Address of DCU contract\r\n    address constant DCU_TOKEN_ADDRESS = 0xf56c6eCE0C0d6Fbb9A53282C0DF71dBFaFA933eF;\r\n\r\n    // Address of NestPriceFacade contract\r\n    address constant NEST_PRICE_FACADE_ADDRESS = 0xB5D2890c061c321A5B6A4a4254bb1522425BAF0A;\r\n    \r\n    // USDT代币地址\r\n    address constant USDT_TOKEN_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n\r\n    // USDT代币的基数\r\n    uint constant USDT_BASE = 1000000;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.2.0\r\n\r\n// MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\r\n\r\n// MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.2.0\r\n\r\n// MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File contracts/DCU.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev DCU代币\r\ncontract DCU is HedgeBase, ERC20(\"Decentralized Currency Unit\", \"DCU\") {\r\n\r\n    // 保存挖矿权限地址\r\n    mapping(address=>uint) _minters;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    modifier onlyMinter {\r\n        require(_minters[msg.sender] == 1, \"DCU:not minter\");\r\n        _;\r\n    }\r\n\r\n    /// @dev 设置挖矿权限\r\n    /// @param account 目标账号\r\n    /// @param flag 挖矿权限标记，只有1表示可以挖矿\r\n    function setMinter(address account, uint flag) external onlyGovernance {\r\n        _minters[account] = flag;\r\n    }\r\n\r\n    /// @dev 检查挖矿权限\r\n    /// @param account 目标账号\r\n    /// @return flag 挖矿权限标记，只有1表示可以挖矿\r\n    function checkMinter(address account) external view returns (uint) {\r\n        return _minters[account];\r\n    }\r\n\r\n    /// @dev 铸币\r\n    /// @param to 接受地址\r\n    /// @param value 铸币数量\r\n    function mint(address to, uint value) external onlyMinter {\r\n        _mint(to, value);\r\n    }\r\n\r\n    /// @dev 销毁\r\n    /// @param from 目标地址\r\n    /// @param value 销毁数量\r\n    function burn(address from, uint value) external onlyMinter {\r\n        _burn(from, value);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/HedgeVaultForStaking.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev Stake xtoken, earn dcu\r\ncontract HedgeVaultForStaking is HedgeFrequentlyUsed, IHedgeVaultForStaking {\r\n\r\n    /* *******************************************************************\r\n        定义三个操作：锁仓，领取dcu，取回\r\n\r\n        ----------------[1]-----[2]---------------[3]------------------->\r\n\r\n        a.  一共三个时间节点：1， 2， 3。\r\n            对于所有质押通道：1和2时间节点都是一样的，不同的质押通道3是不一样的。\r\n            质押周期表示2~3之间的时间\r\n            时间折算成区块估算\r\n\r\n        b. 1节点之前啥都不能操作\r\n        c. 1节点到2节点期间可以质押\r\n        d. 2节点以后可以执行领取操作\r\n        e. 3节点以后可以执行取回操作\r\n    ******************************************************************* */\r\n\r\n    /// @dev Account information\r\n    struct Account {\r\n        // Staked of current account\r\n        uint160 balance;\r\n        // Token dividend value mark of the unit that the account has received\r\n        uint96 rewardCursor;\r\n    }\r\n    \r\n    /// @dev Stake channel information\r\n    struct StakeChannel{\r\n\r\n        // Total staked amount\r\n        uint192 totalStaked;\r\n\r\n        // 解锁区块号\r\n        uint64 unlockBlock;\r\n\r\n        // Mining amount weight\r\n        uint160 weight;\r\n\r\n        // The dividend mark that the settled company token can receive\r\n        uint96 rewardPerToken;\r\n\r\n        // Accounts\r\n        // address=>balance\r\n        mapping(address=>Account) accounts;\r\n    }\r\n    \r\n    uint constant UI128 = 0x100000000000000000000000000000000;\r\n\r\n    // dcu出矿单位\r\n    uint128 _dcuUnit;\r\n    // staking开始区块号\r\n    uint64 _startBlock;\r\n    // staking截止区块号\r\n    uint64 _stopBlock;\r\n\r\n    // staking通道信息xtoken=>StakeChannel\r\n    mapping(uint=>StakeChannel) _channels;\r\n    \r\n    /// @dev Create HedgeVaultForStaking\r\n    constructor () {\r\n    }\r\n\r\n    /// @dev Modify configuration\r\n    /// @param dcuUnit dcu出矿单位\r\n    /// @param startBlock staking开始区块号\r\n    /// @param stopBlock staking截止区块号\r\n    function setConfig(uint128 dcuUnit, uint64 startBlock, uint64 stopBlock) external onlyGovernance {\r\n        _dcuUnit = dcuUnit;\r\n        _startBlock = startBlock;\r\n        _stopBlock = stopBlock;\r\n    }\r\n\r\n    /// @dev Get configuration\r\n    /// @return dcuUnit dcu出矿单位\r\n    /// @return startBlock staking开始区块号\r\n    /// @return stopBlock staking截止区块号\r\n    function getConfig() external view returns (uint dcuUnit, uint startBlock, uint stopBlock) {\r\n        return (uint(_dcuUnit), uint(_startBlock), uint(_stopBlock));\r\n    }\r\n\r\n    /// @dev Initialize ore drawing weight\r\n    /// @param xtokens xtoken array\r\n    /// @param cycles cycle array\r\n    /// @param weights weight array\r\n    function batchSetPoolWeight(\r\n        address[] calldata xtokens, \r\n        uint64[] calldata cycles, \r\n        uint160[] calldata weights\r\n    ) external override onlyGovernance {\r\n        uint64 stopBlock = _stopBlock;\r\n        uint cnt = xtokens.length;\r\n        require(cnt == weights.length && cnt == cycles.length, \"FVFS:mismatch len\");\r\n\r\n        for (uint i = 0; i < cnt; ++i) {\r\n            address xtoken = xtokens[i];\r\n            //require(xtoken != address(0), \"FVFS:invalid xtoken\");\r\n            StakeChannel storage channel = _channels[_getKey(xtoken, cycles[i])];\r\n            _updateReward(channel);\r\n\r\n            channel.weight = weights[i];\r\n            channel.unlockBlock = stopBlock + cycles[i];\r\n        }\r\n    }\r\n\r\n    /// @dev Get stake channel information\r\n    /// @param xtoken xtoken address\r\n    /// @param cycle cycle\r\n    /// @return totalStaked Total lock volume of target xtoken\r\n    /// @return totalRewards 通道总出矿量\r\n    /// @return unlockBlock 解锁区块号\r\n    function getChannelInfo(\r\n        address xtoken, \r\n        uint64 cycle\r\n    ) external view override returns (\r\n        uint totalStaked, \r\n        uint totalRewards,\r\n        uint unlockBlock\r\n    ) {\r\n        StakeChannel storage channel = _channels[_getKey(xtoken, cycle)];\r\n        return (\r\n            uint(channel.totalStaked), \r\n            uint(channel.weight) * uint(_dcuUnit), \r\n            uint(channel.unlockBlock) \r\n        );\r\n    }\r\n\r\n    /// @dev Get staked amount of target address\r\n    /// @param xtoken xtoken address\r\n    /// @param cycle cycle\r\n    /// @param addr Target address\r\n    /// @return Staked amount of target address\r\n    function balanceOf(address xtoken, uint64 cycle, address addr) external view override returns (uint) {\r\n        return uint(_channels[_getKey(xtoken, cycle)].accounts[addr].balance);\r\n    }\r\n\r\n    /// @dev Get the number of DCU to be collected by the target address on the designated transaction pair lock\r\n    /// @param xtoken xtoken address (or CNode address)\r\n    /// @param cycle cycle\r\n    /// @param addr Target address\r\n    /// @return The number of DCU to be collected by the target address on the designated transaction lock\r\n    function earned(address xtoken, uint64 cycle, address addr) external view override returns (uint) {\r\n        // Load staking channel\r\n        StakeChannel storage channel = _channels[_getKey(xtoken, cycle)];\r\n        // Call _calcReward() to calculate new reward\r\n        uint newReward = _calcReward(channel);\r\n        \r\n        // Load account\r\n        Account memory account = channel.accounts[addr];\r\n        uint balance = uint(account.balance);\r\n        // Load total amount of staked\r\n        uint totalStaked = uint(channel.totalStaked);\r\n\r\n        // Unit token dividend\r\n        uint rewardPerToken = _decodeFloat(channel.rewardPerToken);\r\n        if (totalStaked > 0) {\r\n            rewardPerToken += newReward * UI128 / totalStaked;\r\n        }\r\n        \r\n        return (rewardPerToken - _decodeFloat(account.rewardCursor)) * balance / UI128;\r\n    }\r\n\r\n    /// @dev Stake xtoken to earn DCU\r\n    /// @param xtoken xtoken address (or CNode address)\r\n    /// @param cycle cycle\r\n    /// @param amount Stake amount\r\n    function stake(address xtoken, uint64 cycle, uint160 amount) external override {\r\n\r\n        require(block.number >= uint(_startBlock) && block.number <= uint(_stopBlock), \"FVFS:!block\");\r\n        // Load stake channel\r\n        StakeChannel storage channel = _channels[_getKey(xtoken, cycle)];\r\n        require(uint(channel.weight) > 0, \"FVFS:no reward\");\r\n        \r\n        // Transfer xtoken from msg.sender to this\r\n        TransferHelper.safeTransferFrom(xtoken, msg.sender, address(this), uint(amount));\r\n        \r\n        // Settle reward for account\r\n        Account memory account = _getReward(channel, msg.sender);\r\n\r\n        // Update totalStaked\r\n        channel.totalStaked += uint192(amount);\r\n\r\n        // Update stake balance of account\r\n        account.balance += amount;\r\n        channel.accounts[msg.sender] = account;\r\n    }\r\n\r\n    /// @dev Withdraw xtoken, and claim earned DCU\r\n    /// @param xtoken xtoken address (or CNode address)\r\n    /// @param cycle cycle\r\n    function withdraw(address xtoken, uint64 cycle) external override {\r\n        // Load stake channel\r\n        StakeChannel storage channel = _channels[_getKey(xtoken, cycle)];\r\n        require(block.number >= uint(channel.unlockBlock), \"FVFS:!block\");\r\n\r\n        // Settle reward for account\r\n        Account memory account = _getReward(channel, msg.sender);\r\n        uint amount = uint(account.balance);\r\n\r\n        // Update totalStaked\r\n        channel.totalStaked -= uint192(amount);\r\n        // Update stake balance of account\r\n        account.balance = uint160(0);\r\n        channel.accounts[msg.sender] = account;\r\n\r\n        // Transfer xtoken to msg.sender\r\n        TransferHelper.safeTransfer(xtoken, msg.sender, amount);\r\n    }\r\n\r\n    /// @dev Claim DCU\r\n    /// @param xtoken xtoken address (or CNode address)\r\n    /// @param cycle cycle\r\n    function getReward(address xtoken, uint64 cycle) external override {\r\n        StakeChannel storage channel = _channels[_getKey(xtoken, cycle)];\r\n        channel.accounts[msg.sender] = _getReward(channel, msg.sender);\r\n    }\r\n\r\n    // Calculate reward, and settle the target account\r\n    function _getReward(\r\n        StakeChannel storage channel, \r\n        address to\r\n    ) private returns (Account memory account) {\r\n        // Load account\r\n        account = channel.accounts[to];\r\n        // Update the global dividend information and get the new unit token dividend amount\r\n        uint rewardPerToken = _updateReward(channel);\r\n        \r\n        // Calculate reward for account\r\n        uint balance = uint(account.balance);\r\n        uint reward = (rewardPerToken - _decodeFloat(account.rewardCursor)) * balance / UI128;\r\n        \r\n        // Update sign of account\r\n        account.rewardCursor = _encodeFloat(rewardPerToken);\r\n        //channel.accounts[to] = account;\r\n\r\n        // Transfer DCU to account\r\n        if (reward > 0) {\r\n            DCU(DCU_TOKEN_ADDRESS).mint(to, reward);\r\n        }\r\n    }\r\n\r\n    // Update the global dividend information and return the new unit token dividend amount\r\n    function _updateReward(StakeChannel storage channel) private returns (uint rewardPerToken) {\r\n        // Call _calcReward() to calculate new reward\r\n        uint newReward = _calcReward(channel);\r\n\r\n        // Load total amount of staked\r\n        uint totalStaked = uint(channel.totalStaked);\r\n        \r\n        rewardPerToken = _decodeFloat(channel.rewardPerToken);\r\n        if (totalStaked > 0) {\r\n            rewardPerToken += newReward * UI128 / totalStaked;\r\n        }\r\n\r\n        // Update the dividend value of unit share\r\n        channel.rewardPerToken = _encodeFloat(rewardPerToken);\r\n        if (newReward > 0) {\r\n            channel.weight = uint160(0);\r\n        }\r\n    }\r\n\r\n    // Calculate new reward\r\n    function _calcReward(StakeChannel storage channel) private view returns (uint newReward) {\r\n\r\n        if (block.number > uint(_stopBlock)) {\r\n            newReward = uint(channel.weight) * uint(_dcuUnit);\r\n        } else {\r\n            newReward = 0;\r\n        }\r\n    }\r\n\r\n    /// @dev Encode the uint value as a floating-point representation in the form of fraction * 16 ^ exponent\r\n    /// @param value Destination uint value\r\n    /// @return float format\r\n    function _encodeFloat(uint value) private pure returns (uint96) {\r\n\r\n        uint exponent = 0; \r\n        while (value > 0x3FFFFFFFFFFFFFFFFFFFFFF) {\r\n            value >>= 4;\r\n            ++exponent;\r\n        }\r\n        return uint96((value << 6) | exponent);\r\n    }\r\n\r\n    /// @dev Decode the floating-point representation of fraction * 16 ^ exponent to uint\r\n    /// @param floatValue fraction value\r\n    /// @return decode format\r\n    function _decodeFloat(uint96 floatValue) private pure returns (uint) {\r\n        return (uint(floatValue) >> 6) << ((uint(floatValue) & 0x3F) << 2);\r\n    }\r\n\r\n    function _getKey(address xtoken, uint64 cycle) private pure returns (uint){\r\n        return (uint(uint160(xtoken)) << 96) | uint(cycle);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xtoken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"cycle\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"xtokens\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"cycles\",\"type\":\"uint64[]\"},{\"internalType\":\"uint160[]\",\"name\":\"weights\",\"type\":\"uint160[]\"}],\"name\":\"batchSetPoolWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xtoken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"cycle\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xtoken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"cycle\",\"type\":\"uint64\"}],\"name\":\"getChannelInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dcuUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xtoken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"cycle\",\"type\":\"uint64\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"dcuUnit\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"startBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"stopBlock\",\"type\":\"uint64\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xtoken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"cycle\",\"type\":\"uint64\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xtoken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"cycle\",\"type\":\"uint64\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HedgeVaultForStaking","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"888888","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://487b16dad42ec5eec622244632fd08e25c65424244ad44ce0d9039f47a24333f"}]}