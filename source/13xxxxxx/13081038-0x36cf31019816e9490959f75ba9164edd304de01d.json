{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/core/IKODAV3Minter.sol\r\n\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IKODAV3Minter {\r\n\r\n    function mintBatchEdition(uint16 _editionSize, address _to, string calldata _uri) external returns (uint256 _editionId);\r\n\r\n    function mintBatchEditionAndComposeERC20s(uint16 _editionSize, address _to, string calldata _uri, address[] calldata _erc20s, uint256[] calldata _amounts) external returns (uint256 _editionId);\r\n\r\n    function mintConsecutiveBatchEdition(uint16 _editionSize, address _to, string calldata _uri) external returns (uint256 _editionId);\r\n}\r\n\r\n// File: contracts/access/IKOAccessControlsLookup.sol\r\n\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IKOAccessControlsLookup {\r\n    function hasAdminRole(address _address) external view returns (bool);\r\n\r\n    function isVerifiedArtist(uint256 _index, address _account, bytes32[] calldata _merkleProof) external view returns (bool);\r\n\r\n    function isVerifiedArtistProxy(address _artist, address _proxy) external view returns (bool);\r\n\r\n    function hasLegacyMinterRole(address _address) external view returns (bool);\r\n\r\n    function hasContractRole(address _address) external view returns (bool);\r\n\r\n    function hasContractOrAdminRole(address _address) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: contracts/core/IERC2309.sol\r\n\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n  @title ERC-2309: ERC-721 Batch Mint Extension\r\n  @dev https://github.com/ethereum/EIPs/issues/2309\r\n */\r\ninterface IERC2309 {\r\n    /**\r\n      @notice This event is emitted when ownership of a batch of tokens changes by any mechanism.\r\n      This includes minting, transferring, and burning.\r\n\r\n      @dev The address executing the transaction MUST own all the tokens within the range of\r\n      fromTokenId and toTokenId, or MUST be an approved operator to act on the owners behalf.\r\n      The fromTokenId and toTokenId MUST be a sequential range of tokens IDs.\r\n      When minting/creating tokens, the `fromAddress` argument MUST be set to `0x0` (i.e. zero address).\r\n      When burning/destroying tokens, the `toAddress` argument MUST be set to `0x0` (i.e. zero address).\r\n\r\n      @param fromTokenId The token ID that begins the batch of tokens being transferred\r\n      @param toTokenId The token ID that ends the batch of tokens being transferred\r\n      @param fromAddress The address transferring ownership of the specified range of tokens\r\n      @param toAddress The address receiving ownership of the specified range of tokens.\r\n    */\r\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed fromAddress, address indexed toAddress);\r\n}\r\n\r\n// File: contracts/core/IERC2981.sol\r\n\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n/// @notice This is purely an extension for the KO platform\r\n/// @notice Royalties on KO are defined at an edition level for all tokens from the same edition\r\ninterface IERC2981EditionExtension {\r\n\r\n    /// @notice Does the edition have any royalties defined\r\n    function hasRoyalties(uint256 _editionId) external view returns (bool);\r\n\r\n    /// @notice Get the royalty receiver - all royalties should be sent to this account if not zero address\r\n    function getRoyaltiesReceiver(uint256 _editionId) external view returns (address);\r\n}\r\n\r\n/**\r\n * ERC2981 standards interface for royalties\r\n */\r\ninterface IERC2981 is IERC165, IERC2981EditionExtension {\r\n    /// ERC165 bytes to add to interface array - set in parent contract\r\n    /// implementing this standard\r\n    ///\r\n    /// bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\r\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\r\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\r\n\r\n    /// @notice Called with the sale price to determine how much royalty\r\n    //          is owed and to whom.\r\n    /// @param _tokenId - the NFT asset queried for royalty information\r\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\r\n    /// @return _receiver - address of who should be sent the royalty payment\r\n    /// @return _royaltyAmount - the royalty payment amount for _value sale price\r\n    function royaltyInfo(\r\n        uint256 _tokenId,\r\n        uint256 _value\r\n    ) external view returns (\r\n        address _receiver,\r\n        uint256 _royaltyAmount\r\n    );\r\n\r\n}\r\n\r\n// File: contracts/core/IHasSecondarySaleFees.sol\r\n\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n/// @title Royalties formats required for use on the Rarible platform\r\n/// @dev https://docs.rarible.com/asset/royalties-schema\r\ninterface IHasSecondarySaleFees is IERC165 {\r\n\r\n    event SecondarySaleFees(uint256 tokenId, address[] recipients, uint[] bps);\r\n\r\n    function getFeeRecipients(uint256 id) external returns (address payable[] memory);\r\n\r\n    function getFeeBps(uint256 id) external returns (uint[] memory);\r\n}\r\n\r\n// File: contracts/core/IKODAV3.sol\r\n\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Core KODA V3 functionality\r\ninterface IKODAV3 is\r\nIERC165, // Contract introspection\r\nIERC721, // Core NFTs\r\nIERC2309, // Consecutive batch mint\r\nIERC2981, // Royalties\r\nIHasSecondarySaleFees // Rariable / Foundation royalties\r\n{\r\n    // edition utils\r\n\r\n    function getCreatorOfEdition(uint256 _editionId) external view returns (address _originalCreator);\r\n\r\n    function getCreatorOfToken(uint256 _tokenId) external view returns (address _originalCreator);\r\n\r\n    function getSizeOfEdition(uint256 _editionId) external view returns (uint256 _size);\r\n\r\n    function getEditionSizeOfToken(uint256 _tokenId) external view returns (uint256 _size);\r\n\r\n    function editionExists(uint256 _editionId) external view returns (bool);\r\n\r\n    // Has the edition been disabled / soft burnt\r\n    function isEditionSalesDisabled(uint256 _editionId) external view returns (bool);\r\n\r\n    // Has the edition been disabled / soft burnt OR sold out\r\n    function isSalesDisabledOrSoldOut(uint256 _editionId) external view returns (bool);\r\n\r\n    // Work out the max token ID for an edition ID\r\n    function maxTokenIdOfEdition(uint256 _editionId) external view returns (uint256 _tokenId);\r\n\r\n    // Helper method for getting the next primary sale token from an edition starting low to high token IDs\r\n    function getNextAvailablePrimarySaleToken(uint256 _editionId) external returns (uint256 _tokenId);\r\n\r\n    // Helper method for getting the next primary sale token from an edition starting high to low token IDs\r\n    function getReverseAvailablePrimarySaleToken(uint256 _editionId) external view returns (uint256 _tokenId);\r\n\r\n    // Utility method to get all data needed for the next primary sale, low token ID to high\r\n    function facilitateNextPrimarySale(uint256 _editionId) external returns (address _receiver, address _creator, uint256 _tokenId);\r\n\r\n    // Utility method to get all data needed for the next primary sale, high token ID to low\r\n    function facilitateReversePrimarySale(uint256 _editionId) external returns (address _receiver, address _creator, uint256 _tokenId);\r\n\r\n    // Expanded royalty method for the edition, not token\r\n    function royaltyAndCreatorInfo(uint256 _editionId, uint256 _value) external returns (address _receiver, address _creator, uint256 _amount);\r\n\r\n    // Allows the creator to correct mistakes until the first token from an edition is sold\r\n    function updateURIIfNoSaleMade(uint256 _editionId, string calldata _newURI) external;\r\n\r\n    // Has any primary transfer happened from an edition\r\n    function hasMadePrimarySale(uint256 _editionId) external view returns (bool);\r\n\r\n    // Has the edition sold out\r\n    function isEditionSoldOut(uint256 _editionId) external view returns (bool);\r\n\r\n    // Toggle on/off the edition from being able to make sales\r\n    function toggleEditionSalesDisabled(uint256 _editionId) external;\r\n\r\n    // token utils\r\n\r\n    function exists(uint256 _tokenId) external view returns (bool);\r\n\r\n    function getEditionIdOfToken(uint256 _tokenId) external pure returns (uint256 _editionId);\r\n\r\n    function getEditionDetails(uint256 _tokenId) external view returns (address _originalCreator, address _owner, uint16 _size, uint256 _editionId, string memory _uri);\r\n\r\n    function hadPrimarySaleOfToken(uint256 _tokenId) external view returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/marketplace/IKODAV3Marketplace.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface IBuyNowMarketplace {\r\n    event ListedForBuyNow(uint256 indexed _id, uint256 _price, address _currentOwner, uint256 _startDate);\r\n    event BuyNowPriceChanged(uint256 indexed _id, uint256 _price);\r\n    event BuyNowDeListed(uint256 indexed _id);\r\n    event BuyNowPurchased(uint256 indexed _tokenId, address _buyer, address _currentOwner, uint256 _price);\r\n\r\n    function listForBuyNow(address _creator, uint256 _id, uint128 _listingPrice, uint128 _startDate) external;\r\n\r\n    function buyEditionToken(uint256 _id) external payable;\r\n    function buyEditionTokenFor(uint256 _id, address _recipient) external payable;\r\n\r\n    function setBuyNowPriceListing(uint256 _editionId, uint128 _listingPrice) external;\r\n}\r\n\r\ninterface IEditionOffersMarketplace {\r\n    event EditionAcceptingOffer(uint256 indexed _editionId, uint128 _startDate);\r\n    event EditionBidPlaced(uint256 indexed _editionId, address _bidder, uint256 _amount);\r\n    event EditionBidWithdrawn(uint256 indexed _editionId, address _bidder);\r\n    event EditionBidAccepted(uint256 indexed _editionId, uint256 indexed _tokenId, address _bidder, uint256 _amount);\r\n    event EditionBidRejected(uint256 indexed _editionId, address _bidder, uint256 _amount);\r\n    event EditionConvertedFromOffersToBuyItNow(uint256 _editionId, uint128 _price, uint128 _startDate);\r\n\r\n    function enableEditionOffers(uint256 _editionId, uint128 _startDate) external;\r\n\r\n    function placeEditionBid(uint256 _editionId) external payable;\r\n    function placeEditionBidFor(uint256 _editionId, address _bidder) external payable;\r\n\r\n    function withdrawEditionBid(uint256 _editionId) external;\r\n\r\n    function rejectEditionBid(uint256 _editionId) external;\r\n\r\n    function acceptEditionBid(uint256 _editionId, uint256 _offerPrice) external;\r\n\r\n    function convertOffersToBuyItNow(uint256 _editionId, uint128 _listingPrice, uint128 _startDate) external;\r\n}\r\n\r\ninterface IEditionSteppedMarketplace {\r\n    event EditionSteppedSaleListed(uint256 indexed _editionId, uint128 _basePrice, uint128 _stepPrice, uint128 _startDate);\r\n    event EditionSteppedSaleBuy(uint256 indexed _editionId, uint256 indexed _tokenId, address _buyer, uint256 _price, uint16 _currentStep);\r\n    event EditionSteppedAuctionUpdated(uint256 indexed _editionId, uint128 _basePrice, uint128 _stepPrice);\r\n\r\n    function listSteppedEditionAuction(address _creator, uint256 _editionId, uint128 _basePrice, uint128 _stepPrice, uint128 _startDate) external;\r\n\r\n    function buyNextStep(uint256 _editionId) external payable;\r\n    function buyNextStepFor(uint256 _editionId, address _buyer) external payable;\r\n\r\n    function convertSteppedAuctionToListing(uint256 _editionId, uint128 _listingPrice, uint128 _startDate) external;\r\n\r\n    function convertSteppedAuctionToOffers(uint256 _editionId, uint128 _startDate) external;\r\n\r\n    function updateSteppedAuction(uint256 _editionId, uint128 _basePrice, uint128 _stepPrice) external;\r\n}\r\n\r\ninterface IReserveAuctionMarketplace {\r\n    event ListedForReserveAuction(uint256 indexed _id, uint256 _reservePrice, uint128 _startDate);\r\n    event BidPlacedOnReserveAuction(uint256 indexed _id, address _currentOwner, address _bidder, uint256 _amount, uint256 _originalBiddingEnd, uint256 _currentBiddingEnd);\r\n    event ReserveAuctionResulted(uint256 indexed _id, uint256 _finalPrice, address _currentOwner, address _winner, address _resulter);\r\n    event BidWithdrawnFromReserveAuction(uint256 _id, address _bidder, uint128 _bid);\r\n    event ReservePriceUpdated(uint256 indexed _id, uint256 _reservePrice);\r\n    event ReserveAuctionConvertedToBuyItNow(uint256 indexed _id, uint128 _listingPrice, uint128 _startDate);\r\n    event EmergencyBidWithdrawFromReserveAuction(uint256 indexed _id, address _bidder, uint128 _bid);\r\n\r\n    function placeBidOnReserveAuction(uint256 _id) external payable;\r\n    function placeBidOnReserveAuctionFor(uint256 _id, address _bidder) external payable;\r\n\r\n    function listForReserveAuction(address _creator, uint256 _id, uint128 _reservePrice, uint128 _startDate) external;\r\n\r\n    function resultReserveAuction(uint256 _id) external;\r\n\r\n    function withdrawBidFromReserveAuction(uint256 _id) external;\r\n\r\n    function updateReservePriceForReserveAuction(uint256 _id, uint128 _reservePrice) external;\r\n\r\n    function emergencyExitBidFromReserveAuction(uint256 _id) external;\r\n}\r\n\r\ninterface IKODAV3PrimarySaleMarketplace is IEditionSteppedMarketplace, IEditionOffersMarketplace, IBuyNowMarketplace, IReserveAuctionMarketplace {\r\n    function convertReserveAuctionToBuyItNow(uint256 _editionId, uint128 _listingPrice, uint128 _startDate) external;\r\n\r\n    function convertReserveAuctionToOffers(uint256 _editionId, uint128 _startDate) external;\r\n}\r\n\r\ninterface ITokenBuyNowMarketplace {\r\n    event TokenDeListed(uint256 indexed _tokenId);\r\n\r\n    function delistToken(uint256 _tokenId) external;\r\n}\r\n\r\ninterface ITokenOffersMarketplace {\r\n    event TokenBidPlaced(uint256 indexed _tokenId, address _currentOwner, address _bidder, uint256 _amount);\r\n    event TokenBidAccepted(uint256 indexed _tokenId, address _currentOwner, address _bidder, uint256 _amount);\r\n    event TokenBidRejected(uint256 indexed _tokenId, address _currentOwner, address _bidder, uint256 _amount);\r\n    event TokenBidWithdrawn(uint256 indexed _tokenId, address _bidder);\r\n\r\n    function acceptTokenBid(uint256 _tokenId, uint256 _offerPrice) external;\r\n\r\n    function rejectTokenBid(uint256 _tokenId) external;\r\n\r\n    function withdrawTokenBid(uint256 _tokenId) external;\r\n\r\n    function placeTokenBid(uint256 _tokenId) external payable;\r\n    function placeTokenBidFor(uint256 _tokenId, address _bidder) external payable;\r\n}\r\n\r\ninterface IBuyNowSecondaryMarketplace {\r\n    function listTokenForBuyNow(uint256 _tokenId, uint128 _listingPrice, uint128 _startDate) external;\r\n}\r\n\r\ninterface IEditionOffersSecondaryMarketplace {\r\n    event EditionBidPlaced(uint256 indexed _editionId, address indexed _bidder, uint256 _bid);\r\n    event EditionBidWithdrawn(uint256 indexed _editionId, address _bidder);\r\n    event EditionBidAccepted(uint256 indexed _tokenId, address _currentOwner, address _bidder, uint256 _amount);\r\n\r\n    function placeEditionBid(uint256 _editionId) external payable;\r\n    function placeEditionBidFor(uint256 _editionId, address _bidder) external payable;\r\n\r\n    function withdrawEditionBid(uint256 _editionId) external;\r\n\r\n    function acceptEditionBid(uint256 _tokenId, uint256 _offerPrice) external;\r\n}\r\n\r\ninterface IKODAV3SecondarySaleMarketplace is ITokenBuyNowMarketplace, ITokenOffersMarketplace, IEditionOffersSecondaryMarketplace, IBuyNowSecondaryMarketplace {\r\n    function convertReserveAuctionToBuyItNow(uint256 _tokenId, uint128 _listingPrice, uint128 _startDate) external;\r\n\r\n    function convertReserveAuctionToOffers(uint256 _tokenId) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/marketplace/BaseMarketplace.sol\r\n\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @notice Core logic and state shared between both marketplaces\r\nabstract contract BaseMarketplace is ReentrancyGuard, Pausable {\r\n\r\n    event AdminUpdateModulo(uint256 _modulo);\r\n    event AdminUpdateMinBidAmount(uint256 _minBidAmount);\r\n    event AdminUpdateAccessControls(IKOAccessControlsLookup indexed _oldAddress, IKOAccessControlsLookup indexed _newAddress);\r\n    event AdminUpdatePlatformPrimarySaleCommission(uint256 _platformPrimarySaleCommission);\r\n    event AdminUpdateBidLockupPeriod(uint256 _bidLockupPeriod);\r\n    event AdminUpdatePlatformAccount(address indexed _oldAddress, address indexed _newAddress);\r\n    event AdminRecoverERC20(IERC20 indexed _token, address indexed _recipient, uint256 _amount);\r\n    event AdminRecoverETH(address payable indexed _recipient, uint256 _amount);\r\n\r\n    event BidderRefunded(uint256 indexed _id, address _bidder, uint256 _bid, address _newBidder, uint256 _newOffer);\r\n    event BidderRefundedFailed(uint256 indexed _id, address _bidder, uint256 _bid, address _newBidder, uint256 _newOffer);\r\n\r\n    // Only a whitelisted smart contract in the access controls contract\r\n    modifier onlyContract() {\r\n        _onlyContract();\r\n        _;\r\n    }\r\n\r\n    function _onlyContract() private view {\r\n        require(accessControls.hasContractRole(_msgSender()), \"Caller not contract\");\r\n    }\r\n\r\n    // Only admin defined in the access controls contract\r\n    modifier onlyAdmin() {\r\n        _onlyAdmin();\r\n        _;\r\n    }\r\n\r\n    function _onlyAdmin() private view {\r\n        require(accessControls.hasAdminRole(_msgSender()), \"Caller not admin\");\r\n    }\r\n\r\n    /// @notice Address of the access control contract\r\n    IKOAccessControlsLookup public accessControls;\r\n\r\n    /// @notice KODA V3 token\r\n    IKODAV3 public koda;\r\n\r\n    /// @notice platform funds collector\r\n    address public platformAccount;\r\n\r\n    /// @notice precision 100.00000%\r\n    uint256 public modulo = 100_00000;\r\n\r\n    /// @notice Minimum bid / minimum list amount\r\n    uint256 public minBidAmount = 0.01 ether;\r\n\r\n    /// @notice Bid lockup period\r\n    uint256 public bidLockupPeriod = 6 hours;\r\n\r\n    constructor(IKOAccessControlsLookup _accessControls, IKODAV3 _koda, address _platformAccount) {\r\n        koda = _koda;\r\n        accessControls = _accessControls;\r\n        platformAccount = _platformAccount;\r\n    }\r\n\r\n    function recoverERC20(IERC20 _token, address _recipient, uint256 _amount) public onlyAdmin {\r\n        _token.transfer(_recipient, _amount);\r\n        emit AdminRecoverERC20(_token, _recipient, _amount);\r\n    }\r\n\r\n    function recoverStuckETH(address payable _recipient, uint256 _amount) public onlyAdmin {\r\n        (bool success,) = _recipient.call{value : _amount}(\"\");\r\n        require(success, \"Unable to send recipient ETH\");\r\n        emit AdminRecoverETH(_recipient, _amount);\r\n    }\r\n\r\n    function updateAccessControls(IKOAccessControlsLookup _accessControls) public onlyAdmin {\r\n        require(_accessControls.hasAdminRole(_msgSender()), \"Sender must have admin role in new contract\");\r\n        emit AdminUpdateAccessControls(accessControls, _accessControls);\r\n        accessControls = _accessControls;\r\n    }\r\n\r\n    function updateModulo(uint256 _modulo) public onlyAdmin {\r\n        require(_modulo > 0, \"Modulo point cannot be zero\");\r\n        modulo = _modulo;\r\n        emit AdminUpdateModulo(_modulo);\r\n    }\r\n\r\n    function updateMinBidAmount(uint256 _minBidAmount) public onlyAdmin {\r\n        minBidAmount = _minBidAmount;\r\n        emit AdminUpdateMinBidAmount(_minBidAmount);\r\n    }\r\n\r\n    function updateBidLockupPeriod(uint256 _bidLockupPeriod) public onlyAdmin {\r\n        bidLockupPeriod = _bidLockupPeriod;\r\n        emit AdminUpdateBidLockupPeriod(_bidLockupPeriod);\r\n    }\r\n\r\n    function updatePlatformAccount(address _newPlatformAccount) public onlyAdmin {\r\n        emit AdminUpdatePlatformAccount(platformAccount, _newPlatformAccount);\r\n        platformAccount = _newPlatformAccount;\r\n    }\r\n\r\n    function pause() public onlyAdmin {\r\n        super._pause();\r\n    }\r\n\r\n    function unpause() public onlyAdmin {\r\n        super._unpause();\r\n    }\r\n\r\n    function _getLockupTime() internal view returns (uint256 lockupUntil) {\r\n        lockupUntil = block.timestamp + bidLockupPeriod;\r\n    }\r\n\r\n    function _refundBidder(uint256 _id, address _receiver, uint256 _paymentAmount, address _newBidder, uint256 _newOffer) internal {\r\n        (bool success,) = _receiver.call{value : _paymentAmount}(\"\");\r\n        if (!success) {\r\n            emit BidderRefundedFailed(_id, _receiver, _paymentAmount, _newBidder, _newOffer);\r\n        } else {\r\n            emit BidderRefunded(_id, _receiver, _paymentAmount, _newBidder, _newOffer);\r\n        }\r\n    }\r\n\r\n    /// @dev This allows the processing of a marketplace sale to be delegated higher up the inheritance hierarchy\r\n    function _processSale(\r\n        uint256 _id,\r\n        uint256 _paymentAmount,\r\n        address _buyer,\r\n        address _seller\r\n    ) internal virtual returns (uint256);\r\n\r\n    /// @dev This allows an auction mechanic to ask a marketplace if a new listing is permitted i.e. this could be false if the edition or token is already listed under a different mechanic\r\n    function _isListingPermitted(uint256 _id) internal virtual returns (bool);\r\n}\r\n\r\n// File: contracts/marketplace/BuyNowMarketplace.sol\r\n\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n// \"buy now\" sale flow\r\nabstract contract BuyNowMarketplace is IBuyNowMarketplace, BaseMarketplace {\r\n    // Buy now listing definition\r\n    struct Listing {\r\n        uint128 price;\r\n        uint128 startDate;\r\n        address seller;\r\n    }\r\n\r\n    /// @notice Edition or Token ID to Listing\r\n    mapping(uint256 => Listing) public editionOrTokenListings;\r\n\r\n    // list edition with \"buy now\" price and start date\r\n    function listForBuyNow(address _seller, uint256 _id, uint128 _listingPrice, uint128 _startDate)\r\n    public\r\n    override\r\n    whenNotPaused {\r\n        require(_isListingPermitted(_id), \"Listing is not permitted\");\r\n        require(_isBuyNowListingPermitted(_id), \"Buy now listing invalid\");\r\n        require(_listingPrice >= minBidAmount, \"Listing price not enough\");\r\n\r\n        // Store listing data\r\n        editionOrTokenListings[_id] = Listing(_listingPrice, _startDate, _seller);\r\n\r\n        emit ListedForBuyNow(_id, _listingPrice, _seller, _startDate);\r\n    }\r\n\r\n    // Buy an token from the edition on the primary market\r\n    function buyEditionToken(uint256 _id)\r\n    public\r\n    override\r\n    payable\r\n    whenNotPaused\r\n    nonReentrant {\r\n        _facilitateBuyNow(_id, _msgSender());\r\n    }\r\n\r\n    // Buy an token from the edition on the primary market, ability to define the recipient\r\n    function buyEditionTokenFor(uint256 _id, address _recipient)\r\n    public\r\n    override\r\n    payable\r\n    whenNotPaused\r\n    nonReentrant {\r\n        _facilitateBuyNow(_id, _recipient);\r\n    }\r\n\r\n    // update the \"buy now\" price\r\n    function setBuyNowPriceListing(uint256 _id, uint128 _listingPrice)\r\n    public\r\n    override\r\n    whenNotPaused {\r\n        require(\r\n            editionOrTokenListings[_id].seller == _msgSender()\r\n            || accessControls.isVerifiedArtistProxy(editionOrTokenListings[_id].seller, _msgSender()),\r\n            \"Only seller can change price\"\r\n        );\r\n\r\n        // Set price\r\n        editionOrTokenListings[_id].price = _listingPrice;\r\n\r\n        // Emit event\r\n        emit BuyNowPriceChanged(_id, _listingPrice);\r\n    }\r\n\r\n    function _facilitateBuyNow(uint256 _id, address _recipient) internal {\r\n        Listing storage listing = editionOrTokenListings[_id];\r\n        require(address(0) != listing.seller, \"No listing found\");\r\n        require(msg.value >= listing.price, \"List price not satisfied\");\r\n        require(block.timestamp >= listing.startDate, \"List not available yet\");\r\n\r\n        uint256 tokenId = _processSale(_id, msg.value, _recipient, listing.seller);\r\n\r\n        emit BuyNowPurchased(tokenId, _recipient, listing.seller, msg.value);\r\n    }\r\n\r\n    function _isBuyNowListingPermitted(uint256 _id) internal virtual returns (bool);\r\n}\r\n\r\n// File: contracts/marketplace/ReserveAuctionMarketplace.sol\r\n\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n\r\n\r\nabstract contract ReserveAuctionMarketplace is IReserveAuctionMarketplace, BaseMarketplace {\r\n    event AdminUpdateReserveAuctionBidExtensionWindow(uint128 _reserveAuctionBidExtensionWindow);\r\n    event AdminUpdateReserveAuctionLengthOnceReserveMet(uint128 _reserveAuctionLengthOnceReserveMet);\r\n\r\n    // Reserve auction definition\r\n    struct ReserveAuction {\r\n        address seller;\r\n        address bidder;\r\n        uint128 reservePrice;\r\n        uint128 bid;\r\n        uint128 startDate;\r\n        uint128 biddingEnd;\r\n    }\r\n\r\n    /// @notice 1 of 1 edition ID to reserve auction definition\r\n    mapping(uint256 => ReserveAuction) public editionOrTokenWithReserveAuctions;\r\n\r\n    /// @notice A reserve auction will be extended by this amount of time if a bid is received near the end\r\n    uint128 public reserveAuctionBidExtensionWindow = 15 minutes;\r\n\r\n    /// @notice Length that bidding window remains open once the reserve price for an auction has been met\r\n    uint128 public reserveAuctionLengthOnceReserveMet = 24 hours;\r\n\r\n    function listForReserveAuction(\r\n        address _creator,\r\n        uint256 _id,\r\n        uint128 _reservePrice,\r\n        uint128 _startDate\r\n    ) public\r\n    override\r\n    whenNotPaused {\r\n        require(_isListingPermitted(_id), \"Listing not permitted\");\r\n        require(_isReserveListingPermitted(_id), \"Reserve listing not permitted\");\r\n        require(_reservePrice >= minBidAmount, \"Reserve price must be at least min bid\");\r\n\r\n        editionOrTokenWithReserveAuctions[_id] = ReserveAuction({\r\n        seller : _creator,\r\n        bidder : address(0),\r\n        reservePrice : _reservePrice,\r\n        startDate : _startDate,\r\n        biddingEnd : 0,\r\n        bid : 0\r\n        });\r\n\r\n        emit ListedForReserveAuction(_id, _reservePrice, _startDate);\r\n    }\r\n\r\n    function placeBidOnReserveAuction(uint256 _id)\r\n    public\r\n    override\r\n    payable\r\n    whenNotPaused\r\n    nonReentrant {\r\n        _placeBidOnReserveAuction(_id, _msgSender());\r\n    }\r\n\r\n    function placeBidOnReserveAuctionFor(uint256 _id, address _bidder)\r\n    public\r\n    override\r\n    payable\r\n    whenNotPaused\r\n    nonReentrant {\r\n        _placeBidOnReserveAuction(_id, _bidder);\r\n    }\r\n\r\n    function _placeBidOnReserveAuction(uint256 _id, address _bidder) internal {\r\n        ReserveAuction storage reserveAuction = editionOrTokenWithReserveAuctions[_id];\r\n        require(reserveAuction.reservePrice > 0, \"Not set up for reserve auction\");\r\n        require(block.timestamp >= reserveAuction.startDate, \"Not accepting bids yet\");\r\n        require(msg.value >= reserveAuction.bid + minBidAmount, \"You have not exceeded previous bid by min bid amount\");\r\n\r\n        uint128 originalBiddingEnd = reserveAuction.biddingEnd;\r\n\r\n        // If the reserve has been met, then bidding will end in 24 hours\r\n        // if we are near the end, we have bids, then extend the bidding end\r\n        bool isCountDownTriggered = originalBiddingEnd > 0;\r\n\r\n        if (msg.value >= reserveAuction.reservePrice && !isCountDownTriggered) {\r\n            reserveAuction.biddingEnd = uint128(block.timestamp) + reserveAuctionLengthOnceReserveMet;\r\n        }\r\n        else if (isCountDownTriggered) {\r\n\r\n            // if a bid has been placed, then we will have a bidding end timestamp\r\n            // and we need to ensure no one can bid beyond this\r\n            require(block.timestamp < originalBiddingEnd, \"No longer accepting bids\");\r\n            uint128 secondsUntilBiddingEnd = originalBiddingEnd - uint128(block.timestamp);\r\n\r\n            // If bid received with in the extension window, extend bidding end\r\n            if (secondsUntilBiddingEnd <= reserveAuctionBidExtensionWindow) {\r\n                reserveAuction.biddingEnd = reserveAuction.biddingEnd + reserveAuctionBidExtensionWindow;\r\n            }\r\n        }\r\n\r\n        // if someone else has previously bid, there is a bid we need to refund\r\n        if (reserveAuction.bid > 0) {\r\n            _refundBidder(_id, reserveAuction.bidder, reserveAuction.bid, _bidder, msg.value);\r\n        }\r\n\r\n        reserveAuction.bid = uint128(msg.value);\r\n        reserveAuction.bidder = _bidder;\r\n\r\n        emit BidPlacedOnReserveAuction(_id, reserveAuction.seller, _bidder, msg.value, originalBiddingEnd, reserveAuction.biddingEnd);\r\n    }\r\n\r\n    function resultReserveAuction(uint256 _id)\r\n    public\r\n    override\r\n    whenNotPaused\r\n    nonReentrant {\r\n        ReserveAuction storage reserveAuction = editionOrTokenWithReserveAuctions[_id];\r\n\r\n        require(reserveAuction.reservePrice > 0, \"No active auction\");\r\n        require(reserveAuction.bid >= reserveAuction.reservePrice, \"Reserve not met\");\r\n        require(block.timestamp > reserveAuction.biddingEnd, \"Bidding has not yet ended\");\r\n\r\n        // N:B. anyone can result the action as only the winner and seller are compensated\r\n\r\n        address winner = reserveAuction.bidder;\r\n        address seller = reserveAuction.seller;\r\n        uint256 winningBid = reserveAuction.bid;\r\n        delete editionOrTokenWithReserveAuctions[_id];\r\n\r\n        _processSale(_id, winningBid, winner, seller);\r\n\r\n        emit ReserveAuctionResulted(_id, winningBid, seller, winner, _msgSender());\r\n    }\r\n\r\n    // Only permit bid withdrawals if reserve not met\r\n    function withdrawBidFromReserveAuction(uint256 _id)\r\n    public\r\n    override\r\n    whenNotPaused\r\n    nonReentrant {\r\n        ReserveAuction storage reserveAuction = editionOrTokenWithReserveAuctions[_id];\r\n\r\n        require(reserveAuction.reservePrice > 0, \"No reserve auction in flight\");\r\n        require(reserveAuction.bid < reserveAuction.reservePrice, \"Bids can only be withdrawn if reserve not met\");\r\n        require(reserveAuction.bidder == _msgSender(), \"Only the bidder can withdraw their bid\");\r\n\r\n        uint256 bidToRefund = reserveAuction.bid;\r\n        _refundBidder(_id, reserveAuction.bidder, bidToRefund, address(0), 0);\r\n\r\n        reserveAuction.bidder = address(0);\r\n        reserveAuction.bid = 0;\r\n\r\n        emit BidWithdrawnFromReserveAuction(_id, _msgSender(), uint128(bidToRefund));\r\n    }\r\n\r\n    // can only do this if the reserve has not been met\r\n    function updateReservePriceForReserveAuction(uint256 _id, uint128 _reservePrice)\r\n    public\r\n    override\r\n    whenNotPaused\r\n    nonReentrant {\r\n        ReserveAuction storage reserveAuction = editionOrTokenWithReserveAuctions[_id];\r\n\r\n        require(\r\n            reserveAuction.seller == _msgSender()\r\n            || accessControls.isVerifiedArtistProxy(reserveAuction.seller, _msgSender()),\r\n            \"Not the seller\"\r\n        );\r\n\r\n        require(reserveAuction.biddingEnd == 0, \"Reserve countdown commenced\");\r\n        require(_reservePrice >= minBidAmount, \"Reserve must be at least min bid\");\r\n\r\n        // Trigger countdown if new reserve price is greater than any current bids\r\n        if (reserveAuction.bid >= _reservePrice) {\r\n            reserveAuction.biddingEnd = uint128(block.timestamp) + reserveAuctionLengthOnceReserveMet;\r\n        }\r\n\r\n        reserveAuction.reservePrice = _reservePrice;\r\n\r\n        emit ReservePriceUpdated(_id, _reservePrice);\r\n    }\r\n\r\n    function emergencyExitBidFromReserveAuction(uint256 _id)\r\n    public\r\n    override\r\n    whenNotPaused\r\n    nonReentrant {\r\n        ReserveAuction storage reserveAuction = editionOrTokenWithReserveAuctions[_id];\r\n\r\n        require(reserveAuction.bid > 0, \"No bid in flight\");\r\n        require(_hasReserveListingBeenInvalidated(_id), \"Bid cannot be withdrawn as reserve auction listing is valid\");\r\n\r\n        bool isSeller = reserveAuction.seller == _msgSender();\r\n        bool isBidder = reserveAuction.bidder == _msgSender();\r\n        require(\r\n            isSeller\r\n            || isBidder\r\n            || accessControls.isVerifiedArtistProxy(reserveAuction.seller, _msgSender())\r\n            || accessControls.hasContractOrAdminRole(_msgSender()),\r\n            \"Only seller, bidder, contract or platform admin\"\r\n        );\r\n        // external call done last as a gas optimisation i.e. it wont be called if isSeller || isBidder is true\r\n\r\n        _refundBidder(_id, reserveAuction.bidder, reserveAuction.bid, address(0), 0);\r\n\r\n        emit EmergencyBidWithdrawFromReserveAuction(_id, reserveAuction.bidder, reserveAuction.bid);\r\n\r\n        delete editionOrTokenWithReserveAuctions[_id];\r\n    }\r\n\r\n    function updateReserveAuctionBidExtensionWindow(uint128 _reserveAuctionBidExtensionWindow) onlyAdmin public {\r\n        reserveAuctionBidExtensionWindow = _reserveAuctionBidExtensionWindow;\r\n        emit AdminUpdateReserveAuctionBidExtensionWindow(_reserveAuctionBidExtensionWindow);\r\n    }\r\n\r\n    function updateReserveAuctionLengthOnceReserveMet(uint128 _reserveAuctionLengthOnceReserveMet) onlyAdmin public {\r\n        reserveAuctionLengthOnceReserveMet = _reserveAuctionLengthOnceReserveMet;\r\n        emit AdminUpdateReserveAuctionLengthOnceReserveMet(_reserveAuctionLengthOnceReserveMet);\r\n    }\r\n\r\n    function _isReserveListingPermitted(uint256 _id) internal virtual returns (bool);\r\n\r\n    function _hasReserveListingBeenInvalidated(uint256 _id) internal virtual returns (bool);\r\n\r\n    function _removeReserveAuctionListing(uint256 _id) internal {\r\n        ReserveAuction storage reserveAuction = editionOrTokenWithReserveAuctions[_id];\r\n\r\n        require(reserveAuction.reservePrice > 0, \"No active auction\");\r\n        require(reserveAuction.bid < reserveAuction.reservePrice, \"Can only convert before reserve met\");\r\n        require(reserveAuction.seller == _msgSender(), \"Only the seller can convert\");\r\n\r\n        // refund any bids\r\n        if (reserveAuction.bid > 0) {\r\n            _refundBidder(_id, reserveAuction.bidder, reserveAuction.bid, address(0), 0);\r\n        }\r\n\r\n        delete editionOrTokenWithReserveAuctions[_id];\r\n    }\r\n}\r\n\r\n// File: contracts/marketplace/KODAV3PrimaryMarketplace.sol\r\n\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title KnownOrigin Primary Marketplace for all V3 tokens\r\n/// @notice The following listing types are supported: Buy now, Stepped, Reserve and Offers\r\n/// @dev The contract is pausable and has reentrancy guards\r\n/// @author KnownOrigin Labs\r\ncontract KODAV3PrimaryMarketplace is\r\nIKODAV3PrimarySaleMarketplace,\r\nBaseMarketplace,\r\nReserveAuctionMarketplace,\r\nBuyNowMarketplace {\r\n\r\n    event PrimaryMarketplaceDeployed();\r\n    event AdminSetKoCommissionOverrideForCreator(address indexed _creator, uint256 _koCommission);\r\n    event AdminSetKoCommissionOverrideForEdition(uint256 indexed _editionId, uint256 _koCommission);\r\n    event ConvertFromBuyNowToOffers(uint256 indexed _editionId, uint128 _startDate);\r\n    event ConvertSteppedAuctionToBuyNow(uint256 indexed _editionId, uint128 _listingPrice, uint128 _startDate);\r\n    event ReserveAuctionConvertedToOffers(uint256 indexed _editionId, uint128 _startDate);\r\n\r\n    // KO Commission override definition for a given creator\r\n    struct KOCommissionOverride {\r\n        bool active;\r\n        uint256 koCommission;\r\n    }\r\n\r\n    // Offer / Bid definition placed on an edition\r\n    struct Offer {\r\n        uint256 offer;\r\n        address bidder;\r\n        uint256 lockupUntil;\r\n    }\r\n\r\n    // Stepped auction definition\r\n    struct Stepped {\r\n        uint128 basePrice;\r\n        uint128 stepPrice;\r\n        uint128 startDate;\r\n        address seller;\r\n        uint16 currentStep;\r\n    }\r\n\r\n    /// @notice Edition ID -> KO commission override set by admin\r\n    mapping(uint256 => KOCommissionOverride) public koCommissionOverrideForEditions;\r\n\r\n    /// @notice primary sale creator -> KO commission override set by admin\r\n    mapping(address => KOCommissionOverride) public koCommissionOverrideForCreators;\r\n\r\n    /// @notice Edition ID to Offer mapping\r\n    mapping(uint256 => Offer) public editionOffers;\r\n\r\n    /// @notice Edition ID to StartDate\r\n    mapping(uint256 => uint256) public editionOffersStartDate;\r\n\r\n    /// @notice Edition ID to stepped auction\r\n    mapping(uint256 => Stepped) public editionStep;\r\n\r\n    /// @notice KO commission on every sale\r\n    uint256 public platformPrimarySaleCommission = 15_00000;  // 15.00000%\r\n\r\n    constructor(IKOAccessControlsLookup _accessControls, IKODAV3 _koda, address _platformAccount)\r\n    BaseMarketplace(_accessControls, _koda, _platformAccount) {\r\n        emit PrimaryMarketplaceDeployed();\r\n    }\r\n\r\n    // convert from a \"buy now\" listing and converting to \"accepting offers\" with an optional start date\r\n    function convertFromBuyNowToOffers(uint256 _editionId, uint128 _startDate)\r\n    public\r\n    whenNotPaused {\r\n        require(\r\n            editionOrTokenListings[_editionId].seller == _msgSender()\r\n            || accessControls.isVerifiedArtistProxy(editionOrTokenListings[_editionId].seller, _msgSender()),\r\n            \"Only seller can convert\"\r\n        );\r\n\r\n        // clear listing\r\n        delete editionOrTokenListings[_editionId];\r\n\r\n        // set the start date for the offer (optional)\r\n        editionOffersStartDate[_editionId] = _startDate;\r\n\r\n        // Emit event\r\n        emit ConvertFromBuyNowToOffers(_editionId, _startDate);\r\n    }\r\n\r\n    // Primary \"offers\" sale flow\r\n\r\n    function enableEditionOffers(uint256 _editionId, uint128 _startDate)\r\n    external\r\n    override\r\n    whenNotPaused\r\n    onlyContract {\r\n        // Set the start date if one supplied\r\n        editionOffersStartDate[_editionId] = _startDate;\r\n\r\n        // Emit event\r\n        emit EditionAcceptingOffer(_editionId, _startDate);\r\n    }\r\n\r\n    function placeEditionBid(uint256 _editionId)\r\n    public\r\n    override\r\n    payable\r\n    whenNotPaused\r\n    nonReentrant {\r\n        _placeEditionBid(_editionId, _msgSender());\r\n    }\r\n\r\n    function placeEditionBidFor(uint256 _editionId, address _bidder)\r\n    public\r\n    override\r\n    payable\r\n    whenNotPaused\r\n    nonReentrant {\r\n        _placeEditionBid(_editionId, _bidder);\r\n    }\r\n\r\n    function withdrawEditionBid(uint256 _editionId)\r\n    public\r\n    override\r\n    whenNotPaused\r\n    nonReentrant {\r\n        Offer storage offer = editionOffers[_editionId];\r\n        require(offer.offer > 0, \"No open bid\");\r\n        require(offer.bidder == _msgSender(), \"Not the top bidder\");\r\n        require(block.timestamp >= offer.lockupUntil, \"Bid lockup not elapsed\");\r\n\r\n        // send money back to top bidder\r\n        _refundBidder(_editionId, offer.bidder, offer.offer, address(0), 0);\r\n\r\n        // emit event\r\n        emit EditionBidWithdrawn(_editionId, _msgSender());\r\n\r\n        // delete offer\r\n        delete editionOffers[_editionId];\r\n    }\r\n\r\n    function rejectEditionBid(uint256 _editionId)\r\n    public\r\n    override\r\n    whenNotPaused\r\n    nonReentrant {\r\n        Offer storage offer = editionOffers[_editionId];\r\n        require(offer.bidder != address(0), \"No open bid\");\r\n\r\n        address creatorOfEdition = koda.getCreatorOfEdition(_editionId);\r\n        require(\r\n            creatorOfEdition == _msgSender()\r\n            || accessControls.isVerifiedArtistProxy(creatorOfEdition, _msgSender()),\r\n            \"Caller not the creator\"\r\n        );\r\n\r\n        // send money back to top bidder\r\n        _refundBidder(_editionId, offer.bidder, offer.offer, address(0), 0);\r\n\r\n        // emit event\r\n        emit EditionBidRejected(_editionId, offer.bidder, offer.offer);\r\n\r\n        // delete offer\r\n        delete editionOffers[_editionId];\r\n    }\r\n\r\n    function acceptEditionBid(uint256 _editionId, uint256 _offerPrice)\r\n    public\r\n    override\r\n    whenNotPaused\r\n    nonReentrant {\r\n        Offer storage offer = editionOffers[_editionId];\r\n        require(offer.bidder != address(0), \"No open bid\");\r\n        require(offer.offer >= _offerPrice, \"Offer price has changed\");\r\n\r\n        address creatorOfEdition = koda.getCreatorOfEdition(_editionId);\r\n        require(\r\n            creatorOfEdition == _msgSender()\r\n            || accessControls.isVerifiedArtistProxy(creatorOfEdition, _msgSender()),\r\n            \"Not creator\"\r\n        );\r\n\r\n        // get a new token from the edition to transfer ownership\r\n        uint256 tokenId = _facilitateNextPrimarySale(_editionId, offer.offer, offer.bidder, false);\r\n\r\n        // emit event\r\n        emit EditionBidAccepted(_editionId, tokenId, offer.bidder, offer.offer);\r\n\r\n        // clear open offer\r\n        delete editionOffers[_editionId];\r\n    }\r\n\r\n    // emergency admin \"reject\" button for stuck bids\r\n    function adminRejectEditionBid(uint256 _editionId) public onlyAdmin nonReentrant {\r\n        Offer storage offer = editionOffers[_editionId];\r\n        require(offer.bidder != address(0), \"No open bid\");\r\n\r\n        // send money back to top bidder\r\n        if (offer.offer > 0) {\r\n            _refundBidder(_editionId, offer.bidder, offer.offer, address(0), 0);\r\n        }\r\n\r\n        emit EditionBidRejected(_editionId, offer.bidder, offer.offer);\r\n\r\n        // delete offer\r\n        delete editionOffers[_editionId];\r\n    }\r\n\r\n    function convertOffersToBuyItNow(uint256 _editionId, uint128 _listingPrice, uint128 _startDate)\r\n    public\r\n    override\r\n    whenNotPaused\r\n    nonReentrant {\r\n        require(!_isEditionListed(_editionId), \"Edition is listed\");\r\n\r\n        address creatorOfEdition = koda.getCreatorOfEdition(_editionId);\r\n        require(\r\n            creatorOfEdition == _msgSender()\r\n            || accessControls.isVerifiedArtistProxy(creatorOfEdition, _msgSender()),\r\n            \"Not creator\"\r\n        );\r\n\r\n        require(_listingPrice >= minBidAmount, \"Listing price not enough\");\r\n\r\n        // send money back to top bidder if existing offer found\r\n        Offer storage offer = editionOffers[_editionId];\r\n        if (offer.offer > 0) {\r\n            _refundBidder(_editionId, offer.bidder, offer.offer, address(0), 0);\r\n        }\r\n\r\n        // delete offer\r\n        delete editionOffers[_editionId];\r\n\r\n        // delete rest of offer information\r\n        delete editionOffersStartDate[_editionId];\r\n\r\n        // Store listing data\r\n        editionOrTokenListings[_editionId] = Listing(_listingPrice, _startDate, _msgSender());\r\n\r\n        emit EditionConvertedFromOffersToBuyItNow(_editionId, _listingPrice, _startDate);\r\n    }\r\n\r\n    // Primary sale \"stepped pricing\" flow\r\n    function listSteppedEditionAuction(address _creator, uint256 _editionId, uint128 _basePrice, uint128 _stepPrice, uint128 _startDate)\r\n    public\r\n    override\r\n    whenNotPaused\r\n    onlyContract {\r\n        require(_basePrice >= minBidAmount, \"Base price not enough\");\r\n\r\n        // Store listing data\r\n        editionStep[_editionId] = Stepped(\r\n            _basePrice,\r\n            _stepPrice,\r\n            _startDate,\r\n            _creator,\r\n            uint16(0)\r\n        );\r\n\r\n        emit EditionSteppedSaleListed(_editionId, _basePrice, _stepPrice, _startDate);\r\n    }\r\n\r\n    function updateSteppedAuction(uint256 _editionId, uint128 _basePrice, uint128 _stepPrice)\r\n    public\r\n    override\r\n    whenNotPaused {\r\n        Stepped storage steppedAuction = editionStep[_editionId];\r\n\r\n        require(\r\n            steppedAuction.seller == _msgSender()\r\n            || accessControls.isVerifiedArtistProxy(steppedAuction.seller, _msgSender()),\r\n            \"Only seller\"\r\n        );\r\n\r\n        require(steppedAuction.currentStep == 0, \"Only when no sales\");\r\n        require(_basePrice >= minBidAmount, \"Base price not enough\");\r\n\r\n        steppedAuction.basePrice = _basePrice;\r\n        steppedAuction.stepPrice = _stepPrice;\r\n\r\n        emit EditionSteppedAuctionUpdated(_editionId, _basePrice, _stepPrice);\r\n    }\r\n\r\n    function buyNextStep(uint256 _editionId)\r\n    public\r\n    override\r\n    payable\r\n    whenNotPaused\r\n    nonReentrant {\r\n        _buyNextStep(_editionId, _msgSender());\r\n    }\r\n\r\n    function buyNextStepFor(uint256 _editionId, address _buyer)\r\n    public\r\n    override\r\n    payable\r\n    whenNotPaused\r\n    nonReentrant {\r\n        _buyNextStep(_editionId, _buyer);\r\n    }\r\n\r\n    function _buyNextStep(uint256 _editionId, address _buyer) internal {\r\n        Stepped storage steppedAuction = editionStep[_editionId];\r\n        require(steppedAuction.seller != address(0), \"Edition not listed for stepped auction\");\r\n        require(steppedAuction.startDate <= block.timestamp, \"Not started yet\");\r\n\r\n        uint256 expectedPrice = _getNextEditionSteppedPrice(_editionId);\r\n        require(msg.value >= expectedPrice, \"Expected price not met\");\r\n\r\n        uint256 tokenId = _facilitateNextPrimarySale(_editionId, expectedPrice, _buyer, true);\r\n\r\n        // Bump the current step\r\n        uint16 step = steppedAuction.currentStep;\r\n\r\n        // no safemath for uint16\r\n        steppedAuction.currentStep = step + 1;\r\n\r\n        // send back excess if supplied - will allow UX flow of setting max price to pay\r\n        if (msg.value > expectedPrice) {\r\n            (bool success,) = _msgSender().call{value : msg.value - expectedPrice}(\"\");\r\n            require(success, \"failed to send overspend back\");\r\n        }\r\n\r\n        emit EditionSteppedSaleBuy(_editionId, tokenId, _buyer, expectedPrice, step);\r\n    }\r\n\r\n    // creates an exit from a step if required but forces a buy now price\r\n    function convertSteppedAuctionToListing(uint256 _editionId, uint128 _listingPrice, uint128 _startDate)\r\n    public\r\n    override\r\n    nonReentrant\r\n    whenNotPaused {\r\n        Stepped storage steppedAuction = editionStep[_editionId];\r\n        require(_listingPrice >= minBidAmount, \"List price not enough\");\r\n\r\n        require(\r\n            steppedAuction.seller == _msgSender()\r\n            || accessControls.isVerifiedArtistProxy(steppedAuction.seller, _msgSender()),\r\n            \"Only seller can convert\"\r\n        );\r\n\r\n        // Store listing data\r\n        editionOrTokenListings[_editionId] = Listing(_listingPrice, _startDate, steppedAuction.seller);\r\n\r\n        // emit event\r\n        emit ConvertSteppedAuctionToBuyNow(_editionId, _listingPrice, _startDate);\r\n\r\n        // Clear up the step logic\r\n        delete editionStep[_editionId];\r\n    }\r\n\r\n    function convertSteppedAuctionToOffers(uint256 _editionId, uint128 _startDate)\r\n    public\r\n    override\r\n    whenNotPaused {\r\n        Stepped storage steppedAuction = editionStep[_editionId];\r\n\r\n        require(\r\n            steppedAuction.seller == _msgSender()\r\n            || accessControls.isVerifiedArtistProxy(steppedAuction.seller, _msgSender()),\r\n            \"Only seller can convert\"\r\n        );\r\n\r\n        // set the start date for the offer (optional)\r\n        editionOffersStartDate[_editionId] = _startDate;\r\n\r\n        // Clear up the step logic\r\n        delete editionStep[_editionId];\r\n\r\n        emit ConvertFromBuyNowToOffers(_editionId, _startDate);\r\n    }\r\n\r\n    // Get the next\r\n    function getNextEditionSteppedPrice(uint256 _editionId) public view returns (uint256 price) {\r\n        price = _getNextEditionSteppedPrice(_editionId);\r\n    }\r\n\r\n    function _getNextEditionSteppedPrice(uint256 _editionId) internal view returns (uint256 price) {\r\n        Stepped storage steppedAuction = editionStep[_editionId];\r\n        uint256 stepAmount = uint256(steppedAuction.stepPrice) * uint256(steppedAuction.currentStep);\r\n        price = uint256(steppedAuction.basePrice) + stepAmount;\r\n    }\r\n\r\n    function convertReserveAuctionToBuyItNow(uint256 _editionId, uint128 _listingPrice, uint128 _startDate)\r\n    public\r\n    override\r\n    whenNotPaused\r\n    nonReentrant {\r\n        require(_listingPrice >= minBidAmount, \"Listing price not enough\");\r\n        _removeReserveAuctionListing(_editionId);\r\n\r\n        editionOrTokenListings[_editionId] = Listing(_listingPrice, _startDate, _msgSender());\r\n\r\n        emit ReserveAuctionConvertedToBuyItNow(_editionId, _listingPrice, _startDate);\r\n    }\r\n\r\n    function convertReserveAuctionToOffers(uint256 _editionId, uint128 _startDate)\r\n    public\r\n    override\r\n    whenNotPaused\r\n    nonReentrant {\r\n        _removeReserveAuctionListing(_editionId);\r\n\r\n        // set the start date for the offer (optional)\r\n        editionOffersStartDate[_editionId] = _startDate;\r\n\r\n        emit ReserveAuctionConvertedToOffers(_editionId, _startDate);\r\n    }\r\n\r\n    // admin\r\n\r\n    function updatePlatformPrimarySaleCommission(uint256 _platformPrimarySaleCommission) public onlyAdmin {\r\n        platformPrimarySaleCommission = _platformPrimarySaleCommission;\r\n        emit AdminUpdatePlatformPrimarySaleCommission(_platformPrimarySaleCommission);\r\n    }\r\n\r\n    function setKoCommissionOverrideForCreator(address _creator, bool _active, uint256 _koCommission) public onlyAdmin {\r\n        KOCommissionOverride storage koCommissionOverride = koCommissionOverrideForCreators[_creator];\r\n        koCommissionOverride.active = _active;\r\n        koCommissionOverride.koCommission = _koCommission;\r\n\r\n        emit AdminSetKoCommissionOverrideForCreator(_creator, _koCommission);\r\n    }\r\n\r\n    function setKoCommissionOverrideForEdition(uint256 _editionId, bool _active, uint256 _koCommission) public onlyAdmin {\r\n        KOCommissionOverride storage koCommissionOverride = koCommissionOverrideForEditions[_editionId];\r\n        koCommissionOverride.active = _active;\r\n        koCommissionOverride.koCommission = _koCommission;\r\n\r\n        emit AdminSetKoCommissionOverrideForEdition(_editionId, _koCommission);\r\n    }\r\n\r\n    // internal\r\n\r\n    function _isListingPermitted(uint256 _editionId) internal view override returns (bool) {\r\n        return !_isEditionListed(_editionId);\r\n    }\r\n\r\n    function _isReserveListingPermitted(uint256 _editionId) internal view override returns (bool) {\r\n        return koda.getSizeOfEdition(_editionId) == 1 && accessControls.hasContractRole(_msgSender());\r\n    }\r\n\r\n    function _hasReserveListingBeenInvalidated(uint256 _id) internal view override returns (bool) {\r\n        bool isApprovalActiveForMarketplace = koda.isApprovedForAll(\r\n            editionOrTokenWithReserveAuctions[_id].seller,\r\n            address(this)\r\n        );\r\n\r\n        return !isApprovalActiveForMarketplace || koda.isSalesDisabledOrSoldOut(_id);\r\n    }\r\n\r\n    function _isBuyNowListingPermitted(uint256) internal view override returns (bool) {\r\n        return accessControls.hasContractRole(_msgSender());\r\n    }\r\n\r\n    function _processSale(uint256 _id, uint256 _paymentAmount, address _buyer, address) internal override returns (uint256) {\r\n        return _facilitateNextPrimarySale(_id, _paymentAmount, _buyer, false);\r\n    }\r\n\r\n    function _facilitateNextPrimarySale(uint256 _editionId, uint256 _paymentAmount, address _buyer, bool _reverse) internal returns (uint256) {\r\n        // for stepped sales, should they be sold in reverse order ie. 10...1 and not 1...10?\r\n        // get next token to sell along with the royalties recipient and the original creator\r\n        (address receiver, address creator, uint256 tokenId) = _reverse\r\n        ? koda.facilitateReversePrimarySale(_editionId)\r\n        : koda.facilitateNextPrimarySale(_editionId);\r\n\r\n        // split money\r\n        _handleEditionSaleFunds(_editionId, creator, receiver, _paymentAmount);\r\n\r\n        // send token to buyer (assumes approval has been made, if not then this will fail)\r\n        koda.safeTransferFrom(creator, _buyer, tokenId);\r\n\r\n        // N:B. open offers are left once sold out for the bidder to withdraw or the artist to reject\r\n\r\n        return tokenId;\r\n    }\r\n\r\n    function _handleEditionSaleFunds(uint256 _editionId, address _creator, address _receiver, uint256 _paymentAmount) internal {\r\n        uint256 primarySaleCommission;\r\n\r\n        if (koCommissionOverrideForEditions[_editionId].active) {\r\n            primarySaleCommission = koCommissionOverrideForEditions[_editionId].koCommission;\r\n        }\r\n        else if (koCommissionOverrideForCreators[_creator].active) {\r\n            primarySaleCommission = koCommissionOverrideForCreators[_creator].koCommission;\r\n        }\r\n        else {\r\n            primarySaleCommission = platformPrimarySaleCommission;\r\n        }\r\n\r\n        uint256 koCommission = (_paymentAmount / modulo) * primarySaleCommission;\r\n        if (koCommission > 0) {\r\n            (bool koCommissionSuccess,) = platformAccount.call{value : koCommission}(\"\");\r\n            require(koCommissionSuccess, \"Edition commission payment failed\");\r\n        }\r\n\r\n        (bool success,) = _receiver.call{value : _paymentAmount - koCommission}(\"\");\r\n        require(success, \"Edition payment failed\");\r\n    }\r\n\r\n    // as offers are always possible, we wont count it as a listing\r\n    function _isEditionListed(uint256 _editionId) internal view returns (bool) {\r\n        if (editionOrTokenListings[_editionId].seller != address(0)) {\r\n            return true;\r\n        }\r\n\r\n        if (editionStep[_editionId].seller != address(0)) {\r\n            return true;\r\n        }\r\n\r\n        if (editionOrTokenWithReserveAuctions[_editionId].seller != address(0)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function _placeEditionBid(uint256 _editionId, address _bidder) internal {\r\n        require(!_isEditionListed(_editionId), \"Edition is listed\");\r\n\r\n        Offer storage offer = editionOffers[_editionId];\r\n        require(msg.value >= offer.offer + minBidAmount, \"Bid not high enough\");\r\n\r\n        // Honor start date if set\r\n        uint256 startDate = editionOffersStartDate[_editionId];\r\n        if (startDate > 0) {\r\n            require(block.timestamp >= startDate, \"Not yet accepting offers\");\r\n\r\n            // elapsed, so free storage\r\n            delete editionOffersStartDate[_editionId];\r\n        }\r\n\r\n        // send money back to top bidder if existing offer found\r\n        if (offer.offer > 0) {\r\n            _refundBidder(_editionId, offer.bidder, offer.offer, _msgSender(), msg.value);\r\n        }\r\n\r\n        // setup offer\r\n        editionOffers[_editionId] = Offer(msg.value, _bidder, _getLockupTime());\r\n\r\n        emit EditionBidPlaced(_editionId, _bidder, msg.value);\r\n    }\r\n}\r\n\r\n// File: contracts/collab/ICollabRoyaltiesRegistry.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n/// @notice Common interface to the edition royalties registry\r\ninterface ICollabRoyaltiesRegistry {\r\n\r\n    /// @notice Creates & deploys a new royalties recipient, cloning _handle and setting it up with the provided _recipients and _splits\r\n    function createRoyaltiesRecipient(\r\n        address _handler,\r\n        address[] calldata _recipients,\r\n        uint256[] calldata _splits\r\n    ) external returns (address deployedHandler);\r\n\r\n    /// @notice Sets up the provided edition to use the provided _recipient\r\n    function useRoyaltiesRecipient(uint256 _editionId, address _deployedHandler) external;\r\n\r\n    /// @notice Setup a royalties handler but does not deploy it, uses predicable clone and sets this against the edition\r\n    function usePredeterminedRoyaltiesRecipient(\r\n        uint256 _editionId,\r\n        address _handler,\r\n        address[] calldata _recipients,\r\n        uint256[] calldata _splits\r\n    ) external;\r\n\r\n    /// @notice Deploy and setup a royalties recipient for the given edition\r\n    function createAndUseRoyaltiesRecipient(\r\n        uint256 _editionId,\r\n        address _handler,\r\n        address[] calldata _recipients,\r\n        uint256[] calldata _splits\r\n    )\r\n    external returns (address deployedHandler);\r\n\r\n    /// @notice Predict the deployed clone address with the given parameters\r\n    function predictedRoyaltiesHandler(\r\n        address _handler,\r\n        address[] calldata _recipients,\r\n        uint256[] calldata _splits\r\n    ) external view returns (address predictedHandler);\r\n\r\n}\r\n\r\n// File: contracts/minter/MintingFactory.sol\r\n\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MintingFactory is Context {\r\n\r\n    event EditionMintedAndListed(uint256 indexed _editionId, SaleType _saleType);\r\n\r\n    event MintingFactoryCreated();\r\n    event AdminMintingPeriodChanged(uint256 _mintingPeriod);\r\n    event AdminMaxMintsInPeriodChanged(uint256 _maxMintsInPeriod);\r\n    event AdminFrequencyOverrideChanged(address _account, bool _override);\r\n    event AdminRoyaltiesRegistryChanged(address _royaltiesRegistry);\r\n\r\n    modifier onlyAdmin() {\r\n        require(accessControls.hasAdminRole(_msgSender()), \"Caller must have admin role\");\r\n        _;\r\n    }\r\n\r\n    modifier canMintAgain(){\r\n        require(_canCreateNewEdition(_msgSender()), \"Caller unable to create yet\");\r\n        _;\r\n    }\r\n\r\n    IKOAccessControlsLookup public accessControls;\r\n    IKODAV3Minter public koda;\r\n    IKODAV3PrimarySaleMarketplace public marketplace;\r\n    ICollabRoyaltiesRegistry public royaltiesRegistry;\r\n\r\n    // Minting allowance period\r\n    uint256 public mintingPeriod = 30 days;\r\n\r\n    // Limit of mints with in the period\r\n    uint256 public maxMintsInPeriod = 15;\r\n\r\n    // Frequency override list for users - you can temporarily add in address which disables the freeze time check\r\n    mapping(address => bool) public frequencyOverride;\r\n\r\n    struct MintingPeriod {\r\n        uint128 mints;\r\n        uint128 firstMintInPeriod;\r\n    }\r\n\r\n    // How many mints within the current minting period\r\n    mapping(address => MintingPeriod) mintingPeriodConfig;\r\n\r\n    enum SaleType {\r\n        BUY_NOW, OFFERS, STEPPED, RESERVE\r\n    }\r\n\r\n    constructor(\r\n        IKOAccessControlsLookup _accessControls,\r\n        IKODAV3Minter _koda,\r\n        IKODAV3PrimarySaleMarketplace _marketplace,\r\n        ICollabRoyaltiesRegistry _royaltiesRegistry\r\n    ) {\r\n        accessControls = _accessControls;\r\n        koda = _koda;\r\n        marketplace = _marketplace;\r\n        royaltiesRegistry = _royaltiesRegistry;\r\n\r\n        emit MintingFactoryCreated();\r\n    }\r\n\r\n    function mintToken(\r\n        SaleType _saleType,\r\n        uint128 _startDate,\r\n        uint128 _basePrice,\r\n        uint128 _stepPrice,\r\n        string calldata _uri,\r\n        uint256 _merkleIndex,\r\n        bytes32[] calldata _merkleProof,\r\n        address _deployedRoyaltiesHandler\r\n    ) canMintAgain external {\r\n        require(accessControls.isVerifiedArtist(_merkleIndex, _msgSender(), _merkleProof), \"Caller must have minter role\");\r\n\r\n        // Make tokens & edition\r\n        uint256 editionId = koda.mintBatchEdition(1, _msgSender(), _uri);\r\n\r\n        _setupSalesMechanic(editionId, _saleType, _startDate, _basePrice, _stepPrice);\r\n        _recordSuccessfulMint(_msgSender());\r\n        _setupRoyalties(editionId, _deployedRoyaltiesHandler);\r\n    }\r\n\r\n    function mintTokenAsProxy(\r\n        address _creator,\r\n        SaleType _saleType,\r\n        uint128 _startDate,\r\n        uint128 _basePrice,\r\n        uint128 _stepPrice,\r\n        string calldata _uri,\r\n        address _deployedRoyaltiesHandler\r\n    ) canMintAgain external {\r\n        require(accessControls.isVerifiedArtistProxy(_creator, _msgSender()), \"Caller is not artist proxy\");\r\n\r\n        // Make tokens & edition\r\n        uint256 editionId = koda.mintBatchEdition(1, _creator, _uri);\r\n\r\n        _setupSalesMechanic(editionId, _saleType, _startDate, _basePrice, _stepPrice);\r\n        _recordSuccessfulMint(_creator);\r\n        _setupRoyalties(editionId, _deployedRoyaltiesHandler);\r\n    }\r\n\r\n    function mintBatchEdition(\r\n        SaleType _saleType,\r\n        uint16 _editionSize,\r\n        uint128 _startDate,\r\n        uint128 _basePrice,\r\n        uint128 _stepPrice,\r\n        string calldata _uri,\r\n        uint256 _merkleIndex,\r\n        bytes32[] calldata _merkleProof,\r\n        address _deployedRoyaltiesHandler\r\n    ) canMintAgain external {\r\n        require(accessControls.isVerifiedArtist(_merkleIndex, _msgSender(), _merkleProof), \"Caller must have minter role\");\r\n\r\n        // Make tokens & edition\r\n        uint256 editionId = koda.mintBatchEdition(_editionSize, _msgSender(), _uri);\r\n\r\n        _setupSalesMechanic(editionId, _saleType, _startDate, _basePrice, _stepPrice);\r\n        _recordSuccessfulMint(_msgSender());\r\n        _setupRoyalties(editionId, _deployedRoyaltiesHandler);\r\n    }\r\n\r\n    function mintBatchEditionAsProxy(\r\n        address _creator,\r\n        SaleType _saleType,\r\n        uint16 _editionSize,\r\n        uint128 _startDate,\r\n        uint128 _basePrice,\r\n        uint128 _stepPrice,\r\n        string calldata _uri,\r\n        address _deployedRoyaltiesHandler\r\n    ) canMintAgain external {\r\n        require(accessControls.isVerifiedArtistProxy(_creator, _msgSender()), \"Caller is not artist proxy\");\r\n\r\n        // Make tokens & edition\r\n        uint256 editionId = koda.mintBatchEdition(_editionSize, _creator, _uri);\r\n\r\n        _setupSalesMechanic(editionId, _saleType, _startDate, _basePrice, _stepPrice);\r\n        _recordSuccessfulMint(_creator);\r\n        _setupRoyalties(editionId, _deployedRoyaltiesHandler);\r\n    }\r\n\r\n    function mintBatchEditionAndComposeERC20s(\r\n        SaleType _saleType,\r\n    // --- _config array (expected length of 5) ---\r\n    // Index 0 - Merkle Index\r\n    // Index 1 - Edition size\r\n    // Index 2 - Start Date\r\n    // Index 3 - Base price\r\n    // Index 4 - Step price\r\n    // ---------------------------------------------\r\n        uint128[] calldata _config,\r\n        string calldata _uri,\r\n        address[] calldata _erc20s,\r\n        uint256[] calldata _amounts,\r\n        bytes32[] calldata _merkleProof\r\n    ) canMintAgain external {\r\n        require(accessControls.isVerifiedArtist(_config[0], _msgSender(), _merkleProof), \"Caller must have minter role\");\r\n        require(_config.length == 5, \"Config must consist of 5 elements in the array\");\r\n\r\n        uint256 editionId = koda.mintBatchEditionAndComposeERC20s(uint16(_config[1]), _msgSender(), _uri, _erc20s, _amounts);\r\n\r\n        _setupSalesMechanic(editionId, _saleType, _config[2], _config[3], _config[4]);\r\n        _recordSuccessfulMint(_msgSender());\r\n    }\r\n\r\n    function mintBatchEditionAndComposeERC20sAsProxy(\r\n        address _creator,\r\n        SaleType _saleType,\r\n    // --- _config array (expected length of 4) ---\r\n    // Index 0 - Edition size\r\n    // Index 1 - Start Date\r\n    // Index 2 - Base price\r\n    // Index 3 - Step price\r\n    // ---------------------------------------------\r\n        uint128[] calldata _config,\r\n        string calldata _uri,\r\n        address[] calldata _erc20s,\r\n        uint256[] calldata _amounts\r\n    ) canMintAgain external {\r\n        require(accessControls.isVerifiedArtistProxy(_creator, _msgSender()), \"Caller is not artist proxy\");\r\n        require(_config.length == 4, \"Config must consist of 4 elements in the array\");\r\n\r\n        uint256 editionId = koda.mintBatchEditionAndComposeERC20s(uint16(_config[0]), _creator, _uri, _erc20s, _amounts);\r\n\r\n        _setupSalesMechanic(editionId, _saleType, _config[1], _config[2], _config[3]);\r\n        _recordSuccessfulMint(_creator);\r\n    }\r\n\r\n    function mintConsecutiveBatchEdition(\r\n        SaleType _saleType,\r\n        uint16 _editionSize,\r\n        uint128 _startDate,\r\n        uint128 _basePrice,\r\n        uint128 _stepPrice,\r\n        string calldata _uri,\r\n        uint256 _merkleIndex,\r\n        bytes32[] calldata _merkleProof,\r\n        address _deployedRoyaltiesHandler\r\n    ) canMintAgain external {\r\n        require(accessControls.isVerifiedArtist(_merkleIndex, _msgSender(), _merkleProof), \"Caller must have minter role\");\r\n\r\n        // Make tokens & edition\r\n        uint256 editionId = koda.mintConsecutiveBatchEdition(_editionSize, _msgSender(), _uri);\r\n\r\n        _setupSalesMechanic(editionId, _saleType, _startDate, _basePrice, _stepPrice);\r\n        _recordSuccessfulMint(_msgSender());\r\n        _setupRoyalties(editionId, _deployedRoyaltiesHandler);\r\n    }\r\n\r\n    function mintConsecutiveBatchEditionAsProxy(\r\n        address _creator,\r\n        SaleType _saleType,\r\n        uint16 _editionSize,\r\n        uint128 _startDate,\r\n        uint128 _basePrice,\r\n        uint128 _stepPrice,\r\n        string calldata _uri,\r\n        address _deployedRoyaltiesHandler\r\n    ) canMintAgain external {\r\n        require(accessControls.isVerifiedArtistProxy(_creator, _msgSender()), \"Caller is not artist proxy\");\r\n\r\n        // Make tokens & edition\r\n        uint256 editionId = koda.mintConsecutiveBatchEdition(_editionSize, _creator, _uri);\r\n\r\n        _setupSalesMechanic(editionId, _saleType, _startDate, _basePrice, _stepPrice);\r\n        _recordSuccessfulMint(_creator);\r\n        _setupRoyalties(editionId, _deployedRoyaltiesHandler);\r\n    }\r\n\r\n    function _setupSalesMechanic(uint256 _editionId, SaleType _saleType, uint128 _startDate, uint128 _basePrice, uint128 _stepPrice) internal {\r\n        if (SaleType.BUY_NOW == _saleType) {\r\n            marketplace.listForBuyNow(_msgSender(), _editionId, _basePrice, _startDate);\r\n        }\r\n        else if (SaleType.STEPPED == _saleType) {\r\n            marketplace.listSteppedEditionAuction(_msgSender(), _editionId, _basePrice, _stepPrice, _startDate);\r\n        }\r\n        else if (SaleType.OFFERS == _saleType) {\r\n            marketplace.enableEditionOffers(_editionId, _startDate);\r\n        } else if (SaleType.RESERVE == _saleType) {\r\n            // use base price for reserve price\r\n            marketplace.listForReserveAuction(_msgSender(), _editionId, _basePrice, _startDate);\r\n        }\r\n\r\n        emit EditionMintedAndListed(_editionId, _saleType);\r\n    }\r\n\r\n    function _setupRoyalties(uint256 _editionId, address _deployedHandler) internal {\r\n        if (_deployedHandler != address(0) && address(royaltiesRegistry) != address(0)) {\r\n            royaltiesRegistry.useRoyaltiesRecipient(_editionId, _deployedHandler);\r\n        }\r\n    }\r\n\r\n    /// Internal helpers\r\n\r\n    function _canCreateNewEdition(address _account) internal view returns (bool) {\r\n        // if frequency is overridden then assume they can mint\r\n        if (frequencyOverride[_account]) {\r\n            return true;\r\n        }\r\n\r\n        // if within the period range, check remaining allowance\r\n        if (_getNow() <= mintingPeriodConfig[_account].firstMintInPeriod + mintingPeriod) {\r\n            return mintingPeriodConfig[_account].mints < maxMintsInPeriod;\r\n        }\r\n\r\n        // if period expired - can mint another one\r\n        return true;\r\n    }\r\n\r\n    function _recordSuccessfulMint(address _account) internal {\r\n        MintingPeriod storage period = mintingPeriodConfig[_account];\r\n\r\n        uint256 endOfCurrentMintingPeriodLimit = period.firstMintInPeriod + mintingPeriod;\r\n\r\n        // if first time use, set the first timestamp to be now abd start counting\r\n        if (period.firstMintInPeriod == 0) {\r\n            period.firstMintInPeriod = _getNow();\r\n            period.mints = period.mints + 1;\r\n        }\r\n        // if still within the minting period, record the new mint\r\n        else if (_getNow() <= endOfCurrentMintingPeriodLimit) {\r\n            period.mints = period.mints + 1;\r\n        }\r\n        // if we are outside of the window reset the limit and record a new single mint\r\n        else if (endOfCurrentMintingPeriodLimit < _getNow()) {\r\n            period.mints = 1;\r\n            period.firstMintInPeriod = _getNow();\r\n        }\r\n    }\r\n\r\n    function _getNow() internal virtual view returns (uint128) {\r\n        return uint128(block.timestamp);\r\n    }\r\n\r\n    /// Public helpers\r\n\r\n    function canCreateNewEdition(address _account) public view returns (bool) {\r\n        return _canCreateNewEdition(_account);\r\n    }\r\n\r\n    function currentMintConfig(address _account) public view returns (uint128 mints, uint128 firstMintInPeriod) {\r\n        MintingPeriod memory config = mintingPeriodConfig[_account];\r\n        return (\r\n        config.mints,\r\n        config.firstMintInPeriod\r\n        );\r\n    }\r\n\r\n    function setFrequencyOverride(address _account, bool _override) onlyAdmin public {\r\n        frequencyOverride[_account] = _override;\r\n        emit AdminFrequencyOverrideChanged(_account, _override);\r\n    }\r\n\r\n    function setMintingPeriod(uint256 _mintingPeriod) onlyAdmin public {\r\n        mintingPeriod = _mintingPeriod;\r\n        emit AdminMintingPeriodChanged(_mintingPeriod);\r\n    }\r\n\r\n    function setRoyaltiesRegistry(ICollabRoyaltiesRegistry _royaltiesRegistry) onlyAdmin public {\r\n        royaltiesRegistry = _royaltiesRegistry;\r\n        emit AdminRoyaltiesRegistryChanged(address(_royaltiesRegistry));\r\n    }\r\n\r\n    function setMaxMintsInPeriod(uint256 _maxMintsInPeriod) onlyAdmin public {\r\n        maxMintsInPeriod = _maxMintsInPeriod;\r\n        emit AdminMaxMintsInPeriodChanged(_maxMintsInPeriod);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IKOAccessControlsLookup\",\"name\":\"_accessControls\",\"type\":\"address\"},{\"internalType\":\"contract IKODAV3Minter\",\"name\":\"_koda\",\"type\":\"address\"},{\"internalType\":\"contract IKODAV3PrimarySaleMarketplace\",\"name\":\"_marketplace\",\"type\":\"address\"},{\"internalType\":\"contract ICollabRoyaltiesRegistry\",\"name\":\"_royaltiesRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_override\",\"type\":\"bool\"}],\"name\":\"AdminFrequencyOverrideChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxMintsInPeriod\",\"type\":\"uint256\"}],\"name\":\"AdminMaxMintsInPeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mintingPeriod\",\"type\":\"uint256\"}],\"name\":\"AdminMintingPeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_royaltiesRegistry\",\"type\":\"address\"}],\"name\":\"AdminRoyaltiesRegistryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_editionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum MintingFactory.SaleType\",\"name\":\"_saleType\",\"type\":\"uint8\"}],\"name\":\"EditionMintedAndListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingFactoryCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessControls\",\"outputs\":[{\"internalType\":\"contract IKOAccessControlsLookup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"canCreateNewEdition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"currentMintConfig\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"mints\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"firstMintInPeriod\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frequencyOverride\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"koda\",\"outputs\":[{\"internalType\":\"contract IKODAV3Minter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplace\",\"outputs\":[{\"internalType\":\"contract IKODAV3PrimarySaleMarketplace\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintsInPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MintingFactory.SaleType\",\"name\":\"_saleType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_editionSize\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_startDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_basePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_stepPrice\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_merkleIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_deployedRoyaltiesHandler\",\"type\":\"address\"}],\"name\":\"mintBatchEdition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MintingFactory.SaleType\",\"name\":\"_saleType\",\"type\":\"uint8\"},{\"internalType\":\"uint128[]\",\"name\":\"_config\",\"type\":\"uint128[]\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_erc20s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mintBatchEditionAndComposeERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"enum MintingFactory.SaleType\",\"name\":\"_saleType\",\"type\":\"uint8\"},{\"internalType\":\"uint128[]\",\"name\":\"_config\",\"type\":\"uint128[]\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_erc20s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatchEditionAndComposeERC20sAsProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"enum MintingFactory.SaleType\",\"name\":\"_saleType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_editionSize\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_startDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_basePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_stepPrice\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_deployedRoyaltiesHandler\",\"type\":\"address\"}],\"name\":\"mintBatchEditionAsProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MintingFactory.SaleType\",\"name\":\"_saleType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_editionSize\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_startDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_basePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_stepPrice\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_merkleIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_deployedRoyaltiesHandler\",\"type\":\"address\"}],\"name\":\"mintConsecutiveBatchEdition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"enum MintingFactory.SaleType\",\"name\":\"_saleType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_editionSize\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_startDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_basePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_stepPrice\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_deployedRoyaltiesHandler\",\"type\":\"address\"}],\"name\":\"mintConsecutiveBatchEditionAsProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MintingFactory.SaleType\",\"name\":\"_saleType\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"_startDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_basePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_stepPrice\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_merkleIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_deployedRoyaltiesHandler\",\"type\":\"address\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"enum MintingFactory.SaleType\",\"name\":\"_saleType\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"_startDate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_basePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_stepPrice\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_deployedRoyaltiesHandler\",\"type\":\"address\"}],\"name\":\"mintTokenAsProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesRegistry\",\"outputs\":[{\"internalType\":\"contract ICollabRoyaltiesRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_override\",\"type\":\"bool\"}],\"name\":\"setFrequencyOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMintsInPeriod\",\"type\":\"uint256\"}],\"name\":\"setMaxMintsInPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintingPeriod\",\"type\":\"uint256\"}],\"name\":\"setMintingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICollabRoyaltiesRegistry\",\"name\":\"_royaltiesRegistry\",\"type\":\"address\"}],\"name\":\"setRoyaltiesRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MintingFactory","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009028b16494a9363f3eaaf381a6fde67296abc68c000000000000000000000000abb3738f04dc2ec20f4ae4462c3d069d02ae045b000000000000000000000000f11ed77fd65840b64602526ddc38311e9923c81b000000000000000000000000e28e054d596576841682e8c993e415b3ccb2ebeb","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://66edfbdf525828debc4f50b2c85cec33f7c81ee71b1a7f403a0c27e9b4b7e897"}]}