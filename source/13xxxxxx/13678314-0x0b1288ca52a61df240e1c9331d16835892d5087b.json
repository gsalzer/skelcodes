{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal initializer {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(\r\n        IERC20Upgradeable token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20Upgradeable token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract CloudPresale is OwnableUpgradeable, PausableUpgradeable {\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n    /**\r\n     * EVENTS\r\n     **/\r\n    event CLOUDPurchased(address indexed user, address indexed purchaseToken, uint256 cloudAmount);\r\n\r\n    /**\r\n     * CONSTANTS\r\n     **/\r\n\r\n    // *** PRESALE PARAMETERS START ***\r\n    uint256 public constant PRECISION = 1000000; //Up to 0.00001\r\n    uint256 public PRE_SALE_START;\r\n    uint256 public PRE_SALE_END;\r\n\r\n    uint256 public PRE_SALE_CLOUD_POOL;\r\n    // *** PESALE PARAMETERS END ***\r\n\r\n    /***\r\n     * STORAGE\r\n     ***/\r\n    address public USDCToken;\r\n    address public USDTToken;\r\n\r\n    uint256 public maxTokensAmount;\r\n    uint256 public minTokensAmount;\r\n\r\n    mapping(address => uint256) public purchased;\r\n\r\n    uint256 public totalPurchased;\r\n\r\n    mapping(address => uint256) public rates;\r\n    mapping(address => uint256) public addressToPrecision;\r\n\r\n    address private treasury;\r\n\r\n    /***\r\n     * MODIFIERS\r\n     ***/\r\n\r\n    /**\r\n     * @dev Throws if called with not supported token.\r\n     */\r\n    modifier supportedCoin(address _token) {\r\n        require(_token == USDCToken || _token == USDTToken, \"Token is not supported\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called when no ongoing pre-sale or public sale.\r\n     */\r\n    modifier onlySale() {\r\n        require(_isPreSale(), \"Sale stage is over\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if sale stage is ongoing.\r\n     */\r\n    modifier notOnSale() {\r\n        require(block.timestamp >= PRE_SALE_END || block.timestamp <= PRE_SALE_START, \"Presale is ongoing\");\r\n        _;\r\n    }\r\n\r\n    /***\r\n     * INITIALIZER AND SETTINGS\r\n     ***/\r\n\r\n    /**\r\n     * @notice Initializes the contract with correct addresses settings\r\n     * @param _treasury Address of the NFTClouds's treasury where funds from sale go to\r\n     */\r\n    function initialize(\r\n        address _USDCToken,\r\n        address _USDTToken,\r\n        address _treasury\r\n    ) public virtual initializer {\r\n        require(_treasury != address(0), \"Zero address\");\r\n        require(_USDCToken != address(0), \"Zero address\");\r\n        require(_USDTToken != address(0), \"Zero address\");\r\n\r\n        __Ownable_init();\r\n        __Pausable_init();\r\n\r\n        treasury = _treasury;\r\n        USDCToken = _USDCToken;\r\n        USDTToken = _USDTToken;\r\n\r\n        rates[address(0)] = 13437500000; // for 4300 price\r\n        rates[_USDCToken] = 3125000; // 1 CLOUD = 0.32 cents\r\n        rates[_USDTToken] = 3125000; // 1 CLOUD = 0.32 cents\r\n\r\n        addressToPrecision[address(0)] = 1; \r\n        addressToPrecision[_USDCToken] = 10**12; \r\n        addressToPrecision[_USDTToken] = 10**12;\r\n\r\n        PRE_SALE_START = 1637834400;\r\n        PRE_SALE_END = 1637852400;\r\n\r\n        minTokensAmount = 3125 * 10**18;\r\n        maxTokensAmount = 46875 * 10**18;\r\n\r\n        PRE_SALE_CLOUD_POOL = 7_000_000 * 10**18; //7mln tokens by default\r\n    }\r\n\r\n    /**\r\n     * @notice Sets purchased amount for participant\r\n     * @param _user address of participant\r\n     * @param _amount amount for participant to be set as purchased\r\n     */\r\n    function adminAddPurchased(address _user, uint256 _amount) external onlyOwner {\r\n        totalPurchased -= purchased[_user];\r\n        purchased[_user] = _amount;\r\n        totalPurchased += _amount;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the rate for the chosen token based on the contracts precision\r\n     * @param _token ERC20 token address or zero address for ETH\r\n     * @param _rate Exchange rate based on precision (e.g. _rate = PRECISION corresponds to 1:1)\r\n     */\r\n    function adminSetRates(address _token, uint256 _rate) external onlyOwner {\r\n        rates[_token] = _rate;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows owner to change the treasury address. Treasury is the address where all funds from sale go to\r\n     * @param _treasury New treasury address\r\n     */\r\n    function adminSetTreasury(address _treasury) external onlyOwner {\r\n        treasury = _treasury;\r\n    }\r\n\r\n    /**\r\n     * @notice Stops purchase functions. Owner only\r\n     */\r\n    function adminPause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @notice Unpauses purchase functions. Owner only\r\n     */\r\n    function adminUnpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @notice Allows owner to change max allowed TFS token per address.\r\n     * @param _maxCLOUD New max TFS amount\r\n     */\r\n    function adminSetMaxCLOUD(uint256 _maxCLOUD) external onlyOwner {\r\n        maxTokensAmount = _maxCLOUD;\r\n    }\r\n\r\n    function adminSetMinCLOUD(uint256 _minCLOUD) external onlyOwner {\r\n        minTokensAmount = _minCLOUD;\r\n    }\r\n\r\n    function adminSetCap(uint256 _cap) external onlyOwner {\r\n        PRE_SALE_CLOUD_POOL = _cap;\r\n    }\r\n\r\n    function adminSetEnd() external onlyOwner {\r\n        PRE_SALE_END = block.timestamp;\r\n    }\r\n\r\n    function adminSetStart(uint256 _timestamp) external onlyOwner {\r\n        PRE_SALE_START = _timestamp;\r\n    }\r\n\r\n    function adminExtendEnd(uint256 _seconds) external onlyOwner {\r\n        PRE_SALE_END += _seconds;\r\n    }\r\n\r\n    /***\r\n     * PURCHASE FUNCTIONS\r\n     ***/\r\n\r\n    /**\r\n     * @notice For purchase with ETH\r\n     */\r\n    receive() external payable virtual onlySale whenNotPaused {\r\n        _purchaseCLOUDwithETH();\r\n    }\r\n\r\n    /**\r\n     * @notice For purchase with allowed stablecoin (USDC)\r\n     * @param ERC20token Address of the token to be paid in\r\n     * @param ERC20amount Amount of the token to be paid in\r\n     */\r\n    function purchaseCLOUDwithERC20(address ERC20token, uint256 ERC20amount)\r\n        external\r\n        onlySale\r\n        supportedCoin(ERC20token)\r\n        whenNotPaused\r\n    {\r\n        require(ERC20amount > 0, \"Zero amount\");\r\n        uint256 purchaseAmount = _calcPurchaseAmount(ERC20token, ERC20amount);\r\n        require(purchaseAmount > 0, \"Rates not set\");\r\n        require(totalPurchased + purchaseAmount <= PRE_SALE_CLOUD_POOL, \"Not enough CLOUD in presale pool\");\r\n        require(maxTokensAmount == 0 || purchased[_msgSender()] + purchaseAmount <= maxTokensAmount, \"Can't buy more than max cap\");\r\n        require(minTokensAmount == 0 || purchased[_msgSender()] + purchaseAmount >= minTokensAmount, \"Can't buy less than min cap\");\r\n            \r\n        totalPurchased += purchaseAmount;\r\n        purchased[_msgSender()] += purchaseAmount;\r\n\r\n        if (totalPurchased >= PRE_SALE_CLOUD_POOL) {\r\n            PRE_SALE_END = block.timestamp;\r\n        }\r\n\r\n        emit CLOUDPurchased(_msgSender(), ERC20token, purchaseAmount);\r\n\r\n        IERC20Upgradeable(ERC20token).safeTransferFrom(_msgSender(), treasury, ERC20amount); // send ERC20 to Treasury\r\n    }\r\n\r\n    /**\r\n     * @notice For purchase with ETH. ETH is left on the contract until withdrawn to treasury\r\n     */\r\n    function purchaseCLOUDwithETH() external payable onlySale whenNotPaused {\r\n        require(msg.value > 0, \"No ETH sent\");\r\n        _purchaseCLOUDwithETH();\r\n    }\r\n\r\n    function _purchaseCLOUDwithETH() private {\r\n        uint256 purchaseAmount = _calcPurchaseAmount(address(0), msg.value);\r\n        require(purchaseAmount > 0, \"Rates not set\");\r\n\r\n        require(totalPurchased + purchaseAmount <= PRE_SALE_CLOUD_POOL, \"Not enough CLOUD in presale pool\");\r\n        require(maxTokensAmount == 0 || purchased[_msgSender()] + purchaseAmount <= maxTokensAmount, \"Can't buy more than max cap\");\r\n        require(minTokensAmount == 0 || purchased[_msgSender()] + purchaseAmount >= minTokensAmount, \"Can't buy less than min cap\");\r\n        \r\n        totalPurchased += purchaseAmount;\r\n        purchased[_msgSender()] += purchaseAmount;\r\n\r\n        if (totalPurchased >= PRE_SALE_CLOUD_POOL) {\r\n            PRE_SALE_END = block.timestamp;\r\n        }\r\n\r\n        emit CLOUDPurchased(_msgSender(), address(0), purchaseAmount);\r\n\r\n        (bool success, ) = payable(treasury).call{value: msg.value}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice Function to get available on public sale amount of CLOUD\r\n     * @return The amount of the token released.\r\n     */\r\n    function preSaleAvailableCLOUD() public view returns (uint256) {\r\n        return PRE_SALE_CLOUD_POOL - totalPurchased;\r\n    }\r\n\r\n    /**\r\n     * @notice Function for the administrator to withdraw token (except CLOUD)\r\n     * @notice Withdrawals allowed only if there is no sale pending stage\r\n     * @param ERC20token Address of ERC20 token to withdraw from the contract\r\n     * @param _receiver Address of the receiver\r\n     */\r\n    function adminWithdrawERC20(address ERC20token, address _receiver) external onlyOwner notOnSale {\r\n        uint256 tokenBalance = IERC20Upgradeable(ERC20token).balanceOf(address(this));\r\n        IERC20Upgradeable(ERC20token).safeTransfer(_receiver, tokenBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice Function for the administrator to withdraw ETH for refunds\r\n     * @notice Withdrawals allowed only if there is no sale pending stage\r\n     * @param _receiver Address of the receiver\r\n     */\r\n    function adminWithdraw(address _receiver) external onlyOwner notOnSale {\r\n        require(address(this).balance > 0, \"Nothing to withdraw\");\r\n\r\n        (bool success, ) = _receiver.call{value: address(this).balance}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    /**\r\n     * @notice Returns CLOUD amount for 1 external token\r\n     * @param _token External token (USDC, 0 address for ETH)\r\n     */\r\n    function rateForToken(address _token) external view returns (uint256) {\r\n        if (_token == address(0)) {\r\n            return _calcPurchaseAmount(_token, 10**18);\r\n        }\r\n        return _calcPurchaseAmount(_token, 10**6);\r\n    }\r\n\r\n    /***\r\n     * INTERNAL HELPERS\r\n     ***/\r\n\r\n    /**\r\n     * @dev Checks if presale stage is on-going.\r\n     * @return True is presale is active\r\n     */\r\n    function _isPreSale() private view returns (bool) {\r\n        return (block.timestamp >= PRE_SALE_START && block.timestamp < PRE_SALE_END);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates DHV amount based on rate and token.\r\n     * @param _token Supported ERC20 token\r\n     * @param _amount Token amount to convert to CLOUD\r\n     * @return CLOUD amount\r\n     */\r\n    function _calcPurchaseAmount(address _token, uint256 _amount) private view returns (uint256) {\r\n        return (_amount * addressToPrecision[_token] *rates[_token]) / PRECISION;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract MockCloudPresale is CloudPresale {\r\n    constructor(\r\n        address _usdc,\r\n        address _usdt,\r\n        address _treasury\r\n    ) {\r\n        initialize(_usdc, _usdt, _treasury);\r\n    }\r\n\r\n    function setTimeMOCK(uint256 _start, uint256 _end) external {\r\n        require(_start < _end, \"Incorrect time provided\");\r\n        PRE_SALE_START = _start;\r\n        PRE_SALE_END = _end;\r\n    }\r\n\r\n    function setCLOUDpoolMOCK(uint256 _pool) external {\r\n        require(_pool > PRE_SALE_CLOUD_POOL, \"Incorrect amount provided\");\r\n        PRE_SALE_CLOUD_POOL = _pool;\r\n    }\r\n\r\n    function clearMOCK() external {\r\n        totalPurchased = 0;\r\n        purchased[_msgSender()];\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cloudAmount\",\"type\":\"uint256\"}],\"name\":\"CLOUDPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRE_SALE_CLOUD_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRE_SALE_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRE_SALE_START\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDCToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminAddPurchased\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"adminExtendEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"adminSetCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminSetEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCLOUD\",\"type\":\"uint256\"}],\"name\":\"adminSetMaxCLOUD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minCLOUD\",\"type\":\"uint256\"}],\"name\":\"adminSetMinCLOUD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"adminSetRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"adminSetStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"adminSetTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERC20token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"adminWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_USDCToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDTToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokensAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleAvailableCLOUD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERC20token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ERC20amount\",\"type\":\"uint256\"}],\"name\":\"purchaseCLOUDwithERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseCLOUDwithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rateForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CloudPresale","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e08aa27afa2c6948da0e401740be3a40c8588e3a9f6ed46ef5120eca8d1a73e2"}]}