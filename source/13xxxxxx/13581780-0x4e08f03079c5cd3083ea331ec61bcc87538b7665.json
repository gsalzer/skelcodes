{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DoubleDiceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6; \\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\"; \\n \\nimport \\\"./IDoubleDiceToken.sol\\\";\\n\\n/**\\n *                            ________\\n *                 ________  / o   o /\\\\\\n *                /     o /\\\\/   o   /o \\\\ \\n *               /   o   /  \\\\o___o_/o   \\\\\\n *              /_o_____/o   \\\\     \\\\   o/ \\n *              \\\\ o   o \\\\   o/  o   \\\\ o/ \\n *  ______     __\\\\ o   o \\\\  /\\\\_______\\\\/       _____     ____    ____    ____   _______ \\n * |  __  \\\\   /   \\\\_o___o_\\\\/ |  _ \\\\  | |     |  ___|   |  _ \\\\  |_  _|  / ___| |   ____|\\n * | |  \\\\  | | / \\\\ | | | | | | |_| | | |     | |_      | | \\\\ |   ||   | /     |  |\\n * | |   | | | | | | | | | | |  _ <  | |     |  _|     | | | |   I|   | |     |  |__\\n * |D|   |D| |O\\\\_/O| |U|_|U| |B|_|B| |L|___  |E|___    |D|_/D|  _I|_  |C\\\\___  |EEEEE| \\n * |D|__/DD|  \\\\OOO/   \\\\UUU/  |BBBB/  |LLLLL| |EEEEE|   |DDDD/  |IIII|  \\\\CCCC| |EE|____ \\n * |DDDDDD/  ================================================================ |EEEEEEE| \\n *\\n * @title DoubleDice DODI token contract\\n * @author DoubleDice Team <dev@doubledice.com>\\n * @custom:security-contact dev@doubledice.com\\n * @notice ERC-20 token extended with special yield-distribution functionality.\\n *\\n * A supply of 10 billion DODI was minted at contract creation: \\n * - 6.3 billion were minted to an initial token holder `initTokenHolder` \\n * - 3.7 billion were minted to a reserved `UNDISTRIBUTED_YIELD_ACCOUNT` address \\n * \\n * It is not possible to mint further DODI beyond the 10 billion DODI minted at contract creation. \\n *\\n * The DODI on the `UNDISTRIBUTED_YIELD_ACCOUNT` is controlled by the `owner()` of this contract. \\n * The `owner()` may choose to: \\n * - Distribute a portion or all of the remaining undistributed yield to token holders via `distributeYield` \\n * - Burn a portion or all of the remaining undistributed yield via `burnUndistributedYield`, \\n *   thus decreasing the total DODI supply \\n *\\n * The `owner()` of this contract has no special powers besides the ability \\n * to distribute or burn the 3.7 billion DODI yield.\\n *\\n * When an amount of yield is released from `UNDISTRIBUTED_YIELD_ACCOUNT` to be distributed to token \\n * holders, it is transferred to a second reserved `UNCLAIMED_DISTRIBUTED_YIELD_ACCOUNT` address. \\n * Token holders may then call `claimYield()` to transfer their received yield\\n * from `UNCLAIMED_DISTRIBUTED_YIELD_ACCOUNT` to themselves.\\n * \\n * Different operations affect `balanceOf(account)` and `unclaimedYieldOf(account)` as follows: \\n * - `transfer` and `transferFrom` alter `balanceOf(account)`, \\n *   but without altering `unclaimedYieldOf(account)`. \\n * - Unless `account` is explicitly excluded from a distribution, `distributeYield` alters `unclaimedYieldOf(account)`,\\n *   but without altering `balanceOf(account)`. \\n * - `claimYield` and `claimYieldFor` alter both `balanceOf(account)` and `unclaimedYieldOf(account)`,\\n *   but without altering their sum `balanceOf(account) + unclaimedYieldOf(account)` \\n */\\ncontract DoubleDiceToken is\\n    IDoubleDiceToken, \\n    ERC20(\\\"DoubleDice Token\\\", \\\"DODI\\\"),\\n    Ownable\\n{\\n    /// @notice Account holding the portion of the 3.7 billion DODI that have not yet been distributed or burned by `owner()` \\n    address constant public UNDISTRIBUTED_YIELD_ACCOUNT = 0xD0D1000000000000000000000000000000000001;\\n\\n    /// @notice Account holding yield that has been distributed, but not yet claimed by its recipient\\n    address constant public UNCLAIMED_DISTRIBUTED_YIELD_ACCOUNT = 0xd0D1000000000000000000000000000000000002; \\n \\n    function _isReservedAccount(address account) internal pure returns (bool) { \\n        return account == UNDISTRIBUTED_YIELD_ACCOUNT || account == UNCLAIMED_DISTRIBUTED_YIELD_ACCOUNT;\\n    }\\n\\n    /// @dev Holds unclaimed-yield state for a specific account \\n    struct AccountEntry {\\n        /// @dev The amount of unclaimed tokens for this account, at the instant it was last updated in \\n        /// either `_captureUnclaimedYield()`, or `claimYieldFor()` or `distributeYield()`.\\n        uint256 capturedUnclaimedYield;\\n\\n        /// @dev The value of `_factor` at the instant `capturedUnclaimedYield` was last updated\\n        uint256 factorAtCapture; \\n    }\\n \\n    /// @dev The state for an account is stored in this mapping in conjunction with \\n    /// the ERC-20 balance, which is managed in the base ERC20 contract \\n    mapping(address => AccountEntry) internal _entries;\\n \\n    /// @dev Sets the precision at which calculations are performed in this contract.\\n    /// The larger the value of `ONE`, the more miniscule the rounding errors in this contract. \\n    /// With `ONE` set to 1e47, it can be proven that the largest computation in this contract\\n    /// will never result in uint256 overflow, given the following 3 assumptions hold true. \\n    uint256 constant internal ONE = 1e47;\\n\\n    /// @dev Assumption 1 of 3: Holds true because the contract was created with 10 billion * 1e18 tokens \\n    uint256 constant private _ASSUMED_MAX_INIT_TOTAL_SUPPLY = 20e9 * 1e18; \\n \\n    /// @dev Assumption 2 of 3: Holds true because 10 / (10 - 3.7) = 1.5873 <= 2\\n    uint256 constant private _ASSUMED_MAX_INIT_TOTAL_TO_INIT_CIRCULATING_SUPPLY_RATIO = 2;\\n \\n    /// @dev Assumption 3 of 3: Holds true because it is `require`-d in `distributeYield()` \\n    uint256 constant private _ASSUMED_MIN_TOTAL_CIRCULATING_TO_EXCLUDED_CIRCULATING_SUPPLY_RATIO = 2; \\n\\n    function _checkOverflowProtectionAssumptionsConstructor(uint256 initTotalSupply, uint256 totalYieldAmount) internal pure {\\n        require(initTotalSupply <= _ASSUMED_MAX_INIT_TOTAL_SUPPLY, \\\"Broken assumption\\\"); \\n        uint256 initCirculatingSupply = initTotalSupply - totalYieldAmount;\\n        // C/T = initCirculatingSupply / initTotalSupply >= 0.5\\n        require(initCirculatingSupply * _ASSUMED_MAX_INIT_TOTAL_TO_INIT_CIRCULATING_SUPPLY_RATIO >= initTotalSupply, \\\"Broken assumption\\\"); \\n    }\\n \\n    function _checkOverflowProtectionAssumptionsDistributeYield(uint256 totalCirculatingSupply, uint256 excludedCirculatingSupply) internal pure { \\n        // epsilon = excludedCirculatingSupply / totalCirculatingSupply <= 0.5\\n        require((excludedCirculatingSupply * _ASSUMED_MIN_TOTAL_CIRCULATING_TO_EXCLUDED_CIRCULATING_SUPPLY_RATIO) <= totalCirculatingSupply, \\\"Broken assumption\\\");\\n    } \\n \\n    /// @dev Yield distribution to all accounts is recorded by increasing (eagerly) this contract-wide `_factor`, \\n    /// and received yield is acknowledged by an `account` by reconciling (lazily) its `_entries[account]`\\n    /// with this contract-wide `_factor`.\\n    uint256 internal _factor;\\n \\n    /// @notice Returns `balanceOf(account) + unclaimedYieldOf(account)`\\n    /// @custom:reverts-with \\\"Reserved account\\\" if called for `UNDISTRIBUTED_YIELD_ACCOUNT` or `UNCLAIMED_DISTRIBUTED_YIELD_ACCOUNT`\\n    function balancePlusUnclaimedYieldOf(address account) public view returns (uint256) { \\n        require(!_isReservedAccount(account), \\\"Reserved account\\\");\\n\\n        AccountEntry storage entry = _entries[account];\\n        return ((ONE + _factor) * (balanceOf(account) + entry.capturedUnclaimedYield)) / (ONE + entry.factorAtCapture);\\n    } \\n\\n    /// @notice Returns the total yield token amount claimable by `account`.\\n    /// @dev The tokens received by `account` during a yield-distribution do not appear immediately on `balanceOf(account)`, \\n    /// but they appear instantly on `unclaimedYieldOf(account)` and `balancePlusUnclaimedYieldOf(account)`.\\n    /// Transferring tokens from `account` to another account `other` does not affect \\n    /// `unclaimedYieldOf(account)` or `unclaimedYieldOf(other)`.\\n    /// @custom:reverts-with \\\"Reserved account\\\" if called for `UNDISTRIBUTED_YIELD_ACCOUNT` or `UNCLAIMED_DISTRIBUTED_YIELD_ACCOUNT` \\n    function unclaimedYieldOf(address account) public view returns (uint256) {\\n        return balancePlusUnclaimedYieldOf(account) - balanceOf(account);\\n    }\\n\\n    /// @notice Emitted every time the yield claimable by `account` increases by a non-zero amount `byAmount`. \\n    /// After `claimYieldFor(account)` is called, the sum of all yield ever claimed for `account`,\\n    /// (which equals the total amount ever transferred from `UNCLAIMED_DISTRIBUTED_YIELD` to `account`),\\n    /// should equal the sum of `byAmount` over all `UnclaimedYieldIncrease` events ever emitted for `account`.\\n    event UnclaimedYieldIncrease(address indexed account, uint256 byAmount);\\n \\n    /// @dev The value `unclaimedYieldOf(account)` always reflects  exact amount of yield that is claimable by `account`.\\n    /// If there is a discrepancy between `unclaimedYieldOf(account)` and the value present in `_entries[account].capturedUnclaimedYield`,\\n    /// then this function rectifies that discrepancy while maintaining `balanceOf(account)` and `unclaimedYieldOf(account)` constant.\\n    function _captureUnclaimedYield(address account) internal {\\n        AccountEntry storage entry = _entries[account];\\n\\n        // _factor can only increase, never decrease \\n        assert(entry.factorAtCapture <= _factor); \\n \\n        if (entry.factorAtCapture == _factor) { \\n            // No yield distribution since last calculation\\n            return; \\n        } \\n\\n        // Recalculate *before* `factorAtCapture` is updated, \\n        // because `unclaimedYieldOf` depends on its value pre-update\\n        uint256 newUnclaimedYield = unclaimedYieldOf(account);\\n \\n        // Update *after* `unclaimedYieldOf` has been calculated \\n        entry.factorAtCapture = _factor; \\n\\n        // Finally update `capturedUnclaimedYield` \\n        uint256 increase = newUnclaimedYield - entry.capturedUnclaimedYield;\\n        if (increase > 0) { \\n            entry.capturedUnclaimedYield = newUnclaimedYield;\\n            emit UnclaimedYieldIncrease(account, increase); \\n        }\\n    } \\n \\n    constructor( \\n        uint256 initTotalSupply, \\n        uint256 totalYieldAmount,\\n        address initTokenHolder \\n    ) {\\n        require(totalYieldAmount <= initTotalSupply, \\\"Invalid params\\\"); \\n \\n        _checkOverflowProtectionAssumptionsConstructor(initTotalSupply, totalYieldAmount);\\n \\n        // invoke ERC._mint directly to bypass yield corrections\\n        ERC20._mint(UNDISTRIBUTED_YIELD_ACCOUNT, totalYieldAmount);\\n        ERC20._mint(initTokenHolder, initTotalSupply - totalYieldAmount);\\n    }\\n\\n\\n    /// @dev Overriding `_transfer` affects `transfer` and `transferFrom`. \\n    /// `_mint` and `_burn` could be overridden in a similar fashion, but are not, \\n    /// as all mints and burns are done directly via `ERC20._mint` and `ERC20._burn`\\n    /// so as to bypass yield correction. \\n    /// @custom:reverts-with \\\"Transfer from reserved account\\\" if `from` is `UNDISTRIBUTED_YIELD_ACCOUNT` or `UNCLAIMED_DISTRIBUTED_YIELD_ACCOUNT`\\n    /// @custom:reverts-with \\\"Transfer to reserved account\\\" if `to` is `UNDISTRIBUTED_YIELD_ACCOUNT` or `UNCLAIMED_DISTRIBUTED_YIELD_ACCOUNT`\\n    function _transfer(address from, address to, uint256 amount) internal virtual override {\\n        require(!_isReservedAccount(from), \\\"Transfer from reserved account\\\");\\n        require(!_isReservedAccount(to), \\\"Transfer to reserved account\\\"); \\n        _captureUnclaimedYield(from);\\n        _captureUnclaimedYield(to);\\n        // invoke ERC._transfer directly to bypass yield corrections \\n        ERC20._transfer(from, to, amount); \\n    }\\n \\n    event YieldDistribution(uint256 yieldDistributed, address[] excludedAccounts); \\n \\n    /// @notice Distribute yield to all token holders except `excludedAccounts` \\n    /// @custom:reverts-with \\\"Ownable: caller is not the owner\\\" if called by an account that is not `owner()`\\n    /// @custom:reverts-with \\\"Duplicate/unordered account\\\" if `excludedAccounts` contains 0-account,\\n    /// @custom:reverts-with \\\"Reserved account\\\" if `excludedAccounts` contains `UNDISTRIBUTED_YIELD_ACCOUNT` or `UNCLAIMED_DISTRIBUTED_YIELD_ACCOUNT`,\\n    /// is not in ascending order, or contains duplicate addresses. \\n    /// @custom:reverts-with \\\"Broken assumption\\\" if the total `balancePlusUnclaimedYieldOf` for all `excludedAccounts` \\n    /// exceeds half the circulating supply (which is `totalSupply() - balanceOf(UNDISTRIBUTED_YIELD_ACCOUNT)`). \\n    /// @custom:emits-event UnclaimedYieldIncrease if operation results in an increase in `capturedUnclaimedYield` \\n    /// for one of the `excludedAccounts`\\n    /// @custom:emits-event Transfer(UNDISTRIBUTED_YIELD_ACCOUNT, UNCLAIMED_DISTRIBUTED_YIELD_ACCOUNT, yieldDistributed)\\n    /// @custom:emits-event YieldDistribution(amount, excludedAccounts)\\n    function distributeYield(uint256 amount, address[] calldata excludedAccounts) external onlyOwner {\\n        // ERC20 functions reject mints/transfers to zero-address, \\n        // so zero-address can never have balance that we want to exclude from calculations. \\n        address prevExcludedAccount = 0x0000000000000000000000000000000000000000; \\n\\n        uint256 excludedCirculatingSupply = 0; \\n        for (uint256 i = 0; i < excludedAccounts.length; i++) {\\n            address account = excludedAccounts[i]; \\n \\n            require(prevExcludedAccount < account, \\\"Duplicate/unordered account\\\"); \\n            prevExcludedAccount = account; // prepare for next iteration immediately \\n \\n            require(!_isReservedAccount(account), \\\"Reserved account\\\"); \\n\\n            // The excluded account itself might have a stale `capturedUnclaimedYield` value, \\n            // so it is brought up to date with pre-distribution `_factor` \\n            _captureUnclaimedYield(account);\\n\\n            excludedCirculatingSupply += balancePlusUnclaimedYieldOf(account);\\n        } \\n\\n        // totalSupply = balanceOfBefore(UNDISTRIBUTED_YIELD) + (sumOfBalanceOfExcluded + balanceOf(UNCLAIMED_DISTRIBUTED_YIELD) + sumOfBalanceOfIncludedBefore)\\n        // totalSupply = balanceOfBefore(UNDISTRIBUTED_YIELD) + (            excludedCirculatingSupply        +        includedCirculatingSupplyBefore         ) \\n        // totalSupply = balanceOfBefore(UNDISTRIBUTED_YIELD) + (                               totalCirculatingSupplyBefore                                   ) \\n        uint256 totalCirculatingSupplyBefore = totalSupply() - balanceOf(UNDISTRIBUTED_YIELD_ACCOUNT);\\n\\n        _checkOverflowProtectionAssumptionsDistributeYield(totalCirculatingSupplyBefore, excludedCirculatingSupply); \\n \\n        // includedCirculatingSupplyBefore = sum(balancePlusUnclaimedYieldOf(account) for account in includedAccounts)\\n        uint256 includedCirculatingSupplyBefore = totalCirculatingSupplyBefore - excludedCirculatingSupply; \\n\\n        // totalSupply = (balanceBeforeOf(UNDISTRIBUTED_YIELD)         ) + (           includedCirculatingSupplyBefore) + (excludedCirculatingSupply)\\n        // totalSupply = (balanceBeforeOf(UNDISTRIBUTED_YIELD) - amount) + (amount  +  includedCirculatingSupplyBefore) + (excludedCirculatingSupply)\\n        // totalSupply = (     balanceAfterOf(UNDISTRIBUTED_YIELD)     ) + (    includedCirculatingSupplyAfter        ) + (excludedCirculatingSupply) \\n        uint256 includedCirculatingSupplyAfter = includedCirculatingSupplyBefore + amount; \\n \\n        _factor = ((ONE + _factor) * includedCirculatingSupplyAfter) / includedCirculatingSupplyBefore - ONE; \\n\\n        for (uint256 i = 0; i < excludedAccounts.length; i++) {\\n            // Force this account to \\\"miss out on\\\" this distribution\\n            // by \\\"fast-forwarding\\\" its `_factor` to the new value \\n            // without actually changing its balance or unclaimedYield \\n            _entries[excludedAccounts[i]].factorAtCapture = _factor; \\n        } \\n\\n        // invoke ERC._transfer directly to bypass yield corrections \\n        ERC20._transfer(UNDISTRIBUTED_YIELD_ACCOUNT, UNCLAIMED_DISTRIBUTED_YIELD_ACCOUNT, amount); \\n\\n        emit YieldDistribution(amount, excludedAccounts);\\n    } \\n\\n    /// @notice Burn an `amount` of undistributed yield. \\n    /// @custom:reverts-with \\\"Ownable: caller is not the owner\\\" if called by an account that is not `owner()` \\n    /// @custom:reverts-with \\\"ERC20: burn amount exceeds balance\\\" if `amount` exceeds `balanceOf(UNDISTRIBUTED_YIELD_ACCOUNT)`\\n    /// @custom:emits-event \\\"Transfer(UNDISTRIBUTED_YIELD_ACCOUNT, address(0), amount)\\\" \\n    function burnUndistributedYield(uint256 amount) external onlyOwner {\\n        // invoke ERC._transfer directly to bypass yield corrections \\n        ERC20._burn(UNDISTRIBUTED_YIELD_ACCOUNT, amount); \\n    }\\n \\n    /// @notice Yield received by `account` from a distribution will be reflected in `balanceOf(account)` \\n    /// only after `claimYieldFor(account)` has been called. \\n    /// @custom:reverts-with \\\"Reserved account\\\" if called for `UNDISTRIBUTED_YIELD_ACCOUNT` or `UNCLAIMED_DISTRIBUTED_YIELD_ACCOUNT`\\n    /// @custom:emits-event UnclaimedYieldIncrease if operation results in an increase in `capturedUnclaimedYield` \\n    /// @custom:emits-event Transfer(UNCLAIMED_DISTRIBUTED_YIELD_ACCOUNT, account, unclaimedYieldOf(account)) \\n    function claimYieldFor(address account) public { \\n\\n        // Without this check (and without the check in balancePlusUnclaimedYieldOf), \\n        // it would be possible for anyone to claim yield for one of the reserved accounts, \\n        // and this would destabilize the accounting system.\\n        require(!_isReservedAccount(account), \\\"Reserved account\\\"); \\n\\n        // Not entirely necessary, because ERC20._transfer will block 0-account \\n        // from receiving any balance, but it is stopped in its tracks anyway. \\n        require(account != address(0), \\\"Zero account\\\");\\n \\n        _captureUnclaimedYield(account); \\n        AccountEntry storage entry = _entries[account]; \\n \\n        // balanceOf(account) += entry.capturedUnclaimedYield \\n        // entry.capturedUnclaimedYield -= entry.capturedUnclaimedYield\\n        // => (balanceOf(account) + entry.capturedUnclaimedYield) is invariant\\n        ERC20._transfer(UNCLAIMED_DISTRIBUTED_YIELD_ACCOUNT, account, entry.capturedUnclaimedYield); \\n        entry.capturedUnclaimedYield = 0;\\n \\n        // A `Transfer` event from `UNCLAIMED_DISTRIBUTED_YIELD_ACCOUNT` always signifies a yield-claim,\\n        // so no special \\\"YieldClaim\\\" event is emitted \\n    } \\n\\n    /// @notice Calls `claimYieldFor` for the caller.\\n    function claimYield() external override {\\n        claimYieldFor(_msgSender()); \\n    }\\n} \\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/IDoubleDiceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDoubleDiceToken is IERC20 {\\n\\n    function claimYield() external;\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalYieldAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initTokenHolder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"byAmount\",\"type\":\"uint256\"}],\"name\":\"UnclaimedYieldIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldDistributed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"excludedAccounts\",\"type\":\"address[]\"}],\"name\":\"YieldDistribution\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNCLAIMED_DISTRIBUTED_YIELD_ACCOUNT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDISTRIBUTED_YIELD_ACCOUNT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balancePlusUnclaimedYieldOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnUndistributedYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimYieldFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"excludedAccounts\",\"type\":\"address[]\"}],\"name\":\"distributeYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unclaimedYieldOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DoubleDiceToken","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000204fce5e3e2502611000000000000000000000000000000000000000000000000bf49179e8e9da7af40000000000000000000000000000004b64e8187e44810e828a9e97c2feb01f2e3b8cc6","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}