{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title PetraAndChrisWeddingContract\r\n * \r\n *       .....           .....\r\n *   ,ad8PPPP88b,     ,d88PPPP8ba,\r\n *  d8P\"      \"Y8b, ,d8P\"      \"Y8b\r\n * dP'           \"8a8\"           `Yd\r\n * 8(              \"              )8\r\n * I8                             8I\r\n *  Yb,                         ,dP\r\n *   \"8a,                     ,a8\"\r\n *     \"8a,                 ,a8\"\r\n *       \"Yba             adP\" \r\n *         `Y8a         a8P'\r\n *           `88,     ,88'\r\n *            \"8b   d8\"\r\n *             \"8b d8\"\r\n *              `888'\r\n *                \"\r\n * \r\n * @notice this contract was developed on the journey \r\n * to the wedding and there was no time for a divorce function\r\n * so you better stay happily married - otherwise you need to \r\n * stop or fork Ethereum's MainNet ;-)\r\n *\r\n * I wish you all the best for the time ahead! \r\n * \r\n * \r\n * @author ligi@ligi.de\r\n * \r\n * Heart ASCII art by Norman Veilleux and Ryan Harding\r\n * \r\n */\r\ncontract PetraAndChrisWeddingContract {\r\n\r\n    // optimistic approach - think with these 2 people \r\n    // we can be optimistic about things\r\n    bool ceremonyCompletedWithSuccess = true; \r\n\r\n    // ceremony starts 30.09.2021 11:30 and last ~20 min\r\n    // adding 20 seconds to have it end on 420\r\n    uint256 ceremonyEndTime = 1632995420;\r\n\r\n    // give ligi a maximum 7 hours after the ceremony ended to report a problem\r\n    uint256 lastPossibleTimeForProblemReport = ceremonyEndTime + 420 minutes;\r\n    \r\n    /**\r\n     * @notice should never be called\r\n     * can only be called by ligi in case of ceremony problems\r\n     */\r\n    function reportCeremonyProblem() public {\r\n         // ligi will attend the ceremony and can call this function \r\n         // if one of them got cold feet or anything else went wrong \r\n        require(msg.sender == 0x0402c3407dcBD476C3d2Bbd80d1b375144bAF4a2);\r\n        \r\n        require(block.timestamp <= lastPossibleTimeForProblemReport);\r\n \r\n        // hope we do not reach this point\r\n        ceremonyCompletedWithSuccess = false; \r\n    }\r\n    \r\n    /**\r\n     * @return whether Chris and Petra are married\r\n     */\r\n    function arePetraAndChrisMarried() public view returns (bool) {\r\n        return (block.timestamp > ceremonyEndTime) && ceremonyCompletedWithSuccess;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"arePetraAndChrisMarried\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reportCeremonyProblem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PetraAndChrisWeddingContract","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://07542eca2d718d481b1d7b5e7d68a75bb2a47a9fbb04d841a0f925da915988ee"}]}