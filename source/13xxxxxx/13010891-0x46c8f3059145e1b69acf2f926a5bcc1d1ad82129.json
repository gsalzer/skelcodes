{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: Diemlibre Ware\r\n\r\n/** \r\n * This code/file/software is owned by Diemlibre and Diemlibre only.\r\n * All rights belong to Diemlibre.\r\n * Only Diemlibre authorizes the use of this code.\r\n * \r\n**/\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * ERC Interface for Diemlibre Token.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract DiemlibreFaucet {\r\n    \r\n    struct State {\r\n        bool isInit;\r\n        address self;\r\n        address owner;\r\n        address holder;\r\n        uint256 faucetAmount; // In smallest unit WEI\r\n        uint256 maxPageBuffer;\r\n    }\r\n    \r\n    IERC20 DLB;\r\n    address[] savedAddresses;\r\n    mapping(address => bool) sentAddresses;\r\n    State currentState;\r\n    \r\n    constructor(address _tokenAddress, address _holderAddress) {\r\n        require(_tokenAddress != address(0), \"Error! Invalid Token Address.\");\r\n        require(_holderAddress != address(0), \"Error! Invalid Holder Address.\");\r\n        require(_tokenAddress != _holderAddress, \"Token Address and Spender Address cann't be the same.\");\r\n        \r\n        currentState = State({\r\n            isInit: false,\r\n            self: address(0),\r\n            owner: msg.sender,\r\n            holder: _holderAddress,\r\n            faucetAmount: 2000000000000000000000,\r\n            maxPageBuffer: 1000\r\n        });\r\n        \r\n        DLB = IERC20(_tokenAddress);\r\n    }\r\n    \r\n    function _withdrawETHToOwner(uint256 _amount) private returns(bool) {\r\n         payable(currentState.owner).transfer(_amount);\r\n         \r\n         return true;\r\n    }\r\n    \r\n    function getCurrentState() external view returns(State memory) {\r\n        \r\n        return currentState;\r\n    }\r\n    \r\n    /**\r\n     * Method: faucet\r\n     * Des: To send a speicific amout of $DLB to addresses and you pay for gas.\r\n     **/\r\n    function diemlibreFaucet(address _faucetAddress) external returns(bool) {\r\n        require(sentAddresses[_faucetAddress] == false, \"Error 501: Address has already been fauced with DLB.\");\r\n        require(currentState.isInit, \"Error 500: Contract Not Initialized or Contract Turned Off.\");\r\n        \r\n        uint256 tokenAllowance = DLB.allowance(currentState.holder, currentState.self);\r\n        \r\n        require(currentState.faucetAmount > 0 && currentState.faucetAmount <= tokenAllowance, \"Error 502: Insufficient Liquidity\");\r\n        require(DLB.transferFrom(currentState.holder, _faucetAddress, currentState.faucetAmount), \"Error 503: Oops... Could not complete Transaction. Please try again later.\");\r\n        sentAddresses[_faucetAddress] = true;\r\n        savedAddresses.push(_faucetAddress);\r\n        return true;\r\n    }\r\n    \r\n        \r\n    // Owner Functions\r\n    \r\n    function init(address _selfAddress) external returns(bool) {\r\n        require(msg.sender == currentState.owner, \"Error 401: Unauthorized Access.\");\r\n        \r\n        currentState.self = _selfAddress;\r\n        currentState.isInit = true;\r\n        return true;\r\n    }\r\n    \r\n    function power(bool _state) external returns(State memory) {\r\n        require(msg.sender == currentState.owner, \"Error 401: Unauthorized Access.\");\r\n        \r\n        currentState.isInit = _state;\r\n        return currentState;\r\n    }\r\n    \r\n    function getSavedAddressesLength() external view returns(uint256) {\r\n         require(msg.sender == currentState.owner, \"Error 401: Unauthorized Access.\");\r\n         \r\n         return savedAddresses.length;\r\n    }\r\n    \r\n    function getSavedAddresses(uint256 _page) external view returns(address[] memory) {\r\n        require(msg.sender == currentState.owner, \"Error 401: Unauthorized Access.\");\r\n        require(_page >= 1, \"Error 400: Invalid Page Number.\");\r\n        \r\n        uint256 i;\r\n        uint256 j = 0;\r\n        address[] memory res;\r\n        uint256 lowerLimit;\r\n        uint256 upperLimit;\r\n        uint256 tempUpperLimit = _page * currentState.maxPageBuffer;\r\n        \r\n        if(savedAddresses.length < tempUpperLimit) {\r\n            if(savedAddresses.length < currentState.maxPageBuffer) lowerLimit = 0;\r\n            else lowerLimit = (_page - 1) * currentState.maxPageBuffer;\r\n            \r\n            upperLimit = savedAddresses.length;\r\n            \r\n            // If an unvailable page is requested lowerLimit will be greater than upperLimit\r\n            if(lowerLimit > upperLimit) return res;\r\n            \r\n            // If lowerLimit == 0, then you should requesting for only page 1\r\n            if(lowerLimit == 0 && _page > 1) return res;\r\n        } else {\r\n            lowerLimit = (_page - 1) * currentState.maxPageBuffer;\r\n            upperLimit = tempUpperLimit;\r\n        }\r\n        \r\n        uint256 resLength = upperLimit - lowerLimit;\r\n        res = new address[](resLength);\r\n\r\n        for(i = lowerLimit; i < upperLimit; i++) {\r\n            res[j] = savedAddresses[i];\r\n            j++;\r\n        }\r\n        \r\n        return res;\r\n    }\r\n    \r\n    function setHolderAddress(address _newHolder) external returns(State memory) {\r\n        require(msg.sender == currentState.owner, \"Error 401: Unauthorized Access.\");\r\n        \r\n        currentState.holder = _newHolder;\r\n        return currentState;\r\n    }\r\n    \r\n    function setFaucetAmount(uint256 _faucetAmount) external returns(State memory) {\r\n        require(msg.sender == currentState.owner, \"Error 401: Unauthorized Access.\");\r\n        \r\n        currentState.faucetAmount = _faucetAmount;\r\n        return currentState;\r\n    }\r\n    \r\n    function setMaxPageBuffer(uint256 _maxPageBuffer) external returns(State memory) {\r\n        require(msg.sender == currentState.owner, \"Error 401: Unauthorized Access.\");\r\n        \r\n        currentState.maxPageBuffer = _maxPageBuffer;\r\n        return currentState;\r\n    }\r\n    \r\n    function withdrawETHToOwner(uint256 _amount) external returns(bool) {\r\n        require(msg.sender == currentState.owner, \"Error 401: Unauthorized Access.\");\r\n        require(_amount > 0, \"Error 400: Invalid Amount! Amount must be greater than 0.\");\r\n        \r\n        return _withdrawETHToOwner(_amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holderAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_faucetAddress\",\"type\":\"address\"}],\"name\":\"diemlibreFaucet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentState\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isInit\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"faucetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPageBuffer\",\"type\":\"uint256\"}],\"internalType\":\"struct DiemlibreFaucet.State\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"}],\"name\":\"getSavedAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSavedAddressesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_selfAddress\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"power\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isInit\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"faucetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPageBuffer\",\"type\":\"uint256\"}],\"internalType\":\"struct DiemlibreFaucet.State\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_faucetAmount\",\"type\":\"uint256\"}],\"name\":\"setFaucetAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isInit\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"faucetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPageBuffer\",\"type\":\"uint256\"}],\"internalType\":\"struct DiemlibreFaucet.State\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newHolder\",\"type\":\"address\"}],\"name\":\"setHolderAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isInit\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"faucetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPageBuffer\",\"type\":\"uint256\"}],\"internalType\":\"struct DiemlibreFaucet.State\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPageBuffer\",\"type\":\"uint256\"}],\"name\":\"setMaxPageBuffer\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isInit\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"self\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"faucetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPageBuffer\",\"type\":\"uint256\"}],\"internalType\":\"struct DiemlibreFaucet.State\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETHToOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DiemlibreFaucet","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000087c22615435998d69aca34889d03155b694a94fc0000000000000000000000004e1763232bd3626b0e90f90680599a929ac9db38","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cbb3ffbcc2acb76972873f4b1685f9ec2d863fb3c3973062e5e7ec769bce748b"}]}