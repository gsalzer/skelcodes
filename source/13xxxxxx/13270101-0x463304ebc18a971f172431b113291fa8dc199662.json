{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/validator/validateGoodCompany.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.5;\\n\\nimport \\\"../interfaces/traitsOnChain.sol\\\";\\nimport \\\"./Ivalidator.sol\\\";\\ncontract validateGoodCompany is Ivalidator {\\n\\n    uint16  constant public trait_GoodCompany = 28;\\n\\n\\n    TraitsOnChain                 public     _toc;\\n    address                       public     token;\\n    mapping (uint256 => uint256)  public     validTokens;\\n\\n    constructor(TraitsOnChain toc,address _token) {\\n        token = _token;\\n        _toc = toc;\\n    }\\n\\n//\\n// function setTrait(uint16 traitID, uint16 tokenId, bool _value) public onlyAllowedOrSpecificTraitController(traitID) {\\n// function hasTrait(uint16 traitID, uint16 tokenId) public view returns (bool result) {\\n// traits 0 - 50\\n\\n    function is_valid(address _token, uint256 tokenid) external override returns (uint256,bool) {\\n        // get traits of card\\n        if (_token != token) return (0,false);\\n        uint16 _tokenid = uint16(tokenid);\\n        uint256 _cardType = getCardType(tokenid);\\n        //\\n        if (_toc.hasTrait(trait_GoodCompany,_tokenid)) {\\n            _toc.setTrait(trait_GoodCompany,_tokenid,false);\\n            return (_cardType, true);\\n        } else return (0,false);\\n    }\\n\\n    function getCardType(uint256 tokenid) internal pure returns (uint256) {\\n        if(10 <= tokenid && tokenid < 100) {\\n            return 0;\\n        } else if(100 <= tokenid && tokenid < 1000) {\\n            return 1;\\n        } else if (1000 < tokenid ) {\\n            return 2;\\n        }\\n    }\\n\\n\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/traitsOnChain.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\n\\ninterface TraitsOnChain {\\n    function hasTrait(uint16 traitID, uint16 tokenId) external view returns (bool);\\n    function setTrait(uint16 traitID, uint16 tokenId, bool _value) external;\\n}\\n\\n\"\r\n    },\r\n    \"contracts/validator/Ivalidator.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.5;\\n\\n\\ninterface Ivalidator {\\n    function is_valid(address _token, uint256 _tokenid) external returns (uint256,bool);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract TraitsOnChain\",\"name\":\"toc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_toc\",\"outputs\":[{\"internalType\":\"contract TraitsOnChain\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"is_valid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trait_GoodCompany\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"validateGoodCompany","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004fcb9b38cac63957c8877667b0adb9207c890a1300000000000000000000000097ca7fe0b0288f5eb85f386fed876618fb9b8ab8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}