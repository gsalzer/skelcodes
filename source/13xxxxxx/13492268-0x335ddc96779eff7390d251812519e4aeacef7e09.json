{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/airdrop/merkle/aave/main/importConnector/main.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { TokenInterface, AccountInterface } from \\\"../../../../../common/interfaces.sol\\\";\\nimport { AaveInterface, ATokenInterface } from \\\"./interfaces.sol\\\";\\nimport { Helpers } from \\\"./helpers.sol\\\";\\nimport { Events } from \\\"./events.sol\\\";\\n\\nabstract contract AaveResolver is Helpers, Events {\\n    function _TransferAtokens(\\n        uint _length,\\n        AaveInterface aave,\\n        ATokenInterface[] memory atokenContracts,\\n        uint[] memory amts,\\n        address[] memory tokens,\\n        address userAccount\\n    ) internal {\\n        for (uint i = 0; i < _length; i++) {\\n            if (amts[i] > 0) {\\n                uint256 _amt = amts[i];\\n                require(atokenContracts[i].transferFrom(userAccount, address(this), _amt), \\\"allowance?\\\");\\n                \\n                if (!getIsColl(tokens[i], address(this))) {\\n                    aave.setUserUseReserveAsCollateral(tokens[i], true);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _borrowOne(AaveInterface aave, address token, uint amt, uint rateMode) private {\\n        aave.borrow(token, amt, rateMode, referalCode, address(this));\\n    }\\n\\n    function _paybackBehalfOne(AaveInterface aave, address token, uint amt, uint rateMode, address user) private {\\n        aave.repay(token, amt, rateMode, user);\\n    }\\n\\n    function _BorrowStable(\\n        uint _length,\\n        AaveInterface aave,\\n        address[] memory tokens,\\n        uint256[] memory amts\\n    ) internal {\\n        for (uint i = 0; i < _length; i++) {\\n            if (amts[i] > 0) {\\n                _borrowOne(aave, tokens[i], amts[i], 1);\\n            }\\n        }\\n    }\\n\\n    function _BorrowVariable(\\n        uint _length,\\n        AaveInterface aave,\\n        address[] memory tokens,\\n        uint256[] memory amts\\n    ) internal {\\n        for (uint i = 0; i < _length; i++) {\\n            if (amts[i] > 0) {\\n                _borrowOne(aave, tokens[i], amts[i], 2);\\n            }\\n        }\\n    }\\n\\n    function _PaybackStable(\\n        uint _length,\\n        AaveInterface aave,\\n        address[] memory tokens,\\n        uint256[] memory amts,\\n        address user\\n    ) internal {\\n        for (uint i = 0; i < _length; i++) {\\n            if (amts[i] > 0) {\\n                _paybackBehalfOne(aave, tokens[i], amts[i], 1, user);\\n            }\\n        }\\n    }\\n\\n    function _PaybackVariable(\\n        uint _length,\\n        AaveInterface aave,\\n        address[] memory tokens,\\n        uint256[] memory amts,\\n        address user\\n    ) internal {\\n        for (uint i = 0; i < _length; i++) {\\n            if (amts[i] > 0) {\\n                _paybackBehalfOne(aave, tokens[i], amts[i], 2, user);\\n            }\\n        }\\n    }\\n\\n    function getBorrowAmount(address _token, address userAccount) \\n        internal\\n        view\\n        returns\\n    (\\n        uint256 stableBorrow,\\n        uint256 variableBorrow\\n    ) {\\n        (\\n            ,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        ) = aaveData.getReserveTokensAddresses(_token);\\n\\n        stableBorrow = ATokenInterface(stableDebtTokenAddress).balanceOf(userAccount);\\n        variableBorrow = ATokenInterface(variableDebtTokenAddress).balanceOf(userAccount);\\n    }\\n}\\n\\ncontract AaveImportHelpers is AaveResolver {\\n    struct ImportData {\\n        uint[] supplyAmts;\\n        uint[] totalBorrowAmts;\\n        uint[] variableBorrowAmts;\\n        uint[] stableBorrowAmts;\\n        address[] _supplyTokens;\\n        address[] _borrowTokens;\\n        ATokenInterface[] aTokens;\\n        uint[] supplySplitAmts;\\n        uint[] variableBorrowSplitAmts;\\n        uint[] stableBorrowSplitAmts;\\n        uint[] supplyFinalAmts;\\n        uint[] variableBorrowFinalAmts;\\n        uint[] stableBorrowFinalAmts;\\n        uint[] totalBorrowAmtsFinalAmts;\\n        uint[] totalBorrowAmtsSplitAmts;\\n        uint[] variableBorrowFinalAmtsWithFee;\\n        uint[] stableBorrowFinalAmtsWithFee;\\n        uint[] totalBorrowAmtsFinalAmtsWithFee;\\n    }\\n\\n    struct ImportInputData {\\n        address[] supplyTokens;\\n        address[] borrowTokens;\\n        bool convertStable;\\n        uint256 times;\\n        bool isFlash;\\n        uint[] flashFees;\\n    }\\n\\n    function getBorrowAmounts (\\n        address userAccount,\\n        AaveInterface aave,\\n        ImportInputData memory inputData,\\n        ImportData memory data\\n    ) internal returns(ImportData memory) {\\n        if (inputData.borrowTokens.length > 0) {\\n            data._borrowTokens = new address[](inputData.borrowTokens.length);\\n            data.variableBorrowAmts = new uint[](inputData.borrowTokens.length);\\n            data.stableBorrowAmts = new uint[](inputData.borrowTokens.length);\\n            data.totalBorrowAmts = new uint[](inputData.borrowTokens.length);\\n            data.variableBorrowSplitAmts = new uint256[](inputData.borrowTokens.length);\\n            data.variableBorrowFinalAmts = new uint256[](inputData.borrowTokens.length);\\n            data.stableBorrowSplitAmts = new uint256[](inputData.borrowTokens.length);\\n            data.stableBorrowFinalAmts = new uint256[](inputData.borrowTokens.length);\\n            data.totalBorrowAmtsSplitAmts = new uint256[](inputData.borrowTokens.length);\\n            data.totalBorrowAmtsFinalAmts = new uint256[](inputData.borrowTokens.length);\\n\\n            if (inputData.times > 0) {\\n                for (uint i = 0; i < inputData.borrowTokens.length; i++) {\\n                    for (uint j = i; j < inputData.borrowTokens.length; j++) {\\n                        if (j != i) {\\n                            require(inputData.borrowTokens[i] != inputData.borrowTokens[j], \\\"token-repeated\\\");\\n                        }\\n                    }\\n                }\\n\\n\\n                for (uint256 i = 0; i < inputData.borrowTokens.length; i++) {\\n                    address _token = inputData.borrowTokens[i] == ethAddr ? wethAddr : inputData.borrowTokens[i];\\n                    data._borrowTokens[i] = _token;\\n\\n                    (\\n                        data.stableBorrowAmts[i],\\n                        data.variableBorrowAmts[i]\\n                    ) = getBorrowAmount(_token, userAccount);\\n\\n                    data.totalBorrowAmts[i] = add(data.stableBorrowAmts[i], data.variableBorrowAmts[i]);\\n\\n                    if (data.totalBorrowAmts[i] > 0) {\\n                        uint256 _amt = inputData.times == 1 ? data.totalBorrowAmts[i] : uint256(-1);\\n                        TokenInterface(_token).approve(address(aave), _amt);\\n                    }\\n                }\\n\\n                if (inputData.times == 1) {\\n                    data.variableBorrowFinalAmts = data.variableBorrowAmts;\\n                    data.stableBorrowFinalAmts = data.stableBorrowAmts;\\n                    data.totalBorrowAmtsFinalAmts = data.totalBorrowAmts;\\n                } else {\\n                    for (uint i = 0; i < data.totalBorrowAmts.length; i++) {\\n                        data.variableBorrowSplitAmts[i] = data.variableBorrowAmts[i] / inputData.times;\\n                        data.variableBorrowFinalAmts[i] = sub(data.variableBorrowAmts[i], mul(data.variableBorrowSplitAmts[i], sub(inputData.times, 1)));\\n                        data.stableBorrowSplitAmts[i] = data.stableBorrowAmts[i] / inputData.times;\\n                        data.stableBorrowFinalAmts[i] = sub(data.stableBorrowAmts[i], mul(data.stableBorrowSplitAmts[i], sub(inputData.times, 1)));\\n                        data.totalBorrowAmtsSplitAmts[i] = data.totalBorrowAmts[i] / inputData.times;\\n                        data.totalBorrowAmtsFinalAmts[i] = sub(data.totalBorrowAmts[i], mul(data.totalBorrowAmtsSplitAmts[i], sub(inputData.times, 1)));\\n                    }\\n                }\\n            }\\n        }\\n        return data;\\n    }\\n\\n    function getBorrowFinalAmounts (\\n        address userAccount,\\n        ImportInputData memory inputData,\\n        ImportData memory data\\n    ) internal view returns(\\n        uint[] memory variableBorrowFinalAmts,\\n        uint[] memory variableBorrowFinalAmtsWithFee,\\n        uint[] memory stableBorrowFinalAmts,\\n        uint[] memory stableBorrowFinalAmtsWithFee,\\n        uint[] memory totalBorrowAmtsFinalAmts,\\n        uint[] memory totalBorrowAmtsFinalAmtsWithFee\\n    ) {    \\n        if (inputData.borrowTokens.length > 0) {\\n            variableBorrowFinalAmts = new uint256[](inputData.borrowTokens.length);\\n            variableBorrowFinalAmtsWithFee = new uint256[](inputData.borrowTokens.length);\\n            stableBorrowFinalAmts = new uint256[](inputData.borrowTokens.length);\\n            stableBorrowFinalAmtsWithFee = new uint256[](inputData.borrowTokens.length);\\n            totalBorrowAmtsFinalAmts = new uint[](inputData.borrowTokens.length);\\n            totalBorrowAmtsFinalAmtsWithFee = new uint[](inputData.borrowTokens.length);\\n\\n            if (inputData.times > 0) {\\n                for (uint i = 0; i < data._borrowTokens.length; i++) {\\n                    address _token = data._borrowTokens[i];\\n                    (\\n                        stableBorrowFinalAmts[i],\\n                        variableBorrowFinalAmts[i]\\n                    ) = getBorrowAmount(_token, userAccount);\\n\\n                    if (variableBorrowFinalAmts[i] != 0) {\\n                        variableBorrowFinalAmtsWithFee[i] = variableBorrowFinalAmts[i] + inputData.flashFees[i];\\n                    } else {\\n                        stableBorrowFinalAmtsWithFee[i] = stableBorrowFinalAmts[i] + inputData.flashFees[i];\\n                    }\\n\\n                    totalBorrowAmtsFinalAmtsWithFee[i] = add(stableBorrowFinalAmts[i], variableBorrowFinalAmts[i]);\\n                }\\n            }\\n        }\\n    }\\n\\n    function getSupplyAmounts (\\n        address userAccount,\\n        ImportInputData memory inputData,\\n        ImportData memory data\\n    ) internal view returns(ImportData memory) {\\n        data.supplyAmts = new uint[](inputData.supplyTokens.length);\\n        data._supplyTokens = new address[](inputData.supplyTokens.length);\\n        data.aTokens = new ATokenInterface[](inputData.supplyTokens.length);\\n        data.supplySplitAmts = new uint[](inputData.supplyTokens.length);\\n        data.supplyFinalAmts = new uint[](inputData.supplyTokens.length);\\n\\n        for (uint i = 0; i < inputData.supplyTokens.length; i++) {\\n            for (uint j = i; j < inputData.supplyTokens.length; j++) {\\n                if (j != i) {\\n                    require(inputData.supplyTokens[i] != inputData.supplyTokens[j], \\\"token-repeated\\\");\\n                }\\n            }\\n        }\\n\\n        for (uint i = 0; i < inputData.supplyTokens.length; i++) {\\n            address _token = inputData.supplyTokens[i] == ethAddr ? wethAddr : inputData.supplyTokens[i];\\n            (address _aToken, ,) = aaveData.getReserveTokensAddresses(_token);\\n            data._supplyTokens[i] = _token;\\n            data.aTokens[i] = ATokenInterface(_aToken);\\n            data.supplyAmts[i] = data.aTokens[i].balanceOf(userAccount);\\n        }\\n\\n        if ((inputData.times == 1 && inputData.isFlash) || inputData.times == 0) {\\n            data.supplyFinalAmts = data.supplyAmts;\\n        } else {\\n            for (uint i = 0; i < data.supplyAmts.length; i++) {\\n                uint _times = inputData.isFlash ? inputData.times : inputData.times + 1;\\n                data.supplySplitAmts[i] = data.supplyAmts[i] / _times;\\n                data.supplyFinalAmts[i] = sub(data.supplyAmts[i], mul(data.supplySplitAmts[i], sub(_times, 1)));\\n            }\\n        }\\n\\n        return data;\\n    }\\n\\n    function getSupplyFinalAmounts(\\n        address userAccount,\\n        ImportInputData memory inputData,\\n        ImportData memory data\\n    ) internal view returns(uint[] memory supplyFinalAmts) {\\n        supplyFinalAmts = new uint[](inputData.supplyTokens.length);\\n\\n        for (uint i = 0; i < data.aTokens.length; i++) {\\n            supplyFinalAmts[i] = data.aTokens[i].balanceOf(userAccount);\\n        }\\n    }\\n}\\n\\ncontract AaveImportResolver is AaveImportHelpers {\\n\\n    function _importAave(\\n        address userAccount,\\n        ImportInputData memory inputData\\n    ) internal returns (string memory _eventName, bytes memory _eventParam) {\\n        require(AccountInterface(address(this)).isAuth(userAccount), \\\"user-account-not-auth\\\");\\n\\n        require(inputData.supplyTokens.length > 0, \\\"0-length-not-allowed\\\");\\n\\n        ImportData memory data;\\n\\n        AaveInterface aave = AaveInterface(aaveProvider.getLendingPool());\\n\\n        data = getBorrowAmounts(userAccount, aave, inputData, data);\\n        data = getSupplyAmounts(userAccount, inputData, data);\\n\\n        if (!inputData.isFlash && inputData.times > 0) {\\n            _TransferAtokens(\\n                inputData.supplyTokens.length,\\n                aave,\\n                data.aTokens,\\n                data.supplySplitAmts,\\n                data._supplyTokens,\\n                userAccount\\n            );\\n        } else if (inputData.times == 0) {\\n            _TransferAtokens(\\n                inputData.supplyTokens.length,\\n                aave,\\n                data.aTokens,\\n                data.supplyFinalAmts,\\n                data._supplyTokens,\\n                userAccount\\n            );\\n        }\\n\\n        for (uint i = 0; i < inputData.times; i++) {\\n            if (i == sub(inputData.times, 1)) {\\n\\n                if (!inputData.isFlash && inputData.times == 1) {\\n                    data.supplyFinalAmts = getSupplyFinalAmounts(userAccount, inputData, data);\\n                }\\n\\n                if (inputData.times > 1) {\\n                    (\\n                        ,\\n                        data.variableBorrowFinalAmtsWithFee,\\n                        ,\\n                        data.stableBorrowFinalAmtsWithFee,\\n                        ,\\n                        data.totalBorrowAmtsFinalAmtsWithFee\\n                    ) = getBorrowFinalAmounts(userAccount, inputData, data);\\n                    \\n                    data.supplyFinalAmts = getSupplyFinalAmounts(userAccount, inputData, data);\\n                }\\n\\n                if (inputData.convertStable) {\\n                    _BorrowVariable(inputData.borrowTokens.length, aave, data._borrowTokens, data.totalBorrowAmtsFinalAmtsWithFee);\\n                } else {\\n                    _BorrowStable(inputData.borrowTokens.length, aave, data._borrowTokens, data.stableBorrowFinalAmtsWithFee);\\n                    _BorrowVariable(inputData.borrowTokens.length, aave, data._borrowTokens, data.variableBorrowFinalAmtsWithFee);\\n                }\\n\\n                _PaybackStable(inputData.borrowTokens.length, aave, data._borrowTokens, data.stableBorrowFinalAmts, userAccount);\\n                _PaybackVariable(inputData.borrowTokens.length, aave, data._borrowTokens, data.variableBorrowFinalAmts, userAccount);\\n                _TransferAtokens(inputData.supplyTokens.length, aave, data.aTokens, data.supplyFinalAmts, data._supplyTokens, userAccount);\\n            } else {\\n                if (inputData.convertStable) {\\n                    _BorrowVariable(inputData.borrowTokens.length, aave, data._borrowTokens, data.totalBorrowAmtsSplitAmts);\\n                } else {\\n                    _BorrowStable(inputData.borrowTokens.length, aave, data._borrowTokens, data.stableBorrowSplitAmts);\\n                    _BorrowVariable(inputData.borrowTokens.length, aave, data._borrowTokens, data.variableBorrowSplitAmts);\\n                }\\n\\n                _PaybackStable(inputData.borrowTokens.length, aave, data._borrowTokens, data.stableBorrowSplitAmts, userAccount);\\n                _PaybackVariable(inputData.borrowTokens.length, aave, data._borrowTokens, data.variableBorrowSplitAmts, userAccount);\\n                _TransferAtokens(inputData.supplyTokens.length, aave, data.aTokens, data.supplySplitAmts, data._supplyTokens, userAccount);\\n            }\\n        }\\n\\n        _eventName = \\\"LogAaveV2Import(address,bool,address[],address[],uint256[],uint256[],uint256[])\\\";\\n        _eventParam = abi.encode(\\n            userAccount,\\n            inputData.convertStable,\\n            inputData.supplyTokens,\\n            inputData.borrowTokens,\\n            data.supplyAmts,\\n            data.stableBorrowAmts,\\n            data.variableBorrowAmts\\n        );\\n    }\\n\\n    function importAave(\\n        address userAccount,\\n        ImportInputData memory inputData\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n\\n        (_eventName, _eventParam) = _importAave(userAccount, inputData);\\n    }\\n\\n\\n    function migrateAave(\\n        ImportInputData memory inputData\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        (_eventName, _eventParam) = _importAave(msg.sender, inputData);\\n    }\\n}\\n\\ncontract ConnectV2AaveV2MerkleImport is AaveImportResolver {\\n\\n    string public constant name = \\\"AaveV2-Merkle-Import-v2\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n    function transfer(address, uint) external;\\n    function transferFrom(address, address, uint) external;\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint);\\n}\\n\\ninterface MemoryInterface {\\n    function getUint(uint id) external returns (uint num);\\n    function setUint(uint id, uint val) external;\\n}\\n\\ninterface InstaMapping {\\n    function cTokenMapping(address) external view returns (address);\\n    function gemJoinMapping(bytes32) external view returns (address);\\n}\\n\\ninterface AccountInterface {\\n    function enable(address) external;\\n    function disable(address) external;\\n    function isAuth(address) external view returns (bool);\\n    function cast(\\n        string[] calldata _targets,\\n        bytes[] calldata _datas,\\n        address _origin\\n    ) external payable returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/airdrop/merkle/aave/main/importConnector/interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface AaveInterface {\\n    function deposit(address _asset, uint256 _amount, address _onBehalfOf, uint16 _referralCode) external;\\n    function withdraw(address _asset, uint256 _amount, address _to) external;\\n    function borrow(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _interestRateMode,\\n        uint16 _referralCode,\\n        address _onBehalfOf\\n    ) external;\\n    function repay(address _asset, uint256 _amount, uint256 _rateMode, address _onBehalfOf) external;\\n    function setUserUseReserveAsCollateral(address _asset, bool _useAsCollateral) external;\\n    function getUserAccountData(address user) external view returns (\\n        uint256 totalCollateralETH,\\n        uint256 totalDebtETH,\\n        uint256 availableBorrowsETH,\\n        uint256 currentLiquidationThreshold,\\n        uint256 ltv,\\n        uint256 healthFactor\\n    );\\n}\\n\\ninterface AaveLendingPoolProviderInterface {\\n    function getLendingPool() external view returns (address);\\n}\\n\\n// Aave Protocol Data Provider\\ninterface AaveDataProviderInterface {\\n    function getUserReserveData(address _asset, address _user) external view returns (\\n        uint256 currentATokenBalance,\\n        uint256 currentStableDebt,\\n        uint256 currentVariableDebt,\\n        uint256 principalStableDebt,\\n        uint256 scaledVariableDebt,\\n        uint256 stableBorrowRate,\\n        uint256 liquidityRate,\\n        uint40 stableRateLastUpdated,\\n        bool usageAsCollateralEnabled\\n    );\\n    function getReserveConfigurationData(address asset) external view returns (\\n        uint256 decimals,\\n        uint256 ltv,\\n        uint256 liquidationThreshold,\\n        uint256 liquidationBonus,\\n        uint256 reserveFactor,\\n        bool usageAsCollateralEnabled,\\n        bool borrowingEnabled,\\n        bool stableBorrowRateEnabled,\\n        bool isActive,\\n        bool isFrozen\\n    );\\n\\n    function getReserveTokensAddresses(address asset) external view returns (\\n        address aTokenAddress,\\n        address stableDebtTokenAddress,\\n        address variableDebtTokenAddress\\n    );\\n}\\n\\ninterface AaveAddressProviderRegistryInterface {\\n    function getAddressesProvidersList() external view returns (address[] memory);\\n}\\n\\ninterface ATokenInterface {\\n    function scaledBalanceOf(address _user) external view returns (uint256);\\n    function isTransferAllowed(address _user, uint256 _amount) external view returns (bool);\\n    function balanceOf(address _user) external view returns(uint256);\\n    function transferFrom(address, address, uint) external returns (bool);\\n    function allowance(address, address) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/airdrop/merkle/aave/main/importConnector/helpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { DSMath } from \\\"../../../../../common/math.sol\\\";\\nimport { Stores } from \\\"../../../../../common/stores.sol\\\";\\nimport { AaveLendingPoolProviderInterface, AaveDataProviderInterface } from \\\"./interfaces.sol\\\";\\n\\nabstract contract Helpers is DSMath, Stores {\\n    /**\\n     * @dev Aave referal code\\n     */\\n    uint16 constant internal referalCode = 3228;\\n\\n    /**\\n     * @dev Aave Provider\\n     */\\n    AaveLendingPoolProviderInterface constant internal aaveProvider = AaveLendingPoolProviderInterface(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\\n\\n    /**\\n     * @dev Aave Data Provider\\n     */\\n    AaveDataProviderInterface constant internal aaveData = AaveDataProviderInterface(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d);\\n\\n    function getIsColl(address token, address user) internal view returns (bool isCol) {\\n        (, , , , , , , , isCol) = aaveData.getUserReserveData(token, user);\\n    }\\n}\"\r\n    },\r\n    \"contracts/airdrop/merkle/aave/main/importConnector/events.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ncontract Events {\\n    event LogAaveV2Import(\\n        address indexed user,\\n        bool convertStable,\\n        address[] supplyTokens,\\n        address[] borrowTokens,\\n        uint[] supplyAmts,\\n        uint[] stableBorrowAmts,\\n        uint[] variableBorrowAmts\\n    );\\n}\"\r\n    },\r\n    \"contracts/common/math.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n  uint constant WAD = 10 ** 18;\\n  uint constant RAY = 10 ** 27;\\n\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(x, y);\\n  }\\n\\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\\n    z = SafeMath.sub(x, y);\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.mul(x, y);\\n  }\\n\\n  function div(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.div(x, y);\\n  }\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n  }\\n\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n  }\\n\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  function toInt(uint x) internal pure returns (int y) {\\n    y = int(x);\\n    require(y >= 0, \\\"int-overflow\\\");\\n  }\\n\\n  function toRad(uint wad) internal pure returns (uint rad) {\\n    rad = mul(wad, 10 ** 27);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/common/stores.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { MemoryInterface, InstaMapping } from \\\"./interfaces.sol\\\";\\n\\n\\nabstract contract Stores {\\n\\n  /**\\n   * @dev Return ethereum address\\n   */\\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /**\\n   * @dev Return Wrapped ETH address\\n   */\\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /**\\n   * @dev Return memory variable address\\n   */\\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\\n\\n  /**\\n   * @dev Return InstaDApp Mapping Addresses\\n   */\\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\\n\\n  /**\\n   * @dev Get Uint value from InstaMemory Contract.\\n   */\\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\\n  }\\n\\n  /**\\n  * @dev Set Uint value in InstaMemory Contract.\\n  */\\n  function setUint(uint setId, uint val) virtual internal {\\n    if (setId != 0) instaMemory.setUint(setId, val);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"convertStable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"supplyTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"borrowTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"supplyAmts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"stableBorrowAmts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"variableBorrowAmts\",\"type\":\"uint256[]\"}],\"name\":\"LogAaveV2Import\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAccount\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"supplyTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"borrowTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"convertStable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFlash\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"flashFees\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AaveImportHelpers.ImportInputData\",\"name\":\"inputData\",\"type\":\"tuple\"}],\"name\":\"importAave\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"supplyTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"borrowTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"convertStable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFlash\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"flashFees\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AaveImportHelpers.ImportInputData\",\"name\":\"inputData\",\"type\":\"tuple\"}],\"name\":\"migrateAave\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ConnectV2AaveV2MerkleImport","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}