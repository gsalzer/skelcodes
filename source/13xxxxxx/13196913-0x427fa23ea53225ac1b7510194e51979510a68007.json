{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PRBProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.4;\\n\\nimport \\\"./IPRBProxy.sol\\\";\\nimport \\\"./access/Ownable.sol\\\";\\n\\n/// @notice Emitted when attempting to initialize the contract again.\\nerror PRBProxy__AlreadyInitialized();\\n\\n/// @notice Emitted when execution reverted with no reason.\\nerror PRBProxy__ExecutionReverted();\\n\\n/// @notice Emitted when passing an EOA or an undeployed contract as the target.\\nerror PRBProxy__TargetInvalid(address target);\\n\\n/// @notice Emitted when passing the zero address as the target.\\nerror PRBProxy__TargetZeroAddress();\\n\\n/// @title PRBProxy\\n/// @author Paul Razvan Berg\\ncontract PRBProxy is\\n    IPRBProxy, // One dependency\\n    Ownable // One dependency\\n{\\n    /// PUBLIC STORAGE ///\\n\\n    /// @inheritdoc IPRBProxy\\n    uint256 public override minGasReserve;\\n\\n    /// INTERNAL STORAGE ///\\n\\n    /// @dev Indicates that the contract has been initialized.\\n    bool internal initialized;\\n\\n    /// CONSTRUCTOR ///\\n\\n    /// @dev Initializes the implementation contract. The owner is set to the zero address so that no function\\n    /// can be called post deployment. This eliminates the risk of an accidental self destruct.\\n    constructor() {\\n        initialized = true;\\n        owner = address(0);\\n    }\\n\\n    /// FALLBACK FUNCTION ///\\n\\n    /// @dev Called when Ether is sent and the call data is empty.\\n    receive() external payable {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /// PUBLIC NON-CONSTANT FUNCTIONS ///\\n\\n    /// @inheritdoc IPRBProxy\\n    function initialize(address owner_) external override {\\n        // Checks\\n        if (initialized) {\\n            revert PRBProxy__AlreadyInitialized();\\n        }\\n\\n        // Effects\\n        initialized = true;\\n        minGasReserve = 5000;\\n        setOwner(owner_);\\n    }\\n\\n    /// @inheritdoc IPRBProxy\\n    function execute(address target, bytes memory data)\\n        external\\n        payable\\n        override\\n        onlyOwner\\n        returns (bytes memory response)\\n    {\\n        // Check that the target is not the zero address.\\n        if (target == address(0)) {\\n            revert PRBProxy__TargetZeroAddress();\\n        }\\n\\n        // Check that the target is a valid contract.\\n        uint256 codeSize;\\n        assembly {\\n            codeSize := extcodesize(target)\\n        }\\n        if (codeSize == 0) {\\n            revert PRBProxy__TargetInvalid(target);\\n        }\\n\\n        // Ensure that there will remain enough gas after the DELEGATECALL.\\n        uint256 stipend = gasleft() - minGasReserve;\\n\\n        // Delegate call to the target contract.\\n        bool success;\\n        (success, response) = target.delegatecall{ gas: stipend }(data);\\n\\n        // Log the execution.\\n        emit Execute(target, data, response);\\n\\n        // Check if the call was successful or not.\\n        if (!success) {\\n            // If there is return data, the call reverted with a reason or a custom error.\\n            if (response.length > 0) {\\n                assembly {\\n                    let returndata_size := mload(response)\\n                    revert(add(32, response), returndata_size)\\n                }\\n            } else {\\n                revert PRBProxy__ExecutionReverted();\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IPRBProxy\\n    function setMinGasReserve(uint256 newMinGasReserve) external override onlyOwner {\\n        minGasReserve = newMinGasReserve;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IPRBProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.4;\\n\\nimport \\\"./access/IOwnable.sol\\\";\\n\\n/// @title IPRBProxy\\n/// @author Paul Razvan Berg\\n/// @notice Proxy contract to compose transactions on owner's behalf.\\ninterface IPRBProxy is IOwnable {\\n    /// EVENTS ///\\n\\n    event Execute(address indexed target, bytes data, bytes response);\\n\\n    /// PUBLIC CONSTANT FUNCTIONS ///\\n\\n    /// @notice How much gas should remain for executing the remainder of the assembly code.\\n    function minGasReserve() external view returns (uint256);\\n\\n    /// PUBLIC NON-CONSTANT FUNCTIONS ///\\n\\n    /// @notice Delegate calls to the target contract by forwarding the call data. This function returns\\n    /// the data it gets back, including when the contract call reverts with a reason or custom error.\\n    ///\\n    /// @dev Requirements:\\n    /// - The caller must be the owner.\\n    /// - `target` must be a contract.\\n    ///\\n    /// @param target The address of the target contract.\\n    /// @param data Function selector plus ABI encoded data.\\n    /// @return response The response received from the target contract.\\n    function execute(address target, bytes memory data) external payable returns (bytes memory response);\\n\\n    /// @notice Initializes the contract by setting the address of the owner of the proxy.\\n    ///\\n    /// @dev Supposed to be called by an EIP-1167 clone.\\n    ///\\n    /// Requirements:\\n    /// - Can only be called once.\\n    ///\\n    /// @param owner_ The address of the owner of the proxy.\\n    function initialize(address owner_) external;\\n\\n    /// @notice Sets a new value for the `minGasReserve` storage variable.\\n    /// @dev Requirements:\\n    /// - The caller must be the owner.\\n    function setMinGasReserve(uint256 newMinGasReserve) external;\\n}\\n\"\r\n    },\r\n    \"contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\n/// @notice Emitted when the caller is not the owner.\\nerror Ownable__NotOwner(address owner, address caller);\\n\\n/// @notice Emitted when setting the owner to the zero address.\\nerror Ownable__OwnerZeroAddress();\\n\\n/// @title Ownable\\n/// @author Paul Razvan Berg\\ncontract Ownable is IOwnable {\\n    /// PUBLIC STORAGE ///\\n\\n    /// @inheritdoc IOwnable\\n    address public override owner;\\n\\n    /// MODIFIERS ///\\n\\n    /// @notice Throws if called by any account other than the owner.\\n    modifier onlyOwner() {\\n        if (owner != msg.sender) {\\n            revert Ownable__NotOwner(owner, msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// PUBLIC NON-CONSTANT FUNCTIONS ///\\n\\n    /// @inheritdoc IOwnable\\n    function renounceOwnership() external virtual override onlyOwner {\\n        owner = address(0);\\n        emit TransferOwnership(owner, address(0));\\n    }\\n\\n    /// @inheritdoc IOwnable\\n    function transferOwnership(address newOwner) external virtual override onlyOwner {\\n        setOwner(newOwner);\\n    }\\n\\n    /// INTERNAL NON-CONSTANT FUNCTIONS ///\\n    function setOwner(address newOwner) internal virtual {\\n        if (newOwner == address(0)) {\\n            revert Ownable__OwnerZeroAddress();\\n        }\\n        owner = newOwner;\\n        emit TransferOwnership(owner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: WTFPL\\npragma solidity >=0.8.4;\\n\\n/// @title IOwnable\\n/// @author Paul Razvan Berg\\n/// @notice Contract module that provides a basic access control mechanism, where there is an\\n/// account (an owner) that can be granted exclusive access to specific functions.\\n///\\n/// By default, the owner account will be the one that deploys the contract. This can later be\\n/// changed with {transfer}.\\n///\\n/// This module is used through inheritance. It will make available the modifier `onlyOwner`,\\n/// which can be applied to your functions to restrict their use to the owner.\\n///\\n/// @dev Forked from OpenZeppelin\\n/// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/access/Ownable.sol\\ninterface IOwnable {\\n    /// EVENTS ///\\n\\n    /// @notice Emitted when ownership is transferred.\\n    /// @param oldOwner The address of the old owner.\\n    /// @param newOwner The address of the new owner.\\n    event TransferOwnership(address indexed oldOwner, address indexed newOwner);\\n\\n    /// NON-CONSTANT FUNCTIONS ///\\n\\n    /// @notice Leaves the contract without owner, so it will not be possible to call `onlyOwner`\\n    /// functions anymore.\\n    ///\\n    /// WARNING: Doing this will leave the contract without an owner, thereby removing any\\n    /// functionality that is only available to the owner.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - The caller must be the owner.\\n    function renounceOwnership() external;\\n\\n    /// @notice Transfers the owner of the contract to a new account (`newOwner`). Can only be\\n    /// called by the current owner.\\n    /// @param newOwner The acount of the new owner.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// CONSTANT FUNCTIONS ///\\n\\n    /// @notice The address of the owner account or contract.\\n    /// @return The address of the owner.\\n    function owner() external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Ownable__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable__OwnerZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBProxy__AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBProxy__ExecutionReverted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PRBProxy__TargetInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBProxy__TargetZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"Execute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minGasReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinGasReserve\",\"type\":\"uint256\"}],\"name\":\"setMinGasReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PRBProxy","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}