{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"StakingV1_1.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2020, bZeroX, LLC <https://bzx.network/>. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"StakingState.sol\\\";\\nimport \\\"StakingConstants.sol\\\";\\nimport \\\"StakingVoteDelegator.sol\\\";\\nimport \\\"IVestingToken.sol\\\";\\nimport \\\"IBZx.sol\\\";\\nimport \\\"IPriceFeeds.sol\\\";\\nimport \\\"MathUtil.sol\\\";\\nimport \\\"IMasterChefSushi.sol\\\";\\nimport \\\"IStaking.sol\\\";\\nimport \\\"PausableGuardian.sol\\\";\\n\\ncontract StakingV1_1 is StakingState, StakingConstants, PausableGuardian {\\n    using MathUtil for uint256;\\n\\n    modifier onlyEOA() {\\n        require(msg.sender == tx.origin, \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    function getCurrentFeeTokens()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return currentFeeTokens;\\n    }\\n\\n    function _pendingSushiRewards(address _user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 pendingSushi = IMasterChefSushi(SUSHI_MASTERCHEF)\\n            .pendingSushi(BZRX_ETH_SUSHI_MASTERCHEF_PID, address(this));\\n\\n        uint256 totalSupply = _totalSupplyPerToken[LPToken];\\n        return _pendingAltRewards(\\n            SUSHI,\\n            _user,\\n            balanceOfByAsset(LPToken, _user),\\n            totalSupply != 0 ? pendingSushi.mul(1e12).div(totalSupply) : 0\\n        );\\n    }\\n\\n\\n    function pendingCrvRewards(address account) external returns(uint256){\\n        (uint256 bzrxRewardsEarned, uint256 stableCoinRewardsEarned, uint256 bzrxRewardsVesting, uint256 stableCoinRewardsVesting) = _earned(\\n            account,\\n            bzrxPerTokenStored,\\n            stableCoinPerTokenStored\\n        );\\n\\n        (,stableCoinRewardsEarned) = _syncVesting(\\n            account,\\n            bzrxRewardsEarned,\\n            stableCoinRewardsEarned,\\n            bzrxRewardsVesting,\\n            stableCoinRewardsVesting\\n        );\\n        return _pendingCrvRewards(account, stableCoinRewardsEarned);\\n    }\\n\\n    function _pendingCrvRewards(address _user, uint256 stableCoinRewardsEarned)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 totalSupply = curve3PoolGauge.balanceOf(address(this));\\n        uint256 pendingCrv = curve3PoolGauge.claimable_tokens(address(this));\\n        return _pendingAltRewards(\\n            CRV,\\n            _user,\\n            stableCoinRewardsEarned,\\n            (totalSupply != 0) ? pendingCrv.mul(1e12).div(totalSupply) : 0\\n        );\\n    }\\n\\n    function _pendingAltRewards(address token, address _user, uint256 userSupply, uint256 extraRewardsPerShare)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _altRewardsPerShare = altRewardsPerShare[token].add(extraRewardsPerShare);\\n        if (_altRewardsPerShare == 0)\\n            return 0;\\n\\n        IStaking.AltRewardsUserInfo memory altRewardsUserInfo = userAltRewardsPerShare[_user][token];\\n        return altRewardsUserInfo.pendingRewards.add(\\n                (_altRewardsPerShare.sub(altRewardsUserInfo.rewardsPerShare)).mul(userSupply).div(1e12)\\n            );\\n    }\\n\\n    function _depositToSushiMasterchef(uint256 amount)\\n        internal\\n    {\\n        uint256 sushiBalanceBefore = IERC20(SUSHI).balanceOf(address(this));\\n        IMasterChefSushi(SUSHI_MASTERCHEF).deposit(\\n            BZRX_ETH_SUSHI_MASTERCHEF_PID,\\n            amount\\n        );\\n        uint256 sushiRewards = IERC20(SUSHI).balanceOf(address(this)) - sushiBalanceBefore;\\n        if (sushiRewards != 0) {\\n            _addAltRewards(SUSHI, sushiRewards);\\n        }\\n    }\\n\\n    function _withdrawFromSushiMasterchef(uint256 amount)\\n        internal\\n    {\\n        uint256 sushiBalanceBefore = IERC20(SUSHI).balanceOf(address(this));\\n        IMasterChefSushi(SUSHI_MASTERCHEF).withdraw(\\n            BZRX_ETH_SUSHI_MASTERCHEF_PID,\\n            amount\\n        );\\n        uint256 sushiRewards = IERC20(SUSHI).balanceOf(address(this)) - sushiBalanceBefore;\\n        if (sushiRewards != 0) {\\n            _addAltRewards(SUSHI, sushiRewards);\\n        }\\n    }\\n\\n\\n    function _depositTo3Pool(\\n        uint256 amount)\\n        internal\\n    {\\n\\n        if(amount == 0)\\n            curve3PoolGauge.deposit(curve3Crv.balanceOf(address(this)));\\n\\n        // Trigger claim rewards from curve pool\\n        uint256 crvBalanceBefore = IERC20(CRV).balanceOf(address(this));\\n        curveMinter.mint(address(curve3PoolGauge));\\n        uint256 crvBalanceAfter = IERC20(CRV).balanceOf(address(this)) - crvBalanceBefore;\\n        if(crvBalanceAfter != 0){\\n            _addAltRewards(CRV, crvBalanceAfter);\\n        }\\n    }\\n\\n    function _withdrawFrom3Pool(uint256 amount)\\n        internal\\n    {\\n        if(amount != 0)\\n            curve3PoolGauge.withdraw(amount);\\n\\n        //Trigger claim rewards from curve pool\\n        uint256 crvBalanceBefore = IERC20(CRV).balanceOf(address(this));\\n        curveMinter.mint(address(curve3PoolGauge));\\n        uint256 crvBalanceAfter = IERC20(CRV).balanceOf(address(this)) - crvBalanceBefore;\\n        if(crvBalanceAfter != 0){\\n            _addAltRewards(CRV, crvBalanceAfter);\\n        }\\n    }\\n\\n\\n    function stake(\\n        address[] memory tokens,\\n        uint256[] memory values\\n    )\\n        public\\n        pausable\\n        updateRewards(msg.sender)\\n    {\\n        require(tokens.length == values.length, \\\"count mismatch\\\");\\n\\n        StakingVoteDelegator _voteDelegator = StakingVoteDelegator(voteDelegator);\\n        address currentDelegate = _voteDelegator.delegates(msg.sender);\\n\\n        ProposalState memory _proposalState = _getProposalState();\\n        uint256 votingBalanceBefore = _votingFromStakedBalanceOf(msg.sender, _proposalState, true);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address token = tokens[i];\\n            require(token == BZRX || token == vBZRX || token == iBZRX || token == LPToken, \\\"invalid token\\\");\\n\\n            uint256 stakeAmount = values[i];\\n            if (stakeAmount == 0) {\\n                continue;\\n            }\\n            uint256 pendingBefore = (token == LPToken) ? _pendingSushiRewards(msg.sender) : 0;\\n            _balancesPerToken[token][msg.sender] = _balancesPerToken[token][msg.sender].add(stakeAmount);\\n            _totalSupplyPerToken[token] = _totalSupplyPerToken[token].add(stakeAmount);\\n\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), stakeAmount);\\n\\n            // Deposit to sushi masterchef\\n            if (token == LPToken) {\\n                _depositToSushiMasterchef(\\n                    IERC20(LPToken).balanceOf(address(this))\\n                );\\n\\n                userAltRewardsPerShare[msg.sender][SUSHI] = IStaking.AltRewardsUserInfo({\\n                        rewardsPerShare: altRewardsPerShare[SUSHI],\\n                        pendingRewards: pendingBefore\\n                    }\\n                );\\n            }\\n\\n            emit Stake(\\n                msg.sender,\\n                token,\\n                currentDelegate,\\n                stakeAmount\\n            );\\n        }\\n\\n        _voteDelegator.moveDelegatesByVotingBalance(\\n            votingBalanceBefore,\\n            _votingFromStakedBalanceOf(msg.sender, _proposalState, true),\\n            msg.sender\\n        );\\n    }\\n\\n    function unstake(\\n        address[] memory tokens,\\n        uint256[] memory values\\n    )\\n        public\\n        pausable\\n        updateRewards(msg.sender)\\n    {\\n        require(tokens.length == values.length, \\\"count mismatch\\\");\\n\\n        StakingVoteDelegator _voteDelegator = StakingVoteDelegator(voteDelegator);\\n        address currentDelegate = _voteDelegator.delegates(msg.sender);\\n\\n        ProposalState memory _proposalState = _getProposalState();\\n        uint256 votingBalanceBefore = _votingFromStakedBalanceOf(msg.sender, _proposalState, true);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address token = tokens[i];\\n            require(token == BZRX || token == vBZRX || token == iBZRX || token == LPToken || token == LPTokenOld, \\\"invalid token\\\");\\n\\n            uint256 unstakeAmount = values[i];\\n            uint256 stakedAmount = _balancesPerToken[token][msg.sender];\\n            if (unstakeAmount == 0 || stakedAmount == 0) {\\n                continue;\\n            }\\n            if (unstakeAmount > stakedAmount) {\\n                unstakeAmount = stakedAmount;\\n            }\\n\\n            uint256 pendingBefore = (token == LPToken) ? _pendingSushiRewards(msg.sender) : 0;\\n\\n            _balancesPerToken[token][msg.sender] = stakedAmount - unstakeAmount; // will not overflow\\n            _totalSupplyPerToken[token] = _totalSupplyPerToken[token] - unstakeAmount; // will not overflow\\n\\n            if (token == BZRX && IERC20(BZRX).balanceOf(address(this)) < unstakeAmount) {\\n                // settle vested BZRX only if needed\\n                IVestingToken(vBZRX).claim();\\n            }\\n\\n            // Withdraw to sushi masterchef\\n            if (token == LPToken) {\\n                _withdrawFromSushiMasterchef(unstakeAmount);\\n\\n                userAltRewardsPerShare[msg.sender][SUSHI] = IStaking.AltRewardsUserInfo({\\n                        rewardsPerShare: altRewardsPerShare[SUSHI],\\n                        pendingRewards: pendingBefore\\n                    }\\n                );\\n\\n            }\\n            IERC20(token).safeTransfer(msg.sender, unstakeAmount);\\n\\n            emit Unstake(\\n                msg.sender,\\n                token,\\n                currentDelegate,\\n                unstakeAmount\\n            );\\n        }\\n        _voteDelegator.moveDelegatesByVotingBalance(\\n            votingBalanceBefore,\\n            _votingFromStakedBalanceOf(msg.sender, _proposalState, true),\\n            msg.sender\\n        );\\n    }\\n\\n    function claim(\\n        bool restake)\\n        external\\n        pausable\\n        updateRewards(msg.sender)\\n        returns (uint256 bzrxRewardsEarned, uint256 stableCoinRewardsEarned)\\n    {\\n        return _claim(restake);\\n    }\\n\\n\\n    function claimAltRewards()\\n        external\\n        pausable\\n        returns (uint256 sushiRewardsEarned, uint256 crvRewardsEarned)\\n    {\\n        sushiRewardsEarned = _claimSushi();\\n        crvRewardsEarned = _claimCrv();\\n\\n        if(sushiRewardsEarned != 0){\\n            emit ClaimAltRewards(msg.sender, SUSHI, sushiRewardsEarned);\\n        }\\n        if(crvRewardsEarned != 0){\\n            emit ClaimAltRewards(msg.sender, CRV, crvRewardsEarned);\\n        }\\n    }\\n\\n    function claimBzrx()\\n        external\\n        pausable\\n        updateRewards(msg.sender)\\n        returns (uint256 bzrxRewardsEarned)\\n    {\\n        bzrxRewardsEarned = _claimBzrx(false);\\n\\n        emit Claim(\\n            msg.sender,\\n            bzrxRewardsEarned,\\n            0\\n        );\\n    }\\n\\n    function claim3Crv()\\n        external\\n        pausable\\n        updateRewards(msg.sender)\\n        returns (uint256 stableCoinRewardsEarned)\\n    {\\n        stableCoinRewardsEarned = _claim3Crv();\\n\\n        emit Claim(\\n            msg.sender,\\n            0,\\n            stableCoinRewardsEarned\\n        );\\n    }\\n\\n    function claimSushi()\\n        external\\n        pausable\\n        returns (uint256 sushiRewardsEarned)\\n    {\\n        sushiRewardsEarned = _claimSushi();\\n        if(sushiRewardsEarned != 0){\\n            emit ClaimAltRewards(msg.sender, SUSHI, sushiRewardsEarned);\\n        }\\n    }\\n\\n    function claimCrv()\\n        external\\n        pausable\\n        returns (uint256 crvRewardsEarned)\\n    {\\n        crvRewardsEarned = _claimCrv();\\n        if(crvRewardsEarned != 0){\\n            emit ClaimAltRewards(msg.sender, CRV, crvRewardsEarned);\\n        }\\n    }\\n\\n    function _claim(\\n        bool restake)\\n        internal\\n        returns (uint256 bzrxRewardsEarned, uint256 stableCoinRewardsEarned)\\n    {\\n        bzrxRewardsEarned = _claimBzrx(restake);\\n        stableCoinRewardsEarned = _claim3Crv();\\n\\n        emit Claim(\\n            msg.sender,\\n            bzrxRewardsEarned,\\n            stableCoinRewardsEarned\\n        );\\n    }\\n\\n    function _claimBzrx(\\n        bool restake)\\n        internal\\n        returns (uint256 bzrxRewardsEarned)\\n    {\\n        ProposalState memory _proposalState = _getProposalState();\\n        uint256 votingBalanceBefore = _votingFromStakedBalanceOf(msg.sender, _proposalState, true);\\n\\n        bzrxRewardsEarned = bzrxRewards[msg.sender];\\n        if (bzrxRewardsEarned != 0) {\\n            bzrxRewards[msg.sender] = 0;\\n            if (restake) {\\n                _restakeBZRX(\\n                    msg.sender,\\n                    bzrxRewardsEarned\\n                );\\n            } else {\\n                if (IERC20(BZRX).balanceOf(address(this)) < bzrxRewardsEarned) {\\n                    // settle vested BZRX only if needed\\n                    IVestingToken(vBZRX).claim();\\n                }\\n\\n                IERC20(BZRX).transfer(msg.sender, bzrxRewardsEarned);\\n            }\\n        }\\n        StakingVoteDelegator(voteDelegator).moveDelegatesByVotingBalance(\\n            votingBalanceBefore,\\n            _votingFromStakedBalanceOf(msg.sender, _proposalState, true),\\n            msg.sender\\n        );\\n    }\\n\\n    function _claim3Crv()\\n        internal \\n        returns (uint256 stableCoinRewardsEarned)\\n    {\\n        stableCoinRewardsEarned = stableCoinRewards[msg.sender];\\n        if (stableCoinRewardsEarned != 0) {\\n            uint256 pendingCrv = _pendingCrvRewards(msg.sender, stableCoinRewardsEarned);\\n            uint256 curve3CrvBalance = curve3Crv.balanceOf(address(this));\\n            _withdrawFrom3Pool(stableCoinRewardsEarned);\\n\\n            userAltRewardsPerShare[msg.sender][CRV] = IStaking.AltRewardsUserInfo({\\n                    rewardsPerShare: altRewardsPerShare[CRV],\\n                    pendingRewards: pendingCrv\\n                }\\n            );\\n\\n            stableCoinRewards[msg.sender] = 0;\\n            curve3Crv.transfer(msg.sender, stableCoinRewardsEarned);\\n        }\\n    }\\n\\n    function _claimSushi()\\n        internal\\n        returns (uint256)\\n    {\\n        address _user = msg.sender;\\n        uint256 lptUserSupply = balanceOfByAsset(LPToken, _user);\\n\\n        //This will trigger claim rewards from sushi masterchef\\n        _depositToSushiMasterchef(\\n            IERC20(LPToken).balanceOf(address(this))\\n        );\\n\\n        uint256 pendingSushi = _pendingAltRewards(SUSHI, _user, lptUserSupply, 0);\\n\\n        userAltRewardsPerShare[_user][SUSHI] = IStaking.AltRewardsUserInfo({\\n                rewardsPerShare: altRewardsPerShare[SUSHI],\\n                pendingRewards: 0\\n            }\\n        );\\n        if (pendingSushi != 0) {\\n            IERC20(SUSHI).safeTransfer(_user, pendingSushi);\\n        }\\n\\n\\n        return pendingSushi;\\n    }\\n\\n    function _claimCrv()\\n        internal\\n        returns (uint256)\\n    {\\n        address _user = msg.sender;\\n\\n        _depositTo3Pool(0);\\n        (,uint256 stableCoinRewardsEarned,,) = _earned(_user, bzrxPerTokenStored, stableCoinPerTokenStored);\\n        uint256 pendingCrv = _pendingCrvRewards(_user, stableCoinRewardsEarned);\\n\\n        userAltRewardsPerShare[_user][CRV] = IStaking.AltRewardsUserInfo({\\n                rewardsPerShare: altRewardsPerShare[CRV],\\n                pendingRewards: 0\\n            }\\n        );\\n        if (pendingCrv != 0) {\\n            IERC20(CRV).safeTransfer(_user, pendingCrv);\\n        }\\n\\n        return pendingCrv;\\n    }\\n\\n    function _restakeBZRX(\\n        address account,\\n        uint256 amount)\\n        internal\\n    {\\n        _balancesPerToken[BZRX][account] = _balancesPerToken[BZRX][account]\\n            .add(amount);\\n\\n        _totalSupplyPerToken[BZRX] = _totalSupplyPerToken[BZRX]\\n            .add(amount);\\n\\n        emit Stake(\\n            account,\\n            BZRX,\\n            account, //currentDelegate,\\n            amount\\n        );\\n\\n    }\\n\\n    function exit()\\n        public\\n        // unstake() does check pausable\\n    {\\n        address[] memory tokens = new address[](4);\\n        uint256[] memory values = new uint256[](4);\\n        tokens[0] = iBZRX;\\n        tokens[1] = LPToken;\\n        tokens[2] = vBZRX;\\n        tokens[3] = BZRX;\\n        values[0] = uint256(-1);\\n        values[1] = uint256(-1);\\n        values[2] = uint256(-1);\\n        values[3] = uint256(-1);\\n        \\n        unstake(tokens, values); // calls updateRewards\\n        _claim(false);\\n    }\\n\\n    modifier updateRewards(address account) {\\n        uint256 _bzrxPerTokenStored = bzrxPerTokenStored;\\n        uint256 _stableCoinPerTokenStored = stableCoinPerTokenStored;\\n\\n        (uint256 bzrxRewardsEarned, uint256 stableCoinRewardsEarned, uint256 bzrxRewardsVesting, uint256 stableCoinRewardsVesting) = _earned(\\n            account,\\n            _bzrxPerTokenStored,\\n            _stableCoinPerTokenStored\\n        );\\n        bzrxRewardsPerTokenPaid[account] = _bzrxPerTokenStored;\\n        stableCoinRewardsPerTokenPaid[account] = _stableCoinPerTokenStored;\\n\\n        // vesting amounts get updated before sync\\n        bzrxVesting[account] = bzrxRewardsVesting;\\n        stableCoinVesting[account] = stableCoinRewardsVesting;\\n\\n        (bzrxRewards[account], stableCoinRewards[account]) = _syncVesting(\\n            account,\\n            bzrxRewardsEarned,\\n            stableCoinRewardsEarned,\\n            bzrxRewardsVesting,\\n            stableCoinRewardsVesting\\n        );\\n        vestingLastSync[account] = block.timestamp;\\n\\n        _;\\n    }\\n\\n    function earned(\\n        address account)\\n        external\\n        view\\n        returns (uint256 bzrxRewardsEarned, uint256 stableCoinRewardsEarned, uint256 bzrxRewardsVesting,\\n            uint256 stableCoinRewardsVesting, uint256 sushiRewardsEarned)\\n    {\\n        (bzrxRewardsEarned, stableCoinRewardsEarned, bzrxRewardsVesting, stableCoinRewardsVesting) = _earned(\\n            account,\\n            bzrxPerTokenStored,\\n            stableCoinPerTokenStored\\n        );\\n\\n        (bzrxRewardsEarned, stableCoinRewardsEarned) = _syncVesting(\\n            account,\\n            bzrxRewardsEarned,\\n            stableCoinRewardsEarned,\\n            bzrxRewardsVesting,\\n            stableCoinRewardsVesting\\n        );\\n\\n        // discount vesting amounts for vesting time\\n        uint256 multiplier = vestedBalanceForAmount(\\n            1e36,\\n            0,\\n            block.timestamp\\n        );\\n        bzrxRewardsVesting = bzrxRewardsVesting\\n            .sub(bzrxRewardsVesting\\n                .mul(multiplier)\\n                .div(1e36)\\n            );\\n        stableCoinRewardsVesting = stableCoinRewardsVesting\\n            .sub(stableCoinRewardsVesting\\n                .mul(multiplier)\\n                .div(1e36)\\n            );\\n\\n        uint256 pendingSushi = IMasterChefSushi(SUSHI_MASTERCHEF)\\n            .pendingSushi(BZRX_ETH_SUSHI_MASTERCHEF_PID, address(this));\\n\\n        sushiRewardsEarned = _pendingAltRewards(\\n            SUSHI,\\n            account,\\n            balanceOfByAsset(LPToken, account),\\n            (_totalSupplyPerToken[LPToken] != 0) ? pendingSushi.mul(1e12).div(_totalSupplyPerToken[LPToken]) : 0\\n        );\\n    }\\n\\n    function _earned(\\n        address account,\\n        uint256 _bzrxPerToken,\\n        uint256 _stableCoinPerToken)\\n        internal\\n        view\\n        returns (uint256 bzrxRewardsEarned, uint256 stableCoinRewardsEarned, uint256 bzrxRewardsVesting, uint256 stableCoinRewardsVesting)\\n    {\\n        uint256 bzrxPerTokenUnpaid = _bzrxPerToken.sub(bzrxRewardsPerTokenPaid[account]);\\n        uint256 stableCoinPerTokenUnpaid = _stableCoinPerToken.sub(stableCoinRewardsPerTokenPaid[account]);\\n\\n        bzrxRewardsEarned = bzrxRewards[account];\\n        stableCoinRewardsEarned = stableCoinRewards[account];\\n        bzrxRewardsVesting = bzrxVesting[account];\\n        stableCoinRewardsVesting = stableCoinVesting[account];\\n\\n        if (bzrxPerTokenUnpaid != 0 || stableCoinPerTokenUnpaid != 0) {\\n            uint256 value;\\n            uint256 multiplier;\\n            uint256 lastSync;\\n\\n            (uint256 vestedBalance, uint256 vestingBalance) = balanceOfStored(account);\\n\\n            value = vestedBalance\\n                .mul(bzrxPerTokenUnpaid);\\n            value /= 1e36;\\n            bzrxRewardsEarned = value\\n                .add(bzrxRewardsEarned);\\n\\n            value = vestedBalance\\n                .mul(stableCoinPerTokenUnpaid);\\n            value /= 1e36;\\n            stableCoinRewardsEarned = value\\n                .add(stableCoinRewardsEarned);\\n\\n            if (vestingBalance != 0 && bzrxPerTokenUnpaid != 0) {\\n                // add new vesting amount for BZRX\\n                value = vestingBalance\\n                    .mul(bzrxPerTokenUnpaid);\\n                value /= 1e36;\\n                bzrxRewardsVesting = bzrxRewardsVesting\\n                    .add(value);\\n\\n                // true up earned amount to vBZRX vesting schedule\\n                lastSync = vestingLastSync[account];\\n                multiplier = vestedBalanceForAmount(\\n                    1e36,\\n                    0,\\n                    lastSync\\n                );\\n                value = value\\n                    .mul(multiplier);\\n                value /= 1e36;\\n                bzrxRewardsEarned = bzrxRewardsEarned\\n                    .add(value);\\n            }\\n            if (vestingBalance != 0 && stableCoinPerTokenUnpaid != 0) {\\n                // add new vesting amount for 3crv\\n                value = vestingBalance\\n                    .mul(stableCoinPerTokenUnpaid);\\n                value /= 1e36;\\n                stableCoinRewardsVesting = stableCoinRewardsVesting\\n                    .add(value);\\n\\n                // true up earned amount to vBZRX vesting schedule\\n                if (lastSync == 0) {\\n                    lastSync = vestingLastSync[account];\\n                    multiplier = vestedBalanceForAmount(\\n                        1e36,\\n                        0,\\n                        lastSync\\n                    );\\n                }\\n                value = value\\n                    .mul(multiplier);\\n                value /= 1e36;\\n                stableCoinRewardsEarned = stableCoinRewardsEarned\\n                    .add(value);\\n            }\\n        }\\n    }\\n\\n    function _syncVesting(\\n        address account,\\n        uint256 bzrxRewardsEarned,\\n        uint256 stableCoinRewardsEarned,\\n        uint256 bzrxRewardsVesting,\\n        uint256 stableCoinRewardsVesting)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 lastVestingSync = vestingLastSync[account];\\n\\n        if (lastVestingSync != block.timestamp) {\\n            uint256 rewardsVested;\\n            uint256 multiplier = vestedBalanceForAmount(\\n                1e36,\\n                lastVestingSync,\\n                block.timestamp\\n            );\\n\\n            if (bzrxRewardsVesting != 0) {\\n                rewardsVested = bzrxRewardsVesting\\n                    .mul(multiplier)\\n                    .div(1e36);\\n                bzrxRewardsEarned += rewardsVested;\\n            }\\n\\n            if (stableCoinRewardsVesting != 0) {\\n                rewardsVested = stableCoinRewardsVesting\\n                    .mul(multiplier)\\n                    .div(1e36);\\n                stableCoinRewardsEarned += rewardsVested;\\n            }\\n\\n            uint256 vBZRXBalance = _balancesPerToken[vBZRX][account];\\n            if (vBZRXBalance != 0) {\\n                // add vested BZRX to rewards balance\\n                rewardsVested = vBZRXBalance\\n                    .mul(multiplier)\\n                    .div(1e36);\\n                bzrxRewardsEarned += rewardsVested;\\n            }\\n        }\\n\\n        return (bzrxRewardsEarned, stableCoinRewardsEarned);\\n    }\\n\\n    // note: anyone can contribute rewards to the contract\\n    function addDirectRewards(\\n        address[] calldata accounts,\\n        uint256[] calldata bzrxAmounts,\\n        uint256[] calldata stableCoinAmounts)\\n        external\\n        pausable\\n        returns (uint256 bzrxTotal, uint256 stableCoinTotal)\\n    {\\n        require(accounts.length == bzrxAmounts.length && accounts.length == stableCoinAmounts.length, \\\"count mismatch\\\");\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            bzrxRewards[accounts[i]] = bzrxRewards[accounts[i]].add(bzrxAmounts[i]);\\n            bzrxTotal = bzrxTotal.add(bzrxAmounts[i]);\\n            stableCoinRewards[accounts[i]] = stableCoinRewards[accounts[i]].add(stableCoinAmounts[i]);\\n            stableCoinTotal = stableCoinTotal.add(stableCoinAmounts[i]);\\n        }\\n        if (bzrxTotal != 0) {\\n            IERC20(BZRX).transferFrom(msg.sender, address(this), bzrxTotal);\\n        }\\n        if (stableCoinTotal != 0) {\\n            curve3Crv.transferFrom(msg.sender, address(this), stableCoinTotal);\\n            _depositTo3Pool(stableCoinTotal);\\n        }\\n    }\\n\\n    // note: anyone can contribute rewards to the contract\\n    function addRewards(\\n        uint256 newBZRX,\\n        uint256 newStableCoin)\\n        external\\n        pausable\\n    {\\n        if (newBZRX != 0 || newStableCoin != 0) {\\n            _addRewards(newBZRX, newStableCoin);\\n            if (newBZRX != 0) {\\n                IERC20(BZRX).transferFrom(msg.sender, address(this), newBZRX);\\n            }\\n            if (newStableCoin != 0) {\\n                curve3Crv.transferFrom(msg.sender, address(this), newStableCoin);\\n                _depositTo3Pool(newStableCoin);\\n            }\\n        }\\n    }\\n\\n    function _addRewards(\\n        uint256 newBZRX,\\n        uint256 newStableCoin)\\n        internal\\n    {\\n        (vBZRXWeightStored, iBZRXWeightStored, LPTokenWeightStored) = getVariableWeights();\\n\\n        uint256 totalTokens = totalSupplyStored();\\n        require(totalTokens != 0, \\\"nothing staked\\\");\\n\\n        bzrxPerTokenStored = newBZRX\\n            .mul(1e36)\\n            .div(totalTokens)\\n            .add(bzrxPerTokenStored);\\n\\n        stableCoinPerTokenStored = newStableCoin\\n            .mul(1e36)\\n            .div(totalTokens)\\n            .add(stableCoinPerTokenStored);\\n\\n        lastRewardsAddTime = block.timestamp;\\n\\n        emit AddRewards(\\n            msg.sender,\\n            newBZRX,\\n            newStableCoin\\n        );\\n    }\\n\\n    function addAltRewards(address token, uint256 amount) public {\\n        if (amount != 0) {\\n            _addAltRewards(token, amount);\\n            IERC20(token).transferFrom(msg.sender, address(this), amount);\\n        }\\n    }\\n\\n    function _addAltRewards(address token, uint256 amount) internal {\\n\\n        address poolAddress = token == SUSHI ? LPToken : token;\\n\\n        uint256 totalSupply = (token == CRV) ? curve3PoolGauge.balanceOf(address(this)) :_totalSupplyPerToken[poolAddress];\\n        require(totalSupply != 0, \\\"no deposits\\\");\\n\\n        altRewardsPerShare[token] = altRewardsPerShare[token]\\n            .add(amount.mul(1e12).div(totalSupply));\\n\\n        emit AddAltRewards(msg.sender, token, amount);\\n    }\\n\\n    function getVariableWeights()\\n        public\\n        view\\n        returns (uint256 vBZRXWeight, uint256 iBZRXWeight, uint256 LPTokenWeight)\\n    {\\n        uint256 totalVested = vestedBalanceForAmount(\\n            _startingVBZRXBalance,\\n            0,\\n            block.timestamp\\n        );\\n\\n        vBZRXWeight = SafeMath.mul(_startingVBZRXBalance - totalVested, 1e18) // overflow not possible\\n            .div(_startingVBZRXBalance);\\n\\n        iBZRXWeight = _calcIBZRXWeight();\\n\\n        uint256 lpTokenSupply = _totalSupplyPerToken[LPToken];\\n        if (lpTokenSupply != 0) {\\n            // staked LP tokens are assumed to represent the total unstaked supply (circulated supply - staked BZRX)\\n            uint256 normalizedLPTokenSupply = initialCirculatingSupply +\\n                totalVested -\\n                _totalSupplyPerToken[BZRX];\\n\\n            LPTokenWeight = normalizedLPTokenSupply\\n                .mul(1e18)\\n                .div(lpTokenSupply);\\n        }\\n    }\\n\\n    function _calcIBZRXWeight()\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return IERC20(BZRX).balanceOf(iBZRX)\\n            .mul(1e50)\\n            .div(IERC20(iBZRX).totalSupply());\\n    }\\n\\n    function balanceOfByAsset(\\n        address token,\\n        address account)\\n        public\\n        view\\n        returns (uint256 balance)\\n    {\\n        balance = _balancesPerToken[token][account];\\n    }\\n\\n    function balanceOfByAssets(\\n        address account)\\n        external\\n        view\\n        returns (\\n            uint256 bzrxBalance,\\n            uint256 iBZRXBalance,\\n            uint256 vBZRXBalance,\\n            uint256 LPTokenBalance,\\n            uint256 LPTokenBalanceOld\\n        )\\n    {\\n        return (\\n            balanceOfByAsset(BZRX, account),\\n            balanceOfByAsset(iBZRX, account),\\n            balanceOfByAsset(vBZRX, account),\\n            balanceOfByAsset(LPToken, account),\\n            balanceOfByAsset(LPTokenOld, account)\\n        );\\n    }\\n\\n    function balanceOfStored(\\n        address account)\\n        public\\n        view\\n        returns (uint256 vestedBalance, uint256 vestingBalance)\\n    {\\n        uint256 balance = _balancesPerToken[vBZRX][account];\\n        if (balance != 0) {\\n            vestingBalance = balance\\n                .mul(vBZRXWeightStored)\\n                .div(1e18);\\n        }\\n\\n        vestedBalance = _balancesPerToken[BZRX][account];\\n\\n        balance = _balancesPerToken[iBZRX][account];\\n        if (balance != 0) {\\n            vestedBalance = balance\\n                .mul(iBZRXWeightStored)\\n                .div(1e50)\\n                .add(vestedBalance);\\n        }\\n\\n        balance = _balancesPerToken[LPToken][account];\\n        if (balance != 0) {\\n            vestedBalance = balance\\n                .mul(LPTokenWeightStored)\\n                .div(1e18)\\n                .add(vestedBalance);\\n        }\\n    }\\n\\n    function totalSupplyByAsset(\\n        address token)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _totalSupplyPerToken[token];\\n    }\\n\\n    function totalSupplyStored()\\n        public\\n        view\\n        returns (uint256 supply)\\n    {\\n        supply = _totalSupplyPerToken[vBZRX]\\n            .mul(vBZRXWeightStored)\\n            .div(1e18);\\n\\n        supply = _totalSupplyPerToken[BZRX]\\n            .add(supply);\\n\\n        supply = _totalSupplyPerToken[iBZRX]\\n            .mul(iBZRXWeightStored)\\n            .div(1e50)\\n            .add(supply);\\n\\n        supply = _totalSupplyPerToken[LPToken]\\n            .mul(LPTokenWeightStored)\\n            .div(1e18)\\n            .add(supply);\\n    }\\n\\n    function vestedBalanceForAmount(\\n        uint256 tokenBalance,\\n        uint256 lastUpdate,\\n        uint256 vestingEndTime)\\n        public\\n        view\\n        returns (uint256 vested)\\n    {\\n        vestingEndTime = vestingEndTime.min256(block.timestamp);\\n        if (vestingEndTime > lastUpdate) {\\n            if (vestingEndTime <= vestingCliffTimestamp ||\\n                lastUpdate >= vestingEndTimestamp) {\\n                // time cannot be before vesting starts\\n                // OR all vested token has already been claimed\\n                return 0;\\n            }\\n            if (lastUpdate < vestingCliffTimestamp) {\\n                // vesting starts at the cliff timestamp\\n                lastUpdate = vestingCliffTimestamp;\\n            }\\n            if (vestingEndTime > vestingEndTimestamp) {\\n                // vesting ends at the end timestamp\\n                vestingEndTime = vestingEndTimestamp;\\n            }\\n\\n            uint256 timeSinceClaim = vestingEndTime.sub(lastUpdate);\\n            vested = tokenBalance.mul(timeSinceClaim) / vestingDurationAfterCliff; // will never divide by 0\\n        }\\n    }\\n\\n    function votingFromStakedBalanceOf(\\n        address account)\\n        external\\n        view\\n        returns (uint256 totalVotes)\\n    {\\n        return _votingFromStakedBalanceOf(account, _getProposalState(), true);\\n    }\\n\\n    function votingBalanceOf(\\n        address account,\\n        uint256 proposalId)\\n        external\\n        view\\n        returns (uint256 totalVotes)\\n    {\\n        (,,,uint256 startBlock,,,,,,) = GovernorBravoDelegateStorageV1(governor).proposals(proposalId);\\n\\n        if (startBlock == 0) return 0;\\n\\n        return _votingBalanceOf(account, _proposalState[proposalId], startBlock - 1);\\n    }\\n\\n    function votingBalanceOfNow(\\n        address account)\\n        external\\n        view\\n        returns (uint256 totalVotes)\\n    {\\n        return _votingBalanceOf(account, _getProposalState(), block.number - 1);\\n    }\\n\\n    function _setProposalVals(\\n        address account,\\n        uint256 proposalId)\\n        public\\n        returns (uint256)\\n    {\\n        require(msg.sender == governor, \\\"unauthorized\\\");\\n        require(_proposalState[proposalId].proposalTime == 0, \\\"proposal exists\\\");\\n        ProposalState memory newProposal = _getProposalState();\\n        _proposalState[proposalId] = newProposal;\\n\\n        return _votingBalanceOf(account, newProposal, block.number - 1);\\n    }\\n\\n    function _getProposalState()\\n        internal\\n        view\\n        returns (ProposalState memory)\\n    {\\n        return ProposalState({\\n            proposalTime: block.timestamp - 1,\\n            iBZRXWeight: _calcIBZRXWeight(),\\n            lpBZRXBalance: 0, // IERC20(BZRX).balanceOf(LPToken),\\n            lpTotalSupply: 0  //IERC20(LPToken).totalSupply()\\n        });\\n    }\\n\\n    // Voting balance not including delegated votes\\n    function _votingFromStakedBalanceOf(\\n        address account,\\n        ProposalState memory proposal,\\n        bool skipVestingLastSyncCheck)\\n        internal\\n        view\\n        returns (uint256 totalVotes)\\n    {\\n        uint256 _vestingLastSync = vestingLastSync[account];\\n        if (proposal.proposalTime == 0 || (!skipVestingLastSyncCheck && _vestingLastSync > proposal.proposalTime - 1)) {\\n            return 0;\\n        }\\n\\n        // user is attributed a staked balance of vested BZRX, from their last update to the present\\n        totalVotes = vestedBalanceForAmount(\\n            _balancesPerToken[vBZRX][account],\\n            _vestingLastSync,\\n            proposal.proposalTime\\n        );\\n\\n        totalVotes = _balancesPerToken[BZRX][account]\\n            .add(bzrxRewards[account]) // unclaimed BZRX rewards count as votes\\n            .add(totalVotes);\\n\\n        totalVotes = _balancesPerToken[iBZRX][account]\\n            .mul(proposal.iBZRXWeight)\\n            .div(1e50)\\n            .add(totalVotes);\\n\\n        // LPToken votes are measured based on amount of underlying BZRX staked\\n        /*totalVotes = proposal.lpBZRXBalance\\n            .mul(_balancesPerToken[LPToken][account])\\n            .div(proposal.lpTotalSupply)\\n            .add(totalVotes);*/\\n    }\\n\\n    // Voting balance including delegated votes\\n    function _votingBalanceOf(\\n        address account,\\n        ProposalState memory proposal,\\n        uint blocknumber)\\n        internal\\n        view\\n        returns (uint256 totalVotes)\\n    {\\n        StakingVoteDelegator _voteDelegator = StakingVoteDelegator(voteDelegator);\\n        if(_voteDelegator._isPaused(_voteDelegator.delegate.selector) || _voteDelegator._isPaused(_voteDelegator.delegateBySig.selector)){\\n            totalVotes = _votingFromStakedBalanceOf(account, proposal, false);\\n        }\\n        else{\\n            address currentDelegate = _voteDelegator.delegates(account);\\n            totalVotes = _voteDelegator.getPriorVotes(account, blocknumber)\\n                .add((currentDelegate == ZERO_ADDRESS)?_votingFromStakedBalanceOf(account, proposal, false):0);\\n        }\\n    }\\n\\n    // OnlyOwner functions\\n    function updateSettings(\\n        address settingsTarget,\\n        bytes memory callData)\\n        public\\n        onlyOwner\\n        returns(bytes memory)\\n    {\\n        (bool result,) = settingsTarget.delegatecall(callData);\\n        assembly {\\n            let size := returndatasize\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, size)\\n            if eq(result, 0) { revert(ptr, size) }\\n            return(ptr, size)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"StakingState.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2021, bZxDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"StakingUpgradeable.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"EnumerableBytes32Set.sol\\\";\\nimport \\\"IStaking.sol\\\";\\n\\n\\ncontract StakingState is StakingUpgradeable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;\\n\\n    uint256 public constant initialCirculatingSupply = 1030000000e18 - 889389933e18;\\n    address internal constant ZERO_ADDRESS = address(0);\\n\\n    bool public isPaused;\\n\\n    address public fundsWallet;\\n\\n    mapping(address => uint256) internal _totalSupplyPerToken;                      // token => value\\n    mapping(address => mapping(address => uint256)) internal _balancesPerToken;     // token => account => value\\n\\n    mapping(address => address) internal delegate;                                    // user => delegate (DEPRECIATED)\\n    mapping(address => mapping(address => uint256)) internal delegatedPerToken;       // token => user => value (DEPRECIATED)\\n\\n    uint256 public bzrxPerTokenStored;\\n    mapping(address => uint256) public bzrxRewardsPerTokenPaid;                     // user => value\\n    mapping(address => uint256) public bzrxRewards;                                 // user => value\\n    mapping(address => uint256) public bzrxVesting;                                 // user => value\\n\\n    uint256 public stableCoinPerTokenStored;\\n    mapping(address => uint256) public stableCoinRewardsPerTokenPaid;               // user => value\\n    mapping(address => uint256) public stableCoinRewards;                           // user => value\\n    mapping(address => uint256) public stableCoinVesting;                           // user => value\\n\\n    uint256 public vBZRXWeightStored;\\n    uint256 public iBZRXWeightStored;\\n    uint256 public LPTokenWeightStored;\\n\\n    EnumerableBytes32Set.Bytes32Set internal _delegatedSet;\\n\\n    uint256 public lastRewardsAddTime;\\n\\n    mapping(address => uint256) public vestingLastSync;\\n\\n    mapping(address => address[]) public swapPaths;\\n    mapping(address => uint256) public stakingRewards;\\n    uint256 public rewardPercent = 50e18;\\n    uint256 public maxUniswapDisagreement = 3e18;\\n    uint256 public maxCurveDisagreement = 3e18;\\n    uint256 public callerRewardDivisor = 100;\\n\\n    address[] public currentFeeTokens;\\n\\n    struct ProposalState {\\n        uint256 proposalTime;\\n        uint256 iBZRXWeight;\\n        uint256 lpBZRXBalance;\\n        uint256 lpTotalSupply;\\n    }\\n    address public governor;\\n    mapping(uint256 => ProposalState) internal _proposalState;\\n\\n    mapping(address => uint256[]) public altRewardsRounds;                          // depreciated\\n    mapping(address => uint256) public altRewardsPerShare;                          // token => value\\n\\n    // Token => (User => Info)\\n    mapping(address => mapping(address => IStaking.AltRewardsUserInfo)) public userAltRewardsPerShare;\\n\\n    address public voteDelegator;\\n\\n}\\n\"\r\n    },\r\n    \"StakingUpgradeable.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2021, bZxDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"Ownable.sol\\\";\\n\\n\\ncontract StakingUpgradeable is Ownable {\\n    address public implementation;\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"EnumerableBytes32Set.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2021, bZxDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n/**\\n * @dev Library for managing loan sets\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * Include with `using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;`.\\n *\\n */\\nlibrary EnumerableBytes32Set {\\n\\n    struct Bytes32Set {\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) index;\\n        bytes32[] values;\\n    }\\n\\n    /**\\n     * @dev Add an address value to a set. O(1).\\n     * Returns false if the value was already in the set.\\n     */\\n    function addAddress(Bytes32Set storage set, address addrvalue)\\n        internal\\n        returns (bool)\\n    {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return addBytes32(set, value);\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     * Returns false if the value was already in the set.\\n     */\\n    function addBytes32(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        if (!contains(set, value)){\\n            set.index[value] = set.values.push(value);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes an address value from a set. O(1).\\n     * Returns false if the value was not present in the set.\\n     */\\n    function removeAddress(Bytes32Set storage set, address addrvalue)\\n        internal\\n        returns (bool)\\n    {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return removeBytes32(set, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     * Returns false if the value was not present in the set.\\n     */\\n    function removeBytes32(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        if (contains(set, value)){\\n            uint256 toDeleteIndex = set.index[value] - 1;\\n            uint256 lastIndex = set.values.length - 1;\\n\\n            // If the element we're deleting is the last one, we can just remove it without doing a swap\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set.values[lastIndex];\\n\\n                // Move the last value to the index where the deleted value is\\n                set.values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            // Delete the index entry for the deleted value\\n            delete set.index[value];\\n\\n            // Delete the old entry for the moved value\\n            set.values.pop();\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return set.index[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function containsAddress(Bytes32Set storage set, address addrvalue)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bytes32 value;\\n        assembly {\\n            value := addrvalue\\n        }\\n        return set.index[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns an array with all values in the set. O(N).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n\\n     * WARNING: This function may run out of gas on large sets: use {length} and\\n     * {get} instead in these cases.\\n     */\\n    function enumerate(Bytes32Set storage set, uint256 start, uint256 count)\\n        internal\\n        view\\n        returns (bytes32[] memory output)\\n    {\\n        uint256 end = start + count;\\n        require(end >= start, \\\"addition overflow\\\");\\n        end = set.values.length < end ? set.values.length : end;\\n        if (end == 0 || start >= end) {\\n            return output;\\n        }\\n\\n        output = new bytes32[](end-start);\\n        for (uint256 i = start; i < end; i++) {\\n            output[i-start] = set.values[i];\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements on the set. O(1).\\n     */\\n    function length(Bytes32Set storage set)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return set.values.length;\\n    }\\n\\n   /** @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function get(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return set.values[index];\\n    }\\n\\n   /** @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function getAddress(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        bytes32 value = set.values[index];\\n        address addrvalue;\\n        assembly {\\n            addrvalue := value\\n        }\\n        return addrvalue;\\n    }\\n}\\n\"\r\n    },\r\n    \"IStaking.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IStaking {\\n\\n    struct ProposalState {\\n        uint256 proposalTime;\\n        uint256 iBZRXWeight;\\n        uint256 lpBZRXBalance;\\n        uint256 lpTotalSupply;\\n    }\\n\\n    struct AltRewardsUserInfo {\\n        uint256 rewardsPerShare;\\n        uint256 pendingRewards;\\n    }\\n\\n    function vestingLastSync(address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getCurrentFeeTokens()\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function maxUniswapDisagreement()\\n        external\\n        view\\n        returns (uint256);\\n\\n\\n    function isPaused()\\n        external\\n        view\\n        returns (bool);\\n\\n    function fundsWallet()\\n        external\\n        view\\n        returns (address);\\n\\n\\n    function callerRewardDivisor()\\n        external\\n        view\\n        returns (uint256);\\n\\n\\n    function maxCurveDisagreement()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function rewardPercent()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function addRewards(uint256 newBZRX, uint256 newStableCoin)\\n        external;\\n\\n    function stake(\\n        address[] calldata tokens,\\n        uint256[] calldata values\\n    )\\n        external;\\n\\n    function unstake(\\n        address[] calldata tokens,\\n        uint256[] calldata values\\n    )\\n        external;\\n\\n\\n    function earned(address account)\\n        external\\n        view\\n        returns (\\n            uint256 bzrxRewardsEarned,\\n            uint256 stableCoinRewardsEarned,\\n            uint256 bzrxRewardsVesting,\\n            uint256 stableCoinRewardsVesting,\\n            uint256 sushiRewardsEarned\\n        );\\n\\n    function pendingCrvRewards(address account)\\n    external\\n    view\\n    returns (\\n        uint256 bzrxRewardsEarned,\\n        uint256 stableCoinRewardsEarned,\\n        uint256 bzrxRewardsVesting,\\n        uint256 stableCoinRewardsVesting,\\n        uint256 sushiRewardsEarned\\n    );\\n\\n    function getVariableWeights()\\n        external\\n        view\\n        returns (uint256 vBZRXWeight, uint256 iBZRXWeight, uint256 LPTokenWeight);\\n\\n    function balanceOfByAsset(\\n        address token,\\n        address account)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    function balanceOfByAssets(\\n        address account)\\n        external\\n        view\\n        returns (\\n            uint256 bzrxBalance,\\n            uint256 iBZRXBalance,\\n            uint256 vBZRXBalance,\\n            uint256 LPTokenBalance,\\n            uint256 LPTokenBalanceOld\\n        );\\n\\n    function balanceOfStored(\\n        address account)\\n        external\\n        view\\n        returns (uint256 vestedBalance, uint256 vestingBalance);\\n\\n    function totalSupplyStored()\\n        external\\n        view\\n        returns (uint256 supply);\\n\\n    function vestedBalanceForAmount(\\n        uint256 tokenBalance,\\n        uint256 lastUpdate,\\n        uint256 vestingEndTime)\\n        external\\n        view\\n        returns (uint256 vested);\\n\\n    function votingBalanceOf(\\n        address account,\\n        uint256 proposalId)\\n        external\\n        view\\n        returns (uint256 totalVotes);\\n\\n    function votingBalanceOfNow(\\n        address account)\\n        external\\n        view\\n        returns (uint256 totalVotes);\\n\\n    function votingFromStakedBalanceOf(\\n        address account)\\n        external\\n        view\\n        returns (uint256 totalVotes);\\n\\n    function _setProposalVals(\\n        address account,\\n        uint256 proposalId)\\n        external\\n        returns (uint256);\\n\\n    function exit()\\n        external;\\n\\n    function addAltRewards(address token, uint256 amount)\\n        external;\\n\\n    function governor()\\n        external\\n        view\\n        returns(address);\\n\\n}\\n\"\r\n    },\r\n    \"StakingConstants.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"IUniswapV2Router.sol\\\";\\nimport \\\"ICurve3Pool.sol\\\";\\nimport \\\"ICurveMinter.sol\\\";\\nimport \\\"ICurve3PoolGauge.sol\\\";\\nimport \\\"IBZx.sol\\\";\\n\\n\\ncontract StakingConstants {\\n\\n    address public constant BZRX = 0x56d811088235F11C8920698a204A5010a788f4b3;\\n    address public constant vBZRX = 0xB72B31907C1C95F3650b64b2469e08EdACeE5e8F;\\n    address public constant iBZRX = 0x18240BD9C07fA6156Ce3F3f61921cC82b2619157;\\n    address public constant LPToken = 0xa30911e072A0C88D55B5D0A0984B66b0D04569d0; // sushiswap\\n    address public constant LPTokenOld = 0xe26A220a341EAca116bDa64cF9D5638A935ae629; // balancer\\n    IERC20 public constant curve3Crv = IERC20(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\\n\\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address public constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address public constant SUSHI = 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2;\\n\\n    IUniswapV2Router public constant uniswapRouter = IUniswapV2Router(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F); // sushiswap\\n    ICurve3Pool public constant curve3pool = ICurve3Pool(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\\n    IBZx public constant bZx = IBZx(0xD8Ee69652E4e4838f2531732a46d1f7F584F0b7f);\\n\\n    uint256 public constant cliffDuration =                15768000; // 86400 * 365 * 0.5\\n    uint256 public constant vestingDuration =              126144000; // 86400 * 365 * 4\\n    uint256 internal constant vestingDurationAfterCliff =  110376000; // 86400 * 365 * 3.5\\n    uint256 internal constant vestingStartTimestamp =      1594648800; // start_time\\n    uint256 internal constant vestingCliffTimestamp =      vestingStartTimestamp + cliffDuration;\\n    uint256 internal constant vestingEndTimestamp =        vestingStartTimestamp + vestingDuration;\\n    uint256 internal constant _startingVBZRXBalance =      889389933e18; // 889,389,933 BZRX\\n\\n    address internal constant SUSHI_MASTERCHEF = 0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd;\\n    uint256 internal constant BZRX_ETH_SUSHI_MASTERCHEF_PID =  188;\\n\\n    uint256 public constant BZRXWeightStored = 1e18;\\n\\n    ICurveMinter public constant curveMinter = ICurveMinter(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0);\\n    ICurve3PoolGauge public constant curve3PoolGauge = ICurve3PoolGauge(0xbFcF63294aD7105dEa65aA58F8AE5BE2D9d0952A);\\n    address public constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n\\n    struct DelegatedTokens {\\n        address user;\\n        uint256 BZRX;\\n        uint256 vBZRX;\\n        uint256 iBZRX;\\n        uint256 LPToken;\\n        uint256 totalVotes;\\n    }\\n\\n    event Stake(\\n        address indexed user,\\n        address indexed token,\\n        address indexed delegate,\\n        uint256 amount\\n    );\\n\\n    event Unstake(\\n        address indexed user,\\n        address indexed token,\\n        address indexed delegate,\\n        uint256 amount\\n    );\\n\\n    event AddRewards(\\n        address indexed sender,\\n        uint256 bzrxAmount,\\n        uint256 stableCoinAmount\\n    );\\n\\n    event Claim(\\n        address indexed user,\\n        uint256 bzrxAmount,\\n        uint256 stableCoinAmount\\n    );\\n\\n    event ChangeDelegate(\\n        address indexed user,\\n        address indexed oldDelegate,\\n        address indexed newDelegate\\n    );\\n\\n    event WithdrawFees(\\n        address indexed sender\\n    );\\n\\n    event ConvertFees(\\n        address indexed sender,\\n        uint256 bzrxOutput,\\n        uint256 stableCoinOutput\\n    );\\n\\n    event DistributeFees(\\n        address indexed sender,\\n        uint256 bzrxRewards,\\n        uint256 stableCoinRewards\\n    );\\n\\n    event AddAltRewards(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    event ClaimAltRewards(\\n        address indexed user,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"IUniswapV2Router.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\n\\ninterface IUniswapV2Router {\\n    // 0x38ed1739\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline)\\n        external\\n        returns (uint256[] memory amounts);\\n\\n    // 0x8803dbee\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline)\\n        external\\n        returns (uint256[] memory amounts);\\n\\n    // 0x1f00ca74\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    // 0xd06ca61f\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"ICurve3Pool.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <=0.8.4;\\n\\ninterface ICurve3Pool {\\n    function add_liquidity(\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount)\\n        external;\\n\\n    function get_virtual_price()\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"ICurveMinter.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n//0xd061D61a4d941c39E5453435B6345Dc261C2fcE0 eth mainnet\\ninterface ICurveMinter {\\n\\n    function mint(\\n        address _addr\\n    )\\n    external;\\n}\\n\"\r\n    },\r\n    \"ICurve3PoolGauge.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n//0xbFcF63294aD7105dEa65aA58F8AE5BE2D9d0952A eth mainnet\\ninterface ICurve3PoolGauge {\\n    function balanceOf(\\n        address _addr\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function working_balances(address)\\n        external view\\n        returns (uint256);\\n\\n    function claimable_tokens(address)\\n        external\\n        returns (uint256);\\n\\n    function deposit(\\n        uint256 _amount\\n    )\\n        external;\\n\\n    function deposit(\\n        uint256 _amount,\\n        address _addr\\n    )\\n    external;\\n\\n    function withdraw(\\n        uint256 _amount\\n    )\\n        external;\\n\\n    function set_approve_deposit(\\n        address _addr,\\n        bool can_deposit\\n    )\\n        external;\\n}\\n\"\r\n    },\r\n    \"IBZx.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n// SPDX-License-Identifier: Apache License, Version 2.0.\\npragma solidity >=0.5.0 <=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n/// @title A proxy interface for The Protocol\\n/// @author bZeroX\\n/// @notice This is just an interface, not to be deployed itself.\\n/// @dev This interface is to be used for the protocol interactions.\\ninterface IBZx {\\n    ////// Protocol //////\\n\\n    /// @dev adds or replaces existing proxy module\\n    /// @param target target proxy module address\\n    function replaceContract(address target) external;\\n\\n    /// @dev updates all proxy modules addreses and function signatures.\\n    /// sigsArr and targetsArr should be of equal length\\n    /// @param sigsArr array of function signatures\\n    /// @param targetsArr array of target proxy module addresses\\n    function setTargets(\\n        string[] calldata sigsArr,\\n        address[] calldata targetsArr\\n    ) external;\\n\\n    /// @dev returns protocol module address given a function signature\\n    /// @return module address\\n    function getTarget(string calldata sig) external view returns (address);\\n\\n    ////// Protocol Settings //////\\n\\n    /// @dev sets price feed contract address. The contract on the addres should implement IPriceFeeds interface\\n    /// @param newContract module address for the IPriceFeeds implementation\\n    function setPriceFeedContract(address newContract) external;\\n\\n    /// @dev sets swaps contract address. The contract on the addres should implement ISwapsImpl interface\\n    /// @param newContract module address for the ISwapsImpl implementation\\n    function setSwapsImplContract(address newContract) external;\\n\\n    /// @dev sets loan pool with assets. Accepts two arrays of equal length\\n    /// @param pools array of address of pools\\n    /// @param assets array of addresses of assets\\n    function setLoanPool(address[] calldata pools, address[] calldata assets)\\n        external;\\n\\n    /// @dev updates list of supported tokens, it can be use also to disable or enable particualr token\\n    /// @param addrs array of address of pools\\n    /// @param toggles array of addresses of assets\\n    /// @param withApprovals resets tokens to unlimited approval with the swaps integration (kyber, etc.)\\n    function setSupportedTokens(\\n        address[] calldata addrs,\\n        bool[] calldata toggles,\\n        bool withApprovals\\n    ) external;\\n\\n    /// @dev sets lending fee with WEI_PERCENT_PRECISION\\n    /// @param newValue lending fee percent\\n    function setLendingFeePercent(uint256 newValue) external;\\n\\n    /// @dev sets trading fee with WEI_PERCENT_PRECISION\\n    /// @param newValue trading fee percent\\n    function setTradingFeePercent(uint256 newValue) external;\\n\\n    /// @dev sets borrowing fee with WEI_PERCENT_PRECISION\\n    /// @param newValue borrowing fee percent\\n    function setBorrowingFeePercent(uint256 newValue) external;\\n\\n    /// @dev sets affiliate fee with WEI_PERCENT_PRECISION\\n    /// @param newValue affiliate fee percent\\n    function setAffiliateFeePercent(uint256 newValue) external;\\n\\n    /// @dev sets liquidation inncetive percent per loan per token. This is the profit percent\\n    /// that liquidator gets in the process of liquidating.\\n    /// @param loanTokens array list of loan tokens\\n    /// @param collateralTokens array list of collateral tokens\\n    /// @param amounts array list of liquidation inncetive amount\\n    function setLiquidationIncentivePercent(\\n        address[] calldata loanTokens,\\n        address[] calldata collateralTokens,\\n        uint256[] calldata amounts\\n    ) external;\\n\\n    /// @dev sets max swap rate slippage percent.\\n    /// @param newAmount max swap rate slippage percent.\\n    function setMaxDisagreement(uint256 newAmount) external;\\n\\n    /// TODO\\n    function setSourceBufferPercent(uint256 newAmount) external;\\n\\n    /// @dev sets maximum supported swap size in ETH\\n    /// @param newAmount max swap size in ETH.\\n    function setMaxSwapSize(uint256 newAmount) external;\\n\\n    /// @dev sets fee controller address\\n    /// @param newController address of the new fees controller\\n    function setFeesController(address newController) external;\\n\\n    /// @dev withdraws lending fees to receiver. Only can be called by feesController address\\n    /// @param tokens array of token addresses.\\n    /// @param receiver fees receiver address\\n    /// @return amounts array of amounts withdrawn\\n    function withdrawFees(\\n        address[] calldata tokens,\\n        address receiver,\\n        FeeClaimType feeType\\n    ) external returns (uint256[] memory amounts);\\n\\n    /// @dev withdraw protocol token (BZRX) from vesting contract vBZRX\\n    /// @param receiver address of BZRX tokens claimed\\n    /// @param amount of BZRX token to be claimed. max is claimed if amount is greater than balance.\\n    /// @return rewardToken reward token address\\n    /// @return withdrawAmount amount\\n    function withdrawProtocolToken(address receiver, uint256 amount)\\n        external\\n        returns (address rewardToken, uint256 withdrawAmount);\\n\\n    /// @dev depozit protocol token (BZRX)\\n    /// @param amount address of BZRX tokens to deposit\\n    function depositProtocolToken(uint256 amount) external;\\n\\n    function grantRewards(address[] calldata users, uint256[] calldata amounts)\\n        external\\n        returns (uint256 totalAmount);\\n\\n    // NOTE: this doesn't sanitize inputs -> inaccurate values may be returned if there are duplicates tokens input\\n    function queryFees(address[] calldata tokens, FeeClaimType feeType)\\n        external\\n        view\\n        returns (uint256[] memory amountsHeld, uint256[] memory amountsPaid);\\n\\n    function priceFeeds() external view returns (address);\\n\\n    function swapsImpl() external view returns (address);\\n\\n    function logicTargets(bytes4) external view returns (address);\\n\\n    function loans(bytes32) external view returns (Loan memory);\\n\\n    function loanParams(bytes32) external view returns (LoanParams memory);\\n\\n    // we don't use this yet\\n    // function lenderOrders(address, bytes32) external returns (Order memory);\\n    // function borrowerOrders(address, bytes32) external returns (Order memory);\\n\\n    function delegatedManagers(bytes32, address) external view returns (bool);\\n\\n    function lenderInterest(address, address)\\n        external\\n        view\\n        returns (LenderInterest memory);\\n\\n    function loanInterest(bytes32) external view returns (LoanInterest memory);\\n\\n    function feesController() external view returns (address);\\n\\n    function lendingFeePercent() external view returns (uint256);\\n\\n    function lendingFeeTokensHeld(address) external view returns (uint256);\\n\\n    function lendingFeeTokensPaid(address) external view returns (uint256);\\n\\n    function borrowingFeePercent() external view returns (uint256);\\n\\n    function borrowingFeeTokensHeld(address) external view returns (uint256);\\n\\n    function borrowingFeeTokensPaid(address) external view returns (uint256);\\n\\n    function protocolTokenHeld() external view returns (uint256);\\n\\n    function protocolTokenPaid() external view returns (uint256);\\n\\n    function affiliateFeePercent() external view returns (uint256);\\n\\n    function liquidationIncentivePercent(address, address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function loanPoolToUnderlying(address) external view returns (address);\\n\\n    function underlyingToLoanPool(address) external view returns (address);\\n\\n    function supportedTokens(address) external view returns (bool);\\n\\n    function maxDisagreement() external view returns (uint256);\\n\\n    function sourceBufferPercent() external view returns (uint256);\\n\\n    function maxSwapSize() external view returns (uint256);\\n\\n    /// @dev get list of loan pools in the system. Ordering is not guaranteed\\n    /// @param start start index\\n    /// @param count number of pools to return\\n    /// @return loanPoolsList array of loan pools\\n    function getLoanPoolsList(uint256 start, uint256 count)\\n        external\\n        view\\n        returns (address[] memory loanPoolsList);\\n\\n    /// @dev checks whether addreess is a loan pool address\\n    /// @return boolean\\n    function isLoanPool(address loanPool) external view returns (bool);\\n\\n    ////// Loan Settings //////\\n\\n    /// @dev creates new loan param settings\\n    /// @param loanParamsList array of LoanParams\\n    /// @return loanParamsIdList array of loan ids created\\n    function setupLoanParams(LoanParams[] calldata loanParamsList)\\n        external\\n        returns (bytes32[] memory loanParamsIdList);\\n\\n    /// @dev Deactivates LoanParams for future loans. Active loans using it are unaffected.\\n    /// @param loanParamsIdList array of loan ids\\n    function disableLoanParams(bytes32[] calldata loanParamsIdList) external;\\n\\n    /// @dev gets array of LoanParams by given ids\\n    /// @param loanParamsIdList array of loan ids\\n    /// @return loanParamsList array of LoanParams\\n    function getLoanParams(bytes32[] calldata loanParamsIdList)\\n        external\\n        view\\n        returns (LoanParams[] memory loanParamsList);\\n\\n    /// @dev Enumerates LoanParams in the system by owner\\n    /// @param owner of the loan params\\n    /// @param start number of loans to return\\n    /// @param count total number of the items\\n    /// @return loanParamsList array of LoanParams\\n    function getLoanParamsList(\\n        address owner,\\n        uint256 start,\\n        uint256 count\\n    ) external view returns (bytes32[] memory loanParamsList);\\n\\n    /// @dev returns total loan principal for token address\\n    /// @param lender address\\n    /// @param loanToken address\\n    /// @return total principal of the loan\\n    function getTotalPrincipal(address lender, address loanToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    ////// Loan Openings //////\\n\\n    /// @dev This is THE function that borrows or trades on the protocol\\n    /// @param loanParamsId id of the LoanParam created beforehand by setupLoanParams function\\n    /// @param loanId id of existing loan, if 0, start a new loan\\n    /// @param isTorqueLoan boolean whether it is toreque or non torque loan\\n    /// @param initialMargin in WEI_PERCENT_PRECISION\\n    /// @param sentAddresses array of size 4:\\n    ///         lender: must match loan if loanId provided\\n    ///         borrower: must match loan if loanId provided\\n    ///         receiver: receiver of funds (address(0) assumes borrower address)\\n    ///         manager: delegated manager of loan unless address(0)\\n    /// @param sentValues array of size 5:\\n    ///         newRate: new loan interest rate\\n    ///         newPrincipal: new loan size (borrowAmount + any borrowed interest)\\n    ///         torqueInterest: new amount of interest to escrow for Torque loan (determines initial loan length)\\n    ///         loanTokenReceived: total loanToken deposit (amount not sent to borrower in the case of Torque loans)\\n    ///         collateralTokenReceived: total collateralToken deposit\\n    /// @param loanDataBytes required when sending ether\\n    /// @return principal of the loan and collateral amount\\n    function borrowOrTradeFromPool(\\n        bytes32 loanParamsId,\\n        bytes32 loanId,\\n        bool isTorqueLoan,\\n        uint256 initialMargin,\\n        address[4] calldata sentAddresses,\\n        uint256[5] calldata sentValues,\\n        bytes calldata loanDataBytes\\n    ) external payable returns (LoanOpenData memory);\\n\\n    /// @dev sets/disables/enables the delegated manager for the loan\\n    /// @param loanId id of the loan\\n    /// @param delegated delegated manager address\\n    /// @param toggle boolean set enabled or disabled\\n    function setDelegatedManager(\\n        bytes32 loanId,\\n        address delegated,\\n        bool toggle\\n    ) external;\\n\\n    /// @dev estimates margin exposure for simulated position\\n    /// @param loanToken address of the loan token\\n    /// @param collateralToken address of collateral token\\n    /// @param loanTokenSent amout of loan token sent\\n    /// @param collateralTokenSent amount of collateral token sent\\n    /// @param interestRate yearly interest rate\\n    /// @param newPrincipal principal amount of the loan\\n    /// @return estimated margin exposure amount\\n    function getEstimatedMarginExposure(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanTokenSent,\\n        uint256 collateralTokenSent,\\n        uint256 interestRate,\\n        uint256 newPrincipal\\n    ) external view returns (uint256);\\n\\n    /// @dev calculates required collateral for simulated position\\n    /// @param loanToken address of loan token\\n    /// @param collateralToken address of collateral token\\n    /// @param newPrincipal principal amount of the loan\\n    /// @param marginAmount margin amount of the loan\\n    /// @param isTorqueLoan boolean torque or non torque loan\\n    /// @return collateralAmountRequired amount required\\n    function getRequiredCollateral(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 newPrincipal,\\n        uint256 marginAmount,\\n        bool isTorqueLoan\\n    ) external view returns (uint256 collateralAmountRequired);\\n\\n    function getRequiredCollateralByParams(\\n        bytes32 loanParamsId,\\n        uint256 newPrincipal\\n    ) external view returns (uint256 collateralAmountRequired);\\n\\n    /// @dev calculates borrow amount for simulated position\\n    /// @param loanToken address of loan token\\n    /// @param collateralToken address of collateral token\\n    /// @param collateralTokenAmount amount of collateral token sent\\n    /// @param marginAmount margin amount\\n    /// @param isTorqueLoan boolean torque or non torque loan\\n    /// @return borrowAmount possible borrow amount\\n    function getBorrowAmount(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 collateralTokenAmount,\\n        uint256 marginAmount,\\n        bool isTorqueLoan\\n    ) external view returns (uint256 borrowAmount);\\n\\n    function getBorrowAmountByParams(\\n        bytes32 loanParamsId,\\n        uint256 collateralTokenAmount\\n    ) external view returns (uint256 borrowAmount);\\n\\n    ////// Loan Closings //////\\n\\n    /// @dev liquidates unhealty loans\\n    /// @param loanId id of the loan\\n    /// @param receiver address receiving liquidated loan collateral\\n    /// @param closeAmount amount to close denominated in loanToken\\n    /// @return loanCloseAmount amount of the collateral token of the loan\\n    /// @return seizedAmount sezied amount in the collateral token\\n    /// @return seizedToken loan token address\\n    function liquidate(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 closeAmount\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 seizedAmount,\\n            address seizedToken\\n        );\\n\\n    /// @dev rollover loan\\n    /// @param loanId id of the loan\\n    /// @param loanDataBytes reserved for future use.\\n    function rollover(bytes32 loanId, bytes calldata loanDataBytes)\\n        external\\n        returns (address rebateToken, uint256 gasRebate);\\n\\n    /// @dev close position with loan token deposit\\n    /// @param loanId id of the loan\\n    /// @param receiver collateral token reciever address\\n    /// @param depositAmount amount of loan token to deposit\\n    /// @return loanCloseAmount loan close amount\\n    /// @return withdrawAmount loan token withdraw amount\\n    /// @return withdrawToken loan token address\\n    function closeWithDeposit(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 depositAmount // denominated in loanToken\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        );\\n\\n    /// @dev close position with swap\\n    /// @param loanId id of the loan\\n    /// @param receiver collateral token reciever address\\n    /// @param swapAmount amount of loan token to swap\\n    /// @param returnTokenIsCollateral boolean whether to return tokens is collateral\\n    /// @param loanDataBytes reserved for future use\\n    /// @return loanCloseAmount loan close amount\\n    /// @return withdrawAmount loan token withdraw amount\\n    /// @return withdrawToken loan token address\\n    function closeWithSwap(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 swapAmount, // denominated in collateralToken\\n        bool returnTokenIsCollateral, // true: withdraws collateralToken, false: withdraws loanToken\\n        bytes calldata loanDataBytes\\n    )\\n        external\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        );\\n\\n    ////// Loan Closings With Gas Token //////\\n\\n    /// @dev liquidates unhealty loans by using Gas token\\n    /// @param loanId id of the loan\\n    /// @param receiver address receiving liquidated loan collateral\\n    /// @param gasTokenUser user address of the GAS token\\n    /// @param closeAmount amount to close denominated in loanToken\\n    /// @return loanCloseAmount loan close amount\\n    /// @return seizedAmount loan token withdraw amount\\n    /// @return seizedToken loan token address\\n    function liquidateWithGasToken(\\n        bytes32 loanId,\\n        address receiver,\\n        address gasTokenUser,\\n        uint256 closeAmount // denominated in loanToken\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 seizedAmount,\\n            address seizedToken\\n        );\\n\\n    /// @dev rollover loan\\n    /// @param loanId id of the loan\\n    /// @param gasTokenUser user address of the GAS token\\n    function rolloverWithGasToken(\\n        bytes32 loanId,\\n        address gasTokenUser,\\n        bytes calldata /*loanDataBytes*/\\n    ) external returns (address rebateToken, uint256 gasRebate);\\n\\n    /// @dev close position with loan token deposit\\n    /// @param loanId id of the loan\\n    /// @param receiver collateral token reciever address\\n    /// @param gasTokenUser user address of the GAS token\\n    /// @param depositAmount amount of loan token to deposit denominated in loanToken\\n    /// @return loanCloseAmount loan close amount\\n    /// @return withdrawAmount loan token withdraw amount\\n    /// @return withdrawToken loan token address\\n    function closeWithDepositWithGasToken(\\n        bytes32 loanId,\\n        address receiver,\\n        address gasTokenUser,\\n        uint256 depositAmount\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        );\\n\\n    /// @dev close position with swap\\n    /// @param loanId id of the loan\\n    /// @param receiver collateral token reciever address\\n    /// @param gasTokenUser user address of the GAS token\\n    /// @param swapAmount amount of loan token to swap denominated in collateralToken\\n    /// @param returnTokenIsCollateral  true: withdraws collateralToken, false: withdraws loanToken\\n    /// @return loanCloseAmount loan close amount\\n    /// @return withdrawAmount loan token withdraw amount\\n    /// @return withdrawToken loan token address\\n    function closeWithSwapWithGasToken(\\n        bytes32 loanId,\\n        address receiver,\\n        address gasTokenUser,\\n        uint256 swapAmount,\\n        bool returnTokenIsCollateral,\\n        bytes calldata loanDataBytes\\n    )\\n        external\\n        returns (\\n            uint256 loanCloseAmount,\\n            uint256 withdrawAmount,\\n            address withdrawToken\\n        );\\n\\n    ////// Loan Maintenance //////\\n\\n    /// @dev deposit collateral to existing loan\\n    /// @param loanId existing loan id\\n    /// @param depositAmount amount to deposit which must match msg.value if ether is sent\\n    function depositCollateral(bytes32 loanId, uint256 depositAmount)\\n        external\\n        payable;\\n\\n    /// @dev withdraw collateral from existing loan\\n    /// @param loanId existing lona id\\n    /// @param receiver address of withdrawn tokens\\n    /// @param withdrawAmount amount to withdraw\\n    /// @return actualWithdrawAmount actual amount withdrawn\\n    function withdrawCollateral(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 withdrawAmount\\n    ) external returns (uint256 actualWithdrawAmount);\\n\\n    /// @dev withdraw accrued interest rate for a loan given token address\\n    /// @param loanToken loan token address\\n    function withdrawAccruedInterest(address loanToken) external;\\n\\n    /// @dev extends loan duration by depositing more collateral\\n    /// @param loanId id of the existing loan\\n    /// @param depositAmount amount to deposit\\n    /// @param useCollateral boolean whether to extend using collateral or deposit amount\\n    /// @return secondsExtended by that number of seconds loan duration was extended\\n    function extendLoanDuration(\\n        bytes32 loanId,\\n        uint256 depositAmount,\\n        bool useCollateral,\\n        bytes calldata // for future use /*loanDataBytes*/\\n    ) external payable returns (uint256 secondsExtended);\\n\\n    /// @dev reduces loan duration by withdrawing collateral\\n    /// @param loanId id of the existing loan\\n    /// @param receiver address to receive tokens\\n    /// @param withdrawAmount amount to withdraw\\n    /// @return secondsReduced by that number of seconds loan duration was extended\\n    function reduceLoanDuration(\\n        bytes32 loanId,\\n        address receiver,\\n        uint256 withdrawAmount\\n    ) external returns (uint256 secondsReduced);\\n\\n    function setDepositAmount(\\n        bytes32 loanId,\\n        uint256 depositValueAsLoanToken,\\n        uint256 depositValueAsCollateralToken\\n    ) external;\\n\\n    function claimRewards(address receiver)\\n        external\\n        returns (uint256 claimAmount);\\n\\n    function transferLoan(bytes32 loanId, address newOwner) external;\\n\\n    function rewardsBalanceOf(address user)\\n        external\\n        view\\n        returns (uint256 rewardsBalance);\\n\\n    /// @dev Gets current lender interest data totals for all loans with a specific oracle and interest token\\n    /// @param lender The lender address\\n    /// @param loanToken The loan token address\\n    /// @return interestPaid The total amount of interest that has been paid to a lender so far\\n    /// @return interestPaidDate The date of the last interest pay out, or 0 if no interest has been withdrawn yet\\n    /// @return interestOwedPerDay The amount of interest the lender is earning per day\\n    /// @return interestUnPaid The total amount of interest the lender is owned and not yet withdrawn\\n    /// @return interestFeePercent The fee retained by the protocol before interest is paid to the lender\\n    /// @return principalTotal The total amount of outstading principal the lender has loaned\\n    function getLenderInterestData(address lender, address loanToken)\\n        external\\n        view\\n        returns (\\n            uint256 interestPaid,\\n            uint256 interestPaidDate,\\n            uint256 interestOwedPerDay,\\n            uint256 interestUnPaid,\\n            uint256 interestFeePercent,\\n            uint256 principalTotal\\n        );\\n\\n    /// @dev Gets current interest data for a loan\\n    /// @param loanId A unique id representing the loan\\n    /// @return loanToken The loan token that interest is paid in\\n    /// @return interestOwedPerDay The amount of interest the borrower is paying per day\\n    /// @return interestDepositTotal The total amount of interest the borrower has deposited\\n    /// @return interestDepositRemaining The amount of deposited interest that is not yet owed to a lender\\n    function getLoanInterestData(bytes32 loanId)\\n        external\\n        view\\n        returns (\\n            address loanToken,\\n            uint256 interestOwedPerDay,\\n            uint256 interestDepositTotal,\\n            uint256 interestDepositRemaining\\n        );\\n\\n    /// @dev gets list of loans of particular user address\\n    /// @param user address of the loans\\n    /// @param start of the index\\n    /// @param count number of loans to return\\n    /// @param loanType type of the loan: All(0), Margin(1), NonMargin(2)\\n    /// @param isLender whether to list lender loans or borrower loans\\n    /// @param unsafeOnly booleat if true return only unsafe loans that are open for liquidation\\n    /// @return loansData LoanReturnData array of loans\\n    function getUserLoans(\\n        address user,\\n        uint256 start,\\n        uint256 count,\\n        LoanType loanType,\\n        bool isLender,\\n        bool unsafeOnly\\n    ) external view returns (LoanReturnData[] memory loansData);\\n\\n    function getUserLoansCount(address user, bool isLender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev gets existing loan\\n    /// @param loanId id of existing loan\\n    /// @return loanData array of loans\\n    function getLoan(bytes32 loanId)\\n        external\\n        view\\n        returns (LoanReturnData memory loanData);\\n\\n    /// @dev get current active loans in the system\\n    /// @param start of the index\\n    /// @param count number of loans to return\\n    /// @param unsafeOnly boolean if true return unsafe loan only (open for liquidation)\\n    function getActiveLoans(\\n        uint256 start,\\n        uint256 count,\\n        bool unsafeOnly\\n    ) external view returns (LoanReturnData[] memory loansData);\\n\\n    /// @dev get current active loans in the system\\n    /// @param start of the index\\n    /// @param count number of loans to return\\n    /// @param unsafeOnly boolean if true return unsafe loan only (open for liquidation)\\n    /// @param isLiquidatable boolean if true return liquidatable loans only\\n    function getActiveLoansAdvanced(\\n        uint256 start,\\n        uint256 count,\\n        bool unsafeOnly,\\n        bool isLiquidatable\\n    ) external view returns (LoanReturnData[] memory loansData);\\n\\n    function getActiveLoansCount() external view returns (uint256);\\n\\n    ////// Swap External //////\\n\\n    /// @dev swap thru external integration\\n    /// @param sourceToken source token address\\n    /// @param destToken destintaion token address\\n    /// @param receiver address to receive tokens\\n    /// @param returnToSender TODO\\n    /// @param sourceTokenAmount source token amount\\n    /// @param requiredDestTokenAmount destination token amount\\n    /// @param swapData TODO\\n    /// @return destTokenAmountReceived destination token received\\n    /// @return sourceTokenAmountUsed source token amount used\\n    function swapExternal(\\n        address sourceToken,\\n        address destToken,\\n        address receiver,\\n        address returnToSender,\\n        uint256 sourceTokenAmount,\\n        uint256 requiredDestTokenAmount,\\n        bytes calldata swapData\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 destTokenAmountReceived,\\n            uint256 sourceTokenAmountUsed\\n        );\\n\\n    /// @dev swap thru external integration using GAS\\n    /// @param sourceToken source token address\\n    /// @param destToken destintaion token address\\n    /// @param receiver address to receive tokens\\n    /// @param returnToSender TODO\\n    /// @param gasTokenUser user address of the GAS token\\n    /// @param sourceTokenAmount source token amount\\n    /// @param requiredDestTokenAmount destination token amount\\n    /// @param swapData TODO\\n    /// @return destTokenAmountReceived destination token received\\n    /// @return sourceTokenAmountUsed source token amount used\\n    function swapExternalWithGasToken(\\n        address sourceToken,\\n        address destToken,\\n        address receiver,\\n        address returnToSender,\\n        address gasTokenUser,\\n        uint256 sourceTokenAmount,\\n        uint256 requiredDestTokenAmount,\\n        bytes calldata swapData\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 destTokenAmountReceived,\\n            uint256 sourceTokenAmountUsed\\n        );\\n\\n    /// @dev calculate simulated return of swap\\n    /// @param sourceToken source token address\\n    /// @param destToken destination token address\\n    /// @param sourceTokenAmount source token amount\\n    /// @return amoun denominated in destination token\\n    function getSwapExpectedReturn(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceTokenAmount\\n    ) external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n\\n    /// Guardian Interface\\n\\n    function _isPaused(bytes4 sig) external view returns (bool isPaused);\\n\\n    function toggleFunctionPause(bytes4 sig) external;\\n\\n    function toggleFunctionUnPause(bytes4 sig) external;\\n\\n    function changeGuardian(address newGuardian) external;\\n\\n    function getGuardian() external view returns (address guardian);\\n\\n\\n    function updateSettings(\\n        address settingsTarget,\\n        bytes calldata callData)\\n        external\\n        returns(bytes memory);\\n\\n    /// Loan Cleanup Interface\\n\\n    function cleanupLoans(\\n        address loanToken,\\n        bytes32[] calldata loanIds)\\n        external\\n        payable\\n        returns (uint256 totalPrincipalIn);\\n\\n    struct LoanParams {\\n        bytes32 id;\\n        bool active;\\n        address owner;\\n        address loanToken;\\n        address collateralToken;\\n        uint256 minInitialMargin;\\n        uint256 maintenanceMargin;\\n        uint256 maxLoanTerm;\\n    }\\n\\n    struct LoanOpenData {\\n        bytes32 loanId;\\n        uint256 principal;\\n        uint256 collateral;\\n    }\\n\\n    enum LoanType {\\n        All,\\n        Margin,\\n        NonMargin\\n    }\\n\\n    struct LoanReturnData {\\n        bytes32 loanId;\\n        uint96 endTimestamp;\\n        address loanToken;\\n        address collateralToken;\\n        uint256 principal;\\n        uint256 collateral;\\n        uint256 interestOwedPerDay;\\n        uint256 interestDepositRemaining;\\n        uint256 startRate;\\n        uint256 startMargin;\\n        uint256 maintenanceMargin;\\n        uint256 currentMargin;\\n        uint256 maxLoanTerm;\\n        uint256 maxLiquidatable;\\n        uint256 maxSeizable;\\n        uint256 depositValueAsLoanToken;\\n        uint256 depositValueAsCollateralToken;\\n    }\\n\\n    enum FeeClaimType {\\n        All,\\n        Lending,\\n        Trading,\\n        Borrowing\\n    }\\n\\n    struct Loan {\\n        bytes32 id; // id of the loan\\n        bytes32 loanParamsId; // the linked loan params id\\n        bytes32 pendingTradesId; // the linked pending trades id\\n        uint256 principal; // total borrowed amount outstanding\\n        uint256 collateral; // total collateral escrowed for the loan\\n        uint256 startTimestamp; // loan start time\\n        uint256 endTimestamp; // for active loans, this is the expected loan end time, for in-active loans, is the actual (past) end time\\n        uint256 startMargin; // initial margin when the loan opened\\n        uint256 startRate; // reference rate when the loan opened for converting collateralToken to loanToken\\n        address borrower; // borrower of this loan\\n        address lender; // lender of this loan\\n        bool active; // if false, the loan has been fully closed\\n    }\\n\\n    struct LenderInterest {\\n        uint256 principalTotal; // total borrowed amount outstanding of asset\\n        uint256 owedPerDay; // interest owed per day for all loans of asset\\n        uint256 owedTotal; // total interest owed for all loans of asset (assuming they go to full term)\\n        uint256 paidTotal; // total interest paid so far for asset\\n        uint256 updatedTimestamp; // last update\\n    }\\n\\n    struct LoanInterest {\\n        uint256 owedPerDay; // interest owed per day for loan\\n        uint256 depositTotal; // total escrowed interest for loan\\n        uint256 updatedTimestamp; // last update\\n    }\\n}\\n\"\r\n    },\r\n    \"StakingVoteDelegator.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2020, bZeroX, LLC <https://bzx.network/>. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"GovernorBravoDelegate.sol\\\";\\nimport \\\"IStaking.sol\\\";\\nimport \\\"StakingVoteDelegatorState.sol\\\";\\nimport \\\"StakingVoteDelegatorConstants.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"PausableGuardian.sol\\\";\\n\\n\\ncontract StakingVoteDelegator is StakingVoteDelegatorState, StakingVoteDelegatorConstants, PausableGuardian {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Getter\\n     * @param delegator The address to get delegatee for\\n     */\\n    function delegates(address delegator) external view returns (address) {\\n        return _delegates[delegator];\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) pausable external {\\n        if(delegatee == msg.sender){\\n            delegatee = ZERO_ADDRESS;\\n        }\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) pausable external {\\n        if(delegatee == msg.sender){\\n            delegatee = ZERO_ADDRESS;\\n        }\\n\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(\\\"STAKING\\\")),\\n                getChainId(),\\n                address(this)\\n            )\\n        );\\n\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                DELEGATION_TYPEHASH,\\n                delegatee,\\n                nonce,\\n                expiry\\n            )\\n        );\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator,\\n                structHash\\n            )\\n        );\\n\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != ZERO_ADDRESS, \\\"Staking::delegateBySig: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"Staking::delegateBySig: invalid nonce\\\");\\n        require(now <= expiry, \\\"Staking::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint256) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"Staking::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        if(delegatee == delegator || delegator == ZERO_ADDRESS)\\n            return;\\n\\n        address oldDelegate = _delegates[delegator];\\n\\n        uint256 delegatorBalance = staking.votingFromStakedBalanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        //ZERO_ADDRESS means that user wants to revoke delegation\\n        if(delegatee == ZERO_ADDRESS && oldDelegate != ZERO_ADDRESS){\\n            if(totalDelegators[oldDelegate] > 0)\\n                totalDelegators[oldDelegate]--;\\n\\n            if(totalDelegators[oldDelegate] == 0 && oldDelegate != ZERO_ADDRESS){\\n                uint32 dstRepNum = numCheckpoints[oldDelegate];\\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[oldDelegate][dstRepNum - 1].votes : 0;\\n                uint256 dstRepNew = 0;\\n                _writeCheckpoint(oldDelegate, dstRepNum, dstRepOld, dstRepNew);\\n                return;\\n            }\\n        }\\n        else if(delegatee != ZERO_ADDRESS){\\n            totalDelegators[delegatee]++;\\n            if(totalDelegators[oldDelegate] > 0)\\n                totalDelegators[oldDelegate]--;\\n        }\\n\\n        emit DelegateChanged(delegator, oldDelegate, delegatee);\\n        _moveDelegates(oldDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint256 amount\\n    ) public {\\n        require(msg.sender == address(staking), \\\"unauthorized\\\");\\n        _moveDelegates(srcRep, dstRep, amount);\\n    }\\n\\n    function moveDelegatesByVotingBalance(\\n        uint256 votingBalanceBefore,\\n        uint256 votingBalanceAfter,\\n        address account\\n    )\\n    public\\n    {\\n        require(msg.sender == address(staking), \\\"unauthorized\\\");\\n        address currentDelegate = _delegates[account];\\n        if(currentDelegate == ZERO_ADDRESS)\\n            return;\\n\\n        if(votingBalanceBefore > votingBalanceAfter){\\n            _moveDelegates(currentDelegate, ZERO_ADDRESS,\\n                votingBalanceBefore.sub(votingBalanceAfter)\\n            );\\n        }\\n        else{\\n            _moveDelegates(ZERO_ADDRESS, currentDelegate,\\n                votingBalanceAfter.sub(votingBalanceBefore)\\n            );\\n        }\\n    }\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != ZERO_ADDRESS) {\\n                // decrease old representative\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint256 srcRepNew = srcRepOld.sub((amount > srcRepOld)? srcRepOld : amount);\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != ZERO_ADDRESS) {\\n                // increase new representative\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint256 dstRepNew = dstRepOld.add(amount);\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"Staking::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\\n\"\r\n    },\r\n    \"GovernorBravoDelegate.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"GovernorBravoInterfaces.sol\\\";\\n\\ncontract GovernorBravoDelegate is GovernorBravoDelegateStorageV1, GovernorBravoEvents {\\n\\n    /// @notice The name of this contract\\n    string public constant name = \\\"bZx Governor Bravo\\\";\\n\\n    /// @notice The minimum setable proposal threshold\\n    uint public constant MIN_PROPOSAL_THRESHOLD = 5150000e18; // 5,150,000 = 0.5% of BZRX\\n\\n    /// @notice The maximum setable proposal threshold\\n    uint public constant MAX_PROPOSAL_THRESHOLD = 20600000e18; // 20,600,000 = 2% of BZRX\\n\\n    /// @notice The minimum setable voting period\\n    uint public constant MIN_VOTING_PERIOD = 5760; // About 24 hours\\n\\n    /// @notice The max setable voting period\\n    uint public constant MAX_VOTING_PERIOD = 80640; // About 2 weeks\\n\\n    /// @notice The min setable voting delay\\n    uint public constant MIN_VOTING_DELAY = 1;\\n\\n    /// @notice The max setable voting delay\\n    uint public constant MAX_VOTING_DELAY = 40320; // About 1 week\\n\\n    /// @notice The maximum number of actions that can be included in a proposal\\n    uint public constant proposalMaxOperations = 100; // 100 actions\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,uint8 support)\\\");\\n\\n    mapping (uint => uint) public quorumVotesForProposal; // proposalId => quorum votes required\\n\\n    /**\\n      * @notice Used to initialize the contract during delegator contructor\\n      * @param timelock_ The address of the Timelock\\n      * @param staking_ The address of the STAKING\\n      * @param votingPeriod_ The initial voting period\\n      * @param votingDelay_ The initial voting delay\\n      * @param proposalThreshold_ The initial proposal threshold\\n      */\\n    function initialize(address timelock_, address staking_, uint votingPeriod_, uint votingDelay_, uint proposalThreshold_) public {\\n        require(address(timelock) == address(0), \\\"GovernorBravo::initialize: can only initialize once\\\");\\n        require(msg.sender == admin, \\\"GovernorBravo::initialize: admin only\\\");\\n        require(timelock_ != address(0), \\\"GovernorBravo::initialize: invalid timelock address\\\");\\n        require(staking_ != address(0), \\\"GovernorBravo::initialize: invalid STAKING address\\\");\\n        require(votingPeriod_ >= MIN_VOTING_PERIOD && votingPeriod_ <= MAX_VOTING_PERIOD, \\\"GovernorBravo::initialize: invalid voting period\\\");\\n        require(votingDelay_ >= MIN_VOTING_DELAY && votingDelay_ <= MAX_VOTING_DELAY, \\\"GovernorBravo::initialize: invalid voting delay\\\");\\n        require(proposalThreshold_ >= MIN_PROPOSAL_THRESHOLD && proposalThreshold_ <= MAX_PROPOSAL_THRESHOLD, \\\"GovernorBravo::initialize: invalid proposal threshold\\\");\\n\\n        timelock = TimelockInterface(timelock_);\\n        staking = StakingInterface(staking_);\\n        votingPeriod = votingPeriod_;\\n        votingDelay = votingDelay_;\\n        proposalThreshold = proposalThreshold_;\\n\\n        guardian = msg.sender;\\n    }\\n\\n    /**\\n      * @notice Function used to propose a new proposal. Sender must have delegates above the proposal threshold\\n      * @param targets Target addresses for proposal calls\\n      * @param values Eth values for proposal calls\\n      * @param signatures Function signatures for proposal calls\\n      * @param calldatas Calldatas for proposal calls\\n      * @param description String description of the proposal\\n      * @return Proposal id of new proposal\\n      */\\n    function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) public returns (uint) {\\n        require(targets.length == values.length && targets.length == signatures.length && targets.length == calldatas.length, \\\"GovernorBravo::propose: proposal function information arity mismatch\\\");\\n        require(targets.length != 0, \\\"GovernorBravo::propose: must provide actions\\\");\\n        require(targets.length <= proposalMaxOperations, \\\"GovernorBravo::propose: too many actions\\\");\\n\\n        uint latestProposalId = latestProposalIds[msg.sender];\\n        if (latestProposalId != 0) {\\n            ProposalState proposersLatestProposalState = state(latestProposalId);\\n            require(proposersLatestProposalState != ProposalState.Active, \\\"GovernorBravo::propose: one live proposal per proposer, found an already active proposal\\\");\\n            require(proposersLatestProposalState != ProposalState.Pending, \\\"GovernorBravo::propose: one live proposal per proposer, found an already pending proposal\\\");\\n        }\\n\\n        uint proposalId = proposalCount + 1;\\n        require(staking._setProposalVals(msg.sender, proposalId) > proposalThreshold, \\\"GovernorBravo::propose: proposer votes below proposal threshold\\\");\\n        proposalCount = proposalId;\\n\\n        uint startBlock = add256(block.number, votingDelay);\\n        uint endBlock = add256(startBlock, votingPeriod);\\n\\n        Proposal memory newProposal = Proposal({\\n            id: proposalId,\\n            proposer: msg.sender,\\n            eta: 0,\\n            targets: targets,\\n            values: values,\\n            signatures: signatures,\\n            calldatas: calldatas,\\n            startBlock: startBlock,\\n            endBlock: endBlock,\\n            forVotes: 0,\\n            againstVotes: 0,\\n            abstainVotes: 0,\\n            canceled: false,\\n            executed: false\\n        });\\n\\n        proposals[proposalId] = newProposal;\\n        latestProposalIds[msg.sender] = proposalId;\\n        quorumVotesForProposal[proposalId] = quorumVotes();\\n\\n        emit ProposalCreated(proposalId, msg.sender, targets, values, signatures, calldatas, startBlock, endBlock, description);\\n        return proposalId;\\n    }\\n\\n    /**\\n      * @notice Queues a proposal of state succeeded\\n      * @param proposalId The id of the proposal to queue\\n      */\\n    function queue(uint proposalId) external {\\n        require(state(proposalId) == ProposalState.Succeeded, \\\"GovernorBravo::queue: proposal can only be queued if it is succeeded\\\");\\n        Proposal storage proposal = proposals[proposalId];\\n        uint eta = add256(block.timestamp, timelock.delay());\\n        for (uint i = 0; i < proposal.targets.length; i++) {\\n            queueOrRevertInternal(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], eta);\\n        }\\n        proposal.eta = eta;\\n        emit ProposalQueued(proposalId, eta);\\n    }\\n\\n    function queueOrRevertInternal(address target, uint value, string memory signature, bytes memory data, uint eta) internal {\\n        require(!timelock.queuedTransactions(keccak256(abi.encode(target, value, signature, data, eta))), \\\"GovernorBravo::queueOrRevertInternal: identical proposal action already queued at eta\\\");\\n        timelock.queueTransaction(target, value, signature, data, eta);\\n    }\\n\\n    /**\\n      * @notice Executes a queued proposal if eta has passed\\n      * @param proposalId The id of the proposal to execute\\n      */\\n    function execute(uint proposalId) external payable {\\n        require(state(proposalId) == ProposalState.Queued, \\\"GovernorBravo::execute: proposal can only be executed if it is queued\\\");\\n        Proposal storage proposal = proposals[proposalId];\\n        proposal.executed = true;\\n        for (uint i = 0; i < proposal.targets.length; i++) {\\n            timelock.executeTransaction.value(proposal.values[i])(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\\n        }\\n        emit ProposalExecuted(proposalId);\\n    }\\n\\n    /**\\n      * @notice Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold\\n      * @param proposalId The id of the proposal to cancel\\n      */\\n    function cancel(uint proposalId) external {\\n        require(state(proposalId) != ProposalState.Executed, \\\"GovernorBravo::cancel: cannot cancel executed proposal\\\");\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        require(msg.sender == proposal.proposer || staking.votingBalanceOfNow(proposal.proposer) < proposalThreshold || msg.sender == guardian, \\\"GovernorBravo::cancel: proposer above threshold\\\");\\n\\n        proposal.canceled = true;\\n        for (uint i = 0; i < proposal.targets.length; i++) {\\n            timelock.cancelTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\\n        }\\n\\n        emit ProposalCanceled(proposalId);\\n    }\\n\\n    /**\\n      * @notice Gets the current voting quroum\\n      * @return The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\\n      */\\n    // TODO: Update for OOKI. Handle OOKI surplus mint\\n    function quorumVotes() public view returns (uint256) {\\n        uint256 vestingSupply = IERC20(0x56d811088235F11C8920698a204A5010a788f4b3) // BZRX\\n            .balanceOf(0xB72B31907C1C95F3650b64b2469e08EdACeE5e8F); // vBZRX\\n        uint256 circulatingSupply = 1030000000e18 - vestingSupply; // no overflow\\n        uint256 quorum = circulatingSupply * 4 / 100;\\n        if (quorum < 15450000e18) {\\n            // min quorum is 1.5% of totalSupply\\n            quorum = 15450000e18;\\n        }\\n        return quorum;\\n    }\\n\\n    /**\\n      * @notice Gets actions of a proposal\\n      * @param proposalId the id of the proposal\\n      * @return Targets, values, signatures, and calldatas of the proposal actions\\n      */\\n    function getActions(uint proposalId) external view returns (address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas) {\\n        Proposal storage p = proposals[proposalId];\\n        return (p.targets, p.values, p.signatures, p.calldatas);\\n    }\\n\\n    /**\\n      * @notice Gets the receipt for a voter on a given proposal\\n      * @param proposalId the id of proposal\\n      * @param voter The address of the voter\\n      * @return The voting receipt\\n      */\\n    function getReceipt(uint proposalId, address voter) external view returns (Receipt memory) {\\n        return proposals[proposalId].receipts[voter];\\n    }\\n\\n    /**\\n      * @notice Gets the state of a proposal\\n      * @param proposalId The id of the proposal\\n      * @return Proposal state\\n      */\\n    function state(uint proposalId) public view returns (ProposalState) {\\n        require(proposalCount >= proposalId && proposalId > initialProposalId, \\\"GovernorBravo::state: invalid proposal id\\\");\\n        Proposal storage proposal = proposals[proposalId];\\n        if (proposal.canceled) {\\n            return ProposalState.Canceled;\\n        } else if (block.number <= proposal.startBlock) {\\n            return ProposalState.Pending;\\n        } else if (block.number <= proposal.endBlock) {\\n            return ProposalState.Active;\\n        } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < quorumVotesForProposal[proposalId]) {\\n            return ProposalState.Defeated;\\n        } else if (proposal.eta == 0) {\\n            return ProposalState.Succeeded;\\n        } else if (proposal.executed) {\\n            return ProposalState.Executed;\\n        } else if (block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())) {\\n            return ProposalState.Expired;\\n        } else {\\n            return ProposalState.Queued;\\n        }\\n    }\\n\\n    /**\\n      * @notice Cast a vote for a proposal\\n      * @param proposalId The id of the proposal to vote on\\n      * @param support The support value for the vote. 0=against, 1=for, 2=abstain\\n      */\\n    function castVote(uint proposalId, uint8 support) external {\\n        emit VoteCast(msg.sender, proposalId, support, castVoteInternal(msg.sender, proposalId, support), \\\"\\\");\\n    }\\n\\n    /**\\n      * @notice Cast a vote for a proposal with a reason\\n      * @param proposalId The id of the proposal to vote on\\n      * @param support The support value for the vote. 0=against, 1=for, 2=abstain\\n      * @param reason The reason given for the vote by the voter\\n      */\\n    function castVoteWithReason(uint proposalId, uint8 support, string calldata reason) external {\\n        emit VoteCast(msg.sender, proposalId, support, castVoteInternal(msg.sender, proposalId, support), reason);\\n    }\\n\\n    /**\\n      * @notice Cast a vote for a proposal by signature\\n      * @dev External function that accepts EIP-712 signatures for voting on proposals.\\n      */\\n    function castVoteBySig(uint proposalId, uint8 support, uint8 v, bytes32 r, bytes32 s) public {\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainIdInternal(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"GovernorBravo::castVoteBySig: invalid signature\\\");\\n        emit VoteCast(signatory, proposalId, support, castVoteInternal(signatory, proposalId, support), \\\"\\\");\\n    }\\n\\n\\n    /**\\n      * @dev Allows batching to castVote function\\n      */\\n    function castVotes(uint[] calldata proposalIds, uint8[] calldata supportVals) external {\\n        require(proposalIds.length == supportVals.length, \\\"count mismatch\\\");\\n        for (uint256 i = 0; i < proposalIds.length; i++) {\\n            emit VoteCast(msg.sender, proposalIds[i], supportVals[i], castVoteInternal(msg.sender, proposalIds[i], supportVals[i]), \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n      * @dev Allows batching to castVoteWithReason function\\n      */\\n    function castVotesWithReason(uint[] calldata proposalIds, uint8[] calldata supportVals, string[] calldata reasons) external {\\n        require(proposalIds.length == supportVals.length && proposalIds.length == reasons.length, \\\"count mismatch\\\");\\n        for (uint256 i = 0; i < proposalIds.length; i++) {\\n            emit VoteCast(msg.sender, proposalIds[i], supportVals[i], castVoteInternal(msg.sender, proposalIds[i], supportVals[i]), reasons[i]);\\n        }\\n    }\\n\\n    /**\\n      * @dev Allows batching to castVoteBySig function\\n      */\\n    function castVotesBySig(uint[] calldata proposalIds, uint8[] calldata supportVals, uint8[] calldata vs, bytes32[] calldata rs, bytes32[] calldata ss) external {\\n        require(proposalIds.length == supportVals.length && proposalIds.length == vs.length && proposalIds.length == rs.length && proposalIds.length == ss.length, \\\"count mismatch\\\");\\n        for (uint256 i = 0; i < proposalIds.length; i++) {\\n            castVoteBySig(proposalIds[i], supportVals[i], vs[i], rs[i], ss[i]);\\n        }\\n    }\\n\\n    /**\\n      * @notice Internal function that caries out voting logic\\n      * @param voter The voter that is casting their vote\\n      * @param proposalId The id of the proposal to vote on\\n      * @param support The support value for the vote. 0=against, 1=for, 2=abstain\\n      * @return The number of votes cast\\n      */\\n    function castVoteInternal(address voter, uint proposalId, uint8 support) internal returns (uint96) {\\n        require(state(proposalId) == ProposalState.Active, \\\"GovernorBravo::castVoteInternal: voting is closed\\\");\\n        require(support <= 2, \\\"GovernorBravo::castVoteInternal: invalid vote type\\\");\\n        Proposal storage proposal = proposals[proposalId];\\n        Receipt storage receipt = proposal.receipts[voter];\\n        require(receipt.hasVoted == false, \\\"GovernorBravo::castVoteInternal: voter already voted\\\");\\n        // 2**96-1 is greater than total supply of bzrx 1.3b*1e18 thus guaranteeing it won't ever overflow\\n        uint96 votes = uint96(staking.votingBalanceOf(voter, proposalId));\\n\\n        if (support == 0) {\\n            proposal.againstVotes = add256(proposal.againstVotes, votes);\\n        } else if (support == 1) {\\n            proposal.forVotes = add256(proposal.forVotes, votes);\\n        } else if (support == 2) {\\n            proposal.abstainVotes = add256(proposal.abstainVotes, votes);\\n        }\\n\\n        receipt.hasVoted = true;\\n        receipt.support = support;\\n        receipt.votes = votes;\\n\\n        return votes;\\n    }\\n\\n    /**\\n      * @notice Admin function for setting the voting delay\\n      * @param newVotingDelay new voting delay, in blocks\\n      */\\n    function __setVotingDelay(uint newVotingDelay) external {\\n        require(msg.sender == admin, \\\"GovernorBravo::__setVotingDelay: admin only\\\");\\n        require(newVotingDelay >= MIN_VOTING_DELAY && newVotingDelay <= MAX_VOTING_DELAY, \\\"GovernorBravo::__setVotingDelay: invalid voting delay\\\");\\n        uint oldVotingDelay = votingDelay;\\n        votingDelay = newVotingDelay;\\n\\n        emit VotingDelaySet(oldVotingDelay,votingDelay);\\n    }\\n\\n    /**\\n      * @notice Admin function for setting the voting period\\n      * @param newVotingPeriod new voting period, in blocks\\n      */\\n    function __setVotingPeriod(uint newVotingPeriod) external {\\n        require(msg.sender == admin, \\\"GovernorBravo::__setVotingPeriod: admin only\\\");\\n        require(newVotingPeriod >= MIN_VOTING_PERIOD && newVotingPeriod <= MAX_VOTING_PERIOD, \\\"GovernorBravo::__setVotingPeriod: invalid voting period\\\");\\n        uint oldVotingPeriod = votingPeriod;\\n        votingPeriod = newVotingPeriod;\\n\\n        emit VotingPeriodSet(oldVotingPeriod, votingPeriod);\\n    }\\n\\n    /**\\n      * @notice Admin function for setting the proposal threshold\\n      * @dev newProposalThreshold must be greater than the hardcoded min\\n      * @param newProposalThreshold new proposal threshold\\n      */\\n    function __setProposalThreshold(uint newProposalThreshold) external {\\n        require(msg.sender == admin, \\\"GovernorBravo::__setProposalThreshold: admin only\\\");\\n        require(newProposalThreshold >= MIN_PROPOSAL_THRESHOLD && newProposalThreshold <= MAX_PROPOSAL_THRESHOLD, \\\"GovernorBravo::__setProposalThreshold: invalid proposal threshold\\\");\\n        uint oldProposalThreshold = proposalThreshold;\\n        proposalThreshold = newProposalThreshold;\\n\\n        emit ProposalThresholdSet(oldProposalThreshold, proposalThreshold);\\n    }\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `__acceptLocalAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `__acceptLocalAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      */\\n    function __setPendingLocalAdmin(address newPendingAdmin) external {\\n        // Check caller = admin\\n        require(msg.sender == admin, \\\"GovernorBravo:__setPendingLocalAdmin: admin only\\\");\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      */\\n    function __acceptLocalAdmin() external {\\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\\n        require(msg.sender == pendingAdmin && msg.sender != address(0), \\\"GovernorBravo:__acceptLocalAdmin: pending admin only\\\");\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n    }\\n\\n    function __changeGuardian(address guardian_) public {\\n        require(msg.sender == guardian, \\\"GovernorBravo::__changeGuardian: sender must be gov guardian\\\");\\n        require(guardian_ != address(0), \\\"GovernorBravo::__changeGuardian: not allowed\\\");\\n        guardian = guardian_;\\n    }\\n\\n    function __acceptAdmin() public {\\n        require(msg.sender == guardian, \\\"GovernorBravo::__acceptAdmin: sender must be gov guardian\\\");\\n        timelock.acceptAdmin();\\n    }\\n\\n    function __abdicate() public {\\n        require(msg.sender == guardian, \\\"GovernorBravo::__abdicate: sender must be gov guardian\\\");\\n        guardian = address(0);\\n    }\\n\\n    function __queueSetTimelockPendingAdmin(address newPendingAdmin, uint eta) public {\\n        require(msg.sender == guardian, \\\"GovernorBravo::__queueSetTimelockPendingAdmin: sender must be gov guardian\\\");\\n        timelock.queueTransaction(address(timelock), 0, \\\"setPendingAdmin(address)\\\", abi.encode(newPendingAdmin), eta);\\n    }\\n\\n    function __executeSetTimelockPendingAdmin(address newPendingAdmin, uint eta) public {\\n        require(msg.sender == guardian, \\\"GovernorBravo::__executeSetTimelockPendingAdmin: sender must be gov guardian\\\");\\n        timelock.executeTransaction(address(timelock), 0, \\\"setPendingAdmin(address)\\\", abi.encode(newPendingAdmin), eta);\\n    }\\n\\n    function add256(uint256 a, uint256 b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub256(uint256 a, uint256 b) internal pure returns (uint) {\\n        require(b <= a, \\\"subtraction underflow\\\");\\n        return a - b;\\n    }\\n\\n    function getChainIdInternal() internal pure returns (uint) {\\n        uint chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\"\r\n    },\r\n    \"GovernorBravoInterfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\n\\ncontract GovernorBravoEvents {\\n    /// @notice An event emitted when a new proposal is created\\n    event ProposalCreated(uint id, address proposer, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, uint startBlock, uint endBlock, string description);\\n\\n    /// @notice An event emitted when a vote has been cast on a proposal\\n    /// @param voter The address which casted a vote\\n    /// @param proposalId The proposal id which was voted on\\n    /// @param support Support value for the vote. 0=against, 1=for, 2=abstain\\n    /// @param votes Number of votes which were cast by the voter\\n    /// @param reason The reason given for the vote by the voter\\n    event VoteCast(address indexed voter, uint proposalId, uint8 support, uint votes, string reason);\\n\\n    /// @notice An event emitted when a proposal has been canceled\\n    event ProposalCanceled(uint id);\\n\\n    /// @notice An event emitted when a proposal has been queued in the Timelock\\n    event ProposalQueued(uint id, uint eta);\\n\\n    /// @notice An event emitted when a proposal has been executed in the Timelock\\n    event ProposalExecuted(uint id);\\n\\n    /// @notice An event emitted when the voting delay is set\\n    event VotingDelaySet(uint oldVotingDelay, uint newVotingDelay);\\n\\n    /// @notice An event emitted when the voting period is set\\n    event VotingPeriodSet(uint oldVotingPeriod, uint newVotingPeriod);\\n\\n    /// @notice Emitted when implementation is changed\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /// @notice Emitted when proposal threshold is set\\n    event ProposalThresholdSet(uint oldProposalThreshold, uint newProposalThreshold);\\n\\n    /// @notice Emitted when pendingAdmin is changed\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n}\\n\\ncontract GovernorBravoDelegatorStorage {\\n    /// @notice Administrator for this contract\\n    address public admin;\\n\\n    /// @notice Pending administrator for this contract\\n    address public pendingAdmin;\\n\\n    /// @notice Active brains of Governor\\n    address public implementation;\\n\\n    /// @notice The address of the Governor Guardian\\n    address public guardian;\\n}\\n\\n\\n/**\\n * @title Storage for Governor Bravo Delegate\\n * @notice For future upgrades, do not change GovernorBravoDelegateStorageV1. Create a new\\n * contract which implements GovernorBravoDelegateStorageV1 and following the naming convention\\n * GovernorBravoDelegateStorageVX.\\n */\\ncontract GovernorBravoDelegateStorageV1 is GovernorBravoDelegatorStorage {\\n\\n    /// @notice The delay before voting on a proposal may take place, once proposed, in blocks\\n    uint public votingDelay;\\n\\n    /// @notice The duration of voting on a proposal, in blocks\\n    uint public votingPeriod;\\n\\n    /// @notice The number of votes required in order for a voter to become a proposer\\n    uint public proposalThreshold;\\n\\n    /// @notice Initial proposal id set at become\\n    uint public initialProposalId;\\n\\n    /// @notice The total number of proposals\\n    uint public proposalCount;\\n\\n    /// @notice The address of the bZx Protocol Timelock\\n    TimelockInterface public timelock;\\n\\n    /// @notice The address of the bZx governance token\\n    StakingInterface public staking;\\n\\n    /// @notice The official record of all proposals ever proposed\\n    mapping (uint => Proposal) public proposals;\\n\\n    /// @notice The latest proposal for each proposer\\n    mapping (address => uint) public latestProposalIds;\\n\\n\\n    struct Proposal {\\n        /// @notice Unique id for looking up a proposal\\n        uint id;\\n\\n        /// @notice Creator of the proposal\\n        address proposer;\\n\\n        /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\\n        uint eta;\\n\\n        /// @notice the ordered list of target addresses for calls to be made\\n        address[] targets;\\n\\n        /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\n        uint[] values;\\n\\n        /// @notice The ordered list of function signatures to be called\\n        string[] signatures;\\n\\n        /// @notice The ordered list of calldata to be passed to each call\\n        bytes[] calldatas;\\n\\n        /// @notice The block at which voting begins: holders must delegate their votes prior to this block\\n        uint startBlock;\\n\\n        /// @notice The block at which voting ends: votes must be cast prior to this block\\n        uint endBlock;\\n\\n        /// @notice Current number of votes in favor of this proposal\\n        uint forVotes;\\n\\n        /// @notice Current number of votes in opposition to this proposal\\n        uint againstVotes;\\n\\n        /// @notice Current number of votes for abstaining for this proposal\\n        uint abstainVotes;\\n\\n        /// @notice Flag marking whether the proposal has been canceled\\n        bool canceled;\\n\\n        /// @notice Flag marking whether the proposal has been executed\\n        bool executed;\\n\\n        /// @notice Receipts of ballots for the entire set of voters\\n        mapping (address => Receipt) receipts;\\n    }\\n\\n    /// @notice Ballot receipt record for a voter\\n    struct Receipt {\\n        /// @notice Whether or not a vote has been cast\\n        bool hasVoted;\\n\\n        /// @notice Whether or not the voter supports the proposal or abstains\\n        uint8 support;\\n\\n        /// @notice The number of votes the voter had, which were cast\\n        uint96 votes;\\n    }\\n\\n    /// @notice Possible states that a proposal may be in\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n}\\n\\ninterface TimelockInterface {\\n    function delay() external view returns (uint);\\n    function GRACE_PERIOD() external view returns (uint);\\n    function acceptAdmin() external;\\n    function queuedTransactions(bytes32 hash) external view returns (bool);\\n    function queueTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external returns (bytes32);\\n    function cancelTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external;\\n    function executeTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external payable returns (bytes memory);\\n}\\n\\n\\ninterface StakingInterface {\\n    function votingBalanceOf(\\n        address account,\\n        uint proposalCount)\\n        external\\n        view\\n        returns (uint totalVotes);\\n\\n    function votingBalanceOfNow(\\n        address account)\\n        external\\n        view\\n        returns (uint totalVotes);\\n\\n    function _setProposalVals(\\n        address account,\\n        uint proposalCount)\\n        external\\n        returns (uint);\\n}\\n\\n\\ninterface GovernorAlpha {\\n    /// @notice The total number of proposals\\n    function proposalCount() external returns (uint);\\n}\"\r\n    },\r\n    \"StakingVoteDelegatorState.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2021, bZxDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"StakingUpgradeable.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"EnumerableBytes32Set.sol\\\";\\nimport \\\"IStaking.sol\\\";\\n\\n\\ncontract StakingVoteDelegatorState is StakingUpgradeable {\\n\\n    // A record of each accounts delegate\\n    // delegator => delegatee\\n    mapping (address => address) internal _delegates;\\n\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping (address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint) public nonces;\\n\\n    mapping (address => uint256) public totalDelegators;\\n\\n}\\n\"\r\n    },\r\n    \"StakingVoteDelegatorConstants.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2021, bZxDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"IStaking.sol\\\";\\n\\n\\ncontract StakingVoteDelegatorConstants {\\n    address constant internal ZERO_ADDRESS = address(0);\\n\\n    IStaking constant staking = IStaking(0xe95Ebce2B02Ee07dEF5Ed6B53289801F7Fc137A4);\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n}\\n\"\r\n    },\r\n    \"PausableGuardian.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2021, bZxDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"Ownable.sol\\\";\\n\\n\\ncontract PausableGuardian is Ownable {\\n\\n    // keccak256(\\\"Pausable_FunctionPause\\\")\\n    bytes32 internal constant Pausable_FunctionPause = 0xa7143c84d793a15503da6f19bf9119a2dac94448ca45d77c8bf08f57b2e91047;\\n\\n    // keccak256(\\\"Pausable_GuardianAddress\\\")\\n    bytes32 internal constant Pausable_GuardianAddress = 0x80e6706973d0c59541550537fd6a33b971efad732635e6c3b99fb01006803cdf;\\n\\n    modifier pausable {\\n        require(!_isPaused(msg.sig), \\\"paused\\\");\\n        _;\\n    }\\n\\n    modifier onlyGuardian {\\n        require(msg.sender == getGuardian() || msg.sender == owner(), \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    function _isPaused(bytes4 sig) public view returns (bool isPaused) {\\n        bytes32 slot = keccak256(abi.encodePacked(sig, Pausable_FunctionPause));\\n        assembly {\\n            isPaused := sload(slot)\\n        }\\n    }\\n\\n    function toggleFunctionPause(bytes4 sig) public {\\n        require(msg.sender == getGuardian() || msg.sender == owner(), \\\"unauthorized\\\");\\n        bytes32 slot = keccak256(abi.encodePacked(sig, Pausable_FunctionPause));\\n        assembly {\\n            sstore(slot, 1)\\n        }\\n    }\\n\\n    function toggleFunctionUnPause(bytes4 sig) public {\\n        // only DAO can unpause, and adding guardian temporarily\\n        require(msg.sender == getGuardian() || msg.sender == owner(), \\\"unauthorized\\\");\\n        bytes32 slot = keccak256(abi.encodePacked(sig, Pausable_FunctionPause));\\n        assembly {\\n            sstore(slot, 0)\\n        }\\n    }\\n\\n    function changeGuardian(address newGuardian) public {\\n        require(msg.sender == getGuardian() || msg.sender == owner(), \\\"unauthorized\\\");\\n        assembly {\\n            sstore(Pausable_GuardianAddress, newGuardian)\\n        }\\n    }\\n\\n    function getGuardian() public view returns (address guardian) {\\n        assembly {\\n            guardian := sload(Pausable_GuardianAddress)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IVestingToken.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2021, bZxDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.6.0;\\n\\nimport \\\"SafeERC20.sol\\\";\\n\\n\\ncontract IVestingToken is IERC20 {\\n    function claim()\\n        external;\\n\\n    function vestedBalanceOf(\\n        address _owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function claimedBalanceOf(\\n        address _owner)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IPriceFeeds.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <=0.8.4;\\n\\n\\ninterface IPriceFeeds {\\n    function queryRate(\\n        address sourceToken,\\n        address destToken)\\n        external\\n        view\\n        returns (uint256 rate, uint256 precision);\\n\\n    function queryPrecision(\\n        address sourceToken,\\n        address destToken)\\n        external\\n        view\\n        returns (uint256 precision);\\n\\n    function queryReturn(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceAmount)\\n        external\\n        view\\n        returns (uint256 destAmount);\\n\\n    function checkPriceDisagreement(\\n        address sourceToken,\\n        address destToken,\\n        uint256 sourceAmount,\\n        uint256 destAmount,\\n        uint256 maxSlippage)\\n        external\\n        view\\n        returns (uint256 sourceToDestSwapRate);\\n\\n    function amountInEth(\\n        address Token,\\n        uint256 amount)\\n        external\\n        view\\n        returns (uint256 ethAmount);\\n\\n    function getMaxDrawdown(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount,\\n        uint256 maintenanceMargin)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getCurrentMarginAndCollateralSize(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount)\\n        external\\n        view\\n        returns (uint256 currentMargin, uint256 collateralInEthAmount);\\n\\n    function getCurrentMargin(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount)\\n        external\\n        view\\n        returns (uint256 currentMargin, uint256 collateralToLoanRate);\\n\\n    function shouldLiquidate(\\n        address loanToken,\\n        address collateralToken,\\n        uint256 loanAmount,\\n        uint256 collateralAmount,\\n        uint256 maintenanceMargin)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getFastGasPrice(\\n        address payToken)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"MathUtil.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2021, bZxDao. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <0.8.0;\\n\\nlibrary MathUtil {\\n\\n    /**\\n    * @dev Integer division of two numbers, rounding up and truncating the quotient\\n    */\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divCeil(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, rounding up and truncating the quotient\\n    */\\n    function divCeil(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b != 0, errorMessage);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = ((a - 1) / b) + 1;\\n\\n        return c;\\n    }\\n\\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return _a < _b ? _a : _b;\\n    }\\n}\\n\"\r\n    },\r\n    \"IMasterChefSushi.sol\": {\r\n      \"content\": \"/**\\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity >=0.5.0 <=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IMasterChefSushi {\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    function deposit(uint256 _pid, uint256 _amount)\\n        external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount)\\n        external;\\n\\n    // Info of each user that stakes LP tokens.\\n    function userInfo(uint256, address)\\n        external\\n        view\\n        returns (UserInfo memory);\\n\\n\\n    function pendingSushi(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddAltRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bzrxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableCoinAmount\",\"type\":\"uint256\"}],\"name\":\"AddRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDelegate\",\"type\":\"address\"}],\"name\":\"ChangeDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bzrxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableCoinAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimAltRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bzrxOutput\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableCoinOutput\",\"type\":\"uint256\"}],\"name\":\"ConvertFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bzrxRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableCoinRewards\",\"type\":\"uint256\"}],\"name\":\"DistributeFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"WithdrawFees\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"BZRX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BZRXWeightStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LPTokenOld\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LPTokenWeightStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUSHI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"_isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"_setProposalVals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addAltRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bzrxAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stableCoinAmounts\",\"type\":\"uint256[]\"}],\"name\":\"addDirectRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bzrxTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableCoinTotal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBZRX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newStableCoin\",\"type\":\"uint256\"}],\"name\":\"addRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"altRewardsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"altRewardsRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bZx\",\"outputs\":[{\"internalType\":\"contract IBZx\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfByAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfByAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bzrxBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iBZRXBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vBZRXBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LPTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LPTokenBalanceOld\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bzrxPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bzrxRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bzrxRewardsPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bzrxVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"callerRewardDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"changeGuardian\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"restake\",\"type\":\"bool\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bzrxRewardsEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableCoinRewardsEarned\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim3Crv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stableCoinRewardsEarned\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAltRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sushiRewardsEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crvRewardsEarned\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBzrx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bzrxRewardsEarned\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimCrv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"crvRewardsEarned\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimSushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sushiRewardsEarned\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cliffDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentFeeTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curve3Crv\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curve3PoolGauge\",\"outputs\":[{\"internalType\":\"contract ICurve3PoolGauge\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curve3pool\",\"outputs\":[{\"internalType\":\"contract ICurve3Pool\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curveMinter\",\"outputs\":[{\"internalType\":\"contract ICurveMinter\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bzrxRewardsEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableCoinRewardsEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bzrxRewardsVesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableCoinRewardsVesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sushiRewardsEarned\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentFeeTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVariableWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vBZRXWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iBZRXWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LPTokenWeight\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iBZRX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iBZRXWeightStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardsAddTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCurveDisagreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxUniswapDisagreement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pendingCrvRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stableCoinPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableCoinRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableCoinRewardsPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableCoinVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapPaths\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"toggleFunctionPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"toggleFunctionUnPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalSupplyByAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"settingsTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"updateSettings\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAltRewardsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vBZRX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vBZRXWeightStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingEndTime\",\"type\":\"uint256\"}],\"name\":\"vestedBalanceForAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vested\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingLastSync\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteDelegator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"votingBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"votingBalanceOfNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"votingFromStakedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingV1_1","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}