{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n     function decimals() external view returns (uint8);\r\n}\r\n\r\n// Part: OpenZeppelin/openzeppelin-contracts@3.1.0/Context\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Oracle is Ownable {\r\n    address[] private _calculations;\r\n    address public usdcAddress;\r\n    mapping(address => address) public tokenAliases;\r\n\r\n    event TokenAliasAdded(address tokenAddress, address tokenAliasAddress);\r\n    event TokenAliasRemoved(address tokenAddress);\r\n\r\n    struct TokenAlias {\r\n        address tokenAddress;\r\n        address tokenAliasAddress;\r\n    }\r\n\r\n    constructor(address _usdcAddress) public \r\n    {\r\n        usdcAddress = _usdcAddress;\r\n    }\r\n\r\n    function setCalculations(address[] memory calculationAddresses)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _calculations = calculationAddresses;\r\n    }\r\n\r\n    function calculations() external view returns (address[] memory) {\r\n        return (_calculations);\r\n    }\r\n\r\n    function addTokenAlias(address tokenAddress, address tokenAliasAddress)\r\n        public\r\n        onlyOwner\r\n    {\r\n        tokenAliases[tokenAddress] = tokenAliasAddress;\r\n        emit TokenAliasAdded(tokenAddress, tokenAliasAddress);\r\n    }\r\n\r\n    function addTokenAliases(TokenAlias[] memory _tokenAliases)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < _tokenAliases.length; i++) {\r\n            addTokenAlias(\r\n                _tokenAliases[i].tokenAddress,\r\n                _tokenAliases[i].tokenAliasAddress\r\n            );\r\n        }\r\n    }\r\n\r\n    function removeTokenAlias(address tokenAddress) public onlyOwner {\r\n        delete tokenAliases[tokenAddress];\r\n        emit TokenAliasRemoved(tokenAddress);\r\n    }\r\n\r\n    function getNormalizedValueUsdc(\r\n        address tokenAddress,\r\n        uint256 amount,\r\n        uint256 priceUsdc\r\n    ) public view returns (uint256) {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint256 tokenDecimals = token.decimals();\r\n\r\n        uint256 usdcDecimals = 6;\r\n        uint256 decimalsAdjustment;\r\n        if (tokenDecimals >= usdcDecimals) {\r\n            decimalsAdjustment = tokenDecimals - usdcDecimals;\r\n        } else {\r\n            decimalsAdjustment = usdcDecimals - tokenDecimals;\r\n        }\r\n        uint256 value;\r\n        if (decimalsAdjustment > 0) {\r\n            value =\r\n                (amount * priceUsdc * (10**decimalsAdjustment)) /\r\n                10**(decimalsAdjustment + tokenDecimals);\r\n        } else {\r\n            value = (amount * priceUsdc) / 10**usdcDecimals;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    function getNormalizedValueUsdc(address tokenAddress, uint256 amount)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 priceUsdc = getPriceUsdcRecommended(tokenAddress);\r\n        return getNormalizedValueUsdc(tokenAddress, amount, priceUsdc);\r\n    }\r\n\r\n    function getPriceUsdcRecommended(address tokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address tokenAddressAlias = tokenAliases[tokenAddress];\r\n        address tokenToQuery = tokenAddress;\r\n        if (tokenAddressAlias != address(0)) {\r\n            tokenToQuery = tokenAddressAlias;\r\n        }\r\n        (bool success, bytes memory data) =\r\n            address(this).staticcall(\r\n                abi.encodeWithSignature(\"getPriceUsdc(address)\", tokenToQuery)\r\n            );\r\n        if (success) {\r\n            return abi.decode(data, (uint256));\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    fallback() external {\r\n        for (uint256 i = 0; i < _calculations.length; i++) {\r\n            address calculation = _calculations[i];\r\n            assembly {\r\n                let _target := calculation\r\n                calldatacopy(0, 0, calldatasize())\r\n                let success := staticcall(\r\n                    gas(),\r\n                    _target,\r\n                    0,\r\n                    calldatasize(),\r\n                    0,\r\n                    0\r\n                )\r\n                returndatacopy(0, 0, returndatasize())\r\n                if success {\r\n                    return(0, returndatasize())\r\n                }\r\n            }\r\n        }\r\n        revert(\"Oracle: Fallback proxy failed to return data\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAliasAddress\",\"type\":\"address\"}],\"name\":\"TokenAliasAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenAliasRemoved\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAliasAddress\",\"type\":\"address\"}],\"name\":\"addTokenAlias\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAliasAddress\",\"type\":\"address\"}],\"internalType\":\"struct Oracle.TokenAlias[]\",\"name\":\"_tokenAliases\",\"type\":\"tuple[]\"}],\"name\":\"addTokenAliases\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getNormalizedValueUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceUsdc\",\"type\":\"uint256\"}],\"name\":\"getNormalizedValueUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getPriceUsdcRecommended\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"removeTokenAlias\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"calculationAddresses\",\"type\":\"address[]\"}],\"name\":\"setCalculations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAliases\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Oracle","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7123800eca0c464fb17769a9aabdce406f33d85a8db82a91a5a2861fbe9d7316"}]}