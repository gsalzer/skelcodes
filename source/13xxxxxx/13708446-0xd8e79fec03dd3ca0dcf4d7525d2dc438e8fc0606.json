{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Zapper/DEUS-ETH-Zapper.sol\": {\r\n      \"content\": \"// Be name Khoda\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\npragma abicoder v2;\\r\\n\\r\\n// =================================================================================================================\\r\\n//  _|_|_|    _|_|_|_|  _|    _|    _|_|_|      _|_|_|_|  _|                                                       |\\r\\n//  _|    _|  _|        _|    _|  _|            _|            _|_|_|      _|_|_|  _|_|_|      _|_|_|    _|_|       |\\r\\n//  _|    _|  _|_|_|    _|    _|    _|_|        _|_|_|    _|  _|    _|  _|    _|  _|    _|  _|        _|_|_|_|     |\\r\\n//  _|    _|  _|        _|    _|        _|      _|        _|  _|    _|  _|    _|  _|    _|  _|        _|           |\\r\\n//  _|_|_|    _|_|_|_|    _|_|    _|_|_|        _|        _|  _|    _|    _|_|_|  _|    _|    _|_|_|    _|_|_|     |\\r\\n// =================================================================================================================\\r\\n// ========================= DEUSZapper =========================\\r\\n// ==============================================================\\r\\n// DEUS Finance: https://github.com/DeusFinance\\r\\n\\r\\n// Primary Author(s)\\r\\n// Mohammad Mst\\r\\n// Kazem GH\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\ninterface IWeth{\\r\\n\\tfunction deposit() external payable;\\r\\n}\\r\\ninterface IUniswapV2Router02 {\\r\\n\\tfunction factory() external pure returns (address);\\r\\n\\r\\n\\tfunction addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n\\tfunction addLiquidity(\\r\\n\\t\\taddress tokenA,\\r\\n\\t\\taddress tokenB,\\r\\n\\t\\tuint256 amountADesired,\\r\\n\\t\\tuint256 amountBDesired,\\r\\n\\t\\tuint256 amountAMin,\\r\\n\\t\\tuint256 amountBMin,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 deadline\\r\\n\\t) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\r\\n\\r\\n\\tfunction swapExactTokensForTokens(\\r\\n\\t\\tuint256 amountIn,\\r\\n\\t\\tuint256 amountOutMin,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 deadline\\r\\n\\t) external returns (uint256[] memory amounts);\\r\\n\\r\\n\\tfunction swapExactETHForTokens(\\r\\n\\t\\tuint256 amountOutMin,\\r\\n\\t\\taddress[] calldata path,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 deadline\\r\\n\\t) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n\\tfunction getAmountsIn(\\r\\n\\t\\tuint amountOut, \\r\\n\\t\\taddress[] memory path\\r\\n\\t) external view returns (uint[] memory amounts);\\r\\n\\r\\n\\tfunction getAmountsOut(\\r\\n\\t\\tuint256 amountIn, \\r\\n\\t\\taddress[] calldata path\\r\\n\\t) external view returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniwapV2Pair {\\r\\n\\tfunction token0() external pure returns (address);\\r\\n\\tfunction token1() external pure returns (address);\\r\\n\\tfunction totalSupply() external view returns (uint);\\r\\n\\tfunction getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\r\\n}\\r\\n\\r\\ninterface IStaking {\\r\\n\\tfunction depositFor(address _user, uint256 amount) external;\\r\\n}\\r\\n\\r\\nstruct ProxyInput {\\r\\n\\tuint amountIn;\\r\\n\\tuint minAmountOut;\\r\\n\\tuint deusPriceUSD;\\r\\n\\tuint colPriceUSD;\\r\\n\\tuint usdcForMintAmount;\\r\\n\\tuint deusNeededAmount;\\r\\n\\tuint expireBlock;\\r\\n\\tbytes[] sigs;\\r\\n}\\r\\n\\r\\ninterface IDEIProxy {\\r\\n\\tfunction USDC2DEI(ProxyInput memory proxyInput) external returns (uint deiAmount);\\r\\n    function ERC202DEI(ProxyInput memory proxyInput, address[] memory path) external returns (uint deiAmount);\\r\\n    function Nativecoin2DEI(ProxyInput memory proxyInput, address[] memory path) payable external returns (uint deiAmount);\\r\\n    function getUSDC2DEIInputs(uint amountIn, uint deusPriceUSD, uint colPriceUSD) external view returns (uint amountOut, uint usdcForMintAmount, uint deusNeededAmount);\\r\\n    function getERC202DEIInputs(uint amountIn, uint deusPriceUSD, uint colPriceUSD, address[] memory path) external view returns (uint amountOut, uint usdcForMintAmount, uint deusNeededAmount);\\r\\n}\\r\\n\\r\\nstruct ZapperInput {\\r\\n\\tuint amountIn;\\r\\n\\tuint deusPriceUSD;\\r\\n\\tuint collateralPrice;\\r\\n\\tuint iterations;\\r\\n\\taddress[] toUSDCPath;\\r\\n\\taddress[] toETHPath;\\r\\n\\tuint maxRemainAmount;\\r\\n}\\r\\n\\r\\ncontract DEUS_ETH_ZAPPER is Ownable {\\r\\n\\tusing SafeERC20 for IERC20;\\r\\n\\r\\n\\t/* ========== STATE VARIABLES ========== */\\r\\n\\r\\n\\tbool public stopped;\\r\\n\\taddress public uniswapRouter;\\r\\n\\taddress public pairAddress;\\r\\n\\taddress public deusAddress;\\r\\n\\taddress public ethAddress;\\r\\n\\taddress public stakingAddress;\\r\\n\\taddress public multiSwapAddress; // deus proxy | deus swap\\r\\n\\taddress public deiAddress;\\r\\n\\taddress public usdcAddress;\\r\\n    address public deiProxy;\\r\\n\\taddress[] public dei2deusPath;\\r\\n\\tuint private constant deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;\\r\\n\\r\\n\\t/* ========== CONSTRUCTOR ========== */\\r\\n\\r\\n\\tconstructor (\\r\\n\\t\\taddress _pairAddress,\\r\\n\\t\\taddress _deusAddress,\\r\\n\\t\\taddress _ethAddress,\\r\\n\\t\\taddress _uniswapRouter,\\r\\n\\t\\taddress _stakingAddress,\\r\\n\\t\\taddress _mulitSwapAddress,\\r\\n\\r\\n\\t\\taddress _deiAddress,\\r\\n\\t\\taddress _usdcAddress,\\r\\n        address _deiProxy,\\r\\n\\t\\taddress[] memory _dei2deusPath\\r\\n\\t) {\\r\\n\\t\\tuniswapRouter = _uniswapRouter;\\r\\n\\t\\tpairAddress = _pairAddress;\\r\\n\\t\\tdeusAddress = _deusAddress;\\r\\n\\t\\tethAddress = _ethAddress;\\r\\n\\t\\tstakingAddress = _stakingAddress;\\r\\n\\t\\tmultiSwapAddress = _mulitSwapAddress;\\r\\n\\t\\tdeiAddress = _deiAddress;\\r\\n\\t\\tusdcAddress = _usdcAddress;\\r\\n        deiProxy = _deiProxy;\\r\\n\\t\\tdei2deusPath = _dei2deusPath;\\r\\n\\t\\tinit();\\r\\n\\t}\\r\\n\\r\\n\\t/* ========== RESTRICTED FUNCTIONS ========== */\\r\\n\\r\\n\\tfunction approve(address token, address to) public onlyOwner {\\r\\n\\t\\tIERC20(token).safeApprove(to, type(uint256).max);\\r\\n\\t}\\r\\n\\r\\n\\tfunction emergencyWithdrawERC20(address token, address to, uint amount) external onlyOwner {\\r\\n\\t\\tIERC20(token).safeTransfer(to, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction emergencyWithdrawETH(address recv, uint amount) external onlyOwner {\\r\\n\\t\\tpayable(recv).transfer(amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setStaking(address _stakingAddress) external onlyOwner {\\r\\n\\t\\tstakingAddress = _stakingAddress;\\r\\n\\t\\temit StakingSet(stakingAddress);\\r\\n\\t}\\r\\n\\r\\n\\tfunction setVariables(\\r\\n\\t\\taddress _pairAddress,\\r\\n\\t\\taddress _deusAddress,\\r\\n\\t\\taddress _ethAddress,\\r\\n\\t\\taddress _uniswapRouter,\\r\\n\\t\\taddress _stakingAddress,\\r\\n\\t\\taddress _mulitSwapAddress,\\r\\n\\r\\n\\t\\taddress _deiAddress,\\r\\n\\t\\taddress _usdcAddress,\\r\\n        address _deiProxy,\\r\\n\\t\\taddress[] memory _dei2deusPath\\r\\n\\t) external onlyOwner {\\r\\n\\t\\tuniswapRouter = _uniswapRouter;\\r\\n\\t\\tpairAddress = _pairAddress;\\r\\n\\t\\tdeusAddress = _deusAddress;\\r\\n\\t\\tethAddress = _ethAddress;\\r\\n\\t\\tstakingAddress = _stakingAddress;\\r\\n\\t\\tmultiSwapAddress = _mulitSwapAddress;\\r\\n\\t\\tdeiAddress = _deiAddress;\\r\\n\\t\\tusdcAddress = _usdcAddress;\\r\\n        deiProxy = _deiProxy;\\r\\n\\t\\tdei2deusPath = _dei2deusPath;\\r\\n\\t}\\r\\n\\r\\n\\t// circuit breaker modifiers\\r\\n\\tmodifier stopInEmergency() {\\r\\n\\t\\trequire(!stopped, \\\"ZAPPER: temporarily paused\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/* ========== PUBLIC FUNCTIONS ========== */\\r\\n\\tfunction USDC2DEUS(ProxyInput memory proxyInput) internal returns (uint deusAmount) {\\r\\n\\t\\tuint deiAmount = IDEIProxy(deiProxy).USDC2DEI(proxyInput);\\r\\n        \\r\\n        deusAmount = IUniswapV2Router02(uniswapRouter).swapExactTokensForTokens(deiAmount, 1, dei2deusPath, address(this), deadline)[1];\\r\\n\\r\\n        require(proxyInput.minAmountOut <= deusAmount, \\\"Multi Swap: Insufficient output amount\\\");\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tfunction ERC202DEUS(ProxyInput memory proxyInput, address[] memory path) internal returns (uint deusAmount) {\\r\\n\\t\\t// approve if it doesn't have allowance\\r\\n\\t\\tif (IERC20(path[0]).allowance(address(this), deiProxy) == 0) {IERC20(path[0]).approve(deiProxy, type(uint).max);}\\r\\n        \\r\\n        uint deiAmount = IDEIProxy(deiProxy).ERC202DEI(proxyInput, path);\\r\\n        \\r\\n        deusAmount = IUniswapV2Router02(uniswapRouter).swapExactTokensForTokens(deiAmount, 1, dei2deusPath, address(this), deadline)[1];\\r\\n\\r\\n        require(proxyInput.minAmountOut <= deusAmount, \\\"Multi Swap: Insufficient output amount\\\");\\r\\n\\t}\\r\\n\\r\\n\\t// Should be payable? (I don't think so)\\r\\n\\tfunction Nativecoin2DEUS(ProxyInput memory proxyInput, address[] memory path) internal returns (uint deusAmount) {\\r\\n\\t\\tuint deiAmount = IDEIProxy(deiProxy).Nativecoin2DEI{value: proxyInput.amountIn}(proxyInput, path);\\r\\n        \\r\\n        deusAmount = IUniswapV2Router02(uniswapRouter).swapExactTokensForTokens(deiAmount, 1, dei2deusPath, address(this), deadline)[1];\\r\\n\\r\\n        require(proxyInput.minAmountOut <= deusAmount, \\\"Multi Swap: Insufficient output amount\\\");\\r\\n\\t}\\r\\n\\r\\n\\tfunction buyDeusAndETH(ProxyInput memory proxyInput, uint amountToDeus, uint amountToETH, address[] memory toETHPath, address[] memory toUSDCPath) internal returns(uint token0Bought, uint token1Bought){\\r\\n\\t\\tIUniwapV2Pair pair = IUniwapV2Pair(pairAddress);\\r\\n\\r\\n\\t\\tif (toUSDCPath[0] == usdcAddress) {\\r\\n\\t\\t\\tproxyInput.amountIn = amountToDeus;\\r\\n\\t\\t\\tif (deusAddress == pair.token0()) {\\r\\n\\t\\t\\t\\ttoken0Bought = USDC2DEUS(proxyInput);\\r\\n\\t\\t\\t\\ttoken1Bought  = IUniswapV2Router02(uniswapRouter).swapExactTokensForTokens(amountToETH, 1, toETHPath, address(this), deadline)[toETHPath.length - 1];\\r\\n\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\ttoken1Bought = USDC2DEUS(proxyInput);\\r\\n\\t\\t\\t\\ttoken0Bought  = IUniswapV2Router02(uniswapRouter).swapExactTokensForTokens(amountToETH, 1, toETHPath, address(this), deadline)[toETHPath.length - 1];\\r\\n\\t\\t\\t}\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tif (toETHPath[0] == ethAddress) {\\r\\n\\t\\t\\t\\tproxyInput.amountIn = amountToDeus;\\r\\n\\t\\t\\t\\tif (deusAddress == pair.token0()) {\\r\\n\\t\\t\\t\\t\\ttoken0Bought = Nativecoin2DEUS(proxyInput, toUSDCPath);\\r\\n\\t\\t\\t\\t\\ttoken1Bought  = amountToETH;\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\ttoken1Bought = Nativecoin2DEUS(proxyInput, toUSDCPath);\\r\\n\\t\\t\\t\\t\\ttoken0Bought  = amountToETH;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tproxyInput.amountIn = amountToDeus;\\r\\n\\t\\t\\t\\tif (deusAddress == pair.token0()) {\\r\\n\\t\\t\\t\\t\\ttoken0Bought = ERC202DEUS(proxyInput, toUSDCPath);\\r\\n\\t\\t\\t\\t\\ttoken1Bought  = IUniswapV2Router02(uniswapRouter).swapExactTokensForTokens(amountToETH, 1, toETHPath, address(this), deadline)[toETHPath.length - 1];\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\ttoken1Bought = ERC202DEUS(proxyInput, toUSDCPath);\\r\\n\\t\\t\\t\\t\\ttoken0Bought  = IUniswapV2Router02(uniswapRouter).swapExactTokensForTokens(amountToETH, 1, toETHPath, address(this), deadline)[toETHPath.length - 1];\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction zapInNativecoin(\\r\\n\\t\\tuint256 minLPAmount,\\r\\n\\t\\tbool transferResidual,  // Set false to save gas by donating the residual remaining after a Zap\\r\\n\\t\\tProxyInput memory proxyInput,\\r\\n\\t\\taddress[] calldata toETHPath,\\r\\n\\t\\taddress[] calldata toUSDCPath,\\r\\n\\t\\tuint amountToDeus\\r\\n\\t) external payable {\\r\\n\\t\\tIWeth(ethAddress).deposit{value: msg.value - amountToDeus}();\\r\\n\\r\\n\\t\\tuint amountToETH = proxyInput.amountIn - amountToDeus;\\r\\n\\r\\n\\t\\t(uint256 token0Bought, uint256 token1Bought) = buyDeusAndETH(proxyInput, amountToDeus, amountToETH, toETHPath, toUSDCPath);\\r\\n\\r\\n\\t\\tuint256 LPBought = _uniDeposit(IUniwapV2Pair(pairAddress).token0(),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tIUniwapV2Pair(pairAddress).token1(),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttoken0Bought,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttoken1Bought,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttransferResidual);\\r\\n\\r\\n\\t\\trequire(LPBought >= minLPAmount, \\\"ZAPPER: Insufficient output amount\\\");\\r\\n\\r\\n\\t\\tIStaking(stakingAddress).depositFor(msg.sender, LPBought);\\r\\n\\r\\n\\t\\temit ZappedIn(address(0), pairAddress, msg.value, LPBought, transferResidual);\\r\\n\\t}\\r\\n\\r\\n\\tfunction zapInERC20(\\r\\n\\t\\tuint256 minLPAmount,\\r\\n\\t\\tbool transferResidual,  // Set false to save gas by donating the residual remaining after a Zap\\r\\n\\t\\tProxyInput memory proxyInput,\\r\\n\\t\\taddress[] calldata toETHPath,\\r\\n\\t\\taddress[] calldata toUSDCPath,\\r\\n\\t\\tuint amountToDeus\\r\\n\\t) external {\\r\\n\\t\\tIERC20(toETHPath[0]).safeTransferFrom(msg.sender, address(this), proxyInput.amountIn);\\r\\n\\t\\t\\r\\n\\t\\tif (toETHPath[0] != usdcAddress) {\\r\\n\\t\\t\\t// approve token if doesn't have allowance\\r\\n\\t\\t\\tif (IERC20(toETHPath[0]).allowance(address(this), uniswapRouter) == 0) IERC20(toETHPath[0]).safeApprove(uniswapRouter, type(uint).max);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint amountToETH = proxyInput.amountIn - amountToDeus;\\r\\n\\r\\n\\t\\t(uint256 token0Bought, uint256 token1Bought) = buyDeusAndETH(proxyInput, amountToDeus, amountToETH, toETHPath, toUSDCPath);\\r\\n\\t\\t\\r\\n\\t\\t\\r\\n\\t\\tuint256 LPBought = _uniDeposit(IUniwapV2Pair(pairAddress).token0(),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tIUniwapV2Pair(pairAddress).token1(),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttoken0Bought,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttoken1Bought,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttransferResidual);\\r\\n\\r\\n\\t\\trequire(LPBought >= minLPAmount, \\\"ZAPPER: Insufficient output amount\\\");\\r\\n\\r\\n\\t\\tIStaking(stakingAddress).depositFor(msg.sender, LPBought);\\r\\n\\r\\n\\t\\temit ZappedIn(toETHPath[0], pairAddress, proxyInput.amountIn, LPBought, transferResidual);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _uniDeposit(\\r\\n\\t\\taddress _toUnipoolToken0,\\r\\n\\t\\taddress _toUnipoolToken1,\\r\\n\\t\\tuint256 token0Bought,\\r\\n\\t\\tuint256 token1Bought,\\r\\n\\t\\tbool transferResidual\\r\\n\\t) internal returns(uint256) {\\r\\n\\t\\t(uint256 amountA, uint256 amountB, uint256 LP) = IUniswapV2Router02(uniswapRouter).addLiquidity(\\r\\n\\t\\t\\t_toUnipoolToken0,\\r\\n\\t\\t \\t_toUnipoolToken1,\\r\\n\\t\\t \\ttoken0Bought,\\r\\n\\t\\t \\ttoken1Bought,\\r\\n\\t\\t\\t1,\\r\\n\\t\\t\\t1,\\r\\n\\t\\t\\taddress(this),\\r\\n\\t\\t\\tdeadline\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tif (transferResidual) {\\r\\n\\t\\t\\t//Returning Residue in token0, if any.\\r\\n\\t\\t\\tif (token0Bought - amountA > 0) {\\r\\n\\t\\t\\t\\tIERC20(_toUnipoolToken0).safeTransfer(\\r\\n\\t\\t\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t\\t\\ttoken0Bought - amountA\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t//Returning Residue in token1, if any\\r\\n\\t\\t\\tif (token1Bought - amountB > 0) {\\r\\n\\t\\t\\t\\tIERC20(_toUnipoolToken1).safeTransfer(\\r\\n\\t\\t\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t\\t\\ttoken1Bought - amountB\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn LP;\\r\\n\\t}\\r\\n\\r\\n\\t/* ========== VIEWS ========== */\\r\\n\\r\\n\\tfunction getUSDC2DEUSInputs(uint amountIn, uint deusPriceUSD, uint colPriceUSD) public view returns (uint amountOut, uint usdcForMintAmount, uint deusNeededAmount) {\\r\\n\\t\\t(amountOut, usdcForMintAmount, deusNeededAmount) = IDEIProxy(deiProxy).getUSDC2DEIInputs(amountIn, deusPriceUSD, colPriceUSD);\\r\\n        amountOut = IUniswapV2Router02(uniswapRouter).getAmountsOut(amountOut, dei2deusPath)[1];\\r\\n\\t}\\r\\n\\r\\n\\tfunction getERC202DEUSInputs(uint amountIn, uint deusPriceUSD, uint colPriceUSD, address[] memory path) public view returns (uint amountOut, uint usdcForMintAmount, uint deusNeededAmount) {\\r\\n\\t\\t(amountOut, usdcForMintAmount, deusNeededAmount) = IDEIProxy(deiProxy).getERC202DEIInputs(amountIn, deusPriceUSD, colPriceUSD, path);\\r\\n        amountOut = IUniswapV2Router02(uniswapRouter).getAmountsOut(amountOut, dei2deusPath)[1];\\r\\n\\t}\\r\\n\\r\\n\\tfunction getAmountOut(ZapperInput memory input) public view returns (uint percentage, uint lp, uint usdcForMintAmount, uint deusNeededAmount, uint swapAmount) {\\r\\n\\t\\tif(input.toUSDCPath.length > 0 && input.toUSDCPath[0] == ethAddress) {\\r\\n\\t\\t\\t(swapAmount, ) = getSwapAmountETH(input);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t(swapAmount, ) = getSwapAmountERC20(input);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint deusAmount;\\r\\n\\t\\tif (input.toETHPath.length > 0 && input.toETHPath[0] == usdcAddress) {\\r\\n\\t\\t\\t(deusAmount, usdcForMintAmount, deusNeededAmount) = getUSDC2DEUSInputs(swapAmount, input.deusPriceUSD, input.collateralPrice);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t(deusAmount, usdcForMintAmount, deusNeededAmount) = getERC202DEUSInputs(swapAmount, input.deusPriceUSD, input.collateralPrice, input.toUSDCPath);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tIUniwapV2Pair pair = IUniwapV2Pair(pairAddress);\\r\\n\\t\\t(uint res0, uint res1, ) = pair.getReserves();\\r\\n\\t\\t\\r\\n\\t\\tif(pair.token0() == deusAddress) {\\r\\n\\t\\t\\tpercentage = deusAmount * 1e6 / (res0 + deusAmount);\\r\\n\\t\\t\\tlp = deusAmount * pair.totalSupply() / res0;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tpercentage = deusAmount * 1e6 / (res1 + deusAmount);\\r\\n\\t\\t\\tlp = deusAmount * pair.totalSupply() / res1;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction getSwapAmountERC20(ZapperInput memory input) public view returns(uint, uint) {\\r\\n\\t\\tIUniwapV2Pair pair = IUniwapV2Pair(pairAddress);\\r\\n\\t\\tuint reservedDeus;\\r\\n\\t\\tuint reservedETH;\\r\\n\\t\\tif (deusAddress == pair.token0()) {\\r\\n\\t\\t\\t(reservedDeus, reservedETH, ) = pair.getReserves();\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t(reservedETH, reservedDeus, ) = pair.getReserves();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint remain = input.amountIn;\\r\\n\\t\\tif(input.toETHPath[0] == usdcAddress){\\r\\n\\t\\t\\tremain = remain * 1e12;\\r\\n\\t\\t\\tinput.maxRemainAmount = 1e16;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tinput.maxRemainAmount = IUniswapV2Router02(uniswapRouter).getAmountsIn(1e6, input.toUSDCPath)[0] / 1e2;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint x;\\r\\n\\t\\tuint y;\\r\\n\\t\\tuint amountToSwapToDeus;\\r\\n\\t\\tfor (uint256 i = 0; i < input.iterations; i++) {\\r\\n\\t\\t\\tx = remain / 2;\\r\\n\\r\\n\\t\\t\\tif(x < input.maxRemainAmount) {\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif(input.toETHPath[0] == usdcAddress){\\r\\n\\t\\t\\t\\t(y, , ) = getUSDC2DEUSInputs(x / 1e12, input.deusPriceUSD, input.collateralPrice);\\r\\n\\t\\t\\t}else{\\r\\n\\t\\t\\t\\t(y, , ) = getERC202DEUSInputs(x, input.deusPriceUSD, input.collateralPrice, input.toUSDCPath);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tuint neededCoinForBuyETH = IUniswapV2Router02(uniswapRouter).getAmountsIn(y * reservedETH / reservedDeus, input.toETHPath)[0];\\r\\n\\t\\t\\tif (input.toETHPath[0] == usdcAddress) {\\r\\n\\t\\t\\t\\tneededCoinForBuyETH = neededCoinForBuyETH * 1e12;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\twhile (neededCoinForBuyETH + x > remain) {\\r\\n\\t\\t\\t\\tx = remain - neededCoinForBuyETH;\\r\\n\\r\\n\\t\\t\\t\\tif (input.toETHPath[0] == usdcAddress) {\\r\\n\\t\\t\\t\\t\\t(y, , ) = getUSDC2DEUSInputs(x / 1e12, input.deusPriceUSD, input.collateralPrice);\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t(y, , ) = getERC202DEUSInputs(x, input.deusPriceUSD, input.collateralPrice, input.toUSDCPath);\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tneededCoinForBuyETH = IUniswapV2Router02(uniswapRouter).getAmountsIn(y * reservedETH / reservedDeus, input.toETHPath)[0];\\r\\n\\t\\t\\t\\tif(input.toETHPath[0] == usdcAddress){\\r\\n\\t\\t\\t\\t\\tneededCoinForBuyETH = neededCoinForBuyETH * 1e12;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tremain = remain - neededCoinForBuyETH - x;\\r\\n\\t\\t\\tamountToSwapToDeus += x;\\r\\n\\t\\t}\\r\\n\\t\\tif(input.toETHPath[0] == usdcAddress){\\r\\n\\t\\t\\treturn (amountToSwapToDeus / 1e12, remain / 1e12);\\r\\n\\t\\t}\\r\\n\\t\\treturn (amountToSwapToDeus, remain);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getSwapAmountETH(ZapperInput memory input) public view returns(uint, uint) {\\r\\n\\r\\n\\t\\tIUniwapV2Pair pair = IUniwapV2Pair(pairAddress);\\r\\n\\t\\tuint reservedDeus;\\r\\n\\t\\tuint reservedETH;\\r\\n\\t\\tif (deusAddress == pair.token0()) {\\r\\n\\t\\t\\t(reservedDeus, reservedETH, ) = pair.getReserves();\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t(reservedETH, reservedDeus, ) = pair.getReserves();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tinput.maxRemainAmount = IUniswapV2Router02(uniswapRouter).getAmountsIn(1e6, input.toUSDCPath)[0] / 1e2;\\r\\n\\r\\n\\t\\tuint x;\\r\\n\\t\\tuint y;\\r\\n\\t\\tuint amountToSwapToDeus;\\r\\n\\t\\tfor (uint256 i = 0; i < input.iterations; i++) {\\r\\n\\t\\t\\tx = input.amountIn / 2;\\r\\n\\r\\n\\t\\t\\tif(x < input.maxRemainAmount){\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t(y, , ) = getERC202DEUSInputs(x, input.deusPriceUSD, input.collateralPrice, input.toUSDCPath);\\r\\n\\r\\n\\r\\n\\t\\t\\twhile(y * reservedETH / reservedDeus+ x > input.amountIn) {\\r\\n\\t\\t\\t\\tx = input.amountIn - y * reservedETH / reservedDeus;\\r\\n\\t\\t\\t\\t(y, , ) = getERC202DEUSInputs(x, input.deusPriceUSD, input.collateralPrice, input.toUSDCPath);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tinput.amountIn = input.amountIn - y * reservedETH / reservedDeus - x;\\r\\n\\t\\t\\tamountToSwapToDeus += x;\\r\\n\\t\\t}\\r\\n\\t\\treturn (amountToSwapToDeus, input.amountIn);\\r\\n\\t}\\r\\n\\r\\n\\tfunction init() public onlyOwner {\\r\\n\\t\\tapprove(IUniwapV2Pair(pairAddress).token0(), uniswapRouter);\\r\\n\\t\\tapprove(IUniwapV2Pair(pairAddress).token1(), uniswapRouter);\\r\\n\\t\\tapprove(usdcAddress, deiProxy);\\r\\n\\t\\tapprove(usdcAddress, uniswapRouter);\\r\\n\\t\\tapprove(deiAddress, uniswapRouter);\\r\\n\\t\\tapprove(pairAddress, stakingAddress);\\r\\n\\t}\\r\\n\\r\\n\\t// to Pause the contract\\r\\n\\tfunction toggleContractActive() external onlyOwner {\\r\\n\\t\\tstopped = !stopped;\\r\\n\\t}\\r\\n\\r\\n\\tevent StakingSet(address staking);\\r\\n\\tevent ZappedIn(address input_token, address output_token, uint input_amount, uint output_amount, bool transfer_residual);\\r\\n\\tevent Temp(uint key, uint value);\\r\\n}\\r\\n\\r\\n// Dar panahe Khoda\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deusAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mulitSwapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deiProxy\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_dei2deusPath\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"}],\"name\":\"StakingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Temp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"input_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"output_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"input_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"output_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"transfer_residual\",\"type\":\"bool\"}],\"name\":\"ZappedIn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dei2deusPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deiProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deusAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recv\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"toUSDCPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toETHPath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxRemainAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ZapperInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcForMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusNeededAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getERC202DEUSInputs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcForMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusNeededAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"toUSDCPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toETHPath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxRemainAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ZapperInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"getSwapAmountERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"toUSDCPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toETHPath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxRemainAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ZapperInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"getSwapAmountETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colPriceUSD\",\"type\":\"uint256\"}],\"name\":\"getUSDC2DEUSInputs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcForMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusNeededAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSwapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"setStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deusAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mulitSwapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deiProxy\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_dei2deusPath\",\"type\":\"address[]\"}],\"name\":\"setVariables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLPAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferResidual\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcForMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusNeededAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"internalType\":\"struct ProxyInput\",\"name\":\"proxyInput\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"toETHPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toUSDCPath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountToDeus\",\"type\":\"uint256\"}],\"name\":\"zapInERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLPAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"transferResidual\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcForMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deusNeededAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"sigs\",\"type\":\"bytes[]\"}],\"internalType\":\"struct ProxyInput\",\"name\":\"proxyInput\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"toETHPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toUSDCPath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountToDeus\",\"type\":\"uint256\"}],\"name\":\"zapInNativecoin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"DEUS_ETH_ZAPPER","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"000000000000000000000000367e2d443988e4b222fbfdafdb35eeb7dda9fbb7000000000000000000000000de5ed76e7c05ec5e4572cfc88d1acea165109e44000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000004c48f1421f62d923d9130834135fb4a58e2f429800000000000000000000000045558df54a0cd8df50134e8675db1a39815e7768000000000000000000000000de12c7959e1a72bbe8a5f7a1dc8f8eef9ab011b3000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000b095aa0a0a206ed943faa7f5bd28a47aaf2fec0900000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000de12c7959e1a72bbe8a5f7a1dc8f8eef9ab011b3000000000000000000000000de5ed76e7c05ec5e4572cfc88d1acea165109e44","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}