{"status":"1","message":"OK","result":[{"SourceCode":"// hevm: flattened sources of src/LerpJob.sol\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity =0.8.9 >=0.8.0;\r\n\r\n////// src/interfaces/IJob.sol\r\n// Copyright (C) 2021 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity >=0.8.0; */\r\n\r\n/// @title Maker Keeper Network Job\r\n/// @notice A job represents an independant unit of work that can be done by a keeper\r\ninterface IJob {\r\n\r\n    /// @notice Executes this unit of work\r\n    /// @dev Should revert iff workable() returns canWork of false\r\n    /// @param network The name of the external keeper network\r\n    /// @param args Custom arguments supplied to the job, should be copied from workable response\r\n    function work(bytes32 network, bytes calldata args) external;\r\n\r\n    /// @notice Ask this job if it has a unit of work available\r\n    /// @dev This should never revert, only return false if nothing is available\r\n    /// @dev This should normally be a view, but sometimes that's not possible\r\n    /// @param network The name of the external keeper network\r\n    /// @return canWork Returns true if a unit of work is available\r\n    /// @return args The custom arguments to be provided to work() or an error string if canWork is false\r\n    function workable(bytes32 network) external returns (bool canWork, bytes memory args);\r\n\r\n}\r\n\r\n////// src/base/TimedJob.sol\r\n// Copyright (C) 2021 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity 0.8.9; */\r\n\r\n/* import {IJob} from \"../interfaces/IJob.sol\"; */\r\n\r\ninterface SequencerLike_4 {\r\n    function isMaster(bytes32 network) external view returns (bool);\r\n}\r\n\r\n/// @title A job that executes at a fixed interval\r\n/// @dev Extend this contract to easily execute some action at a fixed interval\r\nabstract contract TimedJob is IJob {\r\n    \r\n    SequencerLike_4 public immutable sequencer;\r\n    uint256 public immutable maxDuration;       // The max duration between ticks\r\n    uint256 public last;\r\n\r\n    // --- Errors ---\r\n    error NotMaster(bytes32 network);\r\n    error TimerNotElapsed(uint256 currentTime, uint256 expiry);\r\n\r\n    constructor(address _sequencer, uint256 _maxDuration) {\r\n        sequencer = SequencerLike_4(_sequencer);\r\n        maxDuration = _maxDuration;\r\n    }\r\n\r\n    function work(bytes32 network, bytes calldata) external {\r\n        if (!sequencer.isMaster(network)) revert NotMaster(network);\r\n        uint256 expiry = last + maxDuration;\r\n        if (block.timestamp < expiry) revert TimerNotElapsed(block.timestamp, expiry);\r\n        \r\n        last = block.timestamp;\r\n        update();\r\n    }\r\n\r\n    function workable(bytes32 network) external view override returns (bool, bytes memory) {\r\n        if (!sequencer.isMaster(network)) return (false, bytes(\"Network is not master\"));\r\n        if (block.timestamp < last + maxDuration) return (false, bytes(\"Timer hasn't elapsed\"));\r\n        \r\n        return (true, \"\");\r\n    }\r\n\r\n    function update() virtual internal;\r\n\r\n}\r\n\r\n////// src/LerpJob.sol\r\n// Copyright (C) 2021 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n/* pragma solidity 0.8.9; */\r\n\r\n/* import {TimedJob} from \"./base/TimedJob.sol\"; */\r\n\r\ninterface LerpFactoryLike {\r\n    function tall() external;\r\n}\r\n\r\n/// @title Tick all lerps\r\ncontract LerpJob is TimedJob {\r\n    \r\n    LerpFactoryLike public immutable lerpFactory;\r\n\r\n    constructor(address _sequencer, address _lerpFactory, uint256 _duration) TimedJob(_sequencer, _duration) {\r\n        lerpFactory = LerpFactoryLike(_lerpFactory);\r\n    }\r\n\r\n    function update() internal override {\r\n        lerpFactory.tall();\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lerpFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"network\",\"type\":\"bytes32\"}],\"name\":\"NotMaster\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"TimerNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"last\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lerpFactory\",\"outputs\":[{\"internalType\":\"contract LerpFactoryLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencer\",\"outputs\":[{\"internalType\":\"contract SequencerLike_4\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"network\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"work\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"network\",\"type\":\"bytes32\"}],\"name\":\"workable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LerpJob","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009566eb72e47e3e20643c0b1dfbee04da5c7e47320000000000000000000000009175561733d138326fdea86cdfdf53e92b5882760000000000000000000000000000000000000000000000000000000000015180","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4ec4c89aabe950a600610a2e2cdf8a9ee0553cc7318cf626ded261de25275052"}]}