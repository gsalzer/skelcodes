{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// File: Strings.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n// File: Roots.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.6;\r\n\r\nlibrary Roots {\r\n\r\n// calculates a^(1/n) to dp decimal places\r\n    // maxIts bounds the number of iterations performed\r\n    function nthRoot(uint _a, uint _n, uint _dp, uint _maxIts) pure internal returns(uint) {\r\n        assert (_n > 1);\r\n\r\n        // The scale factor is a crude way to turn everything into integer calcs.\r\n        // Actually do (a * (10 ^ ((dp + 1) * n))) ^ (1/n)\r\n        // We calculate to one extra dp and round at the end\r\n        uint one = 10 ** (1 + _dp);\r\n        uint a0 = one ** _n * _a;\r\n\r\n        // Initial guess: 1.0\r\n        uint xNew = one;\r\n\r\n        uint iter = 0;\r\n        while (iter < _maxIts) {\r\n            uint x = xNew;\r\n            uint t0 = x ** (_n - 1);\r\n            if (x * t0 > a0) {\r\n                xNew = x - (x - a0 / t0) / _n;\r\n            } else {\r\n                xNew = x + (a0 / t0 - x) / _n;\r\n            }\r\n            ++iter;\r\n            if(xNew == x) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Round to nearest in the last dp.\r\n        return (xNew + 5) / 10;\r\n    }\r\n}\r\n// File: Base64.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0;\r\n\r\n/// @title Base64\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @notice Provides functions for encoding/decoding base64\r\nlibrary Base64 {\r\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\r\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\r\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\r\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\r\n\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length == 0) return '';\r\n\r\n        // load the table into memory\r\n        string memory table = TABLE_ENCODE;\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n\r\n        // add some extra buffer at the end required for the writing\r\n        string memory result = new string(encodedLen + 32);\r\n\r\n        assembly {\r\n            // set the actual output length\r\n            mstore(result, encodedLen)\r\n\r\n            // prepare the lookup table\r\n            let tablePtr := add(table, 1)\r\n\r\n            // input ptr\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            // result ptr, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // run over the input, 3 bytes at a time\r\n            for {} lt(dataPtr, endPtr) {}\r\n            {\r\n                // read 3 bytes\r\n                dataPtr := add(dataPtr, 3)\r\n                let input := mload(dataPtr)\r\n\r\n                // write 4 characters\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n            }\r\n\r\n            // padding with '='\r\n            switch mod(mload(data), 3)\r\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\r\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function decode(string memory _data) internal pure returns (bytes memory) {\r\n        bytes memory data = bytes(_data);\r\n\r\n        if (data.length == 0) return new bytes(0);\r\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\r\n\r\n        // load the table into memory\r\n        bytes memory table = TABLE_DECODE;\r\n\r\n        // every 4 characters represent 3 bytes\r\n        uint256 decodedLen = (data.length / 4) * 3;\r\n\r\n        // add some extra buffer at the end required for the writing\r\n        bytes memory result = new bytes(decodedLen + 32);\r\n\r\n        assembly {\r\n            // padding with '='\r\n            let lastBytes := mload(add(data, mload(data)))\r\n            if eq(and(lastBytes, 0xFF), 0x3d) {\r\n                decodedLen := sub(decodedLen, 1)\r\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\r\n                    decodedLen := sub(decodedLen, 1)\r\n                }\r\n            }\r\n\r\n            // set the actual output length\r\n            mstore(result, decodedLen)\r\n\r\n            // prepare the lookup table\r\n            let tablePtr := add(table, 1)\r\n\r\n            // input ptr\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            // result ptr, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // run over the input, 4 characters at a time\r\n            for {} lt(dataPtr, endPtr) {}\r\n            {\r\n               // read 4 characters\r\n               dataPtr := add(dataPtr, 4)\r\n               let input := mload(dataPtr)\r\n\r\n               // write 3 bytes\r\n               let output := add(\r\n                   add(\r\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\r\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\r\n                   add(\r\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\r\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\r\n                    )\r\n                )\r\n                mstore(resultPtr, shl(232, output))\r\n                resultPtr := add(resultPtr, 3)\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n// File: ABDKMath64x64.sol\r\n\r\n\r\n/*\r\n * ABDK Math 64.64 Smart Contract Library.  Copyright Â© 2019 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\r\n */\r\npragma solidity ^0.8.6;\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with signed\r\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\r\n * basically a simple fraction whose numerator is signed 128-bit integer and\r\n * denominator is 2^64.  As long as denominator is always the same, there is no\r\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\r\n * represented by int128 type holding only the numerator.\r\n */\r\nlibrary ABDKMath64x64 {\r\n  /*\r\n   * Minimum value signed 64.64-bit fixed point number may have. \r\n   */\r\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\r\n\r\n  /*\r\n   * Maximum value signed 64.64-bit fixed point number may have. \r\n   */\r\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n  /**\r\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromInt (int256 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\r\n      return int128 (x << 64);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\r\n   * rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64-bit integer number\r\n   */\r\n  function toInt (int128 x) internal pure returns (int64) {\r\n    unchecked {\r\n      return int64 (x >> 64);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function fromUInt (uint256 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x <= 0x7FFFFFFFFFFFFFFF);\r\n      return int128 (int256 (x << 64));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\r\n   * number rounding down.  Revert on underflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return unsigned 64-bit integer number\r\n   */\r\n  function toUInt (int128 x) internal pure returns (uint64) {\r\n    unchecked {\r\n      require (x >= 0);\r\n      return uint64 (uint128 (x >> 64));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\r\n   * number rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 128.128-bin fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function from128x128 (int256 x) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = x >> 64;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\r\n   * number.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 128.128 fixed point number\r\n   */\r\n  function to128x128 (int128 x) internal pure returns (int256) {\r\n    unchecked {\r\n      return int256 (x) << 64;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x + y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function add (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = int256(x) + y;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x - y.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sub (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = int256(x) - y;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function mul (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 result = int256(x) * y >> 64;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\r\n   * number and y is signed 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 256-bit integer number\r\n   */\r\n  function muli (int128 x, int256 y) internal pure returns (int256) {\r\n    unchecked {\r\n      if (x == MIN_64x64) {\r\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\r\n          y <= 0x1000000000000000000000000000000000000000000000000);\r\n        return -y << 63;\r\n      } else {\r\n        bool negativeResult = false;\r\n        if (x < 0) {\r\n          x = -x;\r\n          negativeResult = true;\r\n        }\r\n        if (y < 0) {\r\n          y = -y; // We rely on overflow behavior here\r\n          negativeResult = !negativeResult;\r\n        }\r\n        uint256 absoluteResult = mulu (x, uint256 (y));\r\n        if (negativeResult) {\r\n          require (absoluteResult <=\r\n            0x8000000000000000000000000000000000000000000000000000000000000000);\r\n          return -int256 (absoluteResult); // We rely on overflow behavior here\r\n        } else {\r\n          require (absoluteResult <=\r\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n          return int256 (absoluteResult);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64 fixed point number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 256-bit integer number\r\n   */\r\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\r\n    unchecked {\r\n      if (y == 0) return 0;\r\n\r\n      require (x >= 0);\r\n\r\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\r\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\r\n\r\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      hi <<= 64;\r\n\r\n      require (hi <=\r\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\r\n      return hi + lo;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function div (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      require (y != 0);\r\n      int256 result = (int256 (x) << 64) / y;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @param y signed 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divi (int256 x, int256 y) internal pure returns (int128) {\r\n    unchecked {\r\n      require (y != 0);\r\n\r\n      bool negativeResult = false;\r\n      if (x < 0) {\r\n        x = -x; // We rely on overflow behavior here\r\n        negativeResult = true;\r\n      }\r\n      if (y < 0) {\r\n        y = -y; // We rely on overflow behavior here\r\n        negativeResult = !negativeResult;\r\n      }\r\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\r\n      if (negativeResult) {\r\n        require (absoluteResult <= 0x80000000000000000000000000000000);\r\n        return -int128 (absoluteResult); // We rely on overflow behavior here\r\n      } else {\r\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        return int128 (absoluteResult); // We rely on overflow behavior here\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\r\n    unchecked {\r\n      require (y != 0);\r\n      uint128 result = divuu (x, y);\r\n      require (result <= uint128 (MAX_64x64));\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate -x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function neg (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x != MIN_64x64);\r\n      return -x;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate |x|.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function abs (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x != MIN_64x64);\r\n      return x < 0 ? -x : x;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\r\n   * zero.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function inv (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x != 0);\r\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function avg (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      return int128 ((int256 (x) + int256 (y)) >> 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\r\n   * Revert on overflow or in case x * y is negative.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\r\n    unchecked {\r\n      int256 m = int256 (x) * int256 (y);\r\n      require (m >= 0);\r\n      require (m <\r\n          0x4000000000000000000000000000000000000000000000000000000000000000);\r\n      return int128 (sqrtu (uint256 (m)));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\r\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @param y uint256 value\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\r\n    unchecked {\r\n      bool negative = x < 0 && y & 1 == 1;\r\n\r\n      uint256 absX = uint128 (x < 0 ? -x : x);\r\n      uint256 absResult;\r\n      absResult = 0x100000000000000000000000000000000;\r\n\r\n      if (absX <= 0x10000000000000000) {\r\n        absX <<= 63;\r\n        while (y != 0) {\r\n          if (y & 0x1 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n          }\r\n          absX = absX * absX >> 127;\r\n\r\n          if (y & 0x2 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n          }\r\n          absX = absX * absX >> 127;\r\n\r\n          if (y & 0x4 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n          }\r\n          absX = absX * absX >> 127;\r\n\r\n          if (y & 0x8 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n          }\r\n          absX = absX * absX >> 127;\r\n\r\n          y >>= 4;\r\n        }\r\n\r\n        absResult >>= 64;\r\n      } else {\r\n        uint256 absXShift = 63;\r\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\r\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\r\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\r\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\r\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\r\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\r\n\r\n        uint256 resultShift = 0;\r\n        while (y != 0) {\r\n          require (absXShift < 64);\r\n\r\n          if (y & 0x1 != 0) {\r\n            absResult = absResult * absX >> 127;\r\n            resultShift += absXShift;\r\n            if (absResult > 0x100000000000000000000000000000000) {\r\n              absResult >>= 1;\r\n              resultShift += 1;\r\n            }\r\n          }\r\n          absX = absX * absX >> 127;\r\n          absXShift <<= 1;\r\n          if (absX >= 0x100000000000000000000000000000000) {\r\n              absX >>= 1;\r\n              absXShift += 1;\r\n          }\r\n\r\n          y >>= 1;\r\n        }\r\n\r\n        require (resultShift < 64);\r\n        absResult >>= 64 - resultShift;\r\n      }\r\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\r\n      require (result >= MIN_64x64 && result <= MAX_64x64);\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function sqrt (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x >= 0);\r\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate binary logarithm of x.  Revert if x <= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function log_2 (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x > 0);\r\n\r\n      int256 msb = 0;\r\n      int256 xc = x;\r\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\r\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n      int256 result = msb - 64 << 64;\r\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\r\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\r\n        ux *= ux;\r\n        uint256 b = ux >> 255;\r\n        ux >>= 127 + b;\r\n        result += bit * int256 (b);\r\n      }\r\n\r\n      return int128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate natural logarithm of x.  Revert if x <= 0.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function ln (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x > 0);\r\n\r\n      return int128 (int256 (\r\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate binary exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp_2 (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x < 0x400000000000000000); // Overflow\r\n\r\n      if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n      uint256 result = 0x80000000000000000000000000000000;\r\n\r\n      if (x & 0x8000000000000000 > 0)\r\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\r\n      if (x & 0x4000000000000000 > 0)\r\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\r\n      if (x & 0x2000000000000000 > 0)\r\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\r\n      if (x & 0x1000000000000000 > 0)\r\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\r\n      if (x & 0x800000000000000 > 0)\r\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\r\n      if (x & 0x400000000000000 > 0)\r\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\r\n      if (x & 0x200000000000000 > 0)\r\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\r\n      if (x & 0x100000000000000 > 0)\r\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\r\n      if (x & 0x80000000000000 > 0)\r\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\r\n      if (x & 0x40000000000000 > 0)\r\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\r\n      if (x & 0x20000000000000 > 0)\r\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\r\n      if (x & 0x10000000000000 > 0)\r\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\r\n      if (x & 0x8000000000000 > 0)\r\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\r\n      if (x & 0x4000000000000 > 0)\r\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\r\n      if (x & 0x2000000000000 > 0)\r\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\r\n      if (x & 0x1000000000000 > 0)\r\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\r\n      if (x & 0x800000000000 > 0)\r\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\r\n      if (x & 0x400000000000 > 0)\r\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\r\n      if (x & 0x200000000000 > 0)\r\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\r\n      if (x & 0x100000000000 > 0)\r\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\r\n      if (x & 0x80000000000 > 0)\r\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\r\n      if (x & 0x40000000000 > 0)\r\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\r\n      if (x & 0x20000000000 > 0)\r\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\r\n      if (x & 0x10000000000 > 0)\r\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\r\n      if (x & 0x8000000000 > 0)\r\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\r\n      if (x & 0x4000000000 > 0)\r\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\r\n      if (x & 0x2000000000 > 0)\r\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\r\n      if (x & 0x1000000000 > 0)\r\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\r\n      if (x & 0x800000000 > 0)\r\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\r\n      if (x & 0x400000000 > 0)\r\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\r\n      if (x & 0x200000000 > 0)\r\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\r\n      if (x & 0x100000000 > 0)\r\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\r\n      if (x & 0x80000000 > 0)\r\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\r\n      if (x & 0x40000000 > 0)\r\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\r\n      if (x & 0x20000000 > 0)\r\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\r\n      if (x & 0x10000000 > 0)\r\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\r\n      if (x & 0x8000000 > 0)\r\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\r\n      if (x & 0x4000000 > 0)\r\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\r\n      if (x & 0x2000000 > 0)\r\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\r\n      if (x & 0x1000000 > 0)\r\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\r\n      if (x & 0x800000 > 0)\r\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\r\n      if (x & 0x400000 > 0)\r\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\r\n      if (x & 0x200000 > 0)\r\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\r\n      if (x & 0x100000 > 0)\r\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\r\n      if (x & 0x80000 > 0)\r\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\r\n      if (x & 0x40000 > 0)\r\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\r\n      if (x & 0x20000 > 0)\r\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\r\n      if (x & 0x10000 > 0)\r\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\r\n      if (x & 0x8000 > 0)\r\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\r\n      if (x & 0x4000 > 0)\r\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\r\n      if (x & 0x2000 > 0)\r\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\r\n      if (x & 0x1000 > 0)\r\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\r\n      if (x & 0x800 > 0)\r\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\r\n      if (x & 0x400 > 0)\r\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\r\n      if (x & 0x200 > 0)\r\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\r\n      if (x & 0x100 > 0)\r\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\r\n      if (x & 0x80 > 0)\r\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\r\n      if (x & 0x40 > 0)\r\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\r\n      if (x & 0x20 > 0)\r\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\r\n      if (x & 0x10 > 0)\r\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\r\n      if (x & 0x8 > 0)\r\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\r\n      if (x & 0x4 > 0)\r\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\r\n      if (x & 0x2 > 0)\r\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\r\n      if (x & 0x1 > 0)\r\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\r\n\r\n      result >>= uint256 (int256 (63 - (x >> 64)));\r\n      require (result <= uint256 (int256 (MAX_64x64)));\r\n\r\n      return int128 (int256 (result));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate natural exponent of x.  Revert on overflow.\r\n   *\r\n   * @param x signed 64.64-bit fixed point number\r\n   * @return signed 64.64-bit fixed point number\r\n   */\r\n  function exp (int128 x) internal pure returns (int128) {\r\n    unchecked {\r\n      require (x < 0x400000000000000000); // Overflow\r\n\r\n      if (x < -0x400000000000000000) return 0; // Underflow\r\n\r\n      return exp_2 (\r\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\r\n   * integer numbers.  Revert on overflow or when y is zero.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @param y unsigned 256-bit integer number\r\n   * @return unsigned 64.64-bit fixed point number\r\n   */\r\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\r\n    unchecked {\r\n      require (y != 0);\r\n\r\n      uint256 result;\r\n\r\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n        result = (x << 64) / y;\r\n      else {\r\n        uint256 msb = 192;\r\n        uint256 xc = x >> 192;\r\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\r\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\r\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\r\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\r\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\r\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\r\n\r\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\r\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n        uint256 hi = result * (y >> 128);\r\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n\r\n        uint256 xh = x >> 192;\r\n        uint256 xl = x << 64;\r\n\r\n        if (xl < lo) xh -= 1;\r\n        xl -= lo; // We rely on overflow behavior here\r\n        lo = hi << 128;\r\n        if (xl < lo) xh -= 1;\r\n        xl -= lo; // We rely on overflow behavior here\r\n\r\n        assert (xh == hi >> 128);\r\n\r\n        result += xl / y;\r\n      }\r\n\r\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n      return uint128 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\r\n   * number.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return unsigned 128-bit integer number\r\n   */\r\n  function sqrtu (uint256 x) private pure returns (uint128) {\r\n    unchecked {\r\n      if (x == 0) return 0;\r\n      else {\r\n        uint256 xx = x;\r\n        uint256 r = 1;\r\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\r\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\r\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\r\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\r\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\r\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\r\n        if (xx >= 0x8) { r <<= 1; }\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1; // Seven iterations should be enough\r\n        uint256 r1 = x / r;\r\n        return uint128 (r < r1 ? r : r1);\r\n      }\r\n    }\r\n  }\r\n}\r\n// File: CombineMetadata.sol\r\n\r\n\r\npragma solidity ^0.8.6;\r\n\r\n\r\n\r\n\r\n\r\ninterface ICombineMetadata {    \r\n    function tokenMetadata(\r\n        uint256 tokenId, \r\n        uint256 rarity, \r\n        uint256 tokenDensity, \r\n        uint256 alphaDensity, \r\n        bool isAlpha, \r\n        uint256 mergeCount) external view returns (string memory);\r\n}\r\n\r\ncontract CombineMetadata is ICombineMetadata {\r\n    \r\n    struct ERC721MetadataStructure {\r\n        bool isImageLinked;\r\n        string name;\r\n        string description;\r\n        string createdBy;\r\n        string image;\r\n        ERC721MetadataAttribute[] attributes;\r\n    }\r\n\r\n    struct ERC721MetadataAttribute {\r\n        bool includeDisplayType;\r\n        bool includeTraitType;\r\n        bool isValueAString;\r\n        string displayType;\r\n        string traitType;\r\n        string value;\r\n    }\r\n    \r\n    using ABDKMath64x64 for int128;    \r\n    using Base64 for string;\r\n    using Roots for uint;    \r\n    using Strings for uint256;    \r\n    \r\n    address public owner;  \r\n\r\n    string private _name;\r\n    string private _imageBaseURI;\r\n    string private _imageExtension;\r\n    uint256 private _maxRadius;\r\n    string[] private _imageParts;\r\n    mapping (string => string) private _classStyles;\r\n  \r\n    string constant private _OFFSET_TAG = '<OFFSET>';\r\n    string constant private _RADIUS_TAG = '<RADIUS>';\r\n    string constant private _CLASS_TAG = '<CLASS>';  \r\n    string constant private _CLASS_STYLE_TAG = '<CLASS_STYLE>';\r\n\r\n    function getRadius() public view returns (uint256) { \r\n        return _maxRadius;\r\n    }\r\n  \r\n    constructor() {\r\n        owner = msg.sender;\r\n        _name = \"c\";\r\n        _imageBaseURI = \"\"; // Set to empty string - results in on-chain SVG generation by default unless this is set later\r\n        _imageExtension = \"\"; // Set to empty string - can be changed later to remain empty, .png, .mp4, etc\r\n        _maxRadius = 2000;\r\n\r\n        // Deploy with default SVG image parts - can be completely replaced later\r\n        _imageParts.push(\"<svg xmlns='http://www.w3.org/2000/svg' version='1.1' width='2000' height='2000'>\");\r\n            _imageParts.push(\"<style>\");\r\n                _imageParts.push(\".m1 #c{fill: #fff;}\");\r\n                _imageParts.push(\".m1 #r{fill: #000;}\");\r\n                _imageParts.push(\".m2 #c{fill: #fff;}\");\r\n                _imageParts.push(\".m2 #r{fill: #10a;}\"); // b\r\n                _imageParts.push(\".m3 #c{fill: #df0;}\"); // y\r\n                _imageParts.push(\".m3 #r{fill: #000;}\");\r\n                _imageParts.push(\".m4 #c{fill: #f00;}\"); // r\r\n                _imageParts.push(\".m4 #r{fill: #000;}\");\r\n                _imageParts.push(\".a #c{fill: #000 !important;}\"); // b\r\n                _imageParts.push(\".a #r{fill: #000 !important;}\");\r\n                _imageParts.push(_CLASS_STYLE_TAG);\r\n            _imageParts.push(\"</style>\");\r\n            _imageParts.push(\"<g class='\");\r\n                _imageParts.push(_CLASS_TAG);\r\n                _imageParts.push(\"'>\");\r\n                    _imageParts.push(\"<rect id='r' width='2000' height='2000'/>\");\r\n                    _imageParts.push(\"<rect id='c' x='\");\r\n                        _imageParts.push(_OFFSET_TAG);\r\n                    _imageParts.push(\"' y='\");\r\n                        _imageParts.push(_OFFSET_TAG);\r\n                    _imageParts.push(\"' width='\");\r\n                        _imageParts.push(_RADIUS_TAG);\r\n                    _imageParts.push(\"' height='\");\r\n                        _imageParts.push(_RADIUS_TAG);\r\n                    _imageParts.push(\"'/>\");\r\n\r\n            _imageParts.push(\"</g>\");                \r\n        _imageParts.push(\"</svg>\");\r\n    }        \r\n    \r\n    function setName(string calldata name_) external { \r\n        _requireOnlyOwner();       \r\n        _name = name_;\r\n    }\r\n\r\n    function setImageBaseURI(string calldata imageBaseURI_, string calldata imageExtension_) external {        \r\n        _requireOnlyOwner();\r\n        _imageBaseURI = imageBaseURI_;\r\n        _imageExtension = imageExtension_;\r\n    }\r\n\r\n    function setMaxRadius(uint256 maxRadius_) external {\r\n        _requireOnlyOwner();\r\n        _maxRadius = maxRadius_;\r\n    }    \r\n\r\n    function tokenMetadata(uint256 tokenId, uint256 rarity, uint256 tokenDensity, uint256 alphaDensity, bool isAlpha, uint256 mergeCount) external view override returns (string memory) {        \r\n        string memory base64Json = Base64.encode(bytes(string(abi.encodePacked(_getJson(tokenId, rarity, tokenDensity, alphaDensity, isAlpha, mergeCount)))));\r\n        return string(abi.encodePacked('data:application/json;base64,', base64Json));\r\n    }\r\n\r\n    function updateImageParts(string[] memory imageParts_) public {\r\n        _requireOnlyOwner();\r\n        _imageParts = imageParts_;\r\n    }\r\n\r\n    function updateClassStyle(string calldata cssClass, string calldata cssStyle) external {\r\n        _requireOnlyOwner();\r\n        _classStyles[cssClass] = cssStyle;\r\n    }\r\n\r\n    function getClassStyle(string memory cssClass) public view returns (string memory) {\r\n        return _classStyles[cssClass];\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function imageBaseURI() public view returns (string memory) {\r\n        return _imageBaseURI;\r\n    }\r\n\r\n    function imageExtension() public view returns (string memory) {\r\n        return _imageExtension;\r\n    }\r\n\r\n    function maxRadius() public view returns (uint256) {\r\n        return _maxRadius;\r\n    }            \r\n\r\n    function getClassString(uint256 tokenId, uint256 rarity, bool isAlpha, bool offchainImage) public pure returns (string memory) {\r\n        return _getClassString(tokenId, rarity, isAlpha, offchainImage);\r\n    }\r\n\r\n    function _getJson(uint256 tokenId, uint256 rarity, uint256 tokenDensity, uint256 alphaDensity, bool isAlpha, uint256 mergeCount) private view returns (string memory) {        \r\n        string memory imageData = \r\n            bytes(_imageBaseURI).length == 0 ? \r\n                _getSvg(tokenId, rarity, tokenDensity, alphaDensity, isAlpha) :\r\n                string(abi.encodePacked(imageBaseURI(), _getClassString(tokenId, rarity, isAlpha, true), \"_\", uint256(int256(_getScaledRadius(tokenDensity, alphaDensity, _maxRadius).toInt())).toString(), imageExtension()));\r\n\r\n        ERC721MetadataStructure memory metadata = ERC721MetadataStructure({\r\n            isImageLinked: bytes(_imageBaseURI).length > 0, \r\n            name: string(abi.encodePacked(name(), \"(\", tokenDensity.toString(), \") #\", tokenId.toString())),\r\n            description: tokenDensity.toString(),\r\n            createdBy: \"Hak\",\r\n            image: imageData,\r\n            attributes: _getJsonAttributes(tokenId, rarity, tokenDensity, mergeCount, isAlpha)\r\n        });\r\n\r\n        return _generateERC721Metadata(metadata);\r\n    }        \r\n\r\n    function _getJsonAttributes(uint256 tokenId, uint256 rarity, uint256 tokenDensity, uint256 mergeCount, bool isAlpha) private pure returns (ERC721MetadataAttribute[] memory) {\r\n        uint256 tensDigit = tokenId % 100 / 10;\r\n        uint256 onesDigit = tokenId % 10;\r\n        uint256 class = tensDigit * 10 + onesDigit;\r\n\r\n        ERC721MetadataAttribute[] memory metadataAttributes = new ERC721MetadataAttribute[](5);\r\n        metadataAttributes[0] = _getERC721MetadataAttribute(false, true, false, \"\", \"Density\", tokenDensity.toString());\r\n        metadataAttributes[1] = _getERC721MetadataAttribute(false, true, false, \"\", \"Alpha\", isAlpha ? \"1\" : \"0\");\r\n        metadataAttributes[2] = _getERC721MetadataAttribute(false, true, false, \"\", \"Tier\", rarity.toString());\r\n        metadataAttributes[3] = _getERC721MetadataAttribute(false, true, false, \"\", \"Class\", class.toString());\r\n        metadataAttributes[4] = _getERC721MetadataAttribute(false, true, false, \"\", \"Combines\", mergeCount.toString());\r\n        return metadataAttributes;\r\n    }    \r\n\r\n    function _getERC721MetadataAttribute(bool includeDisplayType, bool includeTraitType, bool isValueAString, string memory displayType, string memory traitType, string memory value) private pure returns (ERC721MetadataAttribute memory) {\r\n        ERC721MetadataAttribute memory attribute = ERC721MetadataAttribute({\r\n            includeDisplayType: includeDisplayType,\r\n            includeTraitType: includeTraitType,\r\n            isValueAString: isValueAString,\r\n            displayType: displayType,\r\n            traitType: traitType,\r\n            value: value\r\n        });\r\n\r\n        return attribute;\r\n    }    \r\n\r\n    function _getSvg(uint256 tokenId, uint256 rarity, uint256 tokenDensity, uint256 alphaDensity, bool isAlpha) private view returns (string memory) {\r\n        bytes memory byteString;\r\n        int128 radius = _getScaledRadius(tokenDensity, alphaDensity, _maxRadius);\r\n        int128 offset = _getOffset(radius, _maxRadius);\r\n        //return _floatToString(offset);\r\n        for (uint i = 0; i < _imageParts.length; i++) {\r\n          if (_checkTag(_imageParts[i], _RADIUS_TAG)) {\r\n            byteString = abi.encodePacked(byteString, _floatToString(radius));\r\n          } else if (_checkTag(_imageParts[i], _OFFSET_TAG)) {\r\n            byteString = abi.encodePacked(byteString, _floatToString(offset));\r\n          } else if (_checkTag(_imageParts[i], _CLASS_TAG)) {\r\n            byteString = abi.encodePacked(byteString, _getClassString(tokenId, rarity, isAlpha, false));\r\n          } else if (_checkTag(_imageParts[i], _CLASS_STYLE_TAG)) {\r\n              uint256 tensDigit = tokenId % 100 / 10;\r\n              uint256 onesDigit = tokenId % 10;\r\n              uint256 class = tensDigit * 10 + onesDigit;\r\n              string memory classCss = getClassStyle(_getTokenIdClass(class));\r\n              if(bytes(classCss).length > 0) {\r\n                  byteString = abi.encodePacked(byteString, classCss);\r\n              }            \r\n          } else {\r\n            byteString = abi.encodePacked(byteString, _imageParts[i]);\r\n          }\r\n        }\r\n        return string(byteString); \r\n    }\r\n\r\n    function _getScaledRadius(uint256 tokenDensity, uint256 alphaDensity, uint256 maximumRadius) private pure returns (int128) {\r\n        int128 radiusDensity = _getRadius64x64(tokenDensity);\r\n        int128 radiusAlphaDensity = _getRadius64x64(alphaDensity);\r\n        int128 scalePercentage = ABDKMath64x64.div(radiusDensity, radiusAlphaDensity);                \r\n        int128 scaledRadius = ABDKMath64x64.mul(ABDKMath64x64.fromUInt(maximumRadius), scalePercentage);\r\n        if(uint256(int256(scaledRadius.toInt())) == 0) {\r\n            scaledRadius = ABDKMath64x64.fromUInt(1);\r\n        }\r\n        return scaledRadius;\r\n    }\r\n\r\n    function _getOffset(int128 radius, uint256 maximumRadius) private pure returns (int128) {\r\n        \r\n        int128 remainLength = ABDKMath64x64.sub(ABDKMath64x64.fromUInt(maximumRadius), radius);                \r\n        int128 offset = ABDKMath64x64.div(remainLength, ABDKMath64x64.fromUInt(2));\r\n        if(uint256(int256(offset.toInt())) == 0) {\r\n            offset = ABDKMath64x64.fromUInt(0);\r\n        }\r\n        return offset;\r\n    }\r\n\r\n    // Radius = Cube Root(Density) * Cube Root (0.23873241463)\r\n    // Radius = Cube Root(Density) * 0.62035049089\r\n    function _getRadius64x64(uint256 density) private pure returns (int128) {        \r\n        int128 cubeRootScalar = ABDKMath64x64.divu(62035049089, 100000000000);\r\n        int128 cubeRootDensity = ABDKMath64x64.divu(density.nthRoot(3, 6, 32), 1000000);\r\n        int128 radius = ABDKMath64x64.mul(cubeRootDensity, cubeRootScalar);        \r\n        return radius;\r\n    }            \r\n\r\n    function _generateERC721Metadata(ERC721MetadataStructure memory metadata) private pure returns (string memory) {\r\n      bytes memory byteString;    \r\n    \r\n        byteString = abi.encodePacked(\r\n          byteString,\r\n          _openJsonObject());\r\n    \r\n        byteString = abi.encodePacked(\r\n          byteString,\r\n          _pushJsonPrimitiveStringAttribute(\"name\", metadata.name, true));\r\n    \r\n        byteString = abi.encodePacked(\r\n          byteString,\r\n          _pushJsonPrimitiveStringAttribute(\"description\", metadata.description, true));\r\n    \r\n        byteString = abi.encodePacked(\r\n          byteString,\r\n          _pushJsonPrimitiveStringAttribute(\"created_by\", metadata.createdBy, true));\r\n    \r\n        if(metadata.isImageLinked) {\r\n            byteString = abi.encodePacked(\r\n                byteString,\r\n                _pushJsonPrimitiveStringAttribute(\"image\", metadata.image, true));\r\n        } else {\r\n            byteString = abi.encodePacked(\r\n                byteString,\r\n                _pushJsonPrimitiveStringAttribute(\"image_data\", metadata.image, true));\r\n        }\r\n\r\n        byteString = abi.encodePacked(\r\n          byteString,\r\n          _pushJsonComplexAttribute(\"attributes\", _getAttributes(metadata.attributes), false));\r\n    \r\n        byteString = abi.encodePacked(\r\n          byteString,\r\n          _closeJsonObject());\r\n    \r\n        return string(byteString);\r\n    }\r\n\r\n    function _getAttributes(ERC721MetadataAttribute[] memory attributes) private pure returns (string memory) {\r\n        bytes memory byteString;\r\n    \r\n        byteString = abi.encodePacked(\r\n          byteString,\r\n          _openJsonArray());\r\n    \r\n        for (uint i = 0; i < attributes.length; i++) {\r\n          ERC721MetadataAttribute memory attribute = attributes[i];\r\n\r\n          byteString = abi.encodePacked(\r\n            byteString,\r\n            _pushJsonArrayElement(_getAttribute(attribute), i < (attributes.length - 1)));\r\n        }\r\n    \r\n        byteString = abi.encodePacked(\r\n          byteString,\r\n          _closeJsonArray());\r\n    \r\n        return string(byteString);\r\n    }\r\n\r\n    function _getAttribute(ERC721MetadataAttribute memory attribute) private pure returns (string memory) {\r\n        bytes memory byteString;\r\n        \r\n        byteString = abi.encodePacked(\r\n          byteString,\r\n          _openJsonObject());\r\n    \r\n        if(attribute.includeDisplayType) {\r\n          byteString = abi.encodePacked(\r\n            byteString,\r\n            _pushJsonPrimitiveStringAttribute(\"display_type\", attribute.displayType, true));\r\n        }\r\n    \r\n        if(attribute.includeTraitType) {\r\n          byteString = abi.encodePacked(\r\n            byteString,\r\n            _pushJsonPrimitiveStringAttribute(\"trait_type\", attribute.traitType, true));\r\n        }\r\n    \r\n        if(attribute.isValueAString) {\r\n          byteString = abi.encodePacked(\r\n            byteString,\r\n            _pushJsonPrimitiveStringAttribute(\"value\", attribute.value, false));\r\n        } else {\r\n          byteString = abi.encodePacked(\r\n            byteString,\r\n            _pushJsonPrimitiveNonStringAttribute(\"value\", attribute.value, false));\r\n        }\r\n    \r\n        byteString = abi.encodePacked(\r\n          byteString,\r\n          _closeJsonObject());\r\n    \r\n        return string(byteString);\r\n    }\r\n\r\n    function _getClassString(uint256 tokenId, uint256 rarity, bool isAlpha, bool offchainImage) private pure returns (string memory) {\r\n        bytes memory byteString;    \r\n    \r\n        byteString = abi.encodePacked(byteString, _getRarityClass(rarity));\r\n        \r\n        if(isAlpha) {\r\n            byteString = abi.encodePacked(\r\n              byteString,\r\n              string(abi.encodePacked(offchainImage ? \"_\" : \" \", \"a\")));\r\n        }\r\n\r\n        uint256 tensDigit = tokenId % 100 / 10;\r\n        uint256 onesDigit = tokenId % 10;\r\n        uint256 class = tensDigit * 10 + onesDigit;\r\n\r\n        byteString = abi.encodePacked(\r\n          byteString,\r\n          string(abi.encodePacked(offchainImage ? \"_\" : \" \", _getTokenIdClass(class))));\r\n\r\n        return string(byteString);    \r\n    }\r\n\r\n    function _getRarityClass(uint256 rarity) private pure returns (string memory) {\r\n        return string(abi.encodePacked(\"m\", rarity.toString()));\r\n    }\r\n\r\n    function _getTokenIdClass(uint256 class) private pure returns (string memory) {\r\n        return string(abi.encodePacked(\"c\", class.toString()));\r\n    }\r\n\r\n    function _checkTag(string storage a, string memory b) private pure returns (bool) {\r\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\r\n    }\r\n\r\n    function _floatToString(int128 value) private pure returns (string memory) {\r\n        uint256 decimal4 = (value & 0xFFFFFFFFFFFFFFFF).mulu(10000);\r\n        return string(abi.encodePacked(uint256(int256(value.toInt())).toString(), '.', _decimal4ToString(decimal4)));\r\n    }\r\n  \r\n    function _decimal4ToString(uint256 decimal4) private pure returns (string memory) {\r\n        bytes memory decimal4Characters = new bytes(4);\r\n        for (uint i = 0; i < 4; i++) {\r\n          decimal4Characters[3 - i] = bytes1(uint8(0x30 + decimal4 % 10));\r\n          decimal4 /= 10;\r\n        }\r\n        return string(abi.encodePacked(decimal4Characters));\r\n    }\r\n\r\n    function _requireOnlyOwner() private view {\r\n        require(msg.sender == owner, \"You are not the owner\");\r\n    }\r\n\r\n    function _openJsonObject() private pure returns (string memory) {        \r\n        return string(abi.encodePacked(\"{\"));\r\n    }\r\n\r\n    function _closeJsonObject() private pure returns (string memory) {\r\n        return string(abi.encodePacked(\"}\"));\r\n    }\r\n\r\n    function _openJsonArray() private pure returns (string memory) {        \r\n        return string(abi.encodePacked(\"[\"));\r\n    }\r\n\r\n    function _closeJsonArray() private pure returns (string memory) {        \r\n        return string(abi.encodePacked(\"]\"));\r\n    }\r\n\r\n    function _pushJsonPrimitiveStringAttribute(string memory key, string memory value, bool insertComma) private pure returns (string memory) {\r\n        return string(abi.encodePacked('\"', key, '\": \"', value, '\"', insertComma ? ',' : ''));\r\n    }\r\n\r\n    function _pushJsonPrimitiveNonStringAttribute(string memory key, string memory value, bool insertComma) private pure returns (string memory) {\r\n        return string(abi.encodePacked('\"', key, '\": ', value, insertComma ? ',' : ''));\r\n    }\r\n\r\n    function _pushJsonComplexAttribute(string memory key, string memory value, bool insertComma) private pure returns (string memory) {\r\n        return string(abi.encodePacked('\"', key, '\": ', value, insertComma ? ',' : ''));\r\n    }\r\n\r\n    function _pushJsonArrayElement(string memory value, bool insertComma) private pure returns (string memory) {\r\n        return string(abi.encodePacked(value, insertComma ? ',' : ''));\r\n    }\r\n}\r\n// File: Combine.sol\r\n\r\n\r\npragma solidity ^0.8.6;\r\n\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface ERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed fromAddress, address indexed toAddress);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\ninterface ERC721Metadata {\r\n    function name() external view returns (string memory _name);\r\n    function symbol() external view returns (string memory _symbol);\r\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\r\n}\r\n\r\ncontract Combine is ERC721, ERC721Metadata {\r\n \r\n    ICombineMetadata public _metadataGenerator;\r\n\r\n    bool public frozen;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    uint256 constant private CLASS_MULTIPLIER = 100000; // 100k\r\n\r\n    // valid classes are in the range [1, 4]\r\n    uint256 constant private MIN_CLASS_INCL = 1; \r\n    uint256 constant private MAX_CLASS_INCL = 4;\r\n\r\n    // valid densities are in the range [1, 100k - 1]\r\n    uint256 constant private MIN_DENSITY_INCL = 1; \r\n    uint256 constant private MAX_DENSITY_EXCL = CLASS_MULTIPLIER - 1;\r\n\r\n    uint256 public _saleStartTime = 1640969999;\r\n    uint256 public _saleEndTime = 1699999999;\r\n\r\n    uint256 public _maxSupply = 5000;\r\n    uint256 public _maxDensity = 25000;\r\n\r\n    uint256 public _unitPrice = 25e15;\r\n\r\n    uint256 public _freeIndex = 101;\r\n \r\n    uint256 public _nextMintId;\r\n \r\n    uint256 public _countToken;\r\n\r\n    uint256 immutable public _percentageTotal;\r\n    uint256 public _percentageRoyalty;\r\n\r\n    uint256 public _alphaDensity;\r\n\r\n    uint256 public _alphaId;\r\n\r\n    uint256 public _densityTotal;\r\n\r\n    address public _hak;\r\n    address public _collab;\r\n    address public _fund;\r\n    address public _receiver;\r\n    address constant public _dead = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    event AlphaDensityUpdate(uint256 indexed tokenId, uint256 alphaDensity);\r\n\r\n    event DensityUpdate(uint256 indexed tokenIdBurned, uint256 indexed tokenIdPersist, uint256 density);\r\n\r\n    uint256[5001] private _tokenIdArray;\r\n\r\n    mapping (uint256 => uint256) private _tokenIdToIndex;\r\n\r\n    // Mapping of addresses disbarred from holding any token.\r\n    mapping (address => bool) private _blacklistAddress;\r\n\r\n    // Mapping of address allowed to hold multiple tokens.\r\n    mapping (address => bool) private _whitelistAddress;\r\n\r\n    // Mapping from owner address to token ID.\r\n    mapping (address => uint256) private _tokens;\r\n\r\n    // Mapping owner address to token count.\r\n    mapping (address => uint256) private _balances;\r\n\r\n    // Mapping token ID to density value.\r\n    mapping (uint256 => uint256) private _values;\r\n\r\n    // Mapping token ID to all quantity combined into it.\r\n    mapping (uint256 => uint256) private _combineCount;\r\n\r\n    // Mapping from token ID to owner address.\r\n    mapping (uint256 => address) private _owners;\r\n\r\n    // Mapping from token ID to approved address.\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals.\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n\r\n    function getCombineCount(uint256 tokenId) public view returns (uint256 combineCount) {\r\n        require(_exists(tokenId), \"nonexistent token\");\r\n        return _combineCount[tokenId];\r\n    }\r\n\r\n    function getTokenIdFromArray(uint256 index) public view returns (uint256 tokenId) {\r\n        return _tokenIdArray[index];\r\n    }\r\n\r\n    function getIndexFromTokenId(uint256 tokenId) public view returns (uint256 index) {\r\n        return _tokenIdToIndex[tokenId];\r\n    }\r\n\r\n    modifier onlyHak() {\r\n        require(_msgSender() == _hak, \"msg.sender is not hak\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidWhitelist() {\r\n        require(_whitelistAddress[_msgSender()], \"invalid msg.sender\");\r\n        _;\r\n    }\r\n\r\n    modifier notFrozen() {\r\n        require(!frozen, \"transfer frozen\");\r\n        _;\r\n    }\r\n\r\n    function ensureValidClass(uint256 class) private pure {\r\n        require(MIN_CLASS_INCL <= class && class <= MAX_CLASS_INCL, \"class must be [1,4].\");\r\n    }\r\n\r\n    function ensureValidDensity(uint256 density) private pure {\r\n        require(MIN_DENSITY_INCL <= density && density < MAX_DENSITY_EXCL, \"density must be [1,100k-1).\");\r\n    }\r\n   \r\n    constructor(address metadataGenerator_, address collab_, address fund_) {\r\n\r\n        _metadataGenerator = ICombineMetadata(metadataGenerator_);\r\n        _name = \"combine.\";\r\n        _symbol = \"c\";\r\n\r\n        _hak = msg.sender;\r\n        _collab = collab_;\r\n        _fund = fund_;\r\n        _receiver = _hak;\r\n\r\n        _percentageTotal = 10000;\r\n        _percentageRoyalty = 1000;\r\n\r\n        _blacklistAddress[address(this)] = true;            \r\n\r\n        // mint one with density 10 to act as placeholder alpha\r\n        _values[1] = encodeClassAndDensity(1, 10);         \r\n        _owners[1] = msg.sender;\r\n        _tokens[msg.sender] = 1;\r\n        emit Transfer(address(0), msg.sender, 1);\r\n        _countToken++;\r\n        _balances[msg.sender]++;\r\n        _densityTotal = 10;\r\n        _alphaDensity = 10;\r\n        _alphaId = 1;\r\n        emit AlphaDensityUpdate(1, 10);\r\n\r\n        _tokenIdToIndex[1] = 1;\r\n        _tokenIdArray[_countToken] = 1;\r\n        _nextMintId = 2;\r\n    }\r\n        \r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    } \r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _countToken;\r\n    }\r\n \r\n    function combine(uint256 tokenIdRcvr, uint256 tokenIdSndr) external onlyValidWhitelist notFrozen returns (uint256 tokenIdDead) {        \r\n        address owner = ownerOf(tokenIdRcvr);\r\n        require(owner == ownerOf(tokenIdSndr), \"disparate owner\");\r\n        require(_msgSender() == owner, \"not token owner.\");\r\n\r\n        // owners are same, so decrement their balance as we are merging\r\n        _balances[owner] -= 1;\r\n\r\n        tokenIdDead = _combine(tokenIdRcvr, tokenIdSndr);\r\n\r\n        // clear ownership of dead token\r\n        delete _owners[tokenIdDead];\r\n\r\n        // owners are the same; burn dead token from common owner\r\n        emit Transfer(owner, address(0), tokenIdDead);\r\n    }\r\n\r\n    function _transfer(address owner, address from, address to, uint256 tokenId) internal notFrozen {\r\n        require(owner == from, \"token not own\");\r\n        require(to != address(0), \"cannot transfer to zero addr\");\r\n        require(!_blacklistAddress[to], \"cannot transfer to blacklist\");\r\n\r\n        // if transferring to `_dead_` then `_transfer` is interpreted as a burn\r\n        if (to == _dead) {\r\n            _burnNoEmitTransfer(owner, tokenId);\r\n\r\n            emit Transfer(from, _dead, tokenId);\r\n            emit Transfer(_dead, address(0), tokenId);\r\n        } else {\r\n            // Clear any prior approvals\r\n            // includes an emit of Approval to zero\r\n            _approve(owner, address(0), tokenId);\r\n\r\n            // in all cases we first wish to log the transfer\r\n            // no merging later can deny the fact that `from` transferred to `to`\r\n            emit Transfer(from, to, tokenId);\r\n\r\n            if (from == to) {\r\n                // !non-local control flow!\r\n                // we make an exception here, as itâs easy to follow that a self transfer\r\n                // can skip _all_ following state changes\r\n                return;\r\n            }\r\n\r\n            // if all addresses were whitelisted, then transfer would be like any other ERC-721\r\n            // _balances[from] -= 1;\r\n            // _balances[to] += 1;\r\n            // _owners[tokenId] = to;\r\n\r\n            // _balances (1) and _owners (2) are the main mappings to update\r\n            // for non-whitelisted addresses there is also the _tokens (3) mapping\r\n            //\r\n            // Our updates will be\r\n            //   - 1a: decrement balance of `from`\r\n            //   - 1b: update balance of `to` (not guaranteed to increase)\r\n            //   - 2: assign ownership of `tokenId`\r\n            //   - 3a: assign unique token of `to`\r\n            //   - 3b: unassign unique token of `from`\r\n\r\n            bool fromIsWhitelisted = isWhitelisted(from);\r\n            bool toIsWhitelisted = isWhitelisted(to);\r\n\r\n            // BEGIN PART 1: update _balances\r\n            //\r\n            // PART 1a: decrease balance of `from`\r\n            //   the classic implementation would be\r\n            //   _balances[from] -= 1;\r\n            if (fromIsWhitelisted) {\r\n                // from the reasoning:\r\n                // > if all addresses were whitelisted, then transfer would be like any other ERC-721\r\n                _balances[from] -= 1;\r\n            } else {\r\n                // for non-whitelisted addresses, we have the invariant that\r\n                //   _balances[a] <= 1\r\n                // we known that `from` was the owner so the only possible state is\r\n                //   _balances[from] == 1\r\n                // to save an SLOAD, we can assign a balance of 0 (or delete)\r\n                delete _balances[from];\r\n            }\r\n            // PART 1b: increase balance of `to`\r\n            //   the classic implementation would be\r\n            //   _balances[to] += 1;\r\n            if (toIsWhitelisted) {\r\n                // from the reasoning:\r\n                // > if all addresses were whitelisted, then transfer would be like any other ERC-721\r\n                _balances[to] += 1;\r\n            } else if (_tokens[to] == 0) {\r\n                // for non-whitelisted addresses, we have the invariant that\r\n                //   _balances[a] <= 1\r\n                // if _tokens[to] == 0 then _balances[to] == 0\r\n                // to save an SLOAD, we can assign a balance of 1\r\n                _balances[to] = 1;\r\n            } else {\r\n                // for non-whitelisted addresses, we have the invariant that\r\n                //   _balances[a] <= 1\r\n                // if _tokens[to] != 0 then _balance[to] == 1\r\n                // to preserve the invariant, we have nothing to do (the balance is already 1)\r\n            }\r\n            // END PART 1\r\n\r\n            if (toIsWhitelisted) {\r\n                // PART 2: update _owners\r\n                // assign ownership of token\r\n                //   the classic implementation would be\r\n                //   _owners[tokenId] = to;\r\n                //\r\n                // from the reasoning:\r\n                // > if all addresses were whitelisted, then transfer would be like any other ERC-721\r\n                _owners[tokenId] = to;\r\n            } else {\r\n                // label current and sent token with respect to address `to`\r\n                uint256 currentTokenId = _tokens[to];\r\n\r\n                if (currentTokenId == 0) {\r\n                    // PART 2: update _owners\r\n                    // assign ownership of token\r\n                    _owners[tokenId] = to;\r\n\r\n                    // PART 3a\r\n                    // assign unique token of `to`\r\n                    _tokens[to] = tokenId;\r\n                } else {\r\n                    uint256 sentTokenId = tokenId;\r\n\r\n                    // compute token combine, returning the dead token\r\n                    uint256 deadTokenId = _combine(currentTokenId, sentTokenId);\r\n\r\n                    // logically, the token has already been transferred to `to`\r\n                    // so log the burning of the dead token id as originating âfromâ `to`\r\n                    emit Transfer(to, address(0), deadTokenId);\r\n\r\n                    // thus inferring the alive token\r\n                    uint256 aliveTokenId = currentTokenId;\r\n                    if (currentTokenId == deadTokenId) {\r\n                        aliveTokenId = sentTokenId;\r\n                    }\r\n\r\n                    // PART 2 continued:\r\n                    // and ownership of dead token is deleted\r\n                    delete _owners[deadTokenId];\r\n\r\n                    // if received token surplanted the current token\r\n                    if (currentTokenId != aliveTokenId) {\r\n                        // PART 2 continued:\r\n                        // to takes ownership of alive token\r\n                        _owners[aliveTokenId] = to;\r\n\r\n                        // PART 3a\r\n                        // assign unique token of `to`\r\n                        _tokens[to] = aliveTokenId;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // PART 3b:\r\n            // unassign unique token of `from`\r\n            //\r\n            // _tokens is only defined for non-whitelisted addresses\r\n            if (!fromIsWhitelisted) {\r\n                delete _tokens[from];\r\n            }\r\n        }\r\n    }\r\n\r\n    function _increaseDensity(uint256 tokenId, uint256 density_) private {\r\n        uint256 currentDensity = decodeDensity(_values[tokenId]);\r\n        _values[tokenId] += density_;\r\n\r\n        uint256 newDensity = currentDensity + density_;\r\n\r\n        if(newDensity > _alphaDensity) {\r\n            _alphaId = tokenId;\r\n            _alphaDensity = newDensity;\r\n            emit AlphaDensityUpdate(_alphaId, newDensity);\r\n        }\r\n\r\n        emit DensityUpdate(0, tokenId, newDensity);\r\n    }\r\n\r\n    function _combine(uint256 tokenIdRcvr, uint256 tokenIdSndr) internal returns (uint256 tokenIdDead) {\r\n        require(tokenIdRcvr != tokenIdSndr, \"identical tokenId\");\r\n\r\n        uint256 densityRcvr = decodeDensity(_values[tokenIdRcvr]);\r\n        uint256 densitySndr = decodeDensity(_values[tokenIdSndr]);\r\n        \r\n        uint256 densitySmall = densityRcvr;\r\n        uint256 densityLarge = densitySndr;\r\n\r\n        uint256 tokenIdSmall = tokenIdRcvr;\r\n        uint256 tokenIdLarge = tokenIdSndr;\r\n\r\n        if (densityRcvr >= densitySndr) {\r\n\r\n            densitySmall = densitySndr;\r\n            densityLarge = densityRcvr;\r\n\r\n            tokenIdSmall = tokenIdSndr;\r\n            tokenIdLarge = tokenIdRcvr;\r\n        }\r\n\r\n        _values[tokenIdLarge] += densitySmall;\r\n\r\n        uint256 combinedDensity = densityLarge + densitySmall;\r\n\r\n        if(combinedDensity > _alphaDensity) {\r\n            _alphaId = tokenIdLarge;\r\n            _alphaDensity = combinedDensity;\r\n            emit AlphaDensityUpdate(_alphaId, combinedDensity);\r\n        }\r\n        \r\n        _combineCount[tokenIdLarge]++;\r\n\r\n        delete _values[tokenIdSmall];\r\n\r\n        uint256 indexToReplace = _tokenIdToIndex[tokenIdSmall];\r\n        uint256 lastTokenId = _tokenIdArray[_countToken];\r\n        _tokenIdArray[indexToReplace] = lastTokenId;\r\n        _tokenIdToIndex[lastTokenId] = indexToReplace;\r\n        _countToken--;\r\n\r\n        emit DensityUpdate(tokenIdSmall, tokenIdLarge, combinedDensity);\r\n\r\n        return tokenIdSmall;\r\n    }\r\n\r\n    function setRoyaltyBips(uint256 percentageRoyalty_) external onlyHak {\r\n        require(percentageRoyalty_ <= _percentageTotal, \"more than 100%\");\r\n        _percentageRoyalty = percentageRoyalty_;\r\n    }\r\n\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) external view returns (address, uint256) {\r\n        uint256 royaltyAmount = (salePrice * _percentageRoyalty) / _percentageTotal;\r\n        return (_receiver, royaltyAmount);\r\n    }\r\n\r\n    function setBlacklistAddress(address address_, bool status) external onlyHak {\r\n        _blacklistAddress[address_] = status;\r\n    }\r\n\r\n    function setCollab(address collab_) external onlyHak {  \r\n        _collab = collab_;\r\n    }\r\n\r\n    function setFund(address fund_) external onlyHak {  \r\n        _fund = fund_;\r\n    }\r\n\r\n    function setHak(address hak_) external onlyHak {\r\n        require(address(this).balance < 1e16, \"be careful\");\r\n        _hak = hak_;\r\n    }\r\n\r\n    function setUnitPrice(uint256 unitPrice_) external onlyHak {\r\n        _unitPrice = unitPrice_;\r\n    }\r\n\r\n    function setSaleStartTime(uint256 startTime_) external onlyHak {\r\n        require(\r\n            startTime_ < _saleEndTime,\r\n            \"invalid time\"\r\n        );\r\n        _saleStartTime = startTime_;\r\n    }\r\n\r\n    function setSaleEndTime(uint256 endTime_) external onlyHak {\r\n        require(\r\n            _saleStartTime < endTime_,\r\n            \"invalid time\"\r\n        );\r\n        _saleEndTime = endTime_;\r\n    }\r\n\r\n    function setMaxSupply(uint256 count_) external onlyHak {\r\n        require(_nextMintId <= count_, \"invalid supply count\");\r\n        _maxSupply = count_;\r\n    }\r\n\r\n    function setFreeIndex(uint256 index_) external onlyHak {\r\n        require(_nextMintId <= index_ && index_ <= _maxSupply, \"invalid index\");\r\n        _freeIndex = index_;\r\n    }\r\n    \r\n    function setMaxDensity(uint256 density_) external onlyHak {\r\n        require(_densityTotal <= density_ && density_ <= MAX_DENSITY_EXCL, \"invalid density\");\r\n        _maxDensity = density_;\r\n    }\r\n\r\n    function setRoyaltyReceiver(address receiver_) external onlyHak {  \r\n        _receiver = receiver_;\r\n    }\r\n    \r\n    function setMetadataGenerator(address metadataGenerator_) external onlyHak {  \r\n        _metadataGenerator = ICombineMetadata(metadataGenerator_);\r\n    }\r\n   \r\n    function whitelistUpdate(address address_, bool status) external onlyHak {\r\n\r\n        if(status == false) {\r\n            require(balanceOf(address_) <= 1, \"addr cannot be removed\");\r\n        }\r\n\r\n        _whitelistAddress[address_] = status;\r\n    }\r\n\r\n    function isWhitelisted(address address_) public view returns (bool) {\r\n        return _whitelistAddress[address_];\r\n    }\r\n\r\n    function isBlacklisted(address address_) public view returns (bool) {\r\n        return _blacklistAddress[address_];\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view override returns (address owner) {\r\n        owner = _owners[tokenId]; \r\n        require(owner != address(0), \"nonexistent token\");\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     * _densityToMint - density of the cube you want to mint\r\n     *\r\n     * Emits a series of {Transfer} events.\r\n     */\r\n    function mint(uint256 _densityToMint) external payable {\r\n        require(\r\n            block.timestamp >= _saleStartTime && block.timestamp < _saleEndTime,\r\n            \"sale not open\"\r\n        );\r\n        require(_nextMintId < _maxSupply, \"max supply reached\");\r\n        // require(\r\n        //     _balances[msg.sender] == 0,\r\n        //     \"cannot mint while holding cube\"\r\n        // );\r\n        require(\r\n            tx.origin == msg.sender,\r\n            \"cannot use custom contract\"\r\n        );\r\n\r\n        bool ownACube = _balances[msg.sender] != 0;\r\n        \r\n        // for efficiency reasons copy from storage into local variables\r\n        uint256 index = _nextMintId;\r\n        uint256 alphaId = _alphaId;\r\n        uint256 alphaDensity = _alphaDensity;\r\n\r\n        uint256 paidCount = _densityToMint;\r\n\r\n        if (msg.sender == _hak){\r\n            paidCount = 0;\r\n        \r\n        } // first few are free for density 1 (nonholder only)\r\n        else if (index <= _freeIndex && !ownACube){\r\n            paidCount--;\r\n        }\r\n\r\n        require(\r\n            msg.value >= paidCount * _unitPrice,\r\n            \"insufficient ETH\"\r\n        );\r\n\r\n        // update total density in system (must be bounded by MAX_DENSITY_EXCL)\r\n        uint256 prevDensityTotal = _densityTotal;\r\n        uint256 newDensityTotal = prevDensityTotal + _densityToMint;\r\n        require(\r\n            newDensityTotal <= _maxDensity,\r\n            \"total max density reached\"\r\n        );\r\n        _densityTotal = newDensityTotal;\r\n\r\n        // IF owner already has a cube, simply update the density of that cube\r\n        if (ownACube){\r\n            require(!isWhitelisted(msg.sender), \"cannot update wl density\");\r\n            _increaseDensity(tokenOf(msg.sender), _densityToMint);\r\n            return;\r\n        }\r\n\r\n        // 5% of having a special background\r\n        uint256 class = (random() % 100) < 5 ? 2 : 1;\r\n\r\n        _values[index] = encodeClassAndDensity(class, _densityToMint);         \r\n        _owners[index] = msg.sender;\r\n\r\n\r\n        // update token supply\r\n        _countToken++;\r\n\r\n        if (alphaDensity < _densityToMint){\r\n            alphaDensity = _densityToMint;\r\n            alphaId = index;\r\n        }\r\n\r\n        _tokenIdArray[index] = index;\r\n        _tokenIdToIndex[index] = index;\r\n\r\n        _transfer(address(0), address(0), msg.sender, index);\r\n        //emit Transfer(address(0), msg.sender, index);\r\n\r\n        index++;\r\n        // return new token id index to storage\r\n        _nextMintId = index; \r\n\r\n\r\n        // if the alpha was supplanted, return that new state to storage\r\n        if(_alphaId != alphaId) {\r\n            _alphaId = alphaId;\r\n            _alphaDensity = alphaDensity;\r\n            emit AlphaDensityUpdate(alphaId, alphaDensity);\r\n        }        \r\n    }\r\n\r\n    function random() private view returns (uint256) {\r\n        // pseudorandom\r\n        bytes32 randomHash = keccak256(\r\n            abi.encode(\r\n                block.timestamp,\r\n                block.difficulty,\r\n                block.coinbase,\r\n                msg.sender\r\n            )\r\n        );\r\n        return uint256(randomHash);\r\n    }\r\n   \r\n\r\n    function freeze(bool state_) external onlyHak {\r\n        frozen = state_;\r\n    }\r\n\r\n    function _destroy(uint256 tokenId) private {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"nonexistent token\");\r\n        _burnNoEmitTransfer(owner, tokenId);\r\n        if (msg.value > 0){\r\n            (bool success,) = owner.call{value: msg.value}(\"\");\r\n            require(success, \"transfer failed\");\r\n        }\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    function destroyWithMercy(uint256 tokenId) external payable onlyHak {\r\n        _destroy(tokenId);\r\n    }\r\n\r\n    function destroyRandomWithMercy() external payable onlyHak {\r\n        uint256 tokenId = _tokenIdArray[(random() % (_countToken)) + 1];\r\n        uint256 newTokenId;\r\n        while ((random() % _alphaDensity) > densityOf(tokenId)){\r\n            newTokenId = _tokenIdArray[(random() % (_countToken)) + 1];\r\n            if (tokenId == newTokenId){\r\n                break;\r\n            } else {\r\n                tokenId = newTokenId;\r\n            }\r\n        }\r\n        _destroy(tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        transferFrom(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"non ERC721Receiver implementer\");\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        (address owner, bool isApprovedOrOwner) = _isApprovedOrOwner(_msgSender(), tokenId);\r\n        require(isApprovedOrOwner, \"not owner nor approved\");\r\n        _transfer(owner, from, to, tokenId);\r\n    }\r\n\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        return _balances[owner];        \r\n    }\r\n\r\n    function densityOf(uint256 tokenId) public view virtual returns (uint256) {\r\n        uint256 value = getValueOf(tokenId);\r\n        return decodeDensity(value);\r\n    }\r\n\r\n    function getValueOf(uint256 tokenId) public view virtual returns (uint256 value) {\r\n        value = _values[tokenId];\r\n        require(value != 0, \"nonexistent token\");\r\n    }\r\n\r\n    function tokenOf(address owner) public view virtual returns (uint256) {\r\n        require(!isWhitelisted(owner), \"tokenOf undefined\");\r\n        uint256 token = _tokens[owner];\r\n        return token;\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"not owner nor approved for all\"\r\n        );\r\n        _approve(owner, to, tokenId);\r\n    }\r\n\r\n    function _approve(address owner, address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"nonexistent token\");       \r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"approve to caller\");\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function exists(uint256 tokenId) public view returns (bool) {\r\n        return _exists(tokenId);\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (address owner, bool isApprovedOrOwner) {\r\n        owner = _owners[tokenId];\r\n\r\n        require(owner != address(0), \"nonexistent token\");\r\n\r\n        isApprovedOrOwner = (spender == owner || _tokenApprovals[tokenId] == spender || isApprovedForAll(owner, spender));\r\n    }   \r\n\r\n    function tokenURI(uint256 tokenId) public virtual view override returns (string memory) {\r\n        require(_exists(tokenId), \"nonexistent token\");\r\n        \r\n        return _metadataGenerator.tokenMetadata(\r\n            tokenId, \r\n            decodeClass(_values[tokenId]), \r\n            decodeDensity(_values[tokenId]), \r\n            decodeDensity(_values[_alphaId]), \r\n            tokenId == _alphaId,\r\n            getCombineCount(tokenId));\r\n    }\r\n\r\n    function updateTokenClass(uint tokenId, uint256 class) external onlyHak {\r\n        require(_exists(tokenId), \"nonexistent token\");\r\n        _values[tokenId] = encodeClassAndDensity(class, densityOf(tokenId));\r\n    }\r\n\r\n    function encodeClassAndDensity(uint256 class, uint256 density) public pure returns (uint256) {\r\n        ensureValidClass(class);\r\n        ensureValidDensity(density);\r\n        return ((class * CLASS_MULTIPLIER) + density);\r\n    }\r\n\r\n    function decodeClassAndDensity(uint256 value) public pure returns (uint256, uint256) {\r\n        uint256 class = decodeClass(value);\r\n        uint256 density = decodeDensity(value);\r\n        return (class, density);\r\n    }\r\n\r\n    function decodeClass(uint256 value) public pure returns (uint256 class) {\r\n        class = value / CLASS_MULTIPLIER; // integer division is âcheckedâ in Solidity 0.8.x\r\n        ensureValidClass(class);\r\n    }    \r\n\r\n    function decodeDensity(uint256 value) public pure returns (uint256 density) {\r\n        density = value % CLASS_MULTIPLIER; // integer modulo is âcheckedâ in Solidity 0.8.x\r\n        ensureValidDensity(density);\r\n    }\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function withdrawAll() public onlyHak {\r\n        uint256 currentBal = address(this).balance;\r\n        require(currentBal > 0);\r\n        if (_collab == _hak){\r\n            _withdraw(_hak, address(this).balance);\r\n        } else {\r\n            _withdraw(_collab, currentBal / 4); // 25%\r\n            _withdraw(_fund, currentBal / 2); // 50%\r\n            //remainder to prevent ether dust\r\n            _withdraw(_hak, address(this).balance); // 25%\r\n        }\r\n    }\r\n\r\n    function _withdraw(address _addr, uint256 _amt) private {\r\n        (bool success,) = _addr.call{value: _amt}(\"\");\r\n        require(success, \"transfer failed\");\r\n    }\r\n     \r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {\r\n        if (isContract(to)) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"non ERC721Receiver implementer\");\r\n                }\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    revert(add(32, reason), mload(reason))\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }    \r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        bytes4 _ERC165_ = 0x01ffc9a7;\r\n        bytes4 _ERC721_ = 0x80ac58cd;\r\n        bytes4 _ERC2981_ = 0x2a55205a;\r\n        bytes4 _ERC721Metadata_ = 0x5b5e139f;\r\n        return interfaceId == _ERC165_ \r\n            || interfaceId == _ERC721_\r\n            || interfaceId == _ERC2981_\r\n            || interfaceId == _ERC721Metadata_;\r\n    }\r\n\r\n\r\n    function burn(uint256 tokenId) public notFrozen {\r\n        (address owner, bool isApprovedOrOwner) = _isApprovedOrOwner(_msgSender(), tokenId);\r\n        require(isApprovedOrOwner, \"not owner nor approved\");\r\n\r\n        _burnNoEmitTransfer(owner, tokenId);\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    function _burnNoEmitTransfer(address owner, uint256 tokenId) internal {\r\n        _approve(owner, address(0), tokenId);\r\n\r\n        _densityTotal -= decodeDensity(_values[tokenId]);\r\n\r\n        delete _tokens[owner];\r\n        delete _owners[tokenId];\r\n        delete _values[tokenId];\r\n\r\n        uint256 indexToReplace = _tokenIdToIndex[tokenId];\r\n        uint256 lastTokenId = _tokenIdArray[_countToken];\r\n        _tokenIdArray[indexToReplace] = lastTokenId;\r\n        _tokenIdToIndex[lastTokenId] = indexToReplace;\r\n        _countToken--;\r\n\r\n\r\n\r\n        _balances[owner] -= 1;        \r\n\r\n        emit DensityUpdate(tokenId, 0, 0);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metadataGenerator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collab_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fund_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"alphaDensity\",\"type\":\"uint256\"}],\"name\":\"AlphaDensityUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenIdBurned\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenIdPersist\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"density\",\"type\":\"uint256\"}],\"name\":\"DensityUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_alphaDensity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_alphaId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_collab\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_countToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_densityTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_freeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hak\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxDensity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_metadataGenerator\",\"outputs\":[{\"internalType\":\"contract ICombineMetadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nextMintId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_percentageRoyalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_percentageTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_saleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_saleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_unitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIdRcvr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdSndr\",\"type\":\"uint256\"}],\"name\":\"combine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIdDead\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decodeClass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"class\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decodeClassAndDensity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decodeDensity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"density\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"densityOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyRandomWithMercy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"destroyWithMercy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"class\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"density\",\"type\":\"uint256\"}],\"name\":\"encodeClassAndDensity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state_\",\"type\":\"bool\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCombineCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"combineCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getIndexFromTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenIdFromArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_densityToMint\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setBlacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collab_\",\"type\":\"address\"}],\"name\":\"setCollab\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"setFreeIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fund_\",\"type\":\"address\"}],\"name\":\"setFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hak_\",\"type\":\"address\"}],\"name\":\"setHak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"density_\",\"type\":\"uint256\"}],\"name\":\"setMaxDensity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count_\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metadataGenerator_\",\"type\":\"address\"}],\"name\":\"setMetadataGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentageRoyalty_\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyBips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"setRoyaltyReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endTime_\",\"type\":\"uint256\"}],\"name\":\"setSaleEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime_\",\"type\":\"uint256\"}],\"name\":\"setSaleStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unitPrice_\",\"type\":\"uint256\"}],\"name\":\"setUnitPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokenOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"class\",\"type\":\"uint256\"}],\"name\":\"updateTokenClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"whitelistUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Combine","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000003569fbc5b9cb5e21a18b632c97c32f7a296734f5000000000000000000000000405937f8ad695b20bb2eb4630c7bc9bae23326d8000000000000000000000000f80a1479f144e3a2f74a77ca9c07964b7349c4f8","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1e111a1df4a28d4f1931a31bf43916d3927fcd4089eb14d334200a080914f628"}]}