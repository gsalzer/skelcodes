{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address _to, uint256 _amount) external;\r\n    function transferFrom(address _from, address _to, uint256 _amount) external;\r\n    function mint(address _to, uint256 _amount) external;\r\n    function burn(uint256 _amount) external;\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _owner) public onlyOwner {\r\n        owner = _owner;\r\n        emit OwnershipTransferred(owner, _owner);\r\n    }\r\n}\r\n\r\ncontract BurnBridge is Ownable {\r\n    mapping(address => Token) public tokens;\r\n    mapping(address => Token) public pairs;\r\n    uint256 public nativeCirculation = 0;\r\n\r\n    struct Token {\r\n        bool active;\r\n        address tokenAddress;\r\n        bool isERC20;  // false: native, true: ERC20\r\n        bool mintable; // false: unlock, true: mint\r\n        bool burnable; // false: lock,   true: burn\r\n    }\r\n    \r\n    event Bridge(address indexed _from, address indexed _token1, address indexed _token2, address _to, uint256 _amount);\r\n\r\n    constructor() {}\r\n    \r\n    function setPair(address _token1, bool _mintable, bool _burnable, address _token2) external onlyOwner returns (bool) {\r\n        Token memory token1 = Token(true, _token1, _token1 == address(0) ? false: true, _mintable, _burnable);\r\n        Token memory token2 = Token(true, _token2, _token2 == address(0) ? false: true, false, false);\r\n        \r\n        tokens[_token1] = token1;\r\n        pairs[_token1] = token2;\r\n        return true;\r\n    }\r\n    \r\n    function removePair(address _token1) external onlyOwner returns (bool) {\r\n        pairs[_token1] = Token(true, address(0), false, false, false);\r\n        return true;\r\n    }\r\n    \r\n    receive() external payable {\r\n        // Do nothing\r\n    }\r\n    \r\n    function deposit(address _token, address _to, uint256 _amount) external payable returns (bool) {\r\n        Token memory token1 = tokens[_token];\r\n        Token memory token2 = pairs[_token];\r\n        require(token2.active, \"the token is not acceptable\");\r\n\r\n        if (token1.isERC20) {\r\n            IERC20 token = IERC20(_token);\r\n            token.transferFrom(msg.sender, address(this), _amount);\r\n\r\n            if (token1.burnable) {\r\n                token.burn(_amount);\r\n            }\r\n\r\n            emit Bridge(msg.sender, token1.tokenAddress, token2.tokenAddress, _to, _amount);\r\n        } else {\r\n            token1 = tokens[address(0)];\r\n            token2 = pairs[address(0)];\r\n            require(msg.value > 0, \"msg.value is zero\");\r\n            require(token2.active, \"the native token is not acceptable\");\r\n\r\n            emit Bridge(msg.sender, token1.tokenAddress, token2.tokenAddress, msg.sender, msg.value);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function trigger(address _token, address payable _to, uint256 _amount) external onlyOwner returns (bool) {\r\n        Token memory token = tokens[_token];\r\n        require(token.active, \"the token is not acceptable\");\r\n\r\n        if (!token.isERC20) {\r\n            // Native token\r\n            _to.transfer(_amount);\r\n        } else if (token.mintable) {\r\n            // Mintable ERC20\r\n            IERC20(token.tokenAddress).mint(_to, _amount);\r\n        } else {\r\n            // Non-mintable ERC20 \r\n            IERC20(token.tokenAddress).transfer(_to, _amount);\r\n        }\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Bridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeCirculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isERC20\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"burnable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"name\":\"removePair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_mintable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_burnable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_token2\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isERC20\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"burnable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"trigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BurnBridge","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a96a8b4e651674b6cd5cae168eb24f29d06212bdc1dba6b60bc49443fabd8a8e"}]}