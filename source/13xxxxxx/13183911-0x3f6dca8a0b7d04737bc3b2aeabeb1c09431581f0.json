{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocols/mainnet/yearn_v2/main.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\nimport \\\"./interfaces.sol\\\";\\nimport \\\"./helpers.sol\\\";\\n\\ncontract Resolver is Helpers {\\n    /**\\n     * @dev Count the number of positions in Yearn for a given owner.\\n     */\\n    function _countPositions(address[] memory wantAddresses) internal view returns (uint256) {\\n        YearnRegistryInterface registry = getRegistry();\\n        uint256 arraySize = 0;\\n        for (uint256 i = 0; i < wantAddresses.length; i++) {\\n            if (!registry.isRegistered(wantAddresses[i])) {\\n                continue;\\n            }\\n            uint256 numVaults = registry.numVaults(wantAddresses[i]);\\n            arraySize += numVaults;\\n        }\\n        return arraySize;\\n    }\\n\\n    /**\\n     * @dev Prepare the vaultData for a specific vault, want and owner\\n     */\\n    function _prepareVaultData(\\n        YearnRegistryInterface registry,\\n        YearnV2Interface vault,\\n        address want,\\n        address owner\\n    ) internal view returns (VaultData memory vaultData) {\\n        address latest = registry.latestVault(want);\\n        uint256 pricePerShare = vault.pricePerShare();\\n        uint256 balanceOfWant = TokenInterface(want).balanceOf(owner);\\n        uint256 decimals = vault.decimals();\\n        return\\n            VaultData(\\n                latest,\\n                address(vault),\\n                want,\\n                pricePerShare,\\n                vault.availableDepositLimit(),\\n                vault.totalAssets(),\\n                vault.balanceOf(owner),\\n                balanceOfWant,\\n                (pricePerShare * balanceOfWant) / (10**decimals),\\n                decimals,\\n                latest != address(vault),\\n                vault.emergencyShutdown()\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the current positions in Yearn for a given owner.\\n     */\\n    function getPositions(address owner, address[] memory wantAddresses) public view returns (VaultData[] memory) {\\n        YearnRegistryInterface registry = getRegistry();\\n        uint256 arraySize = _countPositions(wantAddresses);\\n\\n        VaultData[] memory vaultData = new VaultData[](arraySize);\\n        for (uint256 i = 0; i < wantAddresses.length; i++) {\\n            if (!registry.isRegistered(wantAddresses[i])) {\\n                continue;\\n            }\\n            uint256 numVaults = registry.numVaults(wantAddresses[i]);\\n            for (uint256 vaultIndex = 0; vaultIndex < numVaults; vaultIndex++) {\\n                YearnV2Interface vault = YearnV2Interface(registry.vaults(wantAddresses[i], vaultIndex));\\n                vaultData[i] = _prepareVaultData(registry, vault, wantAddresses[i], owner);\\n            }\\n        }\\n\\n        return vaultData;\\n    }\\n\\n    /**\\n     * @dev Returns the current positions in lastest vaults for a given owner.\\n     */\\n    function getPositionsForLatest(address owner, address[] memory wantAddresses)\\n        public\\n        view\\n        returns (VaultData[] memory)\\n    {\\n        YearnRegistryInterface registry = getRegistry();\\n        VaultData[] memory vaultData = new VaultData[](wantAddresses.length);\\n\\n        for (uint256 i = 0; i < wantAddresses.length; i++) {\\n            if (!registry.isRegistered(wantAddresses[i])) {\\n                continue;\\n            }\\n            YearnV2Interface vault = YearnV2Interface(registry.latestVault(wantAddresses[i]));\\n            vaultData[i] = _prepareVaultData(registry, vault, wantAddresses[i], owner);\\n        }\\n\\n        return vaultData;\\n    }\\n\\n    /**\\n     * @dev Returns the vault status (emergency shutdown or not)\\n     */\\n    function isEmergencyShutdown(YearnV2Interface vault) public view returns (bool) {\\n        return vault.emergencyShutdown();\\n    }\\n\\n    /**\\n     * @dev Returns the number of want token for 1 share\\n     */\\n    function getPricePerShare(YearnV2Interface vault) public view returns (uint256) {\\n        return vault.pricePerShare();\\n    }\\n\\n    /**\\n     * @dev Get the total assets of this vault could accept\\n     */\\n    function getAvailableDepositLimit(YearnV2Interface vault) public view returns (uint256) {\\n        return vault.availableDepositLimit();\\n    }\\n\\n    /**\\n     * @dev Get the total quantity of all assets under control of this vault\\n     */\\n    function getTotalAssets(YearnV2Interface vault) public view returns (uint256) {\\n        return vault.totalAssets();\\n    }\\n\\n    /**\\n     * @dev Get the total number of assets in the vault (aka shares) for this user\\n     */\\n    function getBalance(address owner, YearnV2Interface vault) public view returns (uint256) {\\n        return vault.balanceOf(owner);\\n    }\\n\\n    /**\\n     * @dev\\n     */\\n    function getExpectedShareValue(address owner, YearnV2Interface vault) public view returns (uint256) {\\n        uint256 _pricePerShare = vault.pricePerShare();\\n        uint256 _balanceOfOwner = vault.balanceOf(owner);\\n        uint256 _decimals = vault.decimals();\\n        return (_pricePerShare * _balanceOfOwner) / (10**_decimals);\\n    }\\n\\n    /**\\n     * @dev Check if a given want is used in one of the Yearn vaults\\n     */\\n    function isWantSupported(address want) public view returns (bool) {\\n        YearnRegistryInterface registry = getRegistry();\\n        return registry.isRegistered(want);\\n    }\\n\\n    /**\\n     * @dev Retrieve the current vault for a given want\\n     */\\n    function latestForWant(address want) public view returns (address) {\\n        YearnRegistryInterface registry = getRegistry();\\n        return registry.latestVault(want);\\n    }\\n\\n    /**\\n     * @dev Returns the number of vaults for a given want\\n     */\\n    function numVaultsForWant(address want) public view returns (uint256 numVaults) {\\n        YearnRegistryInterface registry = getRegistry();\\n        if (!registry.isRegistered(want)) {\\n            return 0;\\n        }\\n        return registry.numVaults(want);\\n    }\\n\\n    /**\\n     * @dev List the vaults available for a given want.\\n     */\\n    function listVaultsForWant(address want) public view returns (address[] memory vaultAddresses) {\\n        YearnRegistryInterface registry = getRegistry();\\n        if (!registry.isRegistered(want)) {\\n            return vaultAddresses;\\n        }\\n\\n        uint256 numVaults = registry.numVaults(want);\\n        vaultAddresses = new address[](numVaults);\\n        for (uint256 index = 0; index < numVaults; index++) {\\n            vaultAddresses[index] = registry.vaults(want, index);\\n        }\\n    }\\n}\\n\\ncontract InstaYearnV2Resolver is Resolver {\\n    string public constant name = \\\"YearnV2-v1.0\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/mainnet/yearn_v2/interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface YearnV2Interface {\\n    function emergencyShutdown() external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function availableDepositLimit() external view returns (uint256);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\ninterface YearnRegistryInterface {\\n    function isRegistered(address) external view returns (bool);\\n\\n    function latestVault(address) external view returns (address);\\n\\n    function numVaults(address) external view returns (uint256);\\n\\n    function vaults(address, uint256) external view returns (address);\\n}\\n\\ninterface TokenInterface {\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/mainnet/yearn_v2/helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\nimport { DSMath } from \\\"../../../utils/dsmath.sol\\\";\\nimport \\\"./interfaces.sol\\\";\\n\\ncontract Helpers is DSMath {\\n    /**\\n     * @dev get Yearn Registry\\n     */\\n    function getRegistry() public pure returns (YearnRegistryInterface) {\\n        return YearnRegistryInterface(0x50c1a2eA0a861A967D9d0FFE2AE4012c2E053804);\\n    }\\n\\n    struct VaultData {\\n        address vaultLatestVersion;\\n        address vault;\\n        address want;\\n        uint256 pricePerShare;\\n        uint256 availableDepositLimit;\\n        uint256 totalAssets;\\n        uint256 balanceOf;\\n        uint256 wantBalanceOf;\\n        uint256 expectedShareValue;\\n        uint256 decimals;\\n        bool isDeprecated;\\n        bool emergencyShutdown;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/dsmath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ncontract DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"math-not-safe\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x - y <= x ? x - y : 0;\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"math-not-safe\\\");\\n    }\\n\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    uint256 internal constant WAD = 10**18;\\n    uint256 internal constant RAY = 10**27;\\n\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract YearnV2Interface\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getAvailableDepositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract YearnV2Interface\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract YearnV2Interface\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getExpectedShareValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"wantAddresses\",\"type\":\"address[]\"}],\"name\":\"getPositions\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vaultLatestVersion\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableDepositLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantBalanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedShareValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDeprecated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"emergencyShutdown\",\"type\":\"bool\"}],\"internalType\":\"struct Helpers.VaultData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"wantAddresses\",\"type\":\"address[]\"}],\"name\":\"getPositionsForLatest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vaultLatestVersion\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableDepositLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantBalanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedShareValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDeprecated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"emergencyShutdown\",\"type\":\"bool\"}],\"internalType\":\"struct Helpers.VaultData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract YearnV2Interface\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"internalType\":\"contract YearnRegistryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract YearnV2Interface\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract YearnV2Interface\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"isEmergencyShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"isWantSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"latestForWant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"listVaultsForWant\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"vaultAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"numVaultsForWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numVaults\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaYearnV2Resolver","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}