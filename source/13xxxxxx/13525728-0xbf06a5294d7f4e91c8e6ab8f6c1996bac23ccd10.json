{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.6;\n\n\n\n// Part: CryptoTraderInterface\n\ninterface CryptoTraderInterface {\n    /**\n     * Returns a uri for CryptTraderI (BTC) tokens\n     */\n    function btcTokenURI() external view returns (string memory);\n\n    /**\n     * Returns a uri for CryptTraderII (ETH) tokens\n     */\n    function ethTokenURI() external view returns (string memory);\n}\n\n// Part: smartcontractkit/chainlink-brownie-contracts@1.1.1/AggregatorV3Interface\n\ninterface AggregatorV3Interface {\n\n  function decimals() external view returns (uint8);\n  function description() external view returns (string memory);\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n\n// File: CryptoTraderTokenUriProvider.sol\n\n/**\n * Provides token metadata for CryptoTraderI and CryptoTraderII tokens\n */\ncontract CryptoTraderTokenUriProvider is CryptoTraderInterface {\n    address owner;\n    struct PriceRange {\n        uint256 low;\n        uint256 high;\n        string tokenUriUp;\n        string tokenUriDown;\n    }\n\n    PriceRange[] private btcPriceRanges;\n    PriceRange[] private ethPriceRanges;\n\n    AggregatorV3Interface private btcPriceFeed;\n    AggregatorV3Interface private ethPriceFeed;\n    uint80 private roundInterval = 50;\n\n    /**\n     * @dev Public constructor\n     * _btcPriceFeed - address for the BTC/USD feed mainnet: 0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c\n     * _ethPriceFeed - address for the ETH/USD feed mainnet: 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\n     */\n    constructor(address _btcPriceFeed, address _ethPriceFeed) public {\n        owner = msg.sender;\n\n        btcPriceFeed = AggregatorV3Interface(_btcPriceFeed);\n        ethPriceFeed = AggregatorV3Interface(_ethPriceFeed);\n\n        populateRanges();\n    }\n\n    function populateRanges() private {\n        btcPriceRanges.push(\n            PriceRange({\n                low: 0,\n                high: 30000,\n                tokenUriUp: \"QmPXt5xgCCYz8BeiYNB46AraVrgEPHMs1bnWhrUCuAa4yp\",\n                tokenUriDown: \"QmfTG6WooW25Ry88a6BkBHic6xeVnmuN8DPTuAU5AAeHJv\"\n            })\n        );\n        btcPriceRanges.push(\n            PriceRange({\n                low: 30001,\n                high: 40000,\n                tokenUriUp: \"QmUgqXRYm5fy1memqr2d3FfEkpaeoziSNLhLE9sYN6Gd8v\",\n                tokenUriDown: \"QmUGVMELqcUjJT2Zk5ED7DgYXfVgu831qMpiNcZL25VQ6r\"\n            })\n        );\n        btcPriceRanges.push(\n            PriceRange({\n                low: 40001,\n                high: 65000,\n                tokenUriUp: \"QmP391qVmmweuQouZzC3WQPEkDKmRmbmzq9vyGGNohjBLY\",\n                tokenUriDown: \"QmVUFkwMsrpsHYx6dEY2ZDWd3ochrgHJpks5iDLSajHpba\"\n            })\n        );\n        btcPriceRanges.push(\n            PriceRange({\n                low: 65001,\n                high: 85000,\n                tokenUriUp: \"QmVJv6iSrM4vjQhuNi4oWiYdFk2MztSspuwuQvP7zzSd41\",\n                tokenUriDown: \"QmbvHqmitVN5jpQDwXMc7M9bcABXVLgdSRp1tPVWQeBmyy\"\n            })\n        );\n        btcPriceRanges.push(\n            PriceRange({\n                low: 85001,\n                high: 100000,\n                tokenUriUp: \"QmfM2wdvEFNqbGpP4gNUqCfE15i8F4ZbCX2VAS3LHGLTbU\",\n                tokenUriDown: \"QmRGQSgJmvgGYpWWTcXytHksGdHfhAu3pcqkNknRj2KTbP\"\n            })\n        );\n        btcPriceRanges.push(\n            PriceRange({\n                low: 100001,\n                high: 1000000,\n                tokenUriUp: \"QmZZaoaaLnYPEnwAwymRCWEdevqKTDFq6UdG26FUDwhqds\",\n                tokenUriDown: \"QmcJQyteLVZwBAdhdZDSv1itMPT3GeicyRvBXDXNwwa8yJ\"\n            })\n        );\n\n        ethPriceRanges.push(\n            PriceRange({\n                low: 0,\n                high: 2000,\n                tokenUriUp: \"QmYEwKc5P4X5u1GTv8AgGERpLki3feATDPNhXACRR2fSTt\",\n                tokenUriDown: \"QmV2MKJDLU6DYsLAnFVUwB5EtyjpYsAcMfK3N4bQT98XoS\"\n            })\n        );\n        ethPriceRanges.push(\n            PriceRange({\n                low: 2001,\n                high: 3500,\n                tokenUriUp: \"QmbDcmPrDTM3yxk7eEEMj8cs4vEfYywUwKQUZNwhbEy2Nx\",\n                tokenUriDown: \"QmeAHsUnWWXRvPHbYKTmqU6aVyBqEGWQAZYyjL1Uvn4Xen\"\n            })\n        );\n        ethPriceRanges.push(\n            PriceRange({\n                low: 3501,\n                high: 5000,\n                tokenUriUp: \"QmW5XvfMo6AmRuFVBkiijZde3rUN76289nGzcMnfuDnbW9\",\n                tokenUriDown: \"QmPAWc7Gh56rxLgF9KnQbUXmpX7PutL1eB3yn1Vy3K2VJL\"\n            })\n        );\n        ethPriceRanges.push(\n            PriceRange({\n                low: 5001,\n                high: 6500,\n                tokenUriUp: \"QmbaR2251n4J19wVFKJSaZqtntC5oPq4YYKY1WCfot7yPa\",\n                tokenUriDown: \"QmewLCu62dim8PbgFeU1vQy6SyKkt1hUvurB3Fe7p3HQeH\"\n            })\n        );\n        ethPriceRanges.push(\n            PriceRange({\n                low: 6501,\n                high: 8000,\n                tokenUriUp: \"QmbYtK2WFeD6oWqQBRiayZpLjUFjjFGdP9s1aS2RQtHuzi\",\n                tokenUriDown: \"QmTWaiAfRkzWw4rterJaByNE2QcuLcbp7NaprnGSsLiRsk\"\n            })\n        );\n        ethPriceRanges.push(\n            PriceRange({\n                low: 8001,\n                high: 100000,\n                tokenUriUp: \"QmSwxyymXnh3jUjr4aWXZLHJKwtsuhUxe9mPsk35as23GB\",\n                tokenUriDown: \"Qmf7foHZuHZy8w3Adk1jsQdcS5QpJF1aFhYchdCrQwzEfU\"\n            })\n        );\n    }\n\n    /**\n     * get the price for 0: BTC, 1: ETH\n     */\n    function getPrice(uint8 priceType) private view returns (uint256, uint256) {\n        AggregatorV3Interface feed = priceType == 0\n            ? btcPriceFeed\n            : ethPriceFeed;\n        // current price data\n        (uint80 roundId, int256 answer, , , ) = feed.latestRoundData();\n        uint256 current = uint256(answer) / (10**uint256(feed.decimals()));\n\n        // previous price data\n        (, int256 prevAnswer, , , ) = feed.getRoundData(\n            roundId - roundInterval\n        );\n        uint256 prev = uint256(prevAnswer) / (10**uint256(feed.decimals()));\n\n        return (prev, current);\n    }\n\n    /**\n     * Return the token uri for the given type BTC=0, ETH=1\n     */\n    function tokenUri(\n        uint8 priceType,\n        uint256 prevPrice,\n        uint256 currentPrice\n    ) private view returns (string memory) {\n        PriceRange[] memory ranges = priceType == 0\n            ? btcPriceRanges\n            : ethPriceRanges;\n\n        for (uint256 i = 0; i < ranges.length; i++) {\n            if (\n                currentPrice >= ranges[i].low && currentPrice <= ranges[i].high\n            ) {\n                if (prevPrice < currentPrice) {\n                    return\n                        string(\n                            abi.encodePacked(\n                                \"https://ipfs.io/ipfs/\",\n                                ranges[i].tokenUriUp\n                            )\n                        );\n                } else {\n                    return\n                        string(\n                            abi.encodePacked(\n                                \"https://ipfs.io/ipfs/\",\n                                ranges[i].tokenUriDown\n                            )\n                        );\n                }\n            }\n        }\n\n        // by default return the middle case, but still check if we're up or down\n        if (prevPrice < currentPrice) {\n            return\n                priceType == 0\n                    ? \"https://ipfs.io/ipfs/QmP391qVmmweuQouZzC3WQPEkDKmRmbmzq9vyGGNohjBLY\"\n                    : \"https://ipfs.io/ipfs/QmW5XvfMo6AmRuFVBkiijZde3rUN76289nGzcMnfuDnbW9\";\n        }\n        return\n            priceType == 0\n                ? \"https://ipfs.io/ipfs/QmVUFkwMsrpsHYx6dEY2ZDWd3ochrgHJpks5iDLSajHpba\"\n                : \"https://ipfs.io/ipfs/QmPAWc7Gh56rxLgF9KnQbUXmpX7PutL1eB3yn1Vy3K2VJL\";\n    }\n\n    /**\n     * @dev Adds a BTC price range for the given _low/_high associated with the given\n     * _tokenURIs.\n     *\n     * Requirements:\n     * Caller must be contract owner\n     */\n    function addPriceRange(\n        uint8 rangeType,\n        uint256 _low,\n        uint256 _high,\n        string memory _tokenURIUp,\n        string memory _tokenURIDown\n    ) public {\n        require(msg.sender == owner, \"OCO\");\n\n        if (rangeType == 0) {\n            btcPriceRanges.push(\n                PriceRange({\n                    low: _low,\n                    high: _high,\n                    tokenUriUp: _tokenURIUp,\n                    tokenUriDown: _tokenURIDown\n                })\n            );\n        } else {\n            ethPriceRanges.push(\n                PriceRange({\n                    low: _low,\n                    high: _high,\n                    tokenUriUp: _tokenURIUp,\n                    tokenUriDown: _tokenURIDown\n                })\n            );\n        }\n    }\n\n    /**\n     * @dev updates an ETH price range at the given _index\n     *\n     * Requirements:\n     * Caller must be contract owner\n     */\n    function setPriceRange(\n        uint256 rangeType,\n        uint8 _index,\n        uint256 _low,\n        uint256 _high,\n        string memory _tokenURIUp,\n        string memory _tokenURIDown\n    ) public {\n        require(msg.sender == owner, \"OCO\");\n        if (rangeType == 0) {\n            btcPriceRanges[_index].low = _low;\n            btcPriceRanges[_index].high = _high;\n            btcPriceRanges[_index].tokenUriUp = _tokenURIUp;\n            btcPriceRanges[_index].tokenUriDown = _tokenURIDown;\n        } else {\n            ethPriceRanges[_index].low = _low;\n            ethPriceRanges[_index].high = _high;\n            ethPriceRanges[_index].tokenUriUp = _tokenURIUp;\n            ethPriceRanges[_index].tokenUriDown = _tokenURIDown;\n        }\n    }\n\n    /**\n     * @dev Set the round interval (how far back we should look for\n     * for prev price data.  Typically it seems ~50 rounds per day)\n     * Requirements:\n     * Only contract owner may call this method\n     */\n    function setRoundInterval(uint80 _roundInterval) public {\n        require(msg.sender == owner, \"OCO\");\n        roundInterval = _roundInterval;\n    }\n\n    /**\n     * @dev Returns the token metadata URI for CryptoTraderI\n     */\n    function btcTokenURI() public view override returns (string memory) {\n        (uint256 prevPrice, uint256 currentPrice) = getPrice(0);\n        return tokenUri(0, prevPrice, currentPrice);\n    }\n\n    /**\n     * @dev Returns the token metadata URI for CryptoTraderII\n     */\n    function ethTokenURI() public view override returns (string memory) {\n        (uint256 prevPrice, uint256 currentPrice) = getPrice(1);\n        return tokenUri(1, prevPrice, currentPrice);\n    }\n\n    /**\n     * Get the range at index\n     */\n    function getRange(uint8 index, uint8 forType)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            string memory,\n            string memory\n        )\n    {\n        require(forType == 0 || forType == 1, \"TYPEERROR\");\n        if (forType == 0) {\n            require(index < btcPriceRanges.length, \"IOB\");\n            return (\n                btcPriceRanges[index].low,\n                btcPriceRanges[index].high,\n                btcPriceRanges[index].tokenUriUp,\n                btcPriceRanges[index].tokenUriDown\n            );\n        } else {\n            require(index < ethPriceRanges.length, \"IOB\");\n            return (\n                ethPriceRanges[index].low,\n                ethPriceRanges[index].high,\n                ethPriceRanges[index].tokenUriUp,\n                ethPriceRanges[index].tokenUriDown\n            );\n        }\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_btcPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethPriceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rangeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_low\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_high\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURIUp\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenURIDown\",\"type\":\"string\"}],\"name\":\"addPriceRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"btcTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"forType\",\"type\":\"uint8\"}],\"name\":\"getRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rangeType\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_low\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_high\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURIUp\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenURIDown\",\"type\":\"string\"}],\"name\":\"setPriceRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundInterval\",\"type\":\"uint80\"}],\"name\":\"setRoundInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CryptoTraderTokenUriProvider","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f4030086522a5beea4988f8ca5b36dbc97bee88c0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}