{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Presale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ncontract Presale is Ownable {\\n\\n    IERC20 kataToken;\\n\\n    uint256 public fundingGoal = 25 ether;    //  ETH\\n\\n    uint256 public soldAmount;\\n    uint256 public ethRaised;\\n\\n    uint256 public startTime;\\n    uint256 public endTime;\\n    uint256 public whitelistTime;\\n\\n    uint256 public minETHAmount = 0.025 ether;\\n    uint256 public maxETHAmount = 0.06 ether;\\n\\n    uint256 public price = 5333333;       // 1 ETH = 5333333 $KATA\\n\\n    mapping(address => bool) public whitelist;\\n    mapping(address => uint256) public buyETH;\\n    mapping(address => uint256) public buyTokens;\\n    mapping(address => uint256) public claimedTokens;\\n\\n    uint256 public tgeAmount = 15;\\n    uint256 public tgeCliffTime = 1645617600;\\n    uint256 public tgeTime = 1640260800;\\n    uint256 public duration = 60 * 60 * 24 * 30 * 5;    // 5 months\\n\\n    constructor(uint256 _startTime, uint256 _endTime, uint256 _whitelistTime, uint256 _tgeTime, uint256 _tgeCliffTime) {\\n        startTime = _startTime;\\n        endTime = _endTime;\\n        whitelistTime = _whitelistTime;\\n        tgeTime = _tgeTime;\\n        tgeCliffTime = _tgeCliffTime;\\n    }\\n\\n    function buy() payable external {\\n        require(msg.value > 0, \\\"Zero ETH sent\\\");\\n        require(msg.value >= minETHAmount && msg.value <= maxETHAmount,\\n            \\\"Invalid ETH amount\\\");\\n\\n        require(block.timestamp >= startTime && block.timestamp <= endTime,\\n            \\\"Sales not live\\\");\\n\\n        require(ethRaised < fundingGoal, \\\"sales completed\\\");\\n        require(buyETH[msg.sender] + msg.value <= maxETHAmount,\\\"max eth amount exceeds\\\");\\n\\n        if (block.timestamp < whitelistTime) {\\n            require(whitelist[msg.sender], \\\"you are not whitelisted\\\");\\n        }\\n\\n        ethRaised = ethRaised + msg.value;\\n        uint256 amount = price * msg.value;\\n\\n        soldAmount = soldAmount + amount;\\n        buyTokens[msg.sender] = buyTokens[msg.sender] + amount;\\n        buyETH[msg.sender] = buyETH[msg.sender] + msg.value;\\n    }\\n\\n    function getClaimable() public view returns(uint256) {\\n        if (block.timestamp < tgeTime) return 0;\\n        if (block.timestamp < tgeCliffTime) {\\n          return (buyTokens[msg.sender] * tgeAmount) / 100;\\n        }\\n        if (buyTokens[msg.sender] <= 0) return 0;\\n        if (buyTokens[msg.sender] <= claimedTokens[msg.sender]) return 0;\\n\\n        uint256 timeElapsed = block.timestamp - tgeCliffTime;\\n\\n        if (timeElapsed > duration)\\n            timeElapsed = duration;\\n\\n        uint256 _tge = 100 - tgeAmount;\\n        uint256 unlockedPercent = (10**6 * _tge * timeElapsed) / duration;\\n        unlockedPercent = unlockedPercent + tgeAmount * 10**6;\\n\\n        uint256 unlockedAmount = (buyTokens[msg.sender] * unlockedPercent) / (100 * 10**6);\\n\\n        if (unlockedAmount < claimedTokens[msg.sender]) {\\n          return 0;\\n        }\\n\\n        uint256 claimable = unlockedAmount - claimedTokens[msg.sender];\\n\\n        return claimable;\\n    }\\n\\n    function claim() external {\\n        require(block.timestamp > endTime, \\\"Sales not ended yet\\\");\\n        require(buyTokens[msg.sender] > 0, \\\"No token purcahsed\\\");\\n        require(buyTokens[msg.sender] > claimedTokens[msg.sender], \\\"You already claimed all\\\");\\n        require(address(kataToken) != address(0), \\\"Not initialised\\\");\\n\\n        uint256 claimable = getClaimable();\\n\\n        require (claimable > 0, \\\"No token to claim\\\");\\n\\n        kataToken.transfer(msg.sender, claimable);\\n\\n        claimedTokens[msg.sender] = claimedTokens[msg.sender] + claimable;\\n    }\\n\\n    function withdrawETH() external onlyOwner {\\n        uint256 ethAmount = address(this).balance;\\n        payable(msg.sender).transfer(ethAmount);\\n    }\\n\\n    function setSalesTime(uint256 _startTime, uint256 _endTime, uint256 _whitelistTime) external onlyOwner {\\n        require(_whitelistTime < _endTime, \\\"Invalid time\\\");\\n        require(_startTime < _whitelistTime, \\\"Invalid time\\\");\\n\\n        startTime = _startTime;\\n        endTime = _endTime;\\n        whitelistTime = _whitelistTime;\\n    }\\n\\n    function setETHrange(uint256 _minETHAmount, uint256 _maxETHAmount) external onlyOwner {\\n        require(minETHAmount < maxETHAmount, \\\"Invalid range\\\");\\n        minETHAmount = _minETHAmount;\\n        maxETHAmount = _maxETHAmount;\\n    }\\n\\n    function setPrice(uint256 _price) external onlyOwner {\\n        price = _price;\\n    }\\n\\n    function setVesting(uint256 _tgeAmount, uint256 _tgeTime, uint256 _tgeCliffTime, uint256 _duration) external onlyOwner {\\n        tgeAmount = _tgeAmount;\\n        tgeTime = _tgeTime;\\n        tgeCliffTime = _tgeCliffTime;\\n        duration = _duration;\\n    }\\n\\n    function setKataToken(address _kata) external onlyOwner {\\n        kataToken = IERC20(_kata);\\n    }\\n\\n    function setFundingGoal(uint256 _fundingGoal) external onlyOwner {\\n        fundingGoal = _fundingGoal;\\n    }\\n\\n    function registerWhitelist(address[] memory addrs) external onlyOwner {\\n        for(uint256 i = 0; i < addrs.length; i++)\\n            whitelist[addrs[i]] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_whitelistTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tgeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tgeCliffTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxETHAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minETHAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"registerWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minETHAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxETHAmount\",\"type\":\"uint256\"}],\"name\":\"setETHrange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundingGoal\",\"type\":\"uint256\"}],\"name\":\"setFundingGoal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kata\",\"type\":\"address\"}],\"name\":\"setKataToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_whitelistTime\",\"type\":\"uint256\"}],\"name\":\"setSalesTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tgeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tgeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tgeCliffTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgeCliffTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Presale","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000017dcd69c2000000000000000000000000000000000000000000000000000000017dd7b67a000000000000000000000000000000000000000000000000000000017dd2901e000000000000000000000000000000000000000000000000000000017de7298e000000000000000000000000000000000000000000000000000000017f2673d600","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}