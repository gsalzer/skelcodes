{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MRVL.sol\": {\r\n      \"content\": \"pragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\n\\ncontract MRVL is Context, IERC20, Ownable {\\n\\n    mapping(address => uint) private _reflectionOwned;\\n    mapping(address => mapping(address => uint)) private _allowances;\\n\\n    mapping(address => Excluded) private _isExcluded;\\n\\n    uint constant public divider = 1e5; // 100.000\\n\\n    string constant private _name = 'Marvel Geek';\\n    string constant private _symbol = 'MarGeek';\\n    uint8 constant private _decimals = 18;\\n\\n    uint private constant MAX = type(uint160).max;\\n    uint128 private _actualTotal = uint128(100000 * (10 ** _decimals));\\n    uint128 private _actualExcludedTotal;\\n    uint private _reflectionTotal = (MAX - (MAX % _actualTotal));\\n\\n    struct Excluded {\\n        uint128 actualOwned;\\n        bool fromFee;\\n        bool fromReward;\\n    }\\n\\n    struct Fees {\\n        uint32 socialFee;\\n        uint32 previousSocialFee;\\n        uint32 lotteryFee;\\n        uint32 previousLotteryFee;\\n        uint32 burnFee;\\n    }\\n\\n    Fees public fees;\\n\\n    event SentToWinner(address _winner, uint amount);\\n    event SocialFeeSet(uint fee);\\n    event LotteryFeeSet(uint fee);\\n    event BurnFeeSet(uint fee);\\n    event ExcludedFromFee(address account);\\n    event IncludedInFee(address account);\\n\\n    constructor(uint _lotteryFee, address _router) {\\n        // 5%\\n        setSocialFeePercent(5000);\\n        // 0,001%\\n        setBurnFeePercent(1);\\n        setLotteryFeePercent(_lotteryFee);\\n\\n        _reflectionOwned[_msgSender()] = _reflectionTotal;\\n\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_router);\\n\\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n\\n        _isExcluded[owner()].fromFee = true;\\n        _isExcluded[address(this)].fromFee = true;\\n        _isExcluded[_router].fromFee = true;\\n        excludeFromReward(address(this));\\n        excludeFromReward(_router);\\n        excludeFromReward(_uniswapV2Pair);\\n\\n        emit Transfer(address(0), _msgSender(), _actualTotal);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint) {\\n        return _actualTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint) {\\n        if (_isExcluded[account].fromReward) return _isExcluded[account].actualOwned;\\n        return tokenFromReflection(_reflectionOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        override\\n        returns (uint)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        require(_allowances[sender][_msgSender()] >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()] - amount\\n        );\\n        return true;\\n    }\\n\\n    function deliver(uint actualAmount) external {\\n        address sender = _msgSender();\\n        require(\\n            !_isExcluded[sender].fromReward,\\n            \\\"Excluded addresses cannot call this function\\\"\\n        );\\n        (uint reflectionAmount, , , , ,) = _getValues(actualAmount);\\n        _reflectionOwned[sender] = _reflectionOwned[sender] - reflectionAmount;\\n        _reflectionTotal = _reflectionTotal - reflectionAmount;\\n    }\\n\\n    function reflectionFromToken(uint actualAmount, bool deductTransferFee)\\n        external\\n        view\\n        returns (uint)\\n    {\\n        require(actualAmount <= _actualTotal, \\\"Amount must be less than supply\\\");\\n        if (!deductTransferFee) {\\n            (uint reflectionAmount, , , , ,) = _getValues(actualAmount);\\n            return reflectionAmount;\\n        } else {\\n            (, uint reflectionTransferAmount, , , ,) = _getValues(actualAmount);\\n            return reflectionTransferAmount;\\n        }\\n    }\\n\\n    function tokenFromReflection(uint reflectionAmount)\\n        public\\n        view\\n        returns (uint)\\n    {\\n        require(\\n            reflectionAmount <= _reflectionTotal,\\n            \\\"Amount must be less than total reflections\\\"\\n        );\\n        uint currentRate = _getRate();\\n        return reflectionAmount / currentRate;\\n    }\\n\\n    function isExcludedFromReward(address account) external view returns (bool) {\\n        return _isExcluded[account].fromReward;\\n    }\\n\\n    function excludeFromReward(address account) public onlyOwner {\\n        require(!_isExcluded[account].fromReward, \\\"Account is already excluded\\\");\\n        if (_reflectionOwned[account] > 0) {\\n            _isExcluded[account].actualOwned = uint128(tokenFromReflection(_reflectionOwned[account]));\\n            _actualExcludedTotal = _actualExcludedTotal + _isExcluded[account].actualOwned;\\n            _reflectionTotal = _reflectionTotal - _reflectionOwned[account];\\n            _reflectionOwned[account] = 0;\\n        }\\n        _isExcluded[account].fromReward = true;\\n    }\\n\\n    function includeInReward(address account) external onlyOwner {\\n        require(_isExcluded[account].fromReward, \\\"Account is already excluded\\\");\\n        _isExcluded[account].fromReward = false;\\n        _reflectionOwned[account] = _isExcluded[account].actualOwned * _getRate();\\n        _isExcluded[account].actualOwned = 0;\\n        _actualExcludedTotal = _actualExcludedTotal - _isExcluded[account].actualOwned;\\n        _reflectionTotal = _reflectionTotal + _reflectionOwned[account];\\n    }\\n\\n    function isExcludedFromFee(address account) public view returns (bool) {\\n        return _isExcluded[account].fromFee;\\n    }\\n\\n    function excludeFromFee(address account) external onlyOwner {\\n        _isExcluded[account].fromFee = true;\\n        emit ExcludedFromFee(account);\\n    }\\n\\n    function includeInFee(address account) external onlyOwner {\\n        _isExcluded[account].fromFee = false;\\n        emit IncludedInFee(account);\\n    }\\n\\n    function setSocialFeePercent(uint _socialFee) public onlyOwner {\\n        require(_socialFee <= divider, 'Fee can not be more than 100%');\\n        fees.socialFee = uint32(_socialFee);\\n        emit SocialFeeSet(fees.socialFee);\\n    }\\n\\n    function setBurnFeePercent(uint _burnFee) public onlyOwner {\\n        require(_burnFee <= divider, 'Fee can not be more than 100%');\\n        fees.burnFee = uint32(_burnFee);\\n        emit BurnFeeSet(fees.burnFee);\\n    }\\n\\n\\n    function setLotteryFeePercent(uint _lotteryFee) public onlyOwner {\\n        require(_lotteryFee <= divider, 'Fee can not be more than 100%');\\n        fees.lotteryFee = uint32(_lotteryFee);\\n        emit LotteryFeeSet(fees.lotteryFee);\\n    }\\n\\n    function _takeSocialFee(uint reflectionSocialFee) private {\\n        _reflectionTotal = _reflectionTotal - reflectionSocialFee;\\n    }\\n\\n    function _takeLotteryFee(uint actualLottery, uint reflectionLottery) private {\\n        if (_isExcluded[address(this)].fromReward) {\\n            _isExcluded[address(this)].actualOwned = _isExcluded[address(this)].actualOwned + uint128(actualLottery);\\n            _actualExcludedTotal = _actualExcludedTotal + uint128(actualLottery);\\n            _reflectionTotal = _reflectionTotal - reflectionLottery;\\n        } else {\\n            _reflectionOwned[address(this)] = _reflectionOwned[address(this)] + reflectionLottery;\\n        }\\n    }\\n\\n    function _calculateSocialFee(uint _amount) private view returns (uint) {\\n        return _amount * fees.socialFee / divider;\\n    }\\n\\n    function _calculateLotteryFee(uint _amount) private view returns (uint) {\\n        return _amount * fees.lotteryFee / divider;\\n    }\\n\\n\\n\\n    function _getValues(uint actualAmount)\\n        private\\n        view\\n        returns (\\n            uint,\\n            uint,\\n            uint,\\n            uint,\\n            uint,\\n            uint\\n        )\\n    {\\n        (uint actualTransferAmount, uint actualSocialFee, uint actualLottery) =\\n            _getActualValues(actualAmount);\\n        (uint reflectionAmount, uint reflectionTransferAmount, uint reflectionSocialFee, uint reflectionLottery) =\\n            _getReflectedValues(actualAmount, actualSocialFee, actualLottery, _getRate());\\n        return (\\n            reflectionAmount,\\n            reflectionTransferAmount,\\n            reflectionSocialFee,\\n            actualTransferAmount,\\n            actualLottery,\\n            reflectionLottery\\n        );\\n    }\\n\\n    function _getActualValues(uint actualAmount)\\n        private\\n        view\\n        returns (\\n            uint,\\n            uint,\\n            uint\\n        )\\n    {\\n        uint actualSocialFee = _calculateSocialFee(actualAmount);\\n        uint actualLottery = _calculateLotteryFee(actualAmount);\\n        uint actualTransferAmount = actualAmount - actualSocialFee - actualLottery;\\n        return (actualTransferAmount, actualSocialFee, actualLottery);\\n    }\\n\\n    function _getReflectedValues(\\n        uint actualAmount,\\n        uint actualSocialFee,\\n        uint actualLottery,\\n        uint currentRate\\n    )\\n        private\\n        pure\\n        returns (\\n            uint,\\n            uint,\\n            uint,\\n            uint\\n        )\\n    {\\n        uint reflectionAmount = actualAmount * currentRate;\\n        uint reflectionSocialFee = actualSocialFee * currentRate;\\n        uint reflectionLottery = actualLottery * currentRate;\\n        uint reflectionTransferAmount = reflectionAmount - reflectionSocialFee - reflectionLottery;\\n        return (reflectionAmount, reflectionTransferAmount, reflectionSocialFee, reflectionLottery);\\n    }\\n\\n    function _getRate() private view returns (uint) {\\n        (uint reflectionSupply, uint actualSupply) = _getCurrentSupply();\\n        return reflectionSupply / actualSupply;\\n    }\\n\\n    function _getCurrentSupply() private view returns (uint, uint) {\\n        if (_actualExcludedTotal >= _actualTotal) return (_reflectionTotal, _actualTotal);\\n        return (_reflectionTotal, _actualTotal - _actualExcludedTotal);\\n    }\\n\\n\\n    function sendToWinner(address _winner) external onlyOwner {\\n        uint amount = balanceOf(address(this));\\n\\n        _transfer(address(this), _winner, amount);\\n        emit SentToWinner(_winner, amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint amount\\n    ) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint amount\\n    ) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        bool takeFee = true;\\n\\n        if (_isExcluded[from].fromFee || _isExcluded[to].fromFee) {\\n            takeFee = false;\\n        }\\n\\n        _tokenTransfer(from, to, amount, takeFee);\\n    }\\n\\n    function _tokenTransfer(\\n        address sender,\\n        address recipient,\\n        uint amount,\\n        bool takeFee\\n    ) private {\\n        if (!takeFee) _removeAllFee();\\n\\n        bool isSenderExcluded = _isExcluded[sender].fromReward;\\n        bool isRecipientExcluded = _isExcluded[recipient].fromReward;\\n\\n        if (!isSenderExcluded && !isRecipientExcluded) {\\n            _transferStandard(sender, recipient, amount);\\n        } else if (!isSenderExcluded && isRecipientExcluded) {\\n            _transferToExcluded(sender, recipient, amount);\\n        } else if (isSenderExcluded && !isRecipientExcluded) {\\n            _transferFromExcluded(sender, recipient, amount);\\n        } else {\\n            _transferBothExcluded(sender, recipient, amount);\\n        }\\n\\n        if (!takeFee) _restoreAllFee();\\n        _burn();\\n    }\\n\\n    function _burn() private {\\n        (, uint includedOwned) = _getCurrentSupply();\\n        uint excludedOwned = _actualTotal - includedOwned;\\n        _actualTotal = uint128(excludedOwned + includedOwned * (divider - fees.burnFee) / divider);\\n    }\\n\\n\\n    function _removeAllFee() private {\\n        if (fees.socialFee == 0 && fees.lotteryFee == 0) return;\\n\\n        fees.previousSocialFee = fees.socialFee;\\n        fees.previousLotteryFee = fees.lotteryFee;\\n\\n        fees.socialFee = 0;\\n        fees.lotteryFee = 0;\\n    }\\n\\n    function _restoreAllFee() private {\\n        fees.socialFee = fees.previousSocialFee;\\n        fees.lotteryFee = fees.previousLotteryFee;\\n    }\\n\\n    function _transferStandard(\\n        address sender,\\n        address recipient,\\n        uint actualAmount\\n    ) private {\\n        (\\n            uint reflectionAmount,\\n            uint reflectionTransferAmount,\\n            uint reflectionSocialFee,\\n            uint actualTransferAmount,\\n            uint actualLottery,\\n            uint reflectionLottery\\n        ) = _getValues(actualAmount);\\n        _reflectionOwned[sender] = _reflectionOwned[sender] - reflectionAmount;\\n        _reflectionOwned[recipient] = _reflectionOwned[recipient] + reflectionTransferAmount;\\n        _takeLotteryFee(actualLottery, reflectionLottery);\\n        _takeSocialFee(reflectionSocialFee);\\n        emit Transfer(sender, recipient, actualTransferAmount);\\n    }\\n\\n    function _transferToExcluded(\\n        address sender,\\n        address recipient,\\n        uint actualAmount\\n    ) private {\\n        (\\n            uint reflectionAmount,\\n            uint reflectionTransferAmount,\\n            uint reflectionSocialFee,\\n            uint actualTransferAmount,\\n            uint actualLottery,\\n            uint reflectionLottery\\n        ) = _getValues(actualAmount);\\n        _reflectionOwned[sender] = _reflectionOwned[sender] - reflectionAmount;\\n        _reflectionTotal = _reflectionTotal - reflectionTransferAmount;\\n        _isExcluded[recipient].actualOwned = _isExcluded[recipient].actualOwned + uint128(actualTransferAmount);\\n        _actualExcludedTotal = _actualExcludedTotal + uint128(actualTransferAmount);\\n        _takeLotteryFee(actualLottery, reflectionLottery);\\n        _takeSocialFee(reflectionSocialFee);\\n        emit Transfer(sender, recipient, actualTransferAmount);\\n    }\\n\\n    function _transferFromExcluded(\\n        address sender,\\n        address recipient,\\n        uint actualAmount\\n    ) private {\\n        (\\n            uint reflectionAmount,\\n            uint reflectionTransferAmount,\\n            uint reflectionSocialFee,\\n            uint actualTransferAmount,\\n            uint actualLottery,\\n            uint reflectionLottery\\n        ) = _getValues(actualAmount);\\n        _isExcluded[sender].actualOwned = _isExcluded[sender].actualOwned - uint128(actualAmount);\\n        _actualExcludedTotal = _actualExcludedTotal - uint128(actualAmount);\\n        _reflectionOwned[recipient] = _reflectionOwned[recipient] + reflectionTransferAmount;\\n        _reflectionTotal = _reflectionTotal + reflectionAmount;\\n        _takeLotteryFee(actualLottery, reflectionLottery);\\n        _takeSocialFee(reflectionSocialFee);\\n        emit Transfer(sender, recipient, actualTransferAmount);\\n    }\\n\\n    function _transferBothExcluded(\\n        address sender,\\n        address recipient,\\n        uint actualAmount\\n    ) private {\\n        (\\n            uint reflectionAmount,\\n            uint reflectionTransferAmount,\\n            uint reflectionSocialFee,\\n            uint actualTransferAmount,\\n            uint actualLottery,\\n            uint reflectionLottery\\n        ) = _getValues(actualAmount);\\n        _isExcluded[sender].actualOwned = _isExcluded[sender].actualOwned - uint128(actualAmount);\\n        _reflectionTotal = _reflectionTotal - reflectionTransferAmount;\\n        _isExcluded[recipient].actualOwned = _isExcluded[recipient].actualOwned + uint128(actualTransferAmount);\\n        _actualExcludedTotal = _actualExcludedTotal + uint128(actualTransferAmount) - uint128(actualAmount);\\n        _reflectionTotal = _reflectionTotal + reflectionAmount;\\n        _takeLotteryFee(actualLottery, reflectionLottery);\\n        _takeSocialFee(reflectionSocialFee);\\n        emit Transfer(sender, recipient, actualTransferAmount);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"BurnFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludedInFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LotteryFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SentToWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SocialFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"socialFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"previousSocialFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lotteryFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"previousLotteryFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"burnFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"}],\"name\":\"sendToWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryFee\",\"type\":\"uint256\"}],\"name\":\"setLotteryFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_socialFee\",\"type\":\"uint256\"}],\"name\":\"setSocialFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectionAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MRVL","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000640000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}