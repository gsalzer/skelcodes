{"status":"1","message":"OK","result":[{"SourceCode":"// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/Delegator.sol\n// SPDX-License-Identifier: MIT\npragma solidity =0.8.6 >=0.8.0 <0.9.0;\n\n////// lib/openzeppelin-contracts/contracts/utils/Context.sol\n\n/* pragma solidity ^0.8.0; */\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n////// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n\n/* pragma solidity ^0.8.0; */\n\n/* import \"../utils/Context.sol\"; */\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n////// src/interfaces/IGovernanceToken.sol\n/* pragma solidity 0.8.6; */\n\ninterface IGovernanceToken {\n   function delegate(address delegatee) external;\n\n   function delegates(address delegator) external returns (address);\n\n   function transfer(address dst, uint256 rawAmount) external returns (bool);\n\n   function transferFrom(\n      address src,\n      address dst,\n      uint256 rawAmount\n   ) external returns (bool);\n\n   function balanceOf(address src) external returns (uint256);\n\n   function decimals() external returns (uint8);\n}\n\n////// src/Delegator.sol\n/* pragma solidity 0.8.6; */\n\n/* import \"./interfaces/IGovernanceToken.sol\"; */\n/* import \"../lib/openzeppelin-contracts/contracts/access/Ownable.sol\"; */\n\n/**\n * @title Delegator Contract\n * @author Cryptex.Finance\n * @notice Contract in charge of handling delegations.\n */\n\ncontract Delegator is Ownable {\n   /* ========== STATE VARIABLES ========== */\n\n   /// @notice Address of the staking governance token\n   address public immutable token;\n\n   /// @notice Tracks the amount of staked tokens per user\n   mapping(address => uint256) public stakerBalance;\n\n   /* ========== CONSTRUCTOR ========== */\n\n   /**\n    * @notice Constructor\n    * @param delegatee_ address\n    * @param token_ address\n    * @dev when created delegates all it's power to delegatee_ and can't be changed later\n    * @dev sets delegator factory as owner\n    */\n   constructor(address delegatee_, address token_) {\n      require(\n         delegatee_ != address(0) && token_ != address(0),\n         \"Address can't be 0\"\n      );\n      require(IGovernanceToken(token_).decimals() == 18, \"Decimals must be 18\");\n      token = token_;\n      IGovernanceToken(token_).delegate(delegatee_);\n   }\n\n   /* ========== MUTATIVE FUNCTIONS ========== */\n\n   /**\n    * @notice Increases the balance of the staker\n    * @param staker_ caller of the stake function\n    * @param amount_ uint to be staked and delegated\n    * @dev Only delegatorFactory can call it\n    * @dev after the balance is updated the amount is transferred from the user to this contract\n    */\n   function stake(address staker_, uint256 amount_) external onlyOwner {\n      stakerBalance[staker_] += amount_;\n   }\n\n   /**\n    * @notice Decreases the balance of the staker\n    * @param staker_ caller of the stake function\n    * @param amount_ uint to be withdrawn and undelegated\n    * @dev Only delegatorFactory can call it\n    * @dev after the balance is updated the amount is transferred back to the user from this contract\n    */\n   function removeStake(address staker_, uint256 amount_) external onlyOwner {\n      stakerBalance[staker_] -= amount_;\n      require(\n         IGovernanceToken(token).transfer(staker_, amount_),\n         \"Transfer failed\"\n      );\n   }\n\n   /* ========== VIEWS ========== */\n\n   /// @notice returns the delegatee of this contract\n   function delegatee() external returns (address) {\n      return IGovernanceToken(token).delegates(address(this));\n   }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"delegatee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"removeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Delegator","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"000000000000000000000000f71e9c766cdf169edfbe2749490943c1dc6b8a55000000000000000000000000321c2fe4446c7c963dc41dd58879af648838f98d","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}