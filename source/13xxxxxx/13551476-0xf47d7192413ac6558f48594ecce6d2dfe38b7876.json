{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/external/adapters/NotionalV1ToNotionalV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../../global/Types.sol\\\";\\nimport \\\"interfaces/notional/NotionalProxy.sol\\\";\\nimport \\\"interfaces/notional/NotionalCallback.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface WETH9 {\\n    function withdraw(uint256 wad) external;\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n}\\n\\ninterface IEscrow {\\n    function getBalances(address account) external view returns (int256[] memory);\\n}\\n\\ninterface INotionalV1Erc1155 {\\n    /** Notional V1 Types */\\n    struct Deposit {\\n        // Currency Id to deposit\\n        uint16 currencyId;\\n        // Amount of tokens to deposit\\n        uint128 amount;\\n    }\\n\\n    /**\\n     * Used to describe withdraws in ERC1155.batchOperationWithdraw\\n     */\\n    struct Withdraw {\\n        // Destination of the address to withdraw to\\n        address to;\\n        // Currency Id to withdraw\\n        uint16 currencyId;\\n        // Amount of tokens to withdraw\\n        uint128 amount;\\n    }\\n\\n    enum TradeType {TakeCurrentCash, TakefCash, AddLiquidity, RemoveLiquidity}\\n\\n    /**\\n     * Used to describe a trade in ERC1155.batchOperation\\n     */\\n    struct Trade {\\n        TradeType tradeType;\\n        uint8 cashGroup;\\n        uint32 maturity;\\n        uint128 amount;\\n        bytes slippageData;\\n    }\\n\\n    function batchOperationWithdraw(\\n        address account,\\n        uint32 maxTime,\\n        Deposit[] memory deposits,\\n        Trade[] memory trades,\\n        Withdraw[] memory withdraws\\n    ) external payable;\\n}\\n\\ncontract NotionalV1ToNotionalV2 is NotionalCallback {\\n    string public name = \\\"Notional V1 to Notional V2\\\";\\n    IEscrow public immutable Escrow;\\n    NotionalProxy public immutable NotionalV2;\\n    INotionalV1Erc1155 public immutable NotionalV1Erc1155;\\n    WETH9 public immutable WETH;\\n    IERC20 public immutable WBTC;\\n\\n    uint16 internal constant V1_ETH = 0;\\n    uint16 internal constant V1_DAI = 1;\\n    uint16 internal constant V1_USDC = 2;\\n    uint16 internal constant V1_WBTC = 3;\\n\\n    uint16 public constant V2_ETH = 1;\\n    uint16 public constant V2_DAI = 2;\\n    uint16 public constant V2_USDC = 3;\\n    uint16 public constant V2_WBTC = 4;\\n\\n    constructor(\\n        IEscrow escrow_,\\n        NotionalProxy notionalV2_,\\n        INotionalV1Erc1155 erc1155_,\\n        WETH9 weth_,\\n        IERC20 wbtc_\\n    ) {\\n        Escrow = escrow_;\\n        NotionalV2 = notionalV2_;\\n        NotionalV1Erc1155 = erc1155_;\\n        WETH = weth_;\\n        WBTC = wbtc_;\\n        wbtc_.approve(address(notionalV2_), type(uint256).max);\\n    }\\n\\n    function migrateDaiEther(\\n        uint128 v1RepayAmount,\\n        BalanceActionWithTrades[] calldata borrowAction\\n    ) external {\\n        // borrow on notional via special flash loan facility\\n        //  - borrow repayment amount\\n        //  - withdraw to wallet\\n        // receive callback (tokens transferred to borrowing account)\\n        //   -> inside callback\\n        //   -> repay Notional V1\\n        //   -> deposit collateral to notional v2 (account needs to have set approvals)\\n        //   -> exit callback\\n        // inside original borrow, check FC\\n        bytes memory encodedData = abi.encode(V1_DAI, v1RepayAmount, V1_ETH, V2_ETH);\\n        NotionalV2.batchBalanceAndTradeActionWithCallback(msg.sender, borrowAction, encodedData);\\n    }\\n\\n    function migrateUSDCEther(\\n        uint128 v1RepayAmount,\\n        BalanceActionWithTrades[] calldata borrowAction\\n    ) external {\\n        bytes memory encodedData = abi.encode(V1_USDC, v1RepayAmount, V1_ETH, V2_ETH);\\n        NotionalV2.batchBalanceAndTradeActionWithCallback(msg.sender, borrowAction, encodedData);\\n    }\\n\\n    function migrateDaiWBTC(\\n        uint128 v1RepayAmount,\\n        BalanceActionWithTrades[] calldata borrowAction\\n    ) external {\\n        bytes memory encodedData = abi.encode(V1_DAI, v1RepayAmount, V1_WBTC, V2_WBTC);\\n        NotionalV2.batchBalanceAndTradeActionWithCallback(msg.sender, borrowAction, encodedData);\\n    }\\n\\n    function migrateUSDCWBTC(\\n        uint128 v1RepayAmount,\\n        BalanceActionWithTrades[] calldata borrowAction\\n    ) external {\\n        bytes memory encodedData = abi.encode(V1_USDC, v1RepayAmount, V1_WBTC, V2_WBTC);\\n        NotionalV2.batchBalanceAndTradeActionWithCallback(msg.sender, borrowAction, encodedData);\\n    }\\n\\n    function notionalCallback(\\n        address sender,\\n        address account,\\n        bytes calldata callbackData\\n    ) external override {\\n        require(msg.sender == address(NotionalV2) && sender == address(this), \\\"Unauthorized callback\\\");\\n        (\\n            uint16 v1DebtCurrencyId,\\n            uint128 v1RepayAmount,\\n            uint16 v1CollateralId,\\n            uint16 v2CollateralId\\n        ) = abi.decode(callbackData, (uint16, uint128, uint16, uint16));\\n\\n        int256[] memory balances = Escrow.getBalances(account);\\n        // Notional V1 returns an array of balances for all listed currencies. We do not allow\\n        // collateral to be USDC or DAI during migration.\\n        int256 collateralBalance =\\n            (v1CollateralId == V1_ETH ? balances[V1_ETH] : balances[V1_WBTC]);\\n        require(0 < collateralBalance && collateralBalance <= type(uint128).max);\\n\\n        {\\n            INotionalV1Erc1155.Deposit[] memory deposits = new INotionalV1Erc1155.Deposit[](1);\\n            INotionalV1Erc1155.Trade[] memory trades = new INotionalV1Erc1155.Trade[](0);\\n            INotionalV1Erc1155.Withdraw[] memory withdraws = new INotionalV1Erc1155.Withdraw[](1);\\n\\n            // This will deposit what was borrowed from the account's wallet\\n            deposits[0] = INotionalV1Erc1155.Deposit(v1DebtCurrencyId, v1RepayAmount);\\n\\n            // This will withdraw to the current contract the collateral to repay the flash loan,\\n            // overflow checked above\\n            withdraws[0] = INotionalV1Erc1155.Withdraw(\\n                address(this), // Will withdraw collateral to this contract, to be deposited below\\n                v1CollateralId,\\n                uint128(collateralBalance)\\n            );\\n\\n            NotionalV1Erc1155.batchOperationWithdraw(\\n                account,\\n                uint32(block.timestamp),\\n                deposits,\\n                trades,\\n                withdraws\\n            );\\n        }\\n\\n        // Overflow checked above, cannot be negative\\n        uint256 v2CollateralBalance = uint256(collateralBalance);\\n        if (v2CollateralId == V2_ETH) {\\n            // Notional V1 uses WETH, but V2 uses ETH\\n            WETH.withdraw(v2CollateralBalance);\\n            NotionalV2.depositUnderlyingToken{value: v2CollateralBalance}(\\n                account,\\n                v2CollateralId,\\n                v2CollateralBalance\\n            );\\n        } else {\\n            NotionalV2.depositUnderlyingToken(account, v2CollateralId, v2CollateralBalance);\\n        }\\n\\n        // When this exits it will do a free collateral check\\n    }\\n\\n    receive() external payable {\\n        // Allows contract to receive ETH during WETH withdraw\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/global/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"interfaces/chainlink/AggregatorV2V3Interface.sol\\\";\\nimport \\\"interfaces/notional/AssetRateAdapter.sol\\\";\\n\\n/// @notice Different types of internal tokens\\n///  - UnderlyingToken: underlying asset for a cToken (except for Ether)\\n///  - cToken: Compound interest bearing token\\n///  - cETH: Special handling for cETH tokens\\n///  - Ether: the one and only\\n///  - NonMintable: tokens that do not have an underlying (therefore not cTokens)\\nenum TokenType {UnderlyingToken, cToken, cETH, Ether, NonMintable}\\n\\n/// @notice Specifies the different trade action types in the system. Each trade action type is\\n/// encoded in a tightly packed bytes32 object. Trade action type is the first big endian byte of the\\n/// 32 byte trade action object. The schemas for each trade action type are defined below.\\nenum TradeActionType {\\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 fCashAmount, uint32 minImpliedRate, uint120 unused)\\n    Lend,\\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 fCashAmount, uint32 maxImpliedRate, uint128 unused)\\n    Borrow,\\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 assetCashAmount, uint32 minImpliedRate, uint32 maxImpliedRate, uint88 unused)\\n    AddLiquidity,\\n    // (uint8 TradeActionType, uint8 MarketIndex, uint88 tokenAmount, uint32 minImpliedRate, uint32 maxImpliedRate, uint88 unused)\\n    RemoveLiquidity,\\n    // (uint8 TradeActionType, uint32 Maturity, int88 fCashResidualAmount, uint128 unused)\\n    PurchaseNTokenResidual,\\n    // (uint8 TradeActionType, address CounterpartyAddress, int88 fCashAmountToSettle)\\n    SettleCashDebt\\n}\\n\\n/// @notice Specifies different deposit actions that can occur during BalanceAction or BalanceActionWithTrades\\nenum DepositActionType {\\n    // No deposit action\\n    None,\\n    // Deposit asset cash, depositActionAmount is specified in asset cash external precision\\n    DepositAsset,\\n    // Deposit underlying tokens that are mintable to asset cash, depositActionAmount is specified in underlying token\\n    // external precision\\n    DepositUnderlying,\\n    // Deposits specified asset cash external precision amount into an nToken and mints the corresponding amount of\\n    // nTokens into the account\\n    DepositAssetAndMintNToken,\\n    // Deposits specified underlying in external precision, mints asset cash, and uses that asset cash to mint nTokens\\n    DepositUnderlyingAndMintNToken,\\n    // Redeems an nToken balance to asset cash. depositActionAmount is specified in nToken precision. Considered a deposit action\\n    // because it deposits asset cash into an account. If there are fCash residuals that cannot be sold off, will revert.\\n    RedeemNToken,\\n    // Converts specified amount of asset cash balance already in Notional to nTokens. depositActionAmount is specified in\\n    // Notional internal 8 decimal precision.\\n    ConvertCashToNToken\\n}\\n\\n/// @notice Used internally for PortfolioHandler state\\nenum AssetStorageState {NoChange, Update, Delete, RevertIfStored}\\n\\n/****** Calldata objects ******/\\n\\n/// @notice Defines a balance action for batchAction\\nstruct BalanceAction {\\n    // Deposit action to take (if any)\\n    DepositActionType actionType;\\n    uint16 currencyId;\\n    // Deposit action amount must correspond to the depositActionType, see documentation above.\\n    uint256 depositActionAmount;\\n    // Withdraw an amount of asset cash specified in Notional internal 8 decimal precision\\n    uint256 withdrawAmountInternalPrecision;\\n    // If set to true, will withdraw entire cash balance. Useful if there may be an unknown amount of asset cash\\n    // residual left from trading.\\n    bool withdrawEntireCashBalance;\\n    // If set to true, will redeem asset cash to the underlying token on withdraw.\\n    bool redeemToUnderlying;\\n}\\n\\n/// @notice Defines a balance action with a set of trades to do as well\\nstruct BalanceActionWithTrades {\\n    DepositActionType actionType;\\n    uint16 currencyId;\\n    uint256 depositActionAmount;\\n    uint256 withdrawAmountInternalPrecision;\\n    bool withdrawEntireCashBalance;\\n    bool redeemToUnderlying;\\n    // Array of tightly packed 32 byte objects that represent trades. See TradeActionType documentation\\n    bytes32[] trades;\\n}\\n\\n/****** In memory objects ******/\\n/// @notice Internal object that represents settled cash balances\\nstruct SettleAmount {\\n    uint256 currencyId;\\n    int256 netCashChange;\\n}\\n\\n/// @notice Internal object that represents a token\\nstruct Token {\\n    address tokenAddress;\\n    bool hasTransferFee;\\n    int256 decimals;\\n    TokenType tokenType;\\n    uint256 maxCollateralBalance;\\n}\\n\\n/// @notice Internal object that represents an nToken portfolio\\nstruct nTokenPortfolio {\\n    CashGroupParameters cashGroup;\\n    PortfolioState portfolioState;\\n    int256 totalSupply;\\n    int256 cashBalance;\\n    uint256 lastInitializedTime;\\n    bytes6 parameters;\\n    address tokenAddress;\\n}\\n\\n/// @notice Internal object used during liquidation\\nstruct LiquidationFactors {\\n    address account;\\n    // Aggregate free collateral of the account denominated in ETH underlying, 8 decimal precision\\n    int256 netETHValue;\\n    // Amount of net local currency asset cash before haircuts and buffers available\\n    int256 localAssetAvailable;\\n    // Amount of net collateral currency asset cash before haircuts and buffers available\\n    int256 collateralAssetAvailable;\\n    // Haircut value of nToken holdings denominated in asset cash, will be local or collateral nTokens based\\n    // on liquidation type\\n    int256 nTokenHaircutAssetValue;\\n    // nToken parameters for calculating liquidation amount\\n    bytes6 nTokenParameters;\\n    // ETH exchange rate from local currency to ETH\\n    ETHRate localETHRate;\\n    // ETH exchange rate from collateral currency to ETH\\n    ETHRate collateralETHRate;\\n    // Asset rate for the local currency, used in cross currency calculations to calculate local asset cash required\\n    AssetRateParameters localAssetRate;\\n    // Used during currency liquidations if the account has liquidity tokens\\n    CashGroupParameters collateralCashGroup;\\n    // Used during currency liquidations if it is only a calculation, defaults to false\\n    bool isCalculation;\\n}\\n\\n/// @notice Internal asset array portfolio state\\nstruct PortfolioState {\\n    // Array of currently stored assets\\n    PortfolioAsset[] storedAssets;\\n    // Array of new assets to add\\n    PortfolioAsset[] newAssets;\\n    uint256 lastNewAssetIndex;\\n    // Holds the length of stored assets after accounting for deleted assets\\n    uint256 storedAssetLength;\\n}\\n\\n/// @notice In memory ETH exchange rate used during free collateral calculation.\\nstruct ETHRate {\\n    // The decimals (i.e. 10^rateDecimalPlaces) of the exchange rate, defined by the rate oracle\\n    int256 rateDecimals;\\n    // The exchange rate from base to ETH (if rate invert is required it is already done)\\n    int256 rate;\\n    // Amount of buffer as a multiple with a basis of 100 applied to negative balances.\\n    int256 buffer;\\n    // Amount of haircut as a multiple with a basis of 100 applied to positive balances\\n    int256 haircut;\\n    // Liquidation discount as a multiple with a basis of 100 applied to the exchange rate\\n    // as an incentive given to liquidators.\\n    int256 liquidationDiscount;\\n}\\n\\n/// @notice Internal object used to handle balance state during a transaction\\nstruct BalanceState {\\n    uint16 currencyId;\\n    // Cash balance stored in balance state at the beginning of the transaction\\n    int256 storedCashBalance;\\n    // nToken balance stored at the beginning of the transaction\\n    int256 storedNTokenBalance;\\n    // The net cash change as a result of asset settlement or trading\\n    int256 netCashChange;\\n    // Net asset transfers into or out of the account\\n    int256 netAssetTransferInternalPrecision;\\n    // Net token transfers into or out of the account\\n    int256 netNTokenTransfer;\\n    // Net token supply change from minting or redeeming\\n    int256 netNTokenSupplyChange;\\n    // The last time incentives were claimed for this currency\\n    uint256 lastClaimTime;\\n    // The last integral supply amount when tokens were claimed\\n    uint256 lastClaimIntegralSupply;\\n}\\n\\n/// @dev Asset rate used to convert between underlying cash and asset cash\\nstruct AssetRateParameters {\\n    // Address of the asset rate oracle\\n    AssetRateAdapter rateOracle;\\n    // The exchange rate from base to quote (if invert is required it is already done)\\n    int256 rate;\\n    // The decimals of the underlying, the rate converts to the underlying decimals\\n    int256 underlyingDecimals;\\n}\\n\\n/// @dev Cash group when loaded into memory\\nstruct CashGroupParameters {\\n    uint16 currencyId;\\n    uint256 maxMarketIndex;\\n    AssetRateParameters assetRate;\\n    bytes32 data;\\n}\\n\\n/// @dev A portfolio asset when loaded in memory\\nstruct PortfolioAsset {\\n    // Asset currency id\\n    uint256 currencyId;\\n    uint256 maturity;\\n    // Asset type, fCash or liquidity token.\\n    uint256 assetType;\\n    // fCash amount or liquidity token amount\\n    int256 notional;\\n    // Used for managing portfolio asset state\\n    uint256 storageSlot;\\n    // The state of the asset for when it is written to storage\\n    AssetStorageState storageState;\\n}\\n\\n/// @dev Market object as represented in memory\\nstruct MarketParameters {\\n    bytes32 storageSlot;\\n    uint256 maturity;\\n    // Total amount of fCash available for purchase in the market.\\n    int256 totalfCash;\\n    // Total amount of cash available for purchase in the market.\\n    int256 totalAssetCash;\\n    // Total amount of liquidity tokens (representing a claim on liquidity) in the market.\\n    int256 totalLiquidity;\\n    // This is the previous annualized interest rate in RATE_PRECISION that the market traded\\n    // at. This is used to calculate the rate anchor to smooth interest rates over time.\\n    uint256 lastImpliedRate;\\n    // Time lagged version of lastImpliedRate, used to value fCash assets at market rates while\\n    // remaining resistent to flash loan attacks.\\n    uint256 oracleRate;\\n    // This is the timestamp of the previous trade\\n    uint256 previousTradeTime;\\n}\\n\\n/****** Storage objects ******/\\n\\n/// @dev Token object in storage:\\n///  20 bytes for token address\\n///  1 byte for hasTransferFee\\n///  1 byte for tokenType\\n///  1 byte for tokenDecimals\\n///  9 bytes for maxCollateralBalance (may not always be set)\\nstruct TokenStorage {\\n    // Address of the token\\n    address tokenAddress;\\n    // Transfer fees will change token deposit behavior\\n    bool hasTransferFee;\\n    TokenType tokenType;\\n    uint8 decimalPlaces;\\n    // Upper limit on how much of this token the contract can hold at any time\\n    uint72 maxCollateralBalance;\\n}\\n\\n/// @dev Exchange rate object as it is represented in storage, total storage is 25 bytes.\\nstruct ETHRateStorage {\\n    // Address of the rate oracle\\n    AggregatorV2V3Interface rateOracle;\\n    // The decimal places of precision that the rate oracle uses\\n    uint8 rateDecimalPlaces;\\n    // True of the exchange rate must be inverted\\n    bool mustInvert;\\n    // NOTE: both of these governance values are set with BUFFER_DECIMALS precision\\n    // Amount of buffer to apply to the exchange rate for negative balances.\\n    uint8 buffer;\\n    // Amount of haircut to apply to the exchange rate for positive balances\\n    uint8 haircut;\\n    // Liquidation discount in percentage point terms, 106 means a 6% discount\\n    uint8 liquidationDiscount;\\n}\\n\\n/// @dev Asset rate oracle object as it is represented in storage, total storage is 21 bytes.\\nstruct AssetRateStorage {\\n    // Address of the rate oracle\\n    AssetRateAdapter rateOracle;\\n    // The decimal places of the underlying asset\\n    uint8 underlyingDecimalPlaces;\\n}\\n\\n/// @dev Governance parameters for a cash group, total storage is 9 bytes + 7 bytes for liquidity token haircuts\\n/// and 7 bytes for rate scalars, total of 23 bytes. Note that this is stored packed in the storage slot so there\\n/// are no indexes stored for liquidityTokenHaircuts or rateScalars, maxMarketIndex is used instead to determine the\\n/// length.\\nstruct CashGroupSettings {\\n    // Index of the AMMs on chain that will be made available. Idiosyncratic fCash\\n    // that is dated less than the longest AMM will be tradable.\\n    uint8 maxMarketIndex;\\n    // Time window in 5 minute increments that the rate oracle will be averaged over\\n    uint8 rateOracleTimeWindow5Min;\\n    // Total fees per trade, specified in BPS\\n    uint8 totalFeeBPS;\\n    // Share of the fees given to the protocol, denominated in percentage\\n    uint8 reserveFeeShare;\\n    // Debt buffer specified in 5 BPS increments\\n    uint8 debtBuffer5BPS;\\n    // fCash haircut specified in 5 BPS increments\\n    uint8 fCashHaircut5BPS;\\n    // If an account has a negative cash balance, it can be settled by incurring debt at the 3 month market. This\\n    // is the basis points for the penalty rate that will be added the current 3 month oracle rate.\\n    uint8 settlementPenaltyRate5BPS;\\n    // If an account has fCash that is being liquidated, this is the discount that the liquidator can purchase it for\\n    uint8 liquidationfCashHaircut5BPS;\\n    // If an account has fCash that is being liquidated, this is the discount that the liquidator can purchase it for\\n    uint8 liquidationDebtBuffer5BPS;\\n    // Liquidity token haircut applied to cash claims, specified as a percentage between 0 and 100\\n    uint8[] liquidityTokenHaircuts;\\n    // Rate scalar used to determine the slippage of the market\\n    uint8[] rateScalars;\\n}\\n\\n/// @dev Holds account level context information used to determine settlement and\\n/// free collateral actions. Total storage is 28 bytes\\nstruct AccountContext {\\n    // Used to check when settlement must be triggered on an account\\n    uint40 nextSettleTime;\\n    // For lenders that never incur debt, we use this flag to skip the free collateral check.\\n    bytes1 hasDebt;\\n    // Length of the account's asset array\\n    uint8 assetArrayLength;\\n    // If this account has bitmaps set, this is the corresponding currency id\\n    uint16 bitmapCurrencyId;\\n    // 9 total active currencies possible (2 bytes each)\\n    bytes18 activeCurrencies;\\n}\\n\\n/// @dev Holds nToken context information mapped via the nToken address, total storage is\\n/// 16 bytes\\nstruct nTokenContext {\\n    // Currency id that the nToken represents\\n    uint16 currencyId;\\n    // Annual incentive emission rate denominated in WHOLE TOKENS (multiply by \\n    // INTERNAL_TOKEN_PRECISION to get the actual rate)\\n    uint32 incentiveAnnualEmissionRate;\\n    // The last block time at utc0 that the nToken was initialized at, zero if it\\n    // has never been initialized\\n    uint32 lastInitializedTime;\\n    // Length of the asset array, refers to the number of liquidity tokens an nToken\\n    // currently holds\\n    uint8 assetArrayLength;\\n    // Each byte is a specific nToken parameter\\n    bytes5 nTokenParameters;\\n}\\n\\n/// @dev Holds account balance information, total storage 32 bytes\\nstruct BalanceStorage {\\n    // Number of nTokens held by the account\\n    uint80 nTokenBalance;\\n    // Last time the account claimed their nTokens\\n    uint32 lastClaimTime;\\n    // The total integral supply of the nToken at the last claim time packed into\\n    // 56 bits. There is some loss of precision here but it is acceptable\\n    uint56 packedLastClaimIntegralSupply;\\n    // Cash balance of the account\\n    int88 cashBalance;\\n}\\n\\n/// @dev Holds information about a settlement rate, total storage 25 bytes\\nstruct SettlementRateStorage {\\n    uint40 blockTime;\\n    uint128 settlementRate;\\n    uint8 underlyingDecimalPlaces;\\n}\\n\\n/// @dev Holds information about a market, total storage is 42 bytes so this spans\\n/// two storage words\\nstruct MarketStorage {\\n    // Total fCash in the market\\n    uint80 totalfCash;\\n    // Total asset cash in the market\\n    uint80 totalAssetCash;\\n    // Last annualized interest rate the market traded at\\n    uint32 lastImpliedRate;\\n    // Last recorded oracle rate for the market\\n    uint32 oracleRate;\\n    // Last time a trade was made\\n    uint32 previousTradeTime;\\n    // This is stored in slot + 1\\n    uint80 totalLiquidity;\\n}\\n\\nstruct ifCashStorage {\\n    // Notional amount of fCash at the slot, limited to int128 to allow for\\n    // future expansion\\n    int128 notional;\\n}\\n\\n/// @dev A single portfolio asset in storage, total storage of 19 bytes\\nstruct PortfolioAssetStorage {\\n    // Currency Id for the asset\\n    uint16 currencyId;\\n    // Maturity of the asset\\n    uint40 maturity;\\n    // Asset type (fCash or Liquidity Token marker)\\n    uint8 assetType;\\n    // Notional\\n    int88 notional;\\n}\\n\\n/// @dev nToken total supply factors for the nToken, includes factors related\\n/// to claiming incentives, total storage 32 bytes\\nstruct nTokenTotalSupplyStorage {\\n    // Total supply of the nToken\\n    uint96 totalSupply;\\n    // Integral of the total supply used for calculating the average total supply\\n    uint128 integralTotalSupply;\\n    // Last timestamp the supply value changed, used for calculating the integralTotalSupply\\n    uint32 lastSupplyChangeTime;\\n}\\n\\n/// @dev Used in view methods to return account balances in a developer friendly manner\\nstruct AccountBalance {\\n    uint16 currencyId;\\n    int256 cashBalance;\\n    int256 nTokenBalance;\\n    uint256 lastClaimTime;\\n    uint256 lastClaimIntegralSupply;\\n}\\n\"\r\n    },\r\n    \"interfaces/notional/NotionalProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../../contracts/global/Types.sol\\\";\\nimport \\\"./nTokenERC20.sol\\\";\\nimport \\\"./nERC1155Interface.sol\\\";\\nimport \\\"./NotionalGovernance.sol\\\";\\nimport \\\"./NotionalViews.sol\\\";\\n\\ninterface NotionalProxy is nTokenERC20, nERC1155Interface, NotionalGovernance, NotionalViews {\\n    /** User trading events */\\n    event CashBalanceChange(address indexed account, uint16 indexed currencyId, int256 netCashChange);\\n    event nTokenSupplyChange(address indexed account, uint16 indexed currencyId, int256 tokenSupplyChange);\\n    event MarketsInitialized(uint16 currencyId);\\n    event SweepCashIntoMarkets(uint16 currencyId, int256 cashIntoMarkets);\\n    event SettledCashDebt(\\n        address indexed settledAccount,\\n        uint16 indexed currencyId,\\n        address indexed settler,\\n        int256 amountToSettleAsset,\\n        int256 fCashAmount\\n    );\\n    event nTokenResidualPurchase(\\n        uint16 indexed currencyId,\\n        uint40 indexed maturity,\\n        address indexed purchaser,\\n        int256 fCashAmountToPurchase,\\n        int256 netAssetCashNToken\\n    );\\n    event LendBorrowTrade(\\n        address indexed account,\\n        uint16 indexed currencyId,\\n        uint40 maturity,\\n        int256 netAssetCash,\\n        int256 netfCash\\n    );\\n    event AddRemoveLiquidity(\\n        address indexed account,\\n        uint16 indexed currencyId,\\n        uint40 maturity,\\n        int256 netAssetCash,\\n        int256 netfCash,\\n        int256 netLiquidityTokens\\n    );\\n\\n    /// @notice Emitted when reserve fees are accrued\\n    event ReserveFeeAccrued(uint16 indexed currencyId, int256 fee);\\n    /// @notice Emitted whenever an account context has updated\\n    event AccountContextUpdate(address indexed account);\\n    /// @notice Emitted when an account has assets that are settled\\n    event AccountSettled(address indexed account);\\n    /// @notice Emitted when an asset rate is settled\\n    event SetSettlementRate(uint256 indexed currencyId, uint256 indexed maturity, uint128 rate);\\n\\n    /* Liquidation Events */\\n    event LiquidateLocalCurrency(\\n        address indexed liquidated,\\n        address indexed liquidator,\\n        uint16 localCurrencyId,\\n        int256 netLocalFromLiquidator\\n    );\\n\\n    event LiquidateCollateralCurrency(\\n        address indexed liquidated,\\n        address indexed liquidator,\\n        uint16 localCurrencyId,\\n        uint16 collateralCurrencyId,\\n        int256 netLocalFromLiquidator,\\n        int256 netCollateralTransfer,\\n        int256 netNTokenTransfer\\n    );\\n\\n    event LiquidatefCashEvent(\\n        address indexed liquidated,\\n        address indexed liquidator,\\n        uint16 localCurrencyId,\\n        uint16 fCashCurrency,\\n        int256 netLocalFromLiquidator,\\n        uint256[] fCashMaturities,\\n        int256[] fCashNotionalTransfer\\n    );\\n\\n    /** UUPS Upgradeable contract calls */\\n    function upgradeTo(address newImplementation) external;\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable;\\n    function getImplementation() external view returns (address);\\n    function owner() external view returns (address);\\n    function pauseRouter() external view returns (address);\\n    function pauseGuardian() external view returns (address);\\n\\n    /** Initialize Markets Action */\\n    function initializeMarkets(uint16 currencyId, bool isFirstInit) external;\\n\\n    function sweepCashIntoMarkets(uint16 currencyId) external;\\n\\n    /** Redeem nToken Action */\\n    function nTokenRedeem(\\n        address redeemer,\\n        uint16 currencyId,\\n        uint96 tokensToRedeem_,\\n        bool sellTokenAssets\\n    ) external returns (int256);\\n\\n    /** Account Action */\\n    function enableBitmapCurrency(uint16 currencyId) external;\\n\\n    function settleAccount(address account) external;\\n\\n    function depositUnderlyingToken(\\n        address account,\\n        uint16 currencyId,\\n        uint256 amountExternalPrecision\\n    ) external payable returns (uint256);\\n\\n    function depositAssetToken(\\n        address account,\\n        uint16 currencyId,\\n        uint256 amountExternalPrecision\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        uint16 currencyId,\\n        uint88 amountInternalPrecision,\\n        bool redeemToUnderlying\\n    ) external returns (uint256);\\n\\n    /** Batch Action */\\n    function batchBalanceAction(address account, BalanceAction[] calldata actions) external payable;\\n\\n    function batchBalanceAndTradeAction(address account, BalanceActionWithTrades[] calldata actions)\\n        external\\n        payable;\\n\\n    function batchBalanceAndTradeActionWithCallback(\\n        address account,\\n        BalanceActionWithTrades[] calldata actions,\\n        bytes calldata callbackData\\n    ) external payable;\\n\\n    /** Liquidation Action */\\n    function calculateLocalCurrencyLiquidation(\\n        address liquidateAccount,\\n        uint16 localCurrency,\\n        uint96 maxNTokenLiquidation\\n    ) external returns (int256, int256);\\n\\n    function liquidateLocalCurrency(\\n        address liquidateAccount,\\n        uint16 localCurrency,\\n        uint96 maxNTokenLiquidation\\n    ) external returns (int256, int256);\\n\\n    function calculateCollateralCurrencyLiquidation(\\n        address liquidateAccount,\\n        uint16 localCurrency,\\n        uint16 collateralCurrency,\\n        uint128 maxCollateralLiquidation,\\n        uint96 maxNTokenLiquidation\\n    )\\n        external\\n        returns (\\n            int256,\\n            int256,\\n            int256\\n        );\\n\\n    function liquidateCollateralCurrency(\\n        address liquidateAccount,\\n        uint16 localCurrency,\\n        uint16 collateralCurrency,\\n        uint128 maxCollateralLiquidation,\\n        uint96 maxNTokenLiquidation,\\n        bool withdrawCollateral,\\n        bool redeemToUnderlying\\n    )\\n        external\\n        returns (\\n            int256,\\n            int256,\\n            int256\\n        );\\n\\n    function calculatefCashLocalLiquidation(\\n        address liquidateAccount,\\n        uint16 localCurrency,\\n        uint256[] calldata fCashMaturities,\\n        uint256[] calldata maxfCashLiquidateAmounts\\n    ) external returns (int256[] memory, int256);\\n\\n    function liquidatefCashLocal(\\n        address liquidateAccount,\\n        uint16 localCurrency,\\n        uint256[] calldata fCashMaturities,\\n        uint256[] calldata maxfCashLiquidateAmounts\\n    ) external returns (int256[] memory, int256);\\n\\n    function calculatefCashCrossCurrencyLiquidation(\\n        address liquidateAccount,\\n        uint16 localCurrency,\\n        uint16 fCashCurrency,\\n        uint256[] calldata fCashMaturities,\\n        uint256[] calldata maxfCashLiquidateAmounts\\n    ) external returns (int256[] memory, int256);\\n\\n    function liquidatefCashCrossCurrency(\\n        address liquidateAccount,\\n        uint16 localCurrency,\\n        uint16 fCashCurrency,\\n        uint256[] calldata fCashMaturities,\\n        uint256[] calldata maxfCashLiquidateAmounts\\n    ) external returns (int256[] memory, int256);\\n}\\n\"\r\n    },\r\n    \"interfaces/notional/NotionalCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\n\\ninterface NotionalCallback {\\n    function notionalCallback(address sender, address account, bytes calldata callbackdata) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"interfaces/chainlink/AggregatorV2V3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\\n{\\n}\"\r\n    },\r\n    \"interfaces/notional/AssetRateAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-v3\\npragma solidity >=0.7.0;\\n\\n/// @notice Used as a wrapper for tokens that are interest bearing for an\\n/// underlying token. Follows the cToken interface, however, can be adapted\\n/// for other interest bearing tokens.\\ninterface AssetRateAdapter {\\n    function token() external view returns (address);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function getExchangeRateStateful() external returns (int256);\\n\\n    function getExchangeRateView() external view returns (int256);\\n\\n    function getAnnualizedSupplyRate() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/chainlink/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n  function latestTimestamp() external view returns (uint256);\\n  function latestRound() external view returns (uint256);\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\"\r\n    },\r\n    \"interfaces/chainlink/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\"\r\n    },\r\n    \"interfaces/notional/nTokenERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\ninterface nTokenERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    function nTokenTotalSupply(address nTokenAddress) external view returns (uint256);\\n\\n    function nTokenTransferAllowance(\\n        uint16 currencyId,\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function nTokenBalanceOf(uint16 currencyId, address account) external view returns (uint256);\\n\\n    function nTokenTransferApprove(\\n        uint16 currencyId,\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function nTokenTransfer(\\n        uint16 currencyId,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function nTokenTransferFrom(\\n        uint16 currencyId,\\n        address spender,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function nTokenTransferApproveAll(address spender, uint256 amount) external returns (bool);\\n\\n    function nTokenClaimIncentives() external returns (uint256);\\n\\n    function nTokenPresentValueAssetDenominated(uint16 currencyId) external view returns (int256);\\n\\n    function nTokenPresentValueUnderlyingDenominated(uint16 currencyId)\\n        external\\n        view\\n        returns (int256);\\n}\\n\"\r\n    },\r\n    \"interfaces/notional/nERC1155Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../../contracts/global/Types.sol\\\";\\n\\ninterface nERC1155Interface {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n    event URI(string value, uint256 indexed id);\\n\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function signedBalanceOf(address account, uint256 id) external view returns (int256);\\n\\n    function signedBalanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (int256[] memory);\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external payable;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external payable;\\n\\n    function decodeToAssets(uint256[] calldata ids, uint256[] calldata amounts)\\n        external\\n        view\\n        returns (PortfolioAsset[] memory);\\n\\n    function encodeToId(\\n        uint16 currencyId,\\n        uint40 maturity,\\n        uint8 assetType\\n    ) external pure returns (uint256 id);\\n}\\n\"\r\n    },\r\n    \"interfaces/notional/NotionalGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../../contracts/global/Types.sol\\\";\\nimport \\\"interfaces/chainlink/AggregatorV2V3Interface.sol\\\";\\nimport \\\"interfaces/notional/NotionalGovernance.sol\\\";\\n\\ninterface NotionalGovernance {\\n    event ListCurrency(uint16 newCurrencyId);\\n    event UpdateETHRate(uint16 currencyId);\\n    event UpdateAssetRate(uint16 currencyId);\\n    event UpdateCashGroup(uint16 currencyId);\\n    event DeployNToken(uint16 currencyId, address nTokenAddress);\\n    event UpdateDepositParameters(uint16 currencyId);\\n    event UpdateInitializationParameters(uint16 currencyId);\\n    event UpdateIncentiveEmissionRate(uint16 currencyId, uint32 newEmissionRate);\\n    event UpdateTokenCollateralParameters(uint16 currencyId);\\n    event UpdateGlobalTransferOperator(address operator, bool approved);\\n    event UpdateAuthorizedCallbackContract(address operator, bool approved);\\n    event UpdateMaxCollateralBalance(uint16 currencyId, uint72 maxCollateralBalance);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event PauseRouterAndGuardianUpdated(address indexed pauseRouter, address indexed pauseGuardian);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function setPauseRouterAndGuardian(address pauseRouter_, address pauseGuardian_) external;\\n\\n    function listCurrency(\\n        TokenStorage calldata assetToken,\\n        TokenStorage calldata underlyingToken,\\n        AggregatorV2V3Interface rateOracle,\\n        bool mustInvert,\\n        uint8 buffer,\\n        uint8 haircut,\\n        uint8 liquidationDiscount\\n    ) external returns (uint16 currencyId);\\n\\n    function updateMaxCollateralBalance(\\n        uint16 currencyId,\\n        uint72 maxCollateralBalanceInternalPrecision\\n    ) external;\\n\\n    function enableCashGroup(\\n        uint16 currencyId,\\n        AssetRateAdapter assetRateOracle,\\n        CashGroupSettings calldata cashGroup,\\n        string calldata underlyingName,\\n        string calldata underlyingSymbol\\n    ) external;\\n\\n    function updateDepositParameters(\\n        uint16 currencyId,\\n        uint32[] calldata depositShares,\\n        uint32[] calldata leverageThresholds\\n    ) external;\\n\\n    function updateInitializationParameters(\\n        uint16 currencyId,\\n        uint32[] calldata annualizedAnchorRates,\\n        uint32[] calldata proportions\\n    ) external;\\n\\n    function updateIncentiveEmissionRate(uint16 currencyId, uint32 newEmissionRate) external;\\n\\n    function updateTokenCollateralParameters(\\n        uint16 currencyId,\\n        uint8 residualPurchaseIncentive10BPS,\\n        uint8 pvHaircutPercentage,\\n        uint8 residualPurchaseTimeBufferHours,\\n        uint8 cashWithholdingBuffer10BPS,\\n        uint8 liquidationHaircutPercentage\\n    ) external;\\n\\n    function updateCashGroup(uint16 currencyId, CashGroupSettings calldata cashGroup) external;\\n\\n    function updateAssetRate(uint16 currencyId, AssetRateAdapter rateOracle) external;\\n\\n    function updateETHRate(\\n        uint16 currencyId,\\n        AggregatorV2V3Interface rateOracle,\\n        bool mustInvert,\\n        uint8 buffer,\\n        uint8 haircut,\\n        uint8 liquidationDiscount\\n    ) external;\\n\\n    function updateGlobalTransferOperator(address operator, bool approved) external;\\n\\n    function updateAuthorizedCallbackContract(address operator, bool approved) external;\\n}\\n\"\r\n    },\r\n    \"interfaces/notional/NotionalViews.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../../contracts/global/Types.sol\\\";\\n\\ninterface NotionalViews {\\n    function getMaxCurrencyId() external view returns (uint16);\\n\\n    function getCurrencyId(address tokenAddress) external view returns (uint16 currencyId);\\n\\n    function getCurrency(uint16 currencyId)\\n        external\\n        view\\n        returns (Token memory assetToken, Token memory underlyingToken);\\n\\n    function getRateStorage(uint16 currencyId)\\n        external\\n        view\\n        returns (ETHRateStorage memory ethRate, AssetRateStorage memory assetRate);\\n\\n    function getCurrencyAndRates(uint16 currencyId)\\n        external\\n        view\\n        returns (\\n            Token memory assetToken,\\n            Token memory underlyingToken,\\n            ETHRate memory ethRate,\\n            AssetRateParameters memory assetRate\\n        );\\n\\n    function getCashGroup(uint16 currencyId) external view returns (CashGroupSettings memory);\\n\\n    function getCashGroupAndAssetRate(uint16 currencyId)\\n        external\\n        view\\n        returns (CashGroupSettings memory cashGroup, AssetRateParameters memory assetRate);\\n\\n    function getInitializationParameters(uint16 currencyId)\\n        external\\n        view\\n        returns (int256[] memory annualizedAnchorRates, int256[] memory proportions);\\n\\n    function getDepositParameters(uint16 currencyId)\\n        external\\n        view\\n        returns (int256[] memory depositShares, int256[] memory leverageThresholds);\\n\\n    function nTokenAddress(uint16 currencyId) external view returns (address);\\n\\n    function getNoteToken() external view returns (address);\\n\\n    function getSettlementRate(uint16 currencyId, uint40 maturity)\\n        external\\n        view\\n        returns (AssetRateParameters memory);\\n\\n    function getMarket(uint16 currencyId, uint256 maturity, uint256 settlementDate)\\n        external view returns (MarketParameters memory);\\n\\n    function getActiveMarkets(uint16 currencyId) external view returns (MarketParameters[] memory);\\n\\n    function getActiveMarketsAtBlockTime(uint16 currencyId, uint32 blockTime)\\n        external\\n        view\\n        returns (MarketParameters[] memory);\\n\\n    function getReserveBalance(uint16 currencyId) external view returns (int256 reserveBalance);\\n\\n    function getNTokenPortfolio(address tokenAddress)\\n        external\\n        view\\n        returns (PortfolioAsset[] memory liquidityTokens, PortfolioAsset[] memory netfCashAssets);\\n\\n    function getNTokenAccount(address tokenAddress)\\n        external\\n        view\\n        returns (\\n            uint16 currencyId,\\n            uint256 totalSupply,\\n            uint256 incentiveAnnualEmissionRate,\\n            uint256 lastInitializedTime,\\n            bytes5 nTokenParameters,\\n            int256 cashBalance,\\n            uint256 integralTotalSupply,\\n            uint256 lastSupplyChangeTime\\n        );\\n\\n    function getAccount(address account)\\n        external\\n        view\\n        returns (\\n            AccountContext memory accountContext,\\n            AccountBalance[] memory accountBalances,\\n            PortfolioAsset[] memory portfolio\\n        );\\n\\n    function getAccountContext(address account) external view returns (AccountContext memory);\\n\\n    function getAccountBalance(uint16 currencyId, address account)\\n        external\\n        view\\n        returns (\\n            int256 cashBalance,\\n            int256 nTokenBalance,\\n            uint256 lastClaimTime\\n        );\\n\\n    function getAccountPortfolio(address account) external view returns (PortfolioAsset[] memory);\\n\\n    function getfCashNotional(\\n        address account,\\n        uint16 currencyId,\\n        uint256 maturity\\n    ) external view returns (int256);\\n\\n    function getAssetsBitmap(address account, uint16 currencyId) external view returns (bytes32);\\n\\n    function getFreeCollateral(address account) external view returns (int256, int256[] memory);\\n\\n    function calculateNTokensToMint(uint16 currencyId, uint88 amountToDepositExternalPrecision)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getfCashAmountGivenCashAmount(\\n        uint16 currencyId,\\n        int88 netCashToAccount,\\n        uint256 marketIndex,\\n        uint256 blockTime\\n    ) external view returns (int256);\\n\\n    function getCashAmountGivenfCashAmount(\\n        uint16 currencyId,\\n        int88 fCashAmount,\\n        uint256 marketIndex,\\n        uint256 blockTime\\n    ) external view returns (int256, int256);\\n\\n    function nTokenGetClaimableIncentives(address account, uint256 blockTime)\\n        external\\n        view\\n        returns (uint256);\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IEscrow\",\"name\":\"escrow_\",\"type\":\"address\"},{\"internalType\":\"contract NotionalProxy\",\"name\":\"notionalV2_\",\"type\":\"address\"},{\"internalType\":\"contract INotionalV1Erc1155\",\"name\":\"erc1155_\",\"type\":\"address\"},{\"internalType\":\"contract WETH9\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"wbtc_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Escrow\",\"outputs\":[{\"internalType\":\"contract IEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NotionalV1Erc1155\",\"outputs\":[{\"internalType\":\"contract INotionalV1Erc1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NotionalV2\",\"outputs\":[{\"internalType\":\"contract NotionalProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"V2_DAI\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"V2_ETH\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"V2_USDC\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"V2_WBTC\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBTC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract WETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"v1RepayAmount\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"enum DepositActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"currencyId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"depositActionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmountInternalPrecision\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawEntireCashBalance\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"redeemToUnderlying\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"trades\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct BalanceActionWithTrades[]\",\"name\":\"borrowAction\",\"type\":\"tuple[]\"}],\"name\":\"migrateDaiEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"v1RepayAmount\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"enum DepositActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"currencyId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"depositActionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmountInternalPrecision\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawEntireCashBalance\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"redeemToUnderlying\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"trades\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct BalanceActionWithTrades[]\",\"name\":\"borrowAction\",\"type\":\"tuple[]\"}],\"name\":\"migrateDaiWBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"v1RepayAmount\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"enum DepositActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"currencyId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"depositActionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmountInternalPrecision\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawEntireCashBalance\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"redeemToUnderlying\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"trades\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct BalanceActionWithTrades[]\",\"name\":\"borrowAction\",\"type\":\"tuple[]\"}],\"name\":\"migrateUSDCEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"v1RepayAmount\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"enum DepositActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"currencyId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"depositActionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmountInternalPrecision\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawEntireCashBalance\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"redeemToUnderlying\",\"type\":\"bool\"},{\"internalType\":\"bytes32[]\",\"name\":\"trades\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct BalanceActionWithTrades[]\",\"name\":\"borrowAction\",\"type\":\"tuple[]\"}],\"name\":\"migrateUSDCWBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callbackData\",\"type\":\"bytes\"}],\"name\":\"notionalCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NotionalV1ToNotionalV2","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009abd0b8868546105f6f48298eadc1d9c82f7f6830000000000000000000000001344a36a1b56144c3bc62e7757377d288fde0369000000000000000000000000bba899578bd3fa3daa863a340f5600797993ef08000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}