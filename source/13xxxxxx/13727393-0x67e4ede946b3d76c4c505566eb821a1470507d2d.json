{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/AssetListingGUni.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\ninterface IAaveOracle {\\n  function setAssetSources(address[] calldata assets, address[] calldata sources) external;\\n}\\n\\ninterface IAmmPoolConfigurator {\\n  struct InitReserveInput {\\n    address aTokenImpl;\\n    address stableDebtTokenImpl;\\n    address variableDebtTokenImpl;\\n    uint8 underlyingAssetDecimals;\\n    address interestRateStrategyAddress;\\n    address underlyingAsset;\\n    address treasury;\\n    address incentivesController;\\n    string underlyingAssetName;\\n    string aTokenName;\\n    string aTokenSymbol;\\n    string variableDebtTokenName;\\n    string variableDebtTokenSymbol;\\n    string stableDebtTokenName;\\n    string stableDebtTokenSymbol;\\n    bytes params;\\n  }\\n\\n  function batchInitReserve(InitReserveInput[] calldata input) external;\\n\\n  function configureReserveAsCollateral(\\n    address asset,\\n    uint256 ltv,\\n    uint256 liquidationThreshold,\\n    uint256 liquidationBonus\\n  ) external;\\n\\n  function setReserveFactor(address asset, uint256 reserveFactor) external;\\n}\\n\\ninterface IProposalIncentivesExecutor {\\n  function execute() external;\\n}\\n\\n// solhint-disable\\ncontract AssetListingGUni is IProposalIncentivesExecutor {\\n  address constant POOL_CONFIGURATOR = 0x23A875eDe3F1030138701683e42E9b16A7F87768;\\n  address constant AAVE_ORACLE = 0xA50ba011c48153De246E5192C8f9258A2ba79Ca9;\\n\\n  // G-UNI to list\\n  address constant GUniDAIUSDC_ORACLE = 0x7843eA2E3e60b24cc12B56C5627Adc7F9f0749D6;\\n  address constant GUniUSDCUSDT_ORACLE = 0x399e3bb2BBd49c570aa6edc6ac390E0D0aCbbD5e;\\n\\n  address constant GUniDAIUSDC = 0x50379f632ca68D36E50cfBC8F78fe16bd1499d1e;\\n  address constant GUniUSDCUSDT = 0xD2eeC91055F07fE24C9cCB25828ecfEFd4be0c41;\\n\\n  // Reserves configuration\\n  address constant ATOKEN_IMPL = 0x517AD97cD3543eE616cDb3D7765b201D6c9dFFdd;\\n  address constant STABLE_DEBT_TOKEN_IMPL = 0x135bb9dfd7880a53ef86b6f281AA4C3a9ADdB85c;\\n  address constant VARIABLE_DEBT_TOKEN_IMPL = 0x104e375E7A62ac88317b93A2288865513c1DC511;\\n  address constant RATE_STRATEGTY_ADDRESS = 0x52E39422cd86a12a13773D86af5FdBF5665989aD;\\n  address constant TREASURY_ADDRESS = 0x464C71f6c2F760DdA6093dCB91C24c39e5d6e18c;\\n  address constant INCENTIVES_CONTROLLER_ADDRESS = 0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5;\\n\\n  uint256 constant LIQUIDATION_BONUS = 11500;\\n  uint256 constant RESERVE_FACTOR = 1000;\\n\\n  struct NamingConvention {\\n    string aTokenSymbolPrefix;\\n    string variableSymbolPrefix;\\n    string stableSymbolPrefix;\\n    string aTokenNamePrefix;\\n    string variableNamePrefix;\\n    string stableNamePrefix;\\n  }\\n\\n  struct CollateralConfig {\\n    uint256 ltv;\\n    uint256 liquidationThreshold;\\n  }\\n\\n  function execute() external override {\\n    NamingConvention memory namingConvention = NamingConvention(\\n      'aAmm',\\n      'variableDebtAmm',\\n      'stableDebtAmm',\\n      'Aave AMM Market ',\\n      'Aave AMM Market Variable Debt ',\\n      'Aave AMM Market Stable Debt '\\n    );\\n    address[2] memory LP_TOKENS_TO_LIST_MARKET = [GUniDAIUSDC, GUniUSDCUSDT];\\n\\n    address[2] memory TOKENS_TO_LIST_ORACLE = [GUniDAIUSDC, GUniUSDCUSDT];\\n\\n    address[2] memory TOKEN_ORACLE_SOURCES = [GUniDAIUSDC_ORACLE, GUniUSDCUSDT_ORACLE];\\n\\n    string[2] memory LP_TOKEN_NAMES = ['GUniDAIUSDC', 'GUniUSDCUSDT'];\\n\\n    CollateralConfig[2] memory LP_COLLATERAL_CONFIGS = [\\n      CollateralConfig(6000, 7000),\\n      CollateralConfig(6000, 7000)\\n    ];\\n\\n    IAmmPoolConfigurator.InitReserveInput[]\\n      memory batchInit = new IAmmPoolConfigurator.InitReserveInput[](2);\\n\\n    for (uint256 i; i < batchInit.length; i++) {\\n      batchInit[i] = IAmmPoolConfigurator.InitReserveInput({\\n        aTokenImpl: ATOKEN_IMPL,\\n        stableDebtTokenImpl: STABLE_DEBT_TOKEN_IMPL,\\n        variableDebtTokenImpl: VARIABLE_DEBT_TOKEN_IMPL,\\n        underlyingAssetDecimals: 18,\\n        interestRateStrategyAddress: RATE_STRATEGTY_ADDRESS,\\n        underlyingAsset: LP_TOKENS_TO_LIST_MARKET[i],\\n        treasury: TREASURY_ADDRESS,\\n        incentivesController: INCENTIVES_CONTROLLER_ADDRESS,\\n        underlyingAssetName: LP_TOKEN_NAMES[i],\\n        aTokenName: concat(namingConvention.aTokenNamePrefix, LP_TOKEN_NAMES[i]),\\n        aTokenSymbol: concat(namingConvention.aTokenSymbolPrefix, LP_TOKEN_NAMES[i]),\\n        variableDebtTokenName: concat(namingConvention.variableNamePrefix, LP_TOKEN_NAMES[i]),\\n        variableDebtTokenSymbol: concat(namingConvention.variableSymbolPrefix, LP_TOKEN_NAMES[i]),\\n        stableDebtTokenName: concat(namingConvention.stableNamePrefix, LP_TOKEN_NAMES[i]),\\n        stableDebtTokenSymbol: concat(namingConvention.stableSymbolPrefix, LP_TOKEN_NAMES[i]),\\n        params: '0x'\\n      });\\n    }\\n\\n    // 1. Setup G-UNI LP tokens with their price sources at the Aave Oracle\\n    address[] memory tokensToListOracle = new address[](2);\\n    address[] memory tokenOracleSources = new address[](2);\\n    for (uint256 o; o < TOKENS_TO_LIST_ORACLE.length; o++) {\\n      tokensToListOracle[o] = TOKENS_TO_LIST_ORACLE[o];\\n      tokenOracleSources[o] = TOKEN_ORACLE_SOURCES[o];\\n    }\\n    IAaveOracle(AAVE_ORACLE).setAssetSources(tokensToListOracle, tokenOracleSources);\\n\\n    // 2. Batch init reserve G-UNI LP tokens\\n    IAmmPoolConfigurator(POOL_CONFIGURATOR).batchInitReserve(batchInit);\\n\\n    // 3. Set reserve collateral configuration and reserve factor for each G-UNI LP token\\n    for (uint256 y; y < batchInit.length; y++) {\\n      IAmmPoolConfigurator(POOL_CONFIGURATOR).configureReserveAsCollateral(\\n        LP_TOKENS_TO_LIST_MARKET[y],\\n        LP_COLLATERAL_CONFIGS[y].ltv,\\n        LP_COLLATERAL_CONFIGS[y].liquidationThreshold,\\n        LIQUIDATION_BONUS\\n      );\\n      IAmmPoolConfigurator(POOL_CONFIGURATOR).setReserveFactor(\\n        LP_TOKENS_TO_LIST_MARKET[y],\\n        RESERVE_FACTOR\\n      );\\n    }\\n  }\\n\\n  function concat(string memory a, string memory b) internal pure returns (string memory) {\\n    return string(abi.encodePacked(a, b));\\n  }\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AssetListingGUni","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}