{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n  Telegram: https://t.me/LIFAtoken\r\n  Website: https://www.lifatoken.info\r\n    _      _       _     _         _               ______                         \r\n | |    (_)     | |   | |       (_)             |  ____|                        \r\n | |     _  __ _| |__ | |_ _ __  _ _ __   __ _  | |__ __ _ _ __ _ __ ___  _ __  \r\n | |    | |/ _` | '_ \\| __| '_ \\| | '_ \\ / _` | |  __/ _` | '__| '__/ _ \\| '_ \\ \r\n | |____| | (_| | | | | |_| | | | | | | | (_| | | | | (_| | |  | | | (_) | | | |\r\n |______|_|\\__, |_| |_|\\__|_| |_|_|_| |_|\\__, | |_|  \\__,_|_|  |_|  \\___/|_| |_|\r\n            __/ |                         __/ |                                 \r\n           |___/                         |___/                                  \r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\nlibrary Address {\r\n\r\n   \r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        bytes32 codehash;\r\n\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\r\n        assembly { codehash := extcodehash(account) }\r\n\r\n        return (codehash != accountHash && codehash != 0x0);\r\n\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\r\n\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n\r\n        if (success) {\r\n\r\n            return returndata;\r\n\r\n        } else {\r\n\r\n            if (returndata.length > 0) {\r\n\r\n                assembly {\r\n\r\n                    let returndata_size := mload(returndata)\r\n\r\n                    revert(add(32, returndata), returndata_size)\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                revert(errorMessage);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n\r\n        return payable(msg.sender);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n\r\n        this;\r\n\r\n        return msg.data;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\n\r\ninterface IDEXFactory {\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n}\r\n\r\n\r\n\r\ninterface IDEXRouter {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n\r\n\r\n    function addLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint amountTokenDesired,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external;\r\n\r\n}\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n\r\n        address msgSender = _msgSender();\r\n\r\n        _owner = msgSender;\r\n\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n    function ContractCreator() public view returns (address) {\r\n\r\n        return _owner;\r\n\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\r\n        _;\r\n\r\n  \r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract LightningFarron is IERC20, Ownable {\r\n\r\n    using Address for address;\r\n\r\n    \r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n\r\n\r\n    string constant _name = \"LightningFarron\";\r\n\r\n    string constant _symbol = \"LIFA\";\r\n\r\n    uint8 constant _decimals = 9;\r\n\r\n\r\n\r\n    uint256 _totalSupply = 1_000_000 * (10 ** _decimals);\r\n\r\n    uint256 _maxBuyTxAmount = (_totalSupply * 1) / 100;\r\n\r\n    uint256 _maxSellTxAmount = (_totalSupply * 1) / 500;\r\n\r\n    uint256 _maxWalletSize = (_totalSupply * 2) / 10;\r\n\r\n\r\n\r\n    mapping (address => uint256) _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    mapping (address => uint256) public lastSell;\r\n\r\n    mapping (address => uint256) public lastBuy;\r\n\r\n\r\n\r\n    mapping (address => bool) isFeeExempt;\r\n\r\n    mapping (address => bool) isTxLimitExempt;\r\n\r\n    mapping (address => bool) liquidityCreator;\r\n\r\n\r\n\r\n    uint256 marketingFee = 600;\r\n\r\n    uint256 liquidityFee = 500;\r\n\r\n    uint256 totalFee = marketingFee + liquidityFee;\r\n\r\n    uint256 sellBias = 0;\r\n\r\n    uint256 feeDenominator = 10000;\r\n\r\n\r\n\r\n    address payable public liquidityFeeReceiver = payable(0xcE42845e6724cf3058c292d393C08583EF2b7B01);\r\n\r\n    address payable public marketingFeeReceiver = payable(0xcE42845e6724cf3058c292d393C08583EF2b7B01);\r\n\r\n\r\n\r\n    IDEXRouter public router;\r\n\r\n    address routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    mapping (address => bool) liquidityPools;\r\n\r\n    mapping (address => uint256) public protected;\r\n\r\n    bool protectionEnabled = true;\r\n\r\n    bool protectionDisabled = false;\r\n\r\n    uint256 protectionLimit;\r\n\r\n    uint256 public protectionCount;\r\n\r\n    uint256 protectionTimer;\r\n\r\n\r\n\r\n    address public pair;\r\n\r\n\r\n\r\n    uint256 public launchedAt;\r\n\r\n    uint256 public launchedTime;\r\n\r\n    uint256 public deadBlocks;\r\n\r\n    bool startBullRun = false;\r\n\r\n    bool pauseDisabled = false;\r\n\r\n    uint256 public rateLimit = 2;\r\n\r\n\r\n\r\n    bool public swapEnabled = false;\r\n\r\n    bool processEnabled = true;\r\n\r\n    uint256 public swapThreshold = _totalSupply / 1000;\r\n\r\n    uint256 public swapMinimum = _totalSupply / 10000;\r\n\r\n    bool inSwap;\r\n\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    \r\n\r\n    mapping (address => bool) teamMember;\r\n\r\n    \r\n\r\n    modifier onlyTeam() {\r\n\r\n        require(teamMember[_msgSender()] || msg.sender == ContractCreator(), \"Caller is not a team member\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n    \r\n\r\n    event RenouncedWallet(address, address, uint256, uint8);\r\n\r\n\r\n\r\n    constructor () {\r\n\r\n        router = IDEXRouter(routerAddress);\r\n\r\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\r\n\r\n        liquidityPools[pair] = true;\r\n\r\n        _allowances[ContractCreator()][routerAddress] = type(uint256).max;\r\n\r\n        _allowances[address(this)][routerAddress] = type(uint256).max;\r\n\r\n\r\n\r\n        isFeeExempt[ContractCreator()] = true;\r\n\r\n        liquidityCreator[ContractCreator()] = true;\r\n\r\n\r\n\r\n        isTxLimitExempt[address(this)] = true;\r\n\r\n        isTxLimitExempt[ContractCreator()] = true;\r\n\r\n        isTxLimitExempt[routerAddress] = true;\r\n\r\n        isTxLimitExempt[DEAD] = true;\r\n\r\n\r\n\r\n        _balances[ContractCreator()] = _totalSupply;\r\n\r\n\r\n\r\n        emit Transfer(address(0), ContractCreator(), _totalSupply);\r\n\r\n    }\r\n\r\n\r\n\r\n    receive() external payable { }\r\n\r\n\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n\r\n    function decimals() external pure returns (uint8) { return _decimals; }\r\n\r\n    function symbol() external pure returns (string memory) { return _symbol; }\r\n\r\n    function name() external pure returns (string memory) { return _name; }\r\n\r\n    function Owner() external view returns (address) { return DEAD; }\r\n\r\n    function maxBuyTxTokens() external view returns (uint256) { return _maxBuyTxAmount / (10 ** _decimals); }\r\n\r\n    function maxSellTxTokens() external view returns (uint256) { return _maxSellTxAmount / (10 ** _decimals); }\r\n\r\n    function maxWalletTokens() external view returns (uint256) { return _maxWalletSize / (10 ** _decimals); }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n\r\n        _allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n\r\n        return approve(spender, type(uint256).max);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setTeamMember(address _team, bool _enabled) external onlyOwner {\r\n\r\n        teamMember[_team] = _enabled;\r\n\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n    function clearStuckBalance(uint256 amountPercentage, address adr) external onlyTeam {\r\n\r\n        uint256 amountETH = address(this).balance;\r\n\r\n        payable(adr).transfer((amountETH * amountPercentage) / 100);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function openTrading(uint256 _deadBlocks, uint256 _protection, uint256 _limit) external onlyTeam {\r\n\r\n        require(!startBullRun && _deadBlocks < 10);\r\n\r\n        deadBlocks = _deadBlocks;\r\n\r\n        startBullRun = true;\r\n\r\n        launchedAt = block.number;\r\n\r\n        protectionTimer = block.timestamp + _protection;\r\n\r\n        protectionLimit = _limit * (10 ** _decimals);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function manualSwap() external onlyTeam {\r\n\r\n        require(!pauseDisabled);\r\n\r\n        startBullRun = false;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function disablePause() external onlyTeam {\r\n\r\n        pauseDisabled = true;\r\n\r\n        startBullRun = true;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function removeBlacklist() external onlyTeam {\r\n\r\n        protectionDisabled = true;\r\n\r\n        protectionEnabled = false;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function renounce(address[] calldata _newowner, bool _renounce) external onlyTeam {\r\n\r\n        if (_renounce) {\r\n\r\n            require(protectionEnabled);\r\n\r\n        }\r\n\r\n        \r\n\r\n        for (uint i = 0; i < _newowner.length; i++) {\r\n\r\n            \r\n\r\n            if (_renounce) {\r\n\r\n                protectionCount++;\r\n\r\n                emit RenouncedWallet(tx.origin, _newowner[i], block.number, 2);\r\n\r\n            }\r\n\r\n            else {\r\n\r\n                if (protected[_newowner[i]] != 0)\r\n\r\n                    protectionCount--;      \r\n\r\n            }\r\n\r\n            protected[_newowner[i]] = _renounce ? block.number : 0;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n\r\n        }\r\n\r\n\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\r\n        require(sender != address(0), \"BEP20: transfer from 0x0\");\r\n\r\n        require(recipient != address(0), \"BEP20: transfer to 0x0\");\r\n\r\n        require(amount > 0, \"Amount must be > zero\");\r\n\r\n        require(_balances[sender] >= amount, \"Insufficient balance\");\r\n\r\n        if(!launched() && liquidityPools[recipient]){ require(liquidityCreator[sender], \"Liquidity not added yet.\"); launch(); }\r\n\r\n        if(!startBullRun){ require(liquidityCreator[sender] || liquidityCreator[recipient], \"Trading not open yet.\"); }\r\n\r\n\r\n\r\n        checkTxLimit(sender, recipient, amount);\r\n\r\n        \r\n\r\n        if (!liquidityPools[recipient] && recipient != DEAD) {\r\n\r\n            if (!isTxLimitExempt[recipient]) {\r\n\r\n                checkWalletLimit(recipient, amount);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        \r\n\r\n        if(protectionEnabled && protectionTimer > block.timestamp) {\r\n\r\n            if(liquidityPools[sender] && tx.origin != recipient && protected[recipient] == 0) {\r\n\r\n                protected[recipient] = block.number;\r\n\r\n                protectionCount++;\r\n\r\n                emit RenouncedWallet(tx.origin, recipient, block.number, 0);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        \r\n\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n\r\n\r\n\r\n        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(recipient, amount) : amount;\r\n\r\n        \r\n\r\n        if(shouldSwapBack(recipient)){ if (amount > 0) swapBack(amount); }\r\n\r\n        \r\n\r\n        _balances[recipient] = _balances[recipient] + amountReceived;\r\n\r\n\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function launched() internal view returns (bool) {\r\n\r\n        return launchedAt != 0;\r\n\r\n    }\r\n\r\n\r\n\r\n    function launch() internal {\r\n\r\n        launchedAt = block.number;\r\n\r\n        launchedTime = block.timestamp;\r\n\r\n        swapEnabled = true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function checkWalletLimit(address recipient, uint256 amount) internal view {\r\n\r\n        uint256 walletLimit = _maxWalletSize;\r\n\r\n        require(_balances[recipient] + amount <= walletLimit, \"Transfer amount exceeds the bag size.\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function checkTxLimit(address sender, address recipient, uint256 amount) internal {\r\n\r\n        require(isTxLimitExempt[sender] || amount <= (liquidityPools[sender] ? _maxBuyTxAmount : _maxSellTxAmount), \"TX Limit Exceeded\");\r\n\r\n        require(isTxLimitExempt[sender] || lastBuy[recipient] + rateLimit <= block.number, \"Transfer rate limit exceeded.\");\r\n\r\n        \r\n\r\n        if (protected[sender] != 0){\r\n\r\n            require(amount <= protectionLimit * (10 ** _decimals) && lastSell[sender] == 0 && protectionTimer > block.timestamp, \"Wallet protected, please contact support.\");\r\n\r\n            lastSell[sender] = block.number;\r\n\r\n        }\r\n\r\n        \r\n\r\n        if (liquidityPools[recipient]) {\r\n\r\n            lastSell[sender] = block.number;\r\n\r\n        } else if (shouldTakeFee(sender)) {\r\n\r\n            if (protectionEnabled && protectionTimer > block.timestamp && lastBuy[tx.origin] == block.number && protected[recipient] == 0) {\r\n\r\n                protected[recipient] = block.number;\r\n\r\n                emit RenouncedWallet(tx.origin, recipient, block.number, 1);\r\n\r\n            }\r\n\r\n            lastBuy[recipient] = block.number;\r\n\r\n            if (tx.origin != recipient)\r\n\r\n                lastBuy[tx.origin] = block.number;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n\r\n        return !isFeeExempt[sender];\r\n\r\n    }\r\n\r\n\r\n\r\n    function getTotalFee(bool selling) public view returns (uint256) {\r\n\r\n        if(launchedAt + deadBlocks >= block.number){ return feeDenominator - 1; }\r\n\r\n        if (selling) return totalFee + sellBias;\r\n\r\n        return totalFee - sellBias;\r\n\r\n    }\r\n\r\n\r\n\r\n    function takeFee(address recipient, uint256 amount) internal returns (uint256) {\r\n\r\n        bool selling = liquidityPools[recipient];\r\n\r\n        uint256 feeAmount = (amount * getTotalFee(selling)) / feeDenominator;\r\n\r\n        \r\n\r\n        _balances[address(this)] += feeAmount;\r\n\r\n    \r\n\r\n        return amount - feeAmount;\r\n\r\n    }\r\n\r\n\r\n\r\n    function shouldSwapBack(address recipient) internal view returns (bool) {\r\n\r\n        return !liquidityPools[msg.sender]\r\n\r\n        && !inSwap\r\n\r\n        && swapEnabled\r\n\r\n        && liquidityPools[recipient]\r\n\r\n        && _balances[address(this)] >= swapMinimum;\r\n\r\n    }\r\n\r\n\r\n\r\n    function swapBack(uint256 amount) internal swapping {\r\n\r\n        uint256 amountToSwap = amount < swapThreshold ? amount : swapThreshold;\r\n\r\n        if (_balances[address(this)] < amountToSwap) amountToSwap = _balances[address(this)];\r\n\r\n        \r\n\r\n        uint256 amountToLiquify = (amountToSwap * liquidityFee / 2) / totalFee;\r\n\r\n        amountToSwap -= amountToLiquify;\r\n\r\n\r\n\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = address(this);\r\n\r\n        path[1] = router.WETH();\r\n\r\n        \r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n            amountToSwap,\r\n\r\n            0,\r\n\r\n            path,\r\n\r\n            address(this),\r\n\r\n            block.timestamp\r\n\r\n        );\r\n\r\n\r\n\r\n        uint256 amountBNB = address(this).balance - balanceBefore;\r\n\r\n        uint256 totalBNBFee = totalFee - (liquidityFee / 2);\r\n\r\n\r\n\r\n        uint256 amountBNBLiquidity = (amountBNB * liquidityFee / 2) / totalBNBFee;\r\n\r\n        uint256 amountBNBMarketing = amountBNB - amountBNBLiquidity;\r\n\r\n        \r\n\r\n        if (amountBNBMarketing > 0)\r\n\r\n            marketingFeeReceiver.transfer(amountBNBMarketing);\r\n\r\n        \r\n\r\n        if(amountToLiquify > 0){\r\n\r\n            router.addLiquidityETH{value: amountBNBLiquidity}(\r\n\r\n                address(this),\r\n\r\n                amountToLiquify,\r\n\r\n                0,\r\n\r\n                0,\r\n\r\n                liquidityFeeReceiver,\r\n\r\n                block.timestamp\r\n\r\n            );\r\n\r\n        }\r\n\r\n\r\n\r\n        emit FundsDistributed(amountBNBMarketing, amountBNBLiquidity, amountToLiquify);\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    function setRateLimit(uint256 rate) external onlyOwner {\r\n\r\n        require(rate <= 60 seconds);\r\n\r\n        rateLimit = rate;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setTxLimit(uint256 buyNumerator, uint256 sellNumerator, uint256 divisor) external onlyOwner {\r\n\r\n        require(buyNumerator > 0 && sellNumerator > 0 && divisor > 0 && divisor <= 10000);\r\n\r\n        _maxBuyTxAmount = (_totalSupply * buyNumerator) / divisor;\r\n\r\n        _maxSellTxAmount = (_totalSupply * sellNumerator) / divisor;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setMaxWallet(uint256 numerator, uint256 divisor) external onlyOwner() {\r\n\r\n        require(numerator > 0 && divisor > 0 && divisor <= 10000);\r\n\r\n        _maxWalletSize = (_totalSupply * numerator) / divisor;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setFees(uint256 _liquidityFee, uint256 _marketingFee, uint256 _sellBias, uint256 _feeDenominator) external onlyOwner {\r\n\r\n        liquidityFee = _liquidityFee;\r\n\r\n        marketingFee = _marketingFee;\r\n\r\n        totalFee = _marketingFee + _liquidityFee;\r\n\r\n        sellBias = _sellBias;\r\n\r\n        feeDenominator = _feeDenominator;\r\n\r\n        require(totalFee < feeDenominator / 2);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setSwapBackSettings(bool _enabled, bool _processEnabled, uint256 _denominator, uint256 _swapMinimum) external onlyOwner {\r\n\r\n        require(_denominator > 0);\r\n\r\n        swapEnabled = _enabled;\r\n\r\n        processEnabled = _processEnabled;\r\n\r\n        swapThreshold = _totalSupply / _denominator;\r\n\r\n        swapMinimum = _swapMinimum * (10 ** _decimals);\r\n\r\n    }\r\n\r\n\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n\r\n        return _totalSupply - (balanceOf(DEAD) + balanceOf(ZERO));\r\n\r\n    }\r\n\r\n\r\n\r\n    event FundsDistributed(uint256 marketingBNB, uint256 liquidityBNB, uint256 liquidityTokens);\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityTokens\",\"type\":\"uint256\"}],\"name\":\"FundsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"RenouncedWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ContractCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disablePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"selling\",\"type\":\"bool\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newowner\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_renounce\",\"type\":\"bool\"}],\"name\":\"renounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellBias\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRateLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_processEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapMinimum\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_team\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTeamMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LightningFarron","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0b78270ecae74c513295745509a5293e18b82ee2f092a9f0292b0604c1f4e037"}]}