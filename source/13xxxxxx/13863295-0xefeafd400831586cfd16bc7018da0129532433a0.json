{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/pirate/PnG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IPnG.sol\\\";\\r\\nimport \\\"./interfaces/ITraits.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IFleet.sol\\\";\\r\\n\\r\\n\\r\\nimport \\\"./utils/Accessable.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\ncontract TraitSelector {\\r\\n    // list of probabilities for each trait type\\r\\n    // 0 - 7 are associated with Galleons, 8 - 15 are associated with Pirates\\r\\n    uint8[][16] public rarities;\\r\\n    // list of aliases for Walker's Alias algorithm\\r\\n    // 0 - 7 are associated with Galleons, 8-15 are associated with Pirates\\r\\n    uint8[][16] public aliases;\\r\\n\\r\\n    constructor() {\\r\\n        // A.J. Walker's Alias Algorithm\\r\\n        // Galleons\\r\\n\\r\\n        // base\\r\\n        rarities[0] = [ 245, 173, 255 ];\\r\\n        aliases[0] =  [ 1, 2, 2 ];\\r\\n        // deck\\r\\n        rarities[1] = [ 252, 212, 255 ];\\r\\n        aliases[1] =  [ 1, 2, 2 ];\\r\\n        // sails\\r\\n        rarities[2] =  [60,   2,  1,  86, 219,  17, 80, 73,86, 139, 54, 120,  86,  18, 66, 80,60, 119, 66,  86,  73, 192, 99,  3,33, 255];\\r\\n        aliases[2] = [ 1, 13, 23,  1,  1, 23,  1,  1, 2,  2, 24, 23,  5, 24,  5,  5, 10, 10, 10, 10, 11,  1, 11, 24, 25, 25];\\r\\n        // crowsNest\\r\\n        rarities[3] = [ 9,  23, 119, 19,  74, 179, 10,  19,82,   6, 143,  8,   7,  40, 75,  71,52, 150,  10, 21, 150,  38, 17, 122,21, 255];\\r\\n        aliases[3] = [ 2,  4,  4,  4,  8,  8, 10, 14,15, 17, 15, 17, 17, 19, 19, 19,20, 20, 20, 23, 21, 24, 25, 24,25, 25];\\r\\n        // decor\\r\\n        rarities[4] = [ 19, 59,  9, 21, 116,  46,  8, 30, 11, 45, 39,  49, 255, 21,163, 10, 26,  6, 202,  11];\\r\\n        aliases[4] = [4,  4,  4,  5,  5,  7,  7, 11,  7, 10, 12, 12, 12, 10, 7, 10, 10, 11, 10, 11];\\r\\n        // flags\\r\\n        rarities[5] = [ 8,  64,  34, 104, 210, 189,  49, 159,  45, 146,  29,  31,  33,  61, 40,  69, 111,  29,  14, 221, 116, 150, 255, 232, 142];\\r\\n        aliases[5] = [ 9,  9, 12, 12,  0,  0, 13,  0, 0, 12,  1,  1, 15, 16,  2, 17, 17, 22,  3,  1,  2,  6, 22,  0, 6];\\r\\n        // bowsprit\\r\\n        rarities[6] = [11,  23, 20,  49, 29,  9, 219, 159, 243,  85, 78,  11, 71, 42,  34,  14, 204,  61, 18, 151,  3,  2,  26,  27, 189, 255];\\r\\n        aliases[6] = [3,  3,  3,  4,  6,  8,  7,  8,  9, 18,  9,  9, 25, 12, 12, 16,  9, 18, 25, 25, 18, 19, 23, 24,  9, 25];\\r\\n\\r\\n        // empty\\r\\n        rarities[7] = [255];\\r\\n        aliases[7] = [0];\\r\\n\\r\\n        // Pirates\\r\\n        // skin\\r\\n        rarities[8] = [ 255, 255, 255, 255, 255 ];\\r\\n        aliases[8] =  [ 0, 1, 2, 3, 4 ];\\r\\n        // clothes\\r\\n        rarities[9] = [255, 153,  76, 128,128,  76, 255, 179, 76, 128];\\r\\n        aliases[9] = [0, 2, 5, 2, 5,6, 6, 2, 4, 4];\\r\\n        // hair\\r\\n        rarities[10] = [216, 71, 67, 216, 54,152, 35, 55, 221, 34,255];\\r\\n        aliases[10] = [ 1, 5, 1, 1, 6, 6, 7, 8, 10, 4, 10];\\r\\n        // earrings\\r\\n        rarities[11] = [35, 69, 126, 6, 42,  56, 57,  47, 134, 101, 208, 112,  142, 255, 169, 208,  78];\\r\\n        aliases[11] = [2, 4,  3, 4,  5,  6,  7,  11, 7, 12, 7, 12, 13, 13, 7, 9,  9];\\r\\n        // mouth\\r\\n        rarities[12] = [80, 208,  43, 120,67, 139, 190, 255];\\r\\n        aliases[12] = [ 1, 2, 3, 6, 2, 2, 7, 7];\\r\\n        // eyes\\r\\n        rarities[13] = [ 125, 134, 208,  23, 125, 179, 107, 118, 249, 171, 255, 200, 100, 225];\\r\\n        aliases[13] = [1, 2, 2, 0, 2, 2, 9, 0, 5, 4, 4, 4, 4, 4];\\r\\n        // weapon\\r\\n        rarities[14] = [159, 229,  84,  93, 176, 53, 113, 123, 103,  94, 78,  96, 255];\\r\\n        aliases[14] = [ 1, 2, 11, 2, 2, 9, 9, 9, 10, 10, 11, 12,12];\\r\\n        //  alphaIndex\\r\\n        rarities[15] = [ 173, 255, 163, 10 ];\\r\\n        aliases[15] =  [ 1, 1, 0, 0 ];\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    * uses A.J. Walker's Alias algorithm for O(1) rarity table lookup\\r\\n    * ensuring O(1) instead of O(n) reduces mint cost by more than 50%\\r\\n    * probability & alias tables are generated off-chain beforehand\\r\\n    * @param seed portion of the 256 bit seed to remove trait correlation\\r\\n    * @param traitType the trait type to select a trait for \\r\\n    * @return the ID of the randomly selected trait\\r\\n    */\\r\\n    function selectTrait(uint16 seed, uint8 traitType) internal view returns (uint8) {\\r\\n        uint8 trait = uint8(seed) % uint8(rarities[traitType].length);\\r\\n        // If a selected random trait probability is selected (biased coin) return that trait\\r\\n        if (seed >> 8 < rarities[traitType][trait]) return trait + 1;\\r\\n        return aliases[traitType][trait] + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * selects the species and all of its traits based on the seed value\\r\\n    * @param seed a pseudorandom 256 bit number to derive traits from\\r\\n    * @return t -  a struct of randomly selected traits\\r\\n    */\\r\\n    function selectTraits(uint256 seed) internal view returns (IPnG.GalleonPirate memory t) {    \\r\\n        t.isGalleon = (seed & 0xFFFF) % 10 != 0;\\r\\n\\r\\n        if (t.isGalleon) {\\r\\n            seed >>= 16;\\r\\n            t.base = selectTrait(uint16(seed & 0xFFFF), 0);\\r\\n\\r\\n            seed >>= 16;\\r\\n            t.deck = selectTrait(uint16(seed & 0xFFFF), 1);\\r\\n\\r\\n            seed >>= 16;\\r\\n            t.sails = selectTrait(uint16(seed & 0xFFFF), 2);\\r\\n\\r\\n            seed >>= 16;\\r\\n            t.crowsNest = selectTrait(uint16(seed & 0xFFFF), 3);\\r\\n\\r\\n            seed >>= 16;\\r\\n            t.decor = selectTrait(uint16(seed & 0xFFFF), 4);\\r\\n\\r\\n            seed >>= 16;\\r\\n            t.flags = selectTrait(uint16(seed & 0xFFFF), 5);\\r\\n\\r\\n            seed >>= 16;\\r\\n            t.bowsprit = selectTrait(uint16(seed & 0xFFFF), 6);\\r\\n\\r\\n            seed >>= 16;\\r\\n            t.alphaIndex = selectTrait(uint16(seed & 0xFFFF), 7) - 1;\\r\\n            t.hat = t.alphaIndex;\\r\\n        }\\r\\n        else {\\r\\n            seed >>= 16;\\r\\n            t.skin = selectTrait(uint16(seed & 0xFFFF), 8);\\r\\n\\r\\n            seed >>= 16;\\r\\n            t.clothes = selectTrait(uint16(seed & 0xFFFF), 9);\\r\\n\\r\\n            seed >>= 16;\\r\\n            t.hair = selectTrait(uint16(seed & 0xFFFF), 10);\\r\\n\\r\\n            seed >>= 16;\\r\\n            t.earrings = selectTrait(uint16(seed & 0xFFFF), 11);\\r\\n\\r\\n            seed >>= 16;\\r\\n            t.mouth = selectTrait(uint16(seed & 0xFFFF), 12);\\r\\n\\r\\n            seed >>= 16;\\r\\n            t.eyes = selectTrait(uint16(seed & 0xFFFF), 13);\\r\\n\\r\\n            seed >>= 16;\\r\\n            t.weapon = selectTrait(uint16(seed & 0xFFFF), 14);\\r\\n\\r\\n            seed >>= 16;\\r\\n            t.alphaIndex = selectTrait(uint16(seed & 0xFFFF), 15) - 1;\\r\\n            t.hat = t.alphaIndex;\\r\\n        }\\r\\n\\r\\n        return t;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ncontract PnG is IPnG, ERC721, Accessable, Pausable, TraitSelector {\\r\\n    uint256 constant MAX_INT = type(uint256).max;\\r\\n\\r\\n    struct LastWrite {\\r\\n        uint64 time;\\r\\n        uint64 blockNum;\\r\\n    }\\r\\n\\r\\n    event GalleonMinted(uint256 indexed tokenId);\\r\\n    event PirateMinted(uint256 indexed tokenId);\\r\\n\\r\\n    event GalleonStolen(uint256 indexed tokenId);\\r\\n    event PirateStolen(uint256 indexed tokenId);\\r\\n    \\r\\n    event GalleonBurned(uint256 indexed tokenId);\\r\\n    event PirateBurned(uint256 indexed tokenId);\\r\\n\\r\\n    // max number of tokens that can be minted: 50000 in production\\r\\n    uint256 public maxTokens;\\r\\n    // number of tokens that can be claimed for a fee: 10,000\\r\\n    uint256 public PAID_TOKENS;\\r\\n    // number of tokens have been minted so far\\r\\n    uint16 public override minted;\\r\\n\\r\\n    // tokenId -> traits\\r\\n    mapping(uint256 => GalleonPirate) private tokenTraits;\\r\\n    // tokenHash -> tokenId\\r\\n    mapping(uint256 => uint256) public existingCombinations;\\r\\n    // Tracks the last block and timestamp that a caller has written to state.\\r\\n    // Disallow some access to functions if they occur while a change is being written.\\r\\n    mapping(address => LastWrite) private lastWriteAddress;\\r\\n    mapping(uint256 => LastWrite) private lastWriteToken;\\r\\n\\r\\n    // reference to the Fleet contract to allow transfers to it without approval\\r\\n    IFleet public fleet;\\r\\n    ITraits public traits;\\r\\n\\r\\n    constructor(uint256 _maxTokens) ERC721(\\\"Pirate Game\\\", \\\"PnG\\\") {\\r\\n        maxTokens = _maxTokens;\\r\\n        PAID_TOKENS = _maxTokens / 5;\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /** MODIFIERS */\\r\\n\\r\\n    modifier requireContractsSet() {\\r\\n        require(address(traits) != address(0) && address(fleet) != address(0), \\\"Contracts not set\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier blockIfChangingAddress() {\\r\\n        require(isAdmin(_msgSender()) || lastWriteAddress[tx.origin].blockNum < block.number, \\\"Cannot interact in the current block\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier blockIfChangingToken(uint256 tokenId) {\\r\\n        require(isAdmin(_msgSender()) || lastWriteToken[tokenId].blockNum < block.number, \\\"Cannot interact in the current block\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setContracts(address _traits, address _fleet) external onlyOwner {\\r\\n        traits = ITraits(_traits);\\r\\n        fleet = IFleet(_fleet);\\r\\n    }\\r\\n\\r\\n    /** EXTERNAL */\\r\\n\\r\\n    function getTokenWriteBlock(uint256 tokenId) external view override\\r\\n        onlyAdmin\\r\\n        returns(uint64) \\r\\n    {\\r\\n        return lastWriteToken[tokenId].blockNum;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n    * Mint a token - any payment / game logic should be handled in the game contract. \\r\\n    * This will just generate random traits and mint a token to a designated address.\\r\\n    */\\r\\n    function mint(address recipient, uint256 seed) external override \\r\\n        whenNotPaused \\r\\n        onlyAdmin\\r\\n    {\\r\\n        require(minted + 1 <= maxTokens, \\\"All tokens minted\\\");\\r\\n        minted++;\\r\\n        generate(minted, seed);\\r\\n        if(tx.origin != recipient && recipient != address(fleet)) {\\r\\n            // Stolen!\\r\\n            if(tokenTraits[minted].isGalleon) {\\r\\n                emit GalleonStolen(minted);\\r\\n            }\\r\\n            else {\\r\\n                emit PirateStolen(minted);\\r\\n            }\\r\\n        }\\r\\n        _safeMint(recipient, minted);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n    * Burn a token - any game logic should be handled before this function.\\r\\n    */\\r\\n    function burn(uint256 tokenId) external override \\r\\n        whenNotPaused \\r\\n        onlyAdmin\\r\\n    {\\r\\n        require(ownerOf(tokenId) == tx.origin, \\\"Oops you don't own that\\\");\\r\\n        if(tokenTraits[tokenId].isGalleon) {\\r\\n            emit GalleonBurned(tokenId);\\r\\n        }\\r\\n        else {\\r\\n            emit PirateBurned(tokenId);\\r\\n        }\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function updateOriginAccess(uint16[] memory tokenIds) external override \\r\\n        onlyAdmin\\r\\n    {\\r\\n        uint64 blockNum = uint64(block.number);\\r\\n        uint64 time = uint64(block.timestamp);\\r\\n        lastWriteAddress[tx.origin] = LastWrite(time, blockNum);\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            lastWriteToken[tokenIds[i]] = LastWrite(time, blockNum);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferFrom( address from, address to, uint256 tokenId) \\r\\n        public \\r\\n        virtual \\r\\n        override(ERC721, IERC721) \\r\\n        blockIfChangingToken(tokenId) \\r\\n    {\\r\\n        // allow admin contracts to be send without approval\\r\\n        if(!isAdmin(_msgSender())) {\\r\\n            require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n        }\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /** INTERNAL */\\r\\n\\r\\n    /**\\r\\n    * generates traits for a specific token, checking to make sure it's unique\\r\\n    * @param tokenId the id of the token to generate traits for\\r\\n    * @param seed a pseudorandom 256 bit number to derive traits from\\r\\n    * @return t - a struct of traits for the given token ID\\r\\n    */\\r\\n    function generate(uint256 tokenId, uint256 seed) internal returns (GalleonPirate memory t) {\\r\\n        t = selectTraits(seed);\\r\\n        if (existingCombinations[structToHash(t)] == 0) {\\r\\n            tokenTraits[tokenId] = t;\\r\\n            existingCombinations[structToHash(t)] = tokenId;\\r\\n\\r\\n            if(t.isGalleon)\\r\\n                emit GalleonMinted(tokenId);\\r\\n            else\\r\\n                emit PirateMinted(tokenId);\\r\\n\\r\\n            return t;\\r\\n        }\\r\\n\\r\\n        if (seed == MAX_INT)\\r\\n            return generate(tokenId, 1);\\r\\n        else\\r\\n            return generate(tokenId, seed+1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * converts a struct to a 256 bit hash to check for uniqueness\\r\\n    * @param s the struct to pack into a hash\\r\\n    * @return the 256 bit hash of the struct\\r\\n    */\\r\\n    function structToHash(GalleonPirate memory s) internal pure returns (uint256) {\\r\\n        if (s.isGalleon) {\\r\\n            return uint256(keccak256(abi.encodePacked(\\r\\n                s.isGalleon,\\r\\n                // Galleon\\r\\n                s.base,\\r\\n                s.deck,\\r\\n                s.sails,\\r\\n                s.crowsNest,\\r\\n                s.decor,\\r\\n                s.flags,\\r\\n                s.bowsprit\\r\\n        )));\\r\\n        } else {\\r\\n            return uint256(keccak256(abi.encodePacked(\\r\\n                s.isGalleon,\\r\\n                s.skin,\\r\\n                s.clothes,\\r\\n                s.hair,\\r\\n                s.earrings,\\r\\n                s.mouth,\\r\\n                s.eyes,\\r\\n                s.weapon,\\r\\n                s.hat,\\r\\n                s.alphaIndex\\r\\n            )));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** READ */\\r\\n\\r\\n    function isGalleon(uint256 tokenId) external view override \\r\\n        blockIfChangingToken(tokenId) \\r\\n        returns (bool) \\r\\n    {\\r\\n        IPnG.GalleonPirate memory s = tokenTraits[tokenId];\\r\\n        return s.isGalleon;\\r\\n    }\\r\\n\\r\\n    function getMaxTokens() external view override returns (uint256) {\\r\\n        return maxTokens;\\r\\n    }\\r\\n\\r\\n    function getPaidTokens() external view override returns (uint256) {\\r\\n        return PAID_TOKENS;\\r\\n    }\\r\\n\\r\\n    /** ADMIN */\\r\\n\\r\\n    /**\\r\\n    * updates the number of tokens for sale\\r\\n    */\\r\\n    function _setTokensAmount(uint16 _paidTokens, uint16 _maxTokens) external onlyAdmin {\\r\\n        PAID_TOKENS = _paidTokens;\\r\\n        maxTokens = _maxTokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * enables owner to pause / unpause minting\\r\\n    */\\r\\n    function _setPaused(bool _paused) external requireContractsSet onlyAdmin {\\r\\n        if (_paused) _pause();\\r\\n        else _unpause();\\r\\n    }\\r\\n\\r\\n\\r\\n    /** Traits */\\r\\n\\r\\n    function getTokenTraits(uint256 tokenId) external view override \\r\\n        blockIfChangingAddress \\r\\n        blockIfChangingToken(tokenId) \\r\\n        returns (GalleonPirate memory) \\r\\n    {\\r\\n        return tokenTraits[tokenId];\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view override \\r\\n        blockIfChangingAddress \\r\\n        blockIfChangingToken(tokenId) \\r\\n        returns (string memory) \\r\\n    {\\r\\n        require(_exists(tokenId), \\\"Token ID does not exist\\\");\\r\\n        return traits.tokenURI(tokenId);\\r\\n    }\\r\\n\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return minted;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function balanceOf(address owner) public view virtual override(ERC721, IERC721) \\r\\n        blockIfChangingAddress \\r\\n        returns (uint256) \\r\\n    {\\r\\n        // checking on this address in the same block it's being modified\\r\\n        require(\\r\\n            isAdmin(_msgSender()) || lastWriteAddress[owner].blockNum < block.number, \\r\\n            \\\"Cannot interact in the current block\\\"\\r\\n        );\\r\\n        return super.balanceOf(owner);\\r\\n    }\\r\\n\\r\\n\\r\\n    function ownerOf(uint256 tokenId) public view virtual override(ERC721, IERC721) \\r\\n        blockIfChangingAddress \\r\\n        blockIfChangingToken(tokenId) \\r\\n        returns (address) \\r\\n    {\\r\\n        address addr = super.ownerOf(tokenId);\\r\\n        // checking on this address in the same block it's being modified\\r\\n        require(\\r\\n            isAdmin(_msgSender()) || lastWriteAddress[addr].blockNum < block.number, \\r\\n            \\\"Cannot interact in the current block\\\"\\r\\n        );\\r\\n        return addr;\\r\\n    }\\r\\n\\r\\n\\r\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\r\\n        require(\\r\\n            isAdmin(_msgSender()) || lastWriteToken[index+1].blockNum < block.number, \\r\\n            \\\"Cannot interact in the current block\\\"\\r\\n        );\\r\\n        return index + 1;\\r\\n    }\\r\\n\\r\\n\\r\\n    function approve(address to, uint256 tokenId) public virtual override(ERC721, IERC721) \\r\\n        blockIfChangingToken(tokenId) \\r\\n    {\\r\\n        super.approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getApproved(uint256 tokenId) public view virtual override(ERC721, IERC721) \\r\\n        blockIfChangingToken(tokenId) \\r\\n        returns (address) \\r\\n    {\\r\\n        return super.getApproved(tokenId);\\r\\n    }\\r\\n\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) \\r\\n        public virtual override(ERC721, IERC721) \\r\\n        blockIfChangingAddress \\r\\n    {\\r\\n        super.setApprovalForAll(operator, approved);\\r\\n    }\\r\\n\\r\\n\\r\\n    function isApprovedForAll(address owner, address operator) \\r\\n        public view virtual override(ERC721, IERC721) \\r\\n        blockIfChangingAddress \\r\\n        returns (bool) \\r\\n    {\\r\\n        return super.isApprovedForAll(owner, operator);\\r\\n    }\\r\\n    \\r\\n\\r\\n    function safeTransferFrom( address from, address to, uint256 tokenId) \\r\\n        public virtual override(ERC721, IERC721) \\r\\n        blockIfChangingToken(tokenId) \\r\\n    {\\r\\n        super.safeTransferFrom(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n\\r\\n    function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory _data)\\r\\n        public virtual override(ERC721, IERC721) \\r\\n        blockIfChangingToken(tokenId) \\r\\n    {\\r\\n        super.safeTransferFrom(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * allows owner to withdraw funds from minting\\r\\n     */\\r\\n    function _withdraw() external onlyTokenClaimer {\\r\\n        payable(_msgSender()).transfer(address(this).balance);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/pirate/utils/Accessable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n\\r\\ncontract Owned is Context {\\r\\n    address private _contractOwner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor() { \\r\\n        _contractOwner = payable(_msgSender()); \\r\\n    }\\r\\n\\r\\n    function owner() public view virtual returns(address) {\\r\\n        return _contractOwner;\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) external virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Owned: Address can not be 0x0\\\");\\r\\n        __transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _renounceOwnership() external virtual onlyOwner {\\r\\n        __transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function __transferOwnership(address _to) internal {\\r\\n        emit OwnershipTransferred(owner(), _to);\\r\\n        _contractOwner = _to;\\r\\n    }\\r\\n\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_msgSender() == _contractOwner, \\\"Owned: Only owner can operate\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ncontract Accessable is Owned {\\r\\n    mapping(address => bool) private _admins;\\r\\n    mapping(address => bool) private _tokenClaimers;\\r\\n\\r\\n    constructor() {\\r\\n        _admins[_msgSender()] = true;\\r\\n        _tokenClaimers[_msgSender()] = true;\\r\\n    }\\r\\n\\r\\n    function isAdmin(address user) public view returns(bool) {\\r\\n        return _admins[user];\\r\\n    }\\r\\n\\r\\n    function isTokenClaimer(address user) public view returns(bool) {\\r\\n        return _tokenClaimers[user];\\r\\n    }\\r\\n\\r\\n\\r\\n    function _setAdmin(address _user, bool _isAdmin) external onlyOwner {\\r\\n        _admins[_user] = _isAdmin;\\r\\n        require( _admins[owner()], \\\"Accessable: Contract owner must be an admin\\\" );\\r\\n    }\\r\\n\\r\\n    function _setTokenClaimer(address _user, bool _isTokenCalimer) external onlyOwner {\\r\\n        _tokenClaimers[_user] = _isTokenCalimer;\\r\\n        require( _tokenClaimers[owner()], \\\"Accessable: Contract owner must be an token claimer\\\" );\\r\\n    }\\r\\n\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(_admins[_msgSender()], \\\"Accessable: Only admin can operate\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyTokenClaimer() {\\r\\n        require(_tokenClaimers[_msgSender()], \\\"Accessable: Only Token Claimer can operate\\\");\\r\\n        _;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/pirate/interfaces/ITraits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE \\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ITraits {\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\"\r\n    },\r\n    \"/contracts/pirate/interfaces/IPnG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface IPnG is IERC721 {\\r\\n\\r\\n    struct GalleonPirate {\\r\\n        bool isGalleon;\\r\\n\\r\\n        // Galleon traits\\r\\n        uint8 base;\\r\\n        uint8 deck;\\r\\n        uint8 sails;\\r\\n        uint8 crowsNest;\\r\\n        uint8 decor;\\r\\n        uint8 flags;\\r\\n        uint8 bowsprit;\\r\\n\\r\\n        // Pirate traits\\r\\n        uint8 skin;\\r\\n        uint8 clothes;\\r\\n        uint8 hair;\\r\\n        uint8 earrings;\\r\\n        uint8 mouth;\\r\\n        uint8 eyes;\\r\\n        uint8 weapon;\\r\\n        uint8 hat;\\r\\n        uint8 alphaIndex;\\r\\n    }\\r\\n\\r\\n\\r\\n    function updateOriginAccess(uint16[] memory tokenIds) external;\\r\\n\\r\\n    function totalSupply() external view returns(uint256);\\r\\n\\r\\n    function mint(address recipient, uint256 seed) external;\\r\\n    function burn(uint256 tokenId) external;\\r\\n    function minted() external view returns (uint16);\\r\\n\\r\\n    function getMaxTokens() external view returns (uint256);\\r\\n    function getPaidTokens() external view returns (uint256);\\r\\n    function getTokenTraits(uint256 tokenId) external view returns (GalleonPirate memory);\\r\\n    function getTokenWriteBlock(uint256 tokenId) external view returns(uint64);\\r\\n    function isGalleon(uint256 tokenId) external view returns(bool);\\r\\n}\"\r\n    },\r\n    \"/contracts/pirate/interfaces/IFleet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE \\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IFleet {\\r\\n    function addManyToFleet(address account, uint16[] calldata tokenIds) external;\\r\\n    function randomPirateOwner(uint256 seed) external view returns (address);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"GalleonBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"GalleonMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"GalleonStolen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"PirateBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"PirateMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"PirateStolen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PAID_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAdmin\",\"type\":\"bool\"}],\"name\":\"_setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"_setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isTokenCalimer\",\"type\":\"bool\"}],\"name\":\"_setTokenClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_paidTokens\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_maxTokens\",\"type\":\"uint16\"}],\"name\":\"_setTokensAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"_transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"aliases\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"existingCombinations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fleet\",\"outputs\":[{\"internalType\":\"contract IFleet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaidTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenTraits\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isGalleon\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"base\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"deck\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sails\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"crowsNest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decor\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"flags\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bowsprit\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skin\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"clothes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hair\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"earrings\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mouth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"weapon\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hat\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"alphaIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct IPnG.GalleonPirate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenWriteBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isGalleon\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isTokenClaimer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rarities\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traits\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fleet\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"contract ITraits\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"updateOriginAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PnG","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000c350","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}