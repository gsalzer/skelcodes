{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/internal/auctionhouse/AuctionHouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title The Wizards DAO Auction House\\n\\n// LICENSE\\n// AuctionHouse.sol is a modified version of the Nouns's Auction house.\\n// https://github.com/nounsDAO/nouns-monorepo/blob/master/packages/nouns-contracts/contracts/NounsAuctionHouse.sol\\n//\\n// AuctionHouse.sol source code Copyright Zora licensed under the GPL-3.0 license.\\n// With modifications by Nounders DAO and Wizards DAO.\\n\\npragma solidity ^0.8.6;\\n\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAuctionHouse} from \\\"./IAuctionHouse.sol\\\";\\nimport {IWizardToken} from \\\"../IWizards.sol\\\";\\nimport {IWETH} from \\\"../IWETH.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\ncontract AuctionHouse is\\n    IAuctionHouse,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable\\n{\\n    using SafeMath for uint256;\\n\\n    // The address of the creators of WizardDAO\\n    address public creatorsDAO;\\n\\n    address public daoWallet;\\n\\n    uint256 public creatorFeePercent;\\n\\n    // The Wizards ERC721 token contract\\n    IWizardToken public wizards;\\n\\n    // The address of the WETH contract\\n    address public weth;\\n\\n    // The minimum amount of time left in an auction after a new bid is created\\n    uint256 public timeBuffer;\\n\\n    // The minimum price accepted in an auction\\n    uint256 public reservePrice;\\n\\n    // The minimum percentage difference between the last bid amount and the current bid\\n    uint8 public minBidIncrementPercentage;\\n\\n    // The duration of a single auction\\n    uint256 public duration;\\n\\n    // The maximum amount of wizards that can be minted.\\n    uint256 public wizardCap;\\n\\n    // we have reached the cap for total supply of wizards.\\n    bool public reachedCap;\\n\\n    // The last wizardId minted for an auction.\\n    uint256 public lastWizardId;\\n\\n    // The oneOfOneId to mint.\\n    uint48 public oneOfOneId;\\n\\n    // To include 1-1 wizards in the auction\\n    bool public auctionOneOfOne;\\n\\n    // RH:\\n    // Whitelist addresses\\n    mapping(uint256 => address) public whitelistAddrs;\\n\\n    // Number of addresses in the current whitelist\\n    uint256 public whitelistSize;\\n\\n    // The active auctions\\n    mapping(uint256 => IAuctionHouse.Auction) public auctions;\\n    uint8 public auctionCount;\\n\\n    /**\\n     * @notice Require that the sender is the creators DAO.\\n     */\\n    modifier onlyCreatorsDAO() {\\n        require(msg.sender == creatorsDAO, \\\"Sender is not the creators DAO\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize the auction house and base contracts,\\n     * populate configuration values, and pause the contract.\\n     * @dev This function can only be called once.\\n     */\\n    function initialize(\\n        IWizardToken _wizards,\\n        address _creatorsDAO,\\n        address _daoWallet,\\n        address _weth,\\n        uint256 _timeBuffer,\\n        uint256 _reservePrice,\\n        uint8 _minBidIncrementPercentage,\\n        uint256 _duration,\\n        bool _auctionOneOfOne,\\n        uint256 _wizardCap\\n    ) external initializer {\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n        __Ownable_init();\\n        _pause();\\n\\n        creatorsDAO = _creatorsDAO;\\n        daoWallet = _daoWallet;\\n\\n        // total of 5 wizards can be auctioned at a given time.\\n        auctionCount = 5;\\n        creatorFeePercent = 10;\\n\\n        auctionOneOfOne = _auctionOneOfOne;\\n        wizards = _wizards;\\n        weth = _weth;\\n        timeBuffer = _timeBuffer;\\n        reservePrice = _reservePrice;\\n        minBidIncrementPercentage = _minBidIncrementPercentage;\\n        duration = _duration;\\n        wizardCap = _wizardCap;\\n    }\\n\\n    /**\\n     * @notice Set the creators wallet address.\\n     * @dev Only callable by WizardsDAO.\\n     */\\n    function setCreatorsDAO(address _creatorsDAO)\\n        external\\n        override\\n        onlyCreatorsDAO\\n    {\\n        creatorsDAO = _creatorsDAO;\\n        emit CreatorsDAOUpdated(_creatorsDAO);\\n    }\\n\\n    /**\\n     * @notice Set the WizardsDAO wallet address.\\n     * @dev Only callable by owner.\\n     */\\n    function setDAOWallet(address _daoWallet) external override onlyOwner {\\n        daoWallet = _daoWallet;\\n        emit DAOWalletUpdated(_daoWallet);\\n    }\\n\\n    /**\\n     * @notice Settle all current auctions, mint new Wizards, and put them up for auction.\\n     */\\n    function settleCurrentAndCreateNewAuction()\\n        external\\n        override\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(lastWizardId < wizardCap, \\\"All wizards have been auctioned\\\");\\n\\n        // ensure all auctions have ended.\\n        for (uint256 i = 5; i >= 1; i--) {\\n            require(\\n                block.timestamp >= auctions[i].endTime,\\n                \\\"All auctions have not completed\\\"\\n            );\\n        }\\n\\n        // settle past auctions\\n        for (uint256 i = 1; i <= 5; i++) {\\n            _settleAuction(i);\\n        }\\n\\n        // RH:\\n        // refresh whitelist if whitelistDay\\n        if (auctions[1].isWhitelistDay) {\\n            _refreshWhitelist();\\n        }\\n\\n        // start 5 new auctions\\n        for (uint256 i = 1; i <= 5; i++) {\\n            if (lastWizardId <= wizardCap && !reachedCap) {\\n                _createAuction(i);\\n            }\\n        }\\n\\n        if ((lastWizardId == wizardCap) || reachedCap) {\\n            emit AuctionCapReached(wizardCap);\\n        }\\n    }\\n\\n    /**\\n     * @notice Settle the current auction.\\n     * @dev This function can only be called when the contract is paused.\\n     */\\n    function settleAuction(uint256 aId)\\n        external\\n        override\\n        whenPaused\\n        nonReentrant\\n    {\\n        _settleAuction(aId);\\n    }\\n\\n    /**\\n     * @notice Create a bid for a Wizard with a given amount.\\n     * @dev This contract only accepts payment in ETH.\\n     */\\n    function createBid(uint256 wizardId, uint256 aId)\\n        external\\n        payable\\n        override\\n        nonReentrant\\n    {\\n        IAuctionHouse.Auction memory _auction = auctions[aId];\\n\\n        require(\\n            (aId <= auctionCount) && (aId >= 1),\\n            \\\"Auction Id is not currently open\\\"\\n        );\\n        require(_auction.wizardId == wizardId, \\\"Wizard not up for auction\\\");\\n        require(block.timestamp < _auction.endTime, \\\"Auction expired\\\");\\n        require(msg.value >= reservePrice, \\\"Must send at least reservePrice\\\");\\n        require(\\n            msg.value >=\\n                _auction.amount +\\n                    ((_auction.amount * minBidIncrementPercentage) / 100),\\n            \\\"Must send more than last bid by minBidIncrementPercentage amount\\\"\\n        );\\n\\n        // RH:\\n        // ensure bidder is in whitelist\\n        if (_auction.isWhitelistDay) {\\n            bool bidderInWhitelist;\\n            for (uint256 i = 0; i < whitelistSize; i += 1) {\\n                if (whitelistAddrs[i] == msg.sender) {\\n                    bidderInWhitelist = true;\\n                    break;\\n                }\\n            }\\n            require(bidderInWhitelist, \\\"Bidder is not on whitelist\\\");\\n        }\\n\\n        address payable lastBidder = _auction.bidder;\\n\\n        // refund the last bidder, if applicable\\n        if (lastBidder != address(0)) {\\n            _safeTransferETHWithFallback(lastBidder, _auction.amount);\\n        }\\n\\n        auctions[aId].amount = msg.value;\\n        auctions[aId].bidder = payable(msg.sender);\\n\\n        // Extend the auction if the bid was received within `timeBuffer` of the auction end time\\n        bool extended = _auction.endTime - block.timestamp < timeBuffer;\\n        if (extended) {\\n            auctions[aId].endTime = _auction.endTime =\\n                block.timestamp +\\n                timeBuffer;\\n        }\\n\\n        emit AuctionBid(\\n            _auction.wizardId,\\n            aId,\\n            msg.sender,\\n            msg.value,\\n            extended\\n        );\\n\\n        if (extended) {\\n            emit AuctionExtended(_auction.wizardId, aId, _auction.endTime);\\n        }\\n    }\\n\\n    /**\\n     * @notice Pause the auction house.\\n     * @dev This function can only be called by the owner when the\\n     * contract is unpaused. While no new auctions can be started when paused,\\n     * anyone can settle an ongoing auction.\\n     */\\n    function pause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause the auction house.\\n     * @dev This function can only be called by the owner when the\\n     * contract is paused. If required, this function will start a new auction.\\n     */\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n\\n        for (uint256 i = 1; i <= 5; i++) {\\n            IAuctionHouse.Auction memory _a = auctions[i];\\n            if (_a.startTime == 0 || _a.settled) {\\n                if (lastWizardId <= wizardCap && !reachedCap) {\\n                    _createAuction(i);\\n                }\\n            }\\n        }\\n\\n        if ((lastWizardId == wizardCap) || reachedCap) {\\n            emit AuctionCapReached(wizardCap);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the auction time buffer.\\n     * @dev Only callable by the owner.\\n     */\\n    function setTimeBuffer(uint256 _timeBuffer) external override onlyOwner {\\n        timeBuffer = _timeBuffer;\\n\\n        emit AuctionTimeBufferUpdated(_timeBuffer);\\n    }\\n\\n    /**\\n     * @notice Set whether we should auction 1-1's.\\n     * @dev Only callable by the owner.\\n     */\\n    function setAuctionOneOfOne(bool _auctionOneOfOne)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        auctionOneOfOne = _auctionOneOfOne;\\n\\n        emit AuctionOneOfOne(_auctionOneOfOne);\\n    }\\n\\n    /**\\n     * @notice Set the auction reserve price.\\n     * @dev Only callable by the owner.\\n     */\\n    function setReservePrice(uint256 _reservePrice)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        reservePrice = _reservePrice;\\n\\n        emit AuctionReservePriceUpdated(_reservePrice);\\n    }\\n\\n    /**\\n     * @notice Set the max number of wizards that can be auctioned off.\\n     * @dev Only callable by the owner.\\n     */\\n    function setWizardCap(uint256 _cap) external override onlyOwner {\\n        wizardCap = _cap;\\n        emit AuctionCapUpdated(_cap);\\n    }\\n\\n    /**\\n     * @notice Set the auction minimum bid increment percentage.\\n     * @dev Only callable by the owner.\\n     */\\n    function setMinBidIncrementPercentage(uint8 _minBidIncrementPercentage)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        minBidIncrementPercentage = _minBidIncrementPercentage;\\n\\n        emit AuctionMinBidIncrementPercentageUpdated(\\n            _minBidIncrementPercentage\\n        );\\n    }\\n\\n    /**\\n     * @notice Set oneOfOneId to mint for the next auction.\\n     * @dev Only callable by the owner.\\n     */\\n    function setOneOfOneId(uint48 _oneOfOneId) external override onlyOwner {\\n        oneOfOneId = _oneOfOneId;\\n    }\\n\\n    // RH:\\n    /**\\n     * @notice Set whitelist addresses for the next whitelist day\\n     * @dev Only callable by the owner.\\n     */\\n    function setWhitelistAddresses(address[] calldata _whitelistAddrs)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < _whitelistAddrs.length; i += 1) {\\n            whitelistAddrs[i] = _whitelistAddrs[i];\\n        }\\n        whitelistSize = _whitelistAddrs.length;\\n    }\\n\\n    // RH:\\n    /**\\n     * @notice Remove whitelist restriction for any reason, but keep auction going\\n     * @dev Only callable by the owner.\\n     */\\n    function stopWhitelistDay() external override onlyOwner {\\n        whitelistSize = 0;\\n        for (uint256 i = 1; i <= 5; i += 1) {\\n            auctions[i].isWhitelistDay = false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Create an auction.\\n     * @dev Store the auction details in the `auction` state variable and emit an AuctionCreated event.\\n     * If the mint reverts, the minter was updated without pausing this contract first. To remedy this,\\n     * catch the revert and pause this contract.\\n     */\\n    function _createAuction(uint256 aId) internal {\\n        // every 5th auction is a 1-1 if 1-1 minting is enabled.\\n        if (aId % 5 == 0 && auctionOneOfOne) {\\n            try wizards.mintOneOfOne(oneOfOneId) returns (\\n                uint256 wizardId,\\n                bool isOneOfOne\\n            ) {\\n                lastWizardId = wizardId;\\n                uint256 startTime = block.timestamp;\\n                uint256 endTime = startTime + duration;\\n                bool isWhitelistDay = whitelistSize > 0;\\n\\n                // RH:\\n                auctions[aId] = Auction({\\n                    wizardId: wizardId,\\n                    amount: 0,\\n                    startTime: startTime,\\n                    endTime: endTime,\\n                    bidder: payable(0),\\n                    settled: false,\\n                    isWhitelistDay: isWhitelistDay\\n                });\\n\\n                // RH:\\n                emit AuctionCreated(\\n                    wizardId,\\n                    aId,\\n                    startTime,\\n                    endTime,\\n                    isOneOfOne,\\n                    isWhitelistDay\\n                );\\n            } catch Error(string memory reason) {\\n                if (\\n                    keccak256(abi.encodePacked(reason)) !=\\n                    keccak256(abi.encodePacked(\\\"All wizards have been minted\\\"))\\n                ) {\\n                    // if we have issues minting a 1-1 we should mint a regular wiz\\n                    // and disable 1-1 minting.\\n                    _mintGeneratedWizard(aId);\\n                    auctionOneOfOne = false;\\n                } else {\\n                    reachedCap = true;\\n                    _pause();\\n                }\\n            }\\n\\n            return;\\n        }\\n\\n        _mintGeneratedWizard(aId);\\n    }\\n\\n    /**\\n     * @notice Mint a generated wizard.\\n     */\\n    function _mintGeneratedWizard(uint256 aId) internal {\\n        try wizards.mint() returns (uint256 wizardId) {\\n            lastWizardId = wizardId;\\n            uint256 startTime = block.timestamp;\\n            uint256 endTime = startTime + duration;\\n            bool isWhitelistDay = whitelistSize > 0;\\n\\n            // RH:\\n            auctions[aId] = Auction({\\n                wizardId: wizardId,\\n                amount: 0,\\n                startTime: startTime,\\n                endTime: endTime,\\n                bidder: payable(0),\\n                settled: false,\\n                isWhitelistDay: isWhitelistDay\\n            });\\n\\n            emit AuctionCreated(\\n                wizardId,\\n                aId,\\n                startTime,\\n                endTime,\\n                false,\\n                isWhitelistDay\\n            );\\n        } catch Error(string memory reason) {\\n            if (\\n                keccak256(abi.encodePacked(reason)) !=\\n                keccak256(abi.encodePacked(\\\"All wizards have been minted\\\"))\\n            ) {\\n                _pause();\\n            } else {\\n                reachedCap = true;\\n                _pause();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Settle an auction, finalizing the bid and paying out to the owner.\\n     * @dev If there are no bids, the Wizard is burned.\\n     */\\n    function _settleAuction(uint256 aId) internal {\\n        IAuctionHouse.Auction memory _auction = auctions[aId];\\n\\n        require(_auction.startTime != 0, \\\"Auction hasn't begun\\\");\\n        require(!_auction.settled, \\\"Auction has already been settled\\\");\\n        require(\\n            block.timestamp >= _auction.endTime,\\n            \\\"Auction hasn't completed\\\"\\n        );\\n\\n        auctions[aId].settled = true;\\n\\n        if (_auction.bidder == address(0)) {\\n            wizards.burn(_auction.wizardId);\\n        } else {\\n            wizards.transferFrom(\\n                address(this),\\n                _auction.bidder,\\n                _auction.wizardId\\n            );\\n        }\\n\\n        if (_auction.amount > 0) {\\n            uint256 amount = _auction.amount;\\n            uint256 creatorsShare = amount.mul(creatorFeePercent).div(100);\\n\\n            _safeTransferETHWithFallback(creatorsDAO, creatorsShare);\\n\\n            uint256 daoShare = amount.sub(creatorsShare);\\n            _safeTransferETHWithFallback(daoWallet, daoShare);\\n        }\\n\\n        emit AuctionSettled(\\n            _auction.wizardId,\\n            aId,\\n            _auction.bidder,\\n            _auction.amount\\n        );\\n    }\\n\\n    // RH:\\n    /**\\n     * @notice set whitelistSize to 0 after whitelist day\\n     */\\n    function _refreshWhitelist() internal {\\n        whitelistSize = 0;\\n    }\\n\\n    /**\\n     * @notice Transfer ETH. If the ETH transfer fails, wrap the ETH and try send it as WETH.\\n     */\\n    function _safeTransferETHWithFallback(address to, uint256 amount) internal {\\n        if (!_safeTransferETH(to, amount)) {\\n            IWETH(weth).deposit{value: amount}();\\n            IERC20(weth).transfer(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer ETH and return the success status.\\n     * @dev This function only forwards 30,000 gas to the callee.\\n     */\\n    function _safeTransferETH(address to, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        (bool success, ) = to.call{value: value, gas: 30_000}(new bytes(0));\\n        return success;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/internal/auctionhouse/IAuctionHouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for Wizard Auction Houses\\n\\npragma solidity ^0.8.6;\\n\\n// RH:\\ninterface IAuctionHouse {\\n    struct Auction {\\n        // ID for the Wizard (ERC721 token ID)\\n        uint256 wizardId;\\n        // The current highest bid amount\\n        uint256 amount;\\n        // The time that the auction started\\n        uint256 startTime;\\n        // The time that the auction is scheduled to end\\n        uint256 endTime;\\n        // The address of the current highest bid\\n        address payable bidder;\\n        // Whether or not the auction has been settled\\n        bool settled;\\n        // Whether or not it's a whitelist day\\n        bool isWhitelistDay;\\n    }\\n\\n    // RH: updated event\\n    event AuctionCreated(\\n        uint256 indexed wizardId,\\n        uint256 indexed aId,\\n        uint256 startTime,\\n        uint256 endTime,\\n        bool oneOfOne,\\n        bool isWhitelistDay\\n    );\\n\\n    event AuctionCapUpdated(uint256 indexed cap);\\n\\n    event AuctionCapReached(uint256 indexed cap);\\n\\n    event AuctionBid(\\n        uint256 indexed wizardId,\\n        uint256 indexed aId,\\n        address sender,\\n        uint256 value,\\n        bool extended\\n    );\\n\\n    event AuctionExtended(\\n        uint256 indexed wizardId,\\n        uint256 indexed aId,\\n        uint256 endTime\\n    );\\n\\n    event AuctionSettled(\\n        uint256 indexed wizardId,\\n        uint256 indexed aId,\\n        address winner,\\n        uint256 amount\\n    );\\n\\n    event AuctionTimeBufferUpdated(uint256 timeBuffer);\\n\\n    event AuctionOneOfOne(bool auctionOneOfOne);\\n\\n    event AuctionReservePriceUpdated(uint256 reservePrice);\\n\\n    event AuctionMinBidIncrementPercentageUpdated(\\n        uint256 minBidIncrementPercentage\\n    );\\n\\n    event CreatorsDAOUpdated(address creatorsDAO);\\n\\n    event DAOWalletUpdated(address daoWallet);\\n\\n    function settleAuction(uint256 aId) external;\\n\\n    function settleCurrentAndCreateNewAuction() external;\\n\\n    function createBid(uint256 wizardId, uint256 aid) external payable;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function setAuctionOneOfOne(bool auctionOneOfOne) external;\\n\\n    function setCreatorsDAO(address creatorsDAO) external;\\n\\n    function setDAOWallet(address daoWallet) external;\\n\\n    function setWizardCap(uint256 _cap) external;\\n\\n    function setTimeBuffer(uint256 timeBuffer) external;\\n\\n    function setOneOfOneId(uint48 _oneOfOneId) external;\\n\\n    function setReservePrice(uint256 reservePrice) external;\\n\\n    // RH:\\n    function setWhitelistAddresses(address[] calldata _whitelistAddrs) external;\\n\\n    function stopWhitelistDay() external;\\n\\n    function setMinBidIncrementPercentage(uint8 minBidIncrementPercentage)\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/internal/IWizards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Wizards ERC-721 token\\n\\npragma solidity ^0.8.6;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {ISeeder} from \\\"./seeder/ISeeder.sol\\\";\\nimport {IDescriptor} from \\\"./descriptor/IDescriptor.sol\\\";\\n\\ninterface IWizardToken is IERC721 {\\n    event SupplyUpdated(uint256 indexed supply);\\n\\n    event WizardCreated(uint256 indexed tokenId, ISeeder.Seed seed);\\n\\n    event WizardBurned(uint256 indexed tokenId);\\n\\n    event CreatorsDAOUpdated(address creatorsDAO);\\n\\n    event MinterUpdated(address minter);\\n\\n    event MinterLocked();\\n\\n    event DescriptorUpdated(IDescriptor descriptor);\\n\\n    event DescriptorLocked();\\n\\n    event SeederUpdated(ISeeder seeder);\\n\\n    event SeederLocked();\\n\\n    function mint() external returns (uint256);\\n\\n    function mintOneOfOne(uint48 oneOfOneId) external returns (uint256, bool);\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function dataURI(uint256 tokenId) external returns (string memory);\\n\\n    function setCreatorsDAO(address creatorsDAO) external;\\n\\n    function setMinter(address minter) external;\\n\\n    function lockMinter() external;\\n\\n    function setDescriptor(IDescriptor descriptor) external;\\n\\n    function lockDescriptor() external;\\n\\n    function setSeeder(ISeeder seeder) external;\\n\\n    function lockSeeder() external;\\n\\n    function setSupply(uint256 supply) external;\\n}\\n\"\r\n    },\r\n    \"contracts/internal/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.6;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/internal/seeder/ISeeder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for Seeder\\n\\npragma solidity ^0.8.6;\\n\\nimport { IDescriptor } from '../descriptor/IDescriptor.sol';\\n\\n// \\\"Skin\\\", \\\"Cloth\\\", \\\"Eye\\\", \\\"Mouth\\\", \\\"Acc\\\", \\\"Item\\\", \\\"Hat\\\"\\ninterface ISeeder {\\n    struct Seed {\\n        uint48 background;\\n        uint48 skin;\\n        uint48 clothes;\\n        uint48 eyes;\\n        uint48 mouth;\\n        uint48 accessory;\\n        uint48 bgItem;\\n        uint48 hat;\\n        bool oneOfOne;\\n        uint48 oneOfOneIndex;\\n    }\\n\\n    function generateSeed(uint256 wizardId, IDescriptor descriptor, bool isOneOfOne, uint48 isOneOfOneIndex) external view returns (Seed memory);\\n}\\n\"\r\n    },\r\n    \"contracts/internal/descriptor/IDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title Interface for Descriptor\\n\\npragma solidity ^0.8.6;\\n\\nimport { ISeeder } from '../seeder/ISeeder.sol';\\n\\ninterface IDescriptor {\\n    event PartsLocked();\\n\\n    event DataURIToggled(bool enabled);\\n\\n    event BaseURIUpdated(string baseURI);\\n\\n    function arePartsLocked() external returns (bool);\\n\\n    function isDataURIEnabled() external returns (bool);    \\n\\n    function baseURI() external returns (string memory);\\n\\n    function palettes(uint8 paletteIndex, uint256 colorIndex) external view returns (string memory);\\n\\n    function addManyColorsToPalette(uint8 paletteIndex, string[] calldata newColors) external;\\n\\n    function addColorToPalette(uint8 paletteIndex, string calldata color) external;\\n\\n\\n    function backgrounds(uint256 index) external view returns (string memory);    \\n\\n    function backgroundCount() external view returns (uint256);\\n\\n    function addManyBackgrounds(string[] calldata backgrounds) external;\\n\\n    function addBackground(string calldata background) external;    \\n\\n    \\n    \\n    function oneOfOnes(uint256 index) external view returns (bytes memory);\\n\\n    function oneOfOnesCount() external view returns (uint256);\\n\\n    function addOneOfOne(bytes calldata _oneOfOne) external;\\n\\n    function addManyOneOfOnes(bytes[] calldata _oneOfOnes) external;    \\n\\n\\n    function skins(uint256 index) external view returns (bytes memory);\\n\\n    function skinsCount() external view returns (uint256);\\n\\n    function addManySkins(bytes[] calldata skins) external;\\n\\n    function addSkin(bytes calldata skin) external;\\n\\n\\n    function hats(uint256 index) external view returns (bytes memory);\\n\\n    function hatsCount() external view returns (uint256);\\n\\n    function addManyHats(bytes[] calldata hats) external;\\n\\n    function addHat(bytes calldata hat) external;\\n\\n    \\n    function clothes(uint256 index) external view returns (bytes memory);\\n\\n    function clothesCount() external view returns (uint256);\\n\\n    function addManyClothes(bytes[] calldata ears) external;\\n\\n    function addClothes(bytes calldata ear) external;\\n\\n\\n    function mouths(uint256 index) external view returns (bytes memory);\\n\\n    function mouthsCount() external view returns (uint256);\\n\\n    function addManyMouths(bytes[] calldata mouths) external;\\n\\n    function addMouth(bytes calldata mouth) external;\\n\\n    \\n    function eyes(uint256 index) external view returns (bytes memory);\\n\\n    function eyesCount() external view returns (uint256);\\n\\n    function addManyEyes(bytes[] calldata eyes) external;\\n\\n    function addEyes(bytes calldata eye) external;\\n\\n\\n    function accessory(uint256 index) external view returns (bytes memory);\\n\\n    function accessoryCount() external view returns (uint256);\\n\\n    function addManyAccessories(bytes[] calldata noses) external;\\n\\n    function addAccessory(bytes calldata nose) external;\\n\\n\\n    function bgItems(uint256 index) external view returns (bytes memory);\\n\\n    function bgItemsCount() external view returns (uint256);\\n\\n    function addManyBgItems(bytes[] calldata noses) external;\\n\\n    function addBgItem(bytes calldata nose) external;\\n\\n\\n    function lockParts() external;\\n\\n    function toggleDataURIEnabled() external;\\n\\n    function setBaseURI(string calldata baseURI) external;\\n\\n    function tokenURI(uint256 tokenId, ISeeder.Seed memory seed) external view returns (string memory);\\n\\n    function dataURI(uint256 tokenId, ISeeder.Seed memory seed) external view returns (string memory);\\n\\n    function genericDataURI(\\n        string calldata name,\\n        string calldata description,\\n        ISeeder.Seed memory seed\\n    ) external view returns (string memory);\\n\\n    function generateSVGImage(ISeeder.Seed memory seed) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"extended\",\"type\":\"bool\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"AuctionCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"AuctionCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oneOfOne\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelistDay\",\"type\":\"bool\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"AuctionExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBidIncrementPercentage\",\"type\":\"uint256\"}],\"name\":\"AuctionMinBidIncrementPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"auctionOneOfOne\",\"type\":\"bool\"}],\"name\":\"AuctionOneOfOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"name\":\"AuctionReservePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"aId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeBuffer\",\"type\":\"uint256\"}],\"name\":\"AuctionTimeBufferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creatorsDAO\",\"type\":\"address\"}],\"name\":\"CreatorsDAOUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"daoWallet\",\"type\":\"address\"}],\"name\":\"DAOWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auctionCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionOneOfOne\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isWhitelistDay\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aId\",\"type\":\"uint256\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorsDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWizardToken\",\"name\":\"_wizards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creatorsDAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daoWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_minBidIncrementPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_auctionOneOfOne\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_wizardCap\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWizardId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncrementPercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneOfOneId\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reachedCap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_auctionOneOfOne\",\"type\":\"bool\"}],\"name\":\"setAuctionOneOfOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creatorsDAO\",\"type\":\"address\"}],\"name\":\"setCreatorsDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoWallet\",\"type\":\"address\"}],\"name\":\"setDAOWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_minBidIncrementPercentage\",\"type\":\"uint8\"}],\"name\":\"setMinBidIncrementPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_oneOfOneId\",\"type\":\"uint48\"}],\"name\":\"setOneOfOneId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"}],\"name\":\"setReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeBuffer\",\"type\":\"uint256\"}],\"name\":\"setTimeBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelistAddrs\",\"type\":\"address[]\"}],\"name\":\"setWhitelistAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setWizardCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aId\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleCurrentAndCreateNewAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopWhitelistDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wizardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wizards\",\"outputs\":[{\"internalType\":\"contract IWizardToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AuctionHouse","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}