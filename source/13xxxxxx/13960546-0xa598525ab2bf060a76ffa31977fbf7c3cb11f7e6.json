{"status":"1","message":"OK","result":[{"SourceCode":"//// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/IRocketDrop.sol\r\n\r\n\r\npragma solidity ^0.8.10;\r\n// pragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IRocketDrop {\r\n     struct UserInfo {\r\n        uint256 amount;     // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        uint256 depositStamp;\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken;             // Address of LP token contract.\r\n        uint256 lastRewardBlock;    // Last block number that ERC20s distribution occurs.\r\n        uint256 accERC20PerShare;   // Accumulated ERC20s per share, times 1e36.\r\n        IERC20 rewardToken;         // pool specific reward token.\r\n        uint256 startBlock;         // pool specific block number when rewards start\r\n        uint256 endBlock;           // pool specific block number when rewards end\r\n        uint256 rewardPerBlock;     // pool specific reward per block\r\n        uint256 paidOut;            // total paid out by pool\r\n        uint256 tokensStaked;       // allows the same token to be staked across different pools\r\n        uint256 gasAmount;          // eth fee charged on deposits and withdrawals (per pool)\r\n        uint256 minStake;           // minimum tokens allowed to be staked\r\n        uint256 maxStake;           // max tokens allowed to be staked\r\n        address payable partnerTreasury;    // allows eth fee to be split with a partner on transfer\r\n        uint256 partnerPercent;     // eth fee percent of partner split, 2 decimals (ie 10000 = 100.00%, 1002 = 10.02%)\r\n    }\r\n\r\n    // extra parameters for pools; optional\r\n    struct PoolExtras {\r\n        uint256 totalStakers;\r\n        uint256 maxStakers;\r\n        uint256 lpTokenFee;         // divide by 1000 ie 150 is 1.5%\r\n        uint256 lockPeriod;         // time in blocks needed before withdrawal\r\n        IERC20 accessToken;\r\n        uint256 accessTokenMin;\r\n        bool accessTokenRequired;\r\n    }\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) external payable;\r\n    function withdraw(uint256 _pid, uint256 _amount) external payable;\r\n    function updatePool(uint256 _pid) external;\r\n    function pending(uint256 _pid, address _user) external view returns (uint256);\r\n    function rewardPerBlock(uint) external view returns (uint);\r\n    function poolExtras(uint) external returns (PoolExtras memory);\r\n    function userInfo(address) external returns (UserInfo memory);\r\n    //mapping (uint256 => mapping (address => UserInfo)) public userInfo;\r\n}\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/StakeManager.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\n//import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n\r\ncontract RBXStakeManager is Ownable {\r\n    IERC20 public rbxs;\r\n    IRocketDrop public rocketDrop;\r\n\r\n    struct PoolInfo {\r\n        uint poolID;\r\n        uint collected;\r\n        uint distributed;\r\n        uint amount;\r\n        uint accounts;\r\n        uint lastUpdateBlock;\r\n        uint accruedValuePerShare;\r\n        uint rewardPerBlock;\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint amount;\r\n        uint distroDebt;\r\n    }\r\n\r\n    PoolInfo public poolInfo;\r\n\r\n    mapping(address => UserInfo) public userInfo;\r\n    //mapping()\r\n\r\n    constructor(address _rocketDrop, address _rbxs){\r\n        rocketDrop = IRocketDrop(_rocketDrop);\r\n        rbxs = IERC20(_rbxs);\r\n    }\r\n\r\n    function createAllotment(address account, uint amount) public onlyOwner {\r\n        UserInfo storage allotment = userInfo[account];\r\n        require(allotment.amount == 0, \"Allotment already established\");\r\n        \r\n        uint bal0 = rbxs.balanceOf(address(this));\r\n        rbxs.transferFrom(msg.sender, address(this), amount);\r\n        rbxs.approve(address(rocketDrop),amount);\r\n        rocketDrop.deposit(poolInfo.poolID, amount);\r\n        poolInfo.amount += amount;\r\n        uint newYield = rbxs.balanceOf(address(this)) - bal0;\r\n\r\n        poolInfo.collected += newYield;\r\n        poolInfo.accruedValuePerShare += newYield * 1e18 / poolInfo.amount;\r\n\r\n        allotment.amount = amount;\r\n        allotment.distroDebt = amount * poolInfo.accruedValuePerShare / 1e18;\r\n\r\n        poolInfo.accounts += 1;\r\n    }\r\n\r\n    function transferAllotment(address account0, address account1, bool withClaim) public onlyOwner {\r\n        UserInfo storage allotment0 = userInfo[account0];\r\n        UserInfo storage allotment1 = userInfo[account1];\r\n        require(allotment0.amount > 0, \"Allotment does not exist\");\r\n        \r\n        if(withClaim)\r\n            internalClaim(account0);\r\n\r\n        allotment1.amount += allotment0.amount;\r\n        allotment1.distroDebt += allotment0.distroDebt;\r\n\r\n        allotment0.amount = 0;\r\n        allotment0.distroDebt = 0;\r\n    }\r\n\r\n    function discardAllotment(address account, bool withClaim) public onlyOwner {\r\n        UserInfo storage allotment = userInfo[account];\r\n        require(allotment.amount > 0, \"Allotment does not exist\");\r\n        \r\n        if(withClaim)\r\n            internalClaim(account);\r\n        \r\n        poolInfo.amount -= allotment.amount;\r\n        poolInfo.accounts -= 1;\r\n\r\n        allotment.amount = 0;\r\n        allotment.distroDebt = 0;\r\n\r\n\r\n        rocketDrop.withdraw(poolInfo.poolID, allotment.amount);\r\n        rbxs.transfer(msg.sender, rbxs.balanceOf(address(this)));\r\n    }\r\n\r\n    function batchCreate(address[] memory accounts, uint[] memory amounts) public onlyOwner {\r\n        uint totalAmount;\r\n\r\n        for (uint256 i = 0; i < amounts.length; i++) {\r\n            totalAmount += amounts[i];\r\n        }\r\n\r\n        if(poolInfo.amount > 0){\r\n            collectPoolYield();\r\n        }\r\n\r\n        rbxs.transferFrom(msg.sender, address(this), totalAmount);\r\n        rbxs.approve(address(rocketDrop),totalAmount);\r\n        rocketDrop.deposit(poolInfo.poolID, totalAmount);\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            require(userInfo[accounts[i]].amount == 0, \"Allotment already exists\");\r\n            userInfo[accounts[i]].amount = amounts[i];\r\n            userInfo[accounts[i]].distroDebt = amounts[i] * poolInfo.accruedValuePerShare / 1e18;\r\n            poolInfo.accounts += 1;\r\n            poolInfo.amount += userInfo[accounts[i]].amount;\r\n        }   \r\n    }\r\n\r\n    function batchDiscard(address[] memory accounts, uint[] memory amounts) public onlyOwner {\r\n        uint totalAmount;\r\n\r\n        for (uint256 i = 0; i < amounts.length; i++) {\r\n            totalAmount += userInfo[accounts[i]].amount;\r\n        }\r\n\r\n        uint bal0 = rbxs.balanceOf(address(this));\r\n\r\n        rocketDrop.withdraw(poolInfo.poolID, totalAmount);\r\n        rbxs.transfer(msg.sender, totalAmount);\r\n\r\n        uint newYield = rbxs.balanceOf(address(this)) - bal0;\r\n\r\n        poolInfo.collected += newYield;\r\n        poolInfo.accruedValuePerShare += newYield * 1e18 / poolInfo.amount;\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            poolInfo.amount -= userInfo[accounts[i]].amount;\r\n            poolInfo.accounts -= 1;\r\n            userInfo[accounts[i]].amount = 0;\r\n            userInfo[accounts[i]].distroDebt = 0;\r\n        }   \r\n    }\r\n\r\n\r\n    function pendingCurrent(address _account) public view returns (uint){\r\n        UserInfo memory account = userInfo[_account];\r\n        uint valuePerShare = poolInfo.accruedValuePerShare;\r\n\r\n        return account.amount * valuePerShare / 1e18 - account.distroDebt;\r\n    }\r\n\r\n\r\n    function pending(address _account) public view returns (uint){\r\n        uint pendingAmount = rocketDrop.pending(poolInfo.poolID, address(this));\r\n        uint valuePerShare = poolInfo.accruedValuePerShare + (pendingAmount * 1e18 / poolInfo.amount);\r\n\r\n        UserInfo memory account = userInfo[_account];\r\n\r\n        return account.amount * valuePerShare / 1e18 - account.distroDebt;\r\n    }\r\n\r\n    function accountAllotment(address account) public view returns (uint){\r\n        return userInfo[account].amount;\r\n    }\r\n\r\n    function uncollectedYield() public view returns (uint){\r\n        return rocketDrop.pending(poolInfo.poolID, address(this));\r\n    }\r\n\r\n    function collectPoolYield() public {\r\n        if(poolInfo.amount == 0){\r\n            return;\r\n        }\r\n\r\n        uint bal0 = rbxs.balanceOf(address(this));\r\n\r\n        rocketDrop.withdraw(poolInfo.poolID, 0);\r\n        uint newYield = rbxs.balanceOf(address(this)) - bal0;\r\n        poolInfo.collected += newYield;\r\n        poolInfo.accruedValuePerShare += newYield * 1e18 / poolInfo.amount;\r\n\r\n    }\r\n\r\n    function claimAccountYield() public {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        collectPoolYield();\r\n\r\n        uint pendingAmount = pendingCurrent(msg.sender);\r\n\r\n        if(pendingAmount > 0){\r\n            user.distroDebt += pendingAmount;\r\n            distribute(msg.sender, pendingAmount);\r\n        }  \r\n    }\r\n\r\n    function internalClaim(address account) internal {\r\n        UserInfo storage user = userInfo[account];\r\n        collectPoolYield();\r\n\r\n        uint pendingAmount = pendingCurrent(account);\r\n\r\n        if(pendingAmount > 0){\r\n            user.distroDebt += pendingAmount;\r\n            distribute(account, pendingAmount);\r\n        }  \r\n    }\r\n\r\n    function distribute(address to, uint amount) internal {\r\n        rbxs.transfer(to, amount);\r\n        poolInfo.distributed += amount;\r\n    }\r\n    \r\n    // used for pool access on rocketDrop\r\n    function balanceOf(address account) external view returns (uint){\r\n        return account == address(this) ? 1 : 0;\r\n    }\r\n\r\n    // admin functions\r\n    \r\n    function setPID(uint _pid) public onlyOwner {\r\n        poolInfo.poolID = _pid;\r\n    }\r\n\r\n    function adjustBlockReward(uint256 _rewardPerBlock) public onlyOwner {\r\n        poolInfo.rewardPerBlock = _rewardPerBlock;\r\n    }\r\n\r\n    function adjustRocketDrop(address _rocketDrop) public onlyOwner {\r\n        rocketDrop = IRocketDrop(_rocketDrop);\r\n    }\r\n\r\n    function adjustRBXS(address _rbxs) public onlyOwner {\r\n        rbxs = IERC20(_rbxs);\r\n    }\r\n\r\n    function adjustVPS(uint256 _accruedValuePerShare) public onlyOwner {\r\n        poolInfo.accruedValuePerShare = _accruedValuePerShare;\r\n    }\r\n\r\n    function tokenRescue(address _recipient, address _ERC20address, uint256 _amount) public onlyOwner {\r\n        IERC20(_ERC20address).transfer(_recipient, _amount);\r\n    }\r\n\r\n    function rescueNative(address payable _recipient) public onlyOwner {\r\n        _recipient.transfer(address(this).balance);\r\n    }\r\n\r\n    function adjustUser(address _user, uint _amount, uint _distroDebt) public onlyOwner {\r\n        userInfo[_user].amount = _amount;\r\n        userInfo[_user].distroDebt = _distroDebt;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rocketDrop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rbxs\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountAllotment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"adjustBlockReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rbxs\",\"type\":\"address\"}],\"name\":\"adjustRBXS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rocketDrop\",\"type\":\"address\"}],\"name\":\"adjustRocketDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_distroDebt\",\"type\":\"uint256\"}],\"name\":\"adjustUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_accruedValuePerShare\",\"type\":\"uint256\"}],\"name\":\"adjustVPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchCreate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchDiscard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAccountYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectPoolYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createAllotment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"withClaim\",\"type\":\"bool\"}],\"name\":\"discardAllotment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedValuePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rbxs\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rocketDrop\",\"outputs\":[{\"internalType\":\"contract IRocketDrop\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"setPID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ERC20address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tokenRescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account1\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"withClaim\",\"type\":\"bool\"}],\"name\":\"transferAllotment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uncollectedYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distroDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RBXStakeManager","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000050b641caab809c1853be334246ac951faccc49b0000000000000000000000000a9639160481b625ba43677be753e0a70bf58c647","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7f9cbe347c93989db06baf32ba48e5c76993aa92bf0b3591c5719e0bb29574da"}]}