{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance \\u003e= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance \\u003e= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"ComposableTopDown.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC998ERC721BottomUp.sol\\\";\\nimport \\\"./IERC998ERC721TopDown.sol\\\";\\nimport \\\"./IERC998ERC721TopDownEnumerable.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Strings.sol\\\";\\nimport \\\"./EnumerableSet.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\n\\ncontract ComposableTopDown is\\n    ERC165,\\n    IERC721,\\n    IERC998ERC721TopDown,\\n    IERC998ERC721TopDownEnumerable,\\n    IERC721Metadata\\n{\\n    using Address for address;\\n    using Strings for uint256;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    // return this.rootOwnerOf.selector ^ this.rootOwnerOfChild.selector ^\\n    //   this.tokenOwnerOf.selector ^ this.ownerOfChild.selector;\\n    bytes4 constant ERC998_MAGIC_VALUE = 0xcd740db5;\\n    bytes32 constant ERC998_MAGIC_VALUE_32 =\\n        0xcd740db500000000000000000000000000000000000000000000000000000000;\\n\\n    uint256 tokenCount = 0;\\n\\n    // tokenId =\\u003e token owner\\n    mapping(uint256 =\\u003e address) private tokenIdToTokenOwner;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping(address =\\u003e EnumerableSet.UintSet) private _holderTokens;\\n\\n    // tokenId =\\u003e last state hash indicator\\n    mapping(uint256 =\\u003e uint256) private tokenIdToStateHash;\\n\\n    // root token owner address =\\u003e (tokenId =\\u003e approved address)\\n    mapping(address =\\u003e mapping(uint256 =\\u003e address))\\n        private rootOwnerAndTokenIdToApprovedAddress;\\n\\n    // token owner address =\\u003e token count\\n    mapping(address =\\u003e uint256) private tokenOwnerToTokenCount;\\n\\n    // token owner =\\u003e (operator address =\\u003e bool)\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private tokenOwnerToOperators;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function _safeMint(address _to) internal virtual returns (uint256) {\\n        require(_to != address(0), \\\"CTD: _to zero addr\\\");\\n        tokenCount++;\\n        uint256 tokenCount_ = tokenCount;\\n        tokenIdToTokenOwner[tokenCount_] = _to;\\n        _holderTokens[_to].add(tokenCount_);\\n        tokenOwnerToTokenCount[_to]++;\\n        tokenIdToStateHash[tokenCount] = uint256(\\n            keccak256(\\n                abi.encodePacked(uint256(uint160(address(this))), tokenCount)\\n            )\\n        );\\n\\n        require(\\n            _checkOnERC721Received(address(0), _to, tokenCount_, \\\"\\\"),\\n            \\\"CTD: transfer to non ERC721Receiver\\\"\\n        );\\n        emit Transfer(address(0), _to, tokenCount_);\\n        return tokenCount_;\\n    }\\n\\n    //from zepellin ERC721Receiver.sol\\n    //old version\\n    bytes4 constant ERC721_RECEIVED_OLD = 0xf0b9e5ba;\\n    //new version\\n    bytes4 constant ERC721_RECEIVED_NEW = 0x150b7a02;\\n\\n    bytes4 constant ALLOWANCE = bytes4(keccak256(\\\"allowance(address,address)\\\"));\\n    bytes4 constant APPROVE = bytes4(keccak256(\\\"approve(address,uint256)\\\"));\\n    bytes4 constant ROOT_OWNER_OF_CHILD =\\n        bytes4(keccak256(\\\"rootOwnerOfChild(address,uint256)\\\"));\\n\\n    ////////////////////////////////////////////////////////\\n    // ERC721 implementation\\n    ////////////////////////////////////////////////////////\\n    function rootOwnerOf(uint256 _tokenId)\\n        public\\n        view\\n        override\\n        returns (bytes32 rootOwner)\\n    {\\n        return rootOwnerOfChild(address(0), _tokenId);\\n    }\\n\\n    // returns the owner at the top of the tree of composables\\n    // Use Cases handled:\\n    // Case 1: Token owner is this contract and token.\\n    // Case 2: Token owner is other top-down composable\\n    // Case 3: Token owner is other contract\\n    // Case 4: Token owner is user\\n    function rootOwnerOfChild(address _childContract, uint256 _childTokenId)\\n        public\\n        view\\n        override\\n        returns (bytes32 rootOwner)\\n    {\\n        address rootOwnerAddress;\\n        if (_childContract != address(0)) {\\n            (rootOwnerAddress, _childTokenId) = _ownerOfChild(\\n                _childContract,\\n                _childTokenId\\n            );\\n        } else {\\n            rootOwnerAddress = tokenIdToTokenOwner[_childTokenId];\\n            require(\\n                rootOwnerAddress != address(0),\\n                \\\"CTD: ownerOf _tokenId zero addr\\\"\\n            );\\n        }\\n        // Case 1: Token owner is this contract and token.\\n        while (rootOwnerAddress == address(this)) {\\n            (rootOwnerAddress, _childTokenId) = _ownerOfChild(\\n                rootOwnerAddress,\\n                _childTokenId\\n            );\\n        }\\n        bytes memory callData = abi.encodeWithSelector(\\n            ROOT_OWNER_OF_CHILD,\\n            address(this),\\n            _childTokenId\\n        );\\n        (bool callSuccess, bytes memory data) = rootOwnerAddress.staticcall(\\n            callData\\n        );\\n        if (callSuccess) {\\n            assembly {\\n                rootOwner := mload(add(data, 0x20))\\n            }\\n        }\\n\\n        if (\\n            callSuccess == true \\u0026\\u0026\\n            rootOwner \\u0026\\n                0xffffffff00000000000000000000000000000000000000000000000000000000 ==\\n            ERC998_MAGIC_VALUE_32\\n        ) {\\n            // Case 2: Token owner is other top-down composable\\n            return rootOwner;\\n        } else {\\n            // Case 3: Token owner is other contract\\n            // Or\\n            // Case 4: Token owner is user\\n            assembly {\\n                rootOwner := or(ERC998_MAGIC_VALUE_32, rootOwnerAddress)\\n            }\\n        }\\n    }\\n\\n    // returns the owner at the top of the tree of composables\\n\\n    function ownerOf(uint256 _tokenId)\\n        public\\n        view\\n        override\\n        returns (address tokenOwner)\\n    {\\n        tokenOwner = tokenIdToTokenOwner[_tokenId];\\n        require(tokenOwner != address(0), \\\"CTD: ownerOf _tokenId zero addr\\\");\\n        return tokenOwner;\\n    }\\n\\n    function balanceOf(address _tokenOwner)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            _tokenOwner != address(0),\\n            \\\"CTD: balanceOf _tokenOwner zero addr\\\"\\n        );\\n        return tokenOwnerToTokenCount[_tokenOwner];\\n    }\\n\\n    function approve(address _approved, uint256 _tokenId) external override {\\n        address rootOwner = address(uint160(uint256(rootOwnerOf(_tokenId))));\\n        require(\\n            rootOwner == msg.sender ||\\n                tokenOwnerToOperators[rootOwner][msg.sender],\\n            \\\"CTD: approve msg.sender not owner\\\"\\n        );\\n        rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId] = _approved;\\n        emit Approval(rootOwner, _approved, _tokenId);\\n    }\\n\\n    function getApproved(uint256 _tokenId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        address rootOwner = address(uint160(uint256(rootOwnerOf(_tokenId))));\\n        return rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId];\\n    }\\n\\n    function setApprovalForAll(address _operator, bool _approved)\\n        external\\n        override\\n    {\\n        require(_operator != address(0), \\\"CTD: _operator zero addr\\\");\\n        tokenOwnerToOperators[msg.sender][_operator] = _approved;\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\n    }\\n\\n    function isApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        require(_owner != address(0), \\\"CTD: _owner zero addr\\\");\\n        require(_operator != address(0), \\\"CTD: _operator zero addr\\\");\\n        return tokenOwnerToOperators[_owner][_operator];\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) public override {\\n        _transferFrom(_from, _to, _tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) public override {\\n        _transferFrom(_from, _to, _tokenId);\\n        if (_to.isContract()) {\\n            bytes4 retval = IERC721Receiver(_to).onERC721Received(\\n                msg.sender,\\n                _from,\\n                _tokenId,\\n                \\\"\\\"\\n            );\\n            require(\\n                retval == ERC721_RECEIVED_OLD || retval == ERC721_RECEIVED_NEW,\\n                \\\"CTD: safeTransferFrom(3) onERC721Received invalid return value\\\"\\n            );\\n        }\\n    }\\n\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    ) public override {\\n        _transferFrom(_from, _to, _tokenId);\\n        if (_to.isContract()) {\\n            bytes4 retval = IERC721Receiver(_to).onERC721Received(\\n                msg.sender,\\n                _from,\\n                _tokenId,\\n                _data\\n            );\\n            require(\\n                retval == ERC721_RECEIVED_OLD || retval == ERC721_RECEIVED_NEW,\\n                \\\"CTD: safeTransferFrom(4) onERC721Received invalid return value\\\"\\n            );\\n            rootOwnerOf(_tokenId);\\n        }\\n    }\\n\\n    function _transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) private {\\n        require(_from != address(0), \\\"CTD: _from zero addr\\\");\\n        require(tokenIdToTokenOwner[_tokenId] == _from, \\\"CTD: _from not owner\\\");\\n        require(_to != address(0), \\\"CTD: _to zero address\\\");\\n\\n        if (msg.sender != _from) {\\n            bytes memory callData = abi.encodeWithSelector(\\n                ROOT_OWNER_OF_CHILD,\\n                address(this),\\n                _tokenId\\n            );\\n            (bool callSuccess, bytes memory data) = _from.staticcall(callData);\\n            if (callSuccess == true) {\\n                bytes32 rootOwner;\\n                assembly {\\n                    rootOwner := mload(add(data, 0x20))\\n                }\\n                require(\\n                    rootOwner \\u0026\\n                        0xffffffff00000000000000000000000000000000000000000000000000000000 !=\\n                        ERC998_MAGIC_VALUE_32,\\n                    \\\"CTD: token is child of other top down composable\\\"\\n                );\\n            }\\n\\n            require(\\n                tokenOwnerToOperators[_from][msg.sender] ||\\n                    rootOwnerAndTokenIdToApprovedAddress[_from][_tokenId] ==\\n                    msg.sender,\\n                \\\"CTD: msg.sender not approved\\\"\\n            );\\n        }\\n\\n        // clear approval\\n        if (\\n            rootOwnerAndTokenIdToApprovedAddress[_from][_tokenId] != address(0)\\n        ) {\\n            delete rootOwnerAndTokenIdToApprovedAddress[_from][_tokenId];\\n            emit Approval(_from, address(0), _tokenId);\\n        }\\n\\n        // remove and transfer token\\n        if (_from != _to) {\\n            assert(tokenOwnerToTokenCount[_from] \\u003e 0);\\n            tokenOwnerToTokenCount[_from]--;\\n            tokenIdToTokenOwner[_tokenId] = _to;\\n            _holderTokens[_from].remove(_tokenId);\\n            _holderTokens[_to].add(_tokenId);\\n            tokenOwnerToTokenCount[_to]++;\\n        }\\n        emit Transfer(_from, _to, _tokenId);\\n    }\\n\\n    ////////////////////////////////////////////////////////\\n    // NFT Extendsion Metadata implementation\\n    ////////////////////////////////////////////////////////\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return tokenIdToTokenOwner[tokenId] != address(0);\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length \\u003e 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    function getTokenCount() public view returns (uint256) {\\n        return tokenCount;\\n    }\\n\\n    ////////////////////////////////////////////////////////\\n    // ERC998ERC721 and ERC998ERC721Enumerable implementation\\n    ////////////////////////////////////////////////////////\\n\\n    // tokenId =\\u003e child contract\\n    mapping(uint256 =\\u003e EnumerableSet.AddressSet) private childContracts;\\n\\n    // tokenId =\\u003e (child address =\\u003e array of child tokens)\\n    mapping(uint256 =\\u003e mapping(address =\\u003e EnumerableSet.UintSet))\\n        private childTokens;\\n\\n    // child address =\\u003e childId =\\u003e tokenId\\n    mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) private childTokenOwner;\\n\\n    function safeTransferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) external override {\\n        _transferChild(_fromTokenId, _to, _childContract, _childTokenId);\\n        IERC721(_childContract).safeTransferFrom(\\n            address(this),\\n            _to,\\n            _childTokenId\\n        );\\n        emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\\n    }\\n\\n    function safeTransferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId,\\n        bytes memory _data\\n    ) external override {\\n        _transferChild(_fromTokenId, _to, _childContract, _childTokenId);\\n        IERC721(_childContract).safeTransferFrom(\\n            address(this),\\n            _to,\\n            _childTokenId,\\n            _data\\n        );\\n        emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\\n    }\\n\\n    function transferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) external override {\\n        _transferChild(_fromTokenId, _to, _childContract, _childTokenId);\\n        //this is here to be compatible with cryptokitties and other old contracts that require being owner and approved\\n        // before transferring.\\n        //does not work with current standard which does not allow approving self, so we must let it fail in that case.\\n        bytes memory callData = abi.encodeWithSelector(\\n            APPROVE,\\n            this,\\n            _childTokenId\\n        );\\n        _childContract.call(callData);\\n\\n        IERC721(_childContract).transferFrom(address(this), _to, _childTokenId);\\n        emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\\n    }\\n\\n    function transferChildToParent(\\n        uint256 _fromTokenId,\\n        address _toContract,\\n        uint256 _toTokenId,\\n        address _childContract,\\n        uint256 _childTokenId,\\n        bytes memory _data\\n    ) external override {\\n        _transferChild(\\n            _fromTokenId,\\n            _toContract,\\n            _childContract,\\n            _childTokenId\\n        );\\n        IERC998ERC721BottomUp(_childContract).transferToParent(\\n            address(this),\\n            _toContract,\\n            _toTokenId,\\n            _childTokenId,\\n            _data\\n        );\\n        emit TransferChild(\\n            _fromTokenId,\\n            _toContract,\\n            _childContract,\\n            _childTokenId\\n        );\\n    }\\n\\n    // this contract has to be approved first in _childContract\\n    function getChild(\\n        address _from,\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) external override {\\n        receiveChild(_from, _tokenId, _childContract, _childTokenId);\\n        require(\\n            _from == msg.sender ||\\n                IERC721(_childContract).isApprovedForAll(_from, msg.sender) ||\\n                IERC721(_childContract).getApproved(_childTokenId) ==\\n                msg.sender,\\n            \\\"CTD: msg.sender not approved\\\"\\n        );\\n        IERC721(_childContract).transferFrom(\\n            _from,\\n            address(this),\\n            _childTokenId\\n        );\\n        // a check for looped ownership chain\\n        rootOwnerOf(_tokenId);\\n    }\\n\\n    function onERC721Received(\\n        address _from,\\n        uint256 _childTokenId,\\n        bytes calldata _data\\n    ) external returns (bytes4) {\\n        require(\\n            _data.length \\u003e 0,\\n            \\\"CTD: onERC721Received(3) _data must contain the uint256 tokenId to transfer the child token to\\\"\\n        );\\n        // convert up to 32 bytes of _data to uint256, owner nft tokenId passed as uint in bytes\\n        uint256 tokenId = _parseTokenId(_data);\\n        receiveChild(_from, tokenId, msg.sender, _childTokenId);\\n        require(\\n            IERC721(msg.sender).ownerOf(_childTokenId) != address(0),\\n            \\\"CTD: onERC721Received(3) child token not owned\\\"\\n        );\\n        // a check for looped ownership chain\\n        rootOwnerOf(tokenId);\\n        return ERC721_RECEIVED_OLD;\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address _from,\\n        uint256 _childTokenId,\\n        bytes calldata _data\\n    ) external override returns (bytes4) {\\n        require(\\n            _data.length \\u003e 0,\\n            \\\"CTD: onERC721Received(4) _data must contain the uint256 tokenId to transfer the child token to\\\"\\n        );\\n        // convert up to 32 bytes of _data to uint256, owner nft tokenId passed as uint in bytes\\n        uint256 tokenId = _parseTokenId(_data);\\n        receiveChild(_from, tokenId, msg.sender, _childTokenId);\\n        require(\\n            IERC721(msg.sender).ownerOf(_childTokenId) != address(0),\\n            \\\"CTD: onERC721Received(4) child token not owned\\\"\\n        );\\n        // a check for looped ownership chain\\n        rootOwnerOf(tokenId);\\n        return ERC721_RECEIVED_NEW;\\n    }\\n\\n    function childExists(address _childContract, uint256 _childTokenId)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        uint256 tokenId = childTokenOwner[_childContract][_childTokenId];\\n        return tokenId != 0;\\n    }\\n\\n    function totalChildContracts(uint256 _tokenId)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return childContracts[_tokenId].length();\\n    }\\n\\n    function childContractByIndex(uint256 _tokenId, uint256 _index)\\n        public\\n        view\\n        override\\n        returns (address childContract)\\n    {\\n        return childContracts[_tokenId].at(_index);\\n    }\\n\\n    function totalChildTokens(uint256 _tokenId, address _childContract)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return childTokens[_tokenId][_childContract].length();\\n    }\\n\\n    function childTokenByIndex(\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _index\\n    ) public view override returns (uint256 childTokenId) {\\n        return childTokens[_tokenId][_childContract].at(_index);\\n    }\\n\\n    function ownerOfChild(address _childContract, uint256 _childTokenId)\\n        external\\n        view\\n        override\\n        returns (bytes32 parentTokenOwner, uint256 parentTokenId)\\n    {\\n        parentTokenId = childTokenOwner[_childContract][_childTokenId];\\n        require(parentTokenId != 0, \\\"CTD: not found\\\");\\n        address parentTokenOwnerAddress = tokenIdToTokenOwner[parentTokenId];\\n        assembly {\\n            parentTokenOwner := or(\\n                ERC998_MAGIC_VALUE_32,\\n                parentTokenOwnerAddress\\n            )\\n        }\\n    }\\n\\n    function _transferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) private {\\n        uint256 tokenId = childTokenOwner[_childContract][_childTokenId];\\n        require(tokenId != 0, \\\"CTD: _childContract _childTokenId not found\\\");\\n        require(tokenId == _fromTokenId, \\\"CTD: wrong tokenId found\\\");\\n        require(_to != address(0), \\\"CTD: _to zero addr\\\");\\n        address rootOwner = address(uint160(uint256(rootOwnerOf(tokenId))));\\n        require(\\n            rootOwner == msg.sender ||\\n                tokenOwnerToOperators[rootOwner][msg.sender] ||\\n                rootOwnerAndTokenIdToApprovedAddress[rootOwner][tokenId] ==\\n                msg.sender,\\n            \\\"CTD: msg.sender not eligible\\\"\\n        );\\n        removeChild(tokenId, _childContract, _childTokenId);\\n    }\\n\\n    function _ownerOfChild(address _childContract, uint256 _childTokenId)\\n        private\\n        view\\n        returns (address parentTokenOwner, uint256 parentTokenId)\\n    {\\n        parentTokenId = childTokenOwner[_childContract][_childTokenId];\\n        require(parentTokenId != 0, \\\"CTD: not found\\\");\\n        return (tokenIdToTokenOwner[parentTokenId], parentTokenId);\\n    }\\n\\n    function _parseTokenId(bytes memory _data)\\n        private\\n        pure\\n        returns (uint256 tokenId)\\n    {\\n        // convert up to 32 bytes of_data to uint256, owner nft tokenId passed as uint in bytes\\n        assembly {\\n            tokenId := mload(add(_data, 0x20))\\n        }\\n        if (_data.length \\u003c 32) {\\n            tokenId = tokenId \\u003e\\u003e (256 - _data.length * 8);\\n        }\\n    }\\n\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    msg.sender,\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function removeChild(\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) private {\\n        // remove child token\\n        uint256 lastTokenIndex = childTokens[_tokenId][_childContract]\\n            .length() - 1;\\n        childTokens[_tokenId][_childContract].remove(_childTokenId);\\n        delete childTokenOwner[_childContract][_childTokenId];\\n\\n        // remove contract\\n        if (lastTokenIndex == 0) {\\n            childContracts[_tokenId].remove(_childContract);\\n        }\\n        if (_childContract == address(this)) {\\n            _updateStateHash(\\n                _tokenId,\\n                uint256(uint160(_childContract)),\\n                tokenIdToStateHash[_childTokenId]\\n            );\\n        } else {\\n            _updateStateHash(\\n                _tokenId,\\n                uint256(uint160(_childContract)),\\n                _childTokenId\\n            );\\n        }\\n    }\\n\\n    function receiveChild(\\n        address _from,\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) private {\\n        require(\\n            tokenIdToTokenOwner[_tokenId] != address(0),\\n            \\\"CTD: _tokenId does not exist.\\\"\\n        );\\n        require(\\n            childTokenOwner[_childContract][_childTokenId] != _tokenId,\\n            \\\"CTD: _childTokenId already received\\\"\\n        );\\n        uint256 childTokensLength = childTokens[_tokenId][_childContract]\\n            .length();\\n        if (childTokensLength == 0) {\\n            childContracts[_tokenId].add(_childContract);\\n        }\\n        childTokens[_tokenId][_childContract].add(_childTokenId);\\n        childTokenOwner[_childContract][_childTokenId] = _tokenId;\\n        if (_childContract == address(this)) {\\n            _updateStateHash(\\n                _tokenId,\\n                uint256(uint160(_childContract)),\\n                tokenIdToStateHash[_childTokenId]\\n            );\\n        } else {\\n            _updateStateHash(\\n                _tokenId,\\n                uint256(uint160(_childContract)),\\n                _childTokenId\\n            );\\n        }\\n        emit ReceivedChild(_from, _tokenId, _childContract, _childTokenId);\\n    }\\n\\n    ////////////////////////////////////////////////////////\\n    // ERC165 implementation\\n    ////////////////////////////////////////////////////////\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     * The interface id 0x1bc995e4 is added. The spec claims it to be the interface id of IERC998ERC721TopDown.\\n     * But it is not.\\n     * It is added anyway in case some contract checks it being compliant with the spec.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(IERC165, ERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC998ERC721TopDown).interfaceId ||\\n            interfaceId == type(IERC998ERC721TopDownEnumerable).interfaceId ||\\n            interfaceId == 0x1bc995e4 ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    ////////////////////////////////////////////////////////\\n    // Last State Hash\\n    ////////////////////////////////////////////////////////\\n\\n    /**\\n     * Update the state hash of tokenId and all its ancestors.\\n     * @param tokenId token id\\n     * @param childReference generalization of a child contract adddress\\n     * @param value new balance of ERC20, childTokenId of ERC721 or a child\\u0027s state hash (if childContract==address(this))\\n     */\\n    function _updateStateHash(\\n        uint256 tokenId,\\n        uint256 childReference,\\n        uint256 value\\n    ) private {\\n        uint256 _newStateHash = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    tokenIdToStateHash[tokenId],\\n                    childReference,\\n                    value\\n                )\\n            )\\n        );\\n        tokenIdToStateHash[tokenId] = _newStateHash;\\n        while (tokenIdToTokenOwner[tokenId] == address(this)) {\\n            tokenId = childTokenOwner[address(this)][tokenId];\\n            _newStateHash = uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        tokenIdToStateHash[tokenId],\\n                        uint256(uint160(address(this))),\\n                        _newStateHash\\n                    )\\n                )\\n            );\\n            tokenIdToStateHash[tokenId] = _newStateHash;\\n        }\\n    }\\n\\n    function stateHash(uint256 tokenId) public view returns (uint256) {\\n        uint256 _stateHash = tokenIdToStateHash[tokenId];\\n        require(_stateHash \\u003e 0, \\\"CTD: stateHash of _tokenId is zero\\\");\\n        return _stateHash;\\n    }\\n\\n    /**\\n     * @dev See {safeTransferFrom}.\\n     * Check the state hash and call safeTransferFrom.\\n     */\\n    function safeCheckedTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 expectedStateHash\\n    ) external {\\n        require(\\n            expectedStateHash == tokenIdToStateHash[tokenId],\\n            \\\"CTD: stateHash mismatch (1)\\\"\\n        );\\n        safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {transferFrom}.\\n     * Check the state hash and call transferFrom.\\n     */\\n    function checkedTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 expectedStateHash\\n    ) external {\\n        require(\\n            expectedStateHash == tokenIdToStateHash[tokenId],\\n            \\\"CTD: stateHash mismatch (2)\\\"\\n        );\\n        transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {safeTransferFrom}.\\n     * Check the state hash and call safeTransferFrom.\\n     */\\n    function safeCheckedTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 expectedStateHash,\\n        bytes calldata data\\n    ) external {\\n        require(\\n            expectedStateHash == tokenIdToStateHash[tokenId],\\n            \\\"CTD: stateHash mismatch (3)\\\"\\n        );\\n        safeTransferFrom(from, to, tokenId, data);\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 =\\u003e uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue\\u0027s index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set)\\n        internal\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"IERC721ReceiverOld.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverOld {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"},\"IERC998ERC721BottomUp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC998ERC721BottomUp {\\n    event TransferToParent(\\n        address indexed _toContract,\\n        uint256 indexed _toTokenId,\\n        uint256 _tokenId\\n    );\\n    event TransferFromParent(\\n        address indexed _fromContract,\\n        uint256 indexed _fromTokenId,\\n        uint256 _tokenId\\n    );\\n\\n    function rootOwnerOf(uint256 _tokenId)\\n        external\\n        view\\n        returns (bytes32 rootOwner);\\n\\n    /**\\n     * The tokenOwnerOf function gets the owner of the _tokenId which can be a user address or another ERC721 token.\\n     * The tokenOwner address return value can be either a user address or an ERC721 contract address.\\n     * If the tokenOwner address is a user address then parentTokenId will be 0 and should not be used or considered.\\n     * If tokenOwner address is a user address then isParent is false, otherwise isChild is true, which means that\\n     * tokenOwner is an ERC721 contract address and _tokenId is a child of tokenOwner and parentTokenId.\\n     */\\n    function tokenOwnerOf(uint256 _tokenId)\\n        external\\n        view\\n        returns (\\n            bytes32 tokenOwner,\\n            uint256 parentTokenId,\\n            bool isParent\\n        );\\n\\n    // Transfers _tokenId as a child to _toContract and _toTokenId\\n    function transferToParent(\\n        address _from,\\n        address _toContract,\\n        uint256 _toTokenId,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    ) external;\\n\\n    // Transfers _tokenId from a parent ERC721 token to a user address.\\n    function transferFromParent(\\n        address _fromContract,\\n        uint256 _fromTokenId,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    ) external;\\n\\n    // Transfers _tokenId from a parent ERC721 token to a parent ERC721 token.\\n    function transferAsChild(\\n        address _fromContract,\\n        uint256 _fromTokenId,\\n        address _toContract,\\n        uint256 _toTokenId,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    ) external;\\n}\\n\"},\"IERC998ERC721BottomUpEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC998ERC721BottomUpEnumerable {\\n    function totalChildTokens(address _parentContract, uint256 _parentTokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function childTokenByIndex(\\n        address _parentContract,\\n        uint256 _parentTokenId,\\n        uint256 _index\\n    ) external view returns (uint256);\\n}\\n\"},\"IERC998ERC721TopDown.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC998ERC721TopDown {\\n    event ReceivedChild(\\n        address indexed _from,\\n        uint256 indexed _tokenId,\\n        address indexed _childContract,\\n        uint256 _childTokenId\\n    );\\n    event TransferChild(\\n        uint256 indexed tokenId,\\n        address indexed _to,\\n        address indexed _childContract,\\n        uint256 _childTokenId\\n    );\\n\\n    function rootOwnerOf(uint256 _tokenId)\\n        external\\n        view\\n        returns (bytes32 rootOwner);\\n\\n    function rootOwnerOfChild(address _childContract, uint256 _childTokenId)\\n        external\\n        view\\n        returns (bytes32 rootOwner);\\n\\n    function ownerOfChild(address _childContract, uint256 _childTokenId)\\n        external\\n        view\\n        returns (bytes32 parentTokenOwner, uint256 parentTokenId);\\n\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _childTokenId,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    function transferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) external;\\n\\n    function safeTransferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) external;\\n\\n    function safeTransferChild(\\n        uint256 _fromTokenId,\\n        address _to,\\n        address _childContract,\\n        uint256 _childTokenId,\\n        bytes memory _data\\n    ) external;\\n\\n    function transferChildToParent(\\n        uint256 _fromTokenId,\\n        address _toContract,\\n        uint256 _toTokenId,\\n        address _childContract,\\n        uint256 _childTokenId,\\n        bytes memory _data\\n    ) external;\\n\\n    // getChild function enables older contracts like cryptokitties to be transferred into a composable\\n    // The _childContract must approve this contract. Then getChild can be called.\\n    function getChild(\\n        address _from,\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _childTokenId\\n    ) external;\\n}\\n\"},\"IERC998ERC721TopDownEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC998ERC721TopDownEnumerable {\\n    function totalChildContracts(uint256 _tokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function childContractByIndex(uint256 _tokenId, uint256 _index)\\n        external\\n        view\\n        returns (address childContract);\\n\\n    function totalChildTokens(uint256 _tokenId, address _childContract)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function childTokenByIndex(\\n        uint256 _tokenId,\\n        address _childContract,\\n        uint256 _index\\n    ) external view returns (uint256 childTokenId);\\n}\\n\"},\"MetaBoom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ComposableTopDown.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Strings.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract MetaBoom is ComposableTopDown, Ownable {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    uint256 public constant maxSupply = 5000;\\n    uint256 public constant price = 0.05 ether;\\n    uint256 public constant airDropMaxSupply = 300;\\n    uint256 public totalSupply = 0;\\n    uint256 public totalAirDrop = 0;\\n    string public baseTokenURI;\\n    string public subTokenURI;\\n    bool public paused = false;\\n\\n    uint256 public preSaleTime = 1636682400;\\n    uint256 public publicSaleTime = 1637028000;\\n\\n    mapping(address =\\u003e bool) public airDropList;\\n    mapping(address =\\u003e bool) public whiteList;\\n    mapping(address =\\u003e uint8) public prePaidNumAry;\\n    mapping(address =\\u003e uint8) public holdedNumAry;\\n    mapping(address =\\u003e uint8) public claimed;\\n    mapping(uint256 =\\u003e string) private _tokenURIs;\\n\\n    event MetaBoomPop(uint256 indexed tokenId, address indexed tokenOwner);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _uri,\\n        string memory _subUri\\n    ) ComposableTopDown(_name, _symbol) {\\n        baseTokenURI = _uri;\\n        subTokenURI = _subUri;\\n    }\\n\\n    function preSale(uint8 _purchaseNum) external payable onlyWhiteList {\\n        require(!paused, \\\"MetaBoom: currently paused\\\");\\n        require(\\n            block.timestamp \\u003e= preSaleTime,\\n            \\\"MetaBoom: preSale is not open\\\"\\n        );\\n        require(\\n            (totalSupply + _purchaseNum) \\u003c= (maxSupply - airDropMaxSupply),\\n            \\\"MetaBoom: reached max supply\\\"\\n        );\\n        require(\\n            (holdedNumAry[_msgSender()] + _purchaseNum) \\u003c= 5,\\n            \\\"MetaBoom: can not hold more than 5\\\"\\n        );\\n        require(\\n            msg.value \\u003e= (price * _purchaseNum),\\n            \\\"MetaBoom: price is incorrect\\\"\\n        );\\n\\n        holdedNumAry[_msgSender()] = holdedNumAry[_msgSender()] + _purchaseNum;\\n        prePaidNumAry[_msgSender()] =\\n            prePaidNumAry[_msgSender()] +\\n            _purchaseNum;\\n        totalSupply = totalSupply + _purchaseNum;\\n    }\\n\\n    function publicSale(uint8 _purchaseNum) external payable {\\n        require(!paused, \\\"MetaBoom: currently paused\\\");\\n        require(\\n            block.timestamp \\u003e= publicSaleTime,\\n            \\\"MetaBoom: publicSale is not open\\\"\\n        );\\n        require(\\n            (totalSupply + _purchaseNum) \\u003c= (maxSupply - airDropMaxSupply),\\n            \\\"MetaBoom: reached max supply\\\"\\n        );\\n        require(\\n            (holdedNumAry[_msgSender()] + _purchaseNum) \\u003c= 5,\\n            \\\"MetaBoom: can not hold more than 5\\\"\\n        );\\n        require(\\n            msg.value \\u003e= (price * _purchaseNum),\\n            \\\"MetaBoom: price is incorrect\\\"\\n        );\\n\\n        holdedNumAry[_msgSender()] = holdedNumAry[_msgSender()] + _purchaseNum;\\n        prePaidNumAry[_msgSender()] =\\n            prePaidNumAry[_msgSender()] +\\n            _purchaseNum;\\n        totalSupply = totalSupply + _purchaseNum;\\n    }\\n\\n    function ownerMInt(address _addr)\\n        external\\n        onlyOwner\\n        returns (uint256 tokenId_)\\n    {\\n        require(\\n            totalSupply \\u003c (maxSupply - airDropMaxSupply),\\n            \\\"MetaBoom: reached max supply\\\"\\n        );\\n        require(holdedNumAry[_addr] \\u003c 5, \\\"MetaBoom: can not hold more than 5\\\");\\n\\n        tokenId_ = _safeMint(_addr);\\n        holdedNumAry[_addr]++;\\n        claimed[_addr]++;\\n        totalSupply++;\\n        emit MetaBoomPop(tokenId_, _addr);\\n        return tokenId_;\\n    }\\n\\n    function claimAirdrop() external onlyAirDrop {\\n        require(\\n            block.timestamp \\u003e= preSaleTime,\\n            \\\"MetaBoom: Not able to claim yet.\\\"\\n        );\\n        uint256 tokenId_ = _safeMint(_msgSender());\\n        airDropList[_msgSender()] = false;\\n        emit MetaBoomPop(tokenId_, _msgSender());\\n        holdedNumAry[_msgSender()]++;\\n        claimed[_msgSender()]++;\\n    }\\n\\n    function claimAll() external {\\n        require(\\n            block.timestamp \\u003e= preSaleTime,\\n            \\\"MetaBoom: Not able to claim yet\\\"\\n        );\\n\\n        require(\\n            prePaidNumAry[_msgSender()] \\u003e 0,\\n            \\\"MetaBoom: already claimed all\\\"\\n        );\\n\\n        for (uint8 i = 0; i \\u003c prePaidNumAry[_msgSender()]; i++) {\\n            uint256 tokenId_ = _safeMint(_msgSender());\\n            emit MetaBoomPop(tokenId_, _msgSender());\\n        }\\n\\n        claimed[_msgSender()] += prePaidNumAry[_msgSender()];\\n        prePaidNumAry[_msgSender()] = 0;\\n    }\\n\\n    modifier onlyWhiteList() {\\n        require(whiteList[_msgSender()], \\\"MetaBoom: caller not in WhiteList\\\");\\n        _;\\n    }\\n\\n    modifier onlyAirDrop() {\\n        require(\\n            airDropList[_msgSender()],\\n            \\\"MetaBoom: caller not in AirdropList\\\"\\n        );\\n        _;\\n    }\\n\\n    function setBaseURI(string memory _baseURI) external onlyOwner {\\n        baseTokenURI = _baseURI;\\n    }\\n\\n    function setSubURI(string memory _subURI) external onlyOwner {\\n        subTokenURI = _subURI;\\n    }\\n\\n    function setTokenURI(uint256 _tokenId, string memory _tokenURI)\\n        external\\n        onlyOwner\\n    {\\n        _tokenURIs[_tokenId] = _tokenURI;\\n    }\\n\\n    function setPreSaleTime(uint256 _time) external onlyOwner {\\n        preSaleTime = _time;\\n    }\\n\\n    function setPublicSaleTime(uint256 _time) external onlyOwner {\\n        publicSaleTime = _time;\\n    }\\n\\n    function pauseSale() external onlyOwner {\\n        paused = !paused;\\n    }\\n\\n    function addBatchWhiteList(address[] memory _accounts) external onlyOwner {\\n        for (uint256 i = 0; i \\u003c _accounts.length; i++) {\\n            whiteList[_accounts[i]] = true;\\n        }\\n    }\\n\\n    function addBatchAirDropList(address[] memory _accounts)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            totalAirDrop + _accounts.length \\u003c= airDropMaxSupply,\\n            \\\"reached max airDropSupply\\\"\\n        );\\n\\n        for (uint256 i = 0; i \\u003c _accounts.length; i++) {\\n            require(holdedNumAry[_accounts[i]] \\u003c 5, \\\"can not hold more than 5\\\");\\n            airDropList[_accounts[i]] = true;\\n        }\\n\\n        totalAirDrop = totalAirDrop + _accounts.length;\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    function tokensOfOwner(address _owner)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 tokenCount = balanceOf(_owner);\\n        if (tokenCount == 0) {\\n            return new uint256[](0);\\n        } else {\\n            uint256[] memory result = new uint256[](tokenCount);\\n            uint256 index;\\n            for (index = 0; index \\u003c tokenCount; index++) {\\n                result[index] = tokenOfOwnerByIndex(_owner, index);\\n            }\\n            return result;\\n        }\\n    }\\n\\n    function childContractOfToken(uint256 _tokenId)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        uint256 childCount = totalChildContracts(_tokenId);\\n        if (childCount == 0) {\\n            return new address[](0);\\n        } else {\\n            address[] memory result = new address[](childCount);\\n            uint256 index;\\n            for (index = 0; index \\u003c childCount; index++) {\\n                result[index] = childContractByIndex(_tokenId, index);\\n            }\\n            return result;\\n        }\\n    }\\n\\n    function childTokensOfChildContract(uint256 _tokenId, address _childAddr)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 tokenCount = totalChildTokens(_tokenId, _childAddr);\\n        if (tokenCount == 0) {\\n            return new uint256[](0);\\n        } else {\\n            uint256[] memory result = new uint256[](tokenCount);\\n            uint256 index;\\n            for (index = 0; index \\u003c tokenCount; index++) {\\n                result[index] = childTokenByIndex(_tokenId, _childAddr, index);\\n            }\\n            return result;\\n        }\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        return\\n            bytes(_tokenURIs[_tokenId]).length \\u003e 0\\n                ? string(abi.encodePacked(subTokenURI, _tokenURIs[_tokenId]))\\n                : string(\\n                    abi.encodePacked(baseTokenURI, Strings.toString(_tokenId))\\n                );\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp \\u003e\\u003e= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_subUri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"MetaBoomPop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"ReceivedChild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"TransferChild\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"addBatchAirDropList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"}],\"name\":\"addBatchWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airDropList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDropMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedStateHash\",\"type\":\"uint256\"}],\"name\":\"checkedTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"childContractByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"childContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"childContractOfToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"childExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"childTokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"childTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_childAddr\",\"type\":\"address\"}],\"name\":\"childTokensOfChildContract\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"getChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holdedNumAry\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"ownerMInt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOfChild\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentTokenOwner\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"parentTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prePaidNumAry\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_purchaseNum\",\"type\":\"uint8\"}],\"name\":\"preSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_purchaseNum\",\"type\":\"uint8\"}],\"name\":\"publicSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"rootOwnerOf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootOwner\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"rootOwnerOfChild\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"rootOwner\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedStateHash\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeCheckedTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedStateHash\",\"type\":\"uint256\"}],\"name\":\"safeCheckedTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setPreSaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_subURI\",\"type\":\"string\"}],\"name\":\"setSubURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stateHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAirDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"totalChildContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"}],\"name\":\"totalChildTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"}],\"name\":\"transferChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferChildToParent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MetaBoom","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000084d657461426f6f6d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004244d4d5500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002168747470733a2f2f6170692e66616e73692e6d652f4e46542f62696f70756e6b2f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002268747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://41cc16488e7a2004b19598c1ef78ce0dc3dacde1e03a03ae6390cd8fdd2fddb3"}]}