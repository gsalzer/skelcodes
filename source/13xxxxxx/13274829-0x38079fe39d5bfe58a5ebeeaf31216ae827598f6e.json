{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/AvnNftListingsV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./interfaces/IAvnNftListingsV1.sol\\\";\\r\\nimport \\\"./interfaces/IAvnNftRoyaltyStorage.sol\\\";\\r\\n\\r\\ncontract AvnNftListingsV1 is IAvnNftListingsV1, Owned {\\r\\n\\r\\n  IAvnNftRoyaltyStorage immutable private avnNftRoyaltyStorage;\\r\\n\\r\\n  string constant private AUCTION_INSTRUCTION = \\\"AVN_START_AUCTION\\\";\\r\\n  string constant private BATCH_INSTRUCTION = \\\"AVN_START_BATCH\\\";\\r\\n  string constant private SALE_INSTRUCTION = \\\"AVN_START_SALE\\\";\\r\\n  uint32 constant private ONE_MILLION = 1000000;\\r\\n  uint64 constant public SUPPLY_LIMIT = type(uint64).max;\\r\\n  bool private payingOut;\\r\\n\\r\\n  mapping (address => bool) public authority;\\r\\n  mapping (uint256 => Listing) private listing;\\r\\n  mapping (uint256 => Bid) private highBid;\\r\\n  mapping (bytes32 => bool) private proofUsed;\\r\\n\\r\\n  constructor(IAvnNftRoyaltyStorage _avnNftRoyaltyStorage)\\r\\n  {\\r\\n    avnNftRoyaltyStorage = _avnNftRoyaltyStorage;\\r\\n  }\\r\\n\\r\\n  modifier isNotListed(uint256 _id) {\\r\\n    require(listing[_id].state == State.Unlisted, \\\"Listing already exists\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier isListedForAuction(uint256 _nftId) {\\r\\n    require(listing[_nftId].state == State.Auction, \\\"Auction not listed\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier isListedForBatchSale(uint256 _batchId) {\\r\\n    require(listing[_batchId].state == State.Batch, \\\"Batch not listed\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier isListedForSale(uint256 _nftId) {\\r\\n    require(listing[_nftId].state == State.Sale, \\\"Sale not listed\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier hasAvnPublicKey(bytes32 _avnPublicKey) {\\r\\n    require(_avnPublicKey != 0, \\\"Missing AVN public key\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlySeller(address _seller) {\\r\\n    require(_seller == msg.sender, \\\"Only seller\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlySellerOrAuthorityOrOwner(uint256 _nftId) {\\r\\n    require(msg.sender == listing[_nftId].seller || authority[msg.sender] || msg.sender == owner, \\\"Not permitted\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setAuthority(address _authority, bool _isAuthorised)\\r\\n    external\\r\\n    override\\r\\n    onlyOwner\\r\\n  {\\r\\n    require(_authority != address(0), \\\"Cannot be zero address\\\");\\r\\n    authority[_authority] = _isAuthorised;\\r\\n  }\\r\\n\\r\\n  function startAuction(uint256 _nftId, uint256 _reservePrice, uint256 _endTime, uint64 _avnOpId,\\r\\n      IAvnNftRoyaltyStorage.Royalty[] calldata _royalties, bytes calldata _proof)\\r\\n    external\\r\\n    override\\r\\n    isNotListed(_nftId)\\r\\n  {\\r\\n    require(_nftId != 0, \\\"Missing NFT ID\\\");\\r\\n    checkProof(keccak256(abi.encode(AUCTION_INSTRUCTION, address(this), _nftId, msg.sender, _endTime, _avnOpId, _royalties)),\\r\\n        _proof);\\r\\n    avnNftRoyaltyStorage.setRoyalties(_nftId, _royalties);\\r\\n    emit LogStartAuction(_nftId, msg.sender, _reservePrice, _endTime);\\r\\n\\r\\n    if (block.timestamp > _endTime) {\\r\\n      emit LogAuctionCancelled(_nftId);\\r\\n      emit AvnCancelNftListing(_nftId, _avnOpId);\\r\\n    } else {\\r\\n      listing[_nftId].state = State.Auction;\\r\\n      listing[_nftId].seller = msg.sender;\\r\\n      listing[_nftId].avnOpId = _avnOpId;\\r\\n      listing[_nftId].endTime = _endTime;\\r\\n      highBid[_nftId].amount = (_reservePrice > 0) ? _reservePrice - 1 : 0;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function bid(uint256 _nftId, bytes32 _avnPublicKey)\\r\\n    external\\r\\n    override\\r\\n    payable\\r\\n    hasAvnPublicKey(_avnPublicKey)\\r\\n    isListedForAuction(_nftId)\\r\\n  {\\r\\n    require(block.timestamp <= listing[_nftId].endTime, \\\"Bidding has ended\\\");\\r\\n    require(msg.value > highBid[_nftId].amount, \\\"Bid too low\\\");\\r\\n\\r\\n    refundAnyExistingBid(_nftId);\\r\\n    highBid[_nftId].bidder = msg.sender;\\r\\n    highBid[_nftId].avnPublicKey = _avnPublicKey;\\r\\n    highBid[_nftId].amount = msg.value;\\r\\n    emit LogBid(_nftId, highBid[_nftId].bidder, highBid[_nftId].avnPublicKey, highBid[_nftId].amount);\\r\\n  }\\r\\n\\r\\n  function endAuction(uint256 _nftId)\\r\\n    external\\r\\n    override\\r\\n    isListedForAuction(_nftId)\\r\\n    onlySeller(listing[_nftId].seller)\\r\\n  {\\r\\n    require(block.timestamp > listing[_nftId].endTime, \\\"Cannot end auction yet\\\");\\r\\n\\r\\n    if (highBid[_nftId].bidder == address(0)) {\\r\\n      emit LogAuctionCancelled(_nftId);\\r\\n      emit AvnCancelNftListing(_nftId, listing[_nftId].avnOpId);\\r\\n    } else {\\r\\n      distributeFunds(avnNftRoyaltyStorage.getRoyalties(_nftId), highBid[_nftId].amount, msg.sender);\\r\\n      emit LogAuctionComplete(_nftId, highBid[_nftId].avnPublicKey, highBid[_nftId].bidder, highBid[_nftId].amount);\\r\\n      emit AvnTransferTo(_nftId, highBid[_nftId].avnPublicKey, listing[_nftId].avnOpId);\\r\\n      delete highBid[_nftId];\\r\\n    }\\r\\n\\r\\n    delete listing[_nftId];\\r\\n  }\\r\\n\\r\\n  function cancelAuction(uint256 _nftId)\\r\\n    external\\r\\n    override\\r\\n    isListedForAuction(_nftId)\\r\\n    onlySellerOrAuthorityOrOwner(_nftId)\\r\\n  {\\r\\n    refundAnyExistingBid(_nftId);\\r\\n    emit LogAuctionCancelled(_nftId);\\r\\n    emit AvnCancelNftListing(_nftId, listing[_nftId].avnOpId);\\r\\n    delete listing[_nftId];\\r\\n  }\\r\\n\\r\\n  function startBatchSale(uint256 _batchId, uint256 _price, uint256 _endTime, uint64 _supply,\\r\\n      IAvnNftRoyaltyStorage.Royalty[] calldata _royalties, bytes calldata _proof)\\r\\n    external\\r\\n    override\\r\\n    isNotListed(_batchId)\\r\\n  {\\r\\n    require(_batchId != 0, \\\"Missing batch ID\\\");\\r\\n    require(_price != 0, \\\"Missing price\\\");\\r\\n    require(_supply != 0, \\\"Missing supply\\\");\\r\\n    require(_batchId & SUPPLY_LIMIT == 0, \\\"Invalid batch ID\\\");\\r\\n\\r\\n    checkProof(keccak256(abi.encode(BATCH_INSTRUCTION, address(this), _batchId, msg.sender, _endTime, _royalties)), _proof);\\r\\n    avnNftRoyaltyStorage.setRoyalties(_batchId, _royalties);\\r\\n    emit LogStartBatchSale(_batchId, msg.sender, _price, _supply, _endTime);\\r\\n\\r\\n    if (block.timestamp > _endTime) {\\r\\n      emit LogBatchSaleCancelled(_batchId);\\r\\n      emit AvnCancelBatchListing(_batchId);\\r\\n    } else {\\r\\n      listing[_batchId].state = State.Batch;\\r\\n      listing[_batchId].seller = msg.sender;\\r\\n      listing[_batchId].price = _price;\\r\\n      listing[_batchId].endTime = _endTime;\\r\\n      listing[_batchId].supply = _supply;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function buyFromBatch(uint256 _batchId, bytes32 _avnPublicKey)\\r\\n    external\\r\\n    override\\r\\n    payable\\r\\n    hasAvnPublicKey(_avnPublicKey)\\r\\n    isListedForBatchSale(_batchId)\\r\\n  {\\r\\n    require(block.timestamp <= listing[_batchId].endTime, \\\"Sales have ended\\\");\\r\\n    require(msg.value == listing[_batchId].price, \\\"Incorrect price\\\");\\r\\n    require(listing[_batchId].supply - listing[_batchId].saleIndex > 0, \\\"Sold out\\\");\\r\\n    listing[_batchId].saleIndex++;\\r\\n    uint256 nftId = _batchId + listing[_batchId].saleIndex;\\r\\n    avnNftRoyaltyStorage.setRoyaltyId(_batchId, nftId);\\r\\n    listing[_batchId].saleFunds += msg.value;\\r\\n    emit LogSold(nftId, _avnPublicKey, msg.sender);\\r\\n    emit AvnMintTo(nftId, _avnPublicKey);\\r\\n  }\\r\\n\\r\\n  function endBatchSale(uint256 _batchId)\\r\\n    external\\r\\n    override\\r\\n    isListedForBatchSale(_batchId)\\r\\n    onlySeller(listing[_batchId].seller)\\r\\n  {\\r\\n    require(block.timestamp > listing[_batchId].endTime, \\\"Cannot end sales yet\\\");\\r\\n\\r\\n    if (listing[_batchId].saleIndex == 0) {\\r\\n      emit LogBatchSaleCancelled(_batchId);\\r\\n      emit AvnCancelBatchListing(_batchId);\\r\\n    } else {\\r\\n      uint256 totalSalesAmount = listing[_batchId].saleFunds;\\r\\n      listing[_batchId].saleFunds = 0;\\r\\n      distributeFunds(avnNftRoyaltyStorage.getRoyalties(_batchId), totalSalesAmount, msg.sender);\\r\\n      emit LogBatchSaleComplete(_batchId, listing[_batchId].saleIndex);\\r\\n    }\\r\\n\\r\\n    delete listing[_batchId];\\r\\n  }\\r\\n\\r\\n  function startNftSale(uint256 _nftId, uint256 _price, uint64 _avnOpId, bytes calldata _proof)\\r\\n    external\\r\\n    override\\r\\n    isNotListed(_nftId)\\r\\n  {\\r\\n    require(_nftId != 0, \\\"Missing NFT ID\\\");\\r\\n    require(_price != 0, \\\"Missing price\\\");\\r\\n    checkProof(keccak256(abi.encode(SALE_INSTRUCTION, address(this), _nftId, msg.sender, _avnOpId)), _proof);\\r\\n    listing[_nftId].state = State.Sale;\\r\\n    listing[_nftId].seller = msg.sender;\\r\\n    listing[_nftId].avnOpId = _avnOpId;\\r\\n    listing[_nftId].price = _price;\\r\\n    emit LogStartNftSale(_nftId, msg.sender, _price);\\r\\n  }\\r\\n\\r\\n  function buyNft(uint256 _nftId, bytes32 _avnPublicKey)\\r\\n    external\\r\\n    override\\r\\n    payable\\r\\n    hasAvnPublicKey(_avnPublicKey)\\r\\n    isListedForSale(_nftId)\\r\\n  {\\r\\n    require(msg.value == listing[_nftId].price, \\\"Incorrect price\\\");\\r\\n    distributeFunds(avnNftRoyaltyStorage.getRoyalties(_nftId), msg.value, listing[_nftId].seller);\\r\\n    emit LogSold(_nftId, _avnPublicKey, msg.sender);\\r\\n    emit AvnTransferTo(_nftId, _avnPublicKey, listing[_nftId].avnOpId);\\r\\n    delete listing[_nftId];\\r\\n  }\\r\\n\\r\\n  function cancelNftSale(uint256 _nftId)\\r\\n    external\\r\\n    override\\r\\n    isListedForSale(_nftId)\\r\\n    onlySellerOrAuthorityOrOwner(_nftId)\\r\\n  {\\r\\n    emit LogNftSaleCancelled(_nftId);\\r\\n    emit AvnCancelNftListing(_nftId, listing[_nftId].avnOpId);\\r\\n    delete listing[_nftId];\\r\\n  }\\r\\n\\r\\n  function sendFunds(address _recipient, uint256 _amount)\\r\\n    private\\r\\n    returns (bool success_)\\r\\n  {\\r\\n    (success_, ) = _recipient.call{value: _amount}(\\\"\\\");\\r\\n  }\\r\\n\\r\\n  function checkProof(bytes32 _msgHash, bytes memory _proof)\\r\\n    private\\r\\n  {\\r\\n    require(!proofUsed[_msgHash], \\\"Proof already used\\\");\\r\\n    proofUsed[_msgHash] = true;\\r\\n    address signer = recover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _msgHash)), _proof);\\r\\n    require(authority[signer], \\\"Invalid proof\\\");\\r\\n  }\\r\\n\\r\\n  function recover(bytes32 hash, bytes memory signature)\\r\\n    private\\r\\n    pure\\r\\n    returns (address)\\r\\n  {\\r\\n    if (signature.length != 65) return address(0);\\r\\n\\r\\n    bytes32 r;\\r\\n    bytes32 s;\\r\\n    uint8 v;\\r\\n\\r\\n    assembly {\\r\\n      r := mload(add(signature, 0x20))\\r\\n      s := mload(add(signature, 0x40))\\r\\n      v := byte(0, mload(add(signature, 0x60)))\\r\\n    }\\r\\n\\r\\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) return address(0);\\r\\n    if (v < 27) v += 27;\\r\\n    if (v != 27 && v != 28) return address(0);\\r\\n\\r\\n    return ecrecover(hash, v, r, s);\\r\\n  }\\r\\n\\r\\n  function refundAnyExistingBid(uint256 _nftId)\\r\\n    private\\r\\n  {\\r\\n    if (highBid[_nftId].bidder == address(0)) return;\\r\\n\\r\\n    address bidder = highBid[_nftId].bidder;\\r\\n    uint256 amount = highBid[_nftId].amount;\\r\\n    delete highBid[_nftId];\\r\\n    sendFunds(bidder, amount);\\r\\n  }\\r\\n\\r\\n  function distributeFunds(IAvnNftRoyaltyStorage.Royalty[] memory _royalties, uint256 _amount, address _seller)\\r\\n    private\\r\\n  {\\r\\n    assert(!payingOut);\\r\\n    payingOut = true;\\r\\n    uint256 remaining = _amount;\\r\\n\\r\\n    if (_royalties.length > 0) {\\r\\n      uint256 royaltyPayment;\\r\\n      for (uint256 i = 0; i < _royalties.length; i++) {\\r\\n        royaltyPayment = _amount * _royalties[i].partsPerMil / ONE_MILLION;\\r\\n        remaining -= royaltyPayment;\\r\\n        sendFunds(_royalties[i].recipient, royaltyPayment);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    sendFunds(_seller, remaining);\\r\\n    payingOut = false;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"/contracts/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ncontract Owned {\\r\\n\\r\\n  address public owner = msg.sender;\\r\\n\\r\\n  event LogOwnershipTransferred(address indexed owner, address indexed newOwner);\\r\\n\\r\\n  modifier onlyOwner {\\r\\n    require(msg.sender == owner, \\\"Only owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setOwner(address _owner)\\r\\n    external\\r\\n    onlyOwner\\r\\n  {\\r\\n    require(_owner != address(0), \\\"Owner cannot be zero address\\\");\\r\\n    emit LogOwnershipTransferred(owner, _owner);\\r\\n    owner = _owner;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IAvnNftListingsV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"./IAvnNftRoyaltyStorage.sol\\\";\\r\\n\\r\\ninterface IAvnNftListingsV1 {\\r\\n\\r\\n  enum State {\\r\\n    Unlisted,\\r\\n    Auction,\\r\\n    Batch,\\r\\n    Sale\\r\\n  }\\r\\n\\r\\n  struct Listing {\\r\\n    uint256 price;\\r\\n    uint256 endTime;\\r\\n    uint256 saleFunds;\\r\\n    address seller;\\r\\n    uint64 avnOpId;\\r\\n    uint64 supply;\\r\\n    uint64 saleIndex;\\r\\n    State state;\\r\\n  }\\r\\n\\r\\n  struct Bid {\\r\\n    address bidder;\\r\\n    bytes32 avnPublicKey;\\r\\n    uint256 amount;\\r\\n  }\\r\\n\\r\\n  event AvnTransferTo(uint256 indexed nftId, bytes32 indexed avnPublicKey, uint64 indexed avnOpId);\\r\\n  event AvnMintTo(uint256 indexed nftId, bytes32 indexed avnPublicKey);\\r\\n  event AvnCancelBatchListing(uint256 indexed batchId);\\r\\n  event AvnCancelNftListing(uint256 indexed nftId, uint64 indexed avnOpId);\\r\\n\\r\\n  event LogStartAuction(uint256 indexed nftId, address indexed seller, uint256 reservePrice, uint256 endTime);\\r\\n  event LogBid(uint256 indexed nftId, address indexed bidder, bytes32 indexed avnPublicKey, uint256 amount);\\r\\n  event LogAuctionComplete(uint256 indexed nftId, bytes32 indexed avnPublicKey, address indexed winner, uint256 winningBid);\\r\\n  event LogAuctionCancelled(uint256 indexed nftId);\\r\\n  event LogStartBatchSale(uint256 indexed batchId, address indexed seller, uint256 price, uint64 supply, uint256 endTime);\\r\\n  event LogSold(uint256 indexed nftId, bytes32 indexed avnPublicKey, address indexed buyer);\\r\\n  event LogBatchSaleComplete(uint256 indexed batchId, uint64 amountSold);\\r\\n  event LogBatchSaleCancelled(uint256 indexed batchId);\\r\\n  event LogStartNftSale(uint256 indexed nftId, address indexed seller, uint256 price);\\r\\n  event LogNftSaleCancelled(uint256 indexed nftId);\\r\\n\\r\\n  function setAuthority(address authority, bool isAuthorised) external; // onlyOwner\\r\\n  function startAuction(uint256 nftId, uint256 reservePrice, uint256 endTime, uint64 avnOpId,\\r\\n      IAvnNftRoyaltyStorage.Royalty[] calldata royalties, bytes calldata proof) external;\\r\\n  function bid(uint256 nftId, bytes32 avnPublicKey) external payable;\\r\\n  function endAuction(uint256 nftId) external; // onlySeller\\r\\n  function cancelAuction(uint256 nftId) external; // either Seller, Owner, or Authority\\r\\n  function startBatchSale(uint256 batchId, uint256 price, uint256 endTime, uint64 supply,\\r\\n      IAvnNftRoyaltyStorage.Royalty[] calldata royalties, bytes calldata proof) external;\\r\\n  function buyFromBatch(uint256 batchId, bytes32 avnPublicKey) external payable;\\r\\n  function endBatchSale(uint256 batchId) external; // onlySeller\\r\\n  function startNftSale(uint256 nftId, uint256 price, uint64 avnOpId, bytes calldata proof) external;\\r\\n  function buyNft(uint256 nftId, bytes32 avnPublicKey) external payable;\\r\\n  function cancelNftSale(uint256 nftId) external; // either Seller, Owner, or Authority\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IAvnNftRoyaltyStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface IAvnNftRoyaltyStorage {\\r\\n\\r\\n  struct Royalty {\\r\\n    address recipient;\\r\\n    uint32 partsPerMil;\\r\\n  }\\r\\n\\r\\n  event LogPermissionUpdated(address partnerContract, bool status);\\r\\n\\r\\n  function setPermission(address partnerContract, bool status) external; // onlyOwner\\r\\n  function setRoyaltyId(uint256 batchId, uint256 nftId) external; // onlyPermitted\\r\\n  function setRoyalties(uint256 id, Royalty[] calldata royalties) external; // onlyPermitted\\r\\n  function getRoyalties(uint256 id) external view returns(Royalty[] memory);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IAvnNftRoyaltyStorage\",\"name\":\"_avnNftRoyaltyStorage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"AvnCancelBatchListing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"avnOpId\",\"type\":\"uint64\"}],\"name\":\"AvnCancelNftListing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"avnPublicKey\",\"type\":\"bytes32\"}],\"name\":\"AvnMintTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"avnPublicKey\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"avnOpId\",\"type\":\"uint64\"}],\"name\":\"AvnTransferTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"LogAuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"avnPublicKey\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningBid\",\"type\":\"uint256\"}],\"name\":\"LogAuctionComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"LogBatchSaleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"amountSold\",\"type\":\"uint64\"}],\"name\":\"LogBatchSaleComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"avnPublicKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"LogNftSaleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"avnPublicKey\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"LogSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"LogStartAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"supply\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"LogStartBatchSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"LogStartNftSale\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SUPPLY_LIMIT\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_avnPublicKey\",\"type\":\"bytes32\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_avnPublicKey\",\"type\":\"bytes32\"}],\"name\":\"buyFromBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_avnPublicKey\",\"type\":\"bytes32\"}],\"name\":\"buyNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"cancelNftSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"}],\"name\":\"endBatchSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAuthorised\",\"type\":\"bool\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_avnOpId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"partsPerMil\",\"type\":\"uint32\"}],\"internalType\":\"struct IAvnNftRoyaltyStorage.Royalty[]\",\"name\":\"_royalties\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_supply\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"partsPerMil\",\"type\":\"uint32\"}],\"internalType\":\"struct IAvnNftRoyaltyStorage.Royalty[]\",\"name\":\"_royalties\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"startBatchSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_avnOpId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"startNftSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AvnNftListingsV1","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"000000000000000000000000517b2884e793714721b06ed142e7fb36f410da4b","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}