{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"./base64.sol\\\";\\nimport \\\"./render.sol\\\";\\n\\n\\nlibrary Bitfield {\\n    function setBit(bytes32 self, uint8 bit) internal pure returns (bytes32) {\\n        return self | bytes32(1 << (255 - bit));\\n    }\\n\\n    function getBit(bytes32 self, uint8 bit) internal pure returns (bool) {\\n        return uint256((self << bit) >> 255) == 1;\\n    }\\n}\\n\\ncontract Measurable {\\n    event Measurement(\\n        string name,\\n        uint256 gas\\n    );\\n\\n    constructor() {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        require(1 != chainId);\\n    }\\n\\n    modifier measured(string memory name) {\\n        uint256 before = gasleft();\\n        _;\\n        emit Measurement(name, before - gasleft());\\n    }\\n}\\n\\nlibrary TokenAttributes {\\n    /*\\n    +-------+----------+-------+-------+-------+\\n    | color | negative | left  | nose  | right |\\n    +-------+----------+-------+-------+-------+\\n    | uint7 | uint1    | uint8 | uint8 | uint8 |\\n    +-------+----------+-------+-------+-------+\\n    */\\n\\n    function newFace(\\n        bool negative,\\n        uint8 color,\\n        uint8 leftEye,\\n        uint8 nose,\\n        uint8 rightEye\\n    ) internal pure returns (uint32) {\\n        uint32 face = (uint32(color) << 25)\\n            | (uint32(leftEye) << 16)\\n            | (uint32(nose) << 8)\\n            | uint32(rightEye);\\n\\n        if (negative) {\\n            face |= 0x01000000;\\n        }\\n\\n        return face;\\n    }\\n\\n    function faceColor(uint32 self) internal pure returns (uint8) {\\n        return uint8(self >> 25);\\n    }\\n\\n    function faceNegative(uint32 self) internal pure returns (bool) {\\n        return 0 != (self & 0x01000000);\\n    }\\n\\n    function faceLeftEye(uint32 self) internal pure returns (uint8) {\\n        return uint8(self >> 16);\\n    }\\n\\n    function faceRightEye(uint32 self) internal pure returns (uint8) {\\n        return uint8(self);\\n    }\\n\\n    function faceNose(uint32 self) internal pure returns (uint8) {\\n        return uint8(self >> 8);\\n    }\\n\\n    function faceBit(uint32 self) internal pure returns (uint8) {\\n        unchecked {\\n            return uint8(self >> 16) + (7 * uint8(self >> 8)) + (21 * uint8(self));\\n        }\\n    }\\n}\\n\\nabstract contract Attributes {\\n    using TokenAttributes for uint32;\\n    using Bitfield for bytes32;\\n\\n    uint8 constant internal COLORS = 7;\\n    uint8 constant internal EYES = 7;\\n    uint8 constant internal NOSES = 3;\\n\\n    bytes32 internal unique;\\n\\n    function takeFace(bytes32 input, uint32 face) private pure returns (bool success, bytes32 output) {\\n        uint8 bit = face.faceBit();\\n\\n        if (input.getBit(bit)) {\\n            success = false;\\n            output = input;\\n        } else {\\n            success = true;\\n            output = input.setBit(bit);\\n        }\\n    }\\n\\n    // (274 bytes)\\n    function pickEye(uint8 seed) private pure returns (uint8) {\\n        if (seed < 80) return 0;\\n        if (seed < 144) return 1;\\n        if (seed < 184) return 2;\\n        if (seed < 224) return 3;\\n        if (seed < 246) return 4;\\n        if (seed < 254) return 5;\\n        return 6;\\n    }\\n\\n    // (98 bytes)\\n    function pickNose(uint8 seed) private pure returns (uint8) {\\n        if (seed < 156) return 0;\\n        if (seed < 244) return 1;\\n        return 2;\\n    }\\n\\n    // (137 bytes)\\n    function pickColor(uint8 seed) private pure returns (uint8) {\\n        return seed % COLORS;\\n    }\\n\\n    // (20 bytes)\\n    function pickNegative(uint8 seed) private pure returns (bool) {\\n        return seed >= 254;\\n    }\\n\\n    function pickFace(bytes32 seed) private pure returns (uint32) {\\n        return TokenAttributes.newFace(\\n            pickNegative(uint8(seed[0])),\\n            pickColor(uint8(seed[1])),\\n            pickEye(uint8(seed[2])),\\n            pickNose(uint8(seed[3])),\\n            pickEye(uint8(seed[4]))\\n        );\\n    }\\n\\n    function random(bytes32 uni) private view returns (bytes32) {\\n        // Oh look, random number generation on-chain. What could go wrong?\\n\\n        unchecked {\\n            uint256 bitfield;\\n\\n\\n            for (uint ii = 1; ii < 257; ii++) {\\n                uint256 bits = uint256(blockhash(block.number - ii));\\n                bitfield |= bits & (1 << (ii - 1));\\n            }\\n\\n            uint256 value = uint256(keccak256(abi.encodePacked(bytes32(bitfield))));\\n            value ^= uint256(keccak256(abi.encodePacked(uni)));\\n\\n            return bytes32(value);\\n        }\\n    }\\n\\n    function roll() internal returns (uint32) {\\n        bytes32 mem = unique;\\n        bytes32 seed = random(mem);\\n\\n        bool success;\\n        uint32 face;\\n\\n        while (true) {\\n            face = pickFace(seed);\\n\\n            (success, mem) = takeFace(mem, face);\\n\\n            if (success) {\\n                break;\\n            }\\n\\n            seed = keccak256(abi.encodePacked(seed));\\n        }\\n\\n        unique = mem;\\n        return face;\\n    }\\n\\n    function steal(uint32 face) internal {\\n        bool success;\\n        (success, unique) = takeFace(unique, face);\\n        require(success, \\\"nice try\\\");\\n    }\\n}\\n\\ncontract FaceDotPng is Attributes, ERC721, Ownable {\\n    using TokenAttributes for uint32;\\n\\n    bytes constant private COLOR_VALUES = hex\\\"cc0000f15d2264cf00006fff2222ccad7fa834e2e2\\\";\\n\\n    Render immutable public RENDERER;\\n\\n    uint256 public price = 130000000000000;\\n\\n    constructor(Render renderer) ERC721(\\\"face.png\\\", \\\"PNG\\\") {\\n        RENDERER = renderer;\\n\\n        // My avatar.\\n        genesisSteal(msg.sender, 0xc020000);\\n    }\\n\\n    // (357 bytes)\\n    function color(uint8 index, bool negative) private pure returns (bytes3) {\\n        index *= 3;\\n        uint24 result =\\n            (uint24(uint8(COLOR_VALUES[index])) << 16)\\n            | (uint24(uint8(COLOR_VALUES[index + 1])) << 8)\\n            | uint24(uint8(COLOR_VALUES[index + 2]));\\n\\n        if (negative) {\\n            result = ~result;\\n        }\\n\\n        return bytes3(result);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"PNG: nonexistent\\\");\\n\\n        uint32 face = uint32(tokenId);\\n        bool isNegative = face.faceNegative();\\n\\n        bytes3 bg = bytes3(isNegative ? 0xFFFFFF : 0x000000);\\n\\n        bytes memory png = RENDERER.png(\\n            bg,\\n            color(face.faceColor(), isNegative),\\n            face.faceLeftEye(),\\n            face.faceNose(),\\n            face.faceRightEye()\\n        );\\n\\n        bytes memory svg = abi.encodePacked(\\n            \\\"<?xml version=\\\\\\\"1.0\\\\\\\" encoding=\\\\\\\"UTF-8\\\\\\\"?>\\\"\\n            \\\"<svg version=\\\\\\\"1.1\\\\\\\" viewBox=\\\\\\\"0 0 48 48\\\\\\\" xmlns=\\\\\\\"http://www.w3.org/2000/svg\\\\\\\" xmlns:xlink=\\\\\\\"http://www.w3.org/1999/xlink\\\\\\\">\\\"\\n            \\\"<image style=\\\\\\\"image-rendering:crisp-edges;image-rendering:pixelated\\\\\\\" xlink:href=\\\\\\\"data:image/png;base64,\\\",\\n            Base64.encode(png),\\n            \\\"\\\\\\\"/></svg>\\\"\\n        );\\n\\n        bytes memory name = abi.encodePacked(\\n            RENDERER.eyeName(face.faceLeftEye()),\\n            RENDERER.noseName(face.faceNose()),\\n            RENDERER.eyeName(face.faceRightEye()),\\n            \\\".png\\\"\\n        );\\n\\n        bytes memory json = abi.encodePacked(\\n            \\\"{\\\\\\\"description\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"\\\",\\n            name,\\n            \\\"\\\\\\\",\\\\\\\"attributes\\\\\\\":[{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Left Eye\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\",\\n            RENDERER.eyeName(face.faceLeftEye()),\\n            \\\"\\\\\\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Nose\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\",\\n            RENDERER.noseName(face.faceNose()),\\n            \\\"\\\\\\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Right Eye\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\",\\n            RENDERER.eyeName(face.faceRightEye()),\\n            \\\"\\\\\\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Base Color\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\",\\n            face.faceColor() + 48, // Convert to ASCII digit.\\n            \\\"\\\\\\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Negative\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\",\\n            face.faceNegative() ? \\\"Yes\\\" : \\\"No\\\",\\n            \\\"\\\\\\\"}],\\\\\\\"image\\\\\\\":\\\\\\\"data:image/svg+xml;base64,\\\",\\n            Base64.encode(svg),\\n            \\\"\\\\\\\"}\\\"\\n        );\\n\\n        return string(abi.encodePacked(\\n            \\\"data:application/json;base64,\\\",\\n            Base64.encode(json)\\n        ));\\n    }\\n\\n    function genesisSteal(address to, uint32 face) private {\\n        steal(face);\\n        _mint(to, face);\\n    }\\n\\n    function preMint() private returns (uint256) {\\n        require(msg.sender == tx.origin, \\\"EOAs only\\\"); // fuck 3074\\n        require(msg.value >= price, \\\"not enough\\\");\\n        price = (price * 1082) / 1000;\\n        return roll();\\n    }\\n\\n    function mint(address to) external payable {\\n        _mint(to, preMint());\\n    }\\n\\n    function safeMint(address to) external payable {\\n        _safeMint(to, preMint());\\n    }\\n\\n    function withdraw(address payable to) external onlyOwner {\\n        (bool success,) = to.call{value:address(this).balance}(\\\"\\\");\\n        require(success, \\\"could not send\\\");\\n    }\\n}\"\r\n    },\r\n    \"contracts/render.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.4;\\n\\nlibrary Crc32 {\\n    bytes constant private TABLE = hex\\\"0000000077073096ee0e612c990951ba076dc419706af48fe963a5359e6495a30edb883279dcb8a4e0d5e91e97d2d98809b64c2b7eb17cbde7b82d0790bf1d911db710646ab020f2f3b9714884be41de1adad47d6ddde4ebf4d4b55183d385c7136c9856646ba8c0fd62f97a8a65c9ec14015c4f63066cd9fa0f3d638d080df53b6e20c84c69105ed56041e4a26771723c03e4d14b04d447d20d85fda50ab56b35b5a8fa42b2986cdbbbc9d6acbcf94032d86ce345df5c75dcd60dcfabd13d5926d930ac51de003ac8d75180bfd0611621b4f4b556b3c423cfba9599b8bda50f2802b89e5f058808c60cd9b2b10be9242f6f7c8758684c11c1611dabb6662d3d76dc419001db710698d220bcefd5102a71b1858906b6b51f9fbfe4a5e8b8d4337807c9a20f00f9349609a88ee10e98187f6a0dbb086d3d2d91646c97e6635c016b6b51f41c6c6162856530d8f262004e6c0695ed1b01a57b8208f4c1f50fc45765b0d9c612b7e9508bbeb8eafcb9887c62dd1ddf15da2d498cd37cf3fbd44c654db261583ab551cea3bc0074d4bb30e24adfa5413dd895d7a4d1c46dd3d6f4fb4369e96a346ed9fcad678846da60b8d044042d7333031de5aa0a4c5fdd0d7cc95005713c270241aabe0b1010c90c20865768b525206f85b3b966d409ce61e49f5edef90e29d9c998b0d09822c7d7a8b459b33d172eb40d81b7bd5c3bc0ba6cadedb883209abfb3b603b6e20c74b1d29aead547399dd277af04db261573dc1683e3630b1294643b840d6d6a3e7a6a5aa8e40ecf0b9309ff9d0a00ae277d079eb1f00f93448708a3d21e01f2686906c2fef762575d806567cb196c36716e6b06e7fed41b7689d32be010da7a5a67dd4accf9b9df6f8ebeeff917b7be4360b08ed5d6d6a3e8a1d1937e38d8c2c44fdff252d1bb67f1a6bc57673fb506dd48b2364bd80d2bdaaf0a1b4c36034af641047a60df60efc3a867df55316e8eef4669be79cb61b38cbc66831a256fd2a05268e236cc0c7795bb0b4703220216b95505262fc5ba3bbeb2bd0b282bb45a925cb36a04c2d7ffa7b5d0cf312cd99e8b5bdeae1d9b64c2b0ec63f226756aa39c026d930a9c0906a9eb0e363f720767850500571395bf4a82e2b87a147bb12bae0cb61b3892d28e9be5d5be0d7cdcefb70bdbdf2186d3d2d4f1d4e24268ddb3f81fda836e81be16cdf6b9265b6fb077e118b7477788085ae6ff0f6a7066063bca11010b5c8f659efff862ae69616bffd3166ccf45a00ae278d70dd2ee4e0483543903b3c2a7672661d06016f74969474d3e6e77dbaed16a4ad9d65adc40df0b6637d83bf0a9bcae53debb9ec547b2cf7f30b5ffe9bdbdf21ccabac28a53b3933024b4a3a6bad03605cdd7069354de572923d967bfb3667a2ec4614ab85d681b022a6f2b94b40bbe37c30c8ea15a05df1b2d02ef8d\\\";\\n\\n    function table(uint index) private pure returns (uint32) {\\n        unchecked {\\n            index *= 4;\\n\\n            uint32 result =\\n                uint32(uint8(TABLE[index    ])) << 24;\\n            result |= uint32(uint8(TABLE[index + 1])) << 16;\\n            result |= uint32(uint8(TABLE[index + 2])) << 8;\\n            result |= uint32(uint8(TABLE[index + 3]));\\n            return result;\\n        }\\n    }\\n\\n    function crc32(bytes memory self, uint offset, uint end) internal pure {\\n        unchecked {\\n            uint32 crc = ~uint32(0);\\n\\n            for (uint ii = offset; ii < end; ii++) {\\n                crc = (crc >> 8) ^ table((crc & 0xff) ^ uint8(self[ii]));\\n            }\\n\\n            crc = ~crc;\\n\\n            self[end    ] = bytes1(uint8(crc >> 24));\\n            self[end + 1] = bytes1(uint8(crc >> 16));\\n            self[end + 2] = bytes1(uint8(crc >> 8));\\n            self[end + 3] = bytes1(uint8(crc));\\n        }\\n    }\\n}\\n\\nlibrary Adler32 {\\n    uint32 constant private MOD = 65521;\\n\\n    function adler32(bytes memory self, uint offset, uint end) internal pure {\\n        unchecked {\\n            uint32 a = 1;\\n            uint32 b = 0;\\n\\n            // Process each byte of the data in order\\n            for (uint ii = offset; ii < end; ii++) {\\n                    a = (a + uint32(uint8(self[ii]))) % MOD;\\n                    b = (b + a) % MOD;\\n            }\\n\\n            uint32 adler = (b << 16) | a;\\n\\n            self[end    ] = bytes1(uint8(adler >> 24));\\n            self[end + 1] = bytes1(uint8(adler >> 16));\\n            self[end + 2] = bytes1(uint8(adler >> 8));\\n            self[end + 3] = bytes1(uint8(adler));\\n        }\\n    }\\n}\\n\\ncontract Render {\\n    using Crc32 for bytes;\\n    using Adler32 for bytes;\\n\\n    uint constant private WIDTH_BYTES = 6;\\n\\n    uint constant private WIDTH_PIXELS = WIDTH_BYTES * 8;\\n    uint constant private LINES = WIDTH_PIXELS;\\n\\n    uint constant private SPRITES_PER_IMAGE = 3;\\n    uint constant private SPRITE_LINE_BYTES = WIDTH_BYTES / SPRITES_PER_IMAGE;\\n    uint constant private SPRITE_BYTES = LINES * SPRITE_LINE_BYTES;\\n    uint constant private SPRITE_LINE_MASK = 0xFFFF;\\n\\n    uint8 constant public EYES = 7;\\n\\n    bytes constant private EYES_X =\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"700e\\\"\\n        hex\\\"381c\\\"\\n        hex\\\"1818\\\"\\n        hex\\\"0c30\\\"\\n        hex\\\"0e70\\\"\\n        hex\\\"07e0\\\"\\n        hex\\\"03c0\\\"\\n        hex\\\"03c0\\\"\\n        hex\\\"0660\\\"\\n        hex\\\"0e70\\\"\\n        hex\\\"1c30\\\"\\n        hex\\\"1818\\\"\\n        hex\\\"381c\\\"\\n        hex\\\"700e\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\";\\n\\n    bytes constant private EYES_CARET =\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0180\\\"\\n        hex\\\"03c0\\\"\\n        hex\\\"07e0\\\"\\n        hex\\\"0e70\\\"\\n        hex\\\"1c38\\\"\\n        hex\\\"381c\\\"\\n        hex\\\"700e\\\"\\n        hex\\\"6006\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\";\\n\\n\\n    bytes constant private EYES_O =\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"07e0\\\"\\n        hex\\\"0ff0\\\"\\n        hex\\\"1c38\\\"\\n        hex\\\"1818\\\"\\n        hex\\\"300c\\\"\\n        hex\\\"300c\\\"\\n        hex\\\"300c\\\"\\n        hex\\\"300c\\\"\\n        hex\\\"300c\\\"\\n        hex\\\"300c\\\"\\n        hex\\\"1818\\\"\\n        hex\\\"1c38\\\"\\n        hex\\\"0ff0\\\"\\n        hex\\\"07e0\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\";\\n\\n\\n    bytes constant private EYES_0 =\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"03c0\\\"\\n        hex\\\"0ff0\\\"\\n        hex\\\"1c38\\\"\\n        hex\\\"1818\\\"\\n        hex\\\"1818\\\"\\n        hex\\\"300c\\\"\\n        hex\\\"300c\\\"\\n        hex\\\"300c\\\"\\n        hex\\\"300c\\\"\\n        hex\\\"300c\\\"\\n        hex\\\"300c\\\"\\n        hex\\\"300c\\\"\\n        hex\\\"300c\\\"\\n        hex\\\"1818\\\"\\n        hex\\\"1818\\\"\\n        hex\\\"1c38\\\"\\n        hex\\\"0ff0\\\"\\n        hex\\\"03c0\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\";\\n\\n\\n    bytes constant private EYES_GT =\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"3800\\\"\\n        hex\\\"3f00\\\"\\n        hex\\\"07c0\\\"\\n        hex\\\"01f8\\\"\\n        hex\\\"003c\\\"\\n        hex\\\"01f8\\\"\\n        hex\\\"07c0\\\"\\n        hex\\\"3f00\\\"\\n        hex\\\"3800\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\";\\n\\n\\n    bytes constant private EYES_LT =\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"001c\\\"\\n        hex\\\"00fc\\\"\\n        hex\\\"03e0\\\"\\n        hex\\\"1f80\\\"\\n        hex\\\"3c00\\\"\\n        hex\\\"1f80\\\"\\n        hex\\\"03e0\\\"\\n        hex\\\"00fc\\\"\\n        hex\\\"001c\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\";\\n\\n\\n    bytes constant private EYES_CRY =\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0004\\\"\\n        hex\\\"0004\\\"\\n        hex\\\"0002\\\"\\n        hex\\\"0002\\\"\\n        hex\\\"0002\\\"\\n        hex\\\"0006\\\"\\n        hex\\\"3ffe\\\"\\n        hex\\\"7ffc\\\"\\n        hex\\\"0630\\\"\\n        hex\\\"1818\\\"\\n        hex\\\"108c\\\"\\n        hex\\\"31c6\\\"\\n        hex\\\"21c6\\\"\\n        hex\\\"6086\\\"\\n        hex\\\"6006\\\"\\n        hex\\\"6006\\\"\\n        hex\\\"310e\\\"\\n        hex\\\"3ffc\\\"\\n        hex\\\"1e78\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0100\\\"\\n        hex\\\"0180\\\"\\n        hex\\\"0380\\\"\\n        hex\\\"0380\\\"\\n        hex\\\"0100\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\";\\n\\n\\n    uint8 constant public NOSES = 3;\\n\\n    bytes constant private NOSES_UNDERSCORE =\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"7ffe\\\"\\n        hex\\\"7ffe\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\";\\n\\n    bytes constant private NOSES_PERIOD =\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0180\\\"\\n        hex\\\"03c0\\\"\\n        hex\\\"0180\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\";\\n\\n\\n    bytes constant private NOSES_CAT =\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"1818\\\"\\n        hex\\\"1818\\\"\\n        hex\\\"3818\\\"\\n        hex\\\"300c\\\"\\n        hex\\\"300c\\\"\\n        hex\\\"318c\\\"\\n        hex\\\"318c\\\"\\n        hex\\\"318c\\\"\\n        hex\\\"318c\\\"\\n        hex\\\"318c\\\"\\n        hex\\\"318c\\\"\\n        hex\\\"3bd8\\\"\\n        hex\\\"1e78\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\"\\n        hex\\\"0000\\\";\\n\\n\\n    bytes constant private HEADER =\\n        hex\\\"89504e470d0a1a0a\\\"                                       // PNG Signature\\n        hex\\\"0000000d49484452000000300000003001030000006dcc6bc4\\\"     // IHDR Chunk\\n        hex\\\"00000006504c5445\\\";                                      // PLTE Chunk (Partial)\\n\\n    bytes constant private IDAT_PREFIX =\\n        hex\\\"0000015b\\\"                                               // Chunk Length\\n        hex\\\"49444154\\\"                                               // \\\"IDAT\\\"\\n        hex\\\"7801015001affe\\\";                                        // zlib header\\n\\n    bytes constant private TRAILER = hex\\\"0000000049454e44ae426082\\\"; // IEND Chunk\\n\\n    function eye(uint8 index) private pure returns (bytes memory) {\\n        require(index < EYES, \\\"eye out of range\\\");\\n\\n        if (0 == index) {\\n            return EYES_0;\\n        } else if (1 == index) {\\n            return EYES_CARET;\\n        } else if (2 == index) {\\n            return EYES_O;\\n        } else if (3 == index) {\\n            return EYES_X;\\n        } else if (4 == index) {\\n            return EYES_GT;\\n        } else if (5 == index) {\\n            return EYES_LT;\\n        } else if (6 == index) {\\n            return EYES_CRY;\\n        } else {\\n            assert(true);\\n            return new bytes(0); // Unreachable?\\n        }\\n    }\\n\\n    function eyeName(uint8 index) public pure returns (string memory) {\\n        require(index < EYES, \\\"eye out of range\\\");\\n\\n        if (0 == index) {\\n            return \\\"0\\\";\\n        } else if (1 == index) {\\n            return \\\"^\\\";\\n        } else if (2 == index) {\\n            return \\\"o\\\";\\n        } else if (3 == index) {\\n            return \\\"x\\\";\\n        } else if (4 == index) {\\n            return \\\">\\\";\\n        } else if (5 == index) {\\n            return \\\"<\\\";\\n        } else if (6 == index) {\\n            return \\\"\\\\u0ca5\\\";\\n        } else {\\n            assert(true);\\n            return new string(0); // Unreachable?\\n        }\\n    }\\n\\n    function nose(uint8 index) private pure returns (bytes memory) {\\n        require(index < NOSES, \\\"nose out of range\\\");\\n\\n        if (0 == index) {\\n            return NOSES_UNDERSCORE;\\n        } else if (1 == index) {\\n            return NOSES_PERIOD;\\n        } else if (2 == index) {\\n            return NOSES_CAT;\\n        } else {\\n            assert(true);\\n            return new bytes(0); // Unreachable?\\n        }\\n    }\\n\\n    function noseName(uint8 index) public pure returns (string memory) {\\n        require(index < NOSES, \\\"nose out of range\\\");\\n\\n        if (0 == index) {\\n            return \\\"_\\\";\\n        } else if (1 == index) {\\n            return \\\".\\\";\\n        } else if (2 == index) {\\n            return \\\"\\\\u03c9\\\";\\n        } else {\\n            assert(true);\\n            return new string(0); // Unreachable?\\n        }\\n    }\\n\\n    function render(bytes memory output, uint offset, uint8 leftEyeIndex, uint8 noseIndex, uint8 rightEyeIndex) private pure {\\n        unchecked {\\n            bytes memory sprite;\\n\\n            sprite = eye(leftEyeIndex);\\n\\n            for (uint line = 0; line < LINES; line++) {\\n                uint inOffset = line * SPRITE_LINE_BYTES;\\n                uint outOffset = 1 + (line * (WIDTH_BYTES + 1));\\n\\n                for (uint column = 0; column < SPRITE_LINE_BYTES; column++) {\\n                    output[offset + outOffset + column] = sprite[inOffset + column];\\n                }\\n            }\\n\\n            sprite = nose(noseIndex);\\n\\n            for (uint line = 0; line < LINES; line++) {\\n                uint inOffset = line * SPRITE_LINE_BYTES;\\n                uint outOffset = 1 + SPRITE_LINE_BYTES + (line * (WIDTH_BYTES + 1));\\n\\n                for (uint column = 0; column < SPRITE_LINE_BYTES; column++) {\\n                    output[offset + outOffset + column] = sprite[inOffset + column];\\n                }\\n            }\\n\\n            sprite = eye(rightEyeIndex);\\n\\n            for (uint line = 0; line < LINES; line++) {\\n                uint inOffset = line * SPRITE_LINE_BYTES;\\n                uint outOffset = 1 + (2 * SPRITE_LINE_BYTES) + (line * (WIDTH_BYTES + 1));\\n\\n                for (uint column = 0; column < SPRITE_LINE_BYTES; column++) {\\n                    output[offset + outOffset + column] = sprite[inOffset + column];\\n                }\\n            }\\n        }\\n    }\\n\\n    function png(bytes3 bg, bytes3 fg, uint8 leftEyeIndex, uint8 noseIndex, uint8 rightEyeIndex) external pure returns (bytes memory) {\\n        unchecked {\\n            uint length = HEADER.length\\n                + bg.length\\n                + fg.length\\n                + 4                         // PLTE CRC32\\n                + IDAT_PREFIX.length\\n                + LINES * (WIDTH_BYTES + 1) // Image Data\\n                + 4                         // zlib adler32\\n                + 4                         // IDAT CRC32\\n                + TRAILER.length;\\n\\n            bytes memory output = new bytes(length);\\n\\n            uint offset = 0;\\n\\n            // Copy the static portion of the header.\\n            for (uint ii = 0; ii < HEADER.length; ii++) {\\n                output[offset++] = HEADER[ii];\\n            }\\n\\n            // Copy the background color.\\n            for (uint ii = 0; ii < bg.length; ii++) {\\n                output[offset++] = bg[ii];\\n            }\\n\\n            // Copy the foreground color.\\n            for (uint ii = 0; ii < fg.length; ii++) {\\n                output[offset++] = fg[ii];\\n            }\\n\\n            // Compute the palette's checksum.\\n            output.crc32(HEADER.length - 4, offset);\\n            offset += 4;\\n\\n            uint idat_data_offset = offset + 4;\\n\\n            // Copy the IDAT prefix.\\n            for (uint ii = 0; ii < IDAT_PREFIX.length; ii++) {\\n                output[offset++] = IDAT_PREFIX[ii];\\n            }\\n\\n            uint image_data_offset = offset;\\n\\n            render(output, offset, leftEyeIndex, noseIndex, rightEyeIndex);\\n\\n            offset += LINES * (WIDTH_BYTES + 1);\\n\\n            output.adler32(image_data_offset, offset);\\n            offset += 4;\\n\\n            output.crc32(idat_data_offset, offset);\\n            offset += 4;\\n\\n            // Copy the trailer.\\n            for (uint ii = 0; ii < TRAILER.length; ii++) {\\n                output[offset++] = TRAILER[ii];\\n            }\\n\\n            return output;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 42069\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract Render\",\"name\":\"renderer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RENDERER\",\"outputs\":[{\"internalType\":\"contract Render\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FaceDotPng","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"42069","ConstructorArguments":"00000000000000000000000066d99d16f510e54c56052af23b7814aa39f40fb7","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}