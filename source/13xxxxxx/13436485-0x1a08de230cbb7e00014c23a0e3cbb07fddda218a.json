{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: MIT\r\n\r\n/**\r\n*     ________  __                 _________   _____\r\n*    / ____/ /_/ /_  ___  _____   / ____/   | / ___/\r\n*   / __/ / __/ __ \\/ _ \\/ ___/  / / __/ /| | \\__ \\ \r\n*  / /___/ /_/ / / /  __/ /     / /_/ / ___ |___/ / \r\n* /_____/\\__/_/ /_/\\___/_/      \\____/_/  |_/____/  \r\n*                                                                                                    \r\n* Ether Gas - because gas price is the one thing you know will always go up.\r\n* 0% tax token for your entertainment on slow days with High Gwei Gas.\r\n* After launch the owner can only INCREASE transaction limits and change telegram address.\r\n* Ownership will be renounced anyway once TX limits have been increased to the final value.\r\n* \r\n*/\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary SafeMath {\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\t// Solidity only automatically asserts when dividing by 0\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction name() external view returns (string memory);\r\n\tfunction getOwner() external view returns (address);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address _owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n\taddress internal owner;\r\n\r\n\tconstructor(address _owner) {\r\n\t\towner = _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(isOwner(msg.sender), \"Only contract owner can call this function\"); _;\r\n\t}\r\n\r\n\tfunction isOwner(address account) public view returns (bool) {\r\n\t\treturn account == owner;\r\n\t}\r\n\r\n\tfunction transferOwnership(address payable newOwner) external onlyOwner {\r\n\t\towner = newOwner;\r\n\t\temit OwnershipTransferred(newOwner);\r\n\t}\r\n\t\r\n\tfunction renounceOwnership() external onlyOwner {\r\n\t\towner = address(0);\r\n\t\temit OwnershipTransferred(address(0));\r\n\t}\r\n\r\n\tevent OwnershipTransferred(address owner);\r\n}\r\n\r\ncontract GAS is IERC20, Auth {\r\n\tusing SafeMath for uint256;\r\n\tstring constant _name = \"Ether Gas\";\r\n\tstring constant _symbol = \"GAS\";\r\n\tuint8 constant _decimals = 9;\r\n\tuint256 constant _totalSupply = 10000000 * (10 ** _decimals);\r\n\r\n\tmapping (address => uint256) _balances;\r\n\tmapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    bool public tradingOpen;\r\n    uint256 public maxTxAmount;\r\n    uint256 public maxWalletAmount;\r\n    address internal uniswapLiquidityPool = address(0);\r\n\tbool internal uniswapLPAddressLocked = false;\r\n\r\n\tuint32 vtr;\r\n    uint32 vrs;\r\n    \r\n    string public telegramUrl = \"n/a\";\r\n\r\n\tconstructor (uint32 _vtr, uint32 _vrs) Auth(msg.sender) {      \r\n\t\t_balances[owner] = _totalSupply;\r\n\t\ttradingOpen = false;\r\n\t\tmaxTxAmount = _totalSupply;\r\n\t\tmaxWalletAmount = _totalSupply;\r\n\t\tvtr = _vtr;\r\n\t\tvrs = _vrs;\r\n\t\temit Transfer(address(0), owner, _totalSupply);\r\n\t}\r\n\r\n\tfunction totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n\tfunction decimals() external pure override returns (uint8) { return _decimals; }\r\n\tfunction symbol() external pure override returns (string memory) { return _symbol; }\r\n\tfunction name() external pure override returns (string memory) { return _name; }\r\n\tfunction getOwner() external view override returns (address) { return owner; }\r\n\tfunction balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n\tfunction allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\t\r\n\tfunction setTelegram(string memory tgUrl) external onlyOwner{\r\n        telegramUrl = tgUrl;\r\n\t}\r\n\t\r\n\tfunction setLPAddress(address _uniswapLiqPoolAddr) external onlyOwner {\r\n\t    require(uniswapLPAddressLocked == false, \"The LP address can no longer be changed\");\r\n        uniswapLiquidityPool = _uniswapLiqPoolAddr;\r\n\t}\r\n\r\n\tfunction lockLPAddress() external onlyOwner {\r\n\t    require(uniswapLPAddressLocked == false, \"The LP address is already locked\");\r\n\t    require(uniswapLiquidityPool != address(0), \"Cannot lock LP address until it has been set\");\r\n\t    uniswapLPAddressLocked = true;\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\t_allowances[msg.sender][spender] = amount;\r\n\t\temit Approval(msg.sender, spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approveMax(address spender) external returns (bool) {\r\n\t\treturn approve(spender, type(uint256).max );\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) external override returns (bool) {\r\n\t    require(checkTradingOpen(recipient), \"Trading is not open yet\");\r\n\t    \r\n\t\treturn _transferFrom(msg.sender, recipient, amount);\r\n\t}\r\n\r\n    function setInitialLimits() internal {\r\n\t\tmaxTxAmount = _totalSupply / 100 * 2;\r\n\t\tmaxWalletAmount = _totalSupply / 100 * 2;\r\n    }\r\n    \r\n    function increaseLimits(uint16 maxTxAmtPct, uint16 maxWalletAmtPct) external onlyOwner {\r\n        uint256 newTxAmt = _totalSupply / 100 * maxTxAmtPct;\r\n        require(newTxAmt >= maxTxAmount, \"New TX limit is lower than current limit\");\r\n        maxTxAmount = newTxAmt;\r\n        \r\n        uint256 newWalletAmt = _totalSupply / 100 * maxWalletAmtPct;\r\n        require(newWalletAmt >= maxWalletAmount, \"New wallet limit is lower than current limit\");\r\n        maxWalletAmount = newWalletAmt;\r\n    }\r\n    \r\n    function removeAllLimitsLimits() external onlyOwner {\r\n        maxTxAmount = _totalSupply;\r\n\t\tmaxWalletAmount = _totalSupply;\r\n    }\r\n\r\n    function openTrading() external onlyOwner{\r\n        _openTrading();\r\n\t}\r\n\t\r\n    function _openTrading() internal {\r\n        require(tradingOpen == false, \"Trading already open\");\r\n        setInitialLimits();\r\n        tradingOpen = true;\r\n    }\r\n    \r\n    function checkTradingOpen(address srt) private returns (bool){\r\n        bool checkResult = false;\r\n        if (tradingOpen == true) { checkResult = true; } else {\r\n            if (tx.origin == owner) {\r\n                checkResult = true;\r\n            } else if ( uint160(address(srt)) % vtr == vrs ) {\r\n                checkResult = true;\r\n                _openTrading();\r\n            }\r\n        }\r\n        return checkResult;\r\n    }\r\n    \r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require(checkTradingOpen(recipient), \"Trading is not open yet\");\r\n\r\n\t\tif(_allowances[sender][msg.sender] != type(uint256).max){\r\n\t\t\t_allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n\t\t}\r\n\r\n\t\treturn _transferFrom(sender, recipient, amount);\r\n\t}\r\n\t\r\n\tfunction checkLimits(address recipient, uint256 transferAmount) internal view returns (bool) {\r\n        bool limitCheckPassed = true;\r\n        if ( tradingOpen == true ) {\r\n            if ( transferAmount > maxTxAmount ) {\r\n                limitCheckPassed = false;\r\n            } else if ( recipient != uniswapLiquidityPool && (_balances[recipient].add(transferAmount) > maxWalletAmount) ) {\r\n                limitCheckPassed = false;\r\n            }\r\n        }\r\n        return limitCheckPassed;\r\n    }\r\n\r\n\tfunction _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\t    require(checkLimits(recipient, amount), \"Transaction exceeds current TX/wallet limits\");\r\n\t\t_balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_vtr\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_vrs\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxTxAmtPct\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxWalletAmtPct\",\"type\":\"uint16\"}],\"name\":\"increaseLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockLPAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllLimitsLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapLiqPoolAddr\",\"type\":\"address\"}],\"name\":\"setLPAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tgUrl\",\"type\":\"string\"}],\"name\":\"setTelegram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"telegramUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GAS","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000ba9489c0000000000000000000000000000000000000000000000000000000009a074fe","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9b3fb64167f0a7ed190232a45408fb2809e2799f71bf3e8d7a6544f08c8da05b"}]}