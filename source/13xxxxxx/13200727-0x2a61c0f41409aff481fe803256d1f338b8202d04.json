{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Sales is Ownable {\r\n    struct SalesInfo{\r\n        uint256 numberofToken;\r\n        uint256 StartSaleTimestamp;\r\n        uint256 EndSaleTimestamp;\r\n        uint256 Raised;\r\n        uint256 minSale;\r\n        uint256 maxSale;\r\n        uint256 Rate;\r\n        uint256 maxSaleRate;\r\n    }\r\n    \r\n    uint256 private releaseTimestamp;\r\n    mapping(uint => SalesInfo) private SalesInfos;\r\n    \r\n    constructor() {\r\n        releaseTimestamp = block.timestamp + 3650 days;\r\n    }\r\n    \r\n    function buyTokens(uint index_, address Referrer_, address Beneficiary_) external virtual payable returns (bool) {}\r\n\r\n    function setAngelSalesInfo(uint256 StartSaleTimestamp_) public virtual onlyOwner {\r\n        _setSalesInfo(1, 30000000 * (uint256(10) ** 18), StartSaleTimestamp_, StartSaleTimestamp_ + 15 days, 0, 1.5 ether, 5 ether, 1000000, 1250000);\r\n    }\r\n    \r\n    function setPrivate1SalesInfo(uint256 StartSaleTimestamp_) public virtual onlyOwner {\r\n        _setSalesInfo(2, 30000000 * (uint256(10) ** 18), StartSaleTimestamp_, StartSaleTimestamp_ + 15 days, 0, 0.02 ether, 1 ether, 500000, 625000);\r\n    }\r\n    \r\n    function setPrivate2SalesInfo(uint256 StartSaleTimestamp_) public virtual onlyOwner {\r\n        _setSalesInfo(3, 30000000 * (uint256(10) ** 18), StartSaleTimestamp_, StartSaleTimestamp_ + 15 days, 0, 0.025 ether, 1 ether, 400000, 480000);\r\n    }\r\n    \r\n    function setPrivate3SalesInfo(uint256 StartSaleTimestamp_) public virtual onlyOwner {\r\n        _setSalesInfo(4, 30000000 * (uint256(10) ** 18), StartSaleTimestamp_, StartSaleTimestamp_ + 15 days, 0, 0.03 ether, 1 ether, 333333, 383333);\r\n    }\r\n    \r\n    function setPrivate4SalesInfo(uint256 StartSaleTimestamp_) public virtual onlyOwner {\r\n        _setSalesInfo(5, 30000000 * (uint256(10) ** 18), StartSaleTimestamp_, StartSaleTimestamp_ + 15 days, 0, 0.035 ether, 1 ether, 285714, 314285);\r\n    }\r\n    \r\n    function setICOSalesInfo(uint256 StartSaleTimestamp_) public virtual onlyOwner {\r\n        _setSalesInfo(6, 150000000 * (uint256(10) ** 18), StartSaleTimestamp_, StartSaleTimestamp_ + 30 days, 0, 0.05 ether, 1 ether, 200000, 210000);\r\n    }\r\n    \r\n    function setPublicSalesInfo(uint256 StartSaleTimestamp_) public virtual onlyOwner {\r\n        releaseTimestamp = StartSaleTimestamp_;\r\n        _setSalesInfo(7, 300000000 * (uint256(10) ** 18), StartSaleTimestamp_, StartSaleTimestamp_ + 365 days, 0, 0.06 ether, 100 ether, 166666, 166666);\r\n    }\r\n    \r\n    function setSalesInfo(uint index_, uint256 numberofToken_, uint256 StartSaleTimestamp_, uint256 EndSaleTimestamp_, uint256 Raised_, uint256 minSale_, uint256 maxSale_, uint256 Rate_, uint256 maxSaleRate_) public virtual onlyOwner {\r\n        _setSalesInfo(index_, numberofToken_, StartSaleTimestamp_, EndSaleTimestamp_, Raised_, minSale_, maxSale_, Rate_, maxSaleRate_);\r\n    }\r\n    \r\n    function _setSalesInfo(uint index_, uint256 numberofToken_, uint256 StartSaleTimestamp_, uint256 EndSaleTimestamp_, uint256 Raised_, uint256 minSale_, uint256 maxSale_, uint256 Rate_, uint256 maxSaleRate_) internal virtual {\r\n        SalesInfos[index_].numberofToken = numberofToken_;\r\n        SalesInfos[index_].StartSaleTimestamp = StartSaleTimestamp_;\r\n        SalesInfos[index_].EndSaleTimestamp = EndSaleTimestamp_;\r\n        SalesInfos[index_].Raised = Raised_;\r\n        SalesInfos[index_].minSale = minSale_;\r\n        SalesInfos[index_].maxSale = maxSale_;\r\n        SalesInfos[index_].Rate = Rate_;\r\n        SalesInfos[index_].maxSaleRate = maxSaleRate_;\r\n    }\r\n    \r\n    function getSalesInfo(uint index) public view virtual returns (SalesInfo memory sale) {\r\n        return SalesInfos[index];\r\n    }\r\n    \r\n    \r\n    function _setnumberofToken(uint index, uint256 numberofToken_) internal virtual {\r\n        SalesInfos[index].numberofToken = numberofToken_;\r\n    }\r\n    \r\n    function _setRaised(uint index, uint256 Raised_) internal virtual {\r\n        SalesInfos[index].Raised = Raised_;\r\n    }\r\n    \r\n    function _getnumberofToken(uint index) internal view virtual returns (uint256) {\r\n        return SalesInfos[index].numberofToken;\r\n    }\r\n    \r\n    function _getStartSaleTimestamp(uint index) internal view virtual returns (uint256) {\r\n        return SalesInfos[index].StartSaleTimestamp;\r\n    }\r\n    \r\n    function _getEndSaleTimestamp(uint index) internal view virtual returns (uint256) {\r\n        return SalesInfos[index].EndSaleTimestamp;\r\n    }\r\n    \r\n    function _getRaised(uint index) internal view virtual returns (uint256) {\r\n        return SalesInfos[index].Raised;\r\n    }\r\n    \r\n    function _getminSale(uint index) internal view virtual returns (uint256) {\r\n        return SalesInfos[index].minSale;\r\n    }\r\n    \r\n    function _getmaxSale(uint index) internal view virtual returns (uint256) {\r\n        return SalesInfos[index].maxSale;\r\n    }\r\n    \r\n    function _getRate(uint index) internal view virtual returns (uint256) {\r\n        return SalesInfos[index].Rate;\r\n    }\r\n    \r\n    function _getmaxSaleRate(uint index) internal view virtual returns (uint256) {\r\n        return SalesInfos[index].maxSaleRate;\r\n    }\r\n    \r\n    function _getReleaseTimestamp() internal view virtual returns (uint256) {\r\n        return releaseTimestamp;\r\n    }\r\n    \r\n    function getReleaseTimestamp() public view virtual returns (uint256) {\r\n        return releaseTimestamp;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract AMR is Context, IERC20, IERC20Metadata, Ownable, Sales {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    \r\n    \r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 raised;\r\n    }\r\n    \r\n    mapping(address => mapping(uint => UserInfo)) private UserInfos;\r\n    mapping(address => address) private UserReferrer;\r\n    \r\n    uint256[] private refIncomePercent;\r\n    uint256 private TotalMintandSupply;\r\n    \r\n    constructor() {\r\n        _name = \"Alpha Machina\";\r\n        _symbol = \"AMR\";\r\n        _totalSupply = 2460000000 * (uint256(10) ** 18);\r\n        \r\n        TotalMintandSupply = 3690000000 * (uint256(10) ** 18);\r\n        \r\n        refIncomePercent.push(10);\r\n        refIncomePercent.push(6);\r\n        refIncomePercent.push(5);\r\n        refIncomePercent.push(4);\r\n        refIncomePercent.push(3);\r\n        refIncomePercent.push(2);\r\n\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    function burn(uint256 amount) public virtual onlyOwner {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n    \r\n    function mint(uint256 amount) public virtual onlyOwner {\r\n        require(TotalMintandSupply >= _totalSupply + amount, \"AMR: all reserve token minted\");\r\n        _mint(_msgSender(), amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {\r\n        if (from != owner())\r\n            require(block.timestamp >= _getReleaseTimestamp(), \"AMR: current time is before release time\");\r\n    }\r\n\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n    \r\n    \r\n    function transferAnyERC20Token(address tokenAddress, uint256 amount) public onlyOwner returns (bool success) {\r\n        return IERC20(tokenAddress).transfer(_msgSender(), amount);\r\n    }\r\n    \r\n    function transferAnyETH(uint256 amount) public onlyOwner {\r\n        (bool sent, ) = _msgSender().call{value: amount}(\"\");\r\n        require(sent, \"AMR: failed to send ether\");\r\n    }\r\n    \r\n    function buyTokens(uint index_, address Referrer_, address Beneficiary_) public virtual override payable returns (bool) {\r\n        require(msg.value >= _getminSale(index_), \"AMR: less than minimum sale\");\r\n        require(msg.value <= _getmaxSale(index_), \"AMR: greater than maximum sale\");\r\n        require(block.timestamp >= _getStartSaleTimestamp(index_), \"AMR: befor sale start time\");\r\n        require(block.timestamp <= _getEndSaleTimestamp(index_), \"AMR: after sale end time\");\r\n        require(Referrer_ != Beneficiary_, \"AMR: can't refer yourself\");\r\n        \r\n        uint256 amountTokens = 0;\r\n        \r\n        if (msg.value == _getmaxSale(index_)) {\r\n            amountTokens = msg.value * _getmaxSaleRate(index_);\r\n        }\r\n        else {\r\n            amountTokens = msg.value * _getRate(index_);\r\n        }\r\n        \r\n        require(amountTokens <= _getnumberofToken(index_), \"AMR: not enough token\");\r\n        require(UserInfos[Beneficiary_][index_].raised + msg.value <= _getmaxSale(index_), \"AMR: you bought your share\");\r\n        \r\n        _setnumberofToken(index_, _getnumberofToken(index_) - amountTokens);\r\n        _setRaised(index_, _getRaised(index_) + msg.value);\r\n\r\n        UserReferrer[Beneficiary_] = Referrer_;\r\n        \r\n        UserInfos[Beneficiary_][index_].raised += msg.value;\r\n        UserInfos[Beneficiary_][index_].amount += amountTokens;\r\n        \r\n        distributeReferralIncome(Beneficiary_, amountTokens, index_);\r\n\r\n        _transfer(owner(), Beneficiary_, amountTokens);\r\n        \r\n        emit TokenBought(Beneficiary_, index_, amountTokens, Referrer_);\r\n        return true;\r\n    }\r\n    \r\n    function distributeReferralIncome(address _user, uint256 _amount, uint _phaseNo) internal returns (uint256) {\r\n        uint256 sumDistributed = 0;\r\n        address ref = UserReferrer[_user];\r\n        \r\n        for (uint256 i = 0; i < 6; i++) {\r\n            if (ref == address(0)) {\r\n                break;\r\n            }\r\n            \r\n            uint256 income = _amount * refIncomePercent[i] / 100;\r\n            \r\n            UserInfos[ref][_phaseNo].amount += income;\r\n            \r\n            _transfer(owner(), ref, income);\r\n            \r\n            sumDistributed += income;\r\n            emit ReferralIncomeDistributed(_user, int256(i+1), income, ref);\r\n            \r\n            ref = UserReferrer[ref];\r\n        }\r\n        \r\n        return sumDistributed;\r\n    }\r\n    \r\n    function getUserInfo(uint _phaseNo, address _user) public view returns (UserInfo memory user) {\r\n        return UserInfos[_user][_phaseNo];\r\n    }\r\n    \r\n    function getTotalMintandSupply() public view returns (uint256) {\r\n        return TotalMintandSupply;\r\n    }\r\n\r\n    event TokenStaked(address Sender, uint phaseNo, uint256 amountTokens);\r\n    event withdrawed(address Sender, uint phaseNo, uint256 amountTokens, uint256 reward);\r\n    event ReferralIncomeDistributed(address sender, int256 level, uint256 income, address ref);\r\n    event Distributed(uint256 RewardperShare, uint256 TotalShare);\r\n    event TokenBought(address Sender, uint phaseNo, uint256 amountTokens, address Referrer);\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"RewardperShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TotalShare\",\"type\":\"uint256\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"level\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"income\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"ReferralIncomeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseNo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Referrer\",\"type\":\"address\"}],\"name\":\"TokenBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseNo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseNo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"withdrawed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Referrer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Beneficiary_\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReleaseTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSalesInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"numberofToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StartSaleTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EndSaleTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Raised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSaleRate\",\"type\":\"uint256\"}],\"internalType\":\"struct Sales.SalesInfo\",\"name\":\"sale\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalMintandSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phaseNo\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raised\",\"type\":\"uint256\"}],\"internalType\":\"struct AMR.UserInfo\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"StartSaleTimestamp_\",\"type\":\"uint256\"}],\"name\":\"setAngelSalesInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"StartSaleTimestamp_\",\"type\":\"uint256\"}],\"name\":\"setICOSalesInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"StartSaleTimestamp_\",\"type\":\"uint256\"}],\"name\":\"setPrivate1SalesInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"StartSaleTimestamp_\",\"type\":\"uint256\"}],\"name\":\"setPrivate2SalesInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"StartSaleTimestamp_\",\"type\":\"uint256\"}],\"name\":\"setPrivate3SalesInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"StartSaleTimestamp_\",\"type\":\"uint256\"}],\"name\":\"setPrivate4SalesInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"StartSaleTimestamp_\",\"type\":\"uint256\"}],\"name\":\"setPublicSalesInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberofToken_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StartSaleTimestamp_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EndSaleTimestamp_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Raised_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSale_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSale_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Rate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSaleRate_\",\"type\":\"uint256\"}],\"name\":\"setSalesInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AMR","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1edb844def0a10cf0df609d067e2c3209f39501f1d3a8210a10a841f662827aa"}]}