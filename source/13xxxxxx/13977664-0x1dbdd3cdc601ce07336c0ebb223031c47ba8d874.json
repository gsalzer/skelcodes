{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/vault-managers/CDPManager01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\nimport './BaseCDPManager.sol';\\n\\nimport '../interfaces/IOracleRegistry.sol';\\nimport '../interfaces/IOracleUsd.sol';\\nimport '../interfaces/IWETH.sol';\\nimport '../interfaces/IVault.sol';\\nimport '../interfaces/ICDPRegistry.sol';\\nimport '../interfaces/vault-managers/parameters/IVaultManagerParameters.sol';\\nimport '../interfaces/IVaultParameters.sol';\\nimport '../interfaces/IToken.sol';\\nimport \\\"../interfaces/wrapped-assets/IWrappedAsset.sol\\\";\\n\\nimport '../helpers/ReentrancyGuard.sol';\\nimport '../helpers/SafeMath.sol';\\n\\n/**\\n * @title CDPManager01\\n **/\\ncontract CDPManager01 is BaseCDPManager {\\n    using SafeMath for uint;\\n\\n    address payable public immutable WETH;\\n\\n    /**\\n     * @param _vaultManagerParameters The address of the contract with Vault manager parameters\\n     * @param _oracleRegistry The address of the oracle registry\\n     * @param _cdpRegistry The address of the CDP registry\\n     * @param _vaultManagerBorrowFeeParameters The address of the vault manager borrow fee parameters\\n     **/\\n    constructor(address _vaultManagerParameters, address _oracleRegistry, address _cdpRegistry, address _vaultManagerBorrowFeeParameters)\\n        BaseCDPManager(_vaultManagerParameters, _oracleRegistry, _cdpRegistry, _vaultManagerBorrowFeeParameters)\\n    {\\n        WETH = IVault(IVaultParameters(IVaultManagerParameters(_vaultManagerParameters).vaultParameters()).vault()).weth();\\n    }\\n\\n    // only accept ETH via fallback from the WETH contract\\n    receive() external payable {\\n        require(msg.sender == WETH, \\\"Unit Protocol: RESTRICTED\\\");\\n    }\\n\\n    /**\\n      * @notice Depositing tokens must be pre-approved to Vault address\\n      * @notice Borrow fee in USDP tokens must be pre-approved to CDP manager address\\n      * @notice position actually considered as spawned only when debt > 0\\n      * @dev Deposits collateral and/or borrows USDP\\n      * @param asset The address of the collateral\\n      * @param assetAmount The amount of the collateral to deposit\\n      * @param usdpAmount The amount of USDP token to borrow\\n      **/\\n    function join(address asset, uint assetAmount, uint usdpAmount) public nonReentrant checkpoint(asset, msg.sender) {\\n        require(usdpAmount != 0 || assetAmount != 0, \\\"Unit Protocol: USELESS_TX\\\");\\n\\n        require(IToken(asset).decimals() <= 18, \\\"Unit Protocol: NOT_SUPPORTED_DECIMALS\\\");\\n\\n        if (usdpAmount == 0) {\\n\\n            vault.depositMain(asset, msg.sender, assetAmount);\\n\\n        } else {\\n\\n            _ensureOracle(asset);\\n\\n            bool spawned = vault.debts(asset, msg.sender) != 0;\\n\\n            if (!spawned) {\\n                // spawn a position\\n                vault.spawn(asset, msg.sender, oracleRegistry.oracleTypeByAsset(asset));\\n            }\\n\\n            if (assetAmount != 0) {\\n                vault.depositMain(asset, msg.sender, assetAmount);\\n            }\\n\\n            // mint USDP to owner\\n            vault.borrow(asset, msg.sender, usdpAmount);\\n            _chargeBorrowFee(asset, msg.sender, usdpAmount);\\n\\n            // check collateralization\\n            _ensurePositionCollateralization(asset, msg.sender);\\n\\n        }\\n\\n        // fire an event\\n        emit Join(asset, msg.sender, assetAmount, usdpAmount);\\n    }\\n\\n    /**\\n      * @dev Deposits ETH and/or borrows USDP\\n      * @param usdpAmount The amount of USDP token to borrow\\n      **/\\n    function join_Eth(uint usdpAmount) external payable {\\n\\n        if (msg.value != 0) {\\n            IWETH(WETH).deposit{value: msg.value}();\\n            require(IWETH(WETH).transfer(msg.sender, msg.value), \\\"Unit Protocol: WETH_TRANSFER_FAILED\\\");\\n        }\\n\\n        join(WETH, msg.value, usdpAmount);\\n    }\\n\\n    /**\\n      * @notice Deposit asset, stake it if supported, mint wrapped asset and lock it, borrow USDP\\n      * @notice User must:\\n      * @notice  - preapprove token to wrappedAsset: to deposit asset to wrapped asset for wrapping\\n      * @notice  - preapprove wrapped token to vault: to deposit wrapped asset to vault\\n      * @notice  - preapprove USDP to CDPManager: to charge borrow (issuance) fee\\n      * @param wrappedAsset Address of wrapped asset\\n      * @param assetAmount The amount of the collateral to deposit\\n      * @param usdpAmount The amount of USDP token to borrow\\n      **/\\n    function wrapAndJoin(IWrappedAsset wrappedAsset, uint assetAmount, uint usdpAmount) external {\\n        if (assetAmount != 0) {\\n            wrappedAsset.deposit(msg.sender, assetAmount);\\n        }\\n\\n        join(address(wrappedAsset), assetAmount, usdpAmount);\\n    }\\n\\n    /**\\n      * @notice Tx sender must have a sufficient USDP balance to pay the debt\\n      * @dev Withdraws collateral and repays specified amount of debt\\n      * @param asset The address of the collateral\\n      * @param assetAmount The amount of the collateral to withdraw\\n      * @param usdpAmount The amount of USDP to repay\\n      **/\\n    function exit(address asset, uint assetAmount, uint usdpAmount) public nonReentrant checkpoint(asset, msg.sender) returns (uint) {\\n\\n        // check usefulness of tx\\n        require(assetAmount != 0 || usdpAmount != 0, \\\"Unit Protocol: USELESS_TX\\\");\\n\\n        uint debt = vault.debts(asset, msg.sender);\\n\\n        // catch full repayment\\n        if (usdpAmount > debt) { usdpAmount = debt; }\\n\\n        if (assetAmount == 0) {\\n            _repay(asset, msg.sender, usdpAmount);\\n        } else {\\n            if (debt == usdpAmount) {\\n                vault.withdrawMain(asset, msg.sender, assetAmount);\\n                if (usdpAmount != 0) {\\n                    _repay(asset, msg.sender, usdpAmount);\\n                }\\n            } else {\\n                _ensureOracle(asset);\\n\\n                // withdraw collateral to the owner address\\n                vault.withdrawMain(asset, msg.sender, assetAmount);\\n\\n                if (usdpAmount != 0) {\\n                    _repay(asset, msg.sender, usdpAmount);\\n                }\\n\\n                vault.update(asset, msg.sender);\\n\\n                _ensurePositionCollateralization(asset, msg.sender);\\n            }\\n        }\\n\\n        // fire an event\\n        emit Exit(asset, msg.sender, assetAmount, usdpAmount);\\n\\n        return usdpAmount;\\n    }\\n\\n    /**\\n      * @notice Repayment is the sum of the principal and interest\\n      * @dev Withdraws collateral and repays specified amount of debt\\n      * @param asset The address of the collateral\\n      * @param assetAmount The amount of the collateral to withdraw\\n      * @param repayment The target repayment amount\\n      **/\\n    function exit_targetRepayment(address asset, uint assetAmount, uint repayment) external returns (uint) {\\n\\n        uint usdpAmount = _calcPrincipal(asset, msg.sender, repayment);\\n\\n        return exit(asset, assetAmount, usdpAmount);\\n    }\\n\\n    /**\\n      * @notice Withdraws WETH and converts to ETH\\n      * @param ethAmount ETH amount to withdraw\\n      * @param usdpAmount The amount of USDP token to repay\\n      **/\\n    function exit_Eth(uint ethAmount, uint usdpAmount) public returns (uint) {\\n        usdpAmount = exit(WETH, ethAmount, usdpAmount);\\n        require(IWETH(WETH).transferFrom(msg.sender, address(this), ethAmount), \\\"Unit Protocol: WETH_TRANSFER_FROM_FAILED\\\");\\n        IWETH(WETH).withdraw(ethAmount);\\n        (bool success, ) = msg.sender.call{value:ethAmount}(\\\"\\\");\\n        require(success, \\\"Unit Protocol: ETH_TRANSFER_FAILED\\\");\\n        return usdpAmount;\\n    }\\n\\n    /**\\n      * @notice Repayment is the sum of the principal and interest\\n      * @notice Withdraws WETH and converts to ETH\\n      * @param ethAmount ETH amount to withdraw\\n      * @param repayment The target repayment amount\\n      **/\\n    function exit_Eth_targetRepayment(uint ethAmount, uint repayment) external returns (uint) {\\n        uint usdpAmount = _calcPrincipal(WETH, msg.sender, repayment);\\n        return exit_Eth(ethAmount, usdpAmount);\\n    }\\n\\n    /**\\n      * @notice Withdraws wrapped asset and unwrap it, repays specified amount of debt\\n      * @param wrappedAsset Address of wrapped asset\\n      * @param assetAmount The amount of the collateral to withdrae\\n      * @param usdpAmount The amount of USDP token to repay\\n      **/\\n    function unwrapAndExit(IWrappedAsset wrappedAsset, uint assetAmount, uint usdpAmount) public returns (uint) {\\n        usdpAmount = exit(address(wrappedAsset), assetAmount, usdpAmount);\\n        wrappedAsset.withdraw(msg.sender, assetAmount);\\n\\n        return usdpAmount;\\n    }\\n\\n    /**\\n      * @notice Withdraws wrapped asset and unwrap it, repays specified amount of debt\\n      * @notice Repayment is the sum of the principal and interest\\n      * @param wrappedAsset Address of wrapped asset\\n      * @param assetAmount The amount of the collateral to withdrae\\n      * @param repayment The amount of USDP token to repay\\n      **/\\n    function unwrapAndExitTargetRepayment(IWrappedAsset wrappedAsset, uint assetAmount, uint repayment) public returns (uint) {\\n        uint usdpAmount = _calcPrincipal(address(wrappedAsset), msg.sender, repayment);\\n        return unwrapAndExit(wrappedAsset, assetAmount, usdpAmount);\\n    }\\n\\n    function _ensurePositionCollateralization(address asset, address owner) internal view {\\n        // collateral value of the position in USD\\n        uint usdValue_q112 = getCollateralUsdValue_q112(asset, owner);\\n\\n        // USD limit of the position\\n        uint usdLimit = usdValue_q112 * vaultManagerParameters.initialCollateralRatio(asset) / Q112 / 100;\\n\\n        // revert if collateralization is not enough\\n        require(vault.getTotalDebt(asset, owner) <= usdLimit, \\\"Unit Protocol: UNDERCOLLATERALIZED\\\");\\n    }\\n\\n    // Liquidation Trigger\\n\\n    /**\\n     * @dev Triggers liquidation of a position\\n     * @param asset The address of the collateral token of a position\\n     * @param owner The owner of the position\\n     **/\\n    function triggerLiquidation(address asset, address owner) external nonReentrant {\\n\\n        _ensureOracle(asset);\\n\\n        // USD value of the collateral\\n        uint usdValue_q112 = getCollateralUsdValue_q112(asset, owner);\\n\\n        // reverts if a position is not liquidatable\\n        require(_isLiquidatablePosition(asset, owner, usdValue_q112), \\\"Unit Protocol: SAFE_POSITION\\\");\\n\\n        uint liquidationDiscount_q112 = usdValue_q112.mul(\\n            vaultManagerParameters.liquidationDiscount(asset)\\n        ).div(DENOMINATOR_1E5);\\n\\n        uint initialLiquidationPrice = usdValue_q112.sub(liquidationDiscount_q112).div(Q112);\\n\\n        // sends liquidation command to the Vault\\n        vault.triggerLiquidation(asset, owner, initialLiquidationPrice);\\n\\n        // fire an liquidation event\\n        emit LiquidationTriggered(asset, owner);\\n    }\\n\\n    function getCollateralUsdValue_q112(address asset, address owner) public view returns (uint) {\\n        return IOracleUsd(oracleRegistry.oracleByAsset(asset)).assetToUsd(asset, vault.collaterals(asset, owner));\\n    }\\n\\n    function _ensureOracle(address asset) internal view {\\n        uint oracleType = oracleRegistry.oracleTypeByAsset(asset);\\n        require(oracleType != 0, \\\"Unit Protocol: INVALID_ORACLE_TYPE\\\");\\n        address oracle = oracleRegistry.oracleByType(oracleType);\\n        require(oracle != address(0), \\\"Unit Protocol: DISABLED_ORACLE\\\");\\n    }\\n\\n    /**\\n     * @dev Determines whether a position is liquidatable\\n     * @param asset The address of the collateral\\n     * @param owner The owner of the position\\n     * @return boolean value, whether a position is liquidatable\\n     **/\\n    function isLiquidatablePosition(\\n        address asset,\\n        address owner\\n    ) public view returns (bool) {\\n        uint usdValue_q112 = getCollateralUsdValue_q112(asset, owner);\\n\\n        return _isLiquidatablePosition(asset, owner, usdValue_q112);\\n    }\\n\\n    /**\\n     * @dev Calculates current utilization ratio\\n     * @param asset The address of the collateral\\n     * @param owner The owner of the position\\n     * @return utilization ratio\\n     **/\\n    function utilizationRatio(\\n        address asset,\\n        address owner\\n    ) public view returns (uint) {\\n        uint debt = vault.getTotalDebt(asset, owner);\\n        if (debt == 0) return 0;\\n\\n        uint usdValue_q112 = getCollateralUsdValue_q112(asset, owner);\\n\\n        return debt.mul(100).mul(Q112).div(usdValue_q112);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vault-managers/BaseCDPManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport '../interfaces/IVaultParameters.sol';\\nimport \\\"../interfaces/IOracleRegistry.sol\\\";\\nimport \\\"../interfaces/ICDPRegistry.sol\\\";\\nimport '../interfaces/IToken.sol';\\nimport \\\"../interfaces/vault-managers/parameters/IVaultManagerParameters.sol\\\";\\nimport \\\"../interfaces/vault-managers/parameters/IVaultManagerBorrowFeeParameters.sol\\\";\\n\\nimport \\\"../helpers/ReentrancyGuard.sol\\\";\\nimport '../helpers/TransferHelper.sol';\\nimport \\\"../helpers/SafeMath.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/**\\n * @title BaseCDPManager\\n * @dev all common logic should be moved here in future\\n **/\\nabstract contract BaseCDPManager is ReentrancyGuard {\\n    using SafeMath for uint;\\n\\n    IVault public immutable vault;\\n    IVaultManagerParameters public immutable vaultManagerParameters;\\n    IOracleRegistry public immutable oracleRegistry;\\n    ICDPRegistry public immutable cdpRegistry;\\n    IVaultManagerBorrowFeeParameters public immutable vaultManagerBorrowFeeParameters;\\n    IERC20 public immutable usdp;\\n\\n    uint public constant Q112 = 2 ** 112;\\n    uint public constant DENOMINATOR_1E5 = 1e5;\\n\\n    /**\\n     * @dev Trigger when joins are happened\\n    **/\\n    event Join(address indexed asset, address indexed owner, uint main, uint usdp);\\n\\n    /**\\n     * @dev Trigger when exits are happened\\n    **/\\n    event Exit(address indexed asset, address indexed owner, uint main, uint usdp);\\n\\n    /**\\n     * @dev Trigger when liquidations are initiated\\n    **/\\n    event LiquidationTriggered(address indexed asset, address indexed owner);\\n\\n    modifier checkpoint(address asset, address owner) {\\n        _;\\n        cdpRegistry.checkpoint(asset, owner);\\n    }\\n\\n    /**\\n     * @param _vaultManagerParameters The address of the contract with Vault manager parameters\\n     * @param _oracleRegistry The address of the oracle registry\\n     * @param _cdpRegistry The address of the CDP registry\\n     * @param _vaultManagerBorrowFeeParameters The address of the vault manager borrow fee parameters\\n     **/\\n    constructor(address _vaultManagerParameters, address _oracleRegistry, address _cdpRegistry, address _vaultManagerBorrowFeeParameters) {\\n        require(\\n            _vaultManagerParameters != address(0) &&\\n            _oracleRegistry != address(0) &&\\n            _cdpRegistry != address(0) &&\\n            _vaultManagerBorrowFeeParameters != address(0),\\n            \\\"Unit Protocol: INVALID_ARGS\\\"\\n        );\\n        vaultManagerParameters = IVaultManagerParameters(_vaultManagerParameters);\\n        IVault vaultLocal = IVault(IVaultParameters(IVaultManagerParameters(_vaultManagerParameters).vaultParameters()).vault());\\n        vault = vaultLocal;\\n        oracleRegistry = IOracleRegistry(_oracleRegistry);\\n        cdpRegistry = ICDPRegistry(_cdpRegistry);\\n        vaultManagerBorrowFeeParameters = IVaultManagerBorrowFeeParameters(_vaultManagerBorrowFeeParameters);\\n        usdp = IERC20(vaultLocal.usdp());\\n    }\\n\\n    /**\\n     * @notice Charge borrow fee if needed\\n     */\\n    function _chargeBorrowFee(address asset, address user, uint usdpAmount) internal {\\n        uint borrowFee = vaultManagerBorrowFeeParameters.calcBorrowFeeAmount(asset, usdpAmount);\\n        if (borrowFee == 0) { // very small amount case\\n            return;\\n        }\\n\\n        // to fail with concrete reason, not with TRANSFER_FROM_FAILED from safeTransferFrom\\n        require(usdp.allowance(user, address(this)) >= borrowFee, \\\"Unit Protocol: BORROW_FEE_NOT_APPROVED\\\");\\n\\n        TransferHelper.safeTransferFrom(\\n            address(usdp),\\n            user,\\n            vaultManagerBorrowFeeParameters.feeReceiver(),\\n            borrowFee\\n        );\\n    }\\n\\n    // decreases debt\\n    function _repay(address asset, address owner, uint usdpAmount) internal {\\n        uint fee = vault.calculateFee(asset, owner, usdpAmount);\\n        vault.chargeFee(vault.usdp(), owner, fee);\\n\\n        // burn USDP from the owner's balance\\n        uint debtAfter = vault.repay(asset, owner, usdpAmount);\\n        if (debtAfter == 0) {\\n            // clear unused storage\\n            vault.destroy(asset, owner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates liquidation price\\n     * @param asset The address of the collateral\\n     * @param owner The owner of the position\\n     * @return Q112-encoded liquidation price\\n     **/\\n    function liquidationPrice_q112(\\n        address asset,\\n        address owner\\n    ) external view returns (uint) {\\n        uint debt = vault.getTotalDebt(asset, owner);\\n        if (debt == 0) return uint(-1);\\n\\n        uint collateralLiqPrice = debt.mul(100).mul(Q112).div(vaultManagerParameters.liquidationRatio(asset));\\n\\n        require(IToken(asset).decimals() <= 18, \\\"Unit Protocol: NOT_SUPPORTED_DECIMALS\\\");\\n\\n        return collateralLiqPrice / vault.collaterals(asset, owner) / 10 ** (18 - IToken(asset).decimals());\\n    }\\n\\n    function _calcPrincipal(address asset, address owner, uint repayment) internal view returns (uint) {\\n        uint fee = vault.stabilityFee(asset, owner) * (block.timestamp - vault.lastUpdate(asset, owner)) / 365 days;\\n        return repayment * DENOMINATOR_1E5 / (DENOMINATOR_1E5 + fee);\\n    }\\n\\n    /**\\n     * @dev Determines whether a position is liquidatable\\n     * @param asset The address of the collateral\\n     * @param owner The owner of the position\\n     * @param usdValue_q112 Q112-encoded USD value of the collateral\\n     * @return boolean value, whether a position is liquidatable\\n     **/\\n    function _isLiquidatablePosition(\\n        address asset,\\n        address owner,\\n        uint usdValue_q112\\n    ) internal view returns (bool) {\\n        uint debt = vault.getTotalDebt(asset, owner);\\n\\n        // position is collateralized if there is no debt\\n        if (debt == 0) return false;\\n\\n        return debt.mul(100).mul(Q112).div(usdValue_q112) >= vaultManagerParameters.liquidationRatio(asset);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracleRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IOracleRegistry {\\n\\n    struct Oracle {\\n        uint oracleType;\\n        address oracleAddress;\\n    }\\n\\n    function WETH (  ) external view returns ( address );\\n    function getKeydonixOracleTypes (  ) external view returns ( uint256[] memory );\\n    function getOracles (  ) external view returns ( Oracle[] memory foundOracles );\\n    function keydonixOracleTypes ( uint256 ) external view returns ( uint256 );\\n    function maxOracleType (  ) external view returns ( uint256 );\\n    function oracleByAsset ( address asset ) external view returns ( address );\\n    function oracleByType ( uint256 ) external view returns ( address );\\n    function oracleTypeByAsset ( address ) external view returns ( uint256 );\\n    function oracleTypeByOracle ( address ) external view returns ( uint256 );\\n    function setKeydonixOracleTypes ( uint256[] memory _keydonixOracleTypes ) external;\\n    function setOracle ( uint256 oracleType, address oracle ) external;\\n    function setOracleTypeForAsset ( address asset, uint256 oracleType ) external;\\n    function setOracleTypeForAssets ( address[] memory assets, uint256 oracleType ) external;\\n    function unsetOracle ( uint256 oracleType ) external;\\n    function unsetOracleForAsset ( address asset ) external;\\n    function unsetOracleForAssets ( address[] memory assets ) external;\\n    function vaultParameters (  ) external view returns ( address );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracleUsd.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IOracleUsd {\\n\\n    // returns Q112-encoded value\\n    // returned value 10**18 * 2**112 is $1\\n    function assetToUsd(address asset, uint amount) external view returns (uint);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IVault {\\n    function DENOMINATOR_1E2 (  ) external view returns ( uint256 );\\n    function DENOMINATOR_1E5 (  ) external view returns ( uint256 );\\n    function borrow ( address asset, address user, uint256 amount ) external returns ( uint256 );\\n    function calculateFee ( address asset, address user, uint256 amount ) external view returns ( uint256 );\\n    function changeOracleType ( address asset, address user, uint256 newOracleType ) external;\\n    function chargeFee ( address asset, address user, uint256 amount ) external;\\n    function col (  ) external view returns ( address );\\n    function colToken ( address, address ) external view returns ( uint256 );\\n    function collaterals ( address, address ) external view returns ( uint256 );\\n    function debts ( address, address ) external view returns ( uint256 );\\n    function depositCol ( address asset, address user, uint256 amount ) external;\\n    function depositEth ( address user ) external payable;\\n    function depositMain ( address asset, address user, uint256 amount ) external;\\n    function destroy ( address asset, address user ) external;\\n    function getTotalDebt ( address asset, address user ) external view returns ( uint256 );\\n    function lastUpdate ( address, address ) external view returns ( uint256 );\\n    function liquidate ( address asset, address positionOwner, uint256 mainAssetToLiquidator, uint256 colToLiquidator, uint256 mainAssetToPositionOwner, uint256 colToPositionOwner, uint256 repayment, uint256 penalty, address liquidator ) external;\\n    function liquidationBlock ( address, address ) external view returns ( uint256 );\\n    function liquidationFee ( address, address ) external view returns ( uint256 );\\n    function liquidationPrice ( address, address ) external view returns ( uint256 );\\n    function oracleType ( address, address ) external view returns ( uint256 );\\n    function repay ( address asset, address user, uint256 amount ) external returns ( uint256 );\\n    function spawn ( address asset, address user, uint256 _oracleType ) external;\\n    function stabilityFee ( address, address ) external view returns ( uint256 );\\n    function tokenDebts ( address ) external view returns ( uint256 );\\n    function triggerLiquidation ( address asset, address positionOwner, uint256 initialPrice ) external;\\n    function update ( address asset, address user ) external;\\n    function usdp (  ) external view returns ( address );\\n    function vaultParameters (  ) external view returns ( address );\\n    function weth (  ) external view returns ( address payable );\\n    function withdrawCol ( address asset, address user, uint256 amount ) external;\\n    function withdrawEth ( address user, uint256 amount ) external;\\n    function withdrawMain ( address asset, address user, uint256 amount ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICDPRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICDPRegistry {\\n\\n    struct CDP {\\n        address asset;\\n        address owner;\\n    }\\n\\n    function batchCheckpoint ( address[] calldata assets, address[] calldata owners ) external;\\n    function batchCheckpointForAsset ( address asset, address[] calldata owners ) external;\\n    function checkpoint ( address asset, address owner ) external;\\n    function cr (  ) external view returns ( address );\\n    function getAllCdps (  ) external view returns ( CDP[] memory r );\\n    function getCdpsByCollateral ( address asset ) external view returns ( CDP[] memory cdps );\\n    function getCdpsByOwner ( address owner ) external view returns ( CDP[] memory r );\\n    function getCdpsCount (  ) external view returns ( uint256 totalCdpCount );\\n    function getCdpsCountForCollateral ( address asset ) external view returns ( uint256 );\\n    function isAlive ( address asset, address owner ) external view returns ( bool );\\n    function isListed ( address asset, address owner ) external view returns ( bool );\\n    function vault (  ) external view returns ( address );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault-managers/parameters/IVaultManagerParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IVaultManagerParameters {\\n    function devaluationPeriod ( address ) external view returns ( uint256 );\\n    function initialCollateralRatio ( address ) external view returns ( uint256 );\\n    function liquidationDiscount ( address ) external view returns ( uint256 );\\n    function liquidationRatio ( address ) external view returns ( uint256 );\\n    function maxColPercent ( address ) external view returns ( uint256 );\\n    function minColPercent ( address ) external view returns ( uint256 );\\n    function setColPartRange ( address asset, uint256 min, uint256 max ) external;\\n    function setCollateral (\\n        address asset,\\n        uint256 stabilityFeeValue,\\n        uint256 liquidationFeeValue,\\n        uint256 initialCollateralRatioValue,\\n        uint256 liquidationRatioValue,\\n        uint256 liquidationDiscountValue,\\n        uint256 devaluationPeriodValue,\\n        uint256 usdpLimit,\\n        uint256[] calldata oracles,\\n        uint256 minColP,\\n        uint256 maxColP\\n    ) external;\\n    function setDevaluationPeriod ( address asset, uint256 newValue ) external;\\n    function setInitialCollateralRatio ( address asset, uint256 newValue ) external;\\n    function setLiquidationDiscount ( address asset, uint256 newValue ) external;\\n    function setLiquidationRatio ( address asset, uint256 newValue ) external;\\n    function vaultParameters (  ) external view returns ( address );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IVaultParameters {\\n    function canModifyVault ( address ) external view returns ( bool );\\n    function foundation (  ) external view returns ( address );\\n    function isManager ( address ) external view returns ( bool );\\n    function isOracleTypeEnabled ( uint256, address ) external view returns ( bool );\\n    function liquidationFee ( address ) external view returns ( uint256 );\\n    function setCollateral ( address asset, uint256 stabilityFeeValue, uint256 liquidationFeeValue, uint256 usdpLimit, uint256[] calldata oracles ) external;\\n    function setFoundation ( address newFoundation ) external;\\n    function setLiquidationFee ( address asset, uint256 newValue ) external;\\n    function setManager ( address who, bool permit ) external;\\n    function setOracleType ( uint256 _type, address asset, bool enabled ) external;\\n    function setStabilityFee ( address asset, uint256 newValue ) external;\\n    function setTokenDebtLimit ( address asset, uint256 limit ) external;\\n    function setVaultAccess ( address who, bool permit ) external;\\n    function stabilityFee ( address ) external view returns ( uint256 );\\n    function tokenDebtLimit ( address ) external view returns ( uint256 );\\n    function vault (  ) external view returns ( address );\\n    function vaultParameters (  ) external view returns ( address );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IToken {\\n    function decimals() external view returns (uint8);\\n}\"\r\n    },\r\n    \"contracts/interfaces/wrapped-assets/IWrappedAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWrappedAsset is IERC20 /* IERC20WithOptional */ {\\n\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event PositionMoved(address indexed userFrom, address indexed userTo, uint256 amount);\\n\\n    /**\\n     * @notice Get underlying token\\n     */\\n    function getUnderlyingToken() external view returns (IERC20);\\n\\n    /**\\n     * @notice deposit underlying token and send wrapped token to user\\n     * @dev Important! Only user or trusted contracts must be able to call this method\\n     */\\n    function deposit(address _userAddr, uint256 _amount) external;\\n\\n    /**\\n     * @notice get wrapped token and return underlying\\n     * @dev Important! Only user or trusted contracts must be able to call this method\\n     */\\n    function withdraw(address _userAddr, uint256 _amount) external;\\n\\n    /**\\n     * @notice get pending reward amount for user if reward is supported\\n     */\\n    function pendingReward(address _userAddr) external view returns (uint256);\\n\\n    /**\\n     * @notice claim pending reward for user if reward is supported\\n     */\\n    function claimReward(address _userAddr) external;\\n\\n    /**\\n     * @notice Manually move position (or its part) to another user (for example in case of liquidation)\\n     * @dev Important! Only trusted contracts must be able to call this method\\n     */\\n    function movePosition(address _userAddrFrom, address _userAddrTo, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n    /**\\n    * @dev Multiplies two numbers, throws on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, throws on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/vault-managers/parameters/IVaultManagerBorrowFeeParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IVaultManagerBorrowFeeParameters {\\n\\n    /**\\n     * @notice 1 = 100% = 10000 basis points\\n     **/\\n    function BASIS_POINTS_IN_1() external view returns (uint);\\n\\n    /**\\n     * @notice Borrow fee receiver\\n     **/\\n    function feeReceiver() external view returns (address);\\n\\n    /**\\n     * @notice Sets the borrow fee receiver. Only manager is able to call this function\\n     * @param newFeeReceiver The address of fee receiver\\n     **/\\n    function setFeeReceiver(address newFeeReceiver) external;\\n\\n    /**\\n     * @notice Sets the base borrow fee in basis points (1bp = 0.01% = 0.0001). Only manager is able to call this function\\n     * @param newBaseBorrowFeeBasisPoints The borrow fee in basis points\\n     **/\\n    function setBaseBorrowFee(uint16 newBaseBorrowFeeBasisPoints) external;\\n\\n    /**\\n     * @notice Sets the borrow fee for a particular collateral in basis points (1bp = 0.01% = 0.0001). Only manager is able to call this function\\n     * @param asset The address of the main collateral token\\n     * @param newEnabled Is custom fee enabled for asset\\n     * @param newFeeBasisPoints The borrow fee in basis points\\n     **/\\n    function setAssetBorrowFee(address asset, bool newEnabled, uint16 newFeeBasisPoints) external;\\n\\n    /**\\n     * @notice Returns borrow fee for particular collateral in basis points (1bp = 0.01% = 0.0001)\\n     * @param asset The address of the main collateral token\\n     * @return feeBasisPoints The borrow fee in basis points\\n     **/\\n    function getBorrowFee(address asset) external view returns (uint16 feeBasisPoints);\\n\\n    /**\\n     * @notice Returns borrow fee for usdp amount for particular collateral\\n     * @param asset The address of the main collateral token\\n     * @return The borrow fee\\n     **/\\n    function calcBorrowFeeAmount(address asset, uint usdpAmount) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManagerParameters\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cdpRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultManagerBorrowFeeParameters\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"main\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdp\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"main\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdp\",\"type\":\"uint256\"}],\"name\":\"Join\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LiquidationTriggered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR_1E5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Q112\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdpRegistry\",\"outputs\":[{\"internalType\":\"contract ICDPRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdpAmount\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdpAmount\",\"type\":\"uint256\"}],\"name\":\"exit_Eth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayment\",\"type\":\"uint256\"}],\"name\":\"exit_Eth_targetRepayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayment\",\"type\":\"uint256\"}],\"name\":\"exit_targetRepayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getCollateralUsdValue_q112\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isLiquidatablePosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdpAmount\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdpAmount\",\"type\":\"uint256\"}],\"name\":\"join_Eth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"liquidationPrice_q112\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRegistry\",\"outputs\":[{\"internalType\":\"contract IOracleRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"triggerLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWrappedAsset\",\"name\":\"wrappedAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdpAmount\",\"type\":\"uint256\"}],\"name\":\"unwrapAndExit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWrappedAsset\",\"name\":\"wrappedAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayment\",\"type\":\"uint256\"}],\"name\":\"unwrapAndExitTargetRepayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdp\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"utilizationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManagerBorrowFeeParameters\",\"outputs\":[{\"internalType\":\"contract IVaultManagerBorrowFeeParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManagerParameters\",\"outputs\":[{\"internalType\":\"contract IVaultManagerParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWrappedAsset\",\"name\":\"wrappedAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdpAmount\",\"type\":\"uint256\"}],\"name\":\"wrapAndJoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CDPManager01","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000203153522b9eaef4ae17c6e99851ee7b2f7d312e00000000000000000000000075fbfe26b21fd3ea008af0c764949f8214150c8f0000000000000000000000001a5ff58bc3246eb233fea20d32b79b5f01ec650c000000000000000000000000cba7154bfbf898d9ab0cf0e259abab6ccbfb4894","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}