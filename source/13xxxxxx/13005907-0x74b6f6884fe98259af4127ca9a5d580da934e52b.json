{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n\r\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\r\n// Subject to the MIT license.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction underflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n/**\r\n * @title FeswSponsor contract\r\n * @dev To raise sponsor and give away FESW\r\n */\r\n\r\ncontract FeswSponsor { \r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Public variables\r\n    // FeSwap sponsor raising target: 1000 ETH\r\n    uint256 public constant TARGET_RAISING_ETH = 1_000e18;    \r\n\r\n    // FeSwap sponsor raising cap: 1001 ETH\r\n    uint256 public constant MIN_GUARANTEE_ETH = 1e18;    \r\n\r\n    // Initial FESW giveaway rate per ETH: 100K FESW/ETH\r\n    uint256 public constant INITIAL_FESW_RATE_PER_ETH = 100_000;    \r\n\r\n    // FESW giveaway change rate for total sponsored ETH, corresponding granulity is 0.05ETH\r\n    uint256 public constant FESW_CHANGE_RATE_VERSUS_ETH = 20; \r\n\r\n    // FESW sponsor raising duration: 30 days \r\n    uint256 public constant SPONSOR_DURATION = 30 * 24 * 3600;     \r\n\r\n    // contract of Feswap DAO Token\r\n    address public FeswapToken;     \r\n\r\n    // Feswap foundation address\r\n    address public FeswapFund;     \r\n\r\n    // Feswap Burner address\r\n    address public FeswapBurner;     \r\n\r\n    // Total received ETH\r\n    uint256 public TotalETHReceived;   \r\n\r\n    // Current giveaway rate\r\n    uint256 public CurrentGiveRate;    \r\n\r\n    // Sponsor start timestamp\r\n    uint64 public SponsorStartTime;\r\n\r\n    // Last block timestamp\r\n    uint64 public LastBlockTime;\r\n\r\n    // If sponsor raising finalized\r\n    uint64 public SponsorFinalized;\r\n\r\n    // Events for received sponsor\r\n    event EvtSponsorReceived(address indexed from, address indexed to, uint256 ethValue);\r\n\r\n    // Events for finalized sponsor\r\n    event EvtSponsorFinalized(address indexed to, uint256 ethValue);\r\n  \r\n    /**\r\n     * @dev Initializes the contract with fund and burner address\r\n     */\r\n    constructor (address feswapToken, address feswapFund, address feswapBurner, uint256 sponsorStartTime ) \r\n    {\r\n        FeswapToken         = feswapToken;\r\n        FeswapFund          = feswapFund; \r\n        FeswapBurner        = feswapBurner; \r\n        SponsorStartTime    = uint64(sponsorStartTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Receive the sponsorship\r\n     * @param feswapReceiver The address receiving the giveaway FESW token\r\n     */\r\n    function Sponsor(address feswapReceiver) external payable returns (uint256 sponsorAccepted) {\r\n        require(block.timestamp >= SponsorStartTime, 'FESW: SPONSOR NOT STARTED');\r\n        require(block.timestamp < (SponsorStartTime + SPONSOR_DURATION), 'FESW: SPONSOR ENDED');\r\n        require(TotalETHReceived < TARGET_RAISING_ETH, 'FESW: SPONSOR COMPLETED');\r\n\r\n        // calculate the giveaway rate\r\n        uint256 feswGiveRate;\r\n        if(block.timestamp > LastBlockTime) {\r\n            // granulity is 0.05 ETH\r\n            feswGiveRate = INITIAL_FESW_RATE_PER_ETH - TotalETHReceived.mul(FESW_CHANGE_RATE_VERSUS_ETH).div(1e18);\r\n            CurrentGiveRate = feswGiveRate;\r\n            LastBlockTime = uint64(block.timestamp);\r\n        } else {\r\n            feswGiveRate = CurrentGiveRate;\r\n        }\r\n\r\n        // Maximum 1001 ETH accepted, extra ETH will be returned back\r\n        sponsorAccepted = TARGET_RAISING_ETH - TotalETHReceived;\r\n        if(sponsorAccepted < MIN_GUARANTEE_ETH){\r\n            sponsorAccepted = MIN_GUARANTEE_ETH;\r\n        }\r\n        if (msg.value < sponsorAccepted){\r\n            sponsorAccepted = msg.value;          \r\n        }                                                        \r\n\r\n        // Accumulate total ETH sponsored\r\n        TotalETHReceived += sponsorAccepted;                                                              \r\n\r\n        // FESW give away\r\n        uint256 feswapGiveaway = sponsorAccepted.mul(feswGiveRate);\r\n        TransferHelper.safeTransfer(FeswapToken, feswapReceiver, feswapGiveaway);\r\n \r\n        // return back extra ETH\r\n        if(msg.value > sponsorAccepted){\r\n            TransferHelper.safeTransferETH(msg.sender, msg.value - sponsorAccepted);\r\n        }    \r\n        \r\n        emit EvtSponsorReceived(msg.sender, feswapReceiver, sponsorAccepted);\r\n    }\r\n\r\n    /**\r\n     * @dev Finalize Feswap sponsor raising\r\n     */\r\n    function finalizeSponsor() public {\r\n        require(SponsorFinalized == 0, 'FESW: SPONSOR FINALIZED');\r\n        require(msg.sender == FeswapFund, 'FESW: NOT ALLOWED');\r\n        require( (block.timestamp >= (SponsorStartTime + SPONSOR_DURATION)) \r\n                    || (TotalETHReceived >= TARGET_RAISING_ETH), 'FESW: SPONSOR ONGOING');\r\n\r\n        // If sponsor raising succeeded, burning left FESW\r\n        address to = FeswapBurner;\r\n\r\n        // If sponsor raising failed \r\n        if(TotalETHReceived < TARGET_RAISING_ETH) to = FeswapFund;\r\n\r\n        // Claim or burn the left FESW\r\n        uint256 feswLeft = IERC20(FeswapToken).balanceOf(address(this));\r\n        TransferHelper.safeTransfer(FeswapToken, to, feswLeft);\r\n\r\n        // Claim the raised sponsor\r\n        TransferHelper.safeTransferETH(FeswapFund, address(this).balance );\r\n        SponsorFinalized = 0xA5;\r\n\r\n        emit EvtSponsorFinalized(FeswapFund, TotalETHReceived);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feswapToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feswapFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feswapBurner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sponsorStartTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"}],\"name\":\"EvtSponsorFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"}],\"name\":\"EvtSponsorReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CurrentGiveRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FESW_CHANGE_RATE_VERSUS_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FeswapBurner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FeswapFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FeswapToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_FESW_RATE_PER_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LastBlockTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_GUARANTEE_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPONSOR_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feswapReceiver\",\"type\":\"address\"}],\"name\":\"Sponsor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sponsorAccepted\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SponsorFinalized\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SponsorStartTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TARGET_RAISING_ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalETHReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeSponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FeswSponsor","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000004269eaec0710b874ea55e2aedc8fb66223522bbe0000000000000000000000002d64435239c061c2ff0590afcc8e49c46472ca7f000000000000000000000000d24347c40f4ed36f326f82e3befffaf3b8d436a10000000000000000000000000000000000000000000000000000000061170968","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4c4587c534bc02b59505323a33980f372cb6586bcc0a3de477e7271ee6c3dfd2"}]}