{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Centurion invest.\r\n *Author : Aymen Haddaji\r\n*/\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n* ERC20 Interfacs\r\n*/\r\nabstract contract IERC20 {\r\n    \r\n    function totalSupply() virtual public view returns (uint);\r\n    function balanceOf(address tokenOwner) virtual public view returns (uint);\r\n    function allowance(address sender, address reciever) virtual public view returns (uint);\r\n    function transfer(address to, uint tokens) virtual public returns (bool);\r\n    function approve(address reciever, uint tokens) virtual public returns (bool);\r\n    function transferFrom(address from, address to, uint tokens) virtual public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\ncontract SafeMath {\r\n    \r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    \r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract CIC_COIN is IERC20, SafeMath {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;  \r\n    uint256 public _totalSupply;\r\n    address public owner;\r\n    \r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    \r\n    constructor() public payable {\r\n        name = \"Centurion Invest Coin\";\r\n        symbol = \"CIC\";\r\n        decimals = 2;\r\n        owner = msg.sender;\r\n        _totalSupply =  2400000000 * 10 ** uint256(decimals);   // n decimals \r\n        balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"No permession\");\r\n        _;\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev allowance : Check approved balance\r\n     */\r\n    function allowance(address sender, address reciever) virtual override public view returns (uint remaining) {\r\n        return allowed[sender][reciever];\r\n    }\r\n    \r\n    /**\r\n     * @dev approve : Approve token for spender = reciever\r\n     */ \r\n    function approve(address reciever, uint tokens) virtual override public returns (bool success) {\r\n        require(tokens >= 0, \"Invalid value\");\r\n        allowed[msg.sender][reciever] = tokens;\r\n        emit Approval(msg.sender, reciever, tokens);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev transfer : Transfer token to another etherum address\r\n     */ \r\n    function transfer(address to, uint tokens) virtual override public returns (bool success) {\r\n        require(to != address(0), \"Null address\");                                         \r\n        require(tokens > 0, \"Invalid Value\");\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev transferFrom : Transfer token after approval \r\n     */ \r\n    function transferFrom(address from, address to, uint tokens) virtual override public returns (bool success) {\r\n        require(to != address(0), \"Null address\");\r\n        require(from != address(0), \"Null address\");\r\n        require(tokens > 0, \"Invalid value\"); \r\n        require(tokens <= balances[from], \"Insufficient balance\");\r\n        require(tokens <= allowed[from][msg.sender], \"Insufficient allowance\");\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev totalSupply : Display total supply of token\r\n     */ \r\n    function totalSupply() virtual override public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    /**\r\n     * @dev balanceOf : Displya token balance of given address\r\n     */ \r\n    function balanceOf(address tokenOwner) virtual override public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    \r\n    /**\r\n     * @dev mint : To increase total supply of tokens\r\n     */ \r\n    function mint(uint256 _amount) public onlyOwner returns (bool) {\r\n        require(_amount >= 0, \"Invalid amount\");\r\n        _totalSupply = safeAdd(_totalSupply, _amount);\r\n        balances[owner] = safeAdd(balances[owner], _amount);\r\n        return true;\r\n    }\r\n    \r\n     /**\r\n     * @dev burn : To decrease total supply of tokens\r\n     */ \r\n    function burn(uint256 _amount) public returns (bool) {\r\n        require(_amount >= 0, \"Invalid amount\");\r\n        require(owner == msg.sender, \"UnAuthorized\");\r\n        require(_amount <= balances[msg.sender], \"Insufficient Balance\");\r\n        _totalSupply = safeSub(_totalSupply, _amount);\r\n        balances[owner] = safeSub(balances[owner], _amount);\r\n        emit Transfer(owner, address(0), _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    *@dev send_bonus : set and send ammount of bonus.\r\n    *\r\n    */\r\n    function send_bonus(address to, uint bonus) virtual public returns (bool success) {\r\n        transfer(to, bonus);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    *@dev send_bonus : set and send ammount of bonus.\r\n    *\r\n    */\r\n    function send_referral(address to, uint referamt) virtual public returns (bool success) {\r\n        transfer(to, referamt);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"send_bonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referamt\",\"type\":\"uint256\"}],\"name\":\"send_referral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CIC_COIN","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7394de246b37e9abb07c3061102223c86730f29dcef948e41b4502a332db78c5"}]}