{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\nTelegram: https://t.me/CatsVsDogeeth\r\n*/\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.7;\r\nlibrary Address {\r\nfunction isContract(address account) internal view returns (bool) {\r\nbytes32 codehash;\r\nbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\nassembly { codehash := extcodehash(account) }\r\nreturn (codehash != accountHash && codehash != 0x0); }\r\nfunction sendValue(address payable recipient, uint256 amount) internal { require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n(bool success, ) = recipient.call{ value: amount }(\"\");\r\nrequire(success, \"Address: unable to send value, recipient may have reverted\"); }\r\nfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\nreturn functionCall(target, data, \"Address: low-level call failed\");\r\n\r\n}\r\nfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\nreturn _functionCallWithValue(target, data, 0, errorMessage); }\r\nfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\nreturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n}\r\nfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\nrequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\nreturn _functionCallWithValue(target, data, value, errorMessage); }\r\nfunction _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\nrequire(isContract(target), \"Address: call to non-contract\");\r\n(bool success, bytes memory returndata) = target.call{ value: weiValue }(data); if (success) {\r\nreturn returndata; } else {\r\nif (returndata.length > 0) { assembly {\r\nlet returndata_size := mload(returndata)\r\n\r\nrevert(add(32, returndata), returndata_size) }\r\n} else { revert(errorMessage);\r\n} }\r\n} }\r\nabstract contract Context {\r\nfunction _msgSender() internal view returns (address payable) {\r\nreturn payable(msg.sender); }\r\nfunction _msgData() internal view returns (bytes memory) { this;\r\nreturn msg.data; }\r\n}\r\ninterface IERC20 {\r\nfunction totalSupply() external view returns (uint256);\r\nfunction balanceOf(address account) external view returns (uint256);\r\nfunction transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256);\r\n\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\nevent Approval(address indexed owner, address indexed spender, uint256 value); }\r\ninterface IDEXFactory {\r\nfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ninterface IDEXRouter {\r\nfunction factory() external pure returns (address); function WETH() external pure returns (address);\r\nfunction addLiquidityETH( address token,\r\nuint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to,\r\nuint deadline\r\n) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\nfunction swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn,\r\nuint amountOutMin,\r\naddress[] calldata path,\r\naddress to,\r\nuint deadline ) external;\r\n}\r\ncontract Ownable is Context { address private _owner;\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\nconstructor () {\r\naddress msgSender = _msgSender();\r\n_owner = msgSender;\r\nemit OwnershipTransferred(address(0), msgSender);\r\n}\r\nfunction ContractCreator() public view returns (address) {\r\nreturn _owner; }\r\nmodifier onlyOwner() {\r\nrequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\r\n_;\r\n} }\r\ncontract CatsVsDoge is IERC20, Ownable { using Address for address;\r\naddress DEAD = 0x000000000000000000000000000000000000dEaD; address ZERO = 0x0000000000000000000000000000000000000000;\r\nstring constant _name = \"CatsVsDoge\"; string constant _symbol = \"CVSD\"; uint8 constant _decimals = 9;\r\nuint256 _totalSupply = 1_000_000 * (10 ** _decimals); uint256 _maxBuyTxAmount = (_totalSupply * 1) / 100; uint256 _maxSellTxAmount = (_totalSupply * 1) / 500; uint256 _maxWalletSize = (_totalSupply * 2) / 10;\r\nmapping (address => uint256) _balances;\r\nmapping (address => mapping (address => uint256)) _allowances; mapping (address => uint256) public lastSell;\r\n\r\nmapping (address => uint256) public lastBuy;\r\nmapping (address => bool) isFeeExempt; mapping (address => bool) isTxLimitExempt; mapping (address => bool) liquidityCreator;\r\nuint256 marketingFee = 600;\r\nuint256 liquidityFee = 500;\r\nuint256 totalFee = marketingFee + liquidityFee; uint256 sellBias = 0;\r\nuint256 feeDenominator = 10000;\r\naddress payable public liquidityFeeReceiver = payable(0xcE42845e6724cf3058c292d393C08583EF2b7B01);\r\naddress payable public marketingFeeReceiver = payable(0xcE42845e6724cf3058c292d393C08583EF2b7B01);\r\nIDEXRouter public router;\r\naddress routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; mapping (address => bool) liquidityPools;\r\nmapping (address => uint256) public protected;\r\nbool protectionEnabled = true;\r\nbool protectionDisabled = false;\r\nuint256 protectionLimit;\r\nuint256 public protectionCount;\r\n\r\nuint256 protectionTimer;\r\naddress public pair;\r\nuint256 public launchedAt; uint256 public launchedTime; uint256 public deadBlocks; bool startBullRun = false; bool pauseDisabled = false; uint256 public rateLimit = 2;\r\nbool public swapEnabled = false;\r\nbool processEnabled = true;\r\nuint256 public swapThreshold = _totalSupply / 1000; uint256 public swapMinimum = _totalSupply / 10000; bool inSwap;\r\nmodifier swapping() { inSwap = true; _; inSwap = false; }\r\nmapping (address => bool) teamMember;\r\nmodifier onlyTeam() {\r\nrequire(teamMember[_msgSender()] || msg.sender == ContractCreator(), \"Caller is not a team member\");\r\n_;\r\n\r\n}\r\nevent RenouncedWallet(address, address, uint256, uint8);\r\nconstructor () {\r\nrouter = IDEXRouter(routerAddress);\r\npair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this)); liquidityPools[pair] = true;\r\n_allowances[ContractCreator()][routerAddress] = type(uint256).max; _allowances[address(this)][routerAddress] = type(uint256).max;\r\nisFeeExempt[ContractCreator()] = true; liquidityCreator[ContractCreator()] = true;\r\nisTxLimitExempt[address(this)] = true; isTxLimitExempt[ContractCreator()] = true; isTxLimitExempt[routerAddress] = true; isTxLimitExempt[DEAD] = true;\r\n_balances[ContractCreator()] = _totalSupply;\r\nemit Transfer(address(0), ContractCreator(), _totalSupply); }\r\n\r\nreceive() external payable { }\r\nfunction totalSupply() external view override returns (uint256) { return _totalSupply; } function decimals() external pure returns (uint8) { return _decimals; }\r\nfunction symbol() external pure returns (string memory) { return _symbol; }\r\nfunction name() external pure returns (string memory) { return _name; }\r\nfunction Owner() external view returns (address) { return DEAD; }\r\nfunction maxBuyTxTokens() external view returns (uint256) { return _maxBuyTxAmount / (10 ** _decimals); }\r\nfunction maxSellTxTokens() external view returns (uint256) { return _maxSellTxAmount / (10 ** _decimals); }\r\nfunction maxWalletTokens() external view returns (uint256) { return _maxWalletSize / (10 ** _decimals); }\r\nfunction balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\nfunction allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\nfunction approve(address spender, uint256 amount) public override returns (bool) { _allowances[msg.sender][spender] = amount;\r\nemit Approval(msg.sender, spender, amount);\r\nreturn true;\r\n}\r\nfunction approveMax(address spender) external returns (bool) {\r\n\r\nreturn approve(spender, type(uint256).max); }\r\nfunction setTeamMember(address _team, bool _enabled) external onlyOwner { teamMember[_team] = _enabled;\r\n}\r\nfunction clearStuckBalance(uint256 amountPercentage, address adr) external onlyTeam { uint256 amountETH = address(this).balance;\r\npayable(adr).transfer((amountETH * amountPercentage) / 100);\r\n}\r\nfunction openTrading(uint256 _deadBlocks, uint256 _protection, uint256 _limit) external onlyTeam {\r\nrequire(!startBullRun && _deadBlocks < 10); deadBlocks = _deadBlocks;\r\nstartBullRun = true;\r\nlaunchedAt = block.number;\r\nprotectionTimer = block.timestamp + _protection; protectionLimit = _limit * (10 ** _decimals);\r\n}\r\nfunction manualSwap() external onlyTeam {\r\n\r\nrequire(!pauseDisabled);\r\nstartBullRun = false; }\r\nfunction disablePause() external onlyTeam { pauseDisabled = true;\r\nstartBullRun = true;\r\n}\r\nfunction removeBlacklist() external onlyTeam { protectionDisabled = true; protectionEnabled = false;\r\n}\r\nfunction renounce(address[] calldata _newowner, bool _renounce) external onlyTeam { if (_renounce) {\r\nrequire(protectionEnabled); }\r\nfor (uint i = 0; i < _newowner.length; i++) {\r\nif (_renounce) {\r\nprotectionCount++;\r\nemit RenouncedWallet(tx.origin, _newowner[i], block.number, 2);\r\n\r\n}\r\nelse {\r\nif (protected[_newowner[i]] != 0) protectionCount--;\r\n}\r\nprotected[_newowner[i]] = _renounce ? block.number : 0; }\r\n}\r\nfunction transfer(address recipient, uint256 amount) external override returns (bool) { return _transferFrom(msg.sender, recipient, amount);\r\n}\r\nfunction transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\nif(_allowances[sender][msg.sender] != type(uint256).max){ _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n}\r\nreturn _transferFrom(sender, recipient, amount); }\r\nfunction _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\r\nrequire(sender != address(0), \"BEP20: transfer from 0x0\");\r\nrequire(recipient != address(0), \"BEP20: transfer to 0x0\");\r\nrequire(amount > 0, \"Amount must be > zero\");\r\nrequire(_balances[sender] >= amount, \"Insufficient balance\");\r\nif(!launched() && liquidityPools[recipient]){ require(liquidityCreator[sender], \"Liquidity not added yet.\"); launch(); }\r\nif(!startBullRun){ require(liquidityCreator[sender] || liquidityCreator[recipient], \"Trading not open yet.\"); }\r\ncheckTxLimit(sender, recipient, amount);\r\nif (!liquidityPools[recipient] && recipient != DEAD) { if (!isTxLimitExempt[recipient]) {\r\ncheckWalletLimit(recipient, amount); }\r\n}\r\nif(protectionEnabled && protectionTimer > block.timestamp) { if(liquidityPools[sender] && tx.origin != recipient && protected[recipient] == 0) {\r\nprotected[recipient] = block.number;\r\nprotectionCount++;\r\nemit RenouncedWallet(tx.origin, recipient, block.number, 0);\r\n} }\r\n\r\nif(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n_balances[sender] = _balances[sender] - amount;\r\nuint256 amountReceived = shouldTakeFee(sender) ? takeFee(recipient, amount) : amount;\r\nif(shouldSwapBack(recipient)){ if (amount > 0) swapBack(amount); }\r\n_balances[recipient] = _balances[recipient] + amountReceived;\r\nemit Transfer(sender, recipient, amountReceived);\r\nreturn true; }\r\nfunction launched() internal view returns (bool) { return launchedAt != 0;\r\n}\r\nfunction launch() internal { launchedAt = block.number; launchedTime = block.timestamp; swapEnabled = true;\r\n}\r\n\r\nfunction _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n_balances[sender] = _balances[sender] - amount; _balances[recipient] = _balances[recipient] + amount; emit Transfer(sender, recipient, amount);\r\nreturn true;\r\n}\r\nfunction checkWalletLimit(address recipient, uint256 amount) internal view {\r\nuint256 walletLimit = _maxWalletSize;\r\nrequire(_balances[recipient] + amount <= walletLimit, \"Transfer amount exceeds the bag size.\");\r\n}\r\nfunction checkTxLimit(address sender, address recipient, uint256 amount) internal {\r\nrequire(isTxLimitExempt[sender] || amount <= (liquidityPools[sender] ? _maxBuyTxAmount : _maxSellTxAmount), \"TX Limit Exceeded\");\r\nrequire(isTxLimitExempt[sender] || lastBuy[recipient] + rateLimit <= block.number, \"Transfer rate limit exceeded.\");\r\nif (protected[sender] != 0){\r\nrequire(amount <= protectionLimit * (10 ** _decimals) && lastSell[sender] == 0 && protectionTimer > block.timestamp, \"Wallet protected, please contact support.\");\r\nlastSell[sender] = block.number; }\r\n\r\nif (liquidityPools[recipient]) { lastSell[sender] = block.number;\r\n} else if (shouldTakeFee(sender)) {\r\nif (protectionEnabled && protectionTimer > block.timestamp && lastBuy[tx.origin] == block.number && protected[recipient] == 0) {\r\nprotected[recipient] = block.number;\r\nemit RenouncedWallet(tx.origin, recipient, block.number, 1); }\r\nlastBuy[recipient] = block.number; if (tx.origin != recipient)\r\nlastBuy[tx.origin] = block.number; }\r\n}\r\nfunction shouldTakeFee(address sender) internal view returns (bool) { return !isFeeExempt[sender];\r\n}\r\nfunction getTotalFee(bool selling) public view returns (uint256) { if(launchedAt + deadBlocks >= block.number){ return feeDenominator - 1; } if (selling) return totalFee + sellBias;\r\nreturn totalFee - sellBias;\r\n}\r\n\r\nfunction takeFee(address recipient, uint256 amount) internal returns (uint256) { bool selling = liquidityPools[recipient];\r\nuint256 feeAmount = (amount * getTotalFee(selling)) / feeDenominator;\r\n_balances[address(this)] += feeAmount;\r\nreturn amount - feeAmount; }\r\nfunction shouldSwapBack(address recipient) internal view returns (bool) { return !liquidityPools[msg.sender]\r\n&& !inSwap\r\n&& swapEnabled\r\n&& liquidityPools[recipient]\r\n&& _balances[address(this)] >= swapMinimum; }\r\nfunction swapBack(uint256 amount) internal swapping {\r\nuint256 amountToSwap = amount < swapThreshold ? amount : swapThreshold;\r\nif (_balances[address(this)] < amountToSwap) amountToSwap = _balances[address(this)];\r\nuint256 amountToLiquify = (amountToSwap * liquidityFee / 2) / totalFee;\r\n\r\namountToSwap -= amountToLiquify;\r\naddress[] memory path = new address[](2); path[0] = address(this);\r\npath[1] = router.WETH();\r\nuint256 balanceBefore = address(this).balance;\r\nrouter.swapExactTokensForETHSupportingFeeOnTransferTokens( amountToSwap,\r\n0,\r\npath,\r\naddress(this),\r\nblock.timestamp );\r\nuint256 amountBNB = address(this).balance - balanceBefore; uint256 totalBNBFee = totalFee - (liquidityFee / 2);\r\nuint256 amountBNBLiquidity = (amountBNB * liquidityFee / 2) / totalBNBFee; uint256 amountBNBMarketing = amountBNB - amountBNBLiquidity;\r\nif (amountBNBMarketing > 0)\r\n\r\nmarketingFeeReceiver.transfer(amountBNBMarketing);\r\nif(amountToLiquify > 0){\r\nrouter.addLiquidityETH{value: amountBNBLiquidity}(\r\naddress(this), amountToLiquify,\r\n0,\r\n0, liquidityFeeReceiver, block.timestamp\r\n); }\r\nemit FundsDistributed(amountBNBMarketing, amountBNBLiquidity, amountToLiquify); }\r\nfunction setRateLimit(uint256 rate) external onlyOwner { require(rate <= 60 seconds);\r\nrateLimit = rate;\r\n}\r\nfunction setTxLimit(uint256 buyNumerator, uint256 sellNumerator, uint256 divisor) external onlyOwner {\r\n\r\nrequire(buyNumerator > 0 && sellNumerator > 0 && divisor > 0 && divisor <= 10000); _maxBuyTxAmount = (_totalSupply * buyNumerator) / divisor;\r\n_maxSellTxAmount = (_totalSupply * sellNumerator) / divisor;\r\n}\r\nfunction setMaxWallet(uint256 numerator, uint256 divisor) external onlyOwner() { require(numerator > 0 && divisor > 0 && divisor <= 10000);\r\n_maxWalletSize = (_totalSupply * numerator) / divisor;\r\n}\r\nfunction setFees(uint256 _liquidityFee, uint256 _marketingFee, uint256 _sellBias, uint256 _feeDenominator) external onlyOwner {\r\nliquidityFee = _liquidityFee; marketingFee = _marketingFee;\r\ntotalFee = _marketingFee + _liquidityFee; sellBias = _sellBias;\r\nfeeDenominator = _feeDenominator; require(totalFee < feeDenominator / 2);\r\n}\r\nfunction setSwapBackSettings(bool _enabled, bool _processEnabled, uint256 _denominator, uint256 _swapMinimum) external onlyOwner {\r\nrequire(_denominator > 0); swapEnabled = _enabled; processEnabled = _processEnabled;\r\n\r\nswapThreshold = _totalSupply / _denominator;\r\nswapMinimum = _swapMinimum * (10 ** _decimals); }\r\nfunction getCirculatingSupply() public view returns (uint256) { return _totalSupply - (balanceOf(DEAD) + balanceOf(ZERO));\r\n}\r\nevent FundsDistributed(uint256 marketingBNB, uint256 liquidityBNB, uint256 liquidityTokens);\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityTokens\",\"type\":\"uint256\"}],\"name\":\"FundsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"RenouncedWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ContractCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disablePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"selling\",\"type\":\"bool\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newowner\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_renounce\",\"type\":\"bool\"}],\"name\":\"renounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellBias\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRateLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_processEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapMinimum\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_team\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTeamMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CatsVsDoge","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8087492558b5e897a2322c5cd5186d45f3f2185dc52c633b3fbf1e330a388fbb"}]}