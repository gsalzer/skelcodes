{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/CVNXStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./ICVNX.sol\\\";\\nimport \\\"./ICVNXStake.sol\\\";\\n\\n/// @notice CVNX token contract.\\ncontract CVNXStake is ICVNXStake, Ownable {\\n    /// @notice Emit when token staked.\\n    event Staked(uint256 indexed amount, address accountAddress);\\n    /// @notice Emit when token unstaked.\\n    event Unstaked(uint256 indexed amount, address accountAddress, uint256 indexed timestamp);\\n\\n    /// @notice CVNX token address.\\n    ICVNX public cvnxToken;\\n\\n    mapping(address => Stake[]) accountToStakes;\\n    mapping(address => uint256) accountToStaked;\\n\\n    /// @notice Governance contract created in constructor.\\n    constructor(address _cvnxToken) {\\n        cvnxToken = ICVNX(_cvnxToken);\\n    }\\n\\n    /// @notice Stake (lock) tokens for period.\\n    /// @param _amount Token amount\\n    /// @param _address Token holder address\\n    /// @param _endTimestamp End  of lock period (seconds)\\n    function stake(uint256 _amount, address _address, uint256 _endTimestamp) external override onlyOwner {\\n        require(_amount > 0, \\\"[E-57] - Amount can't be a zero.\\\");\\n        require(_endTimestamp > block.timestamp, \\\"[E-58] - End timestamp should be more than current timestamp.\\\");\\n        require(_address != address(0), \\\"[E-59] - Zero address.\\\");\\n\\n        uint256 _accountToStaked = accountToStaked[_address];\\n\\n        Stake memory _stake = Stake(_amount, _endTimestamp);\\n\\n        cvnxToken.transferFrom(_address, address(this), _amount);\\n\\n        accountToStaked[_address] = _accountToStaked + _amount;\\n        accountToStakes[_address].push(_stake);\\n\\n        emit Staked(_amount, _address);\\n    }\\n\\n    /// @notice Unstake (unlock) all available for unlock tokens.\\n    function unstake() external override {\\n        uint256 _accountToStaked = accountToStaked[msg.sender];\\n        uint256 _unavailableToUnstake;\\n\\n        for (uint256 i = 0; i < accountToStakes[msg.sender].length; i++) {\\n            if (accountToStakes[msg.sender][i].endTimestamp > block.timestamp) {\\n                _unavailableToUnstake += accountToStakes[msg.sender][i].amount;\\n            }\\n        }\\n\\n        uint256 _toUnstake = _accountToStaked - _unavailableToUnstake;\\n\\n        require(_toUnstake > 0, \\\"[E-46] - Nothing to unstake.\\\");\\n\\n        accountToStaked[msg.sender] -= _toUnstake;\\n        cvnxToken.transfer(msg.sender, _toUnstake);\\n\\n        emit Unstaked(_toUnstake, msg.sender, block.timestamp);\\n    }\\n\\n    /// @notice Return list of stakes for address.\\n    /// @param _address Token holder address\\n    function getStakesList(address _address) external view override onlyOwner returns(Stake[] memory stakes) {\\n        return accountToStakes[_address];\\n    }\\n\\n    /// @notice Return total stake amount for address.\\n    /// @param _address Token holder address\\n    function getStakedAmount(address _address) external view override returns(uint256) {\\n        return accountToStaked[_address];\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/ICVNXStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.4;\\n\\n/// @notice ICVNXStake interface for CVNXStake contract.\\ninterface ICVNXStake {\\n    struct Stake {\\n        uint256 amount;\\n        uint256 endTimestamp;\\n    }\\n\\n    /// @notice Stake (lock) tokens for period.\\n    /// @param _amount Token amount\\n    /// @param _address Token holder address\\n    /// @param _endTimestamp End  of lock period (seconds)\\n    function stake(uint256 _amount, address _address, uint256 _endTimestamp) external;\\n\\n    /// @notice Unstake (unlock) all available for unlock tokens.\\n    function unstake() external;\\n\\n    /// @notice Return list of stakes for address.\\n    /// @param _address Token holder address\\n    function getStakesList(address _address) external view returns(Stake[] memory stakes);\\n\\n    /// @notice Return total stake amount for address.\\n    /// @param _address Token holder address\\n    function getStakedAmount(address _address) external view returns(uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/ICVNX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice ICVNX interface for CVNX contract.\\ninterface ICVNX is IERC20 {\\n    /// @notice Mint new CVNX tokens.\\n    /// @param _account Address that receive tokens\\n    /// @param _amount Tokens amount\\n    function mint(address _account, uint256 _amount) external;\\n\\n    /// @notice Lock tokens on holder balance.\\n    /// @param _tokenOwner Token holder\\n    /// @param _tokenAmount Amount to lock\\n    function lock(address _tokenOwner, uint256 _tokenAmount) external;\\n\\n    /// @notice Unlock tokens on holder balance.\\n    /// @param _tokenOwner Token holder\\n    /// @param _tokenAmount Amount to lock\\n    function unlock(address _tokenOwner, uint256 _tokenAmount) external;\\n\\n    /// @notice Swap CVN to CVNX tokens\\n    /// @param _amount Token amount to swap\\n    function swap(uint256 _amount) external returns (bool);\\n\\n    /// @notice Transfer stuck tokens\\n    /// @param _token Token contract address\\n    /// @param _to Receiver address\\n    /// @param _amount Token amount\\n    function transferStuckERC20(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    /// @notice Set CVNXGovernance contract.\\n    /// @param _address CVNXGovernance contract address\\n    function setCvnxGovernanceContract(address _address) external;\\n\\n    /// @notice Set limit params.\\n    /// @param _percent Percentage of the total balance available for transfer\\n    /// @param _limitAmount Max amount available for transfer\\n    /// @param _period Lock period when user can't transfer tokens\\n    function setLimit(uint256 _percent, uint256 _limitAmount, uint256 _period) external;\\n\\n    /// @notice Add address to 'from' whitelist\\n    /// @param _newAddress New address\\n    function addFromWhitelist(address _newAddress) external;\\n\\n    /// @notice Remove address from 'from' whitelist\\n    /// @param _oldAddress Old address\\n    function removeFromWhitelist(address _oldAddress) external;\\n\\n    /// @notice Add address to 'to' whitelist\\n    /// @param _newAddress New address\\n    function addToWhitelist(address _newAddress) external;\\n\\n    /// @notice Remove address from 'to' whitelist\\n    /// @param _oldAddress Old address\\n    function removeToWhitelist(address _oldAddress) external;\\n\\n    /// @notice Change limit activity status.\\n    function changeLimitActivityStatus() external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cvnxToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cvnxToken\",\"outputs\":[{\"internalType\":\"contract ICVNX\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getStakesList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct ICVNXStake.Stake[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CVNXStake","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a1a4e303e9c56962f201c5e834abc1e677a3c4f3","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}