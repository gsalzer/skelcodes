{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/CVNX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./ICVNXGovernance.sol\\\";\\nimport \\\"./ICVNX.sol\\\";\\n\\n/// @notice CVNX token contract.\\ncontract CVNX is ICVNX, ERC20(\\\"CVNX\\\", \\\"CVNX\\\"), Ownable {\\n    event TokenLocked(uint256 indexed amount, address tokenOwner);\\n    event TokenUnlocked(uint256 indexed amount, address tokenOwner);\\n\\n    /// @notice Governance contract.\\n    ICVNXGovernance public cvnxGovernanceContract;\\n    IERC20Metadata public cvnContract;\\n\\n    struct Limit {\\n        uint256 percent;\\n        uint256 limitAmount;\\n        uint256 period;\\n    }\\n\\n    Limit public limit;\\n    bool public isLimitsActive;\\n    mapping(address => uint256) public addressToEndLockTimestamp;\\n    mapping(address => bool) public fromLimitWhitelist;\\n    mapping(address => bool) public toLimitWhitelist;\\n\\n    /// @notice Locked token amount for each address.\\n    mapping(address => uint256) public lockedAmount;\\n\\n    /// @notice Governance contract created in constructor.\\n    constructor(address _cvnContract) {\\n        uint256 _toMint = 15000000000000000000000000;\\n\\n        _mint(msg.sender, _toMint);\\n        approve(address(this), _toMint);\\n\\n        cvnContract = IERC20Metadata(_cvnContract);\\n    }\\n\\n    /// @notice Modifier describe that call available only from governance contract.\\n    modifier onlyGovContract() {\\n        require(msg.sender == address(cvnxGovernanceContract), \\\"[E-31] - Not a governance contract.\\\");\\n        _;\\n    }\\n\\n    /// @notice Lock tokens on holder balance.\\n    /// @param _tokenOwner Token holder\\n    /// @param _tokenAmount Amount to lock\\n    function lock(address _tokenOwner, uint256 _tokenAmount) external override onlyGovContract {\\n        require(_tokenAmount > 0, \\\"[E-41] - The amount to be locked must be greater than zero.\\\");\\n\\n        uint256 _balance = balanceOf(_tokenOwner);\\n        uint256 _toLock = lockedAmount[_tokenOwner] + _tokenAmount;\\n\\n        require(_toLock <= _balance, \\\"[E-42] - Not enough token on account.\\\");\\n        lockedAmount[_tokenOwner] = _toLock;\\n\\n        emit TokenLocked(_tokenAmount, _tokenOwner);\\n    }\\n\\n    /// @notice Unlock tokens on holder balance.\\n    /// @param _tokenOwner Token holder\\n    /// @param _tokenAmount Amount to lock\\n    function unlock(address _tokenOwner, uint256 _tokenAmount) external override onlyGovContract {\\n        uint256 _lockedAmount = lockedAmount[_tokenOwner];\\n\\n        if (_tokenAmount > _lockedAmount) {\\n            _tokenAmount = _lockedAmount;\\n        }\\n\\n        lockedAmount[_tokenOwner] = _lockedAmount - _tokenAmount;\\n\\n        emit TokenUnlocked(_tokenAmount, _tokenOwner);\\n    }\\n\\n    /// @notice Swap CVN to CVNX tokens\\n    /// @param _amount Token amount to swap\\n    function swap(uint256 _amount) external override returns (bool) {\\n        cvnContract.transferFrom(msg.sender, 0x4e07dc9D1aBCf1335d1EaF4B2e28b45d5892758E, _amount);\\n\\n        uint256 _newAmount = _amount * (10 ** (decimals() - cvnContract.decimals()));\\n        this.transferFrom(owner(), msg.sender, _newAmount);\\n        return true;\\n    }\\n\\n    /// @notice Transfer stuck tokens\\n    /// @param _token Token contract address\\n    /// @param _to Receiver address\\n    /// @param _amount Token amount\\n    function transferStuckERC20(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external override onlyOwner {\\n        require(_token.transfer(_to, _amount), \\\"[E-56] - Transfer failed.\\\");\\n    }\\n\\n    /// @notice Set CVNXGovernance contract.\\n    /// @param _address CVNXGovernance contract address\\n    function setCvnxGovernanceContract(address _address) external override onlyOwner {\\n        if (address(cvnxGovernanceContract) != address(0)) {\\n            require(!cvnxGovernanceContract.getIsAvailableToCreate(), \\\"[E-92] - Old governance contract still active.\\\");\\n        }\\n\\n        cvnxGovernanceContract = ICVNXGovernance(_address);\\n    }\\n\\n    /// @notice Mint new CVNX tokens.\\n    /// @param _account Address that receive tokens\\n    /// @param _amount Tokens amount\\n    function mint(address _account, uint256 _amount) external override onlyOwner {\\n        require(totalSupply() + _amount <= 60000000000000000000000000, \\\"[E-71] - Can't mint more.\\\");\\n        _mint(_account, _amount);\\n    }\\n\\n    /// @notice Set limit params.\\n    /// @param _percent Percentage of the total balance available for transfer\\n    /// @param _limitAmount Max amount available for transfer\\n    /// @param _period Lock period when user can't transfer tokens\\n    function setLimit(uint256 _percent, uint256 _limitAmount, uint256 _period) external override onlyOwner {\\n        require(_percent <= getDecimals(), \\\"[E-89] - Percent should be less than 1.\\\");\\n        require(_percent > 0, \\\"[E-90] - Percent can't be a zero.\\\");\\n        require(_limitAmount > 0, \\\"[E-90] - Limit amount can't be a zero.\\\");\\n\\n        limit.percent = _percent;\\n        limit.limitAmount = _limitAmount;\\n        limit.period = _period;\\n    }\\n\\n    /// @notice Add address to 'from' whitelist\\n    /// @param _newAddress New address\\n    function addFromWhitelist(address _newAddress) external override onlyOwner {\\n        fromLimitWhitelist[_newAddress] = true;\\n    }\\n\\n    /// @notice Remove address from 'from' whitelist\\n    /// @param _oldAddress Old address\\n    function removeFromWhitelist(address _oldAddress) external override onlyOwner {\\n        fromLimitWhitelist[_oldAddress] = false;\\n    }\\n\\n    /// @notice Add address to 'to' whitelist\\n    /// @param _newAddress New address\\n    function addToWhitelist(address _newAddress) external override onlyOwner {\\n        toLimitWhitelist[_newAddress] = true;\\n    }\\n\\n    /// @notice Remove address from 'to' whitelist\\n    /// @param _oldAddress Old address\\n    function removeToWhitelist(address _oldAddress) external override onlyOwner {\\n        toLimitWhitelist[_oldAddress] = false;\\n    }\\n\\n    /// @notice Change limit activity status.\\n    function changeLimitActivityStatus() external override onlyOwner {\\n        isLimitsActive = !isLimitsActive;\\n    }\\n\\n    /// @notice Check that locked amount less then transfer amount.\\n    /// @notice Check limits.\\n    /// @param _from From address\\n    /// @param _to To address\\n    /// @param _amount Token amount\\n    function _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal override {\\n        if (_from != address(0)) {\\n            uint256 _availableAmount = balanceOf(_from) - lockedAmount[_from];\\n            require(_availableAmount >= _amount, \\\"[E-61] - Transfer amount exceeds available tokens.\\\");\\n\\n            if (isLimitsActive && fromLimitWhitelist[_from] == false && toLimitWhitelist[_to] == false) {\\n                require(block.timestamp > addressToEndLockTimestamp[_from], \\\"[E-62] - Tokens are locked until the end of the period.\\\");\\n                require(_amount <= limit.limitAmount, \\\"[E-63] - The maximum limit has been reached.\\\");\\n                require(_amount <= _availableAmount * limit.percent / getDecimals(), \\\"[E-64] - The maximum limit has been reached.\\\");\\n\\n                addressToEndLockTimestamp[_from] = block.timestamp + limit.period;\\n            }\\n        }\\n    }\\n\\n    function getDecimals() private pure returns (uint256) {\\n        return 10 ** 27;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/ICVNXGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.4;\\n\\n/// @notice ICVNXGovernance interface for CVNXGovernance contract.\\ninterface ICVNXGovernance {\\n    enum PollType {PROPOSAL, EXECUTIVE, EVENT, PRIVATE}\\n    enum PollStatus {PENDING, APPROVED, REJECTED, DRAW}\\n    enum VoteType {FOR, AGAINST}\\n\\n    /// @notice Poll structure.\\n    struct Poll {\\n        uint64 pollDeadline;\\n        uint64 pollStopped;\\n        PollType pollType;\\n        address pollOwner;\\n        string pollInfo;\\n        uint256 forWeight;\\n        uint256 againstWeight;\\n    }\\n\\n    /// @notice Address vote structure.\\n    struct Vote {\\n        VoteType voteType;\\n        uint256 voteWeight;\\n    }\\n\\n    /// @notice Return variable isAvailableToCreate.\\n    function getIsAvailableToCreate() external view returns (bool);\\n\\n    /// @notice Enable or disable possibility to create new poll in contract.\\n    function setIsAvailableToCreate() external;\\n\\n    /// @notice Create PROPOSAL poll.\\n    /// @param _pollDeadline Poll deadline\\n    /// @param _pollInfo Info about poll\\n    function createProposalPoll(uint64 _pollDeadline, string memory _pollInfo) external;\\n\\n    /// @notice Create EXECUTIVE poll.\\n    /// @param _pollDeadline Poll deadline\\n    /// @param _pollInfo Info about poll\\n    function createExecutivePoll(uint64 _pollDeadline, string memory _pollInfo) external;\\n\\n    /// @notice Create EVENT poll.\\n    /// @param _pollDeadline Poll deadline\\n    /// @param _pollInfo Info about poll\\n    function createEventPoll(uint64 _pollDeadline, string memory _pollInfo) external;\\n\\n    /// @notice Create PRIVATE poll.\\n    /// @param _pollDeadline Poll deadline\\n    /// @param _pollInfo Info about poll\\n    /// @param _verifiedAddresses Array of verified addresses for poll\\n    function createPrivatePoll(\\n        uint64 _pollDeadline,\\n        string memory _pollInfo,\\n        address[] memory _verifiedAddresses\\n    ) external;\\n\\n    /// @notice Send tokens as vote in poll. Tokens will be lock.\\n    /// @param _pollNum Poll number\\n    /// @param _voteType Vote type (FOR, AGAINST)\\n    /// @param _voteWeight Vote weight in CVNX tokens\\n    function vote(\\n        uint256 _pollNum,\\n        VoteType _voteType,\\n        uint256 _voteWeight\\n    ) external;\\n\\n    /// @notice Unlock tokens for poll. Poll should be ended.\\n    /// @param _pollNum Poll number\\n    function unlockTokensInPoll(uint256 _pollNum) external;\\n\\n    /// @notice Stop poll before deadline.\\n    /// @param _pollNum Poll number\\n    function stopPoll(uint256 _pollNum) external;\\n\\n    /// @notice Return poll status (PENDING, APPROVED, REJECTED, DRAW).\\n    /// @param _pollNum Poll number\\n    /// @return Poll number and status\\n    function getPollStatus(uint256 _pollNum) external view returns (uint256, PollStatus);\\n\\n    /// @notice Return the poll expiration timestamp.\\n    /// @param _pollNum Poll number\\n    /// @return Poll deadline\\n    function getPollExpirationTime(uint256 _pollNum) external view returns (uint64);\\n\\n    /// @notice Return the poll stop timestamp.\\n    /// @param _pollNum Poll number\\n    /// @return Poll stop time\\n    function getPollStopTime(uint256 _pollNum) external view returns (uint64);\\n\\n    /// @notice Return the complete list of polls an address has voted in.\\n    /// @param _voter Voter address\\n    /// @return Index - poll number. True - if address voted in poll\\n    function getPollHistory(address _voter) external view returns (bool[] memory);\\n\\n    /// @notice Return the vote info for a given poll for an address.\\n    /// @param _pollNum Poll number\\n    /// @param _voter Voter address\\n    /// @return Info about voter vote\\n    function getPollInfoForVoter(uint256 _pollNum, address _voter) external view returns (Vote memory);\\n\\n    /// @notice Checks if a user address has voted for a specific poll.\\n    /// @param _pollNum Poll number\\n    /// @param _voter Voter address\\n    /// @return True if address voted in poll\\n    function getIfUserHasVoted(uint256 _pollNum, address _voter) external view returns (bool);\\n\\n    /// @notice Return the amount of tokens that are locked for a given voter address.\\n    /// @param _voter Voter address\\n    /// @return Poll number\\n    function getLockedAmount(address _voter) external view returns (uint256);\\n\\n    /// @notice Return the amount of locked tokens of the specific poll.\\n    /// @param _pollNum Poll number\\n    /// @param _voter Voter address\\n    /// @return Locked tokens amount for specific poll\\n    function getPollLockedAmount(uint256 _pollNum, address _voter) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/ICVNX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice ICVNX interface for CVNX contract.\\ninterface ICVNX is IERC20 {\\n    /// @notice Mint new CVNX tokens.\\n    /// @param _account Address that receive tokens\\n    /// @param _amount Tokens amount\\n    function mint(address _account, uint256 _amount) external;\\n\\n    /// @notice Lock tokens on holder balance.\\n    /// @param _tokenOwner Token holder\\n    /// @param _tokenAmount Amount to lock\\n    function lock(address _tokenOwner, uint256 _tokenAmount) external;\\n\\n    /// @notice Unlock tokens on holder balance.\\n    /// @param _tokenOwner Token holder\\n    /// @param _tokenAmount Amount to lock\\n    function unlock(address _tokenOwner, uint256 _tokenAmount) external;\\n\\n    /// @notice Swap CVN to CVNX tokens\\n    /// @param _amount Token amount to swap\\n    function swap(uint256 _amount) external returns (bool);\\n\\n    /// @notice Transfer stuck tokens\\n    /// @param _token Token contract address\\n    /// @param _to Receiver address\\n    /// @param _amount Token amount\\n    function transferStuckERC20(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    /// @notice Set CVNXGovernance contract.\\n    /// @param _address CVNXGovernance contract address\\n    function setCvnxGovernanceContract(address _address) external;\\n\\n    /// @notice Set limit params.\\n    /// @param _percent Percentage of the total balance available for transfer\\n    /// @param _limitAmount Max amount available for transfer\\n    /// @param _period Lock period when user can't transfer tokens\\n    function setLimit(uint256 _percent, uint256 _limitAmount, uint256 _period) external;\\n\\n    /// @notice Add address to 'from' whitelist\\n    /// @param _newAddress New address\\n    function addFromWhitelist(address _newAddress) external;\\n\\n    /// @notice Remove address from 'from' whitelist\\n    /// @param _oldAddress Old address\\n    function removeFromWhitelist(address _oldAddress) external;\\n\\n    /// @notice Add address to 'to' whitelist\\n    /// @param _newAddress New address\\n    function addToWhitelist(address _newAddress) external;\\n\\n    /// @notice Remove address from 'to' whitelist\\n    /// @param _oldAddress Old address\\n    function removeToWhitelist(address _oldAddress) external;\\n\\n    /// @notice Change limit activity status.\\n    function changeLimitActivityStatus() external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cvnContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"addFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToEndLockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeLimitActivityStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvnContract\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvnxGovernanceContract\",\"outputs\":[{\"internalType\":\"contract ICVNXGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromLimitWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLimitsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"}],\"name\":\"removeToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCvnxGovernanceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toLimitWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferStuckERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CVNX","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000062aaf435273bc4baa78dcebd6590042d7e58ba6f","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}