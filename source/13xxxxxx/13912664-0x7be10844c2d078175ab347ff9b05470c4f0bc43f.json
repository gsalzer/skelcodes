{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.0;\r\n\r\ncontract FDCGov {\r\n  struct userVote {\r\n    uint amount;\r\n    uint startBlock;\r\n    bool forVote;\r\n  }\r\n\r\n  struct proposal {\r\n    uint startBlock;\r\n    uint endBlock;\r\n    uint state;//0=n/a,1=open,2=passed,3=executed,4=failed\r\n    string description;\r\n    string title;\r\n    uint totalVotesFor;\r\n    uint totalVotesAgainst;\r\n    mapping (address => userVote) votes;\r\n  }\r\n  mapping (address => proposal) private proposals;\r\n  string private version = \"v1\";\r\n  address private WFDCContract = 0x311C6769461e1d2173481F8d789AF00B39DF6d75;\r\n  WrappedFreedomDividendCoin private WFDCToken;\r\n  address[] private activeProposals;\r\n\r\n  event stateChange (\r\n    uint startBlock,\r\n    uint endBlock,\r\n    uint state,\r\n    string description,\r\n    string title,\r\n    uint totalVotesFor,\r\n    uint totalVotesAgainst\r\n  );\r\n\r\n  constructor() {\r\n    WFDCToken = WrappedFreedomDividendCoin(WFDCContract);\r\n  }\r\n\r\n  function createProposal(string memory title, string memory description) external returns(bool) {\r\n    require(proposals[msg.sender].state == 0, 'Proposal already open');\r\n    require(WFDCToken.balanceOf(msg.sender) >= 10000000, 'Need 100,000 to create Proposal');\r\n    proposals[msg.sender].startBlock = block.number;\r\n    proposals[msg.sender].endBlock = block.number + 199385;\r\n    proposals[msg.sender].title = title;\r\n    proposals[msg.sender].description = description;\r\n    proposals[msg.sender].state = 1;\r\n    activeProposals.push(msg.sender);\r\n    emit stateChange(\r\n      proposals[msg.sender].startBlock,\r\n      proposals[msg.sender].endBlock,\r\n      proposals[msg.sender].state,\r\n      proposals[msg.sender].description,\r\n      proposals[msg.sender].title,\r\n      proposals[msg.sender].totalVotesFor,\r\n      proposals[msg.sender].totalVotesAgainst\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function getStartBlock(address proposalAddress) external view returns(uint) {\r\n    return proposals[proposalAddress].startBlock;\r\n  }\r\n\r\n  function getEndBlock(address proposalAddress) external view returns(uint) {\r\n    return proposals[proposalAddress].endBlock;\r\n  }\r\n\r\n  function getState(address proposalAddress) external view returns(uint) {\r\n    return proposals[proposalAddress].state;\r\n  }\r\n\r\n  function getDescription(address proposalAddress) external view returns(string memory) {\r\n    return proposals[proposalAddress].description;\r\n  }\r\n\r\n  function getTitle(address proposalAddress) external view returns(string memory) {\r\n    return proposals[proposalAddress].title;\r\n  }\r\n\r\n  function getTotalVotesFor(address proposalAddress) external view returns(uint) {\r\n    return proposals[proposalAddress].totalVotesFor;\r\n  }\r\n\r\n  function getTotalVotesAgainst(address proposalAddress) external view returns(uint) {\r\n    return proposals[proposalAddress].totalVotesAgainst;\r\n  }\r\n\r\n  function vote(address proposalAddress, bool forVote) external returns(bool) {\r\n    require(proposals[proposalAddress].state == 1, 'Proposal needs to be open');\r\n    require(WFDCToken.balanceOf(msg.sender) > 0, 'Need tokens to vote');\r\n    require(proposals[proposalAddress].votes[msg.sender].startBlock != proposals[proposalAddress].startBlock, 'Can only vote once per proposal');\r\n    if (forVote == true) {\r\n      proposals[proposalAddress].totalVotesFor += WFDCToken.balanceOf(msg.sender);\r\n    } else {\r\n      proposals[proposalAddress].totalVotesAgainst += WFDCToken.balanceOf(msg.sender);\r\n    }\r\n    proposals[proposalAddress].votes[msg.sender].amount += WFDCToken.balanceOf(msg.sender);\r\n    proposals[proposalAddress].votes[msg.sender].forVote = forVote;\r\n    proposals[proposalAddress].votes[msg.sender].startBlock = proposals[proposalAddress].startBlock;\r\n    return true;\r\n  }\r\n\r\n  function getVotes(address proposalAddress) external view returns(uint) {\r\n    return proposals[proposalAddress].votes[msg.sender].amount;\r\n  }\r\n\r\n  function getVotesStartBlock(address proposalAddress) external view returns(uint) {\r\n    return proposals[proposalAddress].votes[msg.sender].startBlock;\r\n  }\r\n\r\n  function getVotesForVote(address proposalAddress) external view returns(bool) {\r\n    return proposals[proposalAddress].votes[msg.sender].forVote;\r\n  }\r\n\r\n  function updateProposal(address proposalAddress) external returns(bool) {\r\n    require(WFDCToken.balanceOf(msg.sender) > 0, 'Need tokens to update');\r\n    if (proposals[proposalAddress].state == 1) {\r\n      if (block.number >= proposals[proposalAddress].endBlock) {\r\n        if (proposals[proposalAddress].totalVotesFor > proposals[proposalAddress].totalVotesAgainst) {\r\n          proposals[proposalAddress].state = 2;\r\n          emit stateChange(\r\n            proposals[proposalAddress].startBlock,\r\n            proposals[proposalAddress].endBlock,\r\n            proposals[proposalAddress].state,\r\n            proposals[proposalAddress].description,\r\n            proposals[proposalAddress].title,\r\n            proposals[proposalAddress].totalVotesFor,\r\n            proposals[proposalAddress].totalVotesAgainst\r\n          );\r\n        } else {\r\n          emit stateChange(\r\n            proposals[proposalAddress].startBlock,\r\n            proposals[proposalAddress].endBlock,\r\n            4,\r\n            proposals[proposalAddress].description,\r\n            proposals[proposalAddress].title,\r\n            proposals[proposalAddress].totalVotesFor,\r\n            proposals[proposalAddress].totalVotesAgainst\r\n          );\r\n          resetProposal(proposalAddress);\r\n        }\r\n      }\r\n    } else if (proposals[proposalAddress].state == 2) {\r\n      require(proposalAddress == msg.sender, 'Proposal creator can only set state to executed');\r\n      emit stateChange(\r\n        proposals[proposalAddress].startBlock,\r\n        proposals[proposalAddress].endBlock,\r\n        3,\r\n        proposals[proposalAddress].description,\r\n        proposals[proposalAddress].title,\r\n        proposals[proposalAddress].totalVotesFor,\r\n        proposals[proposalAddress].totalVotesAgainst\r\n      );\r\n      resetProposal(proposalAddress);\r\n    }\r\n  }\r\n\r\n  function resetProposal(address proposalAddress) private {\r\n    proposals[proposalAddress].startBlock = 0;\r\n    proposals[proposalAddress].endBlock = 0;\r\n    proposals[proposalAddress].state = 0;\r\n    proposals[proposalAddress].description = \"\";\r\n    proposals[proposalAddress].title = \"\";\r\n    proposals[proposalAddress].totalVotesFor = 0;\r\n    proposals[proposalAddress].totalVotesAgainst = 0;\r\n\r\n    uint deleteIndex;\r\n    for (uint proposalCount = 0; proposalCount < activeProposals.length; proposalCount++) {\r\n      if (activeProposals[proposalCount] == proposalAddress) {\r\n        deleteIndex = proposalCount;\r\n      }\r\n    }\r\n    activeProposals[deleteIndex] = activeProposals[activeProposals.length - 1];\r\n    activeProposals.pop();\r\n  }\r\n\r\n  function getActiveProposal(uint id) external view returns(address) {\r\n    return activeProposals[id];\r\n  }\r\n\r\n  function getActiveProposalLength() external view returns(uint) {\r\n    return activeProposals.length;\r\n  }\r\n\r\n  function getActiveProposals() external view returns(address[] memory) {\r\n    return activeProposals;\r\n  }\r\n\r\n  function getVersion() external view returns(string memory) {\r\n    return version;\r\n  }\r\n}\r\n\r\ninterface WrappedFreedomDividendCoin {\r\n    function balanceOf(address Address) external view returns (uint);\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalVotesFor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalVotesAgainst\",\"type\":\"uint256\"}],\"name\":\"stateChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"createProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getActiveProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveProposalLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveProposals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposalAddress\",\"type\":\"address\"}],\"name\":\"getDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposalAddress\",\"type\":\"address\"}],\"name\":\"getEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposalAddress\",\"type\":\"address\"}],\"name\":\"getStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposalAddress\",\"type\":\"address\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposalAddress\",\"type\":\"address\"}],\"name\":\"getTitle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposalAddress\",\"type\":\"address\"}],\"name\":\"getTotalVotesAgainst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposalAddress\",\"type\":\"address\"}],\"name\":\"getTotalVotesFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposalAddress\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposalAddress\",\"type\":\"address\"}],\"name\":\"getVotesForVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposalAddress\",\"type\":\"address\"}],\"name\":\"getVotesStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposalAddress\",\"type\":\"address\"}],\"name\":\"updateProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposalAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"forVote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FDCGov","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6c072dfda4b906eb1707a0bdd92df7a36716930dad4e1ca6faa181b9ea69cd2f"}]}