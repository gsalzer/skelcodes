{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.17;\r\n\r\ncontract ZCrypto  {\r\n    using SafeMath for uint256;\r\n\r\n    \r\n    string private _tokenName;\r\n    string private _tokenSymbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    uint256 private _totalSupply;\r\n\r\n    address private _minterAddress;\r\n    address private _owner;\r\n\t\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\t\r\n\r\n\r\n    constructor () public {\r\n        _owner =  msg.sender;\r\n        _tokenName = \"ZCrypto\";\r\n        _tokenSymbol = \"ZCO\";\r\n        _decimals = 8;\r\n\t\tuint256 initialSupply=10000000000000000;\r\n        _minterAddress = _owner;\r\n\t\taddress masterAccount=  _owner;\r\n        _totalSupply = _totalSupply.add(initialSupply);\r\n        _balances[masterAccount] = _balances[masterAccount].add(initialSupply);\r\n        emit Transfer(address(0), masterAccount, initialSupply);\r\n    }\r\n\r\n    //Returns the name of the token\r\n    function name() public view returns (string memory) {\r\n        return _tokenName;\r\n    }\r\n\r\n    //Returns the symbol of the token\r\n    function symbol() public view returns (string memory) {\r\n        return _tokenSymbol;\r\n    }\r\n\r\n\t/**\r\n         Returns the number of decimals the token uses - e.g. 8, \r\n\t means to divide the token amount by 100000000 to get its user representation.\r\n        */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * returns total tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * returns the  account balance of the specified address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * Returns the amount which spender is still allowed to withdraw from owner\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     *Transfer token for a specified address\r\n\t *Transfers tokens to address receiver, and MUST fire the Transfer event. \r\n\t *The function SHOULD throw if the message caller’s account balance does not have enough tokens to spend.\r\n     */\r\n    function transfer(address receiver, uint256 numTokens) public returns (bool) {\r\n        _transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Allows spender to withdraw from your account msg.sender multiple times, up to the numTokens amount. \r\n     * If this function is called again it overwrites the current allowance with numTokens.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * To prevent attack vectors like the one https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/ , \r\n     * clients SHOULD make sure to create user interfaces in such a way that they set the allowance first to 0 before setting it to another value for the same spender. \r\n     * THOUGH The contract itself shouldn’t enforce it, to allow backwards compatibility with contracts deployed before\r\n     */\r\n    function approve(address spender, uint256 numTokens) public returns (bool) {\r\n        _approve(msg.sender, spender, numTokens);\r\n\temit Approval(msg.sender, spender, numTokens);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from one address to another.\r\n     */\r\n    function transferFrom(address from, address to, uint256 numTokens) public returns (bool) {\r\n        _transfer(from, to, numTokens);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(numTokens));\r\n        return true;\r\n    }\r\n\r\n    \r\n    /**\r\n     * Transfer token from to a specified addresses\r\n     */\r\n    function _transfer(address from, address to, uint256 numTokens) internal {\r\n        require(to != address(0));\r\n\t\trequire(numTokens <= _balances[from]);\r\n        _balances[from] = _balances[from].sub(numTokens);\r\n        _balances[to] = _balances[to].add(numTokens);\r\n         emit Transfer(from, to, numTokens);\r\n    }\r\n\r\n    /**\r\n     * Approve an address to spend another addresses' tokens.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n        _allowed[owner][spender] = value; \r\n\t\t\r\n    }\r\n\r\n    /**\r\n     * Function to print new tokens\r\n     */\r\n    function mint(address account, uint256 numTokens) public onlyMinter  {\r\n        require(account != address(0));\r\n        _totalSupply = _totalSupply.add(numTokens);\r\n        _balances[account] = _balances[account].add(numTokens);\r\n        emit Transfer(address(0), account, numTokens);\r\n    }\r\n\r\n\r\n    \r\n    /**\r\n     * @return the address that can mint tokens.\r\n     */\r\n    function currentMinter() external view returns (address) {\r\n        return _minterAddress;\r\n    }\r\n\r\n\r\n    /**\r\n     *  change minter address, newMinter The address that will be able to mint tokens from now on\r\n     */\r\n    function changeMinter(address newMinter) external onlyOwner {\r\n        _minterAddress = newMinter;\r\n    } \r\n\r\n    modifier onlyMinter() {\r\n        require(msg.sender==_minterAddress);\r\n        _;\r\n    }\r\n\t\r\n    \r\n     /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n    \r\n     /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\t /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n\tfunction transferOwnership(address newOwner) external onlyOwner {\r\n\t\tif (newOwner != address(0)) {\r\n\t\t\t_owner = newOwner;\r\n    }\r\n  }\r\n\t\r\n\t\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 ans = a - b;\r\n\r\n        return ans;\r\n    }\r\n\r\n    /**\r\n     * Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 ans = a + b;\r\n        require(ans >= a);\r\n        return ans;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"changeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ZCrypto","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ca2c867bb365a242e09edc683f97bc6b45a97d56df5a412541e828eb15a5975e"}]}