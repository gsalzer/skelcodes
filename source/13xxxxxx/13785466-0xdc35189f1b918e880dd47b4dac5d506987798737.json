{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22 <0.9.0;\n\n\n// \n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// \n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// \ncontract CryptoTracks is Ownable, ReentrancyGuard {\n  struct Tune {\n    uint t1;\n    uint t2;\n    uint t3;\n    uint t4;\n    uint t5;\n    uint t6;\n    uint t7;\n    uint t8;\n  }\n\n  mapping(address => uint[]) myFavorites;\n  mapping(uint => uint) favoriteCount;\n  uint favoriteFee = 0.001 ether;\n  mapping(uint => address) tuneOwner;\n  mapping(address => uint) artistTuneCount;\n  Tune[] tunes;\n\n  constructor() {\n    uint _t1 = 1510101010000000005005005005000000000000165165165165000000;\n    uint _t2 = 1510101010000020000000000000020000000180000000000000180000;\n    uint _t3 = 1510101010000004000124000124004000000164000084000084164000;\n    uint _t4 = 2101101010000009000000000000009000000169000000000000169000;\n    uint _t5 = 15059004000000010000330330330010000000170000410410410170000;\n    uint _t6 = 15059004000000020000000000000020000000180000000000000180000;\n    uint _t7 = 1510101010000019000000019019000000000179000000179179000000;\n    uint _t8 = 1510101010000019000000019000000000000179000000179000000000;\n    tunes.push(Tune(_t1, _t2, _t3, _t4, _t5, _t6, _t7, _t8));\n    uint tuneId = tunes.length - 1;\n    tuneOwner[tuneId] = _msgSender();\n    artistTuneCount[_msgSender()]++;\n  }\n\n  function getTune(uint _id) public view returns(\n    uint, uint, uint, uint,\n    uint, uint, uint, uint,\n    address, uint) {\n    Tune storage tune = tunes[_id];\n    require(tune.t1 != 0);\n    address thisTuneOwner = tuneOwner[_id];\n    uint favCount = favoriteCount[_id];\n    return (tune.t1, tune.t2, tune.t3, tune.t4,\n    tune.t5, tune.t6, tune.t7, tune.t8,\n    thisTuneOwner, favCount);\n  }\n\n  function getTunesLength() public view returns (uint) {\n    return tunes.length;\n  }\n\n  function publishTune(uint _t1, uint _t2, uint _t3, uint _t4,\n    uint _t5, uint _t6, uint _t7, uint _t8) nonReentrant external payable returns (uint) {\n    require(_t1 != 0);\n    tunes.push(Tune(_t1, _t2, _t3, _t4, _t5, _t6, _t7, _t8));\n    uint tuneId = tunes.length - 1;\n    tuneOwner[tuneId] = _msgSender();\n    artistTuneCount[_msgSender()]++;\n    return tuneId;\n  }\n\n  function getArtistTunes(address _artist) public view returns(uint[] memory) {\n    uint[] memory theseTunes = new uint[](artistTuneCount[_artist]);\n    uint inc = 0;\n    for (uint i = 0; i < tunes.length; i++) {\n      if (tuneOwner[i] == _artist) {\n        theseTunes[inc] = i;\n        inc++;\n      }\n    }\n    return theseTunes;\n  }\n\n  function getMyFavorites() public view returns(uint[] memory) {\n    return myFavorites[_msgSender()];\n  }\n\n  function favorite(uint _id) nonReentrant external payable {\n    require(tuneOwner[_id] != address(0));\n    Tune storage tune = tunes[_id];\n    require(tune.t1 != 0);\n    require(msg.value >= favoriteFee);\n    for (uint i = 0; i < myFavorites[_msgSender()].length; i++) {\n      require(_id != myFavorites[_msgSender()][i]);\n    }\n    favoriteCount[_id]++;\n    payable(tuneOwner[_id]).transfer(msg.value);\n    myFavorites[_msgSender()].push(_id);\n  }\n\n  function withdraw() external onlyOwner {\n    payable(owner()).transfer(address(this).balance);\n  }\n\n  function setFavoriteFee(uint _fee) external onlyOwner {\n    favoriteFee = _fee;\n  }\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"favorite\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_artist\",\"type\":\"address\"}],\"name\":\"getArtistTunes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyFavorites\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTune\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTunesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_t2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_t3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_t4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_t5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_t6\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_t7\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_t8\",\"type\":\"uint256\"}],\"name\":\"publishTune\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFavoriteFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CryptoTracks","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}