{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/L1_NovaApprovalEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice Escrow contract for relayers to approve input tokens to.\\n/// @dev Used by the L1_NovaExecutionManager to safely transfer tokens from relayers to strategies.\\ncontract L1_NovaApprovalEscrow {\\n    /// @notice The address who is authorized to transfer tokens from the approval escrow.\\n    /// @dev Initializing it as msg.sender here is equivalent to setting it in the constructor.\\n    address public immutable ESCROW_ADMIN = msg.sender;\\n\\n    /// @notice Transfers a token approved to the escrow.\\n    /// @notice Only the escrow admin can call this function.\\n    /// @param token The token to transfer.\\n    /// @param amount The amount of the token to transfer.\\n    /// @param sender The user who approved the token to the escrow.\\n    /// @param recipient The address to transfer the approved tokens to.\\n    /// @return A bool indicating if the transfer succeeded or not.\\n    function transferApprovedToken(\\n        address token,\\n        uint256 amount,\\n        address sender,\\n        address recipient\\n    ) external returns (bool) {\\n        // Ensure the caller is the escrow admin.\\n        require(ESCROW_ADMIN == msg.sender, \\\"UNAUTHORIZED\\\");\\n\\n        // Transfer tokens from the sender to the recipient.\\n        (bool success, bytes memory returnData) = address(token).call(\\n            abi.encodeWithSelector(\\n                // The token to transfer:\\n                IERC20(token).transferFrom.selector,\\n                // The address who approved tokens to the escrow:\\n                sender,\\n                // The address who should receive the tokens:\\n                recipient,\\n                // The amount of tokens to transfer to the recipient:\\n                amount\\n            )\\n        );\\n\\n        if (!success) {\\n            // If it reverted, return false\\n            // to indicate the transfer failed.\\n            return false;\\n        }\\n\\n        if (returnData.length > 0) {\\n            // An abi-encoded bool takes up 32 bytes.\\n            if (returnData.length == 32) {\\n                // Return false to indicate failure if\\n                // the return data was not a positive bool.\\n                return abi.decode(returnData, (bool));\\n            } else {\\n                // It returned some data that was not a bool,\\n                // return false to indicate the transfer failed.\\n                return false;\\n            }\\n        }\\n\\n        // If there was no failure,\\n        // return true to indicate success.\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"ESCROW_ADMIN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferApprovedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"L1_NovaApprovalEscrow","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}