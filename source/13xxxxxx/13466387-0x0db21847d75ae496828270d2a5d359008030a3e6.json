{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/reward/RewardBoosterV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../access/interfaces/IMarketAccessController.sol';\\nimport '../tools/upgradeability/VersionedInitializable.sol';\\nimport '../interfaces/IRewardMinter.sol';\\nimport './RewardBooster.sol';\\n\\ncontract RewardBoosterV1 is RewardBooster, VersionedInitializable {\\n  uint256 private constant CONTRACT_REVISION = 2; // incremented due to bugfix\\n\\n  constructor() RewardBooster(IMarketAccessController(address(0)), IRewardMinter(address(0))) {}\\n\\n  function getRevision() internal pure virtual override returns (uint256) {\\n    return CONTRACT_REVISION;\\n  }\\n\\n  // This initializer is invoked by AccessController.setAddressAsImpl\\n  function initialize(IMarketAccessController ac) external virtual initializer(CONTRACT_REVISION) {\\n    address underlying = ac.getAddress(AccessFlags.REWARD_TOKEN);\\n    require(underlying != address(0));\\n    _initialize(ac, IRewardMinter(underlying));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IMarketAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IAccessController.sol';\\n\\n/// @dev Main registry of addresses part of or connected to the protocol, including permissioned roles. Also acts a proxy factory.\\ninterface IMarketAccessController is IAccessController {\\n  function getMarketId() external view returns (string memory);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function getLendingRateOracle() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/tools/upgradeability/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to implement versioned initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` or `initializerRunAlways` modifier.\\n * The revision number should be defined as a private constant, returned by getRevision() and used by initializer() modifier.\\n *\\n * ATTN: There is a built-in protection from implementation self-destruct exploits. This protection\\n * prevents initializers from being called on an implementation inself, but only on proxied contracts.\\n * To override this protection, call _unsafeResetVersionedInitializers() from a constructor.\\n *\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an initializable contract, as well\\n * as extending an initializable contract via inheritance.\\n *\\n * ATTN: When used with inheritance, parent initializers with `initializer` modifier are prevented by calling twice,\\n * but can only be called in child-to-parent sequence.\\n *\\n * WARNING: When used with inheritance, parent initializers with `initializerRunAlways` modifier\\n * are NOT protected from multiple calls by another initializer.\\n */\\nabstract contract VersionedInitializable {\\n  uint256 private constant BLOCK_REVISION = type(uint256).max;\\n  // This revision number is applied to implementations\\n  uint256 private constant IMPL_REVISION = BLOCK_REVISION - 1;\\n\\n  /// @dev Indicates that the contract has been initialized. The default value blocks initializers from being called on an implementation.\\n  uint256 private lastInitializedRevision = IMPL_REVISION;\\n\\n  /// @dev Indicates that the contract is in the process of being initialized.\\n  uint256 private lastInitializingRevision = 0;\\n\\n  /**\\n   * @dev There is a built-in protection from self-destruct of implementation exploits. This protection\\n   * prevents initializers from being called on an implementation inself, but only on proxied contracts.\\n   * Function _unsafeResetVersionedInitializers() can be called from a constructor to disable this protection.\\n   * It must be called before any initializers, otherwise it will fail.\\n   */\\n  function _unsafeResetVersionedInitializers() internal {\\n    require(isConstructor(), 'only for constructor');\\n\\n    if (lastInitializedRevision == IMPL_REVISION) {\\n      lastInitializedRevision = 0;\\n    } else {\\n      require(lastInitializedRevision == 0, 'can only be called before initializer(s)');\\n    }\\n  }\\n\\n  /// @dev Modifier to use in the initializer function of a contract.\\n  modifier initializer(uint256 localRevision) {\\n    (uint256 topRevision, bool initializing, bool skip) = _preInitializer(localRevision);\\n\\n    if (!skip) {\\n      lastInitializingRevision = localRevision;\\n      _;\\n      lastInitializedRevision = localRevision;\\n    }\\n\\n    if (!initializing) {\\n      lastInitializedRevision = topRevision;\\n      lastInitializingRevision = 0;\\n    }\\n  }\\n\\n  modifier initializerRunAlways(uint256 localRevision) {\\n    (uint256 topRevision, bool initializing, bool skip) = _preInitializer(localRevision);\\n\\n    if (!skip) {\\n      lastInitializingRevision = localRevision;\\n    }\\n    _;\\n    if (!skip) {\\n      lastInitializedRevision = localRevision;\\n    }\\n\\n    if (!initializing) {\\n      lastInitializedRevision = topRevision;\\n      lastInitializingRevision = 0;\\n    }\\n  }\\n\\n  function _preInitializer(uint256 localRevision)\\n    private\\n    returns (\\n      uint256 topRevision,\\n      bool initializing,\\n      bool skip\\n    )\\n  {\\n    topRevision = getRevision();\\n    require(topRevision < IMPL_REVISION, 'invalid contract revision');\\n\\n    require(localRevision > 0, 'incorrect initializer revision');\\n    require(localRevision <= topRevision, 'inconsistent contract revision');\\n\\n    if (lastInitializedRevision < IMPL_REVISION) {\\n      // normal initialization\\n      initializing = lastInitializingRevision > 0 && lastInitializedRevision < topRevision;\\n      require(initializing || isConstructor() || topRevision > lastInitializedRevision, 'already initialized');\\n    } else {\\n      // by default, initialization of implementation is only allowed inside a constructor\\n      require(lastInitializedRevision == IMPL_REVISION && isConstructor(), 'initializer blocked');\\n\\n      // enable normal use of initializers inside a constructor\\n      lastInitializedRevision = 0;\\n      // but make sure to block initializers afterwards\\n      topRevision = BLOCK_REVISION;\\n\\n      initializing = lastInitializingRevision > 0;\\n    }\\n\\n    if (initializing) {\\n      require(lastInitializingRevision > localRevision, 'incorrect order of initializers');\\n    }\\n\\n    if (localRevision <= lastInitializedRevision) {\\n      // prevent calling of parent's initializer when it was called before\\n      if (initializing) {\\n        // Can't set zero yet, as it is not a top-level call, otherwise `initializing` will become false.\\n        // Further calls will fail with the `incorrect order` assertion above.\\n        lastInitializingRevision = 1;\\n      }\\n      return (topRevision, initializing, true);\\n    }\\n    return (topRevision, initializing, false);\\n  }\\n\\n  function isRevisionInitialized(uint256 localRevision) internal view returns (bool) {\\n    return lastInitializedRevision >= localRevision;\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function REVISION() public pure returns (uint256) {\\n    return getRevision();\\n  }\\n\\n  /**\\n   * @dev returns the revision number (< type(uint256).max - 1) of the contract.\\n   * The number should be defined as a private constant.\\n   **/\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    uint256 cs;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      cs := extcodesize(address())\\n    }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[4] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IRewardMinter {\\n  /// @dev mints a reward\\n  function mintReward(\\n    address account,\\n    uint256 amount,\\n    bool serviceAccount\\n  ) external;\\n\\n  event RewardAllocated(address provider, int256 amount);\\n\\n  /// @dev lumpsum allocation (not mint) of reward\\n  function allocateReward(address provider, int256 amount) external;\\n\\n  event RewardMaxRateUpdated(address provider, uint256 ratePerSecond);\\n\\n  /// @dev sets max allocation rate (not mint) of reward\\n  function streamReward(address provider, uint256 ratePerSecond) external;\\n\\n  function allocatedSupply() external view returns (uint256);\\n\\n  function mintedSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/reward/RewardBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../tools/math/PercentageMath.sol';\\nimport '../access/interfaces/IMarketAccessController.sol';\\nimport '../interfaces/IRewardMinter.sol';\\nimport './interfaces/IRewardPool.sol';\\nimport './interfaces/IManagedRewardPool.sol';\\nimport './interfaces/IRewardController.sol';\\nimport './interfaces/IBoostExcessReceiver.sol';\\nimport './interfaces/IBoostRate.sol';\\nimport './interfaces/IRewardExplainer.sol';\\nimport './autolock/AutolockBase.sol';\\nimport './BaseRewardController.sol';\\n\\ncontract RewardBooster is IManagedRewardBooster, IRewardExplainer, BaseRewardController, AutolockBase {\\n  using PercentageMath for uint256;\\n\\n  IManagedRewardPool private _boostPool;\\n  uint256 private _boostPoolMask;\\n\\n  address private _boostExcessDelegate;\\n  uint16 private _minBoostPct;\\n  bool private _mintExcess;\\n  bool private _updateBoostPool;\\n\\n  mapping(address => uint256) private _boostRewards;\\n\\n  struct WorkReward {\\n    // saves some of storage cost\\n    uint112 claimableReward;\\n    uint112 boostLimit;\\n    uint32 claimedAt;\\n  }\\n  mapping(address => WorkReward) private _workRewards;\\n\\n  constructor(IMarketAccessController accessController, IRewardMinter rewardMinter)\\n    BaseRewardController(accessController, rewardMinter)\\n  {}\\n\\n  function internalOnPoolRemoved(IManagedRewardPool pool) internal override {\\n    super.internalOnPoolRemoved(pool);\\n    if (_boostPool == pool) {\\n      _boostPool = IManagedRewardPool(address(0));\\n      _boostPoolMask = 0;\\n    }\\n  }\\n\\n  function setBoostFactor(address pool, uint32 pctFactor) external override onlyConfigOrRateAdmin {\\n    require(pool != address(_boostPool), 'factor for the boost pool');\\n    internalSetPoolInfo(pool, pctFactor);\\n  }\\n\\n  function getBoostFactor(address pool) public view returns (uint32 pctFactor) {\\n    return uint32(internalGetPoolInfo(pool));\\n  }\\n\\n  function setUpdateBoostPoolRate(bool updateBoostPool) external override onlyConfigAdmin {\\n    _updateBoostPool = updateBoostPool;\\n  }\\n\\n  function setMinBoost(uint16 minBoostPct) external override onlyConfigOrRateAdmin {\\n    require(minBoostPct <= PercentageMath.ONE, 'min boost is too high');\\n    _minBoostPct = minBoostPct;\\n    emit MinBoostUpdated(minBoostPct);\\n  }\\n\\n  function internalUpdateBaseline(uint256 baseline, uint256 baselineMask)\\n    internal\\n    override\\n    returns (uint256 totalRate, uint256)\\n  {\\n    if (_boostPoolMask == 0 || !_updateBoostPool) {\\n      return super.internalUpdateBaseline(baseline, baselineMask);\\n    }\\n\\n    (totalRate, baselineMask) = super.internalUpdateBaseline(baseline, baselineMask & ~_boostPoolMask);\\n    if (totalRate < baseline) {\\n      IBoostRate(address(_boostPool)).setBoostRate(baseline - totalRate);\\n      totalRate = baseline;\\n    } else {\\n      IBoostRate(address(_boostPool)).setBoostRate(0);\\n    }\\n\\n    return (totalRate, baselineMask);\\n  }\\n\\n  uint256 private constant BOOST_POOL_MARK = 1 << 33;\\n\\n  function setBoostPool(address pool) external override onlyConfigAdmin {\\n    if (address(_boostPool) == pool) {\\n      return;\\n    }\\n    if (address(_boostPool) != address(0)) {\\n      internalSetPoolInfo(address(_boostPool), 0);\\n    }\\n\\n    if (pool == address(0)) {\\n      _boostPoolMask = 0;\\n    } else {\\n      internalSetPoolInfo(pool, BOOST_POOL_MARK); // it also checks for known pool\\n      _boostPoolMask = getPoolMask(pool);\\n      require(_boostPoolMask != 0);\\n    }\\n    _boostPool = IManagedRewardPool(pool);\\n  }\\n\\n  function getBoostPool() external view override returns (address pool, uint256 mask) {\\n    return (address(_boostPool), _boostPoolMask);\\n  }\\n\\n  function setBoostExcessTarget(address target, bool mintExcess) external override onlyConfigAdmin {\\n    _boostExcessDelegate = target;\\n    _mintExcess = mintExcess && (target != address(0));\\n  }\\n\\n  function getBoostExcessTarget() external view returns (address target, bool mintExcess) {\\n    return (_boostExcessDelegate, _mintExcess);\\n  }\\n\\n  function internalClaimAndMintReward(address holder, uint256 allMask)\\n    internal\\n    override\\n    returns (uint256 claimableAmount, uint256)\\n  {\\n    WorkReward memory workReward = _workRewards[holder];\\n    claimableAmount = workReward.claimableReward;\\n    uint256 boostLimit = workReward.boostLimit;\\n\\n    _workRewards[holder] = WorkReward(0, 0, uint32(block.timestamp));\\n\\n    for ((uint8 i, uint256 mask) = (0, 1); mask <= allMask; (i, mask) = (i + 1, mask << 1)) {\\n      if (mask & allMask == 0) {\\n        if (mask == 0) break;\\n        continue;\\n      }\\n\\n      IManagedRewardPool pool = getPool(i);\\n      (uint256 amount_, , bool keepPull) = pool.claimRewardFor(holder);\\n      if (!keepPull) {\\n        internalUnsetPull(holder, mask);\\n      }\\n\\n      if (amount_ == 0) {\\n        continue;\\n      }\\n\\n      claimableAmount += amount_;\\n      boostLimit += amount_.percentMul(getBoostFactor(address(pool)));\\n    }\\n\\n    uint256 boostAmount = _boostRewards[holder];\\n    if (boostAmount > 0) {\\n      delete (_boostRewards[holder]);\\n    }\\n\\n    uint32 boostSince;\\n    if (_boostPool != IManagedRewardPool(address(0))) {\\n      if (_mintExcess || _boostExcessDelegate != address(_boostPool)) {\\n        uint256 boost_;\\n        (boost_, boostSince, ) = _boostPool.claimRewardFor(holder);\\n        boostAmount += boost_;\\n        boostLimit += PercentageMath.percentMul(boostAmount, _minBoostPct);\\n      } else {\\n        (boostAmount, boostSince, , boostLimit) = _boostPool.claimRewardWithLimitFor(\\n          holder,\\n          boostAmount,\\n          boostLimit,\\n          _minBoostPct\\n        );\\n      }\\n    }\\n\\n    if (boostAmount <= boostLimit) {\\n      claimableAmount += boostAmount;\\n    } else {\\n      claimableAmount += boostLimit;\\n      // boostSince is not exactly correct for the whole boostAmount, but it is ok here\\n      internalStoreBoostExcess(boostAmount - boostLimit, boostSince);\\n    }\\n\\n    return (claimableAmount, 0);\\n  }\\n\\n  function internalCalcClaimableReward(\\n    address holder,\\n    uint256 mask,\\n    uint32 at\\n  ) internal view override returns (uint256 claimableAmount, uint256 delayedAmount) {\\n    WorkReward memory workReward = _workRewards[holder];\\n    claimableAmount = workReward.claimableReward;\\n    uint256 boostLimit = workReward.boostLimit;\\n\\n    for (uint256 i = 0; mask != 0; (i, mask) = (i + 1, mask >> 1)) {\\n      if (mask & 1 == 0) {\\n        continue;\\n      }\\n\\n      IManagedRewardPool pool = getPool(i);\\n      (uint256 amount_, uint256 extra_, ) = pool.calcRewardFor(holder, at);\\n      delayedAmount += extra_;\\n      if (amount_ == 0) {\\n        continue;\\n      }\\n\\n      claimableAmount += amount_;\\n      boostLimit += amount_.percentMul(getBoostFactor(address(pool)));\\n    }\\n\\n    uint256 boostAmount = _boostRewards[holder];\\n\\n    if (_boostPool != IManagedRewardPool(address(0))) {\\n      (uint256 boost_, uint256 extra_, ) = _boostPool.calcRewardFor(holder, at);\\n      delayedAmount += extra_;\\n      boostAmount += boost_;\\n    }\\n\\n    boostLimit += PercentageMath.percentMul(boostAmount, _minBoostPct);\\n\\n    if (boostAmount <= boostLimit) {\\n      claimableAmount += boostAmount;\\n    } else {\\n      claimableAmount += boostLimit;\\n    }\\n\\n    return (claimableAmount, delayedAmount);\\n  }\\n\\n  function internalAllocatedByPool(\\n    address holder,\\n    uint256 allocated,\\n    uint256 poolInfo,\\n    uint32\\n  ) internal override {\\n    if (allocated == 0) {\\n      return;\\n    }\\n\\n    if (poolInfo == BOOST_POOL_MARK) {\\n      _boostRewards[holder] += allocated;\\n      return;\\n    }\\n\\n    WorkReward memory workReward = _workRewards[holder];\\n    if (workReward.claimedAt == 0) {\\n      workReward.claimedAt = uint32(block.timestamp);\\n    }\\n\\n    uint256 v = workReward.claimableReward + allocated;\\n    require(v <= type(uint112).max);\\n    workReward.claimableReward = uint112(v);\\n\\n    if (poolInfo != 0) {\\n      unchecked {\\n        v = workReward.boostLimit + allocated.percentMul(uint32(poolInfo));\\n      }\\n      if (v < type(uint112).max) {\\n        workReward.boostLimit = uint112(v);\\n      } else {\\n        workReward.boostLimit = type(uint112).max;\\n      }\\n    }\\n\\n    _workRewards[holder] = workReward;\\n  }\\n\\n  function internalStoreBoostExcess(uint256 boostExcess, uint32 since) private {\\n    if (_boostExcessDelegate == address(0)) {\\n      return;\\n    }\\n\\n    if (_mintExcess) {\\n      internalMint(_boostExcessDelegate, boostExcess, true);\\n      return;\\n    }\\n\\n    IBoostExcessReceiver(_boostExcessDelegate).receiveBoostExcess(boostExcess, since);\\n  }\\n\\n  function disableAutolock() external onlyConfigAdmin {\\n    internalDisableAutolock();\\n  }\\n\\n  function enableAutolockAndSetDefault(\\n    AutolockMode mode,\\n    uint32 lockDuration,\\n    uint224 param\\n  ) external onlyConfigAdmin {\\n    internalSetDefaultAutolock(mode, lockDuration, param);\\n  }\\n\\n  function internalClaimed(\\n    address holder,\\n    address mintTo,\\n    uint256 amount\\n  ) internal override returns (uint256 lockAmount) {\\n    address lockReceiver;\\n    (lockAmount, lockReceiver) = internalApplyAutolock(address(_boostPool), holder, amount);\\n    if (lockAmount > 0) {\\n      amount -= lockAmount;\\n      internalMint(lockReceiver, lockAmount, true);\\n    }\\n    if (amount > 0) {\\n      internalMint(mintTo, amount, false);\\n    }\\n    return lockAmount;\\n  }\\n\\n  function claimableMask(address holder, uint256 includeMask) internal view override returns (uint256) {\\n    return super.claimableMask(holder, includeMask) & ~_boostPoolMask;\\n  }\\n\\n  function explainReward(address holder, uint32 at) external view override returns (RewardExplained memory) {\\n    require(at >= uint32(block.timestamp));\\n    return internalExplainReward(holder, super.claimableMask(holder, 0), at);\\n  }\\n\\n  function internalExplainReward(\\n    address holder,\\n    uint256 mask,\\n    uint32 at\\n  ) private view returns (RewardExplained memory r) {\\n    WorkReward memory workReward = _workRewards[holder];\\n    (r.amountClaimable, r.boostLimit, r.latestClaimAt) = (\\n      workReward.claimableReward,\\n      workReward.boostLimit,\\n      workReward.claimedAt\\n    );\\n\\n    uint256 n;\\n    for (uint256 mask_ = mask; mask_ != 0; mask_ >>= 1) {\\n      if (mask_ & 1 != 0) {\\n        n++;\\n      }\\n    }\\n    r.allocations = new RewardExplainEntry[](n);\\n\\n    n = 0;\\n    for (uint256 i = 0; mask != 0; (i, mask) = (i + 1, mask >> 1)) {\\n      if (mask & 1 == 0) {\\n        continue;\\n      }\\n\\n      IManagedRewardPool pool = getPool(i);\\n      uint256 amount_;\\n      uint256 extra_;\\n      (amount_, extra_, r.allocations[n].since) = pool.calcRewardFor(holder, at);\\n      r.allocations[n].extra = extra_;\\n      r.amountExtra += extra_;\\n\\n      r.allocations[n].pool = address(pool);\\n      r.allocations[n].amount = amount_;\\n\\n      if (pool == _boostPool) {\\n        r.allocations[n].rewardType = RewardType.BoostReward;\\n        r.allocations[n].factor = _minBoostPct;\\n        r.maxBoost = _boostRewards[holder] + amount_;\\n      } else {\\n        r.allocations[n].rewardType = RewardType.WorkReward;\\n        r.allocations[n].factor = getBoostFactor(address(pool));\\n\\n        if (amount_ > 0) {\\n          r.amountClaimable += amount_;\\n          r.boostLimit += amount_.percentMul(r.allocations[n].factor);\\n        }\\n      }\\n\\n      n++;\\n    }\\n\\n    r.boostLimit += PercentageMath.percentMul(r.maxBoost, _minBoostPct);\\n\\n    if (r.maxBoost <= r.boostLimit) {\\n      r.amountClaimable += r.maxBoost;\\n    } else {\\n      r.amountClaimable += r.boostLimit;\\n    }\\n\\n    return r;\\n  }\\n\\n  function internalSetPull(\\n    address holder,\\n    uint256 mask,\\n    AllocationMode mode\\n  ) internal override {\\n    super.internalSetPull(holder, mask, mode);\\n    if (mode == AllocationMode.SetPullSpecial) {\\n      super.internalCancelAutolock(holder);\\n    }\\n    if (_workRewards[holder].claimedAt == 0) {\\n      _workRewards[holder].claimedAt = uint32(block.timestamp);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IRemoteAccessBitmask.sol';\\nimport '../../tools/upgradeability/IProxy.sol';\\n\\n/// @dev Main registry of permissions and addresses\\ninterface IAccessController is IRemoteAccessBitmask {\\n  function getAddress(uint256 id) external view returns (address);\\n\\n  function createProxy(\\n    address admin,\\n    address impl,\\n    bytes calldata params\\n  ) external returns (IProxy);\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IRemoteAccessBitmask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IRemoteAccessBitmask {\\n  /**\\n   * @dev Returns access flags granted to the given address and limited by the filterMask. filterMask == 0 has a special meaning.\\n   * @param addr an to get access perfmissions for\\n   * @param filterMask limits a subset of flags to be checked.\\n   * NB! When filterMask == 0 then zero is returned no flags granted, or an unspecified non-zero value otherwise.\\n   * @return Access flags currently granted\\n   */\\n  function queryAccessControlMask(address addr, uint256 filterMask) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/tools/upgradeability/IProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IProxy {\\n  function upgradeToAndCall(address newImplementation, bytes calldata data) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/tools/math/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../Errors.sol';\\n\\n/// @dev Percentages are defined in basis points. The precision is indicated by ONE. Operations are rounded half up.\\nlibrary PercentageMath {\\n  uint16 public constant BP = 1; // basis point\\n  uint16 public constant PCT = 100 * BP; // basis points per percentage point\\n  uint16 public constant ONE = 100 * PCT; // basis points per 1 (100%)\\n  uint16 public constant HALF_ONE = ONE / 2;\\n  // deprecated\\n  uint256 public constant PERCENTAGE_FACTOR = ONE; //percentage plus two decimals\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param factor Basis points of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 factor) internal pure returns (uint256) {\\n    if (value == 0 || factor == 0) {\\n      return 0;\\n    }\\n\\n    require(value <= (type(uint256).max - HALF_ONE) / factor, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * factor + HALF_ONE) / ONE;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param factor Basis points of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 factor) internal pure returns (uint256) {\\n    require(factor != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfFactor = factor >> 1;\\n\\n    require(value <= (type(uint256).max - halfFactor) / ONE, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * ONE + halfFactor) / factor;\\n  }\\n\\n  function percentOf(uint256 value, uint256 base) internal pure returns (uint256) {\\n    require(base != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    if (value == 0) {\\n      return 0;\\n    }\\n\\n    require(value <= (type(uint256).max - HALF_ONE) / ONE, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * ONE + (base >> 1)) / base;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../interfaces/IBalanceHook.sol';\\n\\ninterface IRewardPool is IBalanceHook {}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IManagedRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../interfaces/IEmergencyAccess.sol';\\n\\ninterface IManagedRewardPool is IEmergencyAccess {\\n  function updateBaseline(uint256) external returns (bool hasBaseline, uint256 appliedRate);\\n\\n  function setBaselinePercentage(uint16) external;\\n\\n  function getBaselinePercentage() external view returns (uint16);\\n\\n  function getRate() external view returns (uint256);\\n\\n  function getPoolName() external view returns (string memory);\\n\\n  function claimRewardFor(address holder)\\n    external\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull\\n    );\\n\\n  function claimRewardWithLimitFor(\\n    address holder,\\n    uint256 baseAmount,\\n    uint256 limit,\\n    uint16 minPct\\n  )\\n    external\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull,\\n      uint256 newLimit\\n    );\\n\\n  function calcRewardFor(address holder, uint32 at)\\n    external\\n    view\\n    returns (\\n      uint256 amount,\\n      uint256 extra,\\n      uint32 since\\n    );\\n\\n  function addRewardProvider(address provider, address token) external;\\n\\n  function removeRewardProvider(address provider) external;\\n\\n  function getRewardController() external view returns (address);\\n\\n  function attachedToRewardController() external returns (uint256 allocateReward);\\n\\n  function detachedFromRewardController() external returns (uint256 deallocateReward);\\n\\n  event RateUpdated(uint256 rate);\\n  event BaselinePercentageUpdated(uint16);\\n  event ProviderAdded(address provider, address token);\\n  event ProviderRemoved(address provider);\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IRewardController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../access/interfaces/IMarketAccessController.sol';\\n\\nenum AllocationMode {\\n  Push,\\n  SetPull,\\n  SetPullSpecial\\n}\\n\\ninterface IRewardController {\\n  function allocatedByPool(\\n    address holder,\\n    uint256 allocated,\\n    uint32 since,\\n    AllocationMode mode\\n  ) external;\\n\\n  function isRateAdmin(address) external view returns (bool);\\n\\n  function isConfigAdmin(address) external view returns (bool);\\n\\n  function getAccessController() external view returns (IMarketAccessController);\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IBoostExcessReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IBoostExcessReceiver {\\n  function receiveBoostExcess(uint256 amount, uint32 since) external;\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IBoostRate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IBoostRate {\\n  function setBoostRate(uint256 rate) external;\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IRewardExplainer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IRewardExplainer {\\n  /// @dev provides in depth details about rewards of the holder. Accuracy of future projection is not guaranteed.\\n  /// @dev NB! explanation does not consider auto-locking\\n  /// @param at is a timestamp (current or future) to calculate rewards\\n  /// @return details of rewards, see RewardExplained\\n  function explainReward(address holder, uint32 at) external view returns (RewardExplained memory);\\n}\\n\\n/// @dev details of rewards of a holder, please refer to tokenomics on reward calculations\\nstruct RewardExplained {\\n  /// @dev total amount of rewards that will be claimed (including boost)\\n  uint256 amountClaimable;\\n  /// @dev total amount of rewards allocated to the holder but are frozen now\\n  uint256 amountExtra;\\n  /// @dev maximum possible amount of boost generated by xAGF\\n  uint256 maxBoost;\\n  /// @dev maximum allowed amount of boost based on work rewards (from deposits, debts, stakes etc)\\n  uint256 boostLimit;\\n  /// @dev timestamp of the latest claim\\n  uint32 latestClaimAt;\\n  /// @dev a list of pools currently generating rewards to the holder\\n  RewardExplainEntry[] allocations;\\n}\\n\\n/// @dev details of reward generation by a reward pool\\nstruct RewardExplainEntry {\\n  /// @dev amount of rewards generated by the reward pool since last update (see `since`)\\n  uint256 amount;\\n  /// @dev amount of rewards frozen by the reward pool\\n  uint256 extra;\\n  /// @dev address of the reward pool\\n  address pool;\\n  /// @dev timestamp of a last update of the holder in the reward pool (e.g. claim or balance change)\\n  uint32 since;\\n  /// @dev multiplication factor in basis points (10000=100%) to calculate boost limit by outcome of the pool\\n  uint32 factor;\\n  /// @dev type of reward pool: boost (added to the max boost) or work (added to the claimable amount and to the boost limit)\\n  RewardType rewardType;\\n}\\n\\nenum RewardType {\\n  WorkReward,\\n  BoostReward\\n}\\n\"\r\n    },\r\n    \"contracts/reward/autolock/AutolockBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../interfaces/IAutolocker.sol';\\n\\nabstract contract AutolockBase {\\n  struct AutolockEntry {\\n    uint224 param;\\n    AutolockMode mode;\\n    uint8 lockDuration;\\n  }\\n\\n  mapping(address => AutolockEntry) private _autolocks;\\n  AutolockEntry private _defaultAutolock;\\n\\n  function internalDisableAutolock() internal {\\n    _defaultAutolock = AutolockEntry(0, AutolockMode.Default, 0);\\n    emit RewardAutolockConfigured(address(this), AutolockMode.Default, 0, 0);\\n  }\\n\\n  function isAutolockEnabled() public view returns (bool) {\\n    return _defaultAutolock.mode != AutolockMode.Default;\\n  }\\n\\n  function internalSetDefaultAutolock(\\n    AutolockMode mode,\\n    uint32 lockDuration,\\n    uint224 param\\n  ) internal {\\n    require(mode > AutolockMode.Default);\\n\\n    _defaultAutolock = AutolockEntry(param, mode, fromDuration(lockDuration));\\n    emit RewardAutolockConfigured(address(this), mode, lockDuration, param);\\n  }\\n\\n  function fromDuration(uint32 lockDuration) private pure returns (uint8) {\\n    require(lockDuration % 1 weeks == 0, 'duration must be in weeks');\\n    uint256 v = lockDuration / 1 weeks;\\n    require(v <= 4 * 52, 'duration must be less than 209 weeks');\\n    return uint8(v);\\n  }\\n\\n  event RewardAutolockConfigured(address indexed account, AutolockMode mode, uint32 lockDuration, uint224 param);\\n\\n  function internalCancelAutolock(address account) internal {\\n    _setAutolock(account, AutolockMode.Stop, 0, 0);\\n  }\\n\\n  function _setAutolock(\\n    address account,\\n    AutolockMode mode,\\n    uint32 lockDuration,\\n    uint224 param\\n  ) private {\\n    _autolocks[account] = AutolockEntry(param, mode, fromDuration(lockDuration));\\n    emit RewardAutolockConfigured(account, mode, lockDuration, param);\\n  }\\n\\n  function autolockProlongate(uint32 minLockDuration) external {\\n    _setAutolock(msg.sender, AutolockMode.Prolongate, minLockDuration, 0);\\n  }\\n\\n  function autolockAccumulateUnderlying(uint256 maxAmount, uint32 lockDuration) external {\\n    require(maxAmount > 0, 'max amount is required');\\n    if (maxAmount > type(uint224).max) {\\n      maxAmount = type(uint224).max;\\n    }\\n\\n    _setAutolock(msg.sender, AutolockMode.AccumulateUnderlying, lockDuration, uint224(maxAmount));\\n  }\\n\\n  function autolockAccumulateTill(uint256 timestamp, uint32 lockDuration) external {\\n    require(timestamp > block.timestamp, 'future timestamp is required');\\n    if (timestamp > type(uint224).max) {\\n      timestamp = type(uint224).max;\\n    }\\n    _setAutolock(msg.sender, AutolockMode.AccumulateTill, lockDuration, uint224(timestamp));\\n  }\\n\\n  function autolockKeepUpBalance(uint256 minAmount, uint32 lockDuration) external {\\n    require(minAmount > 0, 'min amount is required');\\n    require(lockDuration > 0, 'lock duration is required');\\n\\n    if (minAmount > type(uint224).max) {\\n      minAmount = type(uint224).max;\\n    }\\n    _setAutolock(msg.sender, AutolockMode.KeepUpBalance, lockDuration, uint224(minAmount));\\n  }\\n\\n  function autolockDefault() external {\\n    _setAutolock(msg.sender, AutolockMode.Default, 0, 0);\\n  }\\n\\n  function autolockStop() external {\\n    _setAutolock(msg.sender, AutolockMode.Stop, 0, 0);\\n  }\\n\\n  function autolockOf(address account)\\n    public\\n    view\\n    returns (\\n      AutolockMode mode,\\n      uint32 lockDuration,\\n      uint256 param\\n    )\\n  {\\n    AutolockEntry memory entry = _autolocks[account];\\n    if (entry.mode == AutolockMode.Default) {\\n      entry = _defaultAutolock;\\n    }\\n    return (entry.mode, entry.lockDuration * 1 weeks, entry.param);\\n  }\\n\\n  function internalApplyAutolock(\\n    address autolocker,\\n    address holder,\\n    uint256 amount\\n  ) internal returns (uint256 lockAmount, address lockReceiver) {\\n    if (autolocker == address(0)) {\\n      return (0, address(0));\\n    }\\n\\n    AutolockEntry memory entry = _autolocks[holder];\\n    if (entry.mode == AutolockMode.Stop || _defaultAutolock.mode == AutolockMode.Default) {\\n      return (0, address(0));\\n    }\\n\\n    if (entry.mode == AutolockMode.Default) {\\n      entry = _defaultAutolock;\\n      if (entry.mode == AutolockMode.Stop) {\\n        return (0, address(0));\\n      }\\n    }\\n\\n    bool stop;\\n    (lockReceiver, lockAmount, stop) = IAutolocker(autolocker).applyAutolock(\\n      holder,\\n      amount,\\n      entry.mode,\\n      entry.lockDuration * 1 weeks,\\n      entry.param\\n    );\\n\\n    if (stop) {\\n      _setAutolock(holder, AutolockMode.Stop, 0, 0);\\n    }\\n\\n    if (lockAmount > 0) {\\n      require(lockReceiver != address(0));\\n      return (lockAmount, lockReceiver);\\n    }\\n    return (0, address(0));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/reward/BaseRewardController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../access/interfaces/IMarketAccessController.sol';\\nimport '../access/MarketAccessBitmask.sol';\\nimport '../access/AccessFlags.sol';\\nimport './interfaces/IManagedRewardController.sol';\\nimport './interfaces/IManagedRewardPool.sol';\\nimport '../interfaces/IRewardMinter.sol';\\nimport './interfaces/IRewardCollector.sol';\\nimport '../tools/Errors.sol';\\n\\nabstract contract BaseRewardController is IRewardCollector, MarketAccessBitmask, IManagedRewardController {\\n  IRewardMinter private _rewardMinter;\\n\\n  IManagedRewardPool[] private _poolList;\\n\\n  /* IManagedRewardPool =>  */\\n  mapping(address => uint256) private _poolDesc;\\n  /* holder => masks of related pools */\\n  mapping(address => uint256) private _memberOf;\\n\\n  uint256 private _ignoreMask;\\n  uint256 private _baselineMask;\\n\\n  bool private _paused;\\n\\n  constructor(IMarketAccessController accessController, IRewardMinter rewardMinter)\\n    MarketAccessBitmask(accessController)\\n  {\\n    _rewardMinter = rewardMinter;\\n  }\\n\\n  function _initialize(IMarketAccessController ac, IRewardMinter rewardMinter) internal {\\n    _remoteAcl = ac;\\n    _rewardMinter = rewardMinter;\\n  }\\n\\n  function getAccessController() public view override returns (IMarketAccessController) {\\n    return _remoteAcl;\\n  }\\n\\n  uint256 private constant POOL_ID_BITS = 16;\\n  uint256 private constant POOL_ID_MASK = (uint256(1) << POOL_ID_BITS) - 1;\\n  uint256 private constant MAX_POOL_INFO = type(uint256).max >> POOL_ID_BITS;\\n\\n  function addRewardPool(IManagedRewardPool pool) external override onlyConfigAdmin {\\n    require(address(pool) != address(0), 'reward pool required');\\n    require(_poolDesc[address(pool)] == 0, 'already registered');\\n    require(_poolList.length <= 255, 'too many pools');\\n\\n    uint256 poolMask = 1 << _poolList.length;\\n    _poolList.push(pool);\\n    _poolDesc[address(pool)] = _poolList.length;\\n    _baselineMask |= poolMask;\\n\\n    uint256 allocateReward = pool.attachedToRewardController(); // also double-check access\\n    if (allocateReward > 0) {\\n      require(allocateReward <= uint256(type(int256).max), 'excessive preallocation');\\n      _rewardMinter.allocateReward(address(pool), int256(allocateReward));\\n    }\\n\\n    emit RewardPoolAdded(address(pool), poolMask);\\n  }\\n\\n  function removeRewardPool(IManagedRewardPool pool) external override onlyConfigAdmin {\\n    require(address(pool) != address(0), 'reward pool required');\\n    uint256 poolDesc = _poolDesc[address(pool)];\\n    if (poolDesc == 0) {\\n      return;\\n    }\\n    uint256 idx = (poolDesc & POOL_ID_MASK) - 1;\\n    require(_poolList[idx] == pool, 'unexpected pool');\\n\\n    _poolList[idx] = IManagedRewardPool(address(0));\\n    delete (_poolDesc[address(pool)]);\\n\\n    uint256 poolMask = 1 << idx;\\n    _ignoreMask |= poolMask;\\n\\n    uint256 unallocateReward = pool.detachedFromRewardController();\\n    if (unallocateReward > 0) {\\n      require(unallocateReward <= uint256(type(int256).max), 'excessive deallocation');\\n      _rewardMinter.allocateReward(address(pool), -int256(unallocateReward));\\n    }\\n\\n    internalOnPoolRemoved(pool);\\n\\n    emit RewardPoolRemoved(address(pool), poolMask);\\n  }\\n\\n  function getPoolMask(address pool) public view override returns (uint256) {\\n    uint256 poolDesc = _poolDesc[address(pool)];\\n    if (poolDesc == 0) {\\n      return 0;\\n    }\\n    return 1 << ((poolDesc & POOL_ID_MASK) - 1);\\n  }\\n\\n  function getPoolsByMask(uint256 allMask) external view override returns (address[] memory pools) {\\n    allMask = _limitMask(allMask) & ~_ignoreMask;\\n    uint256 n;\\n    for (uint256 mask = allMask; mask > 0; mask >>= 1) {\\n      if (mask & 1 != 0) {\\n        n++;\\n      }\\n    }\\n\\n    pools = new address[](n);\\n    n = 0;\\n    for ((uint256 i, uint256 mask) = (0, allMask); n < pools.length; (i, mask) = (i + 1, mask >> 1)) {\\n      if (mask & 1 != 0) {\\n        pools[n] = address(_poolList[i]);\\n        n++;\\n      }\\n    }\\n\\n    return pools;\\n  }\\n\\n  function internalSetPoolInfo(address pool, uint256 info) internal {\\n    require(info <= MAX_POOL_INFO, 'excessive pool info');\\n    uint256 poolId = _poolDesc[address(pool)] & POOL_ID_MASK;\\n    require(poolId != 0, 'unknown pool');\\n    _poolDesc[address(pool)] = poolId | (info << POOL_ID_BITS);\\n  }\\n\\n  function internalGetPoolInfo(address pool) internal view returns (uint256) {\\n    return _poolDesc[address(pool)] >> POOL_ID_BITS;\\n  }\\n\\n  function internalOnPoolRemoved(IManagedRewardPool) internal virtual {}\\n\\n  function updateBaseline(uint256 baseline) public override onlyRateAdmin returns (uint256 totalRate) {\\n    (totalRate, _baselineMask) = internalUpdateBaseline(baseline, _baselineMask);\\n    require(totalRate <= baseline, Errors.RW_BASELINE_EXCEEDED);\\n\\n    _rewardMinter.streamReward(address(this), totalRate);\\n\\n    emit BaselineUpdated(baseline, totalRate, _baselineMask);\\n    return totalRate;\\n  }\\n\\n  function internalUpdateBaseline(uint256 baseline, uint256 allMask)\\n    internal\\n    virtual\\n    returns (uint256 totalRate, uint256)\\n  {\\n    allMask &= ~_ignoreMask;\\n\\n    for ((uint8 i, uint256 mask) = (0, 1); mask <= allMask; (i, mask) = (i + 1, mask << 1)) {\\n      if (mask & allMask == 0) {\\n        if (mask == 0) break;\\n        continue;\\n      }\\n\\n      (bool hasBaseline, uint256 appliedRate) = _poolList[i].updateBaseline(baseline);\\n      if (appliedRate != 0) {\\n        totalRate += appliedRate;\\n      } else if (!hasBaseline) {\\n        allMask &= ~mask;\\n      }\\n    }\\n    return (totalRate, allMask);\\n  }\\n\\n  function setRewardMinter(IRewardMinter minter) external override onlyConfigAdmin {\\n    _rewardMinter = minter;\\n    emit RewardMinterSet(address(minter));\\n  }\\n\\n  function getPools() public view override returns (IManagedRewardPool[] memory, uint256 ignoreMask) {\\n    return (_poolList, _ignoreMask);\\n  }\\n\\n  function getRewardMinter() external view returns (address) {\\n    return address(_rewardMinter);\\n  }\\n\\n  function claimReward() external override notPaused returns (uint256 claimed, uint256 extra) {\\n    return _claimReward(msg.sender, claimableMask(msg.sender, 0), msg.sender);\\n  }\\n\\n  function claimRewardTo(address receiver, uint256 includeMask)\\n    external\\n    override\\n    notPaused\\n    returns (uint256 claimed, uint256 extra)\\n  {\\n    require(receiver != address(0), 'receiver is required');\\n    return _claimReward(msg.sender, claimableMask(msg.sender, includeMask), receiver);\\n  }\\n\\n  function claimableReward(address holder) public view override returns (uint256 claimable, uint256 extra) {\\n    return _calcReward(holder, claimableMask(holder, 0), uint32(block.timestamp));\\n  }\\n\\n  function claimableRewardFor(address holder, uint256 includeMask)\\n    external\\n    view\\n    override\\n    returns (uint256 claimable, uint256 extra)\\n  {\\n    return _calcReward(holder, claimableMask(holder, includeMask), uint32(block.timestamp));\\n  }\\n\\n  function balanceOf(address holder) external view override returns (uint256) {\\n    if (holder == address(0)) {\\n      return 0;\\n    }\\n    (uint256 claimable, uint256 extra) = _calcReward(holder, claimableMask(holder, 0), uint32(block.timestamp));\\n    return claimable + extra;\\n  }\\n\\n  function _limitMask(uint256 includeMask) private view returns (uint256) {\\n    uint256 limitMask = uint256(1) << _poolList.length;\\n    unchecked {\\n      limitMask--;\\n    }\\n    return includeMask & limitMask;\\n  }\\n\\n  function claimableMask(address holder, uint256 includeMask) internal view virtual returns (uint256) {\\n    if (includeMask == 0) {\\n      return _memberOf[holder] & ~_ignoreMask;\\n    }\\n    return (_limitMask(includeMask) | _memberOf[holder]) & ~_ignoreMask;\\n  }\\n\\n  function claimablePools(address holder) external view override returns (uint256) {\\n    return claimableMask(holder, 0);\\n  }\\n\\n  function setClaimablePools(uint256 includeMask) external override {\\n    _memberOf[msg.sender] = claimableMask(msg.sender, includeMask);\\n  }\\n\\n  function allocatedByPool(\\n    address holder,\\n    uint256 allocated,\\n    uint32 since,\\n    AllocationMode mode\\n  ) external override {\\n    uint256 poolDesc = _poolDesc[msg.sender];\\n    uint256 poolId = poolDesc & POOL_ID_MASK;\\n    require(poolId != 0, 'unknown pool');\\n    poolDesc >>= POOL_ID_BITS;\\n\\n    if (allocated > 0) {\\n      internalAllocatedByPool(holder, allocated, poolDesc, since);\\n      emit RewardsAllocated(holder, allocated, msg.sender);\\n    }\\n\\n    if (mode == AllocationMode.Push) {\\n      return;\\n    }\\n\\n    internalSetPull(holder, 1 << (poolId - 1), mode);\\n  }\\n\\n  function internalSetPull(\\n    address holder,\\n    uint256 mask,\\n    AllocationMode mode\\n  ) internal virtual {\\n    mode;\\n    uint256 pullMask = _memberOf[holder];\\n    if (pullMask & mask != mask) {\\n      _memberOf[holder] = pullMask | mask;\\n    }\\n  }\\n\\n  function internalUnsetPull(address holder, uint256 mask) internal {\\n    uint256 pullMask = _memberOf[holder];\\n    if (pullMask & mask != 0) {\\n      _memberOf[holder] = pullMask & ~mask;\\n    }\\n  }\\n\\n  function isRateAdmin(address addr) public view override returns (bool) {\\n    if (!hasRemoteAcl()) {\\n      return addr == address(this);\\n    }\\n    return acl_hasAnyOf(addr, AccessFlags.REWARD_RATE_ADMIN | AccessFlags.REWARD_CONFIGURATOR);\\n  }\\n\\n  function _onlyRateAdmin() private view {\\n    require(isRateAdmin(msg.sender), Errors.CALLER_NOT_REWARD_RATE_ADMIN);\\n  }\\n\\n  modifier onlyRateAdmin() {\\n    _onlyRateAdmin();\\n    _;\\n  }\\n\\n  function isConfigAdmin(address addr) public view override returns (bool) {\\n    if (!hasRemoteAcl()) {\\n      return addr == address(this);\\n    }\\n    return acl_hasAnyOf(addr, AccessFlags.REWARD_CONFIGURATOR | AccessFlags.REWARD_CONFIG_ADMIN);\\n  }\\n\\n  function _onlyConfigAdmin() private view {\\n    require(isConfigAdmin(msg.sender), Errors.CALLER_NOT_REWARD_CONFIG_ADMIN);\\n  }\\n\\n  modifier onlyConfigAdmin() {\\n    _onlyConfigAdmin();\\n    _;\\n  }\\n\\n  function _onlyConfigOrRateAdmin() private view {\\n    require(isConfigAdmin(msg.sender) || isRateAdmin(msg.sender), Errors.CALLER_NOT_REWARD_RATE_ADMIN);\\n  }\\n\\n  modifier onlyConfigOrRateAdmin() {\\n    _onlyConfigOrRateAdmin();\\n    _;\\n  }\\n\\n  function getPool(uint256 index) internal view returns (IManagedRewardPool) {\\n    return _poolList[index];\\n  }\\n\\n  function _claimReward(\\n    address holder,\\n    uint256 mask,\\n    address receiver\\n  ) private returns (uint256 claimed, uint256 extra) {\\n    (claimed, extra) = internalClaimAndMintReward(holder, mask);\\n\\n    if (claimed > 0) {\\n      extra += internalClaimed(holder, receiver, claimed);\\n      emit RewardsClaimed(holder, receiver, claimed);\\n    }\\n    return (claimed, extra);\\n  }\\n\\n  function internalClaimed(\\n    address holder,\\n    address mintTo,\\n    uint256 amount\\n  ) internal virtual returns (uint256) {\\n    holder;\\n    internalMint(mintTo, amount, false);\\n    return 0;\\n  }\\n\\n  function internalMint(\\n    address mintTo,\\n    uint256 amount,\\n    bool serviceAccount\\n  ) internal {\\n    _rewardMinter.mintReward(mintTo, amount, serviceAccount);\\n  }\\n\\n  function internalClaimAndMintReward(address holder, uint256 mask)\\n    internal\\n    virtual\\n    returns (uint256 claimed, uint256 extra);\\n\\n  function _calcReward(\\n    address holder,\\n    uint256 mask,\\n    uint32 at\\n  ) private view returns (uint256 claimableAmount, uint256 extraAmount) {\\n    require(holder != address(0), 'holder is required');\\n    return internalCalcClaimableReward(holder, mask, at);\\n  }\\n\\n  function internalCalcClaimableReward(\\n    address holder,\\n    uint256 mask,\\n    uint32 at\\n  ) internal view virtual returns (uint256 claimableAmount, uint256 extraAmount);\\n\\n  function internalAllocatedByPool(\\n    address holder,\\n    uint256 allocated,\\n    uint256 poolInfo,\\n    uint32 since\\n  ) internal virtual;\\n\\n  function _notPaused() private view {\\n    require(!_paused, Errors.RW_REWARD_PAUSED);\\n  }\\n\\n  modifier notPaused() {\\n    _notPaused();\\n    _;\\n  }\\n\\n  function setPaused(bool paused) public override onlyEmergencyAdmin {\\n    _paused = paused;\\n    emit EmergencyPaused(msg.sender, paused);\\n  }\\n\\n  function isPaused() public view override returns (bool) {\\n    return _paused;\\n  }\\n\\n  function setBaselinePercentagesAndRate(\\n    IManagedRewardPool[] calldata pools,\\n    uint16[] calldata pcts,\\n    uint256 baseline\\n  ) external onlyRateAdmin {\\n    require(pools.length == pcts.length, 'mismatched length');\\n    uint256 baselineMask = _baselineMask;\\n\\n    for (uint256 i = 0; i < pools.length; i++) {\\n      uint256 mask = getPoolMask(address(pools[i]));\\n      require(mask != 0, 'unknown pool');\\n      pools[i].setBaselinePercentage(pcts[i]);\\n      if (pcts[i] > 0) {\\n        baselineMask |= mask;\\n      }\\n    }\\n\\n    _baselineMask = baselineMask;\\n\\n    if (baseline != type(uint256).max) {\\n      updateBaseline(baseline);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (DepositToken, VariableDebtToken and StableDebtToken)\\n *  - AT = DepositToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = AddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolExtension\\n *  - ST = Stake\\n */\\nlibrary Errors {\\n  //contract specific errors\\n  string public constant VL_INVALID_AMOUNT = '1'; // Amount must be greater than 0\\n  string public constant VL_NO_ACTIVE_RESERVE = '2'; // Action requires an active reserve\\n  string public constant VL_RESERVE_FROZEN = '3'; // Action cannot be performed because the reserve is frozen\\n  string public constant VL_UNKNOWN_RESERVE = '4'; // Action requires an active reserve\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // User cannot withdraw more than the available balance (above min limit)\\n  string public constant VL_TRANSFER_NOT_ALLOWED = '6'; // Transfer cannot be allowed.\\n  string public constant VL_BORROWING_NOT_ENABLED = '7'; // Borrowing is not enabled\\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // Invalid interest rate mode selected\\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // The collateral balance is 0\\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // Health factor is lesser than the liquidation threshold\\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // There is not enough collateral to cover a new borrow\\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\\n  string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\\n  string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // The requested amount is exceeds max size of a stable loan\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // to repay a debt, user needs to specify a correct debt type (variable or stable)\\n  string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // To repay on behalf of an user an explicit amount to repay is needed\\n  string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // User does not have a stable rate loan in progress on this reserve\\n  string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // User does not have a variable rate loan in progress on this reserve\\n  string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // The collateral balance needs to be greater than 0\\n  string public constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // User deposit is already being used as collateral\\n  string public constant VL_RESERVE_MUST_BE_COLLATERAL = '21'; // This reserve must be enabled as collateral\\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // Interest rate rebalance conditions were not met\\n  string public constant AT_OVERDRAFT_DISABLED = '23'; // User doesn't accept allocation of overdraft\\n  string public constant VL_INVALID_SUB_BALANCE_ARGS = '24';\\n  string public constant AT_INVALID_SLASH_DESTINATION = '25';\\n\\n  string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // The caller of the function is not the lending pool configurator\\n\\n  string public constant LENDING_POOL_REQUIRED = '28'; // The caller of this function must be a lending pool\\n  string public constant CALLER_NOT_LENDING_POOL = '29'; // The caller of this function must be a lending pool\\n  string public constant AT_SUB_BALANCE_RESTIRCTED_FUNCTION = '30'; // The caller of this function must be a lending pool or a sub-balance operator\\n\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // Reserve has already been initialized\\n  string public constant CALLER_NOT_POOL_ADMIN = '33'; // The caller must be the pool admin\\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // The liquidity of the reserve needs to be 0\\n\\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // Provider is not registered\\n  string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // Health factor is not below the threshold\\n  string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // The collateral chosen cannot be liquidated\\n  string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // User did not borrow the specified currency\\n  string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // There isn't enough liquidity available to liquidate\\n\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '48';\\n  string public constant MATH_ADDITION_OVERFLOW = '49';\\n  string public constant MATH_DIVISION_BY_ZERO = '50';\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\\n  string public constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\\n  string public constant CALLER_NOT_STAKE_ADMIN = '57';\\n  string public constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\\n  string public constant CALLER_NOT_LIQUIDITY_CONTROLLER = '60';\\n  string public constant CALLER_NOT_REF_ADMIN = '61';\\n  string public constant VL_INSUFFICIENT_REWARD_AVAILABLE = '62';\\n  string public constant LP_CALLER_MUST_BE_DEPOSIT_TOKEN = '63';\\n  string public constant LP_IS_PAUSED = '64'; // Pool is paused\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = '65';\\n  string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\\n  string public constant RC_INVALID_LTV = '67';\\n  string public constant RC_INVALID_LIQ_THRESHOLD = '68';\\n  string public constant RC_INVALID_LIQ_BONUS = '69';\\n  string public constant RC_INVALID_DECIMALS = '70';\\n  string public constant RC_INVALID_RESERVE_FACTOR = '71';\\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\\n  string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\\n  string public constant VL_TREASURY_REQUIRED = '74';\\n  string public constant LPC_INVALID_CONFIGURATION = '75'; // Invalid risk parameters for the reserve\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '76'; // The caller must be the emergency admin\\n  string public constant UL_INVALID_INDEX = '77';\\n  string public constant VL_CONTRACT_REQUIRED = '78';\\n  string public constant SDT_STABLE_DEBT_OVERFLOW = '79';\\n  string public constant SDT_BURN_EXCEEDS_BALANCE = '80';\\n  string public constant CALLER_NOT_REWARD_CONFIG_ADMIN = '81'; // The caller of this function must be a reward admin\\n  string public constant LP_INVALID_PERCENTAGE = '82'; // Percentage can't be more than 100%\\n  string public constant LP_IS_NOT_TRUSTED_FLASHLOAN = '83';\\n  string public constant CALLER_NOT_SWEEP_ADMIN = '84';\\n  string public constant LP_TOO_MANY_NESTED_CALLS = '85';\\n  string public constant LP_RESTRICTED_FEATURE = '86';\\n  string public constant LP_TOO_MANY_FLASHLOAN_CALLS = '87';\\n  string public constant RW_BASELINE_EXCEEDED = '88';\\n  string public constant CALLER_NOT_REWARD_RATE_ADMIN = '89';\\n  string public constant CALLER_NOT_REWARD_CONTROLLER = '90';\\n  string public constant RW_REWARD_PAUSED = '91';\\n  string public constant CALLER_NOT_TEAM_MANAGER = '92';\\n  string public constant STK_REDEEM_PAUSED = '93';\\n  string public constant STK_INSUFFICIENT_COOLDOWN = '94';\\n  string public constant STK_UNSTAKE_WINDOW_FINISHED = '95';\\n  string public constant STK_INVALID_BALANCE_ON_COOLDOWN = '96';\\n  string public constant STK_EXCESSIVE_SLASH_PCT = '97';\\n  string public constant STK_WRONG_COOLDOWN_OR_UNSTAKE = '98';\\n  string public constant STK_PAUSED = '99';\\n\\n  string public constant TXT_OWNABLE_CALLER_NOT_OWNER = 'Ownable: caller is not the owner';\\n  string public constant TXT_CALLER_NOT_PROXY_OWNER = 'ProxyOwner: caller is not the owner';\\n  string public constant TXT_ACCESS_RESTRICTED = 'RESTRICTED';\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBalanceHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IBalanceHook {\\n  function handleBalanceUpdate(\\n    address token,\\n    address holder,\\n    uint256 oldBalance,\\n    uint256 newBalance,\\n    uint256 providerSupply\\n  ) external;\\n\\n  function handleScaledBalanceUpdate(\\n    address token,\\n    address holder,\\n    uint256 oldBalance,\\n    uint256 newBalance,\\n    uint256 providerSupply,\\n    uint256 scaleRay\\n  ) external;\\n\\n  function isScaledBalanceUpdateNeeded() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEmergencyAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IEmergencyAccess {\\n  function setPaused(bool paused) external;\\n\\n  function isPaused() external view returns (bool);\\n\\n  event EmergencyPaused(address indexed by, bool paused);\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IAutolocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nenum AutolockMode {Default, Stop, Prolongate, AccumulateUnderlying, AccumulateTill, KeepUpBalance}\\n\\ninterface IAutolocker {\\n  function applyAutolock(\\n    address account,\\n    uint256 amount,\\n    AutolockMode mode,\\n    uint32 lockDuration,\\n    uint224 param\\n  )\\n    external\\n    returns (\\n      address receiver,\\n      uint256 lockAmount,\\n      bool completed\\n    );\\n\\n  event RewardAutolocked(address indexed account, uint256 amount, AutolockMode mode);\\n  event RewardAutolockFailed(address indexed account, AutolockMode mode, uint256 error);\\n}\\n\"\r\n    },\r\n    \"contracts/access/MarketAccessBitmask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../tools/Errors.sol';\\nimport './interfaces/IMarketAccessController.sol';\\nimport './AccessHelper.sol';\\nimport './AccessFlags.sol';\\n\\n// solhint-disable func-name-mixedcase\\nabstract contract MarketAccessBitmaskMin {\\n  using AccessHelper for IMarketAccessController;\\n  IMarketAccessController internal _remoteAcl;\\n\\n  constructor(IMarketAccessController remoteAcl) {\\n    _remoteAcl = remoteAcl;\\n  }\\n\\n  function _getRemoteAcl(address addr) internal view returns (uint256) {\\n    return _remoteAcl.getAcl(addr);\\n  }\\n\\n  function hasRemoteAcl() internal view returns (bool) {\\n    return _remoteAcl != IMarketAccessController(address(0));\\n  }\\n\\n  function acl_hasAnyOf(address subject, uint256 flags) internal view returns (bool) {\\n    return _remoteAcl.hasAnyOf(subject, flags);\\n  }\\n\\n  modifier aclHas(uint256 flags) virtual {\\n    _remoteAcl.requireAnyOf(msg.sender, flags, Errors.TXT_ACCESS_RESTRICTED);\\n    _;\\n  }\\n\\n  modifier aclAnyOf(uint256 flags) {\\n    _remoteAcl.requireAnyOf(msg.sender, flags, Errors.TXT_ACCESS_RESTRICTED);\\n    _;\\n  }\\n\\n  modifier onlyPoolAdmin() {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.POOL_ADMIN, Errors.CALLER_NOT_POOL_ADMIN);\\n    _;\\n  }\\n\\n  modifier onlyRewardAdmin() {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.REWARD_CONFIG_ADMIN, Errors.CALLER_NOT_REWARD_CONFIG_ADMIN);\\n    _;\\n  }\\n\\n  modifier onlyRewardConfiguratorOrAdmin() {\\n    _remoteAcl.requireAnyOf(\\n      msg.sender,\\n      AccessFlags.REWARD_CONFIG_ADMIN | AccessFlags.REWARD_CONFIGURATOR,\\n      Errors.CALLER_NOT_REWARD_CONFIG_ADMIN\\n    );\\n    _;\\n  }\\n}\\n\\nabstract contract MarketAccessBitmask is MarketAccessBitmaskMin {\\n  using AccessHelper for IMarketAccessController;\\n\\n  constructor(IMarketAccessController remoteAcl) MarketAccessBitmaskMin(remoteAcl) {}\\n\\n  modifier onlyEmergencyAdmin() {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.EMERGENCY_ADMIN, Errors.CALLER_NOT_EMERGENCY_ADMIN);\\n    _;\\n  }\\n\\n  function _onlySweepAdmin() internal view virtual {\\n    _remoteAcl.requireAnyOf(msg.sender, AccessFlags.SWEEP_ADMIN, Errors.CALLER_NOT_SWEEP_ADMIN);\\n  }\\n\\n  modifier onlySweepAdmin() {\\n    _onlySweepAdmin();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessFlags.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nlibrary AccessFlags {\\n  // roles that can be assigned to multiple addresses - use range [0..15]\\n  uint256 public constant EMERGENCY_ADMIN = 1 << 0;\\n  uint256 public constant POOL_ADMIN = 1 << 1;\\n  uint256 public constant TREASURY_ADMIN = 1 << 2;\\n  uint256 public constant REWARD_CONFIG_ADMIN = 1 << 3;\\n  uint256 public constant REWARD_RATE_ADMIN = 1 << 4;\\n  uint256 public constant STAKE_ADMIN = 1 << 5;\\n  uint256 public constant REFERRAL_ADMIN = 1 << 6;\\n  uint256 public constant LENDING_RATE_ADMIN = 1 << 7;\\n  uint256 public constant SWEEP_ADMIN = 1 << 8;\\n  uint256 public constant ORACLE_ADMIN = 1 << 9;\\n\\n  uint256 public constant ROLES = (uint256(1) << 16) - 1;\\n\\n  // singletons - use range [16..64] - can ONLY be assigned to a single address\\n  uint256 public constant SINGLETONS = ((uint256(1) << 64) - 1) & ~ROLES;\\n\\n  // proxied singletons\\n  uint256 public constant LENDING_POOL = 1 << 16;\\n  uint256 public constant LENDING_POOL_CONFIGURATOR = 1 << 17;\\n  uint256 public constant LIQUIDITY_CONTROLLER = 1 << 18;\\n  uint256 public constant TREASURY = 1 << 19;\\n  uint256 public constant REWARD_TOKEN = 1 << 20;\\n  uint256 public constant REWARD_STAKE_TOKEN = 1 << 21;\\n  uint256 public constant REWARD_CONTROLLER = 1 << 22;\\n  uint256 public constant REWARD_CONFIGURATOR = 1 << 23;\\n  uint256 public constant STAKE_CONFIGURATOR = 1 << 24;\\n  uint256 public constant REFERRAL_REGISTRY = 1 << 25;\\n\\n  uint256 public constant PROXIES = ((uint256(1) << 26) - 1) & ~ROLES;\\n\\n  // non-proxied singletons, numbered down from 31 (as JS has problems with bitmasks over 31 bits)\\n  uint256 public constant WETH_GATEWAY = 1 << 27;\\n  uint256 public constant DATA_HELPER = 1 << 28;\\n  uint256 public constant PRICE_ORACLE = 1 << 29;\\n  uint256 public constant LENDING_RATE_ORACLE = 1 << 30;\\n\\n  // any other roles - use range [64..]\\n  // these roles can be assigned to multiple addresses\\n\\n  uint256 public constant TRUSTED_FLASHLOAN = 1 << 66;\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IManagedRewardController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../interfaces/IRewardMinter.sol';\\nimport '../../interfaces/IEmergencyAccess.sol';\\nimport '../../access/interfaces/IMarketAccessController.sol';\\nimport './IManagedRewardPool.sol';\\nimport './IRewardController.sol';\\n\\ninterface IManagedRewardController is IEmergencyAccess, IRewardController {\\n  function updateBaseline(uint256 baseline) external returns (uint256 totalRate);\\n\\n  function addRewardPool(IManagedRewardPool) external;\\n\\n  function removeRewardPool(IManagedRewardPool) external;\\n\\n  function setRewardMinter(IRewardMinter) external;\\n\\n  function getPools() external view returns (IManagedRewardPool[] memory, uint256 ignoreMask);\\n\\n  event RewardsAllocated(address indexed user, uint256 amount, address indexed fromPool);\\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n  event BaselineUpdated(uint256 baseline, uint256 totalRate, uint256 mask);\\n  event RewardPoolAdded(address indexed pool, uint256 mask);\\n  event RewardPoolRemoved(address indexed pool, uint256 mask);\\n  event RewardMinterSet(address minter);\\n}\\n\\ninterface IManagedRewardBooster is IManagedRewardController {\\n  event BoostFactorSet(address indexed pool, uint256 mask, uint32 pctFactor);\\n\\n  function setBoostFactor(address pool, uint32 pctFactor) external;\\n\\n  event MinBoostUpdated(uint16 minBoostPct);\\n\\n  function setMinBoost(uint16 minBoostPct) external;\\n\\n  function setUpdateBoostPoolRate(bool) external;\\n\\n  function setBoostPool(address) external;\\n\\n  function getBoostPool() external view returns (address pool, uint256 mask);\\n\\n  function setBoostExcessTarget(address target, bool mintExcess) external;\\n}\\n\\ninterface IUntypedRewardControllerPools {\\n  function getPools() external view returns (address[] memory, uint256 ignoreMask);\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IRewardCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IRewardCollector {\\n  /// @dev Claims rewards of the caller and transfers to the caller\\n  /// @return claimed amount of rewards\\n  /// @return locked amount is portion of rewards that was locked\\n  function claimReward() external returns (uint256 claimed, uint256 locked);\\n\\n  /// @dev Claims rewards of the caller and transfers to the receiver\\n  /// @param receiver of the claimed rewards\\n  /// @param includeMask provides additional reward pools to be specifically checked for rewards (will not fail on wrong pools)\\n  /// @return claimed amount of rewards\\n  /// @return locked amount is portion of rewards that was locked. These amount is also locked on the receiver\\n  function claimRewardTo(address receiver, uint256 includeMask) external returns (uint256 claimed, uint256 locked);\\n\\n  /// @dev Calculates rewards of the holder\\n  /// @param holder of funds to be accounted for rewards\\n  /// @return claimable amount of rewards, it matches the claimed amount returned by claimReward()\\n  /// @return frozen amount rewards that was allocated, but will be released later (doesn't match the locked reward)\\n  function claimableReward(address holder) external view returns (uint256 claimable, uint256 frozen);\\n\\n  /// @dev Calculates rewards of the caller\\n  /// @param holder of funds to be accounted for rewards\\n  /// @param includeMask provides additional reward pools to be specifically checked for rewards (will not fail on wrong pools)\\n  /// @return claimable amount of rewards, it matches the claimed amount returned by claimReward()\\n  /// @return frozen amount rewards that was allocated, but will be released later (doesn't match the locked reward)\\n  function claimableRewardFor(address holder, uint256 includeMask)\\n    external\\n    view\\n    returns (uint256 claimable, uint256 frozen);\\n\\n  /// @dev Calculates rewards of the caller. Returns (claimable + frozen) amounts of claimableReward()\\n  function balanceOf(address holder) external view returns (uint256);\\n\\n  /// @dev Returns set of pools (bitmask) where the holder has rewarding balances.\\n  function claimablePools(address holder) external view returns (uint256);\\n\\n  /// @dev Caller enforces the given pools to be included into the next claim. Pools will be excluded if there will be no rewarding balance.\\n  /// @param includeMask provides additional reward pools to be specifically checked for rewards (will not fail on wrong pools)\\n  function setClaimablePools(uint256 includeMask) external;\\n\\n  /// @dev Returns mask for the given pool, or zero when the pool is unknown\\n  function getPoolMask(address pool) external view returns (uint256);\\n\\n  /// @dev Returns known pools for the given mask, unknown or removed entries are not included\\n  function getPoolsByMask(uint256 mask) external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './interfaces/IRemoteAccessBitmask.sol';\\n\\n/// @dev Helper/wrapper around IRemoteAccessBitmask\\nlibrary AccessHelper {\\n  function getAcl(IRemoteAccessBitmask remote, address subject) internal view returns (uint256) {\\n    return remote.queryAccessControlMask(subject, ~uint256(0));\\n  }\\n\\n  function queryAcl(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 filterMask\\n  ) internal view returns (uint256) {\\n    return remote.queryAccessControlMask(subject, filterMask);\\n  }\\n\\n  function hasAnyOf(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 flags\\n  ) internal view returns (bool) {\\n    uint256 found = queryAcl(remote, subject, flags);\\n    return found & flags != 0;\\n  }\\n\\n  function hasAny(IRemoteAccessBitmask remote, address subject) internal view returns (bool) {\\n    return remote.queryAccessControlMask(subject, 0) != 0;\\n  }\\n\\n  function hasNone(IRemoteAccessBitmask remote, address subject) internal view returns (bool) {\\n    return remote.queryAccessControlMask(subject, 0) == 0;\\n  }\\n\\n  function requireAnyOf(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 flags,\\n    string memory text\\n  ) internal view {\\n    require(hasAnyOf(remote, subject, flags), text);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"BaselineUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"pctFactor\",\"type\":\"uint32\"}],\"name\":\"BoostFactorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"EmergencyPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minBoostPct\",\"type\":\"uint16\"}],\"name\":\"MinBoostUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum AutolockMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"lockDuration\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint224\",\"name\":\"param\",\"type\":\"uint224\"}],\"name\":\"RewardAutolockConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"RewardMinterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"RewardPoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"RewardPoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromPool\",\"type\":\"address\"}],\"name\":\"RewardsAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IManagedRewardPool\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"addRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocated\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"since\",\"type\":\"uint32\"},{\"internalType\":\"enum AllocationMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"allocatedByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"lockDuration\",\"type\":\"uint32\"}],\"name\":\"autolockAccumulateTill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"lockDuration\",\"type\":\"uint32\"}],\"name\":\"autolockAccumulateUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autolockDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"lockDuration\",\"type\":\"uint32\"}],\"name\":\"autolockKeepUpBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"autolockOf\",\"outputs\":[{\"internalType\":\"enum AutolockMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"lockDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"param\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"minLockDuration\",\"type\":\"uint32\"}],\"name\":\"autolockProlongate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autolockStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extra\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"includeMask\",\"type\":\"uint256\"}],\"name\":\"claimRewardTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extra\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimablePools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extra\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"includeMask\",\"type\":\"uint256\"}],\"name\":\"claimableRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extra\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAutolock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AutolockMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"lockDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"param\",\"type\":\"uint224\"}],\"name\":\"enableAutolockAndSetDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"at\",\"type\":\"uint32\"}],\"name\":\"explainReward\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountExtra\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBoost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"latestClaimAt\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extra\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"since\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"factor\",\"type\":\"uint32\"},{\"internalType\":\"enum RewardType\",\"name\":\"rewardType\",\"type\":\"uint8\"}],\"internalType\":\"struct RewardExplainEntry[]\",\"name\":\"allocations\",\"type\":\"tuple[]\"}],\"internalType\":\"struct RewardExplained\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccessController\",\"outputs\":[{\"internalType\":\"contract IMarketAccessController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBoostExcessTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"mintExcess\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getBoostFactor\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"pctFactor\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBoostPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolMask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"contract IManagedRewardPool[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"ignoreMask\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allMask\",\"type\":\"uint256\"}],\"name\":\"getPoolsByMask\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMarketAccessController\",\"name\":\"ac\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutolockEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isConfigAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isRateAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IManagedRewardPool\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"removeRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IManagedRewardPool[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"pcts\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"baseline\",\"type\":\"uint256\"}],\"name\":\"setBaselinePercentagesAndRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"mintExcess\",\"type\":\"bool\"}],\"name\":\"setBoostExcessTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pctFactor\",\"type\":\"uint32\"}],\"name\":\"setBoostFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setBoostPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"includeMask\",\"type\":\"uint256\"}],\"name\":\"setClaimablePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"minBoostPct\",\"type\":\"uint16\"}],\"name\":\"setMinBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardMinter\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"setRewardMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"updateBoostPool\",\"type\":\"bool\"}],\"name\":\"setUpdateBoostPoolRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseline\",\"type\":\"uint256\"}],\"name\":\"updateBaseline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RewardBoosterV1","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}