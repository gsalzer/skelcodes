{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT \r\n// File: FPSCOIN smart contract.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ILosslessController {\r\n    function beforeTransfer(address sender, address recipient, uint256 amount) external;\r\n\r\n    function beforeTransferFrom(address msgSender, address sender, address recipient, uint256 amount) external;\r\n\r\n    function beforeApprove(address sender, address spender, uint256 amount) external;\r\n\r\n    function beforeIncreaseAllowance(address msgSender, address spender, uint256 addedValue) external;\r\n\r\n    function beforeDecreaseAllowance(address msgSender, address spender, uint256 subtractedValue) external;\r\n\r\n    function afterApprove(address sender, address spender, uint256 amount) external;\r\n\r\n    function afterTransfer(address sender, address recipient, uint256 amount) external;\r\n\r\n    function afterTransferFrom(address msgSender, address sender, address recipient, uint256 amount) external;\r\n\r\n    function afterIncreaseAllowance(address sender, address spender, uint256 addedValue) external;\r\n\r\n    function afterDecreaseAllowance(address sender, address spender, uint256 subtractedValue) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n \r\ncontract FPSCOIN is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = \"FPSCOIN\";\r\n    string private constant _symbol = \"FPSCOIN\";\r\n    uint8 private constant _decimals = 18;\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping (address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 1000000000000000000 * 10**18;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    uint256 private _taxFee = 25;\r\n    uint256 private _teamFee = 45;\r\n    mapping(uint256 => uint256) private daysToPercent;\r\n    mapping(address => uint256) private firstBuyTime;\r\n    mapping(address => uint256) private firstsell;    // date of sell\r\n    mapping(address => uint256) private numberOfDays;\r\n    address payable private _marketingAddress;\r\n    address payable private _liquidityAddress;\r\n    address payable private _devAddress;\r\n    address payable private _teamAddress;\r\n    address payable private _rewardAndtouranementAddress;\r\n    address payable private _privateSellAddress;\r\n    address payable private _airdropsAddress;\r\n    address payable private _publicSaleAddress;\r\n    address payable private _chikenWinnerAddress;\r\n    address payable private _reserveForFuturesExchangesAddress;\r\n     //lossless Declair\r\n    address public recoveryAdmin;\r\n    address private recoveryAdminCanditate;\r\n    bytes32 private recoveryAdminKeyHash;\r\n    address public admin;\r\n    uint256 public timelockPeriod;\r\n    uint256 public losslessTurnOffTimestamp;\r\n    bool public isLosslessTurnOffProposed;\r\n    bool public isLosslessOn = true;\r\n    ILosslessController private lossless;\r\n\r\n    event AdminChanged(address indexed previousAdmin, address indexed newAdmin);\r\n    event RecoveryAdminChangeProposed(address indexed candidate);\r\n    event RecoveryAdminChanged(address indexed previousAdmin, address indexed newAdmin);\r\n    event LosslessTurnOffProposed(uint256 turnOffDate);\r\n    event LosslessTurnedOff();\r\n    event LosslessTurnedOn();\r\n    \r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen = false;\r\n    bool private liquidityAdded = false;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    uint256 private _maxTxAmount = _tTotal;\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    constructor (address payable marketingAddress, address payable devAddress, address payable rewardAndtouranementAddress, address payable privateSellAddress, address payable airdropsAddress, address payable reserveForFuturesExchangesAddress, address payable chikenWinnerAddress, address payable liquidityAddress, address admin_, address recoveryAdmin_, uint256 timelockPeriod_, address lossless_)  {\r\n        _marketingAddress = marketingAddress;\r\n        _devAddress = devAddress;\r\n        _rewardAndtouranementAddress = rewardAndtouranementAddress;\r\n        _privateSellAddress = privateSellAddress;\r\n        _airdropsAddress = airdropsAddress;\r\n        _reserveForFuturesExchangesAddress = reserveForFuturesExchangesAddress;\r\n        _chikenWinnerAddress = chikenWinnerAddress;\r\n        _liquidityAddress = liquidityAddress;\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_marketingAddress] = true;\r\n        _isExcludedFromFee[_devAddress] = true;\r\n        _isExcludedFromFee[_rewardAndtouranementAddress] = true;\r\n        _isExcludedFromFee[_privateSellAddress] = true;\r\n        _isExcludedFromFee[_airdropsAddress] = true;\r\n        _isExcludedFromFee[_reserveForFuturesExchangesAddress] = true;\r\n        _isExcludedFromFee[_chikenWinnerAddress] = true;\r\n        _isExcludedFromFee[_liquidityAddress] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n        //lossless constructor\r\n        admin = admin_;\r\n        recoveryAdmin = recoveryAdmin_;\r\n        timelockPeriod = timelockPeriod_;\r\n        lossless = ILosslessController(lossless_);\r\n    }\r\n    //lossless modifier\r\n     modifier lssAprove(address spender, uint256 amount) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeApprove(_msgSender(), spender, amount);\r\n            _;\r\n            lossless.afterApprove(_msgSender(), spender, amount);\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier lssTransfer(address recipient, uint256 amount) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeTransfer(_msgSender(), recipient, amount);\r\n            _;\r\n            lossless.afterTransfer(_msgSender(), recipient, amount);\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier lssTransferFrom(address sender, address recipient, uint256 amount) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeTransferFrom(_msgSender(),sender, recipient, amount);\r\n            _;\r\n            lossless.afterTransferFrom(_msgSender(), sender, recipient, amount);\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier lssIncreaseAllowance(address spender, uint256 addedValue) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeIncreaseAllowance(_msgSender(), spender, addedValue);\r\n            _;\r\n            lossless.afterIncreaseAllowance(_msgSender(), spender, addedValue);\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier lssDecreaseAllowance(address spender, uint256 subtractedValue) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeDecreaseAllowance(_msgSender(), spender, subtractedValue);\r\n            _;\r\n            lossless.afterDecreaseAllowance(_msgSender(), spender, subtractedValue);\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier onlyRecoveryAdmin() {\r\n        require(_msgSender() == recoveryAdmin, \"LERC20: Must be recovery admin\");\r\n        _;\r\n    }\r\n    \r\n    //lossless management\r\n    \r\n    function getAdmin() external view returns (address) {\r\n        return admin;\r\n    }\r\n\r\n    function transferOutBlacklistedFunds(address[] calldata from) external {\r\n        require(_msgSender() == address(lossless), \"LERC20: Only lossless contract\");\r\n        for (uint i = 0; i < from.length; i++) {\r\n            _transfer(from[i], address(lossless), balanceOf(from[i]));\r\n        }\r\n    }\r\n\r\n    function setLosslessAdmin(address newAdmin) public onlyRecoveryAdmin {\r\n        emit AdminChanged(admin, newAdmin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n    function transferRecoveryAdminOwnership(address candidate, bytes32 keyHash) public onlyRecoveryAdmin {\r\n        recoveryAdminCanditate = candidate;\r\n        recoveryAdminKeyHash = keyHash;\r\n        emit RecoveryAdminChangeProposed(candidate);\r\n    }\r\n\r\n    function acceptRecoveryAdminOwnership(bytes memory key) external {\r\n        require(_msgSender() == recoveryAdminCanditate, \"LERC20: Must be canditate\");\r\n        require(keccak256(key) == recoveryAdminKeyHash, \"LERC20: Invalid key\");\r\n        emit RecoveryAdminChanged(recoveryAdmin, recoveryAdminCanditate);\r\n        recoveryAdmin = recoveryAdminCanditate;\r\n    }\r\n\r\n    function proposeLosslessTurnOff() public onlyRecoveryAdmin {\r\n        losslessTurnOffTimestamp = block.timestamp + timelockPeriod;\r\n        isLosslessTurnOffProposed = true;\r\n        emit LosslessTurnOffProposed(losslessTurnOffTimestamp);\r\n    }\r\n\r\n    function executeLosslessTurnOff() public onlyRecoveryAdmin {\r\n        require(isLosslessTurnOffProposed, \"LERC20: TurnOff not proposed\");\r\n        require(losslessTurnOffTimestamp <= block.timestamp, \"LERC20: Time lock in progress\");\r\n        isLosslessOn = false;\r\n        isLosslessTurnOffProposed = false;\r\n        emit LosslessTurnedOff();\r\n    }\r\n\r\n    function executeLosslessTurnOn() public onlyRecoveryAdmin {\r\n        isLosslessTurnOffProposed = false;\r\n        isLosslessOn = true;\r\n        emit LosslessTurnedOn();\r\n    }\r\n        function name() public pure returns (string memory) {\r\n            return _name;\r\n        }\r\n    \r\n        function symbol() public pure returns (string memory) {\r\n            return _symbol;\r\n        }\r\n    \r\n        function decimals() public pure returns (uint8) {\r\n            return _decimals;\r\n        }\r\n    \r\n        function totalSupply() public pure override returns (uint256) {\r\n            return _tTotal;\r\n        }\r\n    \r\n        function balanceOf(address account) public view override returns (uint256) {\r\n            return tokenFromReflection(_rOwned[account]);\r\n        }\r\n    \r\n        function transfer(address recipient, uint256 amount) public override lssTransfer(recipient, amount)  returns (bool) {\r\n            _transfer(_msgSender(), recipient, amount);\r\n            return true;\r\n        }\r\n        \r\n        function allowance(address owner, address spender) public view override returns (uint256) {\r\n            return _allowances[owner][spender];\r\n        }\r\n    \r\n        function approve(address spender, uint256 amount) public virtual override lssAprove(spender, amount) returns (bool) {\r\n        require((amount == 0) || (_allowances[_msgSender()][spender] == 0), \"LERC20: Cannot change non zero allowance\");\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n        function transferFrom(address sender, address recipient, uint256 amount) public override lssTransferFrom(sender, recipient, amount) returns (bool) {\r\n            _transfer(sender, recipient, amount);\r\n            _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\n            return true;\r\n        }\r\n        \r\n        function tokenFromReflection(uint256 rAmount) private view returns (uint256) {\r\n            require(rAmount <= _rTotal,\"Amount must be less than total reflections\");\r\n            uint256 currentRate = _getRate();\r\n            return rAmount.div(currentRate);\r\n        }\r\n        \r\n        function removeAllFee() private {\r\n        if (_taxFee == 0 && _teamFee == 0) return;\r\n        _taxFee = 0;\r\n        _teamFee = 0;\r\n        }\r\n    \r\n        function restoreAllFee() private {\r\n        _taxFee = 3;\r\n        _teamFee = 7;\r\n        }\r\n        \r\n        function setFee(uint256 multiplier) private {\r\n        _taxFee =25-((multiplier.mul(3).div(5) ))  ; \r\n        _teamFee =45-((multiplier.mul(63).div(50) )); \r\n        }\r\n        \r\n        function _approve(address owner, address spender, uint256 amount) private {\r\n            require(owner != address(0), \"ERC20: approve from the zero address\");\r\n            require(spender != address(0), \"ERC20: approve to the zero address\");\r\n            _allowances[owner][spender] = amount;\r\n            emit Approval(owner, spender, amount);\r\n        }\r\n        \r\n        \r\n    \r\n        function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        if (from != owner() && to != owner()) {\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to] ) {\r\n                require(tradingOpen);\r\n                require(amount <= _maxTxAmount);\r\n                require(firstBuyTime[to]<block.timestamp);\r\n                _teamFee = 7;\r\n                _taxFee = 3;\r\n            }\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && from != uniswapV2Pair && swapEnabled) {\r\n                require(amount <= balanceOf(uniswapV2Pair).mul(3).div(100) && amount <= _maxTxAmount); // Price impact\r\n                numberOfDays[from]= firstsell[from]-firstBuyTime[from];\r\n                if (numberOfDays[from] <(30 days)){\r\n                    setFee(numberOfDays[from]);\r\n                 }\r\n                else {\r\n                _teamFee = 7 ;\r\n                _taxFee = 3 ;\r\n                        }\r\n                swapTokensForEth(contractTokenBalance);\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n        bool takeFee = true;\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n        restoreAllFee;\r\n        }\r\n        \r\n         function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = uniswapV2Router.WETH();\r\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n        }\r\n        \r\n        function sendETHToFee(uint256 amount) private {\r\n            _marketingAddress.transfer(amount.div(5));\r\n            _devAddress.transfer(amount.div(5));\r\n            _teamAddress.transfer(amount.div(5));\r\n            _rewardAndtouranementAddress.transfer(amount.div(5));\r\n            _chikenWinnerAddress.transfer(amount.div(5));\r\n        }\r\n        \r\n        function openTrading() public onlyOwner {\r\n            require(liquidityAdded);\r\n            tradingOpen = true;\r\n        }\r\n        \r\n     function addLiquidity() external onlyOwner() {\r\n            IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n            uniswapV2Router = _uniswapV2Router;\r\n            _approve(address(this), address(uniswapV2Router), _tTotal);\r\n            uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n            uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n            swapEnabled = true;\r\n            liquidityAdded = true;\r\n            _maxTxAmount = 3000000000 * 10**9;\r\n            IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);\r\n        }    \r\n\r\n    function manualswap() external {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n    \r\n    function manualsend() external {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n    \r\n    function setSwapEnabled(bool enabled) external onlyOwner(){\r\n            swapEnabled = enabled;\r\n        }\r\n    \r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeTeam(tTeam);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _takeTeam(uint256 tTeam) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _taxFee, _teamFee);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 teamFee) private pure returns (uint256, uint256, uint256) {\r\n        uint256 tFee = tAmount.mul(taxFee).div(100);\r\n        uint256 tTeam = tAmount.mul(teamFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\n        return (tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n        require(maxTxPercent > 0, \"Amount must be greater than 0\");\r\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\r\n        emit MaxTxAmountUpdated(_maxTxAmount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"devAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"rewardAndtouranementAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"privateSellAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"airdropsAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"reserveForFuturesExchangesAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"chikenWinnerAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"liquidityAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recoveryAdmin_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timelockPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lossless_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"turnOffDate\",\"type\":\"uint256\"}],\"name\":\"LosslessTurnOffProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LosslessTurnedOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LosslessTurnedOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"RecoveryAdminChangeProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"RecoveryAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"acceptRecoveryAdminOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeLosslessTurnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeLosslessTurnOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLosslessOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLosslessTurnOffProposed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"losslessTurnOffTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposeLosslessTurnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoveryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setLosslessAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"}],\"name\":\"transferOutBlacklistedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"transferRecoveryAdminOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FPSCOIN","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000032fc1b22444a85e8d1e79bf9ec3ffde53ee4df070000000000000000000000003e1e01914b21f6a18ac3e49fa3975b662c7990d9000000000000000000000000ea993739257a420bd92f3020a0eb13c114dc5cfd0000000000000000000000002383fb5596b13cf09d47e22599f766b54f00d423000000000000000000000000149eab893d17955d823dc0b713b94ecafdb2e7580000000000000000000000006ed72915d38d193eded72aed8f9af0cb2aea458f000000000000000000000000d69eac1e6469e0b435b8e7c9fcc73536b9e693a6000000000000000000000000770c9bbcf948e4e54b30bfc30bba11633a228ce700000000000000000000000003db65c33558aebbf4ec98b0a829bc82718f0f51000000000000000000000000c12d52515766efeaf3bd86588d5b7dd66d3c24b00000000000000000000000000000000000000000000000000000000000015180000000000000000000000000e91d7cebce484070fc70777cb04f7e2efae31db4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a300e961cdc8d5940df7be4ecb66559f6a3af1f1c410c74243cf6b12934ee526"}]}