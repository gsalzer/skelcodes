{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AdminEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    AdminEscrow.sol - SKALE Allocator\\n    Copyright (C) 2020-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Escrow.sol\\\";\\n\\n\\ncontract AdminEscrow is Escrow {\\n\\n    address public constant ADMIN = address(0xAeA97b739dcd6f5b586586CB7a538d60bA96a757);\\n\\n    modifier onlyBeneficiary() override {\\n        require(_msgSender() == _beneficiary || _msgSender() == ADMIN, \\\"Message sender is not a plan beneficiary\\\");\\n        _;\\n    }\\n\\n    modifier onlyActiveBeneficiaryOrVestingManager() override {\\n        Allocator allocator = Allocator(contractManager.getContract(\\\"Allocator\\\"));\\n        if (allocator.isVestingActive(_beneficiary)) {\\n            require(_msgSender() == _beneficiary || _msgSender() == ADMIN, \\\"Message sender is not beneficiary\\\");\\n        } else {\\n            require(\\n                allocator.hasRole(allocator.VESTING_MANAGER_ROLE(), _msgSender()),\\n                \\\"Message sender is not authorized\\\"\\n            );\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Escrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    Escrow.sol - SKALE Allocator\\n    Copyright (C) 2020-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC1820Registry.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777Sender.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/delegation/IDelegationController.sol\\\";\\nimport \\\"./interfaces/delegation/IDistributor.sol\\\";\\nimport \\\"./interfaces/delegation/ITokenState.sol\\\";\\n\\nimport \\\"./Allocator.sol\\\";\\nimport \\\"./Permissions.sol\\\";\\n\\n\\n/**\\n * @title Escrow\\n * @dev This contract manages funds locked by the Allocator contract.\\n */\\ncontract Escrow is IERC777Recipient, IERC777Sender, Permissions {\\n\\n    address internal _beneficiary;\\n\\n    uint256 private _availableAmountAfterTermination;\\n\\n    IERC1820Registry private _erc1820;\\n\\n    modifier onlyBeneficiary() virtual {\\n        require(_msgSender() == _beneficiary, \\\"Message sender is not a plan beneficiary\\\");\\n        _;\\n    }\\n\\n    modifier onlyVestingManager() {\\n        Allocator allocator = Allocator(contractManager.getContract(\\\"Allocator\\\"));\\n        require(\\n            allocator.hasRole(allocator.VESTING_MANAGER_ROLE(), _msgSender()),\\n            \\\"Message sender is not a vesting manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyActiveBeneficiaryOrVestingManager() virtual {\\n        Allocator allocator = Allocator(contractManager.getContract(\\\"Allocator\\\"));\\n        if (allocator.isVestingActive(_beneficiary)) {\\n            require(_msgSender() == _beneficiary, \\\"Message sender is not beneficiary\\\");\\n        } else {\\n            require(\\n                allocator.hasRole(allocator.VESTING_MANAGER_ROLE(), _msgSender()),\\n                \\\"Message sender is not authorized\\\"\\n            );\\n        }\\n        _;\\n    }   \\n\\n    function initialize(address contractManagerAddress, address beneficiary) external initializer {\\n        require(beneficiary != address(0), \\\"Beneficiary address is not set\\\");\\n        Permissions.initialize(contractManagerAddress);\\n        _beneficiary = beneficiary;\\n        _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n        _erc1820.setInterfaceImplementer(address(this), keccak256(\\\"ERC777TokensRecipient\\\"), address(this));\\n        _erc1820.setInterfaceImplementer(address(this), keccak256(\\\"ERC777TokensSender\\\"), address(this));\\n    } \\n\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    )\\n        external override\\n        allow(\\\"SkaleToken\\\")\\n        // solhint-disable-next-line no-empty-blocks\\n    {\\n\\n    }\\n\\n    function tokensToSend(\\n        address,\\n        address,\\n        address to,\\n        uint256,\\n        bytes calldata,\\n        bytes calldata\\n    )\\n        external override\\n        allow(\\\"SkaleToken\\\")\\n        // solhint-disable-next-line no-empty-blocks\\n    {\\n\\n    }\\n\\n    /**\\n     * @dev Allows Beneficiary to retrieve vested tokens from the Escrow contract.\\n     * \\n     * IMPORTANT: Slashed tokens are non-transferable.\\n     */\\n    function retrieve() external onlyBeneficiary {\\n        Allocator allocator = Allocator(contractManager.getContract(\\\"Allocator\\\"));\\n        ITokenState tokenState = ITokenState(contractManager.getContract(\\\"TokenState\\\"));\\n        uint256 vestedAmount = 0;\\n        if (allocator.isVestingActive(_beneficiary)) {\\n            vestedAmount = allocator.calculateVestedAmount(_beneficiary);\\n        } else {\\n            vestedAmount = _availableAmountAfterTermination;\\n        }\\n        uint256 escrowBalance = IERC20(contractManager.getContract(\\\"SkaleToken\\\")).balanceOf(address(this));\\n        uint256 locked = Math.max(\\n            allocator.getFullAmount(_beneficiary).sub(vestedAmount),\\n            tokenState.getAndUpdateForbiddenForDelegationAmount(address(this))\\n        );\\n        if (escrowBalance > locked) {\\n            require(\\n                IERC20(contractManager.getContract(\\\"SkaleToken\\\")).transfer(\\n                    _beneficiary,\\n                    escrowBalance.sub(locked)\\n                ),\\n                \\\"Error of token send\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows Vesting Manager to retrieve remaining transferrable escrow balance\\n     * after beneficiary's termination. \\n     * \\n     * IMPORTANT: Slashed tokens are non-transferable.\\n     * \\n     * Requirements:\\n     * \\n     * - Allocator must be active.\\n     */\\n    function retrieveAfterTermination(address destination) external onlyVestingManager {\\n        Allocator allocator = Allocator(contractManager.getContract(\\\"Allocator\\\"));\\n        ITokenState tokenState = ITokenState(contractManager.getContract(\\\"TokenState\\\"));\\n\\n        require(destination != address(0), \\\"Destination address is not set\\\");\\n        require(!allocator.isVestingActive(_beneficiary), \\\"Vesting is active\\\");\\n        uint256 escrowBalance = IERC20(contractManager.getContract(\\\"SkaleToken\\\")).balanceOf(address(this));\\n        uint256 forbiddenToSend = tokenState.getAndUpdateLockedAmount(address(this));\\n        if (escrowBalance > forbiddenToSend) {\\n            require(\\n                IERC20(contractManager.getContract(\\\"SkaleToken\\\")).transfer(\\n                    destination,\\n                    escrowBalance.sub(forbiddenToSend)\\n                ),\\n                \\\"Error of token send\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows Beneficiary to propose a delegation to a validator.\\n     * \\n     * Requirements:\\n     * \\n     * - Beneficiary must be active.\\n     * - Beneficiary must have sufficient delegatable tokens.\\n     * - If trusted list is enabled, validator must be a member of the trusted\\n     * list.\\n     */\\n    function delegate(\\n        uint256 validatorId,\\n        uint256 amount,\\n        uint256 delegationPeriod,\\n        string calldata info\\n    )\\n        external\\n        onlyBeneficiary\\n    {\\n        Allocator allocator = Allocator(contractManager.getContract(\\\"Allocator\\\"));\\n        require(allocator.isDelegationAllowed(_beneficiary), \\\"Delegation is not allowed\\\");\\n        require(allocator.isVestingActive(_beneficiary), \\\"Beneficiary is not Active\\\");\\n        \\n        IDelegationController delegationController = IDelegationController(\\n            contractManager.getContract(\\\"DelegationController\\\")\\n        );\\n        delegationController.delegate(validatorId, amount, delegationPeriod, info);\\n    }\\n\\n    /**\\n     * @dev Allows Beneficiary and Vesting manager to request undelegation. Only \\n     * Vesting manager can request undelegation after beneficiary is deactivated \\n     * (after beneficiary termination).\\n     * \\n     * Requirements:\\n     * \\n     * - Beneficiary and Vesting manager must be `msg.sender`.\\n     */\\n    function requestUndelegation(uint256 delegationId) external onlyActiveBeneficiaryOrVestingManager {\\n        IDelegationController delegationController = IDelegationController(\\n            contractManager.getContract(\\\"DelegationController\\\")\\n        );\\n        delegationController.requestUndelegation(delegationId);\\n    }\\n\\n    /**\\n     * @dev Allows Beneficiary and Vesting manager to cancel a delegation proposal. Only \\n     * Vesting manager can request undelegation after beneficiary is deactivated \\n     * (after beneficiary termination).\\n     * \\n     * Requirements:\\n     * \\n     * - Beneficiary and Vesting manager must be `msg.sender`.\\n     */\\n    function cancelPendingDelegation(uint delegationId) external onlyActiveBeneficiaryOrVestingManager {\\n        IDelegationController delegationController = IDelegationController(\\n            contractManager.getContract(\\\"DelegationController\\\")\\n        );\\n        delegationController.cancelPendingDelegation(delegationId);\\n    }\\n\\n    /**\\n     * @dev Allows Beneficiary and Vesting manager to withdraw earned bounty. Only\\n     * Vesting manager can withdraw bounty to Allocator contract after beneficiary\\n     * is deactivated.\\n     * \\n     * IMPORTANT: Withdraws are only possible after 90 day initial network lock.\\n     * \\n     * Requirements:\\n     * \\n     * - Beneficiary or Vesting manager must be `msg.sender`.\\n     * - Beneficiary must be active when Beneficiary is `msg.sender`.\\n     */\\n    function withdrawBounty(uint256 validatorId, address to) external onlyActiveBeneficiaryOrVestingManager {        \\n        IDistributor distributor = IDistributor(contractManager.getContract(\\\"Distributor\\\"));\\n        distributor.withdrawBounty(validatorId, to);\\n    }\\n\\n    /**\\n     * @dev Allows Allocator contract to cancel vesting of a Beneficiary. Cancel\\n     * vesting is performed upon termination.\\n     */\\n    function cancelVesting(uint256 vestedAmount) external allow(\\\"Allocator\\\") {\\n        _availableAmountAfterTermination = vestedAmount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC1820Registry.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/Math.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777Sender.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\\n *\\n * {IERC777} Token holders can be notified of operations performed on their\\n * tokens by having a contract implement this interface (contract holders can be\\n *  their own implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Sender {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\\n     * is conveyed by `to` being the zero address or not.\\n     *\\n     * This call occurs _before_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777Recipient.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/delegation/IDelegationController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IDelegationController.sol - SKALE Allocator\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @dev Interface of Delegatable Token operations.\\n */\\ninterface IDelegationController {\\n\\n    function delegate(\\n        uint256 validatorId,\\n        uint256 amount,\\n        uint256 delegationPeriod,\\n        string calldata info\\n    )\\n        external;\\n\\n    function requestUndelegation(uint256 delegationId) external;\\n\\n    function cancelPendingDelegation(uint delegationId) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/delegation/IDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IDistributor.sol - SKALE Allocator\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @dev Interface of Distributor contract.\\n */\\ninterface IDistributor {\\n\\n    function withdrawBounty(uint256 validatorId, address to) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/delegation/ITokenState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ITokenState.sol - SKALE Allocator\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @dev Interface of Token State contract.\\n */\\ninterface ITokenState {\\n\\n    function getAndUpdateLockedAmount(address holder) external returns (uint);\\n    function getAndUpdateForbiddenForDelegationAmount(address holder) external returns (uint);\\n}\"\r\n    },\r\n    \"contracts/Allocator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    Allocator.sol - SKALE Allocator\\n    Copyright (C) 2020-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC1820Registry.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/openzeppelin/IProxyFactory.sol\\\";\\nimport \\\"./interfaces/openzeppelin/IProxyAdmin.sol\\\";\\nimport \\\"./interfaces/ITimeHelpers.sol\\\";\\nimport \\\"./Escrow.sol\\\";\\nimport \\\"./Permissions.sol\\\";\\n\\n/**\\n * @title Allocator\\n */\\ncontract Allocator is Permissions, IERC777Recipient {\\n\\n    uint256 constant private _SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant private _MONTHS_PER_YEAR = 12;\\n\\n    enum TimeUnit {\\n        DAY,\\n        MONTH,\\n        YEAR\\n    }\\n\\n    enum BeneficiaryStatus {\\n        UNKNOWN,\\n        CONFIRMED,\\n        ACTIVE,\\n        TERMINATED\\n    }\\n\\n    struct Plan {\\n        uint256 totalVestingDuration; // months\\n        uint256 vestingCliff; // months\\n        TimeUnit vestingIntervalTimeUnit;\\n        uint256 vestingInterval; // amount of days/months/years\\n        bool isDelegationAllowed;\\n        bool isTerminatable;\\n    }\\n\\n    struct Beneficiary {\\n        BeneficiaryStatus status;\\n        uint256 planId;\\n        uint256 startMonth;\\n        uint256 fullAmount;\\n        uint256 amountAfterLockup;\\n    }\\n\\n    event PlanCreated(\\n        uint256 id\\n    );\\n\\n    IERC1820Registry private _erc1820;\\n\\n    // array of Plan configs\\n    Plan[] private _plans;\\n\\n    bytes32 public constant VESTING_MANAGER_ROLE = keccak256(\\\"VESTING_MANAGER_ROLE\\\");\\n\\n    //       beneficiary => beneficiary plan params\\n    mapping (address => Beneficiary) private _beneficiaries;\\n\\n    //       beneficiary => Escrow\\n    mapping (address => Escrow) private _beneficiaryToEscrow;\\n\\n    modifier onlyVestingManager() {\\n        require(\\n            hasRole(VESTING_MANAGER_ROLE, _msgSender()),\\n            \\\"Message sender is not a vesting manager\\\"\\n        );\\n        _;\\n    }\\n\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    )\\n        external override\\n        allow(\\\"SkaleToken\\\")\\n        // solhint-disable-next-line no-empty-blocks\\n    {\\n\\n    }\\n\\n    /**\\n     * @dev Allows Vesting manager to activate a vesting and transfer locked\\n     * tokens from the Allocator contract to the associated Escrow address.\\n     * \\n     * Requirements:\\n     * \\n     * - Beneficiary address must be already confirmed.\\n     */\\n    function startVesting(address beneficiary) external onlyVestingManager {\\n        require(\\n            _beneficiaries[beneficiary].status == BeneficiaryStatus.CONFIRMED,\\n            \\\"Beneficiary has inappropriate status\\\"\\n        );\\n        _beneficiaries[beneficiary].status = BeneficiaryStatus.ACTIVE;\\n        require(\\n            IERC20(contractManager.getContract(\\\"SkaleToken\\\")).transfer(\\n                address(_beneficiaryToEscrow[beneficiary]),\\n                _beneficiaries[beneficiary].fullAmount\\n            ),\\n            \\\"Error of token sending\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows Vesting manager to define and add a Plan.\\n     * \\n     * Requirements:\\n     * \\n     * - Vesting cliff period must be less than or equal to the full period.\\n     * - Vesting step time unit must be in days, months, or years.\\n     * - Total vesting duration must equal vesting cliff plus entire vesting schedule.\\n     */\\n    function addPlan(\\n        uint256 vestingCliff, // months\\n        uint256 totalVestingDuration, // months\\n        TimeUnit vestingIntervalTimeUnit, // 0 - day 1 - month 2 - year\\n        uint256 vestingInterval, // months or days or years\\n        bool canDelegate, // can beneficiary delegate all un-vested tokens\\n        bool isTerminatable\\n    )\\n        external\\n        onlyVestingManager\\n    {\\n        require(totalVestingDuration > 0, \\\"Vesting duration can't be zero\\\");\\n        require(vestingInterval > 0, \\\"Vesting interval can't be zero\\\");\\n        require(totalVestingDuration >= vestingCliff, \\\"Cliff period exceeds total vesting duration\\\");\\n        // can't check if vesting interval in days is correct because it depends on startMonth\\n        // This check is in connectBeneficiaryToPlan\\n        if (vestingIntervalTimeUnit == TimeUnit.MONTH) {\\n            uint256 vestingDurationAfterCliff = totalVestingDuration - vestingCliff;\\n            require(\\n                vestingDurationAfterCliff.mod(vestingInterval) == 0,\\n                \\\"Vesting duration can't be divided into equal intervals\\\"\\n            );\\n        } else if (vestingIntervalTimeUnit == TimeUnit.YEAR) {\\n            uint256 vestingDurationAfterCliff = totalVestingDuration - vestingCliff;\\n            require(\\n                vestingDurationAfterCliff.mod(vestingInterval.mul(_MONTHS_PER_YEAR)) == 0,\\n                \\\"Vesting duration can't be divided into equal intervals\\\"\\n            );\\n        }\\n        \\n        _plans.push(Plan({\\n            totalVestingDuration: totalVestingDuration,\\n            vestingCliff: vestingCliff,\\n            vestingIntervalTimeUnit: vestingIntervalTimeUnit,\\n            vestingInterval: vestingInterval,\\n            isDelegationAllowed: canDelegate,\\n            isTerminatable: isTerminatable\\n        }));\\n        emit PlanCreated(_plans.length);\\n    }\\n\\n    /**\\n     * @dev Allows Vesting manager to register a beneficiary to a Plan.\\n     * \\n     * Requirements:\\n     * \\n     * - Plan must already exist.\\n     * - The vesting amount must be less than or equal to the full allocation.\\n     * - The beneficiary address must not already be included in the any other Plan.\\n     */\\n    function connectBeneficiaryToPlan(\\n        address beneficiary,\\n        uint256 planId,\\n        uint256 startMonth,\\n        uint256 fullAmount,\\n        uint256 lockupAmount\\n    )\\n        external\\n        onlyVestingManager\\n    {\\n        require(_plans.length >= planId && planId > 0, \\\"Plan does not exist\\\");\\n        require(fullAmount >= lockupAmount, \\\"Incorrect amounts\\\");\\n        require(_beneficiaries[beneficiary].status == BeneficiaryStatus.UNKNOWN, \\\"Beneficiary is already added\\\");\\n        if (_plans[planId - 1].vestingIntervalTimeUnit == TimeUnit.DAY) {\\n            uint256 vestingDurationInDays = _daysBetweenMonths(\\n                startMonth.add(_plans[planId - 1].vestingCliff),\\n                startMonth.add(_plans[planId - 1].totalVestingDuration)\\n            );\\n            require(\\n                vestingDurationInDays.mod(_plans[planId - 1].vestingInterval) == 0,\\n                \\\"Vesting duration can't be divided into equal intervals\\\"\\n            );\\n        }\\n        _beneficiaries[beneficiary] = Beneficiary({\\n            status: BeneficiaryStatus.CONFIRMED,\\n            planId: planId,\\n            startMonth: startMonth,\\n            fullAmount: fullAmount,\\n            amountAfterLockup: lockupAmount\\n        });\\n        _beneficiaryToEscrow[beneficiary] = _deployEscrow(beneficiary);\\n    }\\n\\n    /**\\n     * @dev Allows Vesting manager to terminate vesting of a Escrow. Performed when\\n     * a beneficiary is terminated.\\n     * \\n     * Requirements:\\n     * \\n     * - Vesting must be active.\\n     */\\n    function stopVesting(address beneficiary) external onlyVestingManager {\\n        require(\\n            _beneficiaries[beneficiary].status == BeneficiaryStatus.ACTIVE,\\n            \\\"Cannot stop vesting for a non active beneficiary\\\"\\n        );\\n        require(\\n            _plans[_beneficiaries[beneficiary].planId - 1].isTerminatable,\\n            \\\"Can't stop vesting for beneficiary with this plan\\\"\\n        );\\n        _beneficiaries[beneficiary].status = BeneficiaryStatus.TERMINATED;\\n        Escrow(_beneficiaryToEscrow[beneficiary]).cancelVesting(calculateVestedAmount(beneficiary));\\n    }\\n\\n    /**\\n     * @dev Returns vesting start month of the beneficiary's Plan.\\n     */\\n    function getStartMonth(address beneficiary) external view returns (uint) {\\n        return _beneficiaries[beneficiary].startMonth;\\n    }\\n\\n    /**\\n     * @dev Returns the final vesting date of the beneficiary's Plan.\\n     */\\n    function getFinishVestingTime(address beneficiary) external view returns (uint) {\\n        ITimeHelpers timeHelpers = ITimeHelpers(contractManager.getContract(\\\"TimeHelpers\\\"));\\n        Beneficiary memory beneficiaryPlan = _beneficiaries[beneficiary];\\n        Plan memory planParams = _plans[beneficiaryPlan.planId - 1];\\n        return timeHelpers.monthToTimestamp(beneficiaryPlan.startMonth.add(planParams.totalVestingDuration));\\n    }\\n\\n    /**\\n     * @dev Returns the vesting cliff period in months.\\n     */\\n    function getVestingCliffInMonth(address beneficiary) external view returns (uint) {\\n        return _plans[_beneficiaries[beneficiary].planId - 1].vestingCliff;\\n    }\\n\\n    /**\\n     * @dev Confirms whether the beneficiary is active in the Plan.\\n     */\\n    function isVestingActive(address beneficiary) external view returns (bool) {\\n        return _beneficiaries[beneficiary].status == BeneficiaryStatus.ACTIVE;\\n    }\\n\\n    /**\\n     * @dev Confirms whether the beneficiary is registered in a Plan.\\n     */\\n    function isBeneficiaryRegistered(address beneficiary) external view returns (bool) {\\n        return _beneficiaries[beneficiary].status != BeneficiaryStatus.UNKNOWN;\\n    }\\n\\n    /**\\n     * @dev Confirms whether the beneficiary's Plan allows all un-vested tokens to be\\n     * delegated.\\n     */\\n    function isDelegationAllowed(address beneficiary) external view returns (bool) {\\n        return _plans[_beneficiaries[beneficiary].planId - 1].isDelegationAllowed;\\n    }\\n\\n    /**\\n     * @dev Returns the locked and unlocked (full) amount of tokens allocated to\\n     * the beneficiary address in Plan.\\n     */\\n    function getFullAmount(address beneficiary) external view returns (uint) {\\n        return _beneficiaries[beneficiary].fullAmount;\\n    }\\n\\n    /**\\n     * @dev Returns the Escrow contract by beneficiary.\\n     */\\n    function getEscrowAddress(address beneficiary) external view returns (address) {\\n        return address(_beneficiaryToEscrow[beneficiary]);\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp when vesting cliff ends and periodic vesting\\n     * begins.\\n     */\\n    function getLockupPeriodEndTimestamp(address beneficiary) external view returns (uint) {\\n        ITimeHelpers timeHelpers = ITimeHelpers(contractManager.getContract(\\\"TimeHelpers\\\"));\\n        Beneficiary memory beneficiaryPlan = _beneficiaries[beneficiary];\\n        Plan memory planParams = _plans[beneficiaryPlan.planId - 1];\\n        return timeHelpers.monthToTimestamp(beneficiaryPlan.startMonth.add(planParams.vestingCliff));\\n    }\\n\\n    /**\\n     * @dev Returns the time of the next vesting event.\\n     */\\n    function getTimeOfNextVest(address beneficiary) external view returns (uint) {\\n        ITimeHelpers timeHelpers = ITimeHelpers(contractManager.getContract(\\\"TimeHelpers\\\"));\\n\\n        Beneficiary memory beneficiaryPlan = _beneficiaries[beneficiary];\\n        Plan memory planParams = _plans[beneficiaryPlan.planId - 1];\\n\\n        uint256 firstVestingMonth = beneficiaryPlan.startMonth.add(planParams.vestingCliff);\\n        uint256 lockupEndTimestamp = timeHelpers.monthToTimestamp(firstVestingMonth);\\n        if (now < lockupEndTimestamp) {\\n            return lockupEndTimestamp;\\n        }\\n        require(\\n            now < timeHelpers.monthToTimestamp(beneficiaryPlan.startMonth.add(planParams.totalVestingDuration)),\\n            \\\"Vesting is over\\\"\\n        );\\n        require(beneficiaryPlan.status != BeneficiaryStatus.TERMINATED, \\\"Vesting was stopped\\\");\\n        \\n        uint256 currentMonth = timeHelpers.getCurrentMonth();\\n        if (planParams.vestingIntervalTimeUnit == TimeUnit.DAY) {\\n            // TODO: it may be simplified if TimeHelpers contract in skale-manager is updated\\n            uint daysPassedBeforeCurrentMonth = _daysBetweenMonths(firstVestingMonth, currentMonth);\\n            uint256 currentMonthBeginningTimestamp = timeHelpers.monthToTimestamp(currentMonth);\\n            uint256 daysPassedInCurrentMonth = now.sub(currentMonthBeginningTimestamp).div(_SECONDS_PER_DAY);\\n            uint256 daysPassedBeforeNextVest = _calculateNextVestingStep(\\n                daysPassedBeforeCurrentMonth.add(daysPassedInCurrentMonth),\\n                planParams.vestingInterval\\n            );\\n            return currentMonthBeginningTimestamp.add(\\n                daysPassedBeforeNextVest\\n                    .sub(daysPassedBeforeCurrentMonth)\\n                    .mul(_SECONDS_PER_DAY)\\n            );\\n        } else if (planParams.vestingIntervalTimeUnit == TimeUnit.MONTH) {\\n            return timeHelpers.monthToTimestamp(\\n                firstVestingMonth.add(\\n                    _calculateNextVestingStep(currentMonth.sub(firstVestingMonth), planParams.vestingInterval)\\n                )\\n            );\\n        } else if (planParams.vestingIntervalTimeUnit == TimeUnit.YEAR) {\\n            return timeHelpers.monthToTimestamp(\\n                firstVestingMonth.add(\\n                    _calculateNextVestingStep(\\n                        currentMonth.sub(firstVestingMonth),\\n                        planParams.vestingInterval.mul(_MONTHS_PER_YEAR)\\n                    )\\n                )\\n            );\\n        } else {\\n            revert(\\\"Vesting interval timeunit is incorrect\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the Plan parameters.\\n     * \\n     * Requirements:\\n     * \\n     * - Plan must already exist.\\n     */\\n    function getPlan(uint256 planId) external view returns (Plan memory) {\\n        require(planId > 0 && planId <= _plans.length, \\\"Plan Round does not exist\\\");\\n        return _plans[planId - 1];\\n    }\\n\\n    /**\\n     * @dev Returns the Plan parameters for a beneficiary address.\\n     * \\n     * Requirements:\\n     * \\n     * - Beneficiary address must be registered to an Plan.\\n     */\\n    function getBeneficiaryPlanParams(address beneficiary) external view returns (Beneficiary memory) {\\n        require(_beneficiaries[beneficiary].status != BeneficiaryStatus.UNKNOWN, \\\"Plan beneficiary is not registered\\\");\\n        return _beneficiaries[beneficiary];\\n    }\\n\\n    function initialize(address contractManagerAddress) public override initializer {\\n        Permissions.initialize(contractManagerAddress);\\n        _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n        _erc1820.setInterfaceImplementer(address(this), keccak256(\\\"ERC777TokensRecipient\\\"), address(this));\\n    }\\n\\n    /**\\n     * @dev Calculates and returns the vested token amount.\\n     */\\n    function calculateVestedAmount(address wallet) public view returns (uint256 vestedAmount) {\\n        ITimeHelpers timeHelpers = ITimeHelpers(contractManager.getContract(\\\"TimeHelpers\\\"));\\n        Beneficiary memory beneficiaryPlan = _beneficiaries[wallet];\\n        Plan memory planParams = _plans[beneficiaryPlan.planId - 1];\\n        vestedAmount = 0;\\n        uint256 currentMonth = timeHelpers.getCurrentMonth();\\n        if (currentMonth >= beneficiaryPlan.startMonth.add(planParams.vestingCliff)) {\\n            vestedAmount = beneficiaryPlan.amountAfterLockup;\\n            if (currentMonth >= beneficiaryPlan.startMonth.add(planParams.totalVestingDuration)) {\\n                vestedAmount = beneficiaryPlan.fullAmount;\\n            } else {\\n                uint256 payment = _getSinglePaymentSize(\\n                    wallet,\\n                    beneficiaryPlan.fullAmount,\\n                    beneficiaryPlan.amountAfterLockup\\n                );\\n                vestedAmount = vestedAmount.add(payment.mul(_getNumberOfCompletedVestingEvents(wallet)));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of vesting events that have completed.\\n     */\\n    function _getNumberOfCompletedVestingEvents(address wallet) internal view returns (uint) {\\n        ITimeHelpers timeHelpers = ITimeHelpers(contractManager.getContract(\\\"TimeHelpers\\\"));\\n        \\n        Beneficiary memory beneficiaryPlan = _beneficiaries[wallet];\\n        Plan memory planParams = _plans[beneficiaryPlan.planId - 1];\\n\\n        uint256 firstVestingMonth = beneficiaryPlan.startMonth.add(planParams.vestingCliff);\\n        if (now < timeHelpers.monthToTimestamp(firstVestingMonth)) {\\n            return 0;\\n        } else {\\n            uint256 currentMonth = timeHelpers.getCurrentMonth();\\n            if (planParams.vestingIntervalTimeUnit == TimeUnit.DAY) {\\n                return _daysBetweenMonths(firstVestingMonth, currentMonth)\\n                    .add(\\n                        now\\n                            .sub(timeHelpers.monthToTimestamp(currentMonth))\\n                            .div(_SECONDS_PER_DAY)\\n                    )\\n                    .div(planParams.vestingInterval);\\n            } else if (planParams.vestingIntervalTimeUnit == TimeUnit.MONTH) {\\n                return currentMonth\\n                    .sub(firstVestingMonth)\\n                    .div(planParams.vestingInterval);\\n            } else if (planParams.vestingIntervalTimeUnit == TimeUnit.YEAR) {\\n                return currentMonth\\n                    .sub(firstVestingMonth)\\n                    .div(_MONTHS_PER_YEAR)\\n                    .div(planParams.vestingInterval);\\n            } else {\\n                revert(\\\"Unknown time unit\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of total vesting events.\\n     */\\n    function _getNumberOfAllVestingEvents(address wallet) internal view returns (uint) {\\n        Beneficiary memory beneficiaryPlan = _beneficiaries[wallet];\\n        Plan memory planParams = _plans[beneficiaryPlan.planId - 1];\\n        if (planParams.vestingIntervalTimeUnit == TimeUnit.DAY) {\\n            return _daysBetweenMonths(\\n                beneficiaryPlan.startMonth.add(planParams.vestingCliff),\\n                beneficiaryPlan.startMonth.add(planParams.totalVestingDuration)\\n            ).div(planParams.vestingInterval);\\n        } else if (planParams.vestingIntervalTimeUnit == TimeUnit.MONTH) {\\n            return planParams.totalVestingDuration\\n                .sub(planParams.vestingCliff)\\n                .div(planParams.vestingInterval);\\n        } else if (planParams.vestingIntervalTimeUnit == TimeUnit.YEAR) {\\n            return planParams.totalVestingDuration\\n                .sub(planParams.vestingCliff)\\n                .div(_MONTHS_PER_YEAR)\\n                .div(planParams.vestingInterval);\\n        } else {\\n            revert(\\\"Unknown time unit\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens that are unlocked in each vesting\\n     * period.\\n     */\\n    function _getSinglePaymentSize(\\n        address wallet,\\n        uint256 fullAmount,\\n        uint256 afterLockupPeriodAmount\\n    )\\n        internal\\n        view\\n        returns(uint)\\n    {\\n        return fullAmount.sub(afterLockupPeriodAmount).div(_getNumberOfAllVestingEvents(wallet));\\n    }\\n\\n    function _deployEscrow(address beneficiary) private returns (Escrow) {\\n        // TODO: replace with ProxyFactory when @openzeppelin/upgrades will be compatible with solidity 0.6\\n        IProxyFactory proxyFactory = IProxyFactory(contractManager.getContract(\\\"ProxyFactory\\\"));\\n        Escrow escrow = Escrow(contractManager.getContract(\\\"Escrow\\\"));\\n        // TODO: replace with ProxyAdmin when @openzeppelin/upgrades will be compatible with solidity 0.6\\n        IProxyAdmin proxyAdmin = IProxyAdmin(contractManager.getContract(\\\"ProxyAdmin\\\"));\\n\\n        return Escrow(\\n            proxyFactory.deploy(\\n                uint256(bytes32(bytes20(beneficiary))),\\n                proxyAdmin.getProxyImplementation(address(escrow)),\\n                address(proxyAdmin),\\n                abi.encodeWithSelector(\\n                    Escrow.initialize.selector,\\n                    address(contractManager),\\n                    beneficiary\\n                )\\n            )\\n        );\\n    }\\n\\n    function _daysBetweenMonths(uint256 beginMonth, uint256 endMonth) private view returns (uint256) {\\n        assert(beginMonth <= endMonth);\\n        ITimeHelpers timeHelpers = ITimeHelpers(contractManager.getContract(\\\"TimeHelpers\\\"));\\n        uint256 beginTimestamp = timeHelpers.monthToTimestamp(beginMonth);\\n        uint256 endTimestamp = timeHelpers.monthToTimestamp(endMonth);\\n        uint256 secondsPassed = endTimestamp.sub(beginTimestamp);\\n        require(secondsPassed.mod(_SECONDS_PER_DAY) == 0, \\\"Internal error in calendar\\\");\\n        return secondsPassed.div(_SECONDS_PER_DAY);\\n    }\\n\\n    /**\\n     * @dev returns time of next vest in abstract time units named \\\"step\\\"\\n     * Examples:\\n     *     if current step is 5 and vesting interval is 7 function returns 7.\\n     *     if current step is 17 and vesting interval is 7 function returns 21.\\n     */\\n    function _calculateNextVestingStep(uint256 currentStep, uint256 vestingInterval) private pure returns (uint256) {\\n        return currentStep\\n            .add(vestingInterval)\\n            .sub(\\n                currentStep.mod(vestingInterval)\\n            );\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/openzeppelin/IProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IProxyFactory.sol - SKALE Allocator\\n    Copyright (C) 2020-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\n// TODO: Remove it when @openzeppelin/upgrades will be compatible with solidity 0.6\\ninterface IProxyFactory {\\n    function deploy(uint256 _salt, address _logic, address _admin, bytes memory _data) external returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/openzeppelin/IProxyAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IProxyAdmin.sol - SKALE Allocator\\n    Copyright (C) 2020-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\n// TODO: Remove it when @openzeppelin/upgrades will be compatible with solidity 0.6\\ninterface IProxyAdmin {\\n    function getProxyImplementation(address proxy) external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITimeHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ITimeHelpers.sol - SKALE Allocator\\n    Copyright (C) 2020-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @title Time Helpers Interface\\n * @dev Interface of Time Helper functions of the Time Helpers SKALE Allocator\\n * contract.\\n */\\ninterface ITimeHelpers {\\n    function getCurrentMonth() external view returns (uint);\\n    function monthToTimestamp(uint month) external view returns (uint timestamp);\\n}\"\r\n    },\r\n    \"contracts/Permissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    Permissions.sol - SKALE Allocator\\n    Copyright (C) 2020-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"./interfaces/IContractManager.sol\\\";\\n\\n\\n/**\\n * @title Permissions - connected module for Upgradeable approach, knows ContractManager\\n * @author Artem Payvin\\n */\\ncontract Permissions is AccessControlUpgradeSafe {\\n    using SafeMath for uint;\\n    using Address for address;\\n\\n    IContractManager public contractManager;\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_isOwner(), \\\"Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev allow - throws if called by any account and contract other than the owner\\n     * or `contractName` contract\\n     */\\n    modifier allow(string memory contractName) {\\n        require(\\n            contractManager.getContract(contractName) == msg.sender || _isOwner(),\\n            \\\"Message sender is invalid\\\");\\n        _;\\n    }\\n\\n    function initialize(address contractManagerAddress) public virtual initializer {\\n        AccessControlUpgradeSafe.__AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setContractManager(contractManagerAddress);\\n    }\\n\\n    function _isOwner() internal view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function _setContractManager(address contractManagerAddress) private {\\n        require(contractManagerAddress != address(0), \\\"ContractManager address is not set\\\");\\n        require(contractManagerAddress.isContract(), \\\"Address is not contract\\\");\\n        contractManager = IContractManager(contractManagerAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IContractManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IContractManager.sol - SKALE Allocator\\n    Copyright (C) 2020-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @title Contract Manager\\n * @dev This contract is the main contract for upgradeable approach. This\\n * contract contains the current mapping from contract IDs (in the form of\\n * human-readable strings) to addresses.\\n */\\ninterface IContractManager {\\n    /**\\n     * @dev Returns the contract address of a given contract name.\\n     *\\n     * Requirements:\\n     *\\n     * - Contract mapping must exist.\\n     */\\n    function getContract(string calldata name) external view returns (address contractAddress);\\n}\\n\"\r\n    },\r\n    \"contracts/test/ConstantsHolderMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ConstantsHolderMock.sol - SKALE Allocator\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\n// import \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"../Permissions.sol\\\";\\n\\n\\n/**\\n * @dev Interface of Delegatable Token operations.\\n */\\ncontract ConstantsHolderMock is Permissions {\\n\\n    uint256 public launchTimestamp;\\n\\n    function setLaunchTimestamp(uint256 timestamp) external onlyOwner {\\n        require(now < launchTimestamp, \\\"Can't set network launch timestamp because network is already launched\\\");\\n        launchTimestamp = timestamp;\\n    }\\n\\n    function initialize(address contractManagerAddress) public override initializer {\\n        Permissions.initialize(contractManagerAddress);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/test/ContractManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ContractManager.sol - SKALE Allocator\\n    Copyright (C) 2020-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./utils/StringUtils.sol\\\";\\n\\n\\n/**\\n * @title Contract Manager\\n * @dev This contract is the main contract for upgradeable approach. This\\n * contract contains the current mapping from contract IDs (in the form of\\n * human-readable strings) to addresses.\\n */\\ncontract ContractManager is OwnableUpgradeSafe {\\n    using StringUtils for string;\\n    using Address for address;\\n\\n    // mapping of actual smart contracts addresses\\n    mapping (bytes32 => address) public contracts;\\n\\n    event ContractUpgraded(string contractsName, address contractsAddress);\\n\\n    function initialize() external initializer {\\n        OwnableUpgradeSafe.__Ownable_init();\\n    }\\n\\n    /**\\n     * @dev Allows Owner to add contract to mapping of actual contract addresses\\n     * \\n     * Emits a {ContractUpgraded} event.\\n     * \\n     * Requirements:\\n     * \\n     * - Contract address is non-zero.\\n     * - Contract address is not already added.\\n     * - Contract contains code.\\n     */\\n    function setContractsAddress(string calldata contractsName, address newContractsAddress) external onlyOwner {\\n        // check newContractsAddress is not equal to zero\\n        require(newContractsAddress != address(0), \\\"New address is equal zero\\\");\\n        // create hash of contractsName\\n        bytes32 contractId = keccak256(abi.encodePacked(contractsName));\\n        // check newContractsAddress is not equal the previous contract's address\\n        require(contracts[contractId] != newContractsAddress, \\\"Contract is already added\\\");\\n        require(newContractsAddress.isContract(), \\\"Given contracts address does not contain code\\\");\\n        // add newContractsAddress to mapping of actual contract addresses\\n        contracts[contractId] = newContractsAddress;\\n        emit ContractUpgraded(contractsName, newContractsAddress);\\n    }\\n\\n    /**\\n     * @dev Returns the contract address of a given contract name.\\n     * \\n     * Requirements:\\n     * \\n     * - Contract mapping must exist.\\n     */\\n    function getContract(string calldata name) external view returns (address contractAddress) {\\n        contractAddress = contracts[keccak256(abi.encodePacked(name))];\\n        require(contractAddress != address(0), name.strConcat(\\\" contract has not been found\\\"));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/test/utils/StringUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    StringUtils.sol - SKALE Allocator\\n    Copyright (C) 2020-Present SKALE Labs\\n    @author Vadim Yavorsky\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n\\nlibrary StringUtils {\\n    using SafeMath for uint;\\n\\n    function strConcat(string memory a, string memory b) internal pure returns (string memory) {\\n        bytes memory _ba = bytes(a);\\n        bytes memory _bb = bytes(b);\\n\\n        string memory ab = new string(_ba.length.add(_bb.length));\\n        bytes memory strBytes = bytes(ab);\\n        uint256 k = 0;\\n        uint256 i = 0;\\n        for (i = 0; i < _ba.length; i++) {\\n            strBytes[k++] = _ba[i];\\n        }\\n        for (i = 0; i < _bb.length; i++) {\\n            strBytes[k++] = _bb[i];\\n        }\\n        return string(strBytes);\\n    }\\n}\"\r\n    },\r\n    \"contracts/test/DelegationControllerTester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    DelegationControllerTester.sol - SKALE Allocator\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"../Permissions.sol\\\";\\nimport \\\"../interfaces/delegation/IDelegationController.sol\\\";\\nimport \\\"./interfaces/ILocker.sol\\\";\\nimport \\\"./TokenStateTester.sol\\\";\\nimport \\\"./SkaleTokenTester.sol\\\";\\n\\ncontract DelegationControllerTester is Permissions, IDelegationController, ILocker {\\n\\n    struct Delegation {\\n        address holder;\\n        uint256 amount;\\n    }\\n\\n    mapping (address => uint) private _locked;\\n    Delegation[] private _delegations;\\n\\n    function delegate(\\n        uint256 ,\\n        uint256 amount,\\n        uint256 ,\\n        string calldata\\n    )\\n        external\\n        override\\n    {\\n        SkaleTokenTester skaleToken = SkaleTokenTester(contractManager.getContract(\\\"SkaleToken\\\"));\\n        TokenStateTester tokenState = TokenStateTester(contractManager.getContract(\\\"TokenState\\\"));\\n        _delegations.push(Delegation({\\n            holder: msg.sender,\\n            amount: amount\\n        }));\\n        _locked[msg.sender] += amount;\\n        uint256 holderBalance = skaleToken.balanceOf(msg.sender);\\n        uint256 forbiddenForDelegation = tokenState.getAndUpdateForbiddenForDelegationAmount(msg.sender);\\n        require(holderBalance >= forbiddenForDelegation, \\\"Token holder does not have enough tokens to delegate\\\");\\n    }\\n\\n    function requestUndelegation(uint256 delegationId) external override {\\n        address holder = _delegations[delegationId].holder;\\n        _locked[holder] -= _delegations[delegationId].amount;\\n    }\\n\\n    function cancelPendingDelegation(uint delegationId) external override {\\n        address holder = _delegations[delegationId].holder;\\n        _locked[holder] -= _delegations[delegationId].amount;\\n    }\\n\\n    /**\\n     * @dev See ILocker.\\n     */\\n    function getAndUpdateLockedAmount(address wallet) external override returns (uint) {\\n        return _getAndUpdateLockedAmount(wallet);\\n    }\\n\\n    /**\\n     * @dev See ILocker.\\n     */\\n    function getAndUpdateForbiddenForDelegationAmount(address wallet) external override returns (uint) {\\n        return _getAndUpdateLockedAmount(wallet);\\n    }\\n\\n    function initialize(address contractManagerAddress) public override initializer {\\n        Permissions.initialize(contractManagerAddress);\\n    }\\n\\n    function _getAndUpdateLockedAmount(address wallet) private view returns (uint) {\\n        return _locked[wallet];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/interfaces/ILocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ILocker.sol - SKALE Allocator\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @dev Interface of Locker functions of the {TokenState} contract.\\n *\\n * The SKALE Network has three types of locked tokens:\\n *\\n * - Tokens that are transferrable but are currently locked into delegation with\\n * a validator. See {DelegationController};\\n *\\n * - Tokens that are not transferable from one address to another, but may be\\n * delegated to a validator {getAndUpdateLockedAmount}. This lock enforces\\n * Proof-of-Use requirements. See {TokenLaunchLocker}; and,\\n *\\n * - Tokens that are neither transferable nor delegatable\\n * {getAndUpdateForbiddenForDelegationAmount}. This lock enforces slashing.\\n * See {Punisher}.\\n */\\ninterface ILocker {\\n    /**\\n     * @dev Returns the locked amount of untransferable tokens of a given `wallet`\\n     */\\n    function getAndUpdateLockedAmount(address wallet) external returns (uint);\\n\\n    /**\\n     * @dev Returns the locked amount of untransferable and un-delegatable tokens of a given `wallet`.\\n     */\\n    function getAndUpdateForbiddenForDelegationAmount(address wallet) external returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/test/TokenStateTester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    SkaleTokenInternalTester.sol - SKALE Allocator\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"../Permissions.sol\\\";\\nimport \\\"../interfaces/delegation/ITokenState.sol\\\";\\nimport \\\"./interfaces/ILocker.sol\\\";\\n\\ncontract TokenStateTester is Permissions, ITokenState {\\n\\n    string[] private _lockers;\\n\\n    function getAndUpdateForbiddenForDelegationAmount(address holder) external override returns (uint) {\\n        uint256 forbidden = 0;\\n        for (uint256 i = 0; i < _lockers.length; ++i) {\\n            ILocker locker = ILocker(contractManager.getContract(_lockers[i]));\\n            forbidden = forbidden.add(locker.getAndUpdateForbiddenForDelegationAmount(holder));\\n        }\\n        return forbidden;\\n    }\\n\\n    function getAndUpdateLockedAmount(address holder) external override returns (uint) {\\n        uint256 locked = 0;\\n        for (uint256 i = 0; i < _lockers.length; ++i) {\\n            ILocker locker = ILocker(contractManager.getContract(_lockers[i]));\\n            locked = locked.add(locker.getAndUpdateLockedAmount(holder));\\n        }\\n        return locked;\\n    }\\n\\n    function initialize(address contractManagerAddress) public override initializer {\\n        Permissions.initialize(contractManagerAddress);\\n        addLocker(\\\"DelegationController\\\");\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to add a contract to the Locker.\\n     *\\n     * Emits a LockerWasAdded event.\\n     *\\n     * @param locker string name of contract to add to locker\\n     */\\n    function addLocker(string memory locker) public onlyOwner {\\n        _lockers.push(locker);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/SkaleTokenTester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    SkaleTokenInternalTester.sol - SKALE Allocator\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/ERC777.sol\\\";\\n\\nimport \\\"../Permissions.sol\\\";\\nimport \\\"../interfaces/delegation/ITokenState.sol\\\";\\n\\ncontract SkaleTokenTester is ERC777UpgradeSafe, Permissions {\\n\\n    uint256 public constant CAP = 7 * 1e9 * (10 ** 18); // the maximum amount of tokens that can ever be created\\n\\n    constructor(\\n        address contractManagerAddress,\\n        string memory name,\\n        string memory symbol,\\n        address[] memory defOp\\n    )\\n        public\\n    {\\n        ERC777UpgradeSafe.__ERC777_init(name, symbol, defOp);\\n        Permissions.initialize(contractManagerAddress);\\n    }\\n\\n    function mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        require(amount <= CAP.sub(totalSupply()), \\\"Amount is too big\\\");\\n        _mint(\\n            account,\\n            amount,\\n            userData,\\n            operatorData\\n        );\\n\\n        return true;\\n    }\\n\\n    function getAndUpdateDelegatedAmount(address) pure external returns (uint) {\\n        return 0;\\n    }\\n\\n    function getAndUpdateSlashedAmount(address) pure external returns (uint) {\\n        return 0;\\n    }\\n\\n    function getAndUpdateLockedAmount(address wallet) public returns (uint) {\\n        ITokenState tokenState = ITokenState(contractManager.getContract(\\\"TokenState\\\"));\\n        return tokenState.getAndUpdateLockedAmount(wallet);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address, // operator\\n        address from,\\n        address, // to\\n        uint256 tokenId)\\n        internal override\\n    {\\n        uint256 locked = getAndUpdateLockedAmount(from);\\n        if (locked > 0) {\\n            require(balanceOf(from) >= locked.add(tokenId), \\\"Token should be unlocked for transferring\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/ERC777.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC777.sol\\\";\\nimport \\\"./IERC777Recipient.sol\\\";\\nimport \\\"./IERC777Sender.sol\\\";\\nimport \\\"../../token/ERC20/IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../introspection/IERC1820Registry.sol\\\";\\nimport \\\"../../Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC777} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * Support for ERC20 is included in this contract, as specified by the EIP: both\\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\\n * movements.\\n *\\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\\n * are no special restrictions in the amount of tokens that created, moved, or\\n * destroyed. This makes integration with ERC20 applications seamless.\\n */\\ncontract ERC777UpgradeSafe is Initializable, ContextUpgradeSafe, IERC777, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n    mapping(address => uint256) private _balances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    // We inline the result of the following hashes because Solidity doesn't resolve them at compile time.\\n    // See https://github.com/ethereum/solidity/issues/4024.\\n\\n    // keccak256(\\\"ERC777TokensSender\\\")\\n    bytes32 constant private _TOKENS_SENDER_INTERFACE_HASH =\\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\\n\\n    // keccak256(\\\"ERC777TokensRecipient\\\")\\n    bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH =\\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\\n\\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\\n    address[] private _defaultOperatorsArray;\\n\\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\\n    mapping(address => bool) private _defaultOperators;\\n\\n    // For each account, a mapping of its operators and revoked default operators.\\n    mapping(address => mapping(address => bool)) private _operators;\\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\\n\\n    // ERC20-allowances\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    /**\\n     * @dev `defaultOperators` may be an empty array.\\n     */\\n\\n    function __ERC777_init(\\n        string memory name,\\n        string memory symbol,\\n        address[] memory defaultOperators\\n    ) internal initializer {\\n        __Context_init_unchained();\\n        __ERC777_init_unchained(name, symbol, defaultOperators);\\n    }\\n\\n    function __ERC777_init_unchained(\\n        string memory name,\\n        string memory symbol,\\n        address[] memory defaultOperators\\n    ) internal initializer {\\n\\n\\n        _name = name;\\n        _symbol = symbol;\\n\\n        _defaultOperatorsArray = defaultOperators;\\n        for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\\n            _defaultOperators[_defaultOperatorsArray[i]] = true;\\n        }\\n\\n        // register interfaces\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC777Token\\\"), address(this));\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC20Token\\\"), address(this));\\n\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC777-name}.\\n     */\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-symbol}.\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-decimals}.\\n     *\\n     * Always returns 18, as per the\\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\\n     */\\n    function decimals() public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-granularity}.\\n     *\\n     * This implementation always returns `1`.\\n     */\\n    function granularity() public view override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-totalSupply}.\\n     */\\n    function totalSupply() public view override(IERC20, IERC777) returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\\n     */\\n    function balanceOf(address tokenHolder) public view override(IERC20, IERC777) returns (uint256) {\\n        return _balances[tokenHolder];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-send}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function send(address recipient, uint256 amount, bytes memory data) public override  {\\n        _send(_msgSender(), recipient, amount, data, \\\"\\\", true);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\\n     * interface if it is a contract.\\n     *\\n     * Also emits a {Sent} event.\\n     */\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n\\n        address from = _msgSender();\\n\\n        _callTokensToSend(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _callTokensReceived(from, from, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-burn}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function burn(uint256 amount, bytes memory data) public override  {\\n        _burn(_msgSender(), amount, data, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC777-isOperatorFor}.\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        address tokenHolder\\n    ) public view override returns (bool) {\\n        return operator == tokenHolder ||\\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\\n            _operators[tokenHolder][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-authorizeOperator}.\\n     */\\n    function authorizeOperator(address operator) public override  {\\n        require(_msgSender() != operator, \\\"ERC777: authorizing self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            delete _revokedDefaultOperators[_msgSender()][operator];\\n        } else {\\n            _operators[_msgSender()][operator] = true;\\n        }\\n\\n        emit AuthorizedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-revokeOperator}.\\n     */\\n    function revokeOperator(address operator) public override  {\\n        require(operator != _msgSender(), \\\"ERC777: revoking self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            _revokedDefaultOperators[_msgSender()][operator] = true;\\n        } else {\\n            delete _operators[_msgSender()][operator];\\n        }\\n\\n        emit RevokedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-defaultOperators}.\\n     */\\n    function defaultOperators() public view override returns (address[] memory) {\\n        return _defaultOperatorsArray;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorSend}.\\n     *\\n     * Emits {Sent} and {IERC20-Transfer} events.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    )\\n    public override\\n    {\\n        require(isOperatorFor(_msgSender(), sender), \\\"ERC777: caller is not an operator for holder\\\");\\n        _send(sender, recipient, amount, data, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorBurn}.\\n     *\\n     * Emits {Burned} and {IERC20-Transfer} events.\\n     */\\n    function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public override {\\n        require(isOperatorFor(_msgSender(), account), \\\"ERC777: caller is not an operator for holder\\\");\\n        _burn(account, amount, data, operatorData);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators may\\n     * not have allowance, and accounts with allowance may not be operators\\n     * themselves.\\n     */\\n    function allowance(address holder, address spender) public view override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function approve(address spender, uint256 value) public override returns (bool) {\\n        address holder = _msgSender();\\n        _approve(holder, spender, value);\\n        return true;\\n    }\\n\\n   /**\\n    * @dev See {IERC20-transferFrom}.\\n    *\\n    * Note that operator and allowance concepts are orthogonal: operators cannot\\n    * call `transferFrom` (unless they have allowance), and accounts with\\n    * allowance cannot call `operatorSend` (unless they are operators).\\n    *\\n    * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\\n    */\\n    function transferFrom(address holder, address recipient, uint256 amount) public override returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n        require(holder != address(0), \\\"ERC777: transfer from the zero address\\\");\\n\\n        address spender = _msgSender();\\n\\n        _callTokensToSend(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n        _approve(holder, spender, _allowances[holder][spender].sub(amount, \\\"ERC777: transfer amount exceeds allowance\\\"));\\n\\n        _callTokensReceived(spender, holder, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n    internal virtual\\n    {\\n        require(account != address(0), \\\"ERC777: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, amount);\\n\\n        // Update state variables\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n\\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\\n\\n        emit Minted(operator, account, amount, userData, operatorData);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Send tokens\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _send(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        internal\\n    {\\n        require(from != address(0), \\\"ERC777: send from the zero address\\\");\\n        require(to != address(0), \\\"ERC777: send to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\\n\\n        _move(operator, from, to, amount, userData, operatorData);\\n\\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\\n    }\\n\\n    /**\\n     * @dev Burn tokens\\n     * @param from address token holder address\\n     * @param amount uint256 amount of tokens to burn\\n     * @param data bytes extra information provided by the token holder\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _burn(\\n        address from,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    )\\n        internal virtual\\n    {\\n        require(from != address(0), \\\"ERC777: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), amount);\\n\\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\\n\\n        // Update state variables\\n        _balances[from] = _balances[from].sub(amount, \\\"ERC777: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n\\n        emit Burned(operator, from, amount, data, operatorData);\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    function _move(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        private\\n    {\\n        _beforeTokenTransfer(operator, from, to, amount);\\n\\n        _balances[from] = _balances[from].sub(amount, \\\"ERC777: transfer amount exceeds balance\\\");\\n        _balances[to] = _balances[to].add(amount);\\n\\n        emit Sent(operator, from, to, amount, userData, operatorData);\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    function _approve(address holder, address spender, uint256 value) internal {\\n        // TODO: restore this require statement if this function becomes internal, or is called at a new callsite. It is\\n        // currently unnecessary.\\n        //require(holder != address(0), \\\"ERC777: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC777: approve to the zero address\\\");\\n\\n        _allowances[holder][spender] = value;\\n        emit Approval(holder, spender, value);\\n    }\\n\\n    /**\\n     * @dev Call from.tokensToSend() if the interface is registered\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _callTokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        private\\n    {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\\n        }\\n    }\\n\\n    /**\\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\\n     * tokensReceived() was not registered for the recipient\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _callTokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        private\\n    {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\\n        } else if (requireReceptionAck) {\\n            require(!to.isContract(), \\\"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes\\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - when `from` is zero, `tokenId` will be minted for `to`.\\n     * - when `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address operator, address from, address to, uint256 tokenId) internal virtual { }\\n\\n    uint256[41] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\"\r\n    },\r\n    \"contracts/test/DistributorMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    DistributorMock.sol - SKALE Allocator\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC1820Registry.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/delegation/IDistributor.sol\\\";\\n\\n\\n\\ncontract DistributorMock is IDistributor, IERC777Recipient {    \\n\\n    IERC1820Registry private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n    IERC20 public skaleToken;\\n\\n    //        wallet =>   validatorId => tokens\\n    mapping (address => mapping (uint256 => uint)) public approved;\\n\\n    constructor (address skaleTokenAddress) public {        \\n        skaleToken = IERC20(skaleTokenAddress);\\n        _erc1820.setInterfaceImplementer(address(this), keccak256(\\\"ERC777TokensRecipient\\\"), address(this));\\n    }\\n\\n    function withdrawBounty(uint256 validatorId, address to) external override {\\n        uint256 bounty = approved[msg.sender][validatorId];        \\n        delete approved[msg.sender][validatorId];\\n        require(skaleToken.transfer(to, bounty), \\\"Failed to transfer tokens\\\");\\n    }\\n\\n    function tokensReceived(\\n        address,\\n        address,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata\\n    )\\n        external override\\n    {\\n        require(to == address(this), \\\"Receiver is incorrect\\\");\\n        require(userData.length == 32 * 2, \\\"Data length is incorrect\\\");\\n        (uint256 validatorId, address wallet) = abi.decode(userData, (uint, address));\\n        _payBounty(wallet, validatorId, amount);\\n    }\\n\\n    // private\\n\\n    function _payBounty(address wallet, uint256 validatorId, uint256 amount) private {\\n        approved[wallet][validatorId] += amount;\\n    }\\n}\"\r\n    },\r\n    \"contracts/test/LockerMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    LockerMock.sol - SKALE Allocator\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./interfaces/ILocker.sol\\\";\\n\\ncontract LockerMock is ILocker {\\n    function getAndUpdateLockedAmount(address) external override returns (uint) {\\n        return 13;\\n    }\\n    \\n    function getAndUpdateForbiddenForDelegationAmount(address) external override returns (uint) {\\n        return 13;\\n    }\\n}\"\r\n    },\r\n    \"contracts/test/ProxyFactoryMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ProxyFactoryMock.sol - SKALE Allocator\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"../interfaces/openzeppelin/IProxyFactory.sol\\\";\\nimport \\\"../interfaces/openzeppelin/IProxyAdmin.sol\\\";\\n\\n\\ncontract ProxyMock {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    constructor(address implementation, bytes memory _data) public {\\n        _setImplementation(implementation);\\n        if(_data.length > 0) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success,) = implementation.delegatecall(_data);\\n            require(success);\\n        }\\n    }\\n\\n    fallback () payable external {\\n        _delegate(_implementation());\\n    }\\n\\n    function _delegate(address implementation) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n        // Copy msg.data. We take full control of memory in this inline assembly\\n        // block because it will not return to Solidity code. We overwrite the\\n        // Solidity scratch pad at memory position 0.\\n        calldatacopy(0, 0, calldatasize())\\n\\n        // Call the implementation.\\n        // out and outsize are 0 because we don't know the size yet.\\n        let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n        // Copy the returned data.\\n        returndatacopy(0, 0, returndatasize())\\n\\n        switch result\\n        // delegatecall returns 0 on error.\\n        case 0 { revert(0, returndatasize()) }\\n        default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    function _implementation() internal view returns (address impl) {\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n    \\n    function _setImplementation(address newImplementation) internal {\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n}\\n\\ncontract ProxyFactoryMock is IProxyFactory, IProxyAdmin {\\n    address public implementation;\\n    function deploy(uint256, address _logic, address, bytes memory _data) external override returns (address) {\\n        return address(new ProxyMock(_logic, _data));\\n    }\\n    function setImplementation(address _implementation) external {\\n        implementation = _implementation;\\n    }\\n    function getProxyImplementation(address) external view override returns (address) {\\n        return implementation;\\n    }    \\n}\"\r\n    },\r\n    \"contracts/test/thirdparty/BokkyPooBahsDateTimeLibrary.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint256 year, uint256 month, uint256 day) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days) internal pure returns (uint256 year, uint256 month, uint256 day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint256 year, uint256 month, uint256 day) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint256 year, uint256 month, uint256 day, uint256 hour, uint256 minute, uint256 second) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint256 timestamp) internal pure returns (uint256 year, uint256 month, uint256 day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint256 timestamp) internal pure returns (uint256 year, uint256 month, uint256 day, uint256 hour, uint256 minute, uint256 second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint256 year, uint256 month, uint256 day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint256 daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint256 year, uint256 month, uint256 day, uint256 hour, uint256 minute, uint256 second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint256 timestamp) internal pure returns (bool leapYear) {\\n        uint256 year;\\n        uint256 month;\\n        uint256 day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint256 timestamp) internal pure returns (uint256 daysInMonth) {\\n        uint256 year;\\n        uint256 month;\\n        uint256 day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint256 year, uint256 month) internal pure returns (uint256 daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp) internal pure returns (uint256 dayOfWeek) {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        uint256 month;\\n        uint256 day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        uint256 year;\\n        uint256 day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        uint256 year;\\n        uint256 month;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint256 timestamp) internal pure returns (uint256 minute) {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint256 timestamp) internal pure returns (uint256 second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years) internal pure returns (uint256 newTimestamp) {\\n        uint256 year;\\n        uint256 month;\\n        uint256 day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint256 timestamp, uint256 _months) internal pure returns (uint256 newTimestamp) {\\n        uint256 year;\\n        uint256 month;\\n        uint256 day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint256 timestamp, uint256 _days) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint256 timestamp, uint256 _hours) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint256 timestamp, uint256 _minutes) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint256 timestamp, uint256 _seconds) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint256 timestamp, uint256 _years) internal pure returns (uint256 newTimestamp) {\\n        uint256 year;\\n        uint256 month;\\n        uint256 day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint256 timestamp, uint256 _months) internal pure returns (uint256 newTimestamp) {\\n        uint256 year;\\n        uint256 month;\\n        uint256 day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint256 timestamp, uint256 _days) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint256 timestamp, uint256 _hours) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint256 timestamp, uint256 _minutes) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint256 timestamp, uint256 _seconds) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        uint256 fromYear;\\n        uint256 fromMonth;\\n        uint256 fromDay;\\n        uint256 toYear;\\n        uint256 toMonth;\\n        uint256 toDay;\\n        (fromYear, fromMonth, fromDay) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (toYear, toMonth, toDay) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        uint256 fromYear;\\n        uint256 fromMonth;\\n        uint256 fromDay;\\n        uint256 toYear;\\n        uint256 toMonth;\\n        uint256 toDay;\\n        (fromYear, fromMonth, fromDay) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (toYear, toMonth, toDay) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/thirdparty/Migrations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.7.0;\\n\\ncontract Migrations {\\n  address public owner;\\n  uint256 public last_completed_migration;\\n\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  modifier restricted() {\\n    if (msg.sender == owner) _;\\n  }\\n\\n  function setCompleted(uint256 completed) public restricted {\\n    last_completed_migration = completed;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/test/TimeHelpersTester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    TimeHelpers.sol - SKALE Allocator\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./thirdparty/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../interfaces/ITimeHelpers.sol\\\";\\n\\n/**\\n * @title TimeHelpers\\n * @dev The contract performs time operations.\\n *\\n * These functions are used to calculate monthly and Proof of Use epochs.\\n */\\ncontract TimeHelpersTester is ITimeHelpers {\\n    using SafeMath for uint;\\n\\n    uint256 constant private _ZERO_YEAR = 2020;\\n\\n    function getCurrentMonth() external view override returns (uint) {\\n        return timestampToMonth(now);\\n    }\\n\\n    function timestampToMonth(uint256 timestamp) public pure returns (uint) {\\n        uint256 year;\\n        uint256 month;\\n        (year, month, ) = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);\\n        require(year >= _ZERO_YEAR, \\\"Timestamp is too far in the past\\\");\\n        month = month.sub(1).add(year.sub(_ZERO_YEAR).mul(12));\\n        require(month > 0, \\\"Timestamp is too far in the past\\\");\\n        return month;\\n    }\\n\\n    function monthToTimestamp(uint256 month) public view override returns (uint256 timestamp) {\\n        uint256 year = _ZERO_YEAR;\\n        uint256 _month = month;\\n        year = year.add(_month.div(12));\\n        _month = _month.mod(12);\\n        _month = _month.add(1);\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDate(year, _month, 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/TokenLaunchManagerTester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ITokenLaunchManager.sol - SKALE Allocator\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Allocator is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Allocator is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Allocator.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\n// import \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"../Permissions.sol\\\";\\n\\n\\n/**\\n * @dev Interface of Delegatable Token operations.\\n */\\ncontract TokenLaunchManagerTester is Permissions {\\n\\n    bytes32 public constant SELLER_ROLE = keccak256(\\\"SELLER_ROLE\\\");\\n\\n    function initialize(address contractManagerAddress) public override initializer {\\n        Permissions.initialize(contractManagerAddress);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delegationId\",\"type\":\"uint256\"}],\"name\":\"cancelPendingDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestedAmount\",\"type\":\"uint256\"}],\"name\":\"cancelVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractManager\",\"outputs\":[{\"internalType\":\"contract IContractManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractManagerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delegationId\",\"type\":\"uint256\"}],\"name\":\"requestUndelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"retrieveAfterTermination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensToSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"validatorId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AdminEscrow","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}