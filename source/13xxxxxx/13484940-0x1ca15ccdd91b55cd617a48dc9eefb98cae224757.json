{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StrangeAttractors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright 2021 David Huber (@cxkoda)\\n// All Rights Reserved\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./solvers/IAttractorSolver.sol\\\";\\nimport \\\"./renderers/ISvgRenderer.sol\\\";\\nimport \\\"./utils/BaseOpenSea.sol\\\";\\nimport \\\"./utils/ERC2981SinglePercentual.sol\\\";\\nimport \\\"./utils/SignedSlotRestrictable.sol\\\";\\nimport \\\"./utils/ColorMixer.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/PullPayment.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @notice Fully on-chain interactive NFT project performing numerical\\n * simulations of chaotic, multi-dimensional _systems.\\n * @dev This contract implements tokenonmics of the project, conforming to the\\n * ERC721 and ERC2981 standard.\\n * @author David Huber (@cxkoda)\\n */\\ncontract StrangeAttractors is\\n    BaseOpenSea,\\n    SignedSlotRestrictable,\\n    ERC2981SinglePercentual,\\n    ERC721Enumerable,\\n    Ownable,\\n    PullPayment\\n{\\n    /**\\n     * @notice Maximum number of editions per system.\\n     */\\n    uint8 private constant MAX_PER_SYSTEM = 128;\\n\\n    /**\\n     * @notice Max number that the contract owner can mint in a specific system.\\n     * @dev The contract assumes that the owner mints the first pieces.\\n     */\\n    uint8 private constant OWNER_ALLOCATION = 2;\\n\\n    /**\\n     * @notice Mint price\\n     */\\n    uint256 public constant MINT_PRICE = (35 ether) / 100;\\n\\n    /**\\n     * @notice Contains the configuration of a given _systems in the collection.\\n     */\\n    struct AttractorSystem {\\n        string description;\\n        uint8 numLeftForMint;\\n        bool locked;\\n        ISvgRenderer renderer;\\n        uint8 defaultRenderSize;\\n        uint32[] defaultColorAnchors;\\n        IAttractorSolver solver;\\n        SolverParameters solverParameters;\\n    }\\n\\n    /**\\n     * @notice Systems in the collection.\\n     * @dev Convention: The first system is the fullset system.\\n     */\\n    AttractorSystem[] private _systems;\\n\\n    /**\\n     * @notice Token configuration\\n     */\\n    struct Token {\\n        uint8 systemId;\\n        bool usedForFullsetToken;\\n        bool useDefaultColors;\\n        bool useDefaultProjection;\\n        uint8 renderSize;\\n        uint256 randomSeed;\\n        ProjectionParameters projectionParameters;\\n        uint32[] colorAnchors;\\n    }\\n\\n    /**\\n     * @notice All existing _tokens\\n     * @dev Maps tokenId => token configuration\\n     */\\n    mapping(uint256 => Token) private _tokens;\\n\\n    // -------------------------------------------------------------------------\\n    //\\n    //  Collection setup\\n    //\\n    // -------------------------------------------------------------------------\\n\\n    /**\\n     * @notice Contract constructor\\n     * @dev Sets the owner as default 10% royalty receiver.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address slotSigner,\\n        address openSeaProxyRegistry\\n    ) ERC721(name, symbol) {\\n        if (openSeaProxyRegistry != address(0)) {\\n            _setOpenSeaRegistry(openSeaProxyRegistry);\\n        }\\n        _setRoyaltyReceiver(owner());\\n        _setRoyaltyPercentage(1000);\\n        _setSlotSigner(slotSigner);\\n    }\\n\\n    /**\\n     * @notice Adds a new attractor system to the collection\\n     * @dev This is used to set up the collection after contract deployment.\\n     * If `systemId` is a valid ID, the corresponding, existing system will\\n     * be overwritten. Otherwise a new system will be added.\\n     * Further system modification is prevented if the system is locked.\\n     * Both adding and modifying were merged in this single method to avoid\\n     * hitting the contract size limit.\\n     */\\n    function newAttractorSystem(\\n        string calldata description,\\n        address solver,\\n        SolverParameters calldata solverParameters,\\n        address renderer,\\n        uint32[] calldata defaultColorAnchors,\\n        uint8 defaultRenderSize,\\n        uint256 systemId\\n    ) external onlyOwner {\\n        AttractorSystem memory system = AttractorSystem({\\n            numLeftForMint: MAX_PER_SYSTEM,\\n            description: description,\\n            locked: false,\\n            solver: IAttractorSolver(solver),\\n            solverParameters: solverParameters,\\n            renderer: ISvgRenderer(renderer),\\n            defaultColorAnchors: defaultColorAnchors,\\n            defaultRenderSize: defaultRenderSize\\n        });\\n        if (systemId < _systems.length) {\\n            require(!_systems[systemId].locked, \\\"System locked\\\");\\n            system.numLeftForMint = _systems[systemId].numLeftForMint;\\n            _systems[systemId] = system;\\n        } else {\\n            _systems.push(system);\\n        }\\n    }\\n\\n    /**\\n     * @notice Locks a system against further modifications.\\n     */\\n    function lockSystem(uint8 systemId) external onlyOwner {\\n        _systems[systemId].locked = true;\\n    }\\n\\n    // -------------------------------------------------------------------------\\n    //\\n    //  Minting\\n    //\\n    // -------------------------------------------------------------------------\\n\\n    function setSlotSigner(address signer) external onlyOwner {\\n        _setSlotSigner(signer);\\n    }\\n\\n    /**\\n     * @notice Enable or disable the slot restriction for minting.\\n     */\\n    function setSlotRestriction(bool enabled) external onlyOwner {\\n        _setSlotRestriction(enabled);\\n    }\\n\\n    /**\\n     * @notice Interface to mint the remaining owner allocated pieces.\\n     * @dev This has to be executed before anyone else has minted.\\n     */\\n    function safeMintOwner() external onlyOwner {\\n        bool mintedSomething = false;\\n        for (uint8 systemId = 1; systemId < _systems.length; systemId++) {\\n            for (\\n                ;\\n                MAX_PER_SYSTEM - _systems[systemId].numLeftForMint <\\n                OWNER_ALLOCATION;\\n\\n            ) {\\n                _safeMintInAttractor(systemId);\\n                mintedSomething = true;\\n            }\\n        }\\n\\n        // To get some feedback if there are no pieces left for the owner.\\n        require(mintedSomething, \\\"Owner allocation exhausted.\\\");\\n    }\\n\\n    /**\\n     * @notice Mint interface for regular users.\\n     * @dev Mints one edition piece from a randomly selected system. The\\n     * The probability to mint a given system is proportional to the available\\n     * editions.\\n     */\\n    function safeMintRegularToken(uint256 nonce, bytes calldata signature)\\n        external\\n        payable\\n    {\\n        require(msg.value == MINT_PRICE, \\\"Invalid payment.\\\");\\n        _consumeSlotIfEnabled(_msgSender(), nonce, signature);\\n        _asyncTransfer(owner(), msg.value);\\n\\n        // Check how many _tokens there are left in total.\\n        uint256 numAvailableTokens = 0;\\n        for (uint8 idx = 1; idx < _systems.length; ++idx) {\\n            numAvailableTokens += _systems[idx].numLeftForMint;\\n        }\\n\\n        if (numAvailableTokens > 0) {\\n            // Draw a pseudo-random number in [0, numAvailableTokens) that\\n            // determines which system to mint.\\n            uint256 rand = _random(numAvailableTokens) % numAvailableTokens;\\n\\n            // Check in which bracket `rand` is and mint an edition of the\\n            // corresponding system\\n            for (uint8 idx = 1; idx < _systems.length; ++idx) {\\n                if (rand < _systems[idx].numLeftForMint) {\\n                    _safeMintInAttractor(idx);\\n                    return;\\n                } else {\\n                    rand -= _systems[idx].numLeftForMint;\\n                }\\n            }\\n        }\\n\\n        revert(\\\"All _systems sold out\\\");\\n    }\\n\\n    /**\\n     * @notice Interface to mint a special token for fullset holders.\\n     * @dev The sender needs to supply one unused token of every regular\\n     * system.\\n     */\\n    function safeMintFullsetToken(uint256[4] calldata tokenIds)\\n        external\\n        onlyApprovedOrOwner(tokenIds[0])\\n        onlyApprovedOrOwner(tokenIds[1])\\n        onlyApprovedOrOwner(tokenIds[2])\\n        onlyApprovedOrOwner(tokenIds[3])\\n    {\\n        require(isFullsetMintEnabled, \\\"Fullset mint is disabled.\\\");\\n\\n        bool[4] memory containsSystem = [false, false, false, false];\\n        for (uint256 idx = 0; idx < 4; ++idx) {\\n            // Check if already used\\n            require(\\n                !_tokens[tokenIds[idx]].usedForFullsetToken,\\n                \\\"Token already used.\\\"\\n            );\\n\\n            // Set an ok flag if a given system was found\\n            containsSystem[_getTokenSystemId(tokenIds[idx]) - 1] = true;\\n\\n            // Mark as used\\n            _tokens[tokenIds[idx]].usedForFullsetToken = true;\\n        }\\n\\n        // Check if all _systems are present\\n        require(\\n            containsSystem[0] &&\\n                containsSystem[1] &&\\n                containsSystem[2] &&\\n                containsSystem[3],\\n            \\\"Tokens of each system required\\\"\\n        );\\n\\n        uint256 tokenId = _safeMintInAttractor(0);\\n\\n        // Although we technically  don't need to set this flag onr the fullset\\n        // system, let's set it anyways to display the correct value in\\n        // `tokenURI`.\\n        _tokens[tokenId].usedForFullsetToken = true;\\n    }\\n\\n    /**\\n     * @notice Flag for enabling fullset token minting.\\n     */\\n    bool public isFullsetMintEnabled = false;\\n\\n    /**\\n     * @notice Toggles the ability to mint fullset _tokens.\\n     */\\n    function enableFullsetMint(bool enable) external onlyOwner {\\n        isFullsetMintEnabled = enable;\\n    }\\n\\n    /**\\n     * @dev Mints the next token in the system.\\n     */\\n    function _safeMintInAttractor(uint8 systemId)\\n        internal\\n        returns (uint256 tokenId)\\n    {\\n        require(systemId < _systems.length, \\\"Mint in non-existent system.\\\");\\n        require(\\n            _systems[systemId].numLeftForMint > 0,\\n            \\\"System capacity exhausted\\\"\\n        );\\n\\n        tokenId =\\n            (systemId * _tokenIdSystemMultiplier) +\\n            (MAX_PER_SYSTEM - _systems[systemId].numLeftForMint);\\n\\n        _tokens[tokenId] = Token({\\n            systemId: systemId,\\n            randomSeed: _random(tokenId),\\n            projectionParameters: ProjectionParameters(\\n                new int256[](0),\\n                new int256[](0),\\n                new int256[](0)\\n            ),\\n            colorAnchors: new uint32[](0),\\n            usedForFullsetToken: false,\\n            useDefaultColors: true,\\n            useDefaultProjection: true,\\n            renderSize: _systems[systemId].defaultRenderSize\\n        });\\n        _systems[systemId].numLeftForMint--;\\n\\n        _safeMint(_msgSender(), tokenId);\\n    }\\n\\n    /**\\n     * @notice Defines the system prefix in the `tokenId`.\\n     * @dev Convention: The `tokenId` will be given by\\n     * `edition + _tokenIdSystemMultiplier * systemId`\\n     */\\n    uint256 private constant _tokenIdSystemMultiplier = 1e3;\\n\\n    /**\\n     * @notice Retrieves the `systemId` from a given `tokenId`.\\n     */\\n    function _getTokenSystemId(uint256 tokenId) internal pure returns (uint8) {\\n        return uint8(tokenId / _tokenIdSystemMultiplier);\\n    }\\n\\n    /**\\n     * @notice Retrieves the `edition` from a given `tokenId`.\\n     */\\n    function _getTokenEdition(uint256 tokenId) internal pure returns (uint8) {\\n        return uint8(tokenId % _tokenIdSystemMultiplier);\\n    }\\n\\n    /**\\n     * @notice Draw a pseudo-random number.\\n     * @dev Although the drawing can be manipulated with this implementation,\\n     * it is sufficiently fair for the given purpose.\\n     * Multiple evaluations on the same block with the same `modSeed` from the\\n     * same sender will yield the same random numbers.\\n     */\\n    function _random(uint256 modSeed) internal view returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(block.timestamp, _msgSender(), modSeed)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Re-draw a _tokens `randomSeed`.\\n     * @dev This is implemented as a last resort if a _tokens `randomSeed`\\n     * produces starting values that do not converge to the attractor.\\n     * Although this never happened while testing, you never know for sure\\n     * with random numbers.\\n     */\\n    function rerollTokenRandomSeed(uint256 tokenId) external onlyOwner {\\n        _tokens[tokenId].randomSeed = _random(_tokens[tokenId].randomSeed);\\n    }\\n\\n    // -------------------------------------------------------------------------\\n    //\\n    //  Rendering\\n    //\\n    // -------------------------------------------------------------------------\\n\\n    /**\\n     * @notice Assembles the name of a token\\n     * @dev Composed of the system name provided by the solver and the tokens\\n     * edition number. The returned string has been escapted for usage in\\n     * data-uris.\\n     */\\n    function getTokenName(uint256 tokenId) public view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _systems[_getTokenSystemId(tokenId)].solver.getSystemType(),\\n                    // \\\" #\\\",\\n                    \\\" %23\\\", // Uri encoded\\n                    Strings.toString(_getTokenEdition(tokenId))\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Renders a given token with externally supplied parameters.\\n     * @return The svg string.\\n     */\\n    function renderWithConfig(\\n        uint256 tokenId,\\n        ProjectionParameters memory projectionParameters,\\n        uint32[] memory colorAnchors,\\n        uint8 renderSize\\n    ) public view returns (string memory) {\\n        AttractorSystem storage system = _systems[_getTokenSystemId(tokenId)];\\n\\n        return\\n            system.renderer.render(\\n                system.solver.computeSolution(\\n                    system.solverParameters,\\n                    system.solver.getRandomStartingPoint(\\n                        _tokens[tokenId].randomSeed\\n                    ),\\n                    projectionParameters\\n                ),\\n                ColorMixer.getColormap(colorAnchors),\\n                renderSize\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the `ProjectionParameters` for a given token.\\n     * @dev Checks if default settings are used and computes them if needed.\\n     */\\n    function getProjectionParameters(uint256 tokenId)\\n        public\\n        view\\n        returns (ProjectionParameters memory)\\n    {\\n        if (_tokens[tokenId].useDefaultProjection) {\\n            return\\n                _systems[_getTokenSystemId(tokenId)]\\n                    .solver\\n                    .getDefaultProjectionParameters(_getTokenEdition(tokenId));\\n        } else {\\n            return _tokens[tokenId].projectionParameters;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the `colormap` for a given token.\\n     * @dev Checks if default settings are used and retrieves them if needed.\\n     */\\n    function getColorAnchors(uint256 tokenId)\\n        public\\n        view\\n        returns (uint32[] memory colormap)\\n    {\\n        if (_tokens[tokenId].useDefaultColors) {\\n            return _systems[_getTokenSystemId(tokenId)].defaultColorAnchors;\\n        } else {\\n            return _tokens[tokenId].colorAnchors;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns data URI of token metadata.\\n     * @dev The output conforms to the Opensea attributes metadata standard.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        AttractorSystem storage system = _systems[_getTokenSystemId(tokenId)];\\n\\n        bytes memory data = abi.encodePacked(\\n            'data:application/json,{\\\"name\\\":\\\"',\\n            getTokenName(tokenId),\\n            '\\\",',\\n            '\\\"description\\\":\\\"',\\n            system.description,\\n            '\\\",\\\"attributes\\\":[{\\\"trait_type\\\": \\\"System\\\",\\\"value\\\":\\\"',\\n            system.solver.getSystemType(),\\n            '\\\"},{\\\"trait_type\\\": \\\"Random Seed\\\", \\\"value\\\":\\\"',\\n            Strings.toHexString(_tokens[tokenId].randomSeed)\\n        );\\n\\n        if (isFullsetMintEnabled) {\\n            data = abi.encodePacked(\\n                data,\\n                '\\\"},{\\\"trait_type\\\": \\\"Dimensions\\\", \\\"value\\\":\\\"',\\n                Strings.toString(system.solver.getDimensionality()),\\n                '\\\"},{\\\"trait_type\\\": \\\"Completed\\\", \\\"value\\\":\\\"',\\n                _tokens[tokenId].usedForFullsetToken ? \\\"Yes\\\" : \\\"No\\\"\\n            );\\n        }\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    data,\\n                    '\\\"}],\\\"image\\\":\\\"data:image/svg+xml,',\\n                    renderWithConfig(\\n                        tokenId,\\n                        getProjectionParameters(tokenId),\\n                        getColorAnchors(tokenId),\\n                        _tokens[tokenId].renderSize\\n                    ),\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    // -------------------------------------------------------------------------\\n    //\\n    //  Token interaction\\n    //\\n    // -------------------------------------------------------------------------\\n\\n    /**\\n     * @notice Set the projection parameters for a given token.\\n     */\\n    function setProjectionParameters(\\n        uint256 tokenId,\\n        ProjectionParameters calldata projectionParameters\\n    ) external onlyApprovedOrOwner(tokenId) {\\n        require(\\n            _systems[_getTokenSystemId(tokenId)]\\n                .solver\\n                .isValidProjectionParameters(projectionParameters),\\n            \\\"Invalid projection parameters\\\"\\n        );\\n\\n        _tokens[tokenId].projectionParameters = projectionParameters;\\n        _tokens[tokenId].useDefaultProjection = false;\\n    }\\n\\n    /**\\n     * @notice Set or reset the color anchors for a given token.\\n     * @dev To revert to the _systems default, `colorAnchors` has to be empty.\\n     * On own method for resetting was omitted to remain below the contract size\\n     * limit.\\n     * See `ColorMixer` for more details on the color system.\\n     */\\n    function setColorAnchors(uint256 tokenId, uint32[] calldata colorAnchors)\\n        external\\n        onlyApprovedOrOwner(tokenId)\\n    {\\n        // Lets restrict this to something sensible.\\n        require(\\n            colorAnchors.length > 0 && colorAnchors.length <= 64,\\n            \\\"Invalid amount of color anchors.\\\"\\n        );\\n        _tokens[tokenId].colorAnchors = colorAnchors;\\n        _tokens[tokenId].useDefaultColors = false;\\n    }\\n\\n    /**\\n     * @notice Set the rendersize for a given token.\\n     */\\n    function setRenderSize(uint256 tokenId, uint8 renderSize)\\n        external\\n        onlyApprovedOrOwner(tokenId)\\n    {\\n        _tokens[tokenId].renderSize = renderSize;\\n    }\\n\\n    /**\\n     * @notice Reset various rendering parameters for a given token.\\n     * @dev Setting the individual flag to true resets the associated parameters.\\n     */\\n    function resetRenderParameters(\\n        uint256 tokenId,\\n        bool resetProjectionParameters,\\n        bool resetColorAnchors,\\n        bool resetRenderSize\\n    ) external onlyApprovedOrOwner(tokenId) {\\n        if (resetProjectionParameters) {\\n            _tokens[tokenId].useDefaultProjection = true;\\n        }\\n        if (resetColorAnchors) {\\n            _tokens[tokenId].useDefaultColors = true;\\n        }\\n        if (resetRenderSize) {\\n            _tokens[tokenId].renderSize = _systems[_getTokenSystemId(tokenId)]\\n                .defaultRenderSize;\\n        }\\n    }\\n\\n    // -------------------------------------------------------------------------\\n    //\\n    //  External getters, metadata and steering\\n    //\\n    // -------------------------------------------------------------------------\\n\\n    /**\\n     * @notice Retrieve a system with a given ID.\\n     * @dev This was necessay because for some reason the default public getter\\n     * does not return `defaultColorAnchors` correctly.\\n     */\\n    function systems(uint8 systemId)\\n        external\\n        view\\n        returns (AttractorSystem memory)\\n    {\\n        return _systems[systemId];\\n    }\\n\\n    /**\\n     * @notice Retrieve a token with a given ID.\\n     * @dev This was necessay because for some reason the default public getter\\n     * does not return `colorAnchors` correctly.\\n     */\\n    function tokens(uint256 tokenId) external view returns (Token memory) {\\n        return _tokens[tokenId];\\n    }\\n\\n    /**\\n     * @dev Sets the royalty percentage (in units of 0.01%)\\n     */\\n    function setRoyaltyPercentage(uint256 percentage) external onlyOwner {\\n        _setRoyaltyPercentage(percentage);\\n    }\\n\\n    /**\\n     * @dev Sets the address to receive the royalties\\n     */\\n    function setRoyaltyReceiver(address receiver) external onlyOwner {\\n        _setRoyaltyReceiver(receiver);\\n    }\\n\\n    // -------------------------------------------------------------------------\\n    //\\n    //  Internal stuff\\n    //\\n    // -------------------------------------------------------------------------\\n\\n    /**\\n     * @dev Approves the opensea proxy for token transfers.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            super.isApprovedForAll(owner, operator) ||\\n            isOwnersOpenSeaProxy(owner, operator);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Enumerable, ERC2981)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    modifier onlyApprovedOrOwner(uint256 tokenId) {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"Neither owner nor approved for this token\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/solvers/IAttractorSolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright 2021 David Huber (@cxkoda)\\n// All Rights Reserved\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./AttractorSolution.sol\\\";\\n\\n/**\\n * @notice Parameters going to the numerical ODE solver.\\n * @param numberOfIterations Total number of iterations.\\n * @param dt Timestep increment in each iteration\\n * @param skip Amount of iterations between storing two points.\\n * @dev `numberOfIterations` has to be dividable without rest by `skip`.\\n */\\nstruct SolverParameters {\\n    uint256 numberOfIterations;\\n    uint256 dt;\\n    uint8 skip;\\n}\\n\\n/**\\n * @notice Parameters going to the projection routines.\\n * @dev The lengths of all fields have to match the dimensionality of the\\n * considered system.\\n * @param axis1 First projection axis (horizontal image coordinate)\\n * @param axis2 Second projection axis (vertical image coordinate)\\n * @param offset Offset applied before projecting.\\n */\\nstruct ProjectionParameters {\\n    int256[] axis1;\\n    int256[] axis2;\\n    int256[] offset;\\n}\\n\\n/**\\n * @notice Starting point for the numerical simulation\\n * @dev The length of the starting point has to match the dimensionality of the\\n * considered system.\\n * I agree, this struct looks kinda dumb, but I really like speaking types.\\n * So as long as we don't have typedefs for non-elementary types, we are stuck\\n * with this cruelty.\\n */\\nstruct StartingPoint {\\n    int256[] startingPoint;\\n}\\n\\n/**\\n * @notice Interface for simulators of chaotic systems.\\n * @dev Implementations of this interface will contain the mathematical\\n * description of the underlying differential equations, deal with its numerical\\n * solution and the 2D projection of the results.\\n * Implementations will internally use fixed-point numbers with a precision of\\n * 96 bits by convention.\\n * @author David Huber (@cxkoda)\\n */\\ninterface IAttractorSolver {\\n    /**\\n     * @notice Simulates the evolution of a chaotic system.\\n     * @dev This is the core piece of this class that performs everything\\n     * at once. All relevant algorithm for the evaluation of the ODEs\\n     * the numerical scheme, the projection and storage are contained within\\n     * this method for performance reasons.\\n     * @return An `AttractorSolution` containing already projected 2D points\\n     * and tangents to them.\\n     */\\n    function computeSolution(\\n        SolverParameters calldata,\\n        StartingPoint calldata,\\n        ProjectionParameters calldata\\n    ) external pure returns (AttractorSolution memory);\\n\\n    /**\\n     * @notice Generates a random starting point for the system.\\n     */\\n    function getRandomStartingPoint(uint256 randomSeed)\\n        external\\n        view\\n        returns (StartingPoint memory);\\n\\n    /**\\n     * @notice Generates the default projection for a given edition of the\\n     * system.\\n     */\\n    function getDefaultProjectionParameters(uint256 editionId)\\n        external\\n        view\\n        returns (ProjectionParameters memory);\\n\\n    /**\\n     * @notice Returns the type/name of the dynamical system.\\n     */\\n    function getSystemType() external pure returns (string memory);\\n\\n    /**\\n     * @notice Returns the dimensionality of the dynamical system (number of\\n     * ODEs).\\n     */\\n    function getDimensionality() external pure returns (uint8);\\n\\n    /**\\n     * @notice Returns the precision of the internally used fixed-point numbers.\\n     * @dev The solvers operate on fixed-point numbers with a given PRECISION,\\n     * i.e. the amount of bits reserved for decimal places.\\n     * By convention, this method will return 96 throughout the project.\\n     */\\n    function getFixedPointPrecision() external pure returns (uint8);\\n\\n    /**\\n     * @notice Checks if given `ProjectionParameters` are valid`\\n     */\\n    function isValidProjectionParameters(ProjectionParameters memory)\\n        external\\n        pure\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/renderers/ISvgRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright 2021 David Huber (@cxkoda)\\n// All Rights Reserved\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../solvers/AttractorSolution.sol\\\";\\n\\n/**\\n * @notice Renders a solution of an attractor simulation as SVG\\n * @author David Huber (@cxkoda)\\n */\\ninterface ISvgRenderer {\\n    /**\\n     * @notice Renders a list of 2D points and tangents as svg\\n     * @param solution List of 16-bit fixed-point points and tangents. \\n     * See `AttractorSolution`.\\n     * @param colormap 256 8-bit RGB colors. Leaving this in memory for easier\\n     * access in assembly later.\\n     * @param markerSize A modifier for marker sizes (e.g. stroke width, \\n     * point size)\\n     * @return The generated svg string. The viewport covers the area \\n     * [-64, 64] x [-64, 64] by convention.\\n     */\\n    function render(\\n        AttractorSolution calldata solution,\\n        bytes memory colormap,\\n        uint8 markerSize\\n    ) external pure returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/BaseOpenSea.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// https://gist.github.com/dievardump/483eb43bc6ed30b14f01e01842e3339b/\\n\\n/// @title OpenSea contract helper that defines a few things\\n/// @author Simon Fremaux (@dievardump)\\n/// @dev This is a contract used to add OpenSea's support for gas-less trading\\n///      by checking if operator is owner's proxy\\ncontract BaseOpenSea {\\n    string private _contractURI;\\n    ProxyRegistry private _proxyRegistry;\\n\\n    /// @notice Returns the contract URI function. Used on OpenSea to get details\\n    ///         about a contract (owner, royalties etc...)\\n    ///         See documentation: https://docs.opensea.io/docs/contract-level-metadata\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n\\n    /// @notice Helper for OpenSea gas-less trading\\n    /// @dev Allows to check if `operator` is owner's OpenSea proxy\\n    /// @param owner the owner we check for\\n    /// @param operator the operator (proxy) we check for\\n    function isOwnersOpenSeaProxy(address owner, address operator)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        ProxyRegistry proxyRegistry = _proxyRegistry;\\n        return\\n            // we have a proxy registry address\\n            address(proxyRegistry) != address(0) &&\\n            // current operator is owner's proxy address\\n            address(proxyRegistry.proxies(owner)) == operator;\\n    }\\n\\n    /// @dev Internal function to set the _contractURI\\n    /// @param contractURI_ the new contract uri\\n    function _setContractURI(string memory contractURI_) internal {\\n        _contractURI = contractURI_;\\n    }\\n\\n    /// @dev Internal function to set the _proxyRegistry\\n    /// @param proxyRegistryAddress the new proxy registry address\\n    function _setOpenSeaRegistry(address proxyRegistryAddress) internal {\\n        _proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\n    }\\n}\\n\\ncontract OwnableDelegateProxy {}\\n\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\"\r\n    },\r\n    \"contracts/utils/ERC2981SinglePercentual.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2021 David Huber (@cxkoda)\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./ERC2981.sol\\\";\\n\\n/**\\n * @notice ERC2981 royalty info implementation for a single beneficiary\\n * receving a percentage of sales prices.\\n * @author David Huber (@cxkoda)\\n */\\ncontract ERC2981SinglePercentual is ERC2981 {\\n    /**\\n     * @dev The royalty percentage (in units of 0.01%)\\n     */\\n    uint256 _percentage;\\n\\n    /**\\n     * @dev The address to receive the royalties\\n     */\\n    address _receiver;\\n\\n    /**\\n     * @dev See {IERC2981-royaltyInfo}.\\n     */\\n    function royaltyInfo(uint256, uint256 salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        royaltyAmount = (salePrice / 10000) * _percentage;\\n        receiver = _receiver;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty percentage (in units of 0.01%)\\n     */\\n    function _setRoyaltyPercentage(uint256 percentage_) internal {\\n        _percentage = percentage_;\\n    }\\n\\n    /**\\n     * @dev Sets the address to receive the royalties\\n     */\\n    function _setRoyaltyReceiver(address receiver_) internal {\\n        _receiver = receiver_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SignedSlotRestrictable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright 2021 David Huber (@cxkoda)\\n// All Rights Reserved\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @notice Impements consumable slots that can be used to restrict e.g. minting.\\n * @dev Intended as parent class for consumer contracts.\\n * The slot allocation is based on signing associated messages off-chain, which\\n * contain the grantee, the signer and a nonce. The contract checks whether the\\n * slot is still valid and invalidates it after consumption.\\n * @author David Huber (@cxkoda)\\n */\\ncontract SignedSlotRestrictable {\\n    // this is because minting is secured with a Signature\\n    using ECDSA for bytes32;\\n\\n    /**\\n     * @dev Flag for whether the restriction should be enforced or not.\\n     */\\n    bool private _isSlotRestricted = true;\\n\\n    /**\\n     * @dev List of already used/consumed slot messages\\n     */\\n    mapping(bytes32 => bool) private _usedMessages;\\n\\n    /**\\n     * @dev The address that signes the slot messages.\\n     */\\n    address private _signer;\\n\\n    /**\\n     * @notice Checks if the restriction if active\\n     */\\n    function isSlotRestricted() public view returns (bool) {\\n        return _isSlotRestricted;\\n    }\\n\\n    /**\\n     * @notice Actives/Disactivates the restriction\\n     */\\n    function _setSlotRestriction(bool enable) internal {\\n        _isSlotRestricted = enable;\\n    }\\n\\n    /**\\n     * @notice Changes the signing address.\\n     * @dev Changing the signer renders not yet consumed slots unconsumable.\\n     */\\n    function _setSlotSigner(address signer_) internal {\\n        _signer = signer_;\\n    }\\n\\n    /**\\n     * @notice Helper that creates the message that signer needs to sign to\\n     * approve the slot.\\n     */\\n    function createSlotMessage(address grantee, uint256 nonce)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(grantee, nonce, _signer, address(this)));\\n    }\\n\\n    /**\\n     * @notice Checks if a given slot is still valid.\\n     */\\n    function isValidSlot(\\n        address grantee,\\n        uint256 nonce,\\n        bytes memory signature\\n    ) external view returns (bool) {\\n        bytes32 message = createSlotMessage(grantee, nonce);\\n        return ((!_usedMessages[message]) &&\\n            (message.toEthSignedMessageHash().recover(signature) == _signer));\\n    }\\n\\n    /**\\n     * @notice Consumes a slot for a given user if the restriction is enabled.\\n     * @dev Intended to be called before the action to be restricted.\\n     * Validates the signature and checks if the slot was already used before.\\n     */\\n    function _consumeSlotIfEnabled(\\n        address grantee,\\n        uint256 nonce,\\n        bytes memory signature\\n    ) internal {\\n        if (_isSlotRestricted) {\\n            bytes32 message = createSlotMessage(grantee, nonce);\\n            require(!_usedMessages[message], \\\"Slot already used\\\");\\n            require(\\n                message.toEthSignedMessageHash().recover(signature) == _signer,\\n                \\\"Invalid slot signature\\\"\\n            );\\n            _usedMessages[message] = true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ColorMixer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright 2021 David Huber (@cxkoda)\\n// All Rights Reserved\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @notice Interpolation between ColorAnchors to generate a colormap.\\n * @dev A color anchor is encoded composed of four uint8 numbers in the order\\n * `colorAnchor = | red | green | blue | position |`. Every `uint32` typed \\n * variable in the following code will correspond to such anchors, while \\n * `uint24`s correspond to rgb colors.\\n * @author David Huber (@cxkoda)\\n */\\nlibrary ColorMixer {\\n    /**\\n     * @dev The internal fixed-point accuracy\\n     */\\n    uint8 private constant PRECISION = 32;\\n    uint256 private constant ONE = 2**32;\\n\\n    /**\\n     * @notice Interpolate linearily between two colors.\\n     * @param fraction Fixed-point number in [0,1] giving the relative\\n     * contribution of `left` (0) and `right` (1).\\n     * The interpolation follows the equation \\n     * `color = fraction * right + (1 - fraction) * left`.\\n     */\\n    function interpolate(\\n        uint24 left,\\n        uint24 right,\\n        uint256 fraction\\n    ) internal pure returns (uint24 color) {\\n        assembly {\\n            color := shr(\\n                PRECISION,\\n                add(\\n                    mul(fraction, and(shr(16, right), 0xff)),\\n                    mul(sub(ONE, fraction), and(shr(16, left), 0xff))\\n                )\\n            )\\n            color := add(\\n                shl(8, color),\\n                shr(\\n                    PRECISION,\\n                    add(\\n                        mul(fraction, and(shr(8, right), 0xff)),\\n                        mul(sub(ONE, fraction), and(shr(8, left), 0xff))\\n                    )\\n                )\\n            )\\n            color := add(\\n                shl(8, color),\\n                shr(\\n                    PRECISION,\\n                    add(\\n                        mul(fraction, and(right, 0xff)),\\n                        mul(sub(ONE, fraction), and(left, 0xff))\\n                    )\\n                )\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Generate a colormap from a list of anchors.\\n     * @dev Anchors have to be sorted by position.\\n     */\\n    function getColormap(uint32[] calldata anchors)\\n        external\\n        pure\\n        returns (bytes memory colormap)\\n    {\\n        require(anchors.length > 0);\\n        colormap = new bytes(768);\\n        uint256 offset = 0;\\n        // Left extrapolation (below the leftmost anchor)\\n        {\\n            uint32 anchor = anchors[0];\\n            uint8 anchorPos = uint8(anchor & 0xff);\\n            for (uint32 position = 0; position < anchorPos; position++) {\\n                colormap[offset++] = bytes1(uint8((anchor >> 24) & 0xff));\\n                colormap[offset++] = bytes1(uint8((anchor >> 16) & 0xff));\\n                colormap[offset++] = bytes1(uint8((anchor >> 8) & 0xff));\\n            }\\n        }\\n        // Interpolation\\n        if (anchors.length > 1) {\\n            for (uint256 idx = 0; idx < anchors.length - 1; idx++) {\\n                uint32 left = anchors[idx];\\n                uint32 right = anchors[idx + 1];\\n                uint8 leftPosition = uint8(left & 0xff);\\n                uint8 rightPosition = uint8(right & 0xff);\\n\\n                if (leftPosition == rightPosition) {\\n                    continue;\\n                }\\n                \\n                uint256 rangeInv = ONE / (rightPosition - leftPosition);\\n                for (\\n                    uint256 position = leftPosition;\\n                    position < rightPosition;\\n                    position++\\n                ) {\\n                    uint256 fraction = (position - leftPosition) * rangeInv;\\n                    uint32 interpolated = interpolate(\\n                        uint24(left >> 8),\\n                        uint24(right >> 8),\\n                        fraction\\n                    );\\n                    colormap[offset++] = bytes1(\\n                        uint8((interpolated >> 16) & 0xff)\\n                    );\\n                    colormap[offset++] = bytes1(\\n                        uint8((interpolated >> 8) & 0xff)\\n                    );\\n                    colormap[offset++] = bytes1(uint8(interpolated & 0xff));\\n                }\\n            }\\n        }\\n        // Right extrapolation (above the rightmost anchor)\\n        {\\n            uint32 anchor = anchors[anchors.length - 1];\\n            uint8 anchorPos = uint8(anchor & 0xff);\\n            for (uint256 position = anchorPos; position < 256; position++) {\\n                colormap[offset++] = bytes1(uint8((anchor >> 24) & 0xff));\\n                colormap[offset++] = bytes1(uint8((anchor >> 16) & 0xff));\\n                colormap[offset++] = bytes1(uint8((anchor >> 8) & 0xff));\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/PullPayment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/escrow/Escrow.sol\\\";\\n\\n/**\\n * @dev Simple implementation of a\\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\\n * strategy, where the paying contract doesn't interact directly with the\\n * receiver account, which must withdraw its payments itself.\\n *\\n * Pull-payments are often considered the best practice when it comes to sending\\n * Ether, security-wise. It prevents recipients from blocking execution, and\\n * eliminates reentrancy concerns.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\\n * instead of Solidity's `transfer` function. Payees can query their due\\n * payments with {payments}, and retrieve them with {withdrawPayments}.\\n */\\nabstract contract PullPayment {\\n    Escrow private immutable _escrow;\\n\\n    constructor() {\\n        _escrow = new Escrow();\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\\n     *\\n     * Note that _any_ account can call this function, not just the `payee`.\\n     * This means that contracts unaware of the `PullPayment` protocol can still\\n     * receive funds this way, by having a separate account call\\n     * {withdrawPayments}.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee Whose payments will be withdrawn.\\n     */\\n    function withdrawPayments(address payable payee) public virtual {\\n        _escrow.withdraw(payee);\\n    }\\n\\n    /**\\n     * @dev Returns the payments owed to an address.\\n     * @param dest The creditor's address.\\n     */\\n    function payments(address dest) public view returns (uint256) {\\n        return _escrow.depositsOf(dest);\\n    }\\n\\n    /**\\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n     * there is no danger of them being spent before withdrawal.\\n     *\\n     * @param dest The destination address of the funds.\\n     * @param amount The amount to transfer.\\n     */\\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\\n        _escrow.deposit{value: amount}(dest);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/solvers/AttractorSolution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright 2021 David Huber (@cxkoda)\\n// All Rights Reserved\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @notice The data struct that will be passed from the solver to the renderer.\\n * @dev `points` and `tangents` both contain pairs of 16-bit fixed-point numbers\\n * with a PRECISION of 6 in row-major order.`dt` is given in the fixed-point\\n * respresentation used by the solvers and corresponds to the time step between \\n * the datapoints.\\n */\\nstruct AttractorSolution {\\n    bytes points;\\n    bytes tangents;\\n    uint256 dt;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2021 David Huber (@cxkoda)\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @notice ERC2981 royalty info base contract\\n * @dev Implements `supportsInterface`\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC2981).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n * @author Taken from https://eips.ethereum.org/EIPS/eip-2981\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @notice Called with the sale price to determine how much royalty\\n     * is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by _tokenId\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for _salePrice\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/escrow/Escrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../Address.sol\\\";\\n\\n/**\\n * @title Escrow\\n * @dev Base escrow contract, holds funds designated for a payee until they\\n * withdraw them.\\n *\\n * Intended usage: This contract (and derived escrow contracts) should be a\\n * standalone contract, that only interacts with the contract that instantiated\\n * it. That way, it is guaranteed that all Ether will be handled according to\\n * the `Escrow` rules, and there is no need to check for payable functions or\\n * transfers in the inheritance tree. The contract that uses the escrow as its\\n * payment method should be its owner, and provide public methods redirecting\\n * to the escrow's deposit and withdraw.\\n */\\ncontract Escrow is Ownable {\\n    using Address for address payable;\\n\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    mapping(address => uint256) private _deposits;\\n\\n    function depositsOf(address payee) public view returns (uint256) {\\n        return _deposits[payee];\\n    }\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param payee The destination address of the funds.\\n     */\\n    function deposit(address payee) public payable virtual onlyOwner {\\n        uint256 amount = msg.value;\\n        _deposits[payee] += amount;\\n        emit Deposited(payee, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee The address whose funds will be withdrawn and transferred to.\\n     */\\n    function withdraw(address payable payee) public virtual onlyOwner {\\n        uint256 payment = _deposits[payee];\\n\\n        _deposits[payee] = 0;\\n\\n        payee.sendValue(payment);\\n\\n        emit Withdrawn(payee, payment);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/utils/ColorMixer.sol\": {\r\n        \"ColorMixer\": \"0x7094dbba1cceae581d59b53af7f184ec8202d4c5\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"slotSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"openSeaProxyRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"grantee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"createSlotMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableFullsetMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getColorAnchors\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"colormap\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getProjectionParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"int256[]\",\"name\":\"axis1\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"axis2\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"offset\",\"type\":\"int256[]\"}],\"internalType\":\"struct ProjectionParameters\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFullsetMintEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isOwnersOpenSeaProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSlotRestricted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"grantee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSlot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"systemId\",\"type\":\"uint8\"}],\"name\":\"lockSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"numberOfIterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dt\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"skip\",\"type\":\"uint8\"}],\"internalType\":\"struct SolverParameters\",\"name\":\"solverParameters\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"renderer\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"defaultColorAnchors\",\"type\":\"uint32[]\"},{\"internalType\":\"uint8\",\"name\":\"defaultRenderSize\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"systemId\",\"type\":\"uint256\"}],\"name\":\"newAttractorSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256[]\",\"name\":\"axis1\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"axis2\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"offset\",\"type\":\"int256[]\"}],\"internalType\":\"struct ProjectionParameters\",\"name\":\"projectionParameters\",\"type\":\"tuple\"},{\"internalType\":\"uint32[]\",\"name\":\"colorAnchors\",\"type\":\"uint32[]\"},{\"internalType\":\"uint8\",\"name\":\"renderSize\",\"type\":\"uint8\"}],\"name\":\"renderWithConfig\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rerollTokenRandomSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"resetProjectionParameters\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"resetColorAnchors\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"resetRenderSize\",\"type\":\"bool\"}],\"name\":\"resetRenderParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"tokenIds\",\"type\":\"uint256[4]\"}],\"name\":\"safeMintFullsetToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeMintOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"safeMintRegularToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32[]\",\"name\":\"colorAnchors\",\"type\":\"uint32[]\"}],\"name\":\"setColorAnchors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256[]\",\"name\":\"axis1\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"axis2\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"offset\",\"type\":\"int256[]\"}],\"internalType\":\"struct ProjectionParameters\",\"name\":\"projectionParameters\",\"type\":\"tuple\"}],\"name\":\"setProjectionParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"renderSize\",\"type\":\"uint8\"}],\"name\":\"setRenderSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setRoyaltyReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSlotRestriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"setSlotSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"systemId\",\"type\":\"uint8\"}],\"name\":\"systems\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"numLeftForMint\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"contract ISvgRenderer\",\"name\":\"renderer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"defaultRenderSize\",\"type\":\"uint8\"},{\"internalType\":\"uint32[]\",\"name\":\"defaultColorAnchors\",\"type\":\"uint32[]\"},{\"internalType\":\"contract IAttractorSolver\",\"name\":\"solver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"numberOfIterations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dt\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"skip\",\"type\":\"uint8\"}],\"internalType\":\"struct SolverParameters\",\"name\":\"solverParameters\",\"type\":\"tuple\"}],\"internalType\":\"struct StrangeAttractors.AttractorSystem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"systemId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"usedForFullsetToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDefaultColors\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useDefaultProjection\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"renderSize\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"randomSeed\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256[]\",\"name\":\"axis1\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"axis2\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"offset\",\"type\":\"int256[]\"}],\"internalType\":\"struct ProjectionParameters\",\"name\":\"projectionParameters\",\"type\":\"tuple\"},{\"internalType\":\"uint32[]\",\"name\":\"colorAnchors\",\"type\":\"uint32[]\"}],\"internalType\":\"struct StrangeAttractors.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrangeAttractors","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000d4c4fd6bbe3bddcd2ce4d9c53dd38d4641fd1a9f000000000000000000000000a5409ec958c83c3f309868babaca7c86dcb077c10000000000000000000000000000000000000000000000000000000000000012537472616e676520417474726163746f7273000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025341000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}