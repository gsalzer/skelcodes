{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"contracts/HTTPrivateSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./interfaces/IHTTERC20.sol\\\";\\nimport \\\"./interfaces/IHTTPrivateSale.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./access/Ownable.sol\\\";\\n\\ncontract HTTPrivateSale is IHTTPrivateSale, Ownable {\\n    using SafeMath for uint256;\\n\\n    uint8 constant _decimals = 18;\\n    IHTTERC20 _httTokenContract;\\n    mapping(uint256 => Version) _versions;\\n    mapping(uint256 => mapping(address => uint256)) _versionBuyer;\\n    uint256 _currentVersion;\\n    bool _enable;\\n\\n    constructor(address httTokenAddress) {\\n        _httTokenContract = IHTTERC20(httTokenAddress);\\n        _enable = false;\\n        _currentVersion = 0;\\n        _httTokenContract.approve(address(this), type(uint256).max);\\n    }\\n\\n    modifier versionExist() {\\n        require(\\n            _versions[_currentVersion].initialized,\\n            \\\"Private sale version not found\\\"\\n        );\\n        _;\\n    }\\n\\n    function balance() external view returns (uint256) {\\n        return _httTokenContract.balanceOf(address(this));\\n    }\\n\\n    function hasEnable() external view override returns (bool) {\\n        return _enable;\\n    }\\n\\n    function _setEnable(bool isEnable) internal {\\n        _enable = isEnable;\\n        emit StatusChanged(msg.sender, isEnable);\\n    }\\n\\n    function enable(bool isEnable) external override onlyOwner {\\n        _setEnable(isEnable);\\n    }\\n\\n    function addVersion(\\n        uint256 minBuyable,\\n        uint256 maxBuyable,\\n        uint256 supply,\\n        uint256 rate,\\n        bool enableVersion\\n    ) external override onlyOwner {\\n        require(minBuyable > 0, \\\"Should put minBuyable > 0\\\");\\n        require(maxBuyable > 0, \\\"Should put maxBuyable > 0\\\");\\n        require(maxBuyable > minBuyable, \\\"Should put maxBuyable > minBuyable\\\");\\n        require(supply > 0 && supply <= this.balance(), \\\"Invalid supply\\\");\\n        require(rate > 0, \\\"Should put rate > 0\\\");\\n        _versions[_currentVersion.add(1)] = Version(\\n            _currentVersion.add(1),\\n            true,\\n            minBuyable,\\n            maxBuyable,\\n            supply,\\n            0,\\n            rate\\n        );\\n        _currentVersion = _currentVersion.add(1);\\n        _setEnable(enableVersion);\\n    }\\n\\n    function currentVersion()\\n        external\\n        view\\n        override\\n        versionExist\\n        returns (Version memory)\\n    {\\n        return _versions[_currentVersion];\\n    }\\n\\n    function setRate(uint256 rate) external override versionExist onlyOwner {\\n        require(rate > 0, \\\"Should put rate > 0\\\");\\n        _versions[_currentVersion].rate = rate;\\n        emit RateChanged(msg.sender, _currentVersion, rate);\\n    }\\n\\n    function buy() external payable override {\\n        require(\\n            _versions[_currentVersion].initialized,\\n            \\\"Private sale version not found\\\"\\n        );\\n        require(_enable, \\\"Not enable yet\\\");\\n\\n        uint256 _boughtAmount = _versionBuyer[_currentVersion][msg.sender];\\n        uint256 httAmount = (msg.value / _versions[_currentVersion].rate) *\\n            10**_decimals;\\n        require(\\n            _boughtAmount.add(httAmount) <=\\n                _versions[_currentVersion].maxBuyable,\\n            \\\"Over maxable\\\"\\n        );\\n        require(\\n            httAmount >= _versions[_currentVersion].minBuyable &&\\n                httAmount <= this.balance() &&\\n                httAmount <= _versions[_currentVersion].totalSupply.sub(_versions[_currentVersion].soldSupply),\\n            \\\"Invalid amount\\\"\\n        );\\n        _httTokenContract.transfer(msg.sender, httAmount);\\n        _versions[_currentVersion].soldSupply = _versions[_currentVersion]\\n            .soldSupply\\n            .add(httAmount);\\n        _versionBuyer[_currentVersion][msg.sender] = _versionBuyer[\\n            _currentVersion\\n        ][msg.sender].add(httAmount);\\n        emit HttSold(\\n            msg.sender,\\n            _currentVersion,\\n            msg.value,\\n            _versions[_currentVersion].rate\\n        );\\n    }\\n\\n    function boughtAmount()\\n        external\\n        view\\n        override\\n        versionExist\\n        returns (uint256)\\n    {\\n        return _versionBuyer[_currentVersion][msg.sender];\\n    }\\n\\n    function withdrawEth() external override onlyOwner {\\n        address payable sender = payable(msg.sender);\\n        sender.transfer(address(this).balance);\\n    }\\n\\n    function withdrawHTT() external override onlyOwner {\\n        _httTokenContract.transferFrom(address(this), owner(), this.balance());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHTTERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IHTTERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n    function burn(uint256 amount) external;\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IHTTPrivateSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IHTTPrivateSale {\\n    event MinChanged(\\n        address indexed owner,\\n        uint256 version,\\n        uint256 minBuyable\\n    );\\n    event MaxChanged(\\n        address indexed owner,\\n        uint256 version,\\n        uint256 maxBuyable\\n    );\\n    event RateChanged(address indexed owner, uint256 version, uint256 rate);\\n    event StatusChanged(address indexed owner, bool value);\\n    event SupplyChanged(address indexed owner, uint256 version, uint256 supply);\\n    event HttSold(\\n        address indexed buyer,\\n        uint256 version,\\n        uint256 amount,\\n        uint256 rate\\n    );\\n\\n    struct Version {\\n        uint256 version;\\n        bool initialized;\\n        uint256 minBuyable;\\n        uint256 maxBuyable;\\n        uint256 totalSupply;\\n        uint256 soldSupply;\\n        uint256 rate;\\n    }\\n\\n    function currentVersion() external view returns (Version memory);\\n\\n    function addVersion(\\n        uint256 minBuyable,\\n        uint256 maxBuyable,\\n        uint256 supply,\\n        uint256 rate,\\n        bool enableVersion\\n    ) external;\\n\\n    function enable(bool isEnable) external;\\n\\n    function hasEnable() external view returns (bool);\\n\\n    function setRate(uint256 rate) external;\\n\\n    function buy() external payable;\\n\\n    function boughtAmount() external view returns (uint256);\\n\\n    function withdrawEth() external;\\n\\n    function withdrawHTT() external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n}\"\r\n    },\r\n    \"contracts/HTTERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./interfaces/IHTTERC20.sol\\\";\\nimport \\\"./interfaces/IHTTPrivateSale.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./access/Ownable.sol\\\";\\n\\ncontract HTTERC20 is IHTTERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    string constant _name = \\\"HiTrade Token\\\";\\n    string constant _symbol = \\\"HTT\\\";\\n    uint8 constant _decimals = 18;\\n    uint256 _totalSupply = 1_000_000_000e18;\\n\\n    mapping(address => uint256) public _balances;\\n    mapping(address => mapping(address => uint256)) public _allowances;\\n    mapping(address => uint256) public _nonces;\\n\\n    bytes32 public _DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant _PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    constructor() {\\n        uint256 chainId;\\n        address owner = msg.sender;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        _balances[owner] = uint96(_totalSupply);\\n        emit Transfer(address(0), owner, _totalSupply);\\n        _DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(_name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        require(_balances[from] >= value, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[from] = _balances[from].sub(value);\\n        _totalSupply = _totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        _balances[from] = _balances[from].sub(value);\\n        _balances[to] = _balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function name() public pure virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual override returns (bytes32) {\\n        return _DOMAIN_SEPARATOR;\\n    }\\n\\n    function PERMIT_TYPEHASH() public pure virtual override returns (bytes32) {\\n        return _PERMIT_TYPEHASH;\\n    }\\n\\n    function burn(uint256 amount) external override onlyOwner {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    function approve(address spender, uint256 value)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function balanceOf(address account)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function nonces(address owner) external view override returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external override returns (bool) {\\n        if (_allowances[from][msg.sender] != type(uint256).max) {\\n            _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(\\n                value\\n            );\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(deadline >= block.timestamp, \\\"HTT: EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _DOMAIN_SEPARATOR,\\n                keccak256(\\n                    abi.encode(\\n                        _PERMIT_TYPEHASH,\\n                        owner,\\n                        spender,\\n                        value,\\n                        _nonces[owner]++,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"HTT: INVALID_SIGNATURE\\\"\\n        );\\n        _approve(owner, spender, value);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HTTERC20","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a230f7f137f88a8b92cc61ccfcadf5d2a4bdaf5aac4c7852e16a401d6fa74227"}]}