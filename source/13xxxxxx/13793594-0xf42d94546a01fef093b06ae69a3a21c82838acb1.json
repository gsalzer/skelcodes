{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ThePixelsMetadataURLProviderV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// ______  __  __   ______       _____    __  __   _____    ______\\n// /\\\\__  _\\\\/\\\\ \\\\_\\\\ \\\\ /\\\\  ___\\\\     /\\\\  __-. /\\\\ \\\\/\\\\ \\\\ /\\\\  __-. /\\\\  ___\\\\\\n// \\\\/_/\\\\ \\\\/\\\\ \\\\  __ \\\\\\\\ \\\\  __\\\\     \\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\ \\\\_\\\\ \\\\\\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\  __\\\\\\n//   \\\\ \\\\_\\\\ \\\\ \\\\_\\\\ \\\\_\\\\\\\\ \\\\_____\\\\    \\\\ \\\\____- \\\\ \\\\_____\\\\\\\\ \\\\____- \\\\ \\\\_____\\\\\\n//    \\\\/_/  \\\\/_/\\\\/_/ \\\\/_____/     \\\\/____/  \\\\/_____/ \\\\/____/  \\\\/_____/\\n//\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./IThePixelsMetadataProvider.sol\\\";\\n\\n// [X] Phase 1: Move each generated assets to IPFS.\\n// [_] Phase 2: Store metadata chain with using given DNA.\\n// [_] Phase 3: Store renderer script with using.\\ncontract ThePixelsMetadataURLProviderV2 is IThePixelsMetadataProvider, Ownable {\\n  using Strings for uint256;\\n\\n  struct BaseURL {\\n    string url;\\n    string urlForExtensions;\\n    string description;\\n  }\\n\\n  BaseURL[] public baseURLs;\\n\\n  function addBaseURL(\\n    string memory _url,\\n    string memory _urlForExtensions,\\n    string memory _description\\n  ) external onlyOwner {\\n    baseURLs.push(BaseURL(_url, _urlForExtensions, _description));\\n  }\\n\\n  function getMetadata(\\n    uint256 tokenId,\\n    uint256 dna,\\n    uint256 dnaExtension\\n  ) public view override returns (string memory) {\\n\\n    string memory baseURL;\\n    if (dnaExtension > 0) {\\n      baseURL = getLastBaseURLForExtensions();\\n    }else{\\n      baseURL = getLastBaseURL();\\n    }\\n\\n    string memory url = string(abi.encodePacked(\\n      baseURL,\\n      \\\"/\\\",\\n      dna.toString(),\\n      getExtensionURLParameter(dnaExtension))\\n    );\\n    return url;\\n  }\\n\\n  function getExtensionURLParameter(\\n    uint256 dnaExtension\\n  ) internal pure returns (string memory) {\\n    if (dnaExtension == 0) {\\n      return \\\"\\\";\\n    }else{\\n      return string(abi.encodePacked(\\\"_\\\", dnaExtension.toString()));\\n    }\\n  }\\n\\n  function getLastBaseURL() public view returns (string memory) {\\n    if (baseURLs.length > 0) {\\n      return baseURLs[baseURLs.length - 1].url;\\n    }\\n    return \\\"\\\";\\n  }\\n\\n  function getLastBaseURLForExtensions() public view returns (string memory) {\\n    if (baseURLs.length > 0) {\\n      return baseURLs[baseURLs.length - 1].urlForExtensions;\\n    }\\n    return \\\"\\\";\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IThePixelsMetadataProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// ______  __  __   ______       _____    __  __   _____    ______\\n// /\\\\__  _\\\\/\\\\ \\\\_\\\\ \\\\ /\\\\  ___\\\\     /\\\\  __-. /\\\\ \\\\/\\\\ \\\\ /\\\\  __-. /\\\\  ___\\\\\\n// \\\\/_/\\\\ \\\\/\\\\ \\\\  __ \\\\\\\\ \\\\  __\\\\     \\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\ \\\\_\\\\ \\\\\\\\ \\\\ \\\\/\\\\ \\\\\\\\ \\\\  __\\\\\\n//   \\\\ \\\\_\\\\ \\\\ \\\\_\\\\ \\\\_\\\\\\\\ \\\\_____\\\\    \\\\ \\\\____- \\\\ \\\\_____\\\\\\\\ \\\\____- \\\\ \\\\_____\\\\\\n//    \\\\/_/  \\\\/_/\\\\/_/ \\\\/_____/     \\\\/____/  \\\\/_____/ \\\\/____/  \\\\/_____/\\n//\\n\\npragma solidity ^0.8.0;\\n\\ninterface IThePixelsMetadataProvider {\\n  function getMetadata(\\n    uint256 tokenId,\\n    uint256 dna,\\n    uint256 dnaExtension\\n  ) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_urlForExtensions\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"addBaseURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"baseURLs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"urlForExtensions\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBaseURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBaseURLForExtensions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dna\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dnaExtension\",\"type\":\"uint256\"}],\"name\":\"getMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ThePixelsMetadataURLProviderV2","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}