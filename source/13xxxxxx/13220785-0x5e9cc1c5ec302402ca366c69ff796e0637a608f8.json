{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/Token.sol\": {\r\n      \"content\": \"pragma solidity 0.8.4;\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"./standard/token/ERC20/presets/ERC20PresetFixedSupply.sol\\\";\\nimport \\\"./AccessControlRci.sol\\\";\\nimport \\\"./../interfaces/ICompetition.sol\\\";\\n\\ncontract Token is AccessControlRci, ERC20PresetFixedSupply\\n{\\n    mapping (address => bool) private _authorizedCompetitions;\\n\\n    event CompetitionAuthorized(address indexed competitionAddress);\\n\\n    constructor(string memory name_, string memory symbol_, uint256 initialSupply_)\\n    ERC20PresetFixedSupply(name_, symbol_, initialSupply_, msg.sender)\\n    {\\n        _initializeRciAdmin();\\n    }\\n\\n    function increaseStake(address target, uint256 amountToken)\\n    public\\n    returns (bool success)\\n    {\\n        require(_authorizedCompetitions[target], \\\"Token - increaseStake: This competition is not authorized.\\\");\\n        uint256 senderBal = _balances[msg.sender];\\n        uint256 senderStake = ICompetition(target).getStake(msg.sender);\\n\\n        ICompetition(target).increaseStake(msg.sender, amountToken);\\n        transfer(target, amountToken);\\n\\n        require((senderBal - _balances[msg.sender]) == amountToken, \\\"Token - increaseStake: Sender final balance incorrect.\\\");\\n        require((ICompetition(target).getStake(msg.sender) - senderStake) == amountToken, \\\"Token - increaseStake: Sender final stake incorrect.\\\");\\n\\n        success = true;\\n    }\\n\\n    function decreaseStake(address target, uint256 amountToken)\\n    public\\n    returns (bool success)\\n    {\\n        require(_authorizedCompetitions[target], \\\"Token - decreaseStake: This competition is not authorized.\\\");\\n        uint256 senderBal = _balances[msg.sender];\\n        uint256 senderStake = ICompetition(target).getStake(msg.sender);\\n\\n        ICompetition(target).decreaseStake(msg.sender, amountToken);\\n\\n        require((_balances[msg.sender] - senderBal) == amountToken, \\\"Token - decreaseStake: Sender final balance incorrect.\\\");\\n        require(senderStake - (ICompetition(target).getStake(msg.sender)) == amountToken, \\\"Token - decreaseStake: Sender final stake incorrect.\\\");\\n\\n        success = true;\\n    }\\n\\n    function setStake(address target, uint256 amountToken)\\n    external\\n    returns (bool success)\\n    {\\n        require(_authorizedCompetitions[target], \\\"Token - setStake: This competition is not authorized.\\\");\\n        uint256 currentStake = ICompetition(target).getStake(msg.sender);\\n        require(currentStake != amountToken, \\\"Token - setStake: Your stake is already set to this amount.\\\");\\n        if (amountToken > currentStake){\\n            increaseStake(target, amountToken - currentStake);\\n        } else{\\n            decreaseStake(target, currentStake - amountToken);\\n        }\\n        success = true;\\n    }\\n\\n    function getStake(address target, address staker)\\n    external view\\n    returns (uint256 stake)\\n    {\\n        require(_authorizedCompetitions[target], \\\"Token - getStake: This competition is not authorized.\\\");\\n        stake = ICompetition(target).getStake(staker);\\n    }\\n\\n\\n    function authorizeCompetition(address competitionAddress)\\n    external\\n    onlyAdmin\\n    {\\n        require(competitionAddress != address(0), \\\"Token - authorizeCompetition: Cannot authorize 0 address.\\\");\\n        _authorizedCompetitions[competitionAddress] = true;\\n\\n        emit CompetitionAuthorized(competitionAddress);\\n    }\\n\\n    function competitionIsAuthorized(address competitionAddress)\\n    external view\\n    returns (bool authorized)\\n    {\\n        authorized = _authorizedCompetitions[competitionAddress];\\n    }\\n}\"\r\n    },\r\n    \"./contracts/standard/token/ERC20/presets/ERC20PresetFixedSupply.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extensions/ERC20Burnable.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - Preminted initial supply\\n *  - Ability for holders to burn (destroy) their tokens\\n *  - No access control mechanism (for minting/pausing) and hence no governance\\n *\\n * This contract uses {ERC20Burnable} to include burn capabilities - head to\\n * its documentation for details.\\n *\\n * _Available since v3.4._\\n */\\ncontract ERC20PresetFixedSupply is ERC20Burnable {\\n    /**\\n     * @dev Mints `initialSupply` amount of token and transfers them to `owner`.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint256 initialSupply,\\n        address owner\\n    ) ERC20(name, symbol) {\\n        _mint(owner, initialSupply);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/standard/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/standard/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping (address => uint256) internal _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"./contracts/standard/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"./contracts/standard/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/AccessControlRci.sol\": {\r\n      \"content\": \"pragma solidity 0.8.4;\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport './standard/access/AccessControl.sol';\\n\\nabstract contract AccessControlRci is AccessControl{\\n    bytes32 public constant RCI_MAIN_ADMIN = keccak256('RCI_MAIN_ADMIN');\\n    bytes32 public constant RCI_CHILD_ADMIN = keccak256('RCI_CHILD_ADMIN');\\n\\n    modifier onlyMainAdmin()\\n    {\\n        require(hasRole(RCI_MAIN_ADMIN, msg.sender), \\\"Caller is unauthorized.\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin()\\n    {\\n        require(hasRole(RCI_CHILD_ADMIN, msg.sender), \\\"Caller is unauthorized.\\\");\\n        _;\\n    }\\n\\n    function _initializeRciAdmin()\\n    internal\\n    {\\n        _setupRole(RCI_MAIN_ADMIN, msg.sender);\\n        _setRoleAdmin(RCI_MAIN_ADMIN, RCI_MAIN_ADMIN);\\n\\n        _setupRole(RCI_CHILD_ADMIN, msg.sender);\\n        _setRoleAdmin(RCI_CHILD_ADMIN, RCI_MAIN_ADMIN);\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/standard/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/standard/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"./contracts/standard/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"./interfaces/ICompetition.sol\": {\r\n      \"content\": \"pragma solidity 0.8.4;\\n\\n// SPDX-License-Identifier: MIT\\n\\ninterface ICompetition{\\n\\n\\n    /**\\n    PARTICIPANT WRITE METHODS\\n    **/\\n\\n    /**\\n    * @dev Called by anyone ONLY VIA THE ERC20 TOKEN CONTRACT to increase their stake.\\n    * @param staker The address of the staker that wants to increase their stake.\\n    * @param amountToken The amount to add to their stake.\\n    * @return success True if the operation completed successfully.\\n    **/\\n    function increaseStake(address staker, uint256 amountToken) external returns (bool success);\\n\\n    /**\\n    * @dev Called by anyone ONLY VIA THE ERC20 TOKEN CONTRACT to decrease their stake.\\n    * @param staker The address of the staker that wants to withdraw their stake.\\n    * @param amountToken Number of tokens to withdraw.\\n    * @return success True if the operation completed successfully.\\n    **/\\n    function decreaseStake(address staker, uint256 amountToken) external returns (bool success);\\n\\n    /**\\n    * @dev Called by participant to make a new prediction submission for the current challenge.\\n    * @dev Will be successful if the participant's stake is above the staking threshold.\\n    * @param submissionHash IPFS reference hash of submission. This is the IPFS CID less the 1220 prefix.\\n    * @return challengeNumber Challenge that this submission was made for.\\n    **/\\n    function submitNewPredictions(bytes32 submissionHash) external returns (uint32 challengeNumber);\\n\\n    /**\\n    * @dev Called by participant to modify prediction submission for the current challenge.\\n    * @param oldSubmissionHash IPFS reference hash of previous submission. This is the IPFS CID less the 1220 prefix.\\n    * @param newSubmissionHash IPFS reference hash of new submission. This is the IPFS CID less the 1220 prefix.\\n    * @return challengeNumber Challenge that this submission was made for.\\n    **/\\n    function updateSubmission(bytes32 oldSubmissionHash, bytes32 newSubmissionHash) external returns (uint32 challengeNumber);\\n\\n    /**\\n    ORGANIZER WRITE METHODS\\n    **/\\n\\n    /**\\n    * @dev Called only by authorized admin to update the current broadcast message.\\n    * @param newMessage New broadcast message.\\n    * @return success True if the operation completed successfully.\\n    **/\\n    function updateMessage(string calldata newMessage) external  returns (bool success);\\n\\n    /**\\n    * @dev Called only by authorized admin to update one of the deadlines for this challenge.\\n    * @param challengeNumber Challenge to perform the update for.\\n    * @param index Deadline index to update.\\n    * @param timestamp Deadline timestamp in milliseconds.\\n    * @return success True if the operation completed successfully.\\n    **/\\n    function updateDeadlines(uint32 challengeNumber, uint256 index, uint256 timestamp) external returns (bool success);\\n\\n    /**\\n    * @dev Called only by authorized admin to update the minimum amount required in the competition rewards pool to open a new challenge.\\n    * @param newThreshold New minimum amount for opening new challenge.\\n    * @return success True if the operation completed successfully.\\n    **/\\n    function updateRewardsThreshold(uint256 newThreshold) external returns (bool success);\\n\\n    /**\\n    * @dev Called only by authorized admin to update the minimum stake amount required to take part in the competition.\\n    * @param newStakeThreshold New stake threshold amount in wei.\\n    * @return success True if the operation completed successfully.\\n    **/\\n    function updateStakeThreshold(uint256 newStakeThreshold) external returns (bool success);\\n\\n    /**\\n    * @dev Called only by authorized admin to update the percentage of the competition rewards pool allocated to the challenge rewards budget.\\n    * @param newPercentage New percentage amount in wei.\\n    * @return success True if the operation completed successfully.\\n    **/\\n    function updateChallengeRewardsPercentageInWei(uint256 newPercentage) external returns (bool success);\\n\\n    /**\\n    * @dev Called only by authorized admin to update the percentage of the competition rewards pool allocated to the tournament rewards budget.\\n    * @param newPercentage New percentage amount in wei.\\n    * @return success True if the operation completed successfully.\\n    **/\\n    function updateTournamentRewardsPercentageInWei(uint256 newPercentage) external returns (bool success);\\n\\n    /**\\n    * @dev Called only by authorized admin to update the private key for this challenge. This should be done at the end of the challenge.\\n    * @param challengeNumber Challenge to perform the update for.\\n    * @param newKeyHash IPFS reference cid where private key is stored.\\n    * @return success True if the operation completed successfully.\\n    **/\\n    function updatePrivateKey(uint32 challengeNumber, bytes32 newKeyHash) external returns (bool success);\\n\\n    /**\\n    * @dev Called only by authorized admin to start allowing staking for a new challenge.\\n    * @param datasetHash IPFS reference hash where dataset for this challenge is stored. This is the IPFS CID less the 1220 prefix.\\n    * @param keyHash IPFS reference hash where the key for this challenge is stored. This is the IPFS CID less the 1220 prefix.\\n    * @param submissionCloseDeadline Timestamp of the time where submissions will be closed.\\n    * @param nextChallengeDeadline Timestamp where ths challenge will be closed and the next challenge opened.\\n    * @return success True if the operation completed successfully.\\n    **/\\n    function openChallenge(bytes32 datasetHash, bytes32 keyHash, uint256 submissionCloseDeadline, uint256 nextChallengeDeadline) external returns (bool success);\\n\\n    /**\\n    * @dev Called only by authorized admin to update the IPFS reference for the dataset of a particular challenge.\\n    * @param oldDatasetHash IPFS reference hash where previous dataset for this challenge is stored. This is the IPFS CID less the 1220 prefix.\\n    * @param newDatasetHash IPFS reference hash where new dataset for this challenge is stored. This is the IPFS CID less the 1220 prefix.\\n    * @return success True if the operation completed successfully.\\n    **/\\n    function updateDataset(bytes32 oldDatasetHash, bytes32 newDatasetHash) external returns (bool success);\\n\\n    /**\\n    * @dev Called only by authorized admin to update the IPFS reference for the key of a particular challenge.\\n    * @param oldKeyHash IPFS reference hash where previous key for this challenge is stored. This is the IPFS CID less the 1220 prefix.\\n    * @param newKeyHash IPFS reference hash where new key for this challenge is stored. This is the IPFS CID less the 1220 prefix.\\n    * @return success True if the operation completed successfully.\\n    **/\\n    function updateKey(bytes32 oldKeyHash, bytes32 newKeyHash) external returns (bool success);\\n\\n    /**\\n    * @dev Called only by authorized admin to stop allowing submissions for a particular challenge.\\n    * @return success True if the operation completed successfully.\\n    **/\\n    function closeSubmission() external returns (bool success);\\n\\n    /**\\n    * @dev Called only by authorized admin to submit the IPFS reference for the results of a particular challenge.\\n    * @param resultsHash IPFS reference hash where results for this challenge are stored. This is the IPFS CID less the 1220 prefix.\\n    * @return success True if the operation completed successfully.\\n    **/\\n    function submitResults(bytes32 resultsHash) external returns (bool success);\\n\\n    /**\\n    * @dev Called only by authorized admin to update the IPFS reference for the results of the current challenge.\\n    * @param oldResultsHash IPFS reference hash where previous results for this challenge are stored. This is the IPFS CID less the 1220 prefix.\\n    * @param newResultsHash IPFS reference hash where new results for this challenge are stored. This is the IPFS CID less the 1220 prefix.\\n    * @return success True if the operation completed successfully.\\n    **/\\n    function updateResults(bytes32 oldResultsHash, bytes32 newResultsHash) external returns (bool success);\\n\\n    /**\\n    * @dev Called only by authorized admin to move rewards from the competition pool to the winners' competition internal balances based on results from the current challenge.\\n    * @dev Note that the size of the array parameters passed in to this function is limited by the block gas limit.\\n    * @dev This function allows for the payout to be split into chunks by calling it repeatedly.\\n    * @param submitters List of addresses that made submissions for the challenge.\\n    * @param stakingRewards List of corresponding amount of tokens in wei given to each submitter for the staking rewards portion.\\n    * @param challengeRewards List of corresponding amount of tokens in wei won by each submitter for the challenge rewards portion.\\n    * @param tournamentRewards List of corresponding amount of tokens in wei won by each submitter for the tournament rewards portion.\\n    * @return success True if operation completes successfully.\\n    **/\\n    function payRewards(address[] calldata submitters, uint256[] calldata stakingRewards, uint256[] calldata challengeRewards, uint256[] calldata tournamentRewards) external returns (bool success);\\n\\n    /**\\n    * @dev Provides the same function as above but allows for challenge number to be specified.\\n    * @dev Note that the size of the array parameters passed in to this function is limited by the block gas limit.\\n    * @dev This function allows for the update to be split into chunks by calling it repeatedly.\\n    * @param challengeNumber Challenge to make updates for.\\n    * @param participants List of participants' addresses.\\n    * @param challengeScores List of corresponding challenge scores.\\n    * @param tournamentScores List of corresponding tournament scores.\\n    * @return success True if operation completes successfully.\\n    **/\\n    function updateChallengeAndTournamentScores(uint32 challengeNumber, address[] calldata participants, uint256[] calldata challengeScores, uint256[] calldata tournamentScores) external returns (bool success);\\n\\n    /**\\n    * @dev Called only by authorized admin to do a batch update of an additional information item for a list of participants for a given challenge.\\n    * @param challengeNumber Challenge to update information for.\\n    * @param participants List of participant' addresses.\\n    * @param itemNumber Item to update for.\\n    * @param values List of corresponding values to store.\\n    * @return success True if operation completes successfully.\\n    **/\\n    function updateInformationBatch(uint32 challengeNumber, address[] calldata participants, uint256 itemNumber, uint[] calldata values) external returns (bool success);\\n\\n    /**\\n    * @dev Called only by an authorized admin to advance to the next phase.\\n    * @dev Due to the block gas limit rewards payments may need to be split up into multiple function calls.\\n    * @dev In other words, payStakingRewards and payChallengeAndTournamentRewards may need to be called multiple times to complete all required payments.\\n    * @dev This function is used to advance to phase 3 after staking rewards payments have complemted or to phase 4 after challenge and tournament rewards payments have completed.\\n    * @param phase The phase to advance to.\\n    * @return success True if the operation completed successfully.\\n    **/\\n    function advanceToPhase(uint8 phase) external returns (bool success);\\n\\n    /**\\n    * @dev Called only by an authorized admin, to move any tokens sent to this contract without using the 'sponsor' or 'setStake'/'increaseStake' methods into the competition pool.\\n    * @return success True if the operation completed successfully.\\n    **/\\n    function moveRemainderToPool() external returns (bool success);\\n\\n    /**\\n    READ METHODS\\n    **/\\n\\n    /**\\n    * @dev Called by anyone to check minimum amount required to open a new challenge.\\n    * @return challengeRewardsThreshold Amount of tokens in wei the competition pool must contain to open a new challenge.\\n    **/\\n    function getRewardsThreshold() view external returns (uint256 challengeRewardsThreshold);\\n\\n    /**\\n    * @dev Called by anyone to check amount pooled into this contract.\\n    * @return competitionPool Amount of tokens in the competition pool in wei.\\n    **/\\n    function getCompetitionPool() view external returns (uint256 competitionPool);\\n\\n    /**\\n    * @dev Called by anyone to check the current total amount staked.\\n    * @return currentTotalStaked Amount of tokens currently staked in wei.\\n    **/\\n    function getCurrentTotalStaked() view external returns (uint256 currentTotalStaked);\\n\\n    /**\\n    * @dev Called by anyone to check the staking rewards budget allocation for the current challenge.\\n    * @return currentStakingRewardsBudget Budget for staking rewards in wei.\\n    **/\\n    function getCurrentStakingRewardsBudget() view external returns (uint256 currentStakingRewardsBudget);\\n\\n    /**\\n    * @dev Called by anyone to check the challenge rewards budget for the current challenge.\\n    * @return currentChallengeRewardsBudget Budget for challenge rewards payment in wei.\\n    **/\\n    function getCurrentChallengeRewardsBudget() view external returns (uint256 currentChallengeRewardsBudget);\\n\\n    /**\\n    * @dev Called by anyone to check the tournament rewards budget for the current challenge.\\n    * @return currentTournamentRewardsBudget Budget for tournament rewards payment in wei.\\n    **/\\n    function getCurrentTournamentRewardsBudget() view external returns (uint256 currentTournamentRewardsBudget);\\n\\n    /**\\n    * @dev Called by anyone to check the percentage of the total competition reward pool allocated for the challenge reward for this challenge.\\n    * @return challengeRewardsPercentageInWei Percentage for challenge reward budget in wei.\\n    **/\\n    function getChallengeRewardsPercentageInWei() view external returns (uint256 challengeRewardsPercentageInWei);\\n\\n    /**\\n    * @dev Called by anyone to check the percentage of the total competition reward pool allocated for the tournament reward for this challenge.\\n    * @return tournamentRewardsPercentageInWei Percentage for tournament reward budget in wei.\\n    **/\\n    function getTournamentRewardsPercentageInWei() view external returns (uint256 tournamentRewardsPercentageInWei);\\n\\n    /**\\n    * @dev Called by anyone to get the number of the latest challenge.\\n    * @dev As the challenge number begins from 1, this is also the total number of challenges created in this competition.\\n    * @return latestChallengeNumber Latest challenge created.\\n    **/\\n    function getLatestChallengeNumber() view external returns (uint32 latestChallengeNumber);\\n\\n    /**\\n    * @dev Called by anyone to obtain the dataset hash for this particular challenge.\\n    * @param challengeNumber The challenge to get the dataset hash of.\\n    * @return dataset IPFS hash where the dataset of this particular challenge is stored. This is the IPFS CID less the 1220 prefix.\\n    **/\\n    function getDatasetHash(uint32 challengeNumber) view external returns (bytes32 dataset);\\n\\n    /**\\n    * @dev Called by anyone to obtain the results hash for this particular challenge.\\n    * @param challengeNumber The challenge to get the results hash of.\\n    * @return results IPFS hash where results of this particular challenge are stored. This is the IPFS CID less the 1220 prefix.\\n    **/\\n    function getResultsHash(uint32 challengeNumber) view external returns (bytes32 results);\\n\\n    /**\\n    * @dev Called by anyone to obtain the key hash for this particular challenge.\\n    * @param challengeNumber The challenge to get the key hash of.\\n    * @return key IPFS hash where results of this particular challenge are stored. This is the IPFS CID less the 1220 prefix.\\n    **/\\n    function getKeyHash(uint32 challengeNumber) view external returns (bytes32 key);\\n\\n    /**\\n    * @dev Called by anyone to obtain the private key hash for this particular challenge.\\n    * @param challengeNumber The challenge to get the key hash of.\\n    * @return privateKey IPFS hash where results of this particular challenge are stored. This is the IPFS CID less the 1220 prefix.\\n    **/\\n    function getPrivateKeyHash(uint32 challengeNumber) view external returns (bytes32 privateKey);\\n\\n    /**\\n    * @dev Called by anyone to obtain the number of submissions made for this particular challenge.\\n    * @param challengeNumber The challenge to get the submission counter of.\\n    * @return submissionCounter Number of submissions made.\\n    **/\\n    function getSubmissionCounter(uint32 challengeNumber) view external returns (uint256 submissionCounter);\\n\\n    /**\\n    * @dev Called by anyone to obtain the list of submitters for this particular challenge.\\n    * @dev Submitters refer to participants that have made submissions for this particular challenge.\\n    * @param challengeNumber The challenge to get the submitters list of.\\n    * @param startIndex The challenge to get the submitters list of.\\n    * @param endIndex The challenge to get the submitters list of.\\n    * @return List of submitter addresses.\\n    **/\\n    function getSubmitters(uint32 challengeNumber, uint8 startIndex, uint8 endIndex) view external returns (address[] memory);\\n\\n    /**\\n    * @dev Called by anyone to obtain the phase number for this particular challenge.\\n    * @param challengeNumber The challenge to get the phase of.\\n    * @return phase The phase that this challenge is in.\\n    **/\\n    function getPhase(uint32 challengeNumber) view external returns (uint8 phase);\\n\\n    /**\\n    * @dev Called by anyone to obtain the minimum amount of stake required to participate in the competition.\\n    * @return stakeThreshold Minimum stake amount in wei.\\n    **/\\n    function getStakeThreshold() view external returns (uint256 stakeThreshold);\\n\\n    /**\\n    * @dev Called by anyone to obtain the stake amount in wei of a particular address.\\n    * @param participant Address to query token balance of.\\n    * @return stake Token balance of given address in wei.\\n    **/\\n    function getStake(address participant) view external returns (uint256 stake);\\n\\n    /**\\n    * @dev Called by anyone to obtain the smart contract address of the ERC20 token used in this competition.\\n    * @return tokenAddress ERC20 Token smart contract address.\\n    **/\\n    function getTokenAddress() view external returns (address tokenAddress);\\n\\n    /**\\n    * @dev Called by anyone to get submission hash of a participant for a challenge.\\n    * @param challengeNumber Challenge index to check on.\\n    * @param participant Address of participant to check on.\\n    * @return submissionHash IPFS reference hash of participant's prediction submission for this challenge. This is the IPFS CID less the 1220 prefix.\\n    **/\\n    function getSubmission(uint32 challengeNumber, address participant) view external returns (bytes32 submissionHash);\\n\\n    /**\\n    * @dev Called by anyone to check the stakes locked for this participant in a particular challenge.\\n    * @param challengeNumber Challenge to get the stakes locked of.\\n    * @param participant Address of participant to check on.\\n    * @return staked Amount of tokens locked for this challenge for this participant.\\n    **/\\n    function getStakedAmountForChallenge(uint32 challengeNumber, address participant) view external returns (uint256 staked);\\n\\n    /**\\n    * @dev Called by anyone to check the staking rewards given to this participant in a particular challenge.\\n    * @param challengeNumber Challenge to get the staking rewards given of.\\n    * @param participant Address of participant to check on.\\n    * @return stakingRewards Amount of staking rewards given to this participant for this challenge.\\n    **/\\n    function getStakingRewards(uint32 challengeNumber, address participant) view external returns (uint256 stakingRewards);\\n\\n    /**\\n    * @dev Called by anyone to check the challenge rewards given to this participant in a particular challenge.\\n    * @param challengeNumber Challenge to get the challenge rewards given of.\\n    * @param participant Address of participant to check on.\\n    * @return challengeRewards Amount of challenge rewards given to this participant for this challenge.\\n    **/\\n    function getChallengeRewards(uint32 challengeNumber, address participant) view external returns (uint256 challengeRewards);\\n\\n    /**\\n    * @dev Called by anyone to check the tournament rewards given to this participant in a particular challenge.\\n    * @param challengeNumber Challenge to get the tournament rewards given of.\\n    * @param participant Address of participant to check on.\\n    * @return tournamentRewards Amount of tournament rewards given to this participant for this challenge.\\n    **/\\n    function getTournamentRewards(uint32 challengeNumber, address participant) view external returns (uint256 tournamentRewards);\\n\\n    /**\\n    * @dev Called by anyone to check the overall rewards (staking + challenge + tournament rewards) given to this participant in a particular challenge.\\n    * @param challengeNumber Challenge to get the overall rewards given of.\\n    * @param participant Address of participant to check on.\\n    * @return overallRewards Amount of overall rewards given to this participant for this challenge.\\n    **/\\n    function getOverallRewards(uint32 challengeNumber, address participant) view external returns (uint256 overallRewards);\\n\\n    /**\\n    * @dev Called by anyone to check get the challenge score of this participant for this challenge.\\n    * @param challengeNumber Challenge to get the participant's challenge score of.\\n    * @param participant Address of participant to check on.\\n    * @return challengeScores The challenge score of this participant for this challenge.\\n    **/\\n    function getChallengeScores(uint32 challengeNumber, address participant) view external returns (uint256 challengeScores);\\n\\n    /**\\n    * @dev Called by anyone to check get the tournament score of this participant for this challenge.\\n    * @param challengeNumber Challenge to get the participant's tournament score of..\\n    * @param participant Address of participant to check on.\\n    * @return tournamentScores The tournament score of this participant for this challenge.\\n    **/\\n    function getTournamentScores(uint32 challengeNumber, address participant) view external returns (uint256 tournamentScores);\\n\\n    /**\\n    * @dev Called by anyone to check the additional information for this participant in a particular challenge.\\n    * @param challengeNumber Challenge to get the additional information of.\\n    * @param participant Address of participant to check on.\\n    * @param itemNumber Additional information item to check on.\\n    * @return value Value of this additional information item for this participant for this challenge.\\n    **/\\n    function getInformation(uint32 challengeNumber, address participant, uint256 itemNumber) view external returns (uint value);\\n\\n    /**\\n    * @dev Called by anyone to retrieve one of the deadlines for this challenge.\\n    * @param challengeNumber Challenge to get the deadline of.\\n    * @param index Index of the deadline to retrieve.\\n    * @return deadline Deadline in milliseconds.\\n    **/\\n    function getDeadlines(uint32 challengeNumber, uint256 index)\\n    external view returns (uint256 deadline);\\n\\n    /**\\n    * @dev Called by anyone to check the amount of tokens that have been sent to this contract but are not recorded as a stake or as part of the competition rewards pool.\\n    * @return remainder The amount of tokens held by this contract that are not recorded as a stake or as part of the competition rewards pool.\\n    **/\\n    function getRemainder() external view returns (uint256 remainder);\\n\\n    /**\\n    * @dev Called by anyone to get the current broadcast message.\\n    * @return message Current message being broadcasted.\\n    **/\\n    function getMessage() external returns (string memory message);\\n\\n    /**\\n    METHODS CALLABLE BY BOTH ADMIN AND PARTICIPANTS.\\n    **/\\n\\n    /**\\n    * @dev Called by a sponsor to send tokens to the contract's competition pool. This pool is used for payouts to challenge winners.\\n    * @dev This performs an ERC20 transfer so the msg sender will need to grant approval to this contract before calling this function.\\n    * @param amountToken The amount to send to the the competition pool.\\n    * @return success True if the operation completed successfully.\\n    **/\\n    function sponsor(uint256 amountToken) external returns (bool success);\\n\\n    /**\\n    EVENTS\\n    **/\\n\\n    event StakeIncreased(address indexed sender, uint256 indexed amount);\\n\\n    event StakeDecreased(address indexed sender, uint256 indexed amount);\\n\\n    event SubmissionUpdated(uint32 indexed challengeNumber, address indexed participantAddress, bytes32 indexed newSubmissionHash);\\n\\n    event MessageUpdated();\\n\\n    event RewardsThresholdUpdated(uint256 indexed newRewardsThreshold);\\n\\n    event StakeThresholdUpdated(uint256 indexed newStakeThreshold);\\n\\n    event ChallengeRewardsPercentageInWeiUpdated(uint256 indexed newPercentage);\\n\\n    event TournamentRewardsPercentageInWeiUpdated(uint256 indexed newPercentage);\\n\\n    event PrivateKeyUpdated(bytes32 indexed newPrivateKeyHash);\\n\\n    event ChallengeOpened(uint32 indexed challengeNumber);\\n\\n    event DatasetUpdated(uint32 indexed challengeNumber, bytes32 indexed oldDatasetHash, bytes32 indexed newDatasetHash);\\n\\n    event KeyUpdated(uint32 indexed challengeNumber, bytes32 indexed oldKeyHash, bytes32 indexed newKeyHash);\\n\\n    event SubmissionClosed(uint32 indexed challengeNumber);\\n\\n    event ResultsUpdated(uint32 indexed challengeNumber, bytes32 indexed oldResultsHash, bytes32 indexed newResultsHash);\\n\\n    event RewardsPayment(uint32 challengeNumber, address indexed submitter, uint256 stakingReward, uint256 indexed challengeReward, uint256 indexed tournamentReward);\\n\\n    event TotalRewardsPaid(uint32 challengeNumber, uint256 indexed totalStakingAmount, uint256 indexed totalChallengeAmount, uint256 indexed totalTournamentAmount);\\n\\n    event ChallengeAndTournamentScoresUpdated(uint32 indexed challengeNumber);\\n\\n    event BatchInformationUpdated(uint32 indexed challengeNumber, uint256 indexed itemNumber);\\n\\n    event RemainderMovedToPool(uint256 indexed remainder);\\n\\n    event Sponsor(address indexed sponsorAddress, uint256 indexed sponsorAmount, uint256 indexed poolTotal);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"competitionAddress\",\"type\":\"address\"}],\"name\":\"CompetitionAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RCI_CHILD_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RCI_MAIN_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"competitionAddress\",\"type\":\"address\"}],\"name\":\"authorizeCompetition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"competitionAddress\",\"type\":\"address\"}],\"name\":\"competitionIsAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"decreaseStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"increaseStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"setStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Token","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000052b7d2dcc80cd2e400000000000000000000000000000000000000000000000000000000000000000000044d5553410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d55534100000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a278ee97bca9a3af45653ea4b9a49c724cdfa4de2d5839961db96434dadc2412"}]}