{"status":"1","message":"OK","result":[{"SourceCode":"// ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\r\n// ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\r\n// ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\r\n// ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\r\n// ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\r\n// ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\r\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface IAnteTest {\r\n    // override the auto-generated getter for testAuthor as a public var\r\n    function testAuthor() external view returns (address);\r\n\r\n    // override the auto-generated getter for protocolName as a public var\r\n    function protocolName() external view returns (string memory);\r\n\r\n    // override the auto-generated getter for testedContracts [] as a public var\r\n    function testedContracts(uint i) external view returns (address);\r\n\r\n    // override the auto-generated getter for testName as a public var\r\n    function testName() external view returns (string memory);\r\n\r\n    // single bool function that inspects the invariant; usually True\r\n    function checkTestPasses() external returns (bool);\r\n}\r\n\r\n\r\n\r\n// Abstract inheritable contract to supply syntactic sugar for Ante Test writing\r\n// Usage: contract AnteNewProtocolTest is AnteTest(\"String descriptor of test\", \"Protocol name\") { ... }\r\nabstract contract AnteTest is IAnteTest() {\r\n    address public override testAuthor;\r\n    string public override testName;\r\n    string public override protocolName;\r\n    address [] public override testedContracts;\r\n\r\n    // testedContracts and protocolName are optional parameters which should be set in the constructor of your AnteTest\r\n    constructor (string memory _testName) {\r\n        testAuthor = msg.sender;\r\n        testName = _testName;\r\n    }\r\n\r\n    function getTestedContracts() external view returns (address[] memory) {\r\n        return testedContracts;\r\n    }\r\n\r\n    function checkTestPasses() public override virtual returns (bool) {}\r\n}\r\n\r\n\r\n\r\n\r\ncontract AnteTornadoAmountTest is\r\n    AnteTest(\r\n        \"Tornado ETH pools don't fall below 1% of their supply at the time of deployment\"\r\n    )\r\n{\r\n    address public constant torn100Addr =\r\n        0xA160cdAB225685dA1d56aa342Ad8841c3b53f291;\r\n    address public constant torn10Addr =\r\n        0x910Cbd523D972eb0a6f4cAe4618aD62622b39DbF;\r\n    address public constant torn1Addr =\r\n        0x47CE0C6eD5B0Ce3d3A51fdb1C52DC66a7c3c2936;\r\n    address public constant torn01Addr =\r\n        0x12D66f87A04A9E220743712cE6d9bB1B5616B8Fc;\r\n\r\n    uint256 immutable torn100BalanceAtDeploy;\r\n    uint256 immutable torn10BalanceAtDeploy;\r\n    uint256 immutable torn1BalanceAtDeploy;\r\n    uint256 immutable torn01BalanceAtDeploy;\r\n\r\n    constructor() {\r\n        protocolName = \"Tornado Cash\";\r\n        testedContracts = [torn100Addr, torn10Addr, torn1Addr, torn01Addr];\r\n        torn100BalanceAtDeploy = torn100Addr.balance;\r\n        torn10BalanceAtDeploy = torn10Addr.balance;\r\n        torn1BalanceAtDeploy = torn1Addr.balance;\r\n        torn01BalanceAtDeploy = torn01Addr.balance;\r\n    }\r\n\r\n    function checkTestPasses() public view override returns (bool) {\r\n        return ((torn100BalanceAtDeploy / 100) < torn100Addr.balance &&\r\n            (torn10BalanceAtDeploy / 100) < torn10Addr.balance &&\r\n            (torn1BalanceAtDeploy / 100) < torn1Addr.balance &&\r\n            (torn01BalanceAtDeploy / 100) < torn01Addr.balance);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"checkTestPasses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTestedContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testAuthor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"testedContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"torn01Addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"torn100Addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"torn10Addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"torn1Addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AnteTornadoAmountTest","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0076cd9da29eebc84f930e2f5003884467d93e91510fba305fcbe855eb75558d"}]}