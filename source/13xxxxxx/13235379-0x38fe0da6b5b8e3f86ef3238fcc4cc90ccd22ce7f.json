{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract owned {\r\n    address public owner;\r\n    address public auditor;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        auditor = 0x241A280362b4ED2CE8627314FeFa75247fDC286B;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner || msg.sender == auditor);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n// library from openzeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol)\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n// library from openzeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol)\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    \r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            \r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract cashierV1 is owned {\r\n    using SafeERC20 for IERC20;\r\n    string public name;\r\n    bool public online = true;\r\n    address public bucks;\r\n    address public blcks;\r\n    uint256 public period;\r\n    address public mainWallet = msg.sender;\r\n    uint256 public APY = 14;\r\n\r\n    struct deposits{\r\n        uint256 amount;\r\n        bool payed;\r\n        uint256 date;\r\n    }\r\n\r\n    mapping (address => deposits[]) public investments;\r\n\r\n    event SwapToUSDT(address indexed beneficiary, uint256 value);\r\n    \r\n    event SwapToBLACKT(address indexed beneficiary, uint256 value);\r\n \r\n    event IsOnline(bool status);\r\n\r\n    \r\n    constructor(\r\n        string memory Name,\r\n        address initialBucks,\r\n        address initialBlcks,\r\n        uint256 initialPeriod\r\n    ) {           \r\n        name = Name;                                   \r\n        bucks = initialBucks;\r\n        blcks = initialBlcks;\r\n        period = initialPeriod;\r\n    }\r\n\r\n    \r\n    function USDtoBLACKT( uint256 value) public returns (bool success) {\r\n        BLACKT b0 = BLACKT(blcks);\r\n        IERC20 b1 = IERC20(bucks);\r\n        require(online);\r\n        b1.safeTransferFrom(msg.sender,mainWallet,value);\r\n        b0.transferFrom(mainWallet,msg.sender,value);\r\n        emit SwapToBLACKT(msg.sender,value);\r\n        return true;\r\n    }\r\n\r\n    function BLACKTtoUSD(uint256 value) public returns (bool success) {\r\n        BLACKT b0 = BLACKT(blcks);\r\n        IERC20 b1 = IERC20(bucks);\r\n        require(online);\r\n        b0.transferFrom(msg.sender,mainWallet,value);\r\n        b1.safeTransferFrom(mainWallet,msg.sender,value);\r\n        emit SwapToUSDT(msg.sender,value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function AutoInvestUSD(uint256 investment) public returns (bool success) {\r\n        BLACKT b0 = BLACKT(blcks);\r\n        IERC20 b1 = IERC20(bucks);\r\n        require(online);\r\n        b1.safeTransferFrom(msg.sender,mainWallet,investment);\r\n        b0.lockLiquidity(msg.sender, investment);   \r\n        investments[msg.sender].push(deposits(investment,false,block.timestamp));\r\n        return true;\r\n    }\r\n\r\n    function AutoUnlock() public returns (bool success) {\r\n        require(online);\r\n        BLACKT b = BLACKT(blcks);\r\n        for (uint256 j=0; j < investments[msg.sender].length; j++){\r\n            if (block.timestamp-investments[msg.sender][j].date>period && !investments[msg.sender][j].payed) {\r\n                if (b.unlockLiquidity(msg.sender, investments[msg.sender][j].amount)) {\r\n                    b.transferFrom(mainWallet,msg.sender,investments[msg.sender][j].amount*APY/100);\r\n                    investments[msg.sender][j].payed = true;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function zChangeAPY(uint256 newAPY) onlyOwner public returns (bool success) {\r\n        APY = newAPY;\r\n        return true;\r\n    }\r\n\r\n    function zChangePeriod(uint256 newPeriod) onlyOwner public returns (bool success) {\r\n        period = newPeriod;\r\n        return true;\r\n    }\r\n\r\n    function zChangeBucks(address newBucks) onlyOwner public returns (bool success) {\r\n        bucks = newBucks;\r\n        return true;\r\n    }\r\n\r\n    function zChangeBlcks(address newBlcks) onlyOwner public returns (bool success) {\r\n        blcks = newBlcks;\r\n        return true;\r\n    }\r\n\r\n    function zChangeOnlineState(bool state) onlyOwner public returns (bool success) {\r\n        online = state;\r\n        return true;\r\n    }\r\n\r\n    function zChangeMainWallet(address newWallet) onlyOwner public returns (bool success) {\r\n        mainWallet = newWallet;\r\n        return true;\r\n    }\r\n}\r\n\r\ninterface BLACKT {\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function lockLiquidity(address _beneficiary, uint256 _value) external returns (bool);\r\n    function unlockLiquidity(address _beneficiary, uint _value) external returns (bool);\r\n}\r\n\r\ninterface IERC20 {\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"initialBucks\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialBlcks\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"IsOnline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SwapToBLACKT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SwapToUSDT\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"}],\"name\":\"AutoInvestUSD\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AutoUnlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BLACKTtoUSD\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"USDtoBLACKT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auditor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blcks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bucks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"payed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"online\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAPY\",\"type\":\"uint256\"}],\"name\":\"zChangeAPY\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBlcks\",\"type\":\"address\"}],\"name\":\"zChangeBlcks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBucks\",\"type\":\"address\"}],\"name\":\"zChangeBucks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"zChangeMainWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"zChangeOnlineState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"zChangePeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"cashierV1","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000182811002fa5bebbbf01dd3179aef7ab29cbb6c80000000000000000000000000000000000000000000000000000000001e1338000000000000000000000000000000000000000000000000000000000000000096361736869657256310000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://533f7d5fd466c78d568d80c5e638c63d54468c7bbdf103d6f50e990399d24153"}]}