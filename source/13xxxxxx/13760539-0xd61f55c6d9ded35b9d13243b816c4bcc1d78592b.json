{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/resolver/aave/main.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./helpers.sol\\\";\\nimport {\\n    AaveLendingPoolProviderInterface,\\n    AaveDataProviderInterface,\\n    AaveOracleInterface,\\n    IndexInterface\\n} from \\\"./interfaces.sol\\\";\\n\\ncontract InteropAaveResolver is Helpers {\\n    function checkAavePosition(\\n        address userAddress,\\n        Position memory position,\\n        uint256 safeRatioPercentage,\\n        bool isTarget\\n    ) public view returns(PositionData memory p) {\\n        (\\n            p.isOk,\\n            p.ltv,\\n            p.currentLiquidationThreshold\\n        ) = isPositionSafe(userAddress, safeRatioPercentage);\\n        p.isOk = isTarget ? true : p.isOk;\\n        if (!p.isOk) return p;\\n\\n        p = _checkRatio(userAddress, position, safeRatioPercentage, isTarget);\\n        if (!p.isOk) return p;\\n    }\\n\\n    function checkLiquidity(\\n        address liquidityAddress,\\n        address[] memory tokens,\\n        uint256 totalSupply,\\n        uint256 totalBorrow,\\n        uint256 safeLiquidityRatioPercentage,\\n        bool isTarget\\n    )\\n    public view returns(PositionData memory p) {\\n         (\\n            p.isOk,\\n            p.ltv,\\n            p.currentLiquidationThreshold\\n        ) = isPositionSafe(liquidityAddress, safeLiquidityRatioPercentage);\\n        if (!p.isOk) return p;\\n\\n        p = _checkLiquidityRatio(\\n            liquidityAddress,\\n            tokens,\\n            safeLiquidityRatioPercentage,\\n            isTarget ? totalSupply :  totalBorrow\\n        );\\n        if (!p.isOk) return p;\\n    }\\n\\n    constructor (\\n        address _aaveLendingPoolAddressesProvider,\\n        address _aaveProtocolDataProvider,\\n        address _instaIndex,\\n        address _wnativeToken\\n    ) Helpers (\\n        _aaveLendingPoolAddressesProvider,\\n        _aaveProtocolDataProvider,\\n        _instaIndex,\\n        _wnativeToken\\n    ){}\\n}\"\r\n    },\r\n    \"contracts/resolver/aave/helpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.6;\\npragma experimental ABIEncoderV2;\\n\\nimport { DSMath } from \\\"./math.sol\\\";\\nimport { Variables } from \\\"./variables.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { \\n    AaveLendingPoolProviderInterface,\\n    AaveDataProviderInterface,\\n    AaveInterface,\\n    ATokenInterface,\\n    AavePriceOracle,\\n    ChainLinkInterface\\n} from \\\"./interfaces.sol\\\";\\n\\nabstract contract Helpers is DSMath, Variables {\\n    using SafeERC20 for IERC20;\\n\\n    constructor (\\n        address _aaveLendingPoolAddressesProvider,\\n        address _aaveProtocolDataProvider,\\n        address _instaIndex,\\n        address _wnativeToken\\n    ) Variables (\\n        _aaveLendingPoolAddressesProvider,\\n        _aaveProtocolDataProvider,\\n        _instaIndex,\\n        _wnativeToken\\n    ){}\\n    function convertTo18(uint amount, uint decimal) internal pure returns (uint) {\\n        return amount * (10 ** (18 - decimal));\\n    }\\n\\n    function convertNativeToWNative(address[] memory tokens) internal view returns (address[] memory) {\\n        address[] memory _tokens = new address[](tokens.length);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address token = tokens[i];\\n            token = token == nativeToken ? wnativeToken : token;\\n            _tokens[i] = token;\\n        }\\n        return _tokens;\\n    }\\n\\n    function getTokensPrices(address[] memory tokens) public view returns(uint[] memory tokenPricesInEth) {\\n        tokenPricesInEth = AavePriceOracle(aaveLendingPoolAddressesProvider.getPriceOracle()).getAssetsPrices(convertNativeToWNative(tokens));\\n    }\\n\\n    struct ReserveConfigData {\\n        uint256 decimals; // token decimals\\n        uint256 ltv; // loan to value\\n        uint256 tl; // liquidationThreshold\\n        bool enabledAsCollateral;\\n        bool borrowingEnabled;\\n        bool isActive;\\n        bool isFrozen;\\n        uint256 availableLiquidity;\\n        uint256 totalOverallDebt;\\n    }\\n\\n    function getTokenInfos(address[] memory _tokens) public view returns (ReserveConfigData[] memory reserveConfigData) {\\n        address[] memory tokens = convertNativeToWNative(_tokens);\\n        reserveConfigData = new ReserveConfigData[](tokens.length);\\n        for (uint i = 0; i < tokens.length; i++) {\\n            (\\n                reserveConfigData[i].decimals,\\n                reserveConfigData[i].ltv,\\n                reserveConfigData[i].tl,\\n                ,\\n                ,\\n                reserveConfigData[i].enabledAsCollateral,\\n                reserveConfigData[i].borrowingEnabled,\\n                ,\\n                reserveConfigData[i].isActive,\\n                reserveConfigData[i].isFrozen\\n            ) = aaveProtocolDataProvider.getReserveConfigurationData(tokens[i]);\\n\\n            uint256 totalStableDebt;\\n            uint256 totalVariableDebt;\\n\\n            (\\n                reserveConfigData[i].availableLiquidity,\\n                totalStableDebt,\\n                totalVariableDebt,\\n                ,\\n                ,\\n                ,\\n                ,\\n                ,\\n                ,\\n            ) = aaveProtocolDataProvider.getReserveData(tokens[i]);\\n\\n            reserveConfigData[i].totalOverallDebt = add(totalStableDebt, totalVariableDebt);\\n        }\\n    }\\n\\n    function sortData(Position memory position, bool isTarget) public view returns (AaveData memory aaveData) {\\n        uint256 supplyLen = position.supply.length;\\n        uint256 borrowLen = position.withdraw.length;\\n        aaveData.supplyAmts = new uint256[](supplyLen);\\n        aaveData.borrowAmts = new uint256[](borrowLen);\\n        aaveData.supplyTokens = new address[](supplyLen);\\n        aaveData.borrowTokens = new address[](borrowLen);\\n\\n        for (uint256 i = 0; i < supplyLen; i++) {\\n            uint256 amount = position.supply[i].amount;\\n            address token = !isTarget ? position.supply[i].sourceToken : position.supply[i].targetToken;\\n            token = token == nativeToken ? wnativeToken : token;\\n            aaveData.supplyTokens[i] = token;\\n            aaveData.supplyAmts[i] = amount;\\n        }\\n\\n        for (uint256 i = 0; i < borrowLen; i++) {\\n            uint256 amount = position.withdraw[i].amount;\\n            address token = !isTarget ? position.withdraw[i].sourceToken : position.withdraw[i].targetToken;\\n            token = token == nativeToken ? wnativeToken : token;\\n            aaveData.borrowTokens[i] = token;\\n            aaveData.borrowAmts[i] = amount;\\n        }\\n    }\\n\\n    function checkSupplyToken(\\n        address userAddress,\\n        AaveData memory data,\\n        bool isTarget\\n    ) public view returns (\\n        uint256 totalSupply,\\n        uint256 totalMaxBorrow,\\n        uint256 totalMaxLiquidation,\\n        bool isOk\\n    ) {\\n        \\n        uint256[] memory supplyTokenPrices = getTokensPrices(data.supplyTokens);\\n        ReserveConfigData[] memory supplyReserveConfigData = getTokenInfos(data.supplyTokens);\\n        isOk = true;\\n        for (uint256 i = 0; i < data.supplyTokens.length; i++) {\\n            address supplyToken = \\n                data.supplyTokens[i] == nativeToken ?\\n                    wnativeToken :\\n                    data.supplyTokens[i];\\n\\n            if (!isTarget) {\\n                (\\n                    uint256 supply,\\n                    ,\\n                    ,\\n                    ,,,,,\\n                ) = aaveProtocolDataProvider.getUserReserveData(supplyToken, userAddress);\\n\\n                if (supply < data.supplyAmts[i]) {\\n                    isOk = false;\\n                }\\n            }\\n\\n            uint256 _amt = wmul(\\n                convertTo18(data.supplyAmts[i], supplyReserveConfigData[i].decimals),\\n                supplyTokenPrices[i]\\n            );\\n\\n            totalSupply += _amt;\\n            totalMaxLiquidation += (_amt * supplyReserveConfigData[i].tl) / 10000; // convert the number 8000 to 0.8\\n            totalMaxBorrow += (_amt * supplyReserveConfigData[i].ltv) / 10000; // convert the number 8000 to 0.8\\n        }\\n    }\\n\\n    function checkLiquidityToken(\\n        address user,\\n        address[] memory tokens\\n    ) public view returns (\\n        uint256 totalSupply,\\n        uint256 totalBorrow,\\n        uint256 totalMaxBorrow,\\n        uint256 totalMaxLiquidation\\n    ) {\\n        uint256[] memory tokensPrices = getTokensPrices(tokens);\\n        ReserveConfigData[] memory reserveConfigData = getTokenInfos(tokens);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address token = tokens[i] == nativeToken ? wnativeToken : tokens[i];\\n             (\\n                uint256 supply,\\n                uint stableDebt,\\n                uint variableDebt,\\n                ,,,,,\\n            ) = aaveProtocolDataProvider.getUserReserveData(token, user);\\n\\n            uint256 supplyAmtInUnderlying = wmul(\\n                convertTo18(supply, reserveConfigData[i].decimals),\\n                tokensPrices[i]\\n            );\\n\\n            uint256 borrowAmtInUnderlying = wmul(\\n                convertTo18(\\n                    // add(stableDebt, variableDebt), // checking only variable borrowing balance\\n                    variableDebt,\\n                    reserveConfigData[i].decimals\\n                ),\\n                tokensPrices[i]\\n            );\\n\\n            totalSupply += supplyAmtInUnderlying;\\n            totalBorrow += borrowAmtInUnderlying;\\n            totalMaxLiquidation += (supplyAmtInUnderlying * reserveConfigData[i].tl) / 10000; // convert the number 8000 to 0.8\\n            totalMaxBorrow += (supplyAmtInUnderlying * reserveConfigData[i].ltv) / 10000; // convert the number 8000 to 0.8\\n        }\\n    }\\n\\n\\n    function checkBorrowToken(\\n        address userAddress,\\n        AaveData memory data,\\n        bool isTarget\\n    ) public view returns (\\n        uint256 totalBorrow,\\n        bool isOk\\n    ) {\\n        \\n        uint256[] memory borrowTokenPrices = getTokensPrices(data.borrowTokens);\\n        ReserveConfigData[] memory borrowReserveConfigData = getTokenInfos(data.borrowTokens);\\n        isOk = true;\\n        for (uint256 i = 0; i < data.borrowTokens.length; i++) {\\n            address borrowToken = \\n                data.borrowTokens[i] == nativeToken ?\\n                    wnativeToken :\\n                    data.borrowTokens[i];\\n\\n            if (!isTarget) {\\n                (\\n                    ,\\n                    uint stableDebt,\\n                    uint variableDebt,\\n                    ,,,,,\\n                ) = aaveProtocolDataProvider.getUserReserveData(borrowToken, userAddress);\\n\\n                // uint256 borrow = stableDebt + variableDebt;  // checking only variable borrowing balance\\n                uint256 borrow = variableDebt;\\n\\n                if (borrow < data.borrowAmts[i]) {\\n                    isOk = false;\\n                }\\n            }\\n\\n            uint256 _amt = wmul(\\n                convertTo18(data.borrowAmts[i], borrowReserveConfigData[i].decimals),\\n                borrowTokenPrices[i]\\n            );\\n            totalBorrow += _amt;\\n        }\\n    }\\n\\n    struct PositionData {\\n        bool isOk;\\n        uint256 ratio;\\n        uint256 maxRatio;\\n        uint256 maxLiquidationRatio;\\n        uint256 ltv; // loan to value\\n        uint256 currentLiquidationThreshold; // liquidationThreshold\\n        uint256 totalSupply;\\n        uint256 totalBorrow;\\n        uint256 price;\\n    }\\n\\n    /*\\n     * Checks the position to migrate should have a safe gap from liquidation \\n    */\\n    function _checkRatio(\\n        address userAddress,\\n        Position memory position,\\n        uint256 safeRatioPercentage, \\n        bool isTarget\\n    ) public view returns (\\n        PositionData memory positionData\\n    ) {\\n        AaveData memory data = sortData(position, isTarget);\\n        bool isSupplyOk;\\n        bool isBorrowOk;\\n        uint256 totalMaxBorrow;\\n        uint256 totalMaxLiquidation;\\n\\n        (positionData.totalSupply, totalMaxBorrow, totalMaxLiquidation, isSupplyOk) = \\n            checkSupplyToken(userAddress, data, isTarget);\\n        (positionData.totalBorrow, isBorrowOk) =\\n            checkBorrowToken(userAddress, data, isTarget);\\n\\n        if (positionData.totalSupply > 0) {\\n            positionData.maxRatio = (totalMaxBorrow * 10000) / positionData.totalSupply;\\n            positionData.maxLiquidationRatio = (totalMaxLiquidation * 10000) / positionData.totalSupply;\\n            positionData.ratio = (positionData.totalBorrow * 10000) / positionData.totalSupply;\\n        }\\n\\n        if (!isSupplyOk || !isBorrowOk) {\\n            positionData.isOk = false;\\n            return (positionData);\\n        }\\n\\n        // require(positionData.totalBorrow < sub(liquidation, _dif), \\\"position-is-risky-to-migrate\\\");\\n        uint256 _dif = wmul(totalMaxLiquidation, sub(1e18, safeRatioPercentage));\\n        positionData.isOk = positionData.totalBorrow < sub(totalMaxLiquidation, _dif);\\n    }\\n\\n    /*\\n     * Checks the position to migrate should have a safe gap from liquidation \\n    */\\n    function _checkLiquidityRatio(\\n        address liquidity,\\n        address[] memory tokens,\\n        uint256 safeRatioPercentage,\\n        uint256 userTotalBorrow\\n    ) public view returns (\\n        PositionData memory positionData\\n    ) {\\n        uint256 totalMaxBorrow;\\n        uint256 totalMaxLiquidation;\\n\\n        (\\n            positionData.totalSupply,\\n            positionData.totalBorrow,\\n            totalMaxBorrow,\\n            totalMaxLiquidation\\n        ) = checkLiquidityToken(liquidity, tokens);\\n        positionData.totalBorrow = add(positionData.totalBorrow, userTotalBorrow);\\n\\n        if (positionData.totalSupply > 0) {\\n            positionData.maxRatio = (totalMaxBorrow * 10000) / positionData.totalSupply;\\n            positionData.maxLiquidationRatio = (totalMaxLiquidation * 10000) / positionData.totalSupply;\\n            positionData.ratio = (positionData.totalBorrow * 10000) / positionData.totalSupply;\\n        }\\n\\n        uint256 _dif = wmul(positionData.totalSupply, sub(1e18, safeRatioPercentage));\\n        positionData.isOk = positionData.totalBorrow < sub(totalMaxLiquidation, _dif);\\n    }\\n\\n    function isPositionSafe(\\n        address user,\\n        uint256 safeRatioPercentage\\n    ) public view returns (\\n        bool isOk,\\n        uint256 userTl,\\n        uint256 userLtv\\n    ) {\\n        AaveInterface aave = AaveInterface(aaveLendingPoolAddressesProvider.getLendingPool());\\n        uint healthFactor;\\n        (,,, userTl, userLtv, healthFactor) = aave.getUserAccountData(user);\\n        uint minLimit = wdiv(1e18, safeRatioPercentage);\\n        isOk = healthFactor > minLimit;\\n    }\\n}\"\r\n    },\r\n    \"contracts/resolver/aave/interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface AaveInterface {\\n    function deposit(address _asset, uint256 _amount, address _onBehalfOf, uint16 _referralCode) external;\\n    function withdraw(address _asset, uint256 _amount, address _to) external;\\n    function borrow(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _interestRateMode,\\n        uint16 _referralCode,\\n        address _onBehalfOf\\n    ) external;\\n    function repay(address _asset, uint256 _amount, uint256 _rateMode, address _onBehalfOf) external;\\n    function setUserUseReserveAsCollateral(address _asset, bool _useAsCollateral) external;\\n    function getUserAccountData(address user) external view returns (\\n        uint256 totalCollateralETH,\\n        uint256 totalDebtETH,\\n        uint256 availableBorrowsETH,\\n        uint256 currentLiquidationThreshold,\\n        uint256 ltv,\\n        uint256 healthFactor\\n    );\\n}\\n\\ninterface AaveLendingPoolProviderInterface {\\n    function getLendingPool() external view returns (address);\\n    function getPriceOracle() external view returns (address);\\n}\\n\\n// Aave Protocol Data Provider\\ninterface AaveDataProviderInterface {\\n    function getReserveTokensAddresses(address _asset) external view returns (\\n        address aTokenAddress,\\n        address stableDebtTokenAddress,\\n        address variableDebtTokenAddress\\n    );\\n    function getUserReserveData(address _asset, address _user) external view returns (\\n        uint256 currentATokenBalance,\\n        uint256 currentStableDebt,\\n        uint256 currentVariableDebt,\\n        uint256 principalStableDebt,\\n        uint256 scaledVariableDebt,\\n        uint256 stableBorrowRate,\\n        uint256 liquidityRate,\\n        uint40 stableRateLastUpdated,\\n        bool usageAsCollateralEnabled\\n    );\\n    function getReserveConfigurationData(address asset) external view returns (\\n        uint256 decimals,\\n        uint256 ltv,\\n        uint256 liquidationThreshold,\\n        uint256 liquidationBonus,\\n        uint256 reserveFactor,\\n        bool usageAsCollateralEnabled,\\n        bool borrowingEnabled,\\n        bool stableBorrowRateEnabled,\\n        bool isActive,\\n        bool isFrozen\\n    );\\n    function getReserveData(address asset) external view returns (uint256 availableLiquidity, uint256 totalStableDebt, uint256 totalVariableDebt, uint256 liquidityRate, uint256 variableBorrowRate, uint256 stableBorrowRate, uint256 averageStableBorrowRate, uint256 liquidityIndex, uint256 variableBorrowIndex, uint40 lastUpdateTimestamp);\\n}\\n\\ninterface AaveAddressProviderRegistryInterface {\\n    function getAddressesProvidersList() external view returns (address[] memory);\\n}\\n\\ninterface ATokenInterface {\\n    function scaledBalanceOf(address _user) external view returns (uint256);\\n    function isTransferAllowed(address _user, uint256 _amount) external view returns (bool);\\n    function balanceOf(address _user) external view returns(uint256);\\n    function transferFrom(address, address, uint) external returns (bool);\\n    function approve(address, uint256) external;\\n}\\n\\ninterface AaveOracleInterface {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n    function getAssetsPrices(address[] calldata _assets) external view returns(uint256[] memory);\\n    function getSourceOfAsset(address _asset) external view returns(address);\\n    function getFallbackOracle() external view returns(address);\\n}\\n\\ninterface IndexInterface {\\n    function master() external view returns (address);\\n}\\n\\ninterface FlashloanInterface {\\n    function initiateFlashLoan(bytes memory data, uint ethAmt) external;\\n}\\n\\ninterface AavePriceOracle {\\n    function getAssetPrice(address _asset) external view returns(uint256);\\n    function getAssetsPrices(address[] calldata _assets) external view returns(uint256[] memory);\\n    function getSourceOfAsset(address _asset) external view returns(uint256);\\n    function getFallbackOracle() external view returns(uint256);\\n}\\n\\ninterface ChainLinkInterface {\\n    function latestAnswer() external view returns (int256);\\n    function decimals() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/resolver/aave/math.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.6;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n  uint constant WAD = 10 ** 18;\\n  uint constant RAY = 10 ** 27;\\n\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(x, y);\\n  }\\n\\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\\n    z = SafeMath.sub(x, y);\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.mul(x, y);\\n  }\\n\\n  function div(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.div(x, y);\\n  }\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n  }\\n\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n  }\\n\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  function toInt(uint x) internal pure returns (int y) {\\n    y = int(x);\\n    require(y >= 0, \\\"int-overflow\\\");\\n  }\\n\\n  function toRad(uint wad) internal pure returns (uint rad) {\\n    rad = mul(wad, 10 ** 27);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/resolver/aave/variables.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.6;\\n\\nimport {\\n    AaveLendingPoolProviderInterface,\\n    AaveDataProviderInterface,\\n    AaveOracleInterface,\\n    IndexInterface\\n} from \\\"./interfaces.sol\\\";\\n\\ncontract Variables {\\n    struct TokenInfo {\\n        address sourceToken;\\n        address targetToken;\\n        uint256 amount;\\n    }\\n    \\n    struct Position {\\n        TokenInfo[] supply;\\n        TokenInfo[] withdraw;\\n    }\\n\\n    // Structs\\n    struct AaveDataRaw {\\n        address targetDsa;\\n        uint256[] supplyAmts;\\n        uint256[] variableBorrowAmts;\\n        uint256[] stableBorrowAmts;\\n        address[] supplyTokens;\\n        address[] borrowTokens;\\n    }\\n\\n    struct AaveData {\\n        address targetDsa;\\n        uint256[] supplyAmts;\\n        uint256[] borrowAmts;\\n        address[] supplyTokens;\\n        address[] borrowTokens;\\n    }\\n\\n    // Constant Addresses //\\n\\n    /**\\n    * @dev Aave referal code\\n    */\\n    uint16 constant internal referralCode = 3228;\\n    address public constant nativeToken = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    \\n    /**\\n     * @dev Aave Provider\\n     */\\n    AaveLendingPoolProviderInterface public immutable aaveLendingPoolAddressesProvider;\\n\\n    /**\\n     * @dev Aave Data Provider\\n     */\\n    AaveDataProviderInterface public immutable aaveProtocolDataProvider;\\n\\n    /**\\n     * @dev Aave Price Oracle\\n     */\\n    // AaveOracleInterface public aaveOracle = AaveOracleInterface(0xA50ba011c48153De246E5192C8f9258A2ba79Ca9);\\n\\n    /**\\n     * @dev InstaIndex Address.\\n     */\\n    IndexInterface public immutable instaIndex;\\n    address public immutable wnativeToken;\\n\\n    constructor (\\n        address _aaveLendingPoolAddressesProvider,\\n        address _aaveProtocolDataProvider,\\n        address _instaIndex,\\n        address _wnativeToken\\n    ) {\\n        aaveLendingPoolAddressesProvider = AaveLendingPoolProviderInterface(_aaveLendingPoolAddressesProvider);\\n        aaveProtocolDataProvider = AaveDataProviderInterface(_aaveProtocolDataProvider);\\n        instaIndex = IndexInterface(_instaIndex);\\n        wnativeToken = _wnativeToken;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aaveLendingPoolAddressesProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveProtocolDataProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_instaIndex\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wnativeToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"safeRatioPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userTotalBorrow\",\"type\":\"uint256\"}],\"name\":\"_checkLiquidityRatio\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOk\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.PositionData\",\"name\":\"positionData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Variables.TokenInfo[]\",\"name\":\"supply\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Variables.TokenInfo[]\",\"name\":\"withdraw\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Variables.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"safeRatioPercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTarget\",\"type\":\"bool\"}],\"name\":\"_checkRatio\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOk\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.PositionData\",\"name\":\"positionData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveLendingPoolAddressesProvider\",\"outputs\":[{\"internalType\":\"contract AaveLendingPoolProviderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveProtocolDataProvider\",\"outputs\":[{\"internalType\":\"contract AaveDataProviderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Variables.TokenInfo[]\",\"name\":\"supply\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Variables.TokenInfo[]\",\"name\":\"withdraw\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Variables.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"safeRatioPercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTarget\",\"type\":\"bool\"}],\"name\":\"checkAavePosition\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOk\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.PositionData\",\"name\":\"p\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"targetDsa\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"supplyAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"supplyTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"borrowTokens\",\"type\":\"address[]\"}],\"internalType\":\"struct Variables.AaveData\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isTarget\",\"type\":\"bool\"}],\"name\":\"checkBorrowToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOk\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safeLiquidityRatioPercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTarget\",\"type\":\"bool\"}],\"name\":\"checkLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOk\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.PositionData\",\"name\":\"p\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"checkLiquidityToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMaxBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMaxLiquidation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"targetDsa\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"supplyAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"supplyTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"borrowTokens\",\"type\":\"address[]\"}],\"internalType\":\"struct Variables.AaveData\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isTarget\",\"type\":\"bool\"}],\"name\":\"checkSupplyToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMaxBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMaxLiquidation\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOk\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getTokenInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tl\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabledAsCollateral\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"borrowingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOverallDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.ReserveConfigData[]\",\"name\":\"reserveConfigData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getTokensPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenPricesInEth\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instaIndex\",\"outputs\":[{\"internalType\":\"contract IndexInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"safeRatioPercentage\",\"type\":\"uint256\"}],\"name\":\"isPositionSafe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOk\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"userTl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userLtv\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Variables.TokenInfo[]\",\"name\":\"supply\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Variables.TokenInfo[]\",\"name\":\"withdraw\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Variables.Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isTarget\",\"type\":\"bool\"}],\"name\":\"sortData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"targetDsa\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"supplyAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"supplyTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"borrowTokens\",\"type\":\"address[]\"}],\"internalType\":\"struct Variables.AaveData\",\"name\":\"aaveData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wnativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InteropAaveResolver","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b53c1a33016b2dc2ff3653530bff1848a515c8c5000000000000000000000000057835ad21a177dbdd3090bb1cae03eacf78fc6d0000000000000000000000002971adfa57b20e5a416ae5a708a8655a9c74f723000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}