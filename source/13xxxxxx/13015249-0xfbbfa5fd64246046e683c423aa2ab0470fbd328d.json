{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.15\r\n\"\"\"\r\n@title Uniswap Burner\r\n@notice Swap coins to USDC using Uniswap or Sushi, and send to receiver\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface UniswapV2Pair:\r\n    def token0() -> address:\r\n        view\r\n\r\n    def token1() -> address:\r\n        view\r\n\r\n    def factory() -> address:\r\n        view\r\n\r\n\r\ninterface UniswapV2Router02:\r\n    def removeLiquidity(\r\n        tokenA: address,\r\n        tokenB: address,\r\n        liquidity: uint256,\r\n        amountAMin: uint256,\r\n        amountBMin: uint256,\r\n        to: address,\r\n        deadline: uint256,\r\n    ) -> uint256[2]:\r\n        nonpayable\r\n\r\n    def factory() -> address:\r\n        view\r\n\r\n\r\ninterface UniswapV2Factory:\r\n    def getPair(tokenA: address, tokenB: address) -> address:\r\n        view\r\n\r\n\r\nis_approved: HashMap[address, HashMap[address, bool]]\r\nreceiver: public(address)\r\nrecovery: public(address)\r\nis_killed: public(bool)\r\nowner: public(address)\r\nemergency_owner: public(address)\r\nfuture_owner: public(address)\r\nfuture_emergency_owner: public(address)\r\n\r\n\r\nWETH: constant(address) = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\nUSDC: constant(address) = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\r\nROUTERS: constant(address[2]) = [\r\n    0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D,  # uniswap\r\n    0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F,  # sushi\r\n]\r\n\r\n\r\n@internal\r\ndef _swap_for_usdc(_coin: address, amount: uint256, router: address):\r\n    # vyper doesnt support dynamic array. build calldata manually\r\n    if _coin == WETH:\r\n        raw_call(\r\n            router,\r\n            concat(\r\n                method_id(\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\"),\r\n                convert(amount, bytes32),  # swap amount\r\n                EMPTY_BYTES32,  # min expected\r\n                convert(160, bytes32),  # offset pointer to path array\r\n                convert(self.receiver, bytes32),  # receiver of the swap\r\n                convert(block.timestamp, bytes32),  # swap deadline\r\n                convert(2, bytes32),  # path length\r\n                convert(_coin, bytes32),  # input token\r\n                convert(USDC, bytes32),  # usdc (final output)\r\n            ),\r\n        )\r\n    else:\r\n        raw_call(\r\n            router,\r\n            concat(\r\n                method_id(\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\"),\r\n                convert(amount, bytes32),  # swap amount\r\n                EMPTY_BYTES32,  # min expected\r\n                convert(160, bytes32),  # offset pointer to path array\r\n                convert(self.receiver, bytes32),  # receiver of the swap\r\n                convert(block.timestamp, bytes32),  # swap deadline\r\n                convert(3, bytes32),  # path length\r\n                convert(_coin, bytes32),  # input token\r\n                convert(WETH, bytes32),  # weth (intermediate swap)\r\n                convert(USDC, bytes32),  # usdc (final output)\r\n            ),\r\n        )\r\n\r\n\r\n@internal\r\ndef _get_amounts_out(_coin: address, amount: uint256, router: address) -> uint256:\r\n    # vyper doesnt support dynamic array. build calldata manually\r\n    call_data: Bytes[256] = 0x00\r\n    if _coin == WETH:\r\n        call_data = concat(\r\n            method_id(\"getAmountsOut(uint256,address[])\"),\r\n            convert(amount, bytes32),\r\n            convert(64, bytes32),\r\n            convert(2, bytes32),\r\n            convert(_coin, bytes32),\r\n            convert(USDC, bytes32),\r\n        )\r\n    else:\r\n        call_data = concat(\r\n            method_id(\"getAmountsOut(uint256,address[])\"),\r\n            convert(amount, bytes32),\r\n            convert(64, bytes32),\r\n            convert(3, bytes32),\r\n            convert(_coin, bytes32),\r\n            convert(WETH, bytes32),\r\n            convert(USDC, bytes32),\r\n        )\r\n    response: Bytes[128] = raw_call(router, call_data, max_outsize=128)\r\n    response_bytes_start_index: uint256 = 0\r\n    if _coin == WETH:\r\n        response_bytes_start_index = 64\r\n    else:\r\n        response_bytes_start_index = 96\r\n    return convert(slice(response, response_bytes_start_index, 32), uint256)\r\n\r\n\r\n@external\r\ndef __init__(_receiver: address, _recovery: address, _owner: address, _emergency_owner: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _receiver Address that converted tokens are transferred to.\r\n                     Should be set to an USDCBurner.\r\n    @param _recovery Address that tokens are transferred to during an\r\n                     emergency token recovery.\r\n    @param _owner Owner address. Can kill the contract, recover tokens\r\n                  and modify the recovery address.\r\n    @param _emergency_owner Emergency owner address. Can kill the contract\r\n                            and recover tokens.\r\n    \"\"\"\r\n    self.receiver = _receiver\r\n    self.recovery = _recovery\r\n    self.owner = _owner\r\n    self.emergency_owner = _emergency_owner\r\n\r\n\r\n@external\r\n@nonreentrant(\"lock\")\r\ndef burn(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice Receive `_coin` and swap it for USDC using Uniswap or Sushi\r\n    @param _coin Address of the coin being converted\r\n    @return bool success\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    # transfer coins from caller\r\n    amount: uint256 = ERC20(_coin).balanceOf(msg.sender)\r\n\r\n    if amount != 0:\r\n        response: Bytes[32] = raw_call(\r\n            _coin,\r\n            concat(\r\n                method_id(\"transferFrom(address,address,uint256)\"),\r\n                convert(msg.sender, bytes32),\r\n                convert(self, bytes32),\r\n                convert(amount, bytes32),\r\n            ),\r\n            max_outsize=32,\r\n        )\r\n        if len(response) != 0:\r\n            assert convert(response, bool)\r\n\r\n    # get actual balance in case of transfer fee or pre-existing balance\r\n    amount = ERC20(_coin).balanceOf(self)\r\n\r\n    best_expected: uint256 = 0\r\n    router: address = ZERO_ADDRESS\r\n\r\n    # check the rates on uniswap and sushi to see which is the better option\r\n    for addr in ROUTERS:\r\n        if _coin != WETH:\r\n            factory: address = UniswapV2Router02(addr).factory()\r\n            coin_weth_pair: address = UniswapV2Factory(factory).getPair(_coin, WETH)\r\n            if coin_weth_pair == ZERO_ADDRESS:\r\n                continue\r\n        expected: uint256 = self._get_amounts_out(_coin, amount, addr)\r\n        if expected > best_expected:\r\n            best_expected = expected\r\n            router = addr\r\n\r\n    assert router != ZERO_ADDRESS, \"neither Uniswap nor Sushiswap has liquidity pool for this token\"\r\n    # make sure the router is approved to transfer the coin\r\n    if not self.is_approved[router][_coin]:\r\n        response: Bytes[32] = raw_call(\r\n            _coin,\r\n            concat(\r\n                method_id(\"approve(address,uint256)\"),\r\n                convert(router, bytes32),\r\n                convert(MAX_UINT256, bytes32),\r\n            ),\r\n            max_outsize=32,\r\n        )\r\n        if len(response) != 0:\r\n            assert convert(response, bool)\r\n        self.is_approved[router][_coin] = True\r\n    # swap for USDC on the best dex protocol\r\n    self._swap_for_usdc(_coin, amount, router)\r\n    return True\r\n\r\n\r\n@external\r\ndef recover_balance(_coin: address) -> bool:\r\n    \"\"\"\r\n    @notice Recover ERC20 tokens from this contract\r\n    @dev Tokens are sent to the recovery address\r\n    @param _coin Token address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n\r\n    amount: uint256 = ERC20(_coin).balanceOf(self)\r\n    response: Bytes[32] = raw_call(\r\n        _coin,\r\n        concat(\r\n            method_id(\"transfer(address,uint256)\"),\r\n            convert(self.recovery, bytes32),\r\n            convert(amount, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )\r\n    if len(response) != 0:\r\n        assert convert(response, bool)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_recovery(_recovery: address) -> bool:\r\n    \"\"\"\r\n    @notice Set the token recovery address\r\n    @param _recovery Token recovery address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.recovery = _recovery\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef set_killed(_is_killed: bool) -> bool:\r\n    \"\"\"\r\n    @notice Set killed status for this contract\r\n    @dev When killed, the `burn` function cannot be called\r\n    @param _is_killed Killed status\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender in [self.owner, self.emergency_owner]  # dev: only owner\r\n    self.is_killed = _is_killed\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n    self.future_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_owner  # dev: only owner\r\n    self.owner = msg.sender\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef commit_transfer_emergency_ownership(_future_owner: address) -> bool:\r\n    \"\"\"\r\n    @notice Commit a transfer of ownership\r\n    @dev Must be accepted by the new owner via `accept_transfer_ownership`\r\n    @param _future_owner New owner address\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.emergency_owner  # dev: only owner\r\n    self.future_emergency_owner = _future_owner\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef accept_transfer_emergency_ownership() -> bool:\r\n    \"\"\"\r\n    @notice Accept a transfer of ownership\r\n    @return bool success\r\n    \"\"\"\r\n    assert msg.sender == self.future_emergency_owner  # dev: only owner\r\n    self.emergency_owner = msg.sender\r\n\r\n    return True","ABI":"[{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_recovery\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_emergency_owner\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"burn\",\"inputs\":[{\"name\":\"_coin\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":197574},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"recover_balance\",\"inputs\":[{\"name\":\"_coin\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":19260},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_recovery\",\"inputs\":[{\"name\":\"_recovery\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":37650},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_killed\",\"inputs\":[{\"name\":\"_is_killed\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":40201},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_transfer_ownership\",\"inputs\":[{\"name\":\"_future_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":37710},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_transfer_ownership\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":37636},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_transfer_emergency_ownership\",\"inputs\":[{\"name\":\"_future_owner\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":37770},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_transfer_emergency_ownership\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":37696},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"receiver\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2628},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"recovery\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2658},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"is_killed\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":2688},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2718},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"emergency_owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2748},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2778},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_emergency_owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2808}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.15","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000004486835e0c567a320c0636d8f6e6e6679a46a2710000000000000000000000006d5a7597896a703fe8c85775b23395a48f9713050000000000000000000000006d5a7597896a703fe8c85775b23395a48f971305000000000000000000000000197939c1ca20c2b506d6811d8b6cdb3394471074","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}