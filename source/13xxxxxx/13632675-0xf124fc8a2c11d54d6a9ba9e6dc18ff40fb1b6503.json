{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.9;\r\n\r\ninterface IERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\ncontract WinterSwap {\r\n    event OrderExecuted(\r\n        address maker_address,\r\n        address taker_address,\r\n        address base_token,\r\n        address quote_token,\r\n        uint256 base_quantity,\r\n        uint256 quote_quantity\r\n    );\r\n\r\n    event OrderCancelled(address taker_address, bytes sig);\r\n\r\n    uint256 chainId = block.chainid;\r\n    address verifyingContract = address(this);\r\n    string private constant EIP712_DOMAIN =\r\n        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\";\r\n\r\n    bytes32 public constant EIP712_DOMAIN_TYPEHASH =\r\n        keccak256(abi.encodePacked(EIP712_DOMAIN));\r\n    address constant ETH_ADD = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    struct Order {\r\n        uint256 expiry;\r\n        address taker_address;\r\n        address base_token;\r\n        address quote_token;\r\n        uint256 base_quantity;\r\n        uint256 quote_quantity;\r\n    }\r\n\r\n    string constant ORDER_TYPE =\r\n        \"Order(uint256 expiry,address taker_address,address base_token,address quote_token,uint256 base_quantity,uint256 quote_quantity)\";\r\n    bytes32 constant ORDER_TYPEHASH = keccak256(abi.encodePacked(ORDER_TYPE));\r\n\r\n    bytes32 private DOMAIN_SEPARATOR;\r\n\r\n    mapping(bytes32 => bool) public Signatures;\r\n\r\n    constructor() {\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                EIP712_DOMAIN_TYPEHASH,\r\n                keccak256(\"WinterSwap\"),\r\n                keccak256(\"1\"),\r\n                chainId,\r\n                verifyingContract\r\n            )\r\n        );\r\n    }\r\n\r\n    function getRsv(bytes memory sig)\r\n        public\r\n        pure\r\n        returns (\r\n            bytes32,\r\n            bytes32,\r\n            uint8\r\n        )\r\n    {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := and(mload(add(sig, 65)), 255)\r\n        }\r\n        if (v < 27) v += 27;\r\n        return (r, s, v);\r\n    }\r\n\r\n    function hashOrder(Order memory order) private view returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19\\x01\",\r\n                    DOMAIN_SEPARATOR,\r\n                    keccak256(\r\n                        abi.encode(\r\n                            ORDER_TYPEHASH,\r\n                            order.expiry,\r\n                            order.taker_address,\r\n                            order.base_token,\r\n                            order.quote_token,\r\n                            order.base_quantity,\r\n                            order.quote_quantity\r\n                        )\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function cancelOrder(Order memory order, bytes memory sig)\r\n        public\r\n        returns (bool)\r\n    {\r\n        (bytes32 r, bytes32 s, uint8 v) = getRsv(sig);\r\n        bytes32 h = hashOrder(order);\r\n        address trader = ecrecover(h, v, r, s);\r\n        require(trader == msg.sender);\r\n        Signatures[h] = true;\r\n        emit OrderCancelled(msg.sender, sig);\r\n        return true;\r\n    }\r\n\r\n    function assertValidOrder(Order memory order, bytes memory sig)\r\n        public\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        (bytes32 r, bytes32 s, uint8 v) = getRsv(sig);\r\n        bytes32 h = hashOrder(order);\r\n        address trader = ecrecover(h, v, r, s);\r\n\r\n        require(trader == order.taker_address, \"Invalid signature\");\r\n        require(msg.sender != trader, \"Maker/taker must be different address\");\r\n        require(order.expiry > block.timestamp, \"Signature expired\");\r\n        require(\r\n            order.base_quantity > 0 && order.quote_quantity > 0,\r\n            \"Invalid base/quote amount\"\r\n        );\r\n        require(!Signatures[h], \"Signature reuse\"); //Ensure no replay attacks\r\n\r\n        return h;\r\n    }\r\n\r\n    function makerTransferFunds(\r\n        address to,\r\n        uint256 quantity,\r\n        address token\r\n    ) private returns (bool) {\r\n        if (token == ETH_ADD) {\r\n            require(msg.value == quantity);\r\n            payable(to).call{value: msg.value}(\"\");\r\n        } else {\r\n            require(IERC20(token).transferFrom(msg.sender, to, quantity));\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //Can only be called by anyone with the signature from trader\r\n    function settleOrder(Order memory order, bytes memory sig)\r\n        public\r\n        payable\r\n        returns (bool)\r\n    {\r\n        bytes32 h = assertValidOrder(order, sig);\r\n        Signatures[h] = true;\r\n        require(\r\n            makerTransferFunds(\r\n                order.taker_address,\r\n                order.quote_quantity,\r\n                order.quote_token\r\n            )\r\n        );\r\n        require(\r\n            IERC20(order.base_token).transferFrom(\r\n                order.taker_address,\r\n                msg.sender,\r\n                order.base_quantity\r\n            )\r\n        );\r\n\r\n        emit OrderExecuted(\r\n            msg.sender,\r\n            order.taker_address,\r\n            order.base_token,\r\n            order.quote_token,\r\n            order.base_quantity,\r\n            order.quote_quantity\r\n        );\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"base_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quote_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base_quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quote_quantity\",\"type\":\"uint256\"}],\"name\":\"OrderExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"Signatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"taker_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"base_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote_quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct WinterSwap.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"assertValidOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"taker_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"base_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote_quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct WinterSwap.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"getRsv\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"taker_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"base_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"base_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote_quantity\",\"type\":\"uint256\"}],\"internalType\":\"struct WinterSwap.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"settleOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"WinterSwap","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2b3439a5e623545d7fe79c0380576ca9cf361d4c1b95082ee5169fd025d294ef"}]}