{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/EscrowMinion.sol\": {\r\n      \"content\": \"// Based on https://github.com/HausDAO/MinionSummoner/blob/main/MinionFactory.sol\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.5;\\n\\ninterface IERC721 {\\n    // brief interface for minion erc721 token txs\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\\ninterface IERC1155 {\\n    // brief interface for minion erc1155 token txs\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IERC721Receiver {\\n    // Safely receive ERC721 tokens\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\ninterface IERC1155PartialReceiver {\\n    // Safely receive ERC1155 tokens\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    // ERC1155 batch receive not implemented in this escrow contract\\n}\\n\\ninterface IMOLOCH {\\n    // brief interface for moloch dao v2\\n\\n    function depositToken() external view returns (address);\\n\\n    function tokenWhitelist(address token) external view returns (bool);\\n\\n    function getProposalFlags(uint256 proposalId)\\n        external\\n        view\\n        returns (bool[6] memory);\\n\\n    function members(address user)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n\\n    function userTokenBalances(address user, address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function cancelProposal(uint256 proposalId) external;\\n\\n    function submitProposal(\\n        address applicant,\\n        uint256 sharesRequested,\\n        uint256 lootRequested,\\n        uint256 tributeOffered,\\n        address tributeToken,\\n        uint256 paymentRequested,\\n        address paymentToken,\\n        string calldata details\\n    ) external returns (uint256);\\n\\n    function withdrawBalance(address token, uint256 amount) external;\\n}\\n\\n/// @title EscrowMinion - Token escrow for ERC20, ERC721, ERC1155 tokens tied to Moloch DAO proposals\\n/// @dev Ties arbitrary token escrow to a Moloch DAO proposal\\n///  Can be used to tribute tokens in exchange for shares, loot, or DAO funds\\n///\\n///  Any number and combinations of tokens can be escrowed\\n///  If any tokens become untransferable, the rest of the tokens in escrow can be released individually\\n///\\n///  If proposal passes, tokens become withdrawable to destination - usually a Gnosis Safe or Minion\\n///  If proposal fails, or cancelled before sponsorship, token become withdrawable to applicant\\n///\\n///  If any tokens become untransferable, the rest of the tokens in escrow can be released individually\\n///\\n/// @author Isaac Patka, Dekan Brown\\ncontract EscrowMinion is\\n    IERC721Receiver,\\n    ReentrancyGuard,\\n    IERC1155PartialReceiver\\n{\\n    using Address for address; /*Address library provides isContract function*/\\n    using SafeERC20 for IERC20; /*SafeERC20 automatically checks optional return*/\\n\\n    // Track token tribute type to use so we know what transfer interface to use\\n    enum TributeType {\\n        ERC20,\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    // Track the balance and withdrawl state for each token\\n    struct EscrowBalance {\\n        uint256[3] typesTokenIdsAmounts; /*Tribute type | ID (for 721, 1155) | Amount (for 20, 1155)*/\\n        address tokenAddress; /* Address of tribute token */\\n        bool executed; /* Track if this specific token has been withdrawn*/\\n    }\\n\\n    // Store destination vault and proposer for each proposal\\n    struct TributeEscrowAction {\\n        address vaultAddress; /*Destination for escrow tokens - must be token receiver*/\\n        address proposer; /*Applicant address*/\\n    }\\n\\n    mapping(address => mapping(uint256 => TributeEscrowAction)) public actions; /*moloch => proposalId => Action*/\\n    mapping(address => mapping(uint256 => mapping(uint256 => EscrowBalance)))\\n        public escrowBalances; /* moloch => proposal => token index => balance */\\n        \\n    /* \\n    * Moloch proposal ID\\n    * Applicant addr\\n    * Moloch addr\\n    * escrow token addr\\n    * escrow token types\\n    * escrow token IDs (721, 1155)\\n    * amounts (20, 1155)\\n    * destination for escrow\\n    */\\n    event ProposeAction(\\n        uint256 proposalId,\\n        address proposer,\\n        address moloch,\\n        address[] tokens,\\n        uint256[] types,\\n        uint256[] tokenIds,\\n        uint256[] amounts,\\n        address destinationVault\\n    ); \\n    event ExecuteAction(uint256 proposalId, address executor, address moloch);\\n    event ActionCanceled(uint256 proposalId, address moloch);\\n\\n    // internal tracking for destinations to ensure escrow can't get stuck\\n    // Track if already checked so we don't do it multiple times per proposal\\n    mapping(TributeType => uint256) internal destinationChecked_;\\n    uint256 internal constant NOTCHECKED_ = 1;\\n    uint256 internal constant CHECKED_ = 2;\\n\\n    /// @dev Construtor sets the status of the destination checkers\\n    constructor() {\\n        // Follow a similar pattern to reentency guard from OZ\\n        destinationChecked_[TributeType.ERC721] = NOTCHECKED_;\\n        destinationChecked_[TributeType.ERC1155] = NOTCHECKED_;\\n    }\\n\\n    // Reset the destination checkers for the next proposal\\n    modifier safeDestination() {\\n        _;\\n        destinationChecked_[TributeType.ERC721] = NOTCHECKED_;\\n        destinationChecked_[TributeType.ERC1155] = NOTCHECKED_;\\n    }\\n\\n    // Safely receive ERC721s\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return\\n            bytes4(\\n                keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\")\\n            );\\n    }\\n\\n    // Safely receive ERC1155s\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return\\n            bytes4(\\n                keccak256(\\n                    \\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param _operator address representing the entity calling the function\\n     * @param _from address representing the previous owner of the given token ID\\n     * @param _to target address that will receive the tokens\\n     * @param _tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address _operator,\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        if (!_to.isContract()) {\\n            return true;\\n        }\\n        bytes memory _returndata = _to.functionCall(\\n            abi.encodeWithSelector(\\n                IERC721Receiver(_to).onERC721Received.selector,\\n                _operator,\\n                _from,\\n                _tokenId,\\n                _data\\n            ),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n        bytes4 _retval = abi.decode(_returndata, (bytes4));\\n        return (_retval == IERC721Receiver(_to).onERC721Received.selector);\\n    }\\n\\n    /**\\n     * @dev internal function to invoke {IERC1155-onERC1155Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param _operator address representing the entity calling the function\\n     * @param _from address representing the previous owner of the given token ID\\n     * @param _to target address that will receive the tokens\\n     * @param _id uint256 ID of the token to be transferred\\n     * @param _amount uint256 amount of token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC1155Received(\\n        address _operator,\\n        address _from,\\n        address _to,\\n        uint256 _id,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        if (!_to.isContract()) {\\n            return true;\\n        }\\n        bytes memory _returndata = _to.functionCall(\\n            abi.encodeWithSelector(\\n                IERC1155PartialReceiver(_to).onERC1155Received.selector,\\n                _operator,\\n                _from,\\n                _id,\\n                _amount,\\n                _data\\n            ),\\n            \\\"ERC1155: transfer to non ERC1155Receiver implementer\\\"\\n        );\\n        bytes4 _retval = abi.decode(_returndata, (bytes4));\\n        return (_retval ==\\n            IERC1155PartialReceiver(_to).onERC1155Received.selector);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on both vault & applicant\\n     * Ensures tokens cannot get stuck here due to interface issue\\n     *\\n     * @param _vaultAddress Destination for tokens on successful proposal\\n     * @param _applicantAddress Destination for tokens on failed proposal\\n     */\\n    function checkERC721Recipients(address _vaultAddress, address _applicantAddress) internal {\\n        require(\\n            _checkOnERC721Received(\\n                address(this),\\n                address(this),\\n                _vaultAddress,\\n                0,\\n                \\\"\\\"\\n            ),\\n            \\\"!ERC721\\\"\\n        );\\n        require(\\n            _checkOnERC721Received(\\n                address(this),\\n                address(this),\\n                _applicantAddress,\\n                0,\\n                \\\"\\\"\\n            ),\\n            \\\"!ERC721\\\"\\n        );\\n        // Mark 721 as checked so we don't check again during this tx\\n        destinationChecked_[TributeType.ERC721] = CHECKED_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC1155Receiver-onERC1155Received} on both vault & applicant\\n     * Ensures tokens cannot get stuck here due to interface issue\\n     *\\n     * @param _vaultAddress Destination for tokens on successful proposal\\n     * @param _applicantAddress Destination for tokens on failed proposal\\n     */\\n    function checkERC1155Recipients(address _vaultAddress, address _applicantAddress) internal {\\n        require(\\n            _checkOnERC1155Received(\\n                address(this),\\n                address(this),\\n                _vaultAddress,\\n                0,\\n                0,\\n                \\\"\\\"\\n            ),\\n            \\\"!ERC1155\\\"\\n        );\\n        require(\\n            _checkOnERC1155Received(\\n                address(this),\\n                address(this),\\n                _applicantAddress,\\n                0,\\n                0,\\n                \\\"\\\"\\n            ),\\n            \\\"!ERC1155\\\"\\n        );\\n        // Mark 1155 as checked so we don't check again during this tx\\n        destinationChecked_[TributeType.ERC1155] = CHECKED_;\\n    }\\n\\n    /**\\n     * @dev Internal function to move token into or out of escrow depending on type\\n     * Only valid for 721, 1155, 20\\n     *\\n     * @param _tokenAddress Token to escrow\\n     * @param _typesTokenIdsAmounts Type: 0-20, 1-721, 2-1155 TokenIds: for 721, 1155 Amounts: for 20, 1155\\n     * @param _from Sender (applicant or this)\\n     * @param _to Recipient (this or applicant or destination)\\n     */\\n    function doTransfer(\\n        address _tokenAddress,\\n        uint256[3] memory _typesTokenIdsAmounts,\\n        address _from,\\n        address _to\\n    ) internal {\\n        // Use 721 interface for 721\\n        if (_typesTokenIdsAmounts[0] == uint256(TributeType.ERC721)) {\\n            IERC721 _erc721 = IERC721(_tokenAddress);\\n            _erc721.safeTransferFrom(_from, _to, _typesTokenIdsAmounts[1]);\\n        // Use 20 interface for 20\\n        } else if (_typesTokenIdsAmounts[0] == uint256(TributeType.ERC20)) {\\n            // Fail if attempt to send 0 tokens\\n            require(_typesTokenIdsAmounts[2] != 0, \\\"!amount\\\");\\n            IERC20 _erc20 = IERC20(_tokenAddress);\\n            if (_from == address(this)) {\\n                _erc20.safeTransfer(_to, _typesTokenIdsAmounts[2]);\\n            } else {\\n                _erc20.safeTransferFrom(_from, _to, _typesTokenIdsAmounts[2]);\\n            }\\n            // use 1155 interface for 1155\\n        } else if (_typesTokenIdsAmounts[0] == uint256(TributeType.ERC1155)) {\\n            // Fail if attempt to send 0 tokens\\n            require(_typesTokenIdsAmounts[2] != 0, \\\"!amount\\\");\\n            IERC1155 _erc1155 = IERC1155(_tokenAddress);\\n            _erc1155.safeTransferFrom(\\n                _from,\\n                _to,\\n                _typesTokenIdsAmounts[1],\\n                _typesTokenIdsAmounts[2],\\n                \\\"\\\"\\n            );\\n        } else {\\n            revert(\\\"Invalid type\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to move token into escrow on proposal\\n     *\\n     * @param _molochAddress Moloch to read proposal data from\\n     * @param _tokenAddresses Addresses of tokens to escrow\\n     * @param _typesTokenIdsAmounts ERC20, 721, or 1155 | id for 721, 1155 | amount for 20, 1155\\n     * @param _vaultAddress Addresses of destination of proposal successful\\n     * @param _proposalId ID of Moloch proposal for this escrow\\n     */\\n    function processTributeProposal(\\n        address _molochAddress,\\n        address[] memory _tokenAddresses,\\n        uint256[3][] memory _typesTokenIdsAmounts,\\n        address _vaultAddress,\\n        uint256 _proposalId\\n    ) internal {\\n        \\n        // Initiate arrays to flatten 2d array for event\\n        uint256[] memory _types = new uint256[](_tokenAddresses.length);\\n        uint256[] memory _tokenIds = new uint256[](_tokenAddresses.length);\\n        uint256[] memory _amounts = new uint256[](_tokenAddresses.length);\\n\\n        // Store proposal metadata\\n        actions[_molochAddress][_proposalId] = TributeEscrowAction({\\n            vaultAddress: _vaultAddress,\\n            proposer: msg.sender\\n        });\\n        \\n        // Store escrow data, check destinations, and do transfers\\n        for (uint256 _index = 0; _index < _tokenAddresses.length; _index++) {\\n            // Store withdrawable balances\\n            escrowBalances[_molochAddress][_proposalId][_index] = EscrowBalance({\\n                typesTokenIdsAmounts: _typesTokenIdsAmounts[_index],\\n                tokenAddress: _tokenAddresses[_index],\\n                executed: false\\n            });\\n\\n            if (destinationChecked_[TributeType.ERC721] == NOTCHECKED_)\\n                checkERC721Recipients(_vaultAddress, msg.sender);\\n            if (destinationChecked_[TributeType.ERC1155] == NOTCHECKED_)\\n                checkERC1155Recipients(_vaultAddress, msg.sender);\\n\\n            // Move tokens into escrow\\n            doTransfer(\\n                _tokenAddresses[_index],\\n                _typesTokenIdsAmounts[_index],\\n                msg.sender,\\n                address(this)\\n            );\\n\\n            // Store in memory so they can be emitted in an event\\n            _types[_index] = _typesTokenIdsAmounts[_index][0];\\n            _tokenIds[_index] = _typesTokenIdsAmounts[_index][1];\\n            _amounts[_index] = _typesTokenIdsAmounts[_index][2];\\n        }\\n        emit ProposeAction(\\n            _proposalId,\\n            msg.sender,\\n            _molochAddress,\\n            _tokenAddresses,\\n            _types,\\n            _tokenIds,\\n            _amounts,\\n            _vaultAddress\\n        );\\n    }\\n\\n    //  -- Proposal Functions --\\n    /**\\n     * @notice Creates a proposal and moves NFT into escrow\\n     * @param _molochAddress Address of DAO\\n     * @param _tokenAddresses Token contract address\\n     * @param _typesTokenIdsAmounts Token id.\\n     * @param _vaultAddress Address of DAO's NFT vault\\n     * @param _requestSharesLootFunds Amount of shares requested\\n     // add funding request token\\n     * @param _details Info about proposal\\n     */\\n    function proposeTribute(\\n        address _molochAddress,\\n        address[] calldata _tokenAddresses,\\n        uint256[3][] calldata _typesTokenIdsAmounts,\\n        address _vaultAddress,\\n        uint256[3] calldata _requestSharesLootFunds, // also request loot or treasury funds\\n        string calldata _details\\n    ) external nonReentrant safeDestination returns (uint256) {\\n        IMOLOCH _thisMoloch = IMOLOCH(_molochAddress); /*Initiate interface to relevant moloch*/\\n        address _thisMolochDepositToken = _thisMoloch.depositToken(); /*Get deposit token for proposals*/\\n\\n        require(_vaultAddress != address(0), \\\"invalid vaultAddress\\\"); /*Cannot set destination to 0*/\\n\\n        require(\\n            _typesTokenIdsAmounts.length == _tokenAddresses.length,\\n            \\\"!same-length\\\"\\n        );\\n\\n        // Submit proposal to moloch for loot, shares, or funds in the deposit token\\n        uint256 _proposalId = _thisMoloch.submitProposal(\\n            msg.sender,\\n            _requestSharesLootFunds[0],\\n            _requestSharesLootFunds[1],\\n            0, // No ERC20 tribute directly to Moloch\\n            _thisMolochDepositToken,\\n            _requestSharesLootFunds[2],\\n            _thisMolochDepositToken,\\n            _details\\n        );\\n\\n        processTributeProposal(\\n            _molochAddress,\\n            _tokenAddresses,\\n            _typesTokenIdsAmounts,\\n            _vaultAddress,\\n            _proposalId\\n        );\\n\\n        return _proposalId;\\n    }\\n\\n    /**\\n     * @notice Internal function to move tokens to destination ones it can be processed or has been cancelled\\n     * @param _molochAddress Address of DAO\\n     * @param _tokenIndices Indices in proposed tokens array - have to specify this so frozen tokens cant make the whole payload stuck\\n     * @param _destination Address of DAO's NFT vault or Applicant if failed/ cancelled\\n     * @param _proposalId Moloch proposal ID\\n     */\\n    function processWithdrawls(\\n        address _molochAddress,\\n        uint256[] calldata _tokenIndices, // only withdraw indices in this list\\n        address _destination,\\n        uint256 _proposalId\\n    ) internal {\\n        for (uint256 _index = 0; _index < _tokenIndices.length; _index++) {\\n            // Retrieve withdrawable balances\\n            EscrowBalance storage _escrowBalance = escrowBalances[_molochAddress][\\n                _proposalId\\n            ][_tokenIndices[_index]];\\n            // Ensure this token has not been withdrawn\\n            require(!_escrowBalance.executed, \\\"executed\\\");\\n            require(_escrowBalance.tokenAddress != address(0), \\\"!token\\\");\\n            _escrowBalance.executed = true;\\n\\n            // Move tokens to \\n            doTransfer(\\n                _escrowBalance.tokenAddress,\\n                _escrowBalance.typesTokenIdsAmounts,\\n                address(this),\\n                _destination\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice External function to move tokens to destination ones it can be processed or has been cancelled\\n     * @param _proposalId Moloch proposal ID\\n     * @param _molochAddress Address of DAO\\n     * @param _tokenIndices Indices in proposed tokens array - have to specify this so frozen tokens cant make the whole payload stuck\\n     */\\n    function withdrawToDestination(\\n        uint256 _proposalId,\\n        address _molochAddress,\\n        uint256[] calldata _tokenIndices\\n    ) external nonReentrant {\\n        IMOLOCH _thisMoloch = IMOLOCH(_molochAddress);\\n        bool[6] memory _flags = _thisMoloch.getProposalFlags(_proposalId);\\n\\n        require(\\n            _flags[1] || _flags[3],\\n            \\\"proposal not processed and not cancelled\\\"\\n        );\\n\\n        TributeEscrowAction memory _action = actions[_molochAddress][_proposalId];\\n        address _destination;\\n        // if passed, send NFT to vault\\n        if (_flags[2]) {\\n            _destination = _action.vaultAddress;\\n            // if failed or cancelled, send back to proposer\\n        } else {\\n            _destination = _action.proposer;\\n        }\\n\\n        processWithdrawls(_molochAddress, _tokenIndices, _destination, _proposalId);\\n\\n        emit ExecuteAction(_proposalId, msg.sender, _molochAddress);\\n    }\\n\\n    /**\\n     * @notice External function to cancel proposal by applicant if not sponsored \\n     * @param _proposalId Moloch proposal ID\\n     * @param _molochAddress Address of DAO\\n     */\\n    function cancelAction(uint256 _proposalId, address _molochAddress)\\n        external\\n        nonReentrant\\n    {\\n        IMOLOCH _thisMoloch = IMOLOCH(_molochAddress);\\n        TributeEscrowAction memory _action = actions[_molochAddress][_proposalId];\\n\\n        require(msg.sender == _action.proposer, \\\"not proposer\\\");\\n        _thisMoloch.cancelProposal(_proposalId); /*reverts if not cancelable*/\\n\\n        emit ActionCanceled(_proposalId, _molochAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"moloch\",\"type\":\"address\"}],\"name\":\"ActionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"moloch\",\"type\":\"address\"}],\"name\":\"ExecuteAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"moloch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"types\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destinationVault\",\"type\":\"address\"}],\"name\":\"ProposeAction\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"actions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_molochAddress\",\"type\":\"address\"}],\"name\":\"cancelAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrowBalances\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_molochAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[3][]\",\"name\":\"_typesTokenIdsAmounts\",\"type\":\"uint256[3][]\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_requestSharesLootFunds\",\"type\":\"uint256[3]\"},{\"internalType\":\"string\",\"name\":\"_details\",\"type\":\"string\"}],\"name\":\"proposeTribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_molochAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIndices\",\"type\":\"uint256[]\"}],\"name\":\"withdrawToDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EscrowMinion","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}