{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/libraries/details/EarringsDetail.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\npragma abicoder v2;\\n\\nimport \\\"base64-sol/base64.sol\\\";\\n\\n/// @title Earrings SVG generator\\nlibrary EarringsDetail {\\n    /// @dev Earrings N°1 => Classic\\n    function item_1() public pure returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /// @dev Earrings N°2 => Circle\\n    function item_2() public pure returns (string memory) {\\n        return base(circle(\\\"000000\\\"));\\n    }\\n\\n    /// @dev Earrings N°3 => Circle Silver\\n    function item_3() public pure returns (string memory) {\\n        return base(circle(\\\"C7D2D4\\\"));\\n    }\\n\\n    /// @dev Earrings N°4 => Ring\\n    function item_4() public pure returns (string memory) {\\n        return base(ring(\\\"000000\\\"));\\n    }\\n\\n    /// @dev Earrings N°5 => Circle Gold\\n    function item_5() public pure returns (string memory) {\\n        return base(circle(\\\"FFDD00\\\"));\\n    }\\n\\n    /// @dev Earrings N°6 => Ring Gold\\n    function item_6() public pure returns (string memory) {\\n        return base(ring(\\\"FFDD00\\\"));\\n    }\\n\\n    /// @dev Earrings N°7 => Heart\\n    function item_7() public pure returns (string memory) {\\n        return\\n            base(\\n                string(\\n                    abi.encodePacked(\\n                        '<path d=\\\"M284.3,247.9c0.1,0.1,0.1,0.1,0.2,0.1s0.2,0,0.2-0.1l3.7-3.8c1.5-1.6,0.4-4.3-1.8-4.3c-1.3,0-1.9,1-2.2,1.2c-0.2-0.2-0.8-1.2-2.2-1.2c-2.2,0-3.3,2.7-1.8,4.3L284.3,247.9z\\\"/>',\\n                        '<path d=\\\"M135,246.6c0,0,0.1,0.1,0.2,0.1s0.1,0,0.2-0.1l3.1-3.1c1.3-1.3,0.4-3.6-1.5-3.6c-1.1,0-1.6,0.8-1.8,1c-0.2-0.2-0.7-1-1.8-1c-1.8,0-2.8,2.3-1.5,3.6L135,246.6z\\\"/>'\\n                    )\\n                )\\n            );\\n    }\\n\\n    /// @dev Earrings N°8 => Gold\\n    function item_8() public pure returns (string memory) {\\n        return\\n            base(\\n                string(\\n                    abi.encodePacked(\\n                        '<path d=\\\"M298.7,228.1l-4.7-1.6c0,0-0.1,0-0.1-0.1v-0.1c2.8-2.7,7.1-17.2,7.2-17.4c0-0.1,0.1-0.1,0.1-0.1l0,0c5.3,1.1,5.6,2.2,5.7,2.4c-3.1,5.4-8,16.7-8.1,16.8C298.9,228,298.8,228.1,298.7,228.1C298.8,228.1,298.8,228.1,298.7,228.1z\\\" style=\\\"fill: #fff700;stroke: #000;stroke-miterlimit: 10;stroke-width: 0.75px\\\"/>'\\n                    )\\n                )\\n            );\\n    }\\n\\n    /// @dev Earrings N°9 => Circle Diamond\\n    function item_9() public pure returns (string memory) {\\n        return base(circle(\\\"AAFFFD\\\"));\\n    }\\n\\n    /// @dev Earrings N°10 => Drop Heart\\n    function item_10() public pure returns (string memory) {\\n        return\\n            base(\\n                string(\\n                    abi.encodePacked(\\n                        drop(true),\\n                        '<path fill=\\\"#F44336\\\" d=\\\"M285.4,282.6c0.1,0.1,0.2,0.2,0.4,0.2s0.3-0.1,0.4-0.2l6.7-6.8c2.8-2.8,0.8-7.7-3.2-7.7c-2.4,0-3.5,1.8-3.9,2.1c-0.4-0.3-1.5-2.1-3.9-2.1c-4,0-6,4.9-3.2,7.7L285.4,282.6z\\\"/>',\\n                        drop(false),\\n                        '<path fill=\\\"#F44336\\\" d=\\\"M134.7,282.5c0.1,0.1,0.2,0.2,0.4,0.2s0.3-0.1,0.4-0.2l6.7-6.8c2.8-2.8,0.8-7.7-3.2-7.7c-2.4,0-3.5,1.8-3.9,2.1c-0.4-0.3-1.5-2.1-3.9-2.1c-4,0-6,4.9-3.2,7.7L134.7,282.5z\\\"/>'\\n                    )\\n                )\\n            );\\n    }\\n\\n    /// @dev Earrings N11 => Ether\\n    function item_11() public pure returns (string memory) {\\n        return\\n            base(\\n                string(\\n                    abi.encodePacked(\\n                        '<path d=\\\"M285.7,242.7l-4.6-2.2l4.6,8l4.6-8L285.7,242.7z\\\"/>',\\n                        '<path d=\\\"M289.8,238.9l-4.1-7.1l-4.1,7.1l4.1-1.9L289.8,238.9z\\\"/>',\\n                        '<path d=\\\"M282,239.9l3.7,1.8l3.8-1.8l-3.8-1.8L282,239.9z\\\"/>',\\n                        '<path d=\\\"M134.5,241.8l-3.4-1.9l3.7,7.3l2.8-7.7L134.5,241.8z\\\"/>',\\n                        '<path d=\\\"M137.3,238l-3.3-6.5l-2.5,6.9l2.8-2L137.3,238z\\\"/>',\\n                        '<path d=\\\"M131.7,239.2l2.8,1.5l2.6-1.8l-2.8-1.5L131.7,239.2z\\\"/>'\\n                    )\\n                )\\n            );\\n    }\\n\\n    /// @dev Earrings N°12 => Drop Ether\\n    function item_12() public pure returns (string memory) {\\n        return\\n            base(\\n                string(\\n                    abi.encodePacked(\\n                        drop(true),\\n                        '<path d=\\\"M285.7,279.7l-4.6-2.2l4.6,8l4.6-8L285.7,279.7z\\\"/>',\\n                        '<path d=\\\"M289.8,275.9l-4.1-7.1l-4.1,7.1l4.1-1.9L289.8,275.9z\\\"/>',\\n                        '<path d=\\\"M282,276.9l3.7,1.8l3.8-1.8l-3.8-1.8L282,276.9z\\\"/><path d=\\\"M282,276.9l3.7,1.8l3.8-1.8l-3.8-1.8L282,276.9z\\\"/>',\\n                        drop(false),\\n                        '<path d=\\\"M135.1,279.7l-4-2.2l4,8l4-8L135.1,279.7z\\\"/>',\\n                        '<path d=\\\"M138.7,275.9l-3.6-7.1l-3.6,7.1l3.6-1.9L138.7,275.9z\\\"/>',\\n                        '<path d=\\\"M131.8,276.9l3.3,1.8l3.3-1.8l-3.3-1.8L131.8,276.9z\\\"/>'\\n                    )\\n                )\\n            );\\n    }\\n\\n    /// @dev earring drop\\n    function drop(bool right) private pure returns (string memory) {\\n        return\\n            string(\\n                right\\n                    ? abi.encodePacked(\\n                        '<circle cx=\\\"285.7\\\" cy=\\\"243.2\\\" r=\\\"3.4\\\"/>',\\n                        '<line fill=\\\"none\\\" stroke=\\\"#000000\\\" stroke-miterlimit=\\\"10\\\" x1=\\\"285.7\\\" y1=\\\"243.2\\\" x2=\\\"285.7\\\" y2=\\\"270.2\\\"/>'\\n                    )\\n                    : abi.encodePacked(\\n                        '<ellipse cx=\\\"135.1\\\" cy=\\\"243.2\\\" rx=\\\"3\\\" ry=\\\"3.4\\\"/>',\\n                        '<line fill=\\\"none\\\" stroke=\\\"#000000\\\" stroke-miterlimit=\\\"10\\\" x1=\\\"135.1\\\" y1=\\\"243.2\\\" x2=\\\"135.1\\\" y2=\\\"270.2\\\"/>'\\n                    )\\n            );\\n    }\\n\\n    /// @dev Generate circle SVG with the given color\\n    function circle(string memory color) private pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<ellipse fill=\\\"#',\\n                    color,\\n                    '\\\" stroke=\\\"#000000\\\" cx=\\\"135.1\\\" cy=\\\"243.2\\\" rx=\\\"3\\\" ry=\\\"3.4\\\"/>',\\n                    '<ellipse fill=\\\"#',\\n                    color,\\n                    '\\\" stroke=\\\"#000000\\\" cx=\\\"286.1\\\" cy=\\\"243.2\\\" rx=\\\"3.3\\\" ry=\\\"3.4\\\"/>'\\n                )\\n            );\\n    }\\n\\n    /// @dev Generate ring SVG with the given color\\n    function ring(string memory color) private pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<path fill=\\\"none\\\" stroke=\\\"#',\\n                    color,\\n                    '\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-miterlimit=\\\"10\\\" d=\\\"M283.5,246c0,0-4.2,2-3.1,6.1c1,4.1,5.1,3.6,5.4,3.5s3.1-0.9,3-5\\\"/>',\\n                    '<path fill=\\\"none\\\" stroke=\\\"#',\\n                    color,\\n                    '\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-miterlimit=\\\"10\\\" d=\\\"M134.3,244.7c0,0-4.2,2-3.1,6.1c1,4.1,5.1,3.6,5.4,3.5c0.3-0.1,3.1-0.9,3-5\\\"/>'\\n                )\\n            );\\n    }\\n\\n    /// @notice Return the earring name of the given id\\n    /// @param id The earring Id\\n    function getItemNameById(uint8 id) public pure returns (string memory name) {\\n        name = \\\"\\\";\\n        if (id == 1) {\\n            name = \\\"Classic\\\";\\n        } else if (id == 2) {\\n            name = \\\"Circle\\\";\\n        } else if (id == 3) {\\n            name = \\\"Circle Silver\\\";\\n        } else if (id == 4) {\\n            name = \\\"Ring\\\";\\n        } else if (id == 5) {\\n            name = \\\"Circle Gold\\\";\\n        } else if (id == 6) {\\n            name = \\\"Ring Gold\\\";\\n        } else if (id == 7) {\\n            name = \\\"Heart\\\";\\n        } else if (id == 8) {\\n            name = \\\"Gold\\\";\\n        } else if (id == 9) {\\n            name = \\\"Circle Diamond\\\";\\n        } else if (id == 10) {\\n            name = \\\"Drop Heart\\\";\\n        } else if (id == 11) {\\n            name = \\\"Ether\\\";\\n        } else if (id == 12) {\\n            name = \\\"Drop Ether\\\";\\n        }\\n    }\\n\\n    /// @dev The base SVG for the earrings\\n    function base(string memory children) private pure returns (string memory) {\\n        return string(abi.encodePacked('<g id=\\\"Earrings\\\">', children, \\\"</g>\\\"));\\n    }\\n}\\n\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getItemNameById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_1\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_10\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_11\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_12\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_2\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_3\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_4\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_5\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_6\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_7\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_8\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"item_9\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"EarringsDetail","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}