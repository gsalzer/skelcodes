{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface obcproto {\r\n\r\n    function noSandwich(address sender, address recipient, address pairAd) external returns (bool);\r\n\r\n    function toggle() external returns(bool);\r\n\r\n    function isActive() external view returns(bool);\r\n\r\n    function setProtected(address prot) external;\r\n}\r\n\r\ncontract RugBomb is Context, IERC20{\r\n\r\n    //RugBomb tokenomics stuff\r\n    mapping (uint256 => uint) private _epochTimestamp;\r\n    mapping (uint16 => uint16) private _epochTax;\r\n    mapping (uint16 => uint16) private _epochBurn;\r\n    uint16 private _epoch;\r\n    uint16 private _flatBuyFee = 3;\r\n    bool private _liquifying;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private constant _totalSupply = 10 * 10**6 * 10**18; //ten million total supply\r\n\r\n    string private _name = \"RugBomb\";\r\n    string private _symbol = \"RUGBOMB\";\r\n    uint8 private _decimals = 18;\r\n\r\n    //hardcoded addresses - full transparency\r\n    address payable private _devWallet = payable(0x8c750Cf74267476421A7b6E85E53BE47c003c20e); \r\n    address private _lpWallet = 0x570a4FbCAA21C7Cb2a1A04fa3724b023b801C1f3;\r\n    address payable private _buyBackWallet = payable(0xc78A2f1E6a5d1E3C6152D4270985fC70C6dE9eDb);\r\n    address private _uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; //canonical address for Uniswap Router02\r\n    address private _pairAd = address(0);\r\n    address private _obcAddress = 0xCE6c65764111337324ca3617D681c0616a4EDed2; //address for the BotCannon\r\n\r\n    IUniswapV2Router02 private UniV2Router;\r\n    obcproto private OBC;\r\n\r\n    constructor() {\r\n        _epoch = 0;\r\n        _epochTimestamp[0] = 1629993600;\r\n        _epochTimestamp[1] = 1630015200;\r\n        _epochTimestamp[2] = 1630036800;\r\n        _epochTimestamp[3] = 1630058400;\r\n        _epochTimestamp[4] = 1630076400;\r\n        _epochTimestamp[5] = 1630080000;\r\n        _epochTax[0] = 5;\r\n        _epochTax[1] = 4;\r\n        _epochTax[2] = 3;\r\n        _epochTax[3] = 2;\r\n        _epochTax[4] = 0;\r\n        _epochBurn[0] = 20;\r\n        _epochBurn[1] = 16;\r\n        _epochBurn[2] = 12;\r\n        _epochBurn[3] = 8;\r\n        _epochBurn[4] = 0;\r\n        _balances[_lpWallet] = _totalSupply;\r\n        OBC = obcproto(_obcAddress);\r\n        UniV2Router = IUniswapV2Router02(_uniRouter);\r\n    }\r\n\r\n    modifier noRecursion {\r\n        _liquifying = true;\r\n        _;\r\n        _liquifying = false;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        require (_allowances[sender][_msgSender()] >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        //first, we check to be sure epoch is set correctly\r\n        _checkEpoch();\r\n\r\n        //next, the BotCannon for sandwich prevention. this isn't a fucking deli.\r\n        require (!OBC.noSandwich(sender, recipient, _pairAd));\r\n        \r\n        //one-time set pair address during addLiquidity, since that should be the first use of this function\r\n        if (_pairAd == address(0) && sender != address(0)) {\r\n            _pairAd = recipient; \r\n        }\r\n\r\n        //ensure we're within the 24 hour countdown, unless it's the LP or the Uni router(for add/removeLiquidity)\r\n        if (sender != _lpWallet && recipient != _lpWallet && recipient != _uniRouter)\r\n        {\r\n            require (block.timestamp >= _epochTimestamp[0] && block.timestamp <= _epochTimestamp[5], \"RugBomb: No trades at this time\");\r\n            //token limit for first 15 minutes\r\n            require (amount <= (_totalSupply * 5 / 1000) || block.timestamp > 1629994500);\r\n        }\r\n        \r\n\r\n        //the usual ERC20 checks\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_balances[sender] >= amount, \"ERC20: transfer exceeds balance\");\r\n        require(amount > 0, \"Transfer = 0\");\r\n        \r\n        //set defaults for fallback\r\n        uint256 amountRemaining = amount;\r\n        uint256 taxes = 0;\r\n        uint256 buyBack = 0;\r\n\r\n        //logic for buys\r\n        if (sender == _pairAd && recipient != _lpWallet && recipient != _uniRouter && recipient != _buyBackWallet)\r\n        {\r\n            if (_epoch < 4) taxes = amount * _flatBuyFee / 100;\r\n            amountRemaining = amount - taxes;\r\n        }\r\n        //logic for sells\r\n        if (recipient == _pairAd && sender != _lpWallet && sender != address(this))\r\n        {\r\n            taxes = amount * _epochTax[_epoch] / 100;\r\n            amountRemaining = amount - taxes;\r\n\r\n            buyBack = amount * _epochBurn[_epoch] / 100;\r\n            amountRemaining = amountRemaining - buyBack;\r\n        }\r\n        \r\n        _balances[address(this)] += buyBack;        \r\n        if (_balances[address(this)] > 100 * 10**18 && !_liquifying && recipient == _pairAd){\r\n            if (_balances[address(this)] >= buyBack && buyBack > 100 * 10**18) \r\n                liquidateTokens(buyBack, _buyBackWallet);\r\n        } \r\n\r\n        _balances[address(this)] += taxes;\r\n        if (_balances[address(this)] > 100 * 10**18 && !_liquifying && recipient == _pairAd){\r\n            uint256 _liqAmount = _balances[address(this)];\r\n            if (_liqAmount > amount * 10 / 100) _liqAmount = amount * 10 / 100;\r\n            liquidateTokens(_liqAmount, _devWallet);\r\n        }\r\n        //_balances[_devWallet] += taxes;\r\n        //_balances[address(0)] += burn;\r\n        _balances[recipient] += amountRemaining;\r\n        _balances[sender] -= amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    function _checkEpoch() private {\r\n        if (_epoch == 0 && block.timestamp >= _epochTimestamp[1]) _epoch = 1;\r\n        if (_epoch == 1 && block.timestamp >= _epochTimestamp[2]) _epoch = 2;\r\n        if (_epoch == 2 && block.timestamp >= _epochTimestamp[3]) _epoch = 3;\r\n        if (_epoch == 3 && block.timestamp >= _epochTimestamp[4]) _epoch = 4;\r\n        if (_epoch == 4 && block.timestamp >= _epochTimestamp[5]) _epoch = 5;\r\n    }\r\n\r\n    function currentEpoch() public view returns (uint16){\r\n        return _epoch;\r\n    }\r\n\r\n    function pairAddr() public view returns (address){\r\n        return _pairAd;\r\n    }\r\n\r\n    function sendETH(uint256 amount, address payable _to) private {\r\n        (bool sent, bytes memory data) = _to.call{value: amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    function liquidateTokens(uint256 amount, address payable recipient) private noRecursion {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = UniV2Router.WETH();\r\n\r\n        _approve(address(this), _uniRouter, amount);\r\n        uint256 approval = _allowances[address(this)][_uniRouter];\r\n        UniV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(amount, 0, path, address(this), block.timestamp);\r\n\r\n        if (address(this).balance > 0) sendETH(address(this).balance, recipient);\r\n    }\r\n\r\n    function emergencyWithdrawETH() external {\r\n        require (_msgSender() == _buyBackWallet || _msgSender() == _devWallet, \"Unauthorized\");\r\n        (bool sent, bytes memory data) = _msgSender().call{value: address(this).balance}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"RugBomb","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://30eaf5ea85b2b394f199580578e94145bbaca5d94be2a744e777af5746ca27a5"}]}