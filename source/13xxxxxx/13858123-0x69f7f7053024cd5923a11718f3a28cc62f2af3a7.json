{"status":"1","message":"OK","result":[{"SourceCode":"//    _____ ______   _________  _____ ______          \r\n//   |\\   _ \\  _   \\|\\___   ___\\\\   _ \\  _   \\        \r\n//   \\ \\  \\\\\\__\\ \\  \\|___ \\  \\_\\ \\  \\\\\\__\\ \\  \\       \r\n//    \\ \\  \\\\|__| \\  \\   \\ \\  \\ \\ \\  \\\\|__| \\  \\      \r\n//     \\ \\  \\    \\ \\  \\   \\ \\  \\ \\ \\  \\    \\ \\  \\     \r\n//      \\ \\__\\    \\ \\__\\   \\ \\__\\ \\ \\__\\    \\ \\__\\    \r\n//       \\|__|     \\|__|    \\|__|  \\|__|     \\|__|\r\n//  \r\n//    ________  ________  _________  _______   ___       ___       ___  _________  _______      \r\n//   |\\   ____\\|\\   __  \\|\\___   ___\\\\  ___ \\ |\\  \\     |\\  \\     |\\  \\|\\___   ___\\\\  ___ \\     \r\n//   \\ \\  \\___|\\ \\  \\|\\  \\|___ \\  \\_\\ \\   __/|\\ \\  \\    \\ \\  \\    \\ \\  \\|___ \\  \\_\\ \\   __/|    \r\n//    \\ \\_____  \\ \\   __  \\   \\ \\  \\ \\ \\  \\_|/_\\ \\  \\    \\ \\  \\    \\ \\  \\   \\ \\  \\ \\ \\  \\_|/__  \r\n//     \\|____|\\  \\ \\  \\ \\  \\   \\ \\  \\ \\ \\  \\_|\\ \\ \\  \\____\\ \\  \\____\\ \\  \\   \\ \\  \\ \\ \\  \\_|\\ \\ \r\n//       ____\\_\\  \\ \\__\\ \\__\\   \\ \\__\\ \\ \\_______\\ \\_______\\ \\_______\\ \\__\\   \\ \\__\\ \\ \\_______\\\r\n//      |\\_________\\|__|\\|__|    \\|__|  \\|_______|\\|_______|\\|_______|\\|__|    \\|__|  \\|_______|\r\n//      \\|_________|                                                                            \r\n//                                                                                             \r\n//    ________  _________  ________  _________  ___  ________  ________      \r\n//   |\\   ____\\|\\___   ___\\\\   __  \\|\\___   ___\\\\  \\|\\   __  \\|\\   ___  \\    \r\n//   \\ \\  \\___|\\|___ \\  \\_\\ \\  \\|\\  \\|___ \\  \\_\\ \\  \\ \\  \\|\\  \\ \\  \\\\ \\  \\   \r\n//    \\ \\_____  \\   \\ \\  \\ \\ \\   __  \\   \\ \\  \\ \\ \\  \\ \\  \\\\\\  \\ \\  \\\\ \\  \\  \r\n//     \\|____|\\  \\   \\ \\  \\ \\ \\  \\ \\  \\   \\ \\  \\ \\ \\  \\ \\  \\\\\\  \\ \\  \\\\ \\  \\ \r\n//       ____\\_\\  \\   \\ \\__\\ \\ \\__\\ \\__\\   \\ \\__\\ \\ \\__\\ \\_______\\ \\__\\\\ \\__\\\r\n//      |\\_________\\   \\|__|  \\|__|\\|__|    \\|__|  \\|__|\\|_______|\\|__| \\|__|\r\n//      \\|_________|                                                         \r\n//\r\n//\r\n//\r\n//                /#######*                                                 \r\n//             ##################,                                          \r\n//           .########################                                      \r\n//          ,,############################                %%%%%%            \r\n//         ,,,###############################,          .%%%%%%%%,          \r\n//        ,,,,,#################################*       /%%%%%%%%           \r\n//       .,,,,,/###################################,  %%%%%,//.             \r\n//       ,,,.,,,/###################################%%%%%                   \r\n//       ,,,,,,,,,###############################%%%%%##*                   \r\n//       ,,,,,,,,,,########################%%%%%%%%########                 \r\n//       ,,,,,,,,,,,,################%%%%%%%%%%%%%###########               \r\n//       ,,,,,,,,,,,,,(#######%%%%%%%%%%#%%%%%%%%##############             \r\n//       .,,,,,,,,,,,,,,#%%%%%%%%######%%%%%%%%%################(           \r\n//        *,,,,,,,,,,,,,,,##########%%%%%##%%%%###################.         \r\n//         ,,,,,,,,,,,,,,,,,/#####%%%%%###%%%%######################        \r\n//          ,,,,,,,,.,,,,,,,.,,%%%%%#####%%%%########################       \r\n//           *,,,,,,,,,,,,,,,,,,,#######%%%%##########################      \r\n//            ,,,,,,,,,,,,,,,,,,,,,,###%%%%############################     \r\n//              *,,,,,,,,,,,,,,,,,,,,,,#%%##############################    \r\n//                *,,,,,,,,,.,,,,,,,,,,,,,(#############################.   \r\n//                  **,,,,,,,,,,,,,,,,,,,,,,,,##########################*   \r\n//                 .*****,,,,,,,,,,,,,,,,,,,,,,,,,######################    \r\n//                 **********,,,,,,,,,,,,,,,,,,,,,,,,,,(##############,     \r\n//                 .**********,***,,,,,,,,,,.,,,,,,,,,,,,,,,,,,,***         \r\n//                    ******        ,******,,,,,,,,,,,,,******.             \r\n//                    ,,,,,,                                                \r\n//                    ,,,,,,                                                \r\n//                 ************                                             \r\n//                 ************                                             \r\n//                 ************                                             \r\n//                 ************                                             \r\n//                 ************                                             \r\n//              ,,,,,,,,,,,,,,,,,,                                          \r\n//             ,,,,,,,,,,,,,,,,,,,,                                         \r\n//            .,,,,,,,,,,,,,,,,,,,,.                                        \r\n//            ,,,,,,,,,,,,,,.,,,,,,,                                        \r\n//         ,,************************,,                                     \r\n//        ******************************                                    \r\n//        ,****************************.  \r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external;\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\nabstract contract SatelliteReceiver {\r\n    // DO NOT CHANGE THIS!\r\n    address public satelliteStationAddress;\r\n    uint256 public SSTokensMinted = 0;\r\n\r\n    // YOU NEED TO CONFIGURE THIS!\r\n    address public SSTokenReceiver;\r\n    address public SSTokenAddress;\r\n    uint256 public SSTokensPerMint;\r\n    uint256 public SSTokensAvailable;\r\n\r\n    function _satelliteMint(uint256 amount_) internal {\r\n        require(msg.sender == satelliteStationAddress, \"_satelliteMint: msg.sender is not Satellite Station!\");\r\n        require(SSTokensAvailable >= SSTokensMinted + amount_, \"_satelliteMint: amount_ requested over maximum avaialble tokens!\");\r\n\r\n        SSTokensMinted += amount_;\r\n    }\r\n}\r\n\r\ninterface iSatelliteReceiver {\r\n    function satelliteMint(uint256 amount_) external;\r\n    function SSTokenReceiver() external view returns (address);\r\n    function SSTokenAddress() external view returns (address);\r\n    function SSTokensPerMint() external view returns (uint256);\r\n}\r\n\r\ninterface iMES {\r\n    // View Functions\r\n    function balanceOf(address address_) external view returns (uint256);\r\n    function pendingRewards(address address_) external view returns (uint256); \r\n    function getStorageClaimableTokens(address address_) external view returns (uint256);\r\n    function getPendingClaimableTokens(address address_) external view returns (uint256);\r\n    function getTotalClaimableTokens(address address_) external view returns (uint256);\r\n    // Administration\r\n    function setYieldRate(address address_, uint256 yieldRate_) external;\r\n    function addYieldRate(address address_, uint256 yieldRateAdd_) external;\r\n    function subYieldRate(address address_, uint256 yieldRateSub_) external;\r\n    // Updating\r\n    function updateReward(address address_) external;\r\n    // Credits System\r\n    function deductCredits(address address_, uint256 amount_) external;\r\n    function addCredits(address address_, uint256 amount_) external;\r\n    // Burn\r\n    function burn(address from, uint256 amount_) external;\r\n}\r\n\r\n// Open0x Ownable (by 0xInuarashi)\r\nabstract contract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed oldOwner_, address indexed newOwner_);\r\n    constructor() { owner = msg.sender; }\r\n    modifier onlyOwner {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function _transferOwnership(address newOwner_) internal virtual {\r\n        address _oldOwner = owner;\r\n        owner = newOwner_;\r\n        emit OwnershipTransferred(_oldOwner, newOwner_);    \r\n    }\r\n    function transferOwnership(address newOwner_) public virtual onlyOwner {\r\n        require(newOwner_ != address(0x0), \"Ownable: new owner is the zero address!\");\r\n        _transferOwnership(newOwner_);\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0x0));\r\n    }\r\n}\r\n\r\ncontract SatelliteStation is Ownable {\r\n    /* \r\n    MTM Sattelite Station\r\n\r\n    An open interface with NFT projects to be able to mint\r\n    from contracts through the satelliteMint function.\r\n\r\n    Natively supports $MES and can be adapted to support other\r\n    ERC20 tokens in the future as well.\r\n    */\r\n\r\n    // Initialize MES contract\r\n    address public MESAddress = 0x984b6968132DA160122ddfddcc4461C995741513;\r\n    iMES public MES = iMES(0x984b6968132DA160122ddfddcc4461C995741513);\r\n\r\n    // Contract Variables\r\n    address internal burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 internal globalModulus = 10 ** 14;\r\n\r\n    // Structs\r\n    struct SatelliteSettings {\r\n        address tokenAddress_;\r\n        uint40 tokensPerMint_;\r\n        uint16 amountForMint_;\r\n        uint16 amountPerAddress_;\r\n        uint16 amountMinted_;\r\n    }\r\n\r\n    struct TransferForMintSettings {\r\n        address tokenAddress_;\r\n        uint40 tokensPerMint_;\r\n        uint16 amountForMint_;\r\n        uint16 amountPerAddress_;\r\n        uint16 amountMinted_;\r\n        address receiverAddress_;\r\n    }\r\n\r\n    struct BurnWLSettings {\r\n        address tokenAddress_;\r\n        uint40 tokensPerWL_;\r\n        uint16 amountForWL_;\r\n        uint16 amountAllocated_;\r\n    }\r\n\r\n    // Mappings (Satellite Mint)\r\n    mapping(address => SatelliteSettings) public contractToSatelliteSettings;\r\n    mapping(address => mapping(address => uint16)) public addressToSatelliteMinted;\r\n\r\n    // Mappings (Transfer For Mint)\r\n    mapping(address => TransferForMintSettings) public contractToTransferForMintSettings;\r\n    mapping(address => mapping(address => uint16)) public addressToTransferForMintAmount;\r\n    \r\n    // Mappings (Satellite Burn for WL)\r\n    mapping(string => BurnWLSettings) public projectToBurnWLSettings;\r\n    mapping(string => mapping(address => bool)) public projectToWL;\r\n\r\n    // Events\r\n    event SatelliteMint(address minter_, address indexed contractAddress_, address tokenAddress_, uint256 tokensPerMint_, uint256 amount_, uint256 tokensDeducted_, bool useCredits_);\r\n    event SatelliteTransferForMint(address minter_, address indexed contractAddress_, address tokenAddress_, uint256 tokensPerMint_, uint16 amountMinted_, address receiverAddress_);\r\n    event SatelliteBurnForWL(address burner_, string indexed projectName_, uint256 amount_);\r\n\r\n\r\n    function addSatelliteSetting(address contractAddress_, address tokenAddress_, uint40 tokensPerMint_, uint16 amountForMint_, uint16 amountPerAddress_) external onlyOwner {\r\n        SatelliteSettings memory _SatelliteSettings = SatelliteSettings(\r\n            tokenAddress_, \r\n            tokensPerMint_, \r\n            amountForMint_, \r\n            amountPerAddress_,\r\n            0\r\n        );\r\n        contractToSatelliteSettings[contractAddress_] = _SatelliteSettings; \r\n    }\r\n\r\n    function addTransferForMintSetting(address contractAddress_, address tokenAddress_, uint40 tokensPerMint_, uint16 amountForMint_, uint16 amountPerAddress_, address receiverAddress_) external onlyOwner {\r\n        TransferForMintSettings memory _TransferForMintSettings = TransferForMintSettings(\r\n            tokenAddress_,\r\n            tokensPerMint_,\r\n            amountForMint_,\r\n            amountPerAddress_,\r\n            0,\r\n            receiverAddress_\r\n        );\r\n        contractToTransferForMintSettings[contractAddress_] = _TransferForMintSettings;\r\n    }\r\n\r\n    function addBurnWLSetting(string memory projectName_, address tokenAddress_, uint40 tokensPerWL_, uint16 amountForWL_) external onlyOwner {\r\n        BurnWLSettings memory _BurnWLSettings = BurnWLSettings(\r\n            tokenAddress_, \r\n            tokensPerWL_, \r\n            amountForWL_, \r\n            0\r\n        );\r\n        projectToBurnWLSettings[projectName_] = _BurnWLSettings; \r\n    }\r\n\r\n    // Satellite Minting System\r\n    function satelliteMint(address contractAddress_, address tokenAddress_, uint256 amount_, bool useCredits_) external {\r\n        SatelliteSettings memory _SatelliteSettings = contractToSatelliteSettings[contractAddress_];\r\n        address _SSTokenAddress = iSatelliteReceiver(contractAddress_).SSTokenAddress();\r\n        address _SSTokenReceiver = iSatelliteReceiver(contractAddress_).SSTokenReceiver();\r\n        uint256 _SSTokensPerMint = iSatelliteReceiver(contractAddress_).SSTokensPerMint();\r\n        uint256 _tokensToDeduct = _SSTokensPerMint * amount_;\r\n\r\n        require(_SatelliteSettings.tokenAddress_ != address(0x0),\r\n            \"satelliteMint: This contract is not in the Satellite Station program!\");\r\n        require(_SSTokenAddress == tokenAddress_,\r\n            \"satelliteMint: Token Address to Receiver mismatch!\");\r\n        require(_SatelliteSettings.amountForMint_ >= _SatelliteSettings.amountMinted_ + amount_,\r\n            \"satelliteMint: Amount requested to mint exceeds set remaining!\");\r\n        require(_SatelliteSettings.amountPerAddress_ >= addressToSatelliteMinted[contractAddress_][msg.sender] + amount_,\r\n            \"satelliteMint: Amount for mint exceeds limit per address!\");\r\n        require(_SSTokensPerMint == (uint256(_SatelliteSettings.tokensPerMint_) * globalModulus),\r\n            \"satelliteMint: Token cost per mint mismatch with receiver!\");\r\n\r\n        // $MES Credit System and ERC20 Transfer\r\n        if (tokenAddress_ == MESAddress && useCredits_) {\r\n            // Update Reward First Flow\r\n            require(_tokensToDeduct <= MES.getTotalClaimableTokens(msg.sender), \"Not enough MES Credits to do action!\");\r\n            if (_tokensToDeduct >= MES.getStorageClaimableTokens(msg.sender)) { MES.updateReward(msg.sender); }\r\n            // Credit Balance Flow\r\n            MES.deductCredits(msg.sender, _tokensToDeduct);\r\n            MES.addCredits(_SSTokenReceiver, _tokensToDeduct);\r\n        } else {\r\n            require(_tokensToDeduct <= IERC20(tokenAddress_).balanceOf(msg.sender), \"Not enough ERC20 to do action!\");\r\n            IERC20(tokenAddress_).transferFrom(msg.sender, _SSTokenReceiver, _tokensToDeduct);\r\n        }\r\n\r\n        addressToSatelliteMinted[contractAddress_][msg.sender] += uint16(amount_);\r\n        contractToSatelliteSettings[contractAddress_].amountMinted_ += uint16(amount_);\r\n\r\n        // The satelliteMint function is called after all the necessary checks.\r\n        iSatelliteReceiver(contractAddress_).satelliteMint(amount_);\r\n\r\n        emit SatelliteMint(msg.sender, contractAddress_, _SSTokenAddress, _SSTokensPerMint, amount_, _tokensToDeduct, useCredits_);\r\n    }\r\n\r\n    // Satellite Transfer for Mint System\r\n    function satelliteTransferForMint(address contractAddress_, uint256 amount_, bool useCredits_) external {\r\n        TransferForMintSettings memory _TransferForMintSettings = contractToTransferForMintSettings[contractAddress_]; \r\n        address _tokenAddress = _TransferForMintSettings.tokenAddress_;\r\n        uint256 _tokensToDeduct = (uint256(_TransferForMintSettings.tokensPerMint_) * globalModulus) * amount_;\r\n        address _receiverAddress = _TransferForMintSettings.receiverAddress_;\r\n\r\n        require(_TransferForMintSettings.tokenAddress_ != address(0x0), \r\n            \"satelliteTransferForMint: This contract is not in the Satellite Station program!\");\r\n        require(_TransferForMintSettings.amountForMint_ >= _TransferForMintSettings.amountMinted_ + amount_,\r\n            \"satelliteTransferForMint: No more mints available!\");\r\n        require(_TransferForMintSettings.amountPerAddress_ >= addressToTransferForMintAmount[contractAddress_][msg.sender] + amount_, \r\n            \"satelliteTransferForMint: Amount exceeds allowed mints per address!\");\r\n        \r\n        // $MES Credit System and ERC20 Transfer\r\n        if (_TransferForMintSettings.tokenAddress_ == MESAddress && useCredits_) {\r\n            // Update Reward First Flow\r\n            require(_tokensToDeduct <= MES.getTotalClaimableTokens(msg.sender), \"Not enough MES Credits to do action!\");\r\n            if (_tokensToDeduct >= MES.getStorageClaimableTokens(msg.sender)) { MES.updateReward(msg.sender); }\r\n            // Credit Balance Flow\r\n            MES.deductCredits(msg.sender, _tokensToDeduct);\r\n            MES.addCredits(_receiverAddress, _tokensToDeduct);\r\n        } else {\r\n            require(_tokensToDeduct <= IERC20(_tokenAddress).balanceOf(msg.sender), \"Not enough ERC20 to do action!\");\r\n            IERC20(_tokenAddress).transferFrom(msg.sender, _receiverAddress, _tokensToDeduct);\r\n        }\r\n\r\n        addressToTransferForMintAmount[contractAddress_][msg.sender] += uint16(amount_);\r\n        contractToTransferForMintSettings[contractAddress_].amountMinted_ += uint16(amount_);\r\n        \r\n        emit SatelliteTransferForMint(msg.sender, contractAddress_, _tokenAddress, _tokensToDeduct, contractToTransferForMintSettings[contractAddress_].amountMinted_, _receiverAddress);\r\n    }\r\n\r\n    // Satellite Burn for Whitelist System\r\n    function satelliteBurnForWL(string memory projectName_, bool useCredits_) external {\r\n        require(!projectToWL[projectName_][msg.sender], \"satelliteBurnForWL: You are already whitelisted!\");\r\n\r\n        BurnWLSettings memory _BurnWLSettings = projectToBurnWLSettings[projectName_];\r\n        \r\n        address _tokenAddress = _BurnWLSettings.tokenAddress_;\r\n        uint256 _tokensToDeduct = uint256(_BurnWLSettings.tokensPerWL_) * globalModulus;\r\n\r\n        // $MES Credit System\r\n        if (_tokenAddress == MESAddress && useCredits_) {\r\n            // Update Reward First Flow\r\n            require(_tokensToDeduct <= MES.getTotalClaimableTokens(msg.sender), \"Not enough MES Credits to do action!\");\r\n            if (_tokensToDeduct >= MES.getStorageClaimableTokens(msg.sender)) { MES.updateReward(msg.sender); }\r\n            // Deduct Credits Flow\r\n            MES.deductCredits(msg.sender, _tokensToDeduct);\r\n        } else {\r\n            require(_tokensToDeduct <= IERC20(_tokenAddress).balanceOf(msg.sender), \"Not enough ERC20 to do action!\");\r\n            IERC20(_tokenAddress).transferFrom(msg.sender, burnAddress, _tokensToDeduct);\r\n        }\r\n        \r\n        // add them to the WL!\r\n        projectToWL[projectName_][msg.sender] = true;\r\n        emit SatelliteBurnForWL(msg.sender, projectName_, _tokensToDeduct);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"projectName_\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"SatelliteBurnForWL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensPerMint_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensDeducted_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useCredits_\",\"type\":\"bool\"}],\"name\":\"SatelliteMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensPerMint_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"amountMinted_\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiverAddress_\",\"type\":\"address\"}],\"name\":\"SatelliteTransferForMint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MES\",\"outputs\":[{\"internalType\":\"contract iMES\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MESAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"projectName_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"tokensPerWL_\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"amountForWL_\",\"type\":\"uint16\"}],\"name\":\"addBurnWLSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"tokensPerMint_\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"amountForMint_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"amountPerAddress_\",\"type\":\"uint16\"}],\"name\":\"addSatelliteSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"tokensPerMint_\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"amountForMint_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"amountPerAddress_\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"receiverAddress_\",\"type\":\"address\"}],\"name\":\"addTransferForMintSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToSatelliteMinted\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToTransferForMintAmount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractToSatelliteSettings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"tokensPerMint_\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"amountForMint_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"amountPerAddress_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"amountMinted_\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractToTransferForMintSettings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"tokensPerMint_\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"amountForMint_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"amountPerAddress_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"amountMinted_\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"receiverAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"projectToBurnWLSettings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"tokensPerWL_\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"amountForWL_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"amountAllocated_\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"projectToWL\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"projectName_\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"useCredits_\",\"type\":\"bool\"}],\"name\":\"satelliteBurnForWL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useCredits_\",\"type\":\"bool\"}],\"name\":\"satelliteMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useCredits_\",\"type\":\"bool\"}],\"name\":\"satelliteTransferForMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SatelliteStation","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a8536ff0e5d985a9d0110f8ea236a793ed92dcea00519fc95cd037000595aa35"}]}