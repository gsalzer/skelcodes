{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StringUtilsV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/// Deployed by CyberPnk <cyberpnk@stringutilsv1.cyberpnk.win>\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./NumberToString.sol\\\";\\r\\nimport \\\"./AddressToString.sol\\\";\\r\\nimport \\\"./Base64.sol\\\";\\r\\n\\r\\ncontract StringUtilsV1 {\\r\\n    function base64Encode(bytes memory data) external pure returns (string memory) {\\r\\n        return Base64.encode(data);\\r\\n    }\\r\\n\\r\\n    function base64EncodeJson(bytes memory data) external pure returns (string memory) {\\r\\n        return string(abi.encodePacked('data:application/json;base64,', Base64.encode(data)));\\r\\n    }\\r\\n\\r\\n    function base64EncodeSvg(bytes memory data) external pure returns (string memory) {\\r\\n        return string(abi.encodePacked(\\\"data:image/svg+xml;base64,\\\", Base64.encode(data)));\\r\\n    }\\r\\n\\r\\n    function numberToString(uint256 value) external pure returns (string memory) {\\r\\n        return NumberToString.numberToString(value);\\r\\n    }\\r\\n\\r\\n    function addressToString(address account) external pure returns(string memory) {\\r\\n        return AddressToString.addressToString(account);\\r\\n    }\\r\\n\\r\\n    // This is quite inefficient, should be used only in read functions\\r\\n    function split(string calldata str, string calldata delim) external pure returns(string[] memory) {\\r\\n        uint numStrings = 1;\\r\\n        for (uint i=0; i < bytes(str).length; i++) {            \\r\\n            if (bytes(str)[i] == bytes(delim)[0]) {\\r\\n                numStrings += 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        string[] memory strs = new string[](numStrings);\\r\\n\\r\\n        string memory current = \\\"\\\";\\r\\n        uint strIndex = 0;\\r\\n        for (uint i=0; i < bytes(str).length; i++) {            \\r\\n            if (bytes(str)[i] == bytes(delim)[0]) {\\r\\n                strs[strIndex++] = current;\\r\\n                current = \\\"\\\";\\r\\n            } else {\\r\\n                current = string(abi.encodePacked(current, bytes(str)[i]));\\r\\n            }\\r\\n        }\\r\\n        strs[strIndex] = current;\\r\\n        return strs;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/NumberToString.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary NumberToString {\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     *\\r\\n     *\\r\\n     * Inspired by OraclizeAPI's implementation - MIT licence\\r\\n     * https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n     * Copied from Mad Dog Jones' replicator\\r\\n     */\\r\\n    function numberToString(uint256 value) internal pure returns (string memory) {\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/AddressToString.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary AddressToString {\\r\\n    function addressToString(address account) internal pure returns(string memory) {\\r\\n        return toString(abi.encodePacked(account));\\r\\n    }\\r\\n\\r\\n    function toString(uint256 value) private pure returns(string memory) {\\r\\n        return toString(abi.encodePacked(value));\\r\\n    }\\r\\n\\r\\n    function toString(bytes32 value) private pure returns(string memory) {\\r\\n        return toString(abi.encodePacked(value));\\r\\n    }\\r\\n\\r\\n    function toString(bytes memory data) private pure returns(string memory) {\\r\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\r\\n\\r\\n        bytes memory str = new bytes(2 + data.length * 2);\\r\\n        str[0] = \\\"0\\\";\\r\\n        str[1] = \\\"x\\\";\\r\\n        for (uint i = 0; i < data.length; i++) {\\r\\n            str[2+i*2] = alphabet[uint(uint8(data[i] >> 4))];\\r\\n            str[3+i*2] = alphabet[uint(uint8(data[i] & 0x0f))];\\r\\n        }\\r\\n        return string(str);\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/// [MIT License]\\r\\n/// @title Base64\\r\\n/// @notice Provides a function for encoding some bytes in base64\\r\\n/// @author Brecht Devos <brecht@loopring.org>\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Base64 {\\r\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    /// @notice Encodes some bytes to the base64 representation\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        uint256 len = data.length;\\r\\n        if (len == 0) return \\\"\\\";\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\r\\n\\r\\n        // Add some extra buffer at the end\\r\\n        bytes memory result = new bytes(encodedLen + 32);\\r\\n\\r\\n        bytes memory table = TABLE;\\r\\n\\r\\n        assembly {\\r\\n            let tablePtr := add(table, 1)\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            for {\\r\\n                let i := 0\\r\\n            } lt(i, len) {\\r\\n\\r\\n            } {\\r\\n                i := add(i, 3)\\r\\n                let input := and(mload(add(data, i)), 0xffffff)\\r\\n\\r\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\r\\n                out := shl(8, out)\\r\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\r\\n                out := shl(224, out)\\r\\n\\r\\n                mstore(resultPtr, out)\\r\\n\\r\\n                resultPtr := add(resultPtr, 4)\\r\\n            }\\r\\n\\r\\n            switch mod(len, 3)\\r\\n            case 1 {\\r\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n            }\\r\\n\\r\\n            mstore(result, encodedLen)\\r\\n        }\\r\\n\\r\\n        return string(result);\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addressToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"base64Encode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"base64EncodeJson\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"base64EncodeSvg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"numberToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"delim\",\"type\":\"string\"}],\"name\":\"split\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"StringUtilsV1","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}