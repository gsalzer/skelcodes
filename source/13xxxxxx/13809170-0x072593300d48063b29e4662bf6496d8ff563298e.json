{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.14;\r\n\r\ncontract Constant {\r\n    enum ActionType { DepositAction, WithdrawAction, BorrowAction, RepayAction }\r\n    address public constant ETH_ADDR = 0x000000000000000000000000000000000000000E;\r\n    uint256 public constant INT_UNIT = 10 ** uint256(18);\r\n    uint256 public constant ACCURACY = 10 ** 18;\r\n    // Polygon mainnet blocks per year\r\n    uint256 public constant BLOCKS_PER_YEAR = 2102400;\r\n}\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n// This is for per user\r\nlibrary AccountTokenLib {\r\n    using SafeMath for uint256;\r\n    struct TokenInfo {\r\n        // Deposit info\r\n        uint256 depositPrincipal;   // total deposit principal of ther user\r\n        uint256 depositInterest;    // total deposit interest of the user\r\n        uint256 lastDepositBlock;   // the block number of user's last deposit\r\n        // Borrow info\r\n        uint256 borrowPrincipal;    // total borrow principal of ther user\r\n        uint256 borrowInterest;     // total borrow interest of ther user\r\n        uint256 lastBorrowBlock;    // the block number of user's last borrow\r\n    }\r\n\r\n    uint256 constant BASE = 10**18;\r\n\r\n    // returns the principal\r\n    function getDepositPrincipal(TokenInfo storage self) public view returns(uint256) {\r\n        return self.depositPrincipal;\r\n    }\r\n\r\n    function getBorrowPrincipal(TokenInfo storage self) public view returns(uint256) {\r\n        return self.borrowPrincipal;\r\n    }\r\n\r\n    function getDepositBalance(TokenInfo storage self, uint accruedRate) public view returns(uint256) {\r\n        return self.depositPrincipal.add(calculateDepositInterest(self, accruedRate));\r\n    }\r\n\r\n    function getBorrowBalance(TokenInfo storage self, uint accruedRate) public view returns(uint256) {\r\n        return self.borrowPrincipal.add(calculateBorrowInterest(self, accruedRate));\r\n    }\r\n\r\n    function getLastDepositBlock(TokenInfo storage self) public view returns(uint256) {\r\n        return self.lastDepositBlock;\r\n    }\r\n\r\n    function getLastBorrowBlock(TokenInfo storage self) public view returns(uint256) {\r\n        return self.lastBorrowBlock;\r\n    }\r\n\r\n    function getDepositInterest(TokenInfo storage self) public view returns(uint256) {\r\n        return self.depositInterest;\r\n    }\r\n\r\n    function getBorrowInterest(TokenInfo storage self) public view returns(uint256) {\r\n        return self.borrowInterest;\r\n    }\r\n\r\n    function borrow(TokenInfo storage self, uint256 amount, uint256 accruedRate, uint256 _block) public {\r\n        newBorrowCheckpoint(self, accruedRate, _block);\r\n        self.borrowPrincipal = self.borrowPrincipal.add(amount);\r\n    }\r\n\r\n    /**\r\n     * Update token info for withdraw. The interest will be withdrawn with higher priority.\r\n     */\r\n    function withdraw(TokenInfo storage self, uint256 amount, uint256 accruedRate, uint256 _block) public {\r\n        newDepositCheckpoint(self, accruedRate, _block);\r\n        if (self.depositInterest >= amount) {\r\n            self.depositInterest = self.depositInterest.sub(amount);\r\n        } else if (self.depositPrincipal.add(self.depositInterest) >= amount) {\r\n            self.depositPrincipal = self.depositPrincipal.sub(amount.sub(self.depositInterest));\r\n            self.depositInterest = 0;\r\n        } else {\r\n            self.depositPrincipal = 0;\r\n            self.depositInterest = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update token info for deposit\r\n     */\r\n    function deposit(TokenInfo storage self, uint256 amount, uint accruedRate, uint256 _block) public {\r\n        newDepositCheckpoint(self, accruedRate, _block);\r\n        self.depositPrincipal = self.depositPrincipal.add(amount);\r\n    }\r\n\r\n    function repay(TokenInfo storage self, uint256 amount, uint accruedRate, uint256 _block) public {\r\n        // updated rate (new index rate), applying the rate from startBlock(checkpoint) to currBlock\r\n        newBorrowCheckpoint(self, accruedRate, _block);\r\n        // user owes money, then he tries to repays\r\n        if (self.borrowInterest > amount) {\r\n            self.borrowInterest = self.borrowInterest.sub(amount);\r\n        } else if (self.borrowPrincipal.add(self.borrowInterest) > amount) {\r\n            self.borrowPrincipal = self.borrowPrincipal.sub(amount.sub(self.borrowInterest));\r\n            self.borrowInterest = 0;\r\n        } else {\r\n            self.borrowPrincipal = 0;\r\n            self.borrowInterest = 0;\r\n        }\r\n    }\r\n\r\n    function newDepositCheckpoint(TokenInfo storage self, uint accruedRate, uint256 _block) public {\r\n        self.depositInterest = calculateDepositInterest(self, accruedRate);\r\n        self.lastDepositBlock = _block;\r\n    }\r\n\r\n    function newBorrowCheckpoint(TokenInfo storage self, uint accruedRate, uint256 _block) public {\r\n        self.borrowInterest = calculateBorrowInterest(self, accruedRate);\r\n        self.lastBorrowBlock = _block;\r\n    }\r\n\r\n    // Calculating interest according to the new rate\r\n    // calculated starting from last deposit checkpoint\r\n    function calculateDepositInterest(TokenInfo storage self, uint accruedRate) public view returns(uint256) {\r\n        return self.depositPrincipal.add(self.depositInterest).mul(accruedRate).sub(self.depositPrincipal.mul(BASE)).div(BASE);\r\n    }\r\n\r\n    function calculateBorrowInterest(TokenInfo storage self, uint accruedRate) public view returns(uint256) {\r\n        uint256 _balance = self.borrowPrincipal;\r\n        if(accruedRate == 0 || _balance == 0 || BASE >= accruedRate) {\r\n            return self.borrowInterest;\r\n        } else {\r\n            return _balance.add(self.borrowInterest).mul(accruedRate).sub(_balance.mul(BASE)).div(BASE);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @notice Bitmap library to set or unset bits on bitmap value\r\n */\r\nlibrary BitmapLib {\r\n\r\n    /**\r\n     * @dev Sets the given bit in the bitmap value\r\n     * @param _bitmap Bitmap value to update the bit in\r\n     * @param _index Index range from 0 to 127\r\n     * @return Returns the updated bitmap value\r\n     */\r\n    function setBit(uint128 _bitmap, uint8 _index) internal pure returns (uint128) {\r\n        // Suppose `_bitmap` is in bit value:\r\n        // 0001 0100 = represents third(_index == 2) and fifth(_index == 4) bit is set\r\n\r\n        // Bit not set, hence, set the bit\r\n        if( ! isBitSet(_bitmap, _index)) {\r\n            // Suppose `_index` is = 3 = 4th bit\r\n            // mask = 0000 1000 = Left shift to create mask to find 4rd bit status\r\n            uint128 mask = uint128(1) << _index;\r\n\r\n            // Setting the corrospending bit in _bitmap\r\n            // Performing OR (|) operation\r\n            // 0001 0100 (_bitmap)\r\n            // 0000 1000 (mask)\r\n            // -------------------\r\n            // 0001 1100 (result)\r\n            return _bitmap | mask;\r\n        }\r\n\r\n        // Bit already set, just return without any change\r\n        return _bitmap;\r\n    }\r\n\r\n    /**\r\n     * @dev Unsets the bit in given bitmap\r\n     * @param _bitmap Bitmap value to update the bit in\r\n     * @param _index Index range from 0 to 127\r\n     * @return Returns the updated bitmap value\r\n     */\r\n    function unsetBit(uint128 _bitmap, uint8 _index) internal pure returns (uint128) {\r\n        // Suppose `_bitmap` is in bit value:\r\n        // 0001 0100 = represents third(_index == 2) and fifth(_index == 4) bit is set\r\n\r\n        // Bit is set, hence, unset the bit\r\n        if(isBitSet(_bitmap, _index)) {\r\n            // Suppose `_index` is = 2 = 3th bit\r\n            // mask = 0000 0100 = Left shift to create mask to find 3rd bit status\r\n            uint128 mask = uint128(1) << _index;\r\n\r\n            // Performing Bitwise NOT(~) operation\r\n            // 1111 1011 (mask)\r\n            mask = ~mask;\r\n\r\n            // Unsetting the corrospending bit in _bitmap\r\n            // Performing AND (&) operation\r\n            // 0001 0100 (_bitmap)\r\n            // 1111 1011 (mask)\r\n            // -------------------\r\n            // 0001 0000 (result)\r\n            return _bitmap & mask;\r\n        }\r\n\r\n        // Bit not set, just return without any change\r\n        return _bitmap;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the corrosponding bit set in the bitmap\r\n     * @param _bitmap Bitmap value to check\r\n     * @param _index Index to check. Index range from 0 to 127\r\n     * @return Returns true if bit is set, false otherwise\r\n     */\r\n    function isBitSet(uint128 _bitmap, uint8 _index) internal pure returns (bool) {\r\n        require(_index < 128, \"Index out of range for bit operation\");\r\n        // Suppose `_bitmap` is in bit value:\r\n        // 0001 0100 = represents third(_index == 2) and fifth(_index == 4) bit is set\r\n\r\n        // Suppose `_index` is = 2 = 3th bit\r\n        // 0000 0100 = Left shift to create mask to find 3rd bit status\r\n        uint128 mask = uint128(1) << _index;\r\n\r\n        // Example: When bit is set:\r\n        // Performing AND (&) operation\r\n        // 0001 0100 (_bitmap)\r\n        // 0000 0100 (mask)\r\n        // -------------------------\r\n        // 0000 0100 (bitSet > 0)\r\n\r\n        // Example: When bit is not set:\r\n        // Performing AND (&) operation\r\n        // 0001 0100 (_bitmap)\r\n        // 0000 1000 (mask)\r\n        // -------------------------\r\n        // 0000 0000 (bitSet == 0)\r\n\r\n        uint128 bitSet = _bitmap & mask;\r\n        // Bit is set when greater than zero, else not set\r\n        return bitSet > 0;\r\n    }\r\n}\r\ninterface AggregatorInterface {\r\n  function latestAnswer() external view returns (int256);\r\n  function latestTimestamp() external view returns (uint256);\r\n  function latestRound() external view returns (uint256);\r\n  function getAnswer(uint256 roundId) external view returns (int256);\r\n  function getTimestamp(uint256 roundId) external view returns (uint256);\r\n\r\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);\r\n  event NewRound(uint256 indexed roundId, address indexed startedBy);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Utils{\r\n\r\n    function _isETH(address globalConfig, address _token) public view returns (bool) {\r\n        return GlobalConfig(globalConfig).constants().ETH_ADDR() == _token;\r\n    }\r\n\r\n    function getDivisor(address globalConfig, address _token) public view returns (uint256) {\r\n        if(_isETH(globalConfig, _token)) return GlobalConfig(globalConfig).constants().INT_UNIT();\r\n        return 10 ** uint256(GlobalConfig(globalConfig).tokenInfoRegistry().getTokenDecimals(_token));\r\n    }\r\n\r\n}\r\nlibrary SavingLib {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n     * Receive the amount of token from msg.sender\r\n     * @param _amount amount of token\r\n     * @param _token token address\r\n     */\r\n    function receive(GlobalConfig globalConfig, uint256 _amount, address _token) public {\r\n        if (Utils._isETH(address(globalConfig), _token)) {\r\n            require(msg.value == _amount, \"The amount is not sent from address.\");\r\n        } else {\r\n            //When only tokens received, msg.value must be 0\r\n            require(msg.value == 0, \"msg.value must be 0 when receiving tokens\");\r\n            IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the amount of token to an address\r\n     * @param _amount amount of token\r\n     * @param _token token address\r\n     */\r\n    function send(GlobalConfig globalConfig, uint256 _amount, address _token) public {\r\n        if (Utils._isETH(address(globalConfig), _token)) {\r\n            msg.sender.transfer(_amount);\r\n        } else {\r\n            IERC20(_token).safeTransfer(msg.sender, _amount);\r\n        }\r\n    }\r\n\r\n}\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Token Info Registry to manage Token information\r\n *      The Owner of the contract allowed to update the information\r\n */\r\ncontract TokenRegistry is Ownable, Constant {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev TokenInfo struct stores Token Information, this includes:\r\n     *      ERC20 Token address, Compound Token address, ChainLink Aggregator address etc.\r\n     * @notice This struct will consume 5 storage locations\r\n     */\r\n    struct TokenInfo {\r\n        // Token index, can store upto 255\r\n        uint8 index;\r\n        // ERC20 Token decimal\r\n        uint8 decimals;\r\n        // If token is enabled / disabled\r\n        bool enabled;\r\n        // Is ERC20 token charge transfer fee?\r\n        bool isTransferFeeEnabled;\r\n        // Is Token supported on Compound\r\n        bool isSupportedOnCompound;\r\n        // cToken address on Compound\r\n        address cToken;\r\n        // Chain Link Aggregator address for TOKEN/ETH pair\r\n        address chainLinkOracle;\r\n        // Borrow LTV, by default 60%\r\n        uint256 borrowLTV;\r\n    }\r\n\r\n    event TokenAdded(address indexed token);\r\n    event TokenUpdated(address indexed token);\r\n\r\n    uint256 public constant MAX_TOKENS = 128;\r\n    uint256 public constant SCALE = 100;\r\n\r\n    // TokenAddress to TokenInfo mapping\r\n    mapping (address => TokenInfo) public tokenInfo;\r\n\r\n    // TokenAddress array\r\n    address[] public tokens;\r\n    GlobalConfig public globalConfig;\r\n\r\n    /**\r\n     */\r\n    modifier whenTokenExists(address _token) {\r\n        require(isTokenExist(_token), \"Token not exists\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *  initializes the symbols structure\r\n     */\r\n    function initialize(GlobalConfig _globalConfig) public onlyOwner{\r\n        globalConfig = _globalConfig;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new token to registry\r\n     * @param _token ERC20 Token address\r\n     * @param _decimals Token's decimals\r\n     * @param _isTransferFeeEnabled Is token changes transfer fee\r\n     * @param _isSupportedOnCompound Is token supported on Compound\r\n     * @param _cToken cToken contract address\r\n     * @param _chainLinkOracle Chain Link Aggregator address to get TOKEN/ETH rate\r\n     */\r\n    function addToken(\r\n        address _token,\r\n        uint8 _decimals,\r\n        bool _isTransferFeeEnabled,\r\n        bool _isSupportedOnCompound,\r\n        address _cToken,\r\n        address _chainLinkOracle\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_token != address(0), \"Token address is zero\");\r\n        require(!isTokenExist(_token), \"Token already exist\");\r\n        require(_chainLinkOracle != address(0), \"ChainLinkAggregator address is zero\");\r\n        require(tokens.length < MAX_TOKENS, \"Max token limit reached\");\r\n\r\n        TokenInfo storage storageTokenInfo = tokenInfo[_token];\r\n        storageTokenInfo.index = uint8(tokens.length);\r\n        storageTokenInfo.decimals = _decimals;\r\n        storageTokenInfo.enabled = true;\r\n        storageTokenInfo.isTransferFeeEnabled = _isTransferFeeEnabled;\r\n        storageTokenInfo.isSupportedOnCompound = _isSupportedOnCompound;\r\n        storageTokenInfo.cToken = _cToken;\r\n        storageTokenInfo.chainLinkOracle = _chainLinkOracle;\r\n        // Default values\r\n        storageTokenInfo.borrowLTV = 60; //6e7; // 60%\r\n\r\n        tokens.push(_token);\r\n        emit TokenAdded(_token);\r\n    }\r\n\r\n    function updateBorrowLTV(\r\n        address _token,\r\n        uint256 _borrowLTV\r\n    )\r\n        external\r\n        onlyOwner\r\n        whenTokenExists(_token)\r\n    {\r\n        if (tokenInfo[_token].borrowLTV == _borrowLTV)\r\n            return;\r\n\r\n        // require(_borrowLTV != 0, \"Borrow LTV is zero\");\r\n        require(_borrowLTV < SCALE, \"Borrow LTV must be less than Scale\");\r\n        // require(liquidationThreshold > _borrowLTV, \"Liquidation threshold must be greater than Borrow LTV\");\r\n\r\n        tokenInfo[_token].borrowLTV = _borrowLTV;\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n    /**\r\n     */\r\n    function updateTokenTransferFeeFlag(\r\n        address _token,\r\n        bool _isTransfeFeeEnabled\r\n    )\r\n        external\r\n        onlyOwner\r\n        whenTokenExists(_token)\r\n    {\r\n        if (tokenInfo[_token].isTransferFeeEnabled == _isTransfeFeeEnabled)\r\n            return;\r\n\r\n        tokenInfo[_token].isTransferFeeEnabled = _isTransfeFeeEnabled;\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n    /**\r\n     */\r\n    function updateTokenSupportedOnCompoundFlag(\r\n        address _token,\r\n        bool _isSupportedOnCompound\r\n    )\r\n        external\r\n        onlyOwner\r\n        whenTokenExists(_token)\r\n    {\r\n        if (tokenInfo[_token].isSupportedOnCompound == _isSupportedOnCompound)\r\n            return;\r\n\r\n        tokenInfo[_token].isSupportedOnCompound = _isSupportedOnCompound;\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n    /**\r\n     */\r\n    function updateCToken(\r\n        address _token,\r\n        address _cToken\r\n    )\r\n        external\r\n        onlyOwner\r\n        whenTokenExists(_token)\r\n    {\r\n        if (tokenInfo[_token].cToken == _cToken)\r\n            return;\r\n\r\n        tokenInfo[_token].cToken = _cToken;\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n    /**\r\n     */\r\n    function updateChainLinkAggregator(\r\n        address _token,\r\n        address _chainLinkOracle\r\n    )\r\n        external\r\n        onlyOwner\r\n        whenTokenExists(_token)\r\n    {\r\n        if (tokenInfo[_token].chainLinkOracle == _chainLinkOracle)\r\n            return;\r\n\r\n        tokenInfo[_token].chainLinkOracle = _chainLinkOracle;\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n\r\n    function enableToken(address _token) external onlyOwner whenTokenExists(_token) {\r\n        require(!tokenInfo[_token].enabled, \"Token already enabled\");\r\n\r\n        tokenInfo[_token].enabled = true;\r\n\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n    function disableToken(address _token) external onlyOwner whenTokenExists(_token) {\r\n        require(tokenInfo[_token].enabled, \"Token already disabled\");\r\n\r\n        tokenInfo[_token].enabled = false;\r\n\r\n        emit TokenUpdated(_token);\r\n    }\r\n\r\n    // =====================\r\n    //      GETTERS\r\n    // =====================\r\n\r\n    /**\r\n     * @dev Is token address is registered\r\n     * @param _token token address\r\n     * @return Returns `true` when token registered, otherwise `false`\r\n     */\r\n    function isTokenExist(address _token) public view returns (bool isExist) {\r\n        isExist = tokenInfo[_token].chainLinkOracle != address(0);\r\n    }\r\n\r\n    function getTokens() external view returns (address[] memory) {\r\n        return tokens;\r\n    }\r\n\r\n    function getTokenIndex(address _token) external view returns (uint8) {\r\n        return tokenInfo[_token].index;\r\n    }\r\n\r\n    function isTokenEnabled(address _token) external view returns (bool) {\r\n        return tokenInfo[_token].enabled;\r\n    }\r\n\r\n    /**\r\n     */\r\n    function getCTokens() external view returns (address[] memory cTokens) {\r\n        uint256 len = tokens.length;\r\n        cTokens = new address[](len);\r\n        for(uint256 i = 0; i < len; i++) {\r\n            cTokens[i] = tokenInfo[tokens[i]].cToken;\r\n        }\r\n    }\r\n\r\n    function getTokenDecimals(address _token) public view returns (uint8) {\r\n        return tokenInfo[_token].decimals;\r\n    }\r\n\r\n    function isTransferFeeEnabled(address _token) external view returns (bool) {\r\n        return tokenInfo[_token].isTransferFeeEnabled;\r\n    }\r\n\r\n    function isSupportedOnCompound(address _token) external view returns (bool) {\r\n        return tokenInfo[_token].isSupportedOnCompound;\r\n    }\r\n\r\n    /**\r\n     */\r\n    function getCToken(address _token) external view returns (address) {\r\n        return tokenInfo[_token].cToken;\r\n    }\r\n\r\n    function getChainLinkAggregator(address _token) external view returns (address) {\r\n        return tokenInfo[_token].chainLinkOracle;\r\n    }\r\n\r\n    function getBorrowLTV(address _token) external view returns (uint256) {\r\n        return tokenInfo[_token].borrowLTV;\r\n    }\r\n\r\n    function getCoinLength() public view returns (uint256 length) {\r\n        return tokens.length;\r\n    }\r\n\r\n    function addressFromIndex(uint index) public view returns(address) {\r\n        require(index < tokens.length, \"coinIndex must be smaller than the coins length.\");\r\n        return tokens[index];\r\n    }\r\n\r\n    function priceFromIndex(uint index) public view returns(uint256) {\r\n        require(index < tokens.length, \"coinIndex must be smaller than the coins length.\");\r\n        address tokenAddress = tokens[index];\r\n        // Temp fix\r\n        if(Utils._isETH(address(globalConfig), tokenAddress)) {\r\n            return 1e18;\r\n        }\r\n        return uint256(AggregatorInterface(tokenInfo[tokenAddress].chainLinkOracle).latestAnswer());\r\n    }\r\n\r\n    function priceFromAddress(address tokenAddress) public view returns(uint256) {\r\n        if(Utils._isETH(address(globalConfig), tokenAddress)) {\r\n            return 1e18;\r\n        }\r\n        return uint256(AggregatorInterface(tokenInfo[tokenAddress].chainLinkOracle).latestAnswer());\r\n    }\r\n\r\n     function _priceFromAddress(address _token) internal view returns (uint) {\r\n        return \r\n            _token != ETH_ADDR \r\n            ? uint256(AggregatorInterface(tokenInfo[_token].chainLinkOracle).latestAnswer())\r\n            : INT_UNIT;\r\n    }\r\n\r\n    function _tokenDivisor(address _token) internal view returns (uint) {\r\n        return _token != ETH_ADDR ? 10**uint256(tokenInfo[_token].decimals) : INT_UNIT;\r\n    }\r\n\r\n    function getTokenInfoFromIndex(uint index)\r\n        external\r\n        view\r\n        whenTokenExists(addressFromIndex(index))\r\n        returns (\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        address token = tokens[index];\r\n        return (\r\n            token,\r\n            _tokenDivisor(token),\r\n            _priceFromAddress(token),\r\n            tokenInfo[token].borrowLTV\r\n        );\r\n    }\r\n\r\n    function getTokenInfoFromAddress(address _token)\r\n        external\r\n        view\r\n        whenTokenExists(_token)\r\n        returns (\r\n            uint8,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            tokenInfo[_token].index,\r\n            _tokenDivisor(_token),\r\n            _priceFromAddress(_token),\r\n            tokenInfo[_token].borrowLTV\r\n        );\r\n    }\r\n\r\n    // function _isETH(address _token) public view returns (bool) {\r\n    //     return globalConfig.constants().ETH_ADDR() == _token;\r\n    // }\r\n\r\n    // function getDivisor(address _token) public view returns (uint256) {\r\n    //     if(_isETH(_token)) return INT_UNIT;\r\n    //     return 10 ** uint256(getTokenDecimals(_token));\r\n    // }\r\n\r\n    mapping(address => uint) public depositeMiningSpeeds;\r\n    mapping(address => uint) public borrowMiningSpeeds;\r\n\r\n    function updateMiningSpeed(address _token, uint _depositeMiningSpeed, uint _borrowMiningSpeed) public onlyOwner{\r\n        if(_depositeMiningSpeed != depositeMiningSpeeds[_token]) {\r\n            depositeMiningSpeeds[_token] = _depositeMiningSpeed;\r\n        }\r\n        \r\n        if(_borrowMiningSpeed != borrowMiningSpeeds[_token]) {\r\n            borrowMiningSpeeds[_token] = _borrowMiningSpeed;\r\n        }\r\n\r\n        emit TokenUpdated(_token);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract InitializablePausable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n    \r\n    address private globalConfig;\r\n    bool private _paused;\r\n\r\n    function _initialize(address _globalConfig) internal {\r\n        globalConfig = _globalConfig;\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(GlobalConfig(globalConfig).owner());\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(GlobalConfig(globalConfig).owner());\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(msg.sender == GlobalConfig(globalConfig).owner(), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @notice Code copied from OpenZeppelin, to make it an upgradable contract\r\n */\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract InitializableReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    function _initialize() internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n\r\ncontract SavingAccount is Initializable, InitializableReentrancyGuard, Constant, InitializablePausable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    GlobalConfig public globalConfig;\r\n\r\n    address public constant FIN_ADDR = 0x576c990A8a3E7217122e9973b2230A3be9678E94;\r\n    address public constant COMP_ADDR = address(0);\r\n\r\n    event Transfer(address indexed token, address from, address to, uint256 amount);\r\n    event Borrow(address indexed token, address from, uint256 amount);\r\n    event Repay(address indexed token, address from, uint256 amount);\r\n    event Deposit(address indexed token, address from, uint256 amount);\r\n    event Withdraw(address indexed token, address from, uint256 amount);\r\n    event WithdrawAll(address indexed token, address from, uint256 amount);\r\n    event Liquidate(address liquidator, address borrower, address borrowedToken, uint256 repayAmount, address collateralToken, uint256 payAmount);\r\n    event Claim(address from, uint256 amount);\r\n    event WithdrawCOMP(address beneficiary, uint256 amount);\r\n\r\n    modifier onlySupportedToken(address _token) {\r\n        if(_token != ETH_ADDR) {\r\n            require(globalConfig.tokenInfoRegistry().isTokenExist(_token), \"Unsupported token\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyEnabledToken(address _token) {\r\n        require(globalConfig.tokenInfoRegistry().isTokenEnabled(_token), \"The token is not enabled\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == address(globalConfig.bank()),\r\n            \"Only authorized to call from DeFiner internal contracts.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == GlobalConfig(globalConfig).owner(), \"Only owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Initialize function to be called by the Deployer for the first time\r\n     * @param _tokenAddresses list of token addresses\r\n     * @param _cTokenAddresses list of corresponding cToken addresses\r\n     * @param _globalConfig global configuration contract\r\n     */\r\n    function initialize(\r\n        address[] memory _tokenAddresses,\r\n        address[] memory _cTokenAddresses,\r\n        GlobalConfig _globalConfig\r\n    )\r\n        public\r\n        initializer\r\n    {\r\n        // Initialize InitializableReentrancyGuard\r\n        super._initialize();\r\n        super._initialize(address(_globalConfig));\r\n\r\n        globalConfig = _globalConfig;\r\n\r\n        require(_tokenAddresses.length == _cTokenAddresses.length, \"Token and cToken length don't match.\");\r\n        uint tokenNum = _tokenAddresses.length;\r\n        for(uint i = 0;i < tokenNum;i++) {\r\n            if(_cTokenAddresses[i] != address(0x0) && _tokenAddresses[i] != ETH_ADDR) {\r\n                approveAll(_tokenAddresses[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Approve transfer of all available tokens\r\n     * @param _token token address\r\n     */\r\n    function approveAll(address _token) public {\r\n        address cToken = globalConfig.tokenInfoRegistry().getCToken(_token);\r\n        require(cToken != address(0x0), \"cToken address is zero\");\r\n        IERC20(_token).safeApprove(cToken, 0);\r\n        IERC20(_token).safeApprove(cToken, uint256(-1));\r\n    }\r\n\r\n    /**\r\n     * Get current block number\r\n     * @return the current block number\r\n     */\r\n    function getBlockNumber() internal view returns (uint) {\r\n        return block.number;\r\n    }\r\n\r\n    /**\r\n     * Transfer the token between users inside DeFiner\r\n     * @param _to the address that the token be transfered to\r\n     * @param _token token address\r\n     * @param _amount amout of tokens transfer\r\n     */\r\n    function transfer(address _to, address _token, uint _amount) external onlySupportedToken(_token) onlyEnabledToken(_token) whenNotPaused nonReentrant {\r\n\r\n        globalConfig.bank().newRateIndexCheckpoint(_token);\r\n        uint256 amount = globalConfig.accounts().withdraw(msg.sender, _token, _amount);\r\n        globalConfig.accounts().deposit(_to, _token, amount);\r\n\r\n        emit Transfer(_token, msg.sender, _to, amount);\r\n    }\r\n\r\n    /**\r\n     * Borrow the amount of token from the saving pool.\r\n     * @param _token token address\r\n     * @param _amount amout of tokens to borrow\r\n     */\r\n    function borrow(address _token, uint256 _amount) external onlySupportedToken(_token) onlyEnabledToken(_token) whenNotPaused nonReentrant {\r\n\r\n        require(_amount != 0, \"Borrow zero amount of token is not allowed.\");\r\n\r\n        globalConfig.bank().borrow(msg.sender, _token, _amount);\r\n\r\n        // Transfer the token on Ethereum\r\n        SavingLib.send(globalConfig, _amount, _token);\r\n\r\n        emit Borrow(_token, msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * Repay the amount of token back to the saving pool.\r\n     * @param _token token address\r\n     * @param _amount amout of tokens to borrow\r\n     * @dev If the repay amount is larger than the borrowed balance, the extra will be returned.\r\n     */\r\n    function repay(address _token, uint256 _amount) public payable onlySupportedToken(_token) nonReentrant {\r\n        require(_amount != 0, \"Amount is zero\");\r\n        SavingLib.receive(globalConfig, _amount, _token);\r\n\r\n        // Add a new checkpoint on the index curve.\r\n        uint256 amount = globalConfig.bank().repay(msg.sender, _token, _amount);\r\n\r\n        // Send the remain money back\r\n        if(amount < _amount) {\r\n            SavingLib.send(globalConfig, _amount.sub(amount), _token);\r\n        }\r\n\r\n        emit Repay(_token, msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * Deposit the amount of token to the saving pool.\r\n     * @param _token the address of the deposited token\r\n     * @param _amount the mount of the deposited token\r\n     */\r\n    function deposit(address _token, uint256 _amount) public payable onlySupportedToken(_token) onlyEnabledToken(_token) nonReentrant {\r\n        require(_amount != 0, \"Amount is zero\");\r\n        SavingLib.receive(globalConfig, _amount, _token);\r\n        globalConfig.bank().deposit(msg.sender, _token, _amount);\r\n\r\n        emit Deposit(_token, msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * Withdraw a token from an address\r\n     * @param _token token address\r\n     * @param _amount amount to be withdrawn\r\n     */\r\n    function withdraw(address _token, uint256 _amount) external onlySupportedToken(_token) whenNotPaused nonReentrant {\r\n        require(_amount != 0, \"Amount is zero\");\r\n        uint256 amount = globalConfig.bank().withdraw(msg.sender, _token, _amount);\r\n        SavingLib.send(globalConfig, amount, _token);\r\n\r\n        emit Withdraw(_token, msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * Withdraw all tokens from the saving pool.\r\n     * @param _token the address of the withdrawn token\r\n     */\r\n    function withdrawAll(address _token) external onlySupportedToken(_token) whenNotPaused nonReentrant {\r\n\r\n        // Sanity check\r\n        require(globalConfig.accounts().getDepositPrincipal(msg.sender, _token) > 0, \"Token depositPrincipal must be greater than 0\");\r\n\r\n        // Add a new checkpoint on the index curve.\r\n        globalConfig.bank().newRateIndexCheckpoint(_token);\r\n\r\n        // Get the total amount of token for the account\r\n        uint amount = globalConfig.accounts().getDepositBalanceCurrent(_token, msg.sender);\r\n\r\n        uint256 actualAmount = globalConfig.bank().withdraw(msg.sender, _token, amount);\r\n        if(actualAmount != 0) {\r\n            SavingLib.send(globalConfig, actualAmount, _token);\r\n        }\r\n        emit WithdrawAll(_token, msg.sender, actualAmount);\r\n    }\r\n\r\n    function liquidate(address _borrower, address _borrowedToken, address _collateralToken) public onlySupportedToken(_borrowedToken) onlySupportedToken(_collateralToken) whenNotPaused nonReentrant {\r\n        (uint256 repayAmount, uint256 payAmount) = globalConfig.accounts().liquidate(msg.sender, _borrower, _borrowedToken, _collateralToken);\r\n\r\n        emit Liquidate(msg.sender, _borrower, _borrowedToken, repayAmount, _collateralToken, payAmount);\r\n    }\r\n\r\n    /**\r\n     * Withdraw token from Compound\r\n     * @param _token token address\r\n     * @param _amount amount of token\r\n     */\r\n    function fromCompound(address _token, uint _amount) external onlyAuthorized {\r\n        require(ICToken(globalConfig.tokenInfoRegistry().getCToken(_token)).redeemUnderlying(_amount) == 0, \"redeemUnderlying failed\");\r\n    }\r\n\r\n    function toCompound(address _token, uint _amount) external onlyAuthorized {\r\n        address cToken = globalConfig.tokenInfoRegistry().getCToken(_token);\r\n        if (Utils._isETH(address(globalConfig), _token)) {\r\n            ICETH(cToken).mint.value(_amount)();\r\n        } else {\r\n            // uint256 success = ICToken(cToken).mint(_amount);\r\n            require(ICToken(cToken).mint(_amount) == 0, \"mint failed\");\r\n        }\r\n    }\r\n\r\n    function() external payable{}\r\n\r\n    /**\r\n     * An account claim all mined FIN token\r\n     */\r\n    function claim() public nonReentrant returns (uint256) {\r\n        uint256 finAmount = globalConfig.accounts().claim(msg.sender);\r\n        IERC20(FIN_ADDR).safeTransfer(msg.sender, finAmount);\r\n        emit Claim(msg.sender, finAmount);\r\n        return finAmount;\r\n    }\r\n\r\n    function claimForToken(address _token) public nonReentrant returns (uint256) {\r\n        uint256 finAmount = globalConfig.accounts().claimForToken(msg.sender, _token);\r\n        if(finAmount > 0) IERC20(FIN_ADDR).safeTransfer(msg.sender, finAmount);\r\n        emit Claim(msg.sender, finAmount);\r\n        return finAmount;\r\n    }\r\n\r\n    /**\r\n     * Withdraw COMP token to beneficiary\r\n     */\r\n    /*\r\n    function withdrawCOMP(address _beneficiary) external onlyOwner {\r\n        uint256 compBalance = IERC20(COMP_ADDR).balanceOf(address(this));\r\n        IERC20(COMP_ADDR).safeTransfer(_beneficiary, compBalance);\r\n\r\n        emit WithdrawCOMP(_beneficiary, compBalance);\r\n    }\r\n    */\r\n\r\n    function version() public pure returns(string memory) {\r\n        return \"v1.2.0\";\r\n    }\r\n}\r\n\r\n\r\ninterface IGlobalConfig {\r\n    function savingAccount() external view returns (address);\r\n    function tokenInfoRegistry() external view returns (TokenRegistry);\r\n    function bank() external view returns (Bank);\r\n    function deFinerCommunityFund() external view returns (address);\r\n    function deFinerRate() external view returns (uint256);\r\n    function liquidationThreshold() external view returns (uint256);\r\n    function liquidationDiscountRatio() external view returns (uint256);\r\n}\r\n\r\ncontract Accounts is Constant, Initializable{\r\n    using AccountTokenLib for AccountTokenLib.TokenInfo;\r\n    using BitmapLib for uint128;\r\n    using SafeMath for uint256;\r\n    using Math for uint256;\r\n\r\n    mapping(address => Account) public accounts;\r\n    IGlobalConfig globalConfig;\r\n    mapping(address => uint256) public FINAmount;\r\n\r\n    modifier onlyAuthorized() {\r\n        _isAuthorized();\r\n        _;\r\n    }\r\n\r\n    struct Account {\r\n        // Note, it's best practice to use functions minusAmount, addAmount, totalAmount\r\n        // to operate tokenInfos instead of changing it directly.\r\n        mapping(address => AccountTokenLib.TokenInfo) tokenInfos;\r\n        uint128 depositBitmap;\r\n        uint128 borrowBitmap;\r\n        uint128 collateralBitmap;\r\n        bool isCollInit;\r\n    }\r\n\r\n    event CollateralFlagChanged(address indexed _account, uint8 _index, bool _enabled);\r\n\r\n    function _isAuthorized() internal view {\r\n        require(\r\n            msg.sender == address(globalConfig.savingAccount()) || msg.sender == address(globalConfig.bank()),\r\n            \"not authorized\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Initialize the Accounts\r\n     * @param _globalConfig the global configuration contract\r\n     */\r\n    function initialize(\r\n        IGlobalConfig _globalConfig\r\n    ) public initializer {\r\n        globalConfig = _globalConfig;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize the Collateral flag Bitmap for given account\r\n     * @notice This function is required for the contract upgrade, as previous users didn't\r\n     *         have this collateral feature. So need to init the collateralBitmap for each user.\r\n     * @param _account User account address\r\n    */\r\n    function initCollateralFlag(address _account) public {\r\n        Account storage account = accounts[_account];\r\n\r\n        // For all users by default `isCollInit` will be `false`\r\n        if(account.isCollInit == false) {\r\n            // Two conditions:\r\n            // 1) An account has some position previous to this upgrade\r\n            //    THEN: copy `depositBitmap` to `collateralBitmap`\r\n            // 2) A new account is setup after this upgrade\r\n            //    THEN: `depositBitmap` will be zero for that user, so don't copy\r\n\r\n            // all deposited tokens be treated as collateral\r\n            if(account.depositBitmap > 0) account.collateralBitmap = account.depositBitmap;\r\n            account.isCollInit = true;\r\n        }\r\n\r\n        // when isCollInit == true, function will just return after if condition check\r\n    }\r\n\r\n    /**\r\n     * @dev Enable/Disable collateral for a given token\r\n     * @param _tokenIndex Index of the token\r\n     * @param _enable `true` to enable the collateral, `false` to disable\r\n     */\r\n    function setCollateral(uint8 _tokenIndex, bool _enable) public {\r\n        address accountAddr = msg.sender;\r\n        initCollateralFlag(accountAddr);\r\n        Account storage account = accounts[accountAddr];\r\n\r\n        if(_enable) {\r\n            account.collateralBitmap = account.collateralBitmap.setBit(_tokenIndex);\r\n            // when set new collateral, no need to evaluate borrow power\r\n        } else {\r\n            account.collateralBitmap = account.collateralBitmap.unsetBit(_tokenIndex);\r\n            // when unset collateral, evaluate borrow power, only when user borrowed already\r\n            if(account.borrowBitmap > 0) {\r\n                require(getBorrowETH(accountAddr) <= getBorrowPower(accountAddr), \"Insufficient collateral\");\r\n            }\r\n        }\r\n\r\n        emit CollateralFlagChanged(msg.sender, _tokenIndex, _enable);\r\n    }\r\n\r\n    function setCollateral(uint8[] calldata _tokenIndexArr, bool[] calldata _enableArr) external {\r\n        require(_tokenIndexArr.length == _enableArr.length, \"array length does not match\");\r\n        for(uint i = 0; i < _tokenIndexArr.length; i++) {\r\n            setCollateral(_tokenIndexArr[i], _enableArr[i]);\r\n        }\r\n    }\r\n\r\n    function getCollateralStatus(address _account)\r\n        external\r\n        view\r\n        returns (address[] memory tokens, bool[] memory status)\r\n    {\r\n        Account memory account = accounts[_account];\r\n        TokenRegistry tokenRegistry = globalConfig.tokenInfoRegistry();\r\n        tokens = tokenRegistry.getTokens();\r\n        uint256 tokensCount = tokens.length;\r\n        status = new bool[](tokensCount);\r\n        uint128 collBitmap = account.collateralBitmap;\r\n        for(uint i = 0; i < tokensCount; i++) {\r\n            // Example: 0001 << 1 => 0010 (mask for 2nd position)\r\n            uint128 mask = uint128(1) << uint128(i);\r\n            bool isEnabled = (collBitmap & mask) > 0;\r\n            if(isEnabled) status[i] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if the user has deposit for any tokens\r\n     * @param _account address of the user\r\n     * @return true if the user has positive deposit balance\r\n     */\r\n    function isUserHasAnyDeposits(address _account) public view returns (bool) {\r\n        Account storage account = accounts[_account];\r\n        return account.depositBitmap > 0;\r\n    }\r\n\r\n    /**\r\n     * Check if the user has deposit for a token\r\n     * @param _account address of the user\r\n     * @param _index index of the token\r\n     * @return true if the user has positive deposit balance for the token\r\n     */\r\n    function isUserHasDeposits(address _account, uint8 _index) public view returns (bool) {\r\n        Account storage account = accounts[_account];\r\n        return account.depositBitmap.isBitSet(_index);\r\n    }\r\n\r\n    /**\r\n     * Check if the user has borrowed a token\r\n     * @param _account address of the user\r\n     * @param _index index of the token\r\n     * @return true if the user has borrowed the token\r\n     */\r\n    function isUserHasBorrows(address _account, uint8 _index) public view returns (bool) {\r\n        Account storage account = accounts[_account];\r\n        return account.borrowBitmap.isBitSet(_index);\r\n    }\r\n\r\n    /**\r\n     * Check if the user has collateral flag set\r\n     * @param _account address of the user\r\n     * @param _index index of the token\r\n     * @return true if the user has collateral flag set for the given index\r\n     */\r\n    function isUserHasCollateral(address _account, uint8 _index) public view returns(bool) {\r\n        Account storage account = accounts[_account];\r\n        return account.collateralBitmap.isBitSet(_index);\r\n    }\r\n\r\n    /**\r\n     * Set the deposit bitmap for a token.\r\n     * @param _account address of the user\r\n     * @param _index index of the token\r\n     */\r\n    function setInDepositBitmap(address _account, uint8 _index) internal {\r\n        Account storage account = accounts[_account];\r\n        account.depositBitmap = account.depositBitmap.setBit(_index);\r\n    }\r\n\r\n    /**\r\n     * Unset the deposit bitmap for a token\r\n     * @param _account address of the user\r\n     * @param _index index of the token\r\n     */\r\n    function unsetFromDepositBitmap(address _account, uint8 _index) internal {\r\n        Account storage account = accounts[_account];\r\n        account.depositBitmap = account.depositBitmap.unsetBit(_index);\r\n    }\r\n\r\n    /**\r\n     * Set the borrow bitmap for a token.\r\n     * @param _account address of the user\r\n     * @param _index index of the token\r\n     */\r\n    function setInBorrowBitmap(address _account, uint8 _index) internal {\r\n        Account storage account = accounts[_account];\r\n        account.borrowBitmap = account.borrowBitmap.setBit(_index);\r\n    }\r\n\r\n    /**\r\n     * Unset the borrow bitmap for a token\r\n     * @param _account address of the user\r\n     * @param _index index of the token\r\n     */\r\n    function unsetFromBorrowBitmap(address _account, uint8 _index) internal {\r\n        Account storage account = accounts[_account];\r\n        account.borrowBitmap = account.borrowBitmap.unsetBit(_index);\r\n    }\r\n\r\n    function getDepositPrincipal(address _accountAddr, address _token) public view returns(uint256) {\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        return tokenInfo.getDepositPrincipal();\r\n    }\r\n\r\n    function getBorrowPrincipal(address _accountAddr, address _token) public view returns(uint256) {\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        return tokenInfo.getBorrowPrincipal();\r\n    }\r\n\r\n    function getLastDepositBlock(address _accountAddr, address _token) public view returns(uint256) {\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        return tokenInfo.getLastDepositBlock();\r\n    }\r\n\r\n    function getLastBorrowBlock(address _accountAddr, address _token) public view returns(uint256) {\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        return tokenInfo.getLastBorrowBlock();\r\n    }\r\n\r\n    /**\r\n     * Get deposit interest of an account for a specific token\r\n     * @param _account account address\r\n     * @param _token token address\r\n     * @dev The deposit interest may not have been updated in AccountTokenLib, so we need to explicited calcuate it.\r\n     */\r\n    function getDepositInterest(address _account, address _token) public view returns(uint256) {\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_account].tokenInfos[_token];\r\n        // If the account has never deposited the token, return 0.\r\n        uint256 lastDepositBlock = tokenInfo.getLastDepositBlock();\r\n        if (lastDepositBlock == 0)\r\n            return 0;\r\n        else {\r\n            // As the last deposit block exists, the block is also a check point on index curve.\r\n            uint256 accruedRate = globalConfig.bank().getDepositAccruedRate(_token, lastDepositBlock);\r\n            return tokenInfo.calculateDepositInterest(accruedRate);\r\n        }\r\n    }\r\n\r\n    function getBorrowInterest(address _accountAddr, address _token) public view returns(uint256) {\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        // If the account has never borrowed the token, return 0\r\n        uint256 lastBorrowBlock = tokenInfo.getLastBorrowBlock();\r\n        if (lastBorrowBlock == 0)\r\n            return 0;\r\n        else {\r\n            // As the last borrow block exists, the block is also a check point on index curve.\r\n            uint256 accruedRate = globalConfig.bank().getBorrowAccruedRate(_token, lastBorrowBlock);\r\n            return tokenInfo.calculateBorrowInterest(accruedRate);\r\n        }\r\n    }\r\n\r\n    function borrow(address _accountAddr, address _token, uint256 _amount) external onlyAuthorized {\r\n        initCollateralFlag(_accountAddr);\r\n        require(_amount != 0, \"borrow amount is 0\");\r\n        require(isUserHasAnyDeposits(_accountAddr), \"no user deposits\");\r\n        (uint8 tokenIndex, uint256 tokenDivisor, uint256 tokenPrice,) = globalConfig.tokenInfoRegistry().getTokenInfoFromAddress(_token);\r\n        require(\r\n            getBorrowETH(_accountAddr).add(_amount.mul(tokenPrice).div(tokenDivisor)) <=\r\n            getBorrowPower(_accountAddr), \"Insufficient collateral when borrow\"\r\n        );\r\n\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        uint256 blockNumber = getBlockNumber();\r\n        uint256 lastBorrowBlock = tokenInfo.getLastBorrowBlock();\r\n\r\n        if(lastBorrowBlock == 0)\r\n            tokenInfo.borrow(_amount, INT_UNIT, blockNumber);\r\n        else {\r\n            calculateBorrowFIN(lastBorrowBlock, _token, _accountAddr, blockNumber);\r\n            uint256 accruedRate = globalConfig.bank().getBorrowAccruedRate(_token, lastBorrowBlock);\r\n            // Update the token principla and interest\r\n            tokenInfo.borrow(_amount, accruedRate, blockNumber);\r\n        }\r\n\r\n        // Since we have checked that borrow amount is larget than zero. We can set the borrow\r\n        // map directly without checking the borrow balance.\r\n        setInBorrowBitmap(_accountAddr, tokenIndex);\r\n    }\r\n\r\n    /**\r\n     * Update token info for withdraw. The interest will be withdrawn with higher priority.\r\n     */\r\n    function withdraw(address _accountAddr, address _token, uint256 _amount) public onlyAuthorized returns (uint256) {\r\n        initCollateralFlag(_accountAddr);\r\n        (, uint256 tokenDivisor, uint256 tokenPrice, uint256 borrowLTV) = globalConfig.tokenInfoRegistry().getTokenInfoFromAddress(_token);\r\n\r\n        // if user borrowed before then only check for under liquidation\r\n        Account memory account = accounts[_accountAddr];\r\n        if(account.borrowBitmap > 0) {\r\n            uint256 withdrawETH = _amount.mul(tokenPrice).mul(borrowLTV).div(tokenDivisor).div(100);\r\n            require(getBorrowETH(_accountAddr) <= getBorrowPower(_accountAddr).sub(withdrawETH), \"Insufficient collateral\");\r\n        }\r\n\r\n        (uint256 amountAfterCommission, ) = _withdraw(_accountAddr, _token, _amount, true);\r\n\r\n        return amountAfterCommission;\r\n    }\r\n\r\n    /**\r\n     * This function is called in liquidation function. There two difference between this function and\r\n     * the Account.withdraw function: 1) It doesn't check the user's borrow power, because the user\r\n     * is already borrowed more than it's borrowing power. 2) It doesn't take commissions.\r\n     */\r\n    function withdraw_liquidate(address _accountAddr, address _token, uint256 _amount) internal {\r\n        _withdraw(_accountAddr, _token, _amount, false);\r\n    }\r\n\r\n    function _withdraw(address _accountAddr, address _token, uint256 _amount, bool _isCommission) internal returns (uint256, uint256) {\r\n        uint256 calcAmount = _amount;\r\n        // Check if withdraw amount is less than user's balance\r\n        require(calcAmount <= getDepositBalanceCurrent(_token, _accountAddr), \"Insufficient balance\");\r\n\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        uint256 lastBlock = tokenInfo.getLastDepositBlock();\r\n        uint256 blockNumber = getBlockNumber();\r\n        calculateDepositFIN(lastBlock, _token, _accountAddr, blockNumber);\r\n\r\n        uint256 principalBeforeWithdraw = tokenInfo.getDepositPrincipal();\r\n\r\n        if (lastBlock == 0)\r\n            tokenInfo.withdraw(calcAmount, INT_UNIT, blockNumber);\r\n        else {\r\n            // As the last deposit block exists, the block is also a check point on index curve.\r\n            uint256 accruedRate = globalConfig.bank().getDepositAccruedRate(_token, lastBlock);\r\n            tokenInfo.withdraw(calcAmount, accruedRate, blockNumber);\r\n        }\r\n\r\n        uint256 principalAfterWithdraw = tokenInfo.getDepositPrincipal();\r\n        if(principalAfterWithdraw == 0) {\r\n            uint8 tokenIndex = globalConfig.tokenInfoRegistry().getTokenIndex(_token);\r\n            unsetFromDepositBitmap(_accountAddr, tokenIndex);\r\n        }\r\n\r\n        uint256 commission = 0;\r\n        if (_isCommission && _accountAddr != globalConfig.deFinerCommunityFund()) {\r\n            // DeFiner takes 10% commission on the interest a user earn\r\n            commission = calcAmount.sub(principalBeforeWithdraw.sub(principalAfterWithdraw)).mul(globalConfig.deFinerRate()).div(100);\r\n            deposit(globalConfig.deFinerCommunityFund(), _token, commission);\r\n            calcAmount = calcAmount.sub(commission);\r\n        }\r\n\r\n        return (calcAmount, commission);\r\n    }\r\n\r\n    /**\r\n     * Update token info for deposit\r\n     */\r\n    function deposit(address _accountAddr, address _token, uint256 _amount) public onlyAuthorized {\r\n        initCollateralFlag(_accountAddr);\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        if(tokenInfo.getDepositPrincipal() == 0) {\r\n            uint8 tokenIndex = globalConfig.tokenInfoRegistry().getTokenIndex(_token);\r\n            setInDepositBitmap(_accountAddr, tokenIndex);\r\n        }\r\n\r\n        uint256 blockNumber = getBlockNumber();\r\n        uint256 lastDepositBlock = tokenInfo.getLastDepositBlock();\r\n        if(lastDepositBlock == 0)\r\n            tokenInfo.deposit(_amount, INT_UNIT, blockNumber);\r\n        else {\r\n            calculateDepositFIN(lastDepositBlock, _token, _accountAddr, blockNumber);\r\n            uint256 accruedRate = globalConfig.bank().getDepositAccruedRate(_token, lastDepositBlock);\r\n            tokenInfo.deposit(_amount, accruedRate, blockNumber);\r\n        }\r\n    }\r\n\r\n    function repay(address _accountAddr, address _token, uint256 _amount) public onlyAuthorized returns(uint256){\r\n        initCollateralFlag(_accountAddr);\r\n        // Update tokenInfo\r\n        uint256 amountOwedWithInterest = getBorrowBalanceCurrent(_token, _accountAddr);\r\n        uint256 amount = _amount > amountOwedWithInterest ? amountOwedWithInterest : _amount;\r\n        uint256 remain = _amount > amountOwedWithInterest ? _amount.sub(amountOwedWithInterest) : 0;\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        // Sanity check\r\n        uint256 borrowPrincipal = tokenInfo.getBorrowPrincipal();\r\n        uint256 lastBorrowBlock = tokenInfo.getLastBorrowBlock();\r\n        require(borrowPrincipal > 0, \"BorrowPrincipal not gt 0\");\r\n        if(lastBorrowBlock == 0)\r\n            tokenInfo.repay(amount, INT_UNIT, getBlockNumber());\r\n        else {\r\n            calculateBorrowFIN(lastBorrowBlock, _token, _accountAddr, getBlockNumber());\r\n            uint256 accruedRate = globalConfig.bank().getBorrowAccruedRate(_token, lastBorrowBlock);\r\n            tokenInfo.repay(amount, accruedRate, getBlockNumber());\r\n        }\r\n\r\n        if(borrowPrincipal == 0) {\r\n            uint8 tokenIndex = globalConfig.tokenInfoRegistry().getTokenIndex(_token);\r\n            unsetFromBorrowBitmap(_accountAddr, tokenIndex);\r\n        }\r\n        return remain;\r\n    }\r\n\r\n    function getDepositBalanceCurrent(\r\n        address _token,\r\n        address _accountAddr\r\n    ) public view returns (uint256 depositBalance) {\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        Bank bank = globalConfig.bank();\r\n        uint256 accruedRate;\r\n        uint256 depositRateIndex = bank.depositeRateIndex(_token, tokenInfo.getLastDepositBlock());\r\n        if(tokenInfo.getDepositPrincipal() == 0) {\r\n            return 0;\r\n        } else {\r\n            if(depositRateIndex == 0) {\r\n                accruedRate = INT_UNIT;\r\n            } else {\r\n                accruedRate = bank.depositeRateIndexNow(_token)\r\n                .mul(INT_UNIT)\r\n                .div(depositRateIndex);\r\n            }\r\n            return tokenInfo.getDepositBalance(accruedRate);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get current borrow balance of a token\r\n     * @param _token token address\r\n     * @dev This is an estimation. Add a new checkpoint first, if you want to derive the exact balance.\r\n     */\r\n    function getBorrowBalanceCurrent(\r\n        address _token,\r\n        address _accountAddr\r\n    ) public view returns (uint256 borrowBalance) {\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_accountAddr].tokenInfos[_token];\r\n        Bank bank = globalConfig.bank();\r\n        uint256 accruedRate;\r\n        uint256 borrowRateIndex = bank.borrowRateIndex(_token, tokenInfo.getLastBorrowBlock());\r\n        if(tokenInfo.getBorrowPrincipal() == 0) {\r\n            return 0;\r\n        } else {\r\n            if(borrowRateIndex == 0) {\r\n                accruedRate = INT_UNIT;\r\n            } else {\r\n                accruedRate = bank.borrowRateIndexNow(_token)\r\n                .mul(INT_UNIT)\r\n                .div(borrowRateIndex);\r\n            }\r\n            return tokenInfo.getBorrowBalance(accruedRate);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate an account's borrow power based on token's LTV\r\n     */\r\n     /*\r\n    function getBorrowPower(address _borrower) public view returns (uint256 power) {\r\n        TokenRegistry tokenRegistry = globalConfig.tokenInfoRegistry();\r\n        uint256 tokenNum = tokenRegistry.getCoinLength();\r\n        for(uint256 i = 0; i < tokenNum; i++) {\r\n            if (isUserHasDeposits(_borrower, uint8(i))) {\r\n                (address token, uint256 divisor, uint256 price, uint256 borrowLTV) = tokenRegistry.getTokenInfoFromIndex(i);\r\n\r\n                uint256 depositBalanceCurrent = getDepositBalanceCurrent(token, _borrower);\r\n                power = power.add(depositBalanceCurrent.mul(price).mul(borrowLTV).div(100).div(divisor));\r\n            }\r\n        }\r\n        return power;\r\n    }\r\n    */\r\n\r\n    function getBorrowPower(address _borrower) public view returns (uint256 power) {\r\n        Account storage account = accounts[_borrower];\r\n\r\n        // if a user have deposits in some tokens and collateral enabled for some\r\n        // then we need to iterate over his deposits for which collateral is also enabled.\r\n        // Hence, we can derive this information by perorming AND bitmap operation\r\n        // hasCollnDepositBitmap = collateralEnabled & hasDeposit\r\n        // Example:\r\n        // collateralBitmap         = 0101\r\n        // depositBitmap            = 0110\r\n        // ================================== OP AND\r\n        // hasCollnDepositBitmap    = 0100 (user can only use his 3rd token as borrow power)\r\n        uint128 hasCollnDepositBitmap = account.collateralBitmap & account.depositBitmap;\r\n\r\n        // When no-collateral enabled and no-deposits just return '0' power\r\n        if(hasCollnDepositBitmap == 0) return power;\r\n\r\n        TokenRegistry tokenRegistry = globalConfig.tokenInfoRegistry();\r\n\r\n        // This loop has max \"O(n)\" complexity where \"n = TokensLength\", but the loop\r\n        // calculates borrow power only for the `hasCollnDepositBitmap` bit, hence the loop\r\n        // iterates only till the highest bit set. Example 00000100, the loop will iterate\r\n        // only for 4 times, and only 1 time to calculate borrow the power.\r\n        // NOTE: When transaction gas-cost goes above the block gas limit, a user can\r\n        //      disable some of his collaterals so that he can perform the borrow.\r\n        //      Earlier loop implementation was iterating over all tokens, hence the platform\r\n        //      were not able to add new tokens\r\n        for(uint i = 0; i < 128; i++) {\r\n            // if hasCollnDepositBitmap = 0000 then break the loop\r\n            if(hasCollnDepositBitmap > 0) {\r\n                // hasCollnDepositBitmap = 0100\r\n                // mask                  = 0001\r\n                // =============================== OP AND\r\n                // result                = 0000\r\n                bool isEnabled = (hasCollnDepositBitmap & uint128(1)) > 0;\r\n                // Is i(th) token enabled?\r\n                if(isEnabled) {\r\n                    // continue calculating borrow power for i(th) token\r\n                    (address token, uint256 divisor, uint256 price, uint256 borrowLTV) = tokenRegistry.getTokenInfoFromIndex(i);\r\n\r\n                    // avoid some gas consumption when borrowLTV == 0\r\n                    if(borrowLTV != 0) {\r\n                        uint256 depositBalanceCurrent = getDepositBalanceCurrent(token, _borrower);\r\n                        power = power.add(depositBalanceCurrent.mul(price).mul(borrowLTV).div(100).div(divisor));\r\n                    }\r\n                }\r\n\r\n                // right shift by 1\r\n                // hasCollnDepositBitmap = 0100\r\n                // BITWISE RIGHTSHIFT 1 on hasCollnDepositBitmap = 0010\r\n                hasCollnDepositBitmap = hasCollnDepositBitmap >> 1;\r\n                // continue loop and repeat the steps until `hasCollnDepositBitmap == 0`\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return power;\r\n    }\r\n\r\n    function getCollateralETH(address _account) public view returns (uint256 collETH) {\r\n        TokenRegistry tokenRegistry = globalConfig.tokenInfoRegistry();\r\n        Account memory account = accounts[_account];\r\n        uint128 hasDeposits = account.depositBitmap;\r\n        for(uint8 i = 0; i < 128; i++) {\r\n            if(hasDeposits > 0) {\r\n                bool isEnabled = (hasDeposits & uint128(1)) > 0;\r\n                if(isEnabled) {\r\n                    (address token,\r\n                    uint256 divisor,\r\n                    uint256 price,\r\n                    uint256 borrowLTV) = tokenRegistry.getTokenInfoFromIndex(i);\r\n                    if(borrowLTV != 0) {\r\n                        uint256 depositBalanceCurrent = getDepositBalanceCurrent(token, _account);\r\n                        collETH = collETH.add(depositBalanceCurrent.mul(price).div(divisor));\r\n                    }\r\n                }\r\n                hasDeposits = hasDeposits >> 1;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return collETH;\r\n    }\r\n\r\n    /**\r\n     * Get current deposit balance of a token\r\n     * @dev This is an estimation. Add a new checkpoint first, if you want to derive the exact balance.\r\n     */\r\n    function getDepositETH(\r\n        address _accountAddr\r\n    ) public view returns (uint256 depositETH) {\r\n        TokenRegistry tokenRegistry = globalConfig.tokenInfoRegistry();\r\n        Account memory account = accounts[_accountAddr];\r\n        uint128 hasDeposits = account.depositBitmap;\r\n        for(uint8 i = 0; i < 128; i++) {\r\n            if(hasDeposits > 0) {\r\n                bool isEnabled = (hasDeposits & uint128(1)) > 0;\r\n                if(isEnabled) {\r\n                    (address token, uint256 divisor, uint256 price, ) = tokenRegistry.getTokenInfoFromIndex(i);\r\n\r\n                    uint256 depositBalanceCurrent = getDepositBalanceCurrent(token, _accountAddr);\r\n                    depositETH = depositETH.add(depositBalanceCurrent.mul(price).div(divisor));\r\n                }\r\n                hasDeposits = hasDeposits >> 1;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return depositETH;\r\n    }\r\n    /**\r\n     * Get borrowed balance of a token in the uint256 of Wei\r\n     */\r\n    function getBorrowETH(\r\n        address _accountAddr\r\n    ) public view returns (uint256 borrowETH) {\r\n        TokenRegistry tokenRegistry = globalConfig.tokenInfoRegistry();\r\n        Account memory account = accounts[_accountAddr];\r\n        uint128 hasBorrows = account.borrowBitmap;\r\n        for(uint8 i = 0; i < 128; i++) {\r\n            if(hasBorrows > 0) {\r\n                bool isEnabled = (hasBorrows & uint128(1)) > 0;\r\n                if(isEnabled) {\r\n                    (address token, uint256 divisor, uint256 price, ) = tokenRegistry.getTokenInfoFromIndex(i);\r\n\r\n                    uint256 borrowBalanceCurrent = getBorrowBalanceCurrent(token, _accountAddr);\r\n                    borrowETH = borrowETH.add(borrowBalanceCurrent.mul(price).div(divisor));\r\n                }\r\n                hasBorrows = hasBorrows >> 1;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return borrowETH;\r\n    }\r\n\r\n    /**\r\n     * Check if the account is liquidatable\r\n     * @param _borrower borrower's account\r\n     * @return true if the account is liquidatable\r\n     */\r\n    function isAccountLiquidatable(address _borrower) public returns (bool) {\r\n        TokenRegistry tokenRegistry = globalConfig.tokenInfoRegistry();\r\n        Bank bank = globalConfig.bank();\r\n\r\n        // Add new rate check points for all the collateral tokens from borrower in order to\r\n        // have accurate calculation of liquidation oppotunites.\r\n        Account memory account = accounts[_borrower];\r\n        uint128 hasBorrowsOrDeposits = account.borrowBitmap | account.depositBitmap;\r\n        for(uint8 i = 0; i < 128; i++) {\r\n            if(hasBorrowsOrDeposits > 0) {\r\n                bool isEnabled = (hasBorrowsOrDeposits & uint128(1)) > 0;\r\n                if(isEnabled) {\r\n                    address token = tokenRegistry.addressFromIndex(i);\r\n                    bank.newRateIndexCheckpoint(token);\r\n                }\r\n                hasBorrowsOrDeposits = hasBorrowsOrDeposits >> 1;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        uint256 liquidationThreshold = globalConfig.liquidationThreshold();\r\n\r\n        uint256 totalBorrow = getBorrowETH(_borrower);\r\n        uint256 totalCollateral = getCollateralETH(_borrower);\r\n\r\n        // It is required that LTV is larger than LIQUIDATE_THREADHOLD for liquidation\r\n        // return totalBorrow.mul(100) > totalCollateral.mul(liquidationThreshold);\r\n        return totalBorrow.mul(100) > totalCollateral.mul(liquidationThreshold);\r\n    }\r\n\r\n    struct LiquidationVars {\r\n        uint256 borrowerCollateralValue;\r\n        uint256 targetTokenBalance;\r\n        uint256 targetTokenBalanceBorrowed;\r\n        uint256 targetTokenPrice;\r\n        uint256 liquidationDiscountRatio;\r\n        uint256 totalBorrow;\r\n        uint256 borrowPower;\r\n        uint256 liquidateTokenBalance;\r\n        uint256 liquidateTokenPrice;\r\n        uint256 limitRepaymentValue;\r\n        uint256 borrowTokenLTV;\r\n        uint256 repayAmount;\r\n        uint256 payAmount;\r\n    }\r\n\r\n    function liquidate(\r\n        address _liquidator,\r\n        address _borrower,\r\n        address _borrowedToken,\r\n        address _collateralToken\r\n    )\r\n        external\r\n        onlyAuthorized\r\n        returns (\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        initCollateralFlag(_liquidator);\r\n        initCollateralFlag(_borrower);\r\n        require(isAccountLiquidatable(_borrower), \"borrower is not liquidatable\");\r\n\r\n        // It is required that the liquidator doesn't exceed it's borrow power.\r\n        // if liquidator has any borrows, then only check for borrowPower condition\r\n        Account memory liquidateAcc = accounts[_liquidator];\r\n        if(liquidateAcc.borrowBitmap > 0) {\r\n            require(\r\n                getBorrowETH(_liquidator) < getBorrowPower(_liquidator),\r\n                \"No extra funds used for liquidation\"\r\n            );\r\n        }\r\n\r\n        LiquidationVars memory vars;\r\n\r\n        TokenRegistry tokenRegistry = globalConfig.tokenInfoRegistry();\r\n\r\n        // _borrowedToken balance of the liquidator (deposit balance)\r\n        vars.targetTokenBalance = getDepositBalanceCurrent(_borrowedToken, _liquidator);\r\n        require(vars.targetTokenBalance > 0, \"amount must be > 0\");\r\n\r\n        // _borrowedToken balance of the borrower (borrow balance)\r\n        vars.targetTokenBalanceBorrowed = getBorrowBalanceCurrent(_borrowedToken, _borrower);\r\n        require(vars.targetTokenBalanceBorrowed > 0, \"borrower not own any debt token\");\r\n\r\n        // _borrowedToken available for liquidation\r\n        uint256 borrowedTokenAmountForLiquidation = vars.targetTokenBalance.min(vars.targetTokenBalanceBorrowed);\r\n\r\n        // _collateralToken balance of the borrower (deposit balance)\r\n        vars.liquidateTokenBalance = getDepositBalanceCurrent(_collateralToken, _borrower);\r\n\r\n        uint256 targetTokenDivisor;\r\n        (\r\n            ,\r\n            targetTokenDivisor,\r\n            vars.targetTokenPrice,\r\n            vars.borrowTokenLTV\r\n        ) = tokenRegistry.getTokenInfoFromAddress(_borrowedToken);\r\n\r\n        uint256 liquidateTokendivisor;\r\n        uint256 collateralLTV;\r\n        (\r\n            ,\r\n            liquidateTokendivisor,\r\n            vars.liquidateTokenPrice,\r\n            collateralLTV\r\n        ) = tokenRegistry.getTokenInfoFromAddress(_collateralToken);\r\n\r\n        // _collateralToken to purchase so that borrower's balance matches its borrow power\r\n        vars.totalBorrow = getBorrowETH(_borrower);\r\n        vars.borrowPower = getBorrowPower(_borrower);\r\n        vars.liquidationDiscountRatio = globalConfig.liquidationDiscountRatio();\r\n        vars.limitRepaymentValue = vars.totalBorrow.sub(vars.borrowPower)\r\n            .mul(100)\r\n            .div(vars.liquidationDiscountRatio.sub(collateralLTV));\r\n\r\n        uint256 collateralTokenValueForLiquidation = vars.limitRepaymentValue.min(\r\n            vars.liquidateTokenBalance\r\n            .mul(vars.liquidateTokenPrice)\r\n            .div(liquidateTokendivisor)\r\n        );\r\n\r\n        uint256 liquidationValue = collateralTokenValueForLiquidation.min(\r\n            borrowedTokenAmountForLiquidation\r\n            .mul(vars.targetTokenPrice)\r\n            .mul(100)\r\n            .div(targetTokenDivisor)\r\n            .div(vars.liquidationDiscountRatio)\r\n        );\r\n\r\n        vars.repayAmount = liquidationValue.mul(vars.liquidationDiscountRatio)\r\n            .mul(targetTokenDivisor)\r\n            .div(100)\r\n            .div(vars.targetTokenPrice);\r\n        vars.payAmount = vars.repayAmount.mul(liquidateTokendivisor)\r\n            .mul(100)\r\n            .mul(vars.targetTokenPrice);\r\n        vars.payAmount = vars.payAmount.div(targetTokenDivisor)\r\n            .div(vars.liquidationDiscountRatio)\r\n            .div(vars.liquidateTokenPrice);\r\n\r\n        deposit(_liquidator, _collateralToken, vars.payAmount);\r\n        withdraw_liquidate(_liquidator, _borrowedToken, vars.repayAmount);\r\n        withdraw_liquidate(_borrower, _collateralToken, vars.payAmount);\r\n        repay(_borrower, _borrowedToken, vars.repayAmount);\r\n\r\n        return (vars.repayAmount, vars.payAmount);\r\n    }\r\n\r\n\r\n    /**\r\n     * Get current block number\r\n     * @return the current block number\r\n     */\r\n    function getBlockNumber() private view returns (uint256) {\r\n        return block.number;\r\n    }\r\n\r\n    /**\r\n     * An account claim all mined FIN token.\r\n     * @dev If the FIN mining index point doesn't exist, we have to calculate the FIN amount\r\n     * accurately. So the user can withdraw all available FIN tokens.\r\n     */\r\n    function claim(address _account) public onlyAuthorized returns(uint256){\r\n        TokenRegistry tokenRegistry = globalConfig.tokenInfoRegistry();\r\n        Bank bank = globalConfig.bank();\r\n\r\n        uint256 currentBlock = getBlockNumber();\r\n\r\n        Account memory account = accounts[_account];\r\n        uint128 depositBitmap = account.depositBitmap;\r\n        uint128 borrowBitmap = account.borrowBitmap;\r\n        uint128 hasDepositOrBorrow = depositBitmap | borrowBitmap;\r\n\r\n        for(uint8 i = 0; i < 128; i++) {\r\n            if(hasDepositOrBorrow > 0) {\r\n                if((hasDepositOrBorrow & uint128(1)) > 0) {\r\n                    address token = tokenRegistry.addressFromIndex(i);\r\n                    AccountTokenLib.TokenInfo storage tokenInfo = accounts[_account].tokenInfos[token];\r\n                    bank.updateMining(token);\r\n                    if (depositBitmap.isBitSet(i)) {\r\n                        bank.updateDepositFINIndex(token);\r\n                        uint256 lastDepositBlock = tokenInfo.getLastDepositBlock();\r\n                        calculateDepositFIN(lastDepositBlock, token, _account, currentBlock);\r\n                        tokenInfo.deposit(0, bank.getDepositAccruedRate(token, lastDepositBlock), currentBlock);\r\n                    }\r\n\r\n                    if (borrowBitmap.isBitSet(i)) {\r\n                        bank.updateBorrowFINIndex(token);\r\n                        uint256 lastBorrowBlock = tokenInfo.getLastBorrowBlock();\r\n                        calculateBorrowFIN(lastBorrowBlock, token, _account, currentBlock);\r\n                        tokenInfo.borrow(0, bank.getBorrowAccruedRate(token, lastBorrowBlock), currentBlock);\r\n                    }\r\n                }\r\n                hasDepositOrBorrow = hasDepositOrBorrow >> 1;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        uint256 _FINAmount = FINAmount[_account];\r\n        FINAmount[_account] = 0;\r\n        return _FINAmount;\r\n    }\r\n\r\n    function claimForToken(address _account, address _token) public onlyAuthorized returns(uint256) {\r\n        Account memory account = accounts[_account];\r\n        uint8 index = globalConfig.tokenInfoRegistry().getTokenIndex(_token);\r\n        bool isDeposit = account.depositBitmap.isBitSet(index);\r\n        bool isBorrow = account.borrowBitmap.isBitSet(index);\r\n        if(! (isDeposit || isBorrow)) return 0;\r\n\r\n        Bank bank = globalConfig.bank();\r\n        uint256 currentBlock = getBlockNumber();\r\n\r\n        AccountTokenLib.TokenInfo storage tokenInfo = accounts[_account].tokenInfos[_token];\r\n        bank.updateMining(_token);\r\n\r\n        if (isDeposit) {\r\n            bank.updateDepositFINIndex(_token);\r\n            uint256 lastDepositBlock = tokenInfo.getLastDepositBlock();\r\n            calculateDepositFIN(lastDepositBlock, _token, _account, currentBlock);\r\n            tokenInfo.deposit(0, bank.getDepositAccruedRate(_token, lastDepositBlock), currentBlock);\r\n        }\r\n        if (isBorrow) {\r\n            bank.updateBorrowFINIndex(_token);\r\n            uint256 lastBorrowBlock = tokenInfo.getLastBorrowBlock();\r\n            calculateBorrowFIN(lastBorrowBlock, _token, _account, currentBlock);\r\n            tokenInfo.borrow(0, bank.getBorrowAccruedRate(_token, lastBorrowBlock), currentBlock);\r\n        }\r\n\r\n        uint256 _FINAmount = FINAmount[_account];\r\n        FINAmount[_account] = 0;\r\n        return _FINAmount;\r\n    }\r\n\r\n    /**\r\n     * Accumulate the amount FIN mined by depositing between _lastBlock and _currentBlock\r\n     */\r\n    function calculateDepositFIN(uint256 _lastBlock, address _token, address _accountAddr, uint256 _currentBlock) internal {\r\n        Bank bank = globalConfig.bank();\r\n\r\n        uint256 indexDifference = bank.depositFINRateIndex(_token, _currentBlock)\r\n            .sub(bank.depositFINRateIndex(_token, _lastBlock));\r\n        uint256 getFIN = getDepositBalanceCurrent(_token, _accountAddr)\r\n            .mul(indexDifference)\r\n            .div(bank.depositeRateIndex(_token, _currentBlock));\r\n        FINAmount[_accountAddr] = FINAmount[_accountAddr].add(getFIN);\r\n    }\r\n\r\n    /**\r\n     * Accumulate the amount FIN mined by borrowing between _lastBlock and _currentBlock\r\n     */\r\n    function calculateBorrowFIN(uint256 _lastBlock, address _token, address _accountAddr, uint256 _currentBlock) internal {\r\n        Bank bank = globalConfig.bank();\r\n\r\n        uint256 indexDifference = bank.borrowFINRateIndex(_token, _currentBlock)\r\n            .sub(bank.borrowFINRateIndex(_token, _lastBlock));\r\n        uint256 getFIN = getBorrowBalanceCurrent(_token, _accountAddr)\r\n            .mul(indexDifference)\r\n            .div(bank.borrowRateIndex(_token, _currentBlock));\r\n        FINAmount[_accountAddr] = FINAmount[_accountAddr].add(getFIN);\r\n    }\r\n\r\n    function version() public pure returns(string memory) {\r\n        return \"v1.2.0\";\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract GlobalConfig is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public communityFundRatio = 10;\r\n    uint256 public minReserveRatio = 10;\r\n    uint256 public maxReserveRatio = 20;\r\n    uint256 public liquidationThreshold = 85;\r\n    uint256 public liquidationDiscountRatio = 95;\r\n    uint256 public compoundSupplyRateWeights = 4;\r\n    uint256 public compoundBorrowRateWeights = 6;\r\n    uint256 public rateCurveSlope = 15 * 10 ** 16;\r\n    uint256 public rateCurveConstant = 3 * 10 ** 16;\r\n    uint256 public deFinerRate = 10;\r\n    address payable public deFinerCommunityFund = msg.sender;\r\n\r\n    Bank public bank;                               // the Bank contract\r\n    SavingAccount public savingAccount;             // the SavingAccount contract\r\n    TokenRegistry public tokenInfoRegistry;     // the TokenRegistry contract\r\n    Accounts public accounts;                       // the Accounts contract\r\n    Constant public constants;                      // the constants contract\r\n\r\n    event CommunityFundRatioUpdated(uint256 indexed communityFundRatio);\r\n    event MinReserveRatioUpdated(uint256 indexed minReserveRatio);\r\n    event MaxReserveRatioUpdated(uint256 indexed maxReserveRatio);\r\n    event LiquidationThresholdUpdated(uint256 indexed liquidationThreshold);\r\n    event LiquidationDiscountRatioUpdated(uint256 indexed liquidationDiscountRatio);\r\n    event CompoundSupplyRateWeightsUpdated(uint256 indexed compoundSupplyRateWeights);\r\n    event CompoundBorrowRateWeightsUpdated(uint256 indexed compoundBorrowRateWeights);\r\n    event rateCurveSlopeUpdated(uint256 indexed rateCurveSlope);\r\n    event rateCurveConstantUpdated(uint256 indexed rateCurveConstant);\r\n    event ConstantUpdated(address indexed constants);\r\n    event BankUpdated(address indexed bank);\r\n    event SavingAccountUpdated(address indexed savingAccount);\r\n    event TokenInfoRegistryUpdated(address indexed tokenInfoRegistry);\r\n    event AccountsUpdated(address indexed accounts);\r\n    event DeFinerCommunityFundUpdated(address indexed deFinerCommunityFund);\r\n    event DeFinerRateUpdated(uint256 indexed deFinerRate);\r\n    event ChainLinkUpdated(address indexed chainLink);\r\n\r\n\r\n    function initialize(\r\n        Bank _bank,\r\n        SavingAccount _savingAccount,\r\n        TokenRegistry _tokenInfoRegistry,\r\n        Accounts _accounts,\r\n        Constant _constants\r\n    ) public onlyOwner {\r\n        bank = _bank;\r\n        savingAccount = _savingAccount;\r\n        tokenInfoRegistry = _tokenInfoRegistry;\r\n        accounts = _accounts;\r\n        constants = _constants;\r\n    }\r\n\r\n    /**\r\n     * Update the community fund (commision fee) ratio.\r\n     * @param _communityFundRatio the new ratio\r\n     */\r\n    function updateCommunityFundRatio(uint256 _communityFundRatio) external onlyOwner {\r\n        if (_communityFundRatio == communityFundRatio)\r\n            return;\r\n\r\n        require(_communityFundRatio > 0 && _communityFundRatio < 100,\r\n            \"Invalid community fund ratio.\");\r\n        communityFundRatio = _communityFundRatio;\r\n\r\n        emit CommunityFundRatioUpdated(_communityFundRatio);\r\n    }\r\n\r\n    /**\r\n     * Update the minimum reservation reatio\r\n     * @param _minReserveRatio the new value of the minimum reservation ratio\r\n     */\r\n    function updateMinReserveRatio(uint256 _minReserveRatio) external onlyOwner {\r\n        if (_minReserveRatio == minReserveRatio)\r\n            return;\r\n\r\n        require(_minReserveRatio > 0 && _minReserveRatio < maxReserveRatio,\r\n            \"Invalid min reserve ratio.\");\r\n        minReserveRatio = _minReserveRatio;\r\n\r\n        emit MinReserveRatioUpdated(_minReserveRatio);\r\n    }\r\n\r\n    /**\r\n     * Update the maximum reservation reatio\r\n     * @param _maxReserveRatio the new value of the maximum reservation ratio\r\n     */\r\n    function updateMaxReserveRatio(uint256 _maxReserveRatio) external onlyOwner {\r\n        if (_maxReserveRatio == maxReserveRatio)\r\n            return;\r\n\r\n        require(_maxReserveRatio > minReserveRatio && _maxReserveRatio < 100,\r\n            \"Invalid max reserve ratio.\");\r\n        maxReserveRatio = _maxReserveRatio;\r\n\r\n        emit MaxReserveRatioUpdated(_maxReserveRatio);\r\n    }\r\n\r\n    /**\r\n     * Update the liquidation threshold, i.e. the LTV that will trigger the liquidation.\r\n     * @param _liquidationThreshold the new threshhold value\r\n     */\r\n    function updateLiquidationThreshold(uint256 _liquidationThreshold) external onlyOwner {\r\n        if (_liquidationThreshold == liquidationThreshold)\r\n            return;\r\n\r\n        require(_liquidationThreshold > 0 && _liquidationThreshold < liquidationDiscountRatio,\r\n            \"Invalid liquidation threshold.\");\r\n        liquidationThreshold = _liquidationThreshold;\r\n\r\n        emit LiquidationThresholdUpdated(_liquidationThreshold);\r\n    }\r\n\r\n    /**\r\n     * Update the liquidation discount\r\n     * @param _liquidationDiscountRatio the new liquidation discount\r\n     */\r\n    function updateLiquidationDiscountRatio(uint256 _liquidationDiscountRatio) external onlyOwner {\r\n        if (_liquidationDiscountRatio == liquidationDiscountRatio)\r\n            return;\r\n\r\n        require(_liquidationDiscountRatio > liquidationThreshold && _liquidationDiscountRatio < 100,\r\n            \"Invalid liquidation discount ratio.\");\r\n        liquidationDiscountRatio = _liquidationDiscountRatio;\r\n\r\n        emit LiquidationDiscountRatioUpdated(_liquidationDiscountRatio);\r\n    }\r\n\r\n    /**\r\n     * Medium value of the reservation ratio, which is the value that the pool try to maintain.\r\n     */\r\n    function midReserveRatio() public view returns(uint256){\r\n        return minReserveRatio.add(maxReserveRatio).div(2);\r\n    }\r\n\r\n    function updateCompoundSupplyRateWeights(uint256 _compoundSupplyRateWeights) external onlyOwner{\r\n        compoundSupplyRateWeights = _compoundSupplyRateWeights;\r\n\r\n        emit CompoundSupplyRateWeightsUpdated(_compoundSupplyRateWeights);\r\n    }\r\n\r\n    function updateCompoundBorrowRateWeights(uint256 _compoundBorrowRateWeights) external onlyOwner{\r\n        compoundBorrowRateWeights = _compoundBorrowRateWeights;\r\n\r\n        emit CompoundBorrowRateWeightsUpdated(_compoundBorrowRateWeights);\r\n    }\r\n\r\n    function updaterateCurveSlope(uint256 _rateCurveSlope) external onlyOwner{\r\n        rateCurveSlope = _rateCurveSlope;\r\n\r\n        emit rateCurveSlopeUpdated(_rateCurveSlope);\r\n    }\r\n\r\n    function updaterateCurveConstant(uint256 _rateCurveConstant) external onlyOwner{\r\n        rateCurveConstant = _rateCurveConstant;\r\n\r\n        emit rateCurveConstantUpdated(_rateCurveConstant);\r\n    }\r\n\r\n    function updateBank(Bank _bank) external onlyOwner{\r\n        bank = _bank;\r\n\r\n        emit BankUpdated(address(_bank));\r\n    }\r\n\r\n    function updateSavingAccount(SavingAccount _savingAccount) external onlyOwner{\r\n        savingAccount = _savingAccount;\r\n\r\n        emit SavingAccountUpdated(address(_savingAccount));\r\n    }\r\n\r\n    function updateTokenInfoRegistry(TokenRegistry _tokenInfoRegistry) external onlyOwner{\r\n        tokenInfoRegistry = _tokenInfoRegistry;\r\n\r\n        emit TokenInfoRegistryUpdated(address(_tokenInfoRegistry));\r\n    }\r\n\r\n    function updateAccounts(Accounts _accounts) external onlyOwner{\r\n        accounts = _accounts;\r\n\r\n        emit AccountsUpdated(address(_accounts));\r\n    }\r\n\r\n    function updateConstant(Constant _constants) external onlyOwner{\r\n        constants = _constants;\r\n\r\n        emit ConstantUpdated(address(_constants));\r\n    }\r\n\r\n    function updatedeFinerCommunityFund(address payable _deFinerCommunityFund) external onlyOwner{\r\n        deFinerCommunityFund = _deFinerCommunityFund;\r\n\r\n        emit DeFinerCommunityFundUpdated(_deFinerCommunityFund);\r\n    }\r\n\r\n    function updatedeFinerRate(uint256 _deFinerRate) external onlyOwner{\r\n        require(_deFinerRate <= 100,\"_deFinerRate cannot exceed 100\");\r\n        deFinerRate = _deFinerRate;\r\n\r\n        emit DeFinerRateUpdated(_deFinerRate);\r\n    }\r\n\r\n}\r\ninterface ICToken {\r\n    function supplyRatePerBlock() external view returns (uint);\r\n    function borrowRatePerBlock() external view returns (uint);\r\n    function mint(uint mintAmount) external returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n    function redeem(uint redeemAmount) external returns (uint);\r\n    function exchangeRateStore() external view returns (uint);\r\n    function exchangeRateCurrent() external returns (uint);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function balanceOfUnderlying(address owner) external returns (uint);\r\n}\r\n\r\ninterface ICETH{\r\n    function mint() external payable;\r\n}\r\n\r\ninterface IController {\r\n    function fastForward(uint blocks) external returns (uint);\r\n    function getBlockNumber() external view returns (uint);\r\n}\r\n\r\n\r\n\r\ncontract Bank is Constant, Initializable{\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) public totalLoans;     // amount of lended tokens\r\n    mapping(address => uint256) public totalReserve;   // amount of tokens in reservation\r\n    mapping(address => uint256) public totalCompound;  // amount of tokens in compound\r\n    // Token => block-num => rate\r\n    mapping(address => mapping(uint => uint)) public depositeRateIndex; // the index curve of deposit rate\r\n    // Token => block-num => rate\r\n    mapping(address => mapping(uint => uint)) public borrowRateIndex;   // the index curve of borrow rate\r\n    // token address => block number\r\n    mapping(address => uint) public lastCheckpoint;            // last checkpoint on the index curve\r\n    // cToken address => rate\r\n    mapping(address => uint) public lastCTokenExchangeRate;    // last compound cToken exchange rate\r\n    mapping(address => ThirdPartyPool) compoundPool;    // the compound pool\r\n\r\n    GlobalConfig globalConfig;            // global configuration contract address\r\n\r\n    mapping(address => mapping(uint => uint)) public depositFINRateIndex;\r\n    mapping(address => mapping(uint => uint)) public borrowFINRateIndex;\r\n    mapping(address => uint) public lastDepositFINRateCheckpoint;\r\n    mapping(address => uint) public lastBorrowFINRateCheckpoint;\r\n\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == address(globalConfig.savingAccount()) || msg.sender == address(globalConfig.accounts()),\r\n            \"Only authorized to call from DeFiner internal contracts.\");\r\n        _;\r\n    }\r\n\r\n    struct ThirdPartyPool {\r\n        bool supported;             // if the token is supported by the third party platforms such as Compound\r\n        uint capitalRatio;          // the ratio of the capital in third party to the total asset\r\n        uint depositRatePerBlock;   // the deposit rate of the token in third party\r\n        uint borrowRatePerBlock;    // the borrow rate of the token in third party\r\n    }\r\n\r\n    event UpdateIndex(address indexed token, uint256 depositeRateIndex, uint256 borrowRateIndex);\r\n    event UpdateDepositFINIndex(address indexed _token, uint256 depositFINRateIndex);\r\n    event UpdateBorrowFINIndex(address indexed _token, uint256 borrowFINRateIndex);\r\n\r\n    /**\r\n     * Initialize the Bank\r\n     * @param _globalConfig the global configuration contract\r\n     */\r\n    function initialize(\r\n        GlobalConfig _globalConfig\r\n    ) public initializer {\r\n        globalConfig = _globalConfig;\r\n    }\r\n\r\n    /**\r\n     * Total amount of the token in Saving account\r\n     * @param _token token address\r\n     */\r\n    function getTotalDepositStore(address _token) public view returns(uint) {\r\n        address cToken = globalConfig.tokenInfoRegistry().getCToken(_token);\r\n        // totalLoans[_token] = U   totalReserve[_token] = R\r\n        return totalCompound[cToken].add(totalLoans[_token]).add(totalReserve[_token]); // return totalAmount = C + U + R\r\n    }\r\n\r\n    /**\r\n     * Update total amount of token in Compound as the cToken price changed\r\n     * @param _token token address\r\n     */\r\n    function updateTotalCompound(address _token) internal {\r\n        address cToken = globalConfig.tokenInfoRegistry().getCToken(_token);\r\n        if(cToken != address(0)) {\r\n            totalCompound[cToken] = ICToken(cToken).balanceOfUnderlying(address(globalConfig.savingAccount()));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the total reservation. Before run this function, make sure that totalCompound has been updated\r\n     * by calling updateTotalCompound. Otherwise, totalCompound may not equal to the exact amount of the\r\n     * token in Compound.\r\n     * @param _token token address\r\n     * @param _action indicate if user's operation is deposit or withdraw, and borrow or repay.\r\n     * @return the actuall amount deposit/withdraw from the saving pool\r\n     */\r\n    function updateTotalReserve(address _token, uint _amount, ActionType _action) internal returns(uint256 compoundAmount){\r\n        address cToken = globalConfig.tokenInfoRegistry().getCToken(_token);\r\n        uint totalAmount = getTotalDepositStore(_token);\r\n        if (_action == ActionType.DepositAction || _action == ActionType.RepayAction) {\r\n            // Total amount of token after deposit or repay\r\n            if (_action == ActionType.DepositAction)\r\n                totalAmount = totalAmount.add(_amount);\r\n            else\r\n                totalLoans[_token] = totalLoans[_token].sub(_amount);\r\n\r\n            // Expected total amount of token in reservation after deposit or repay\r\n            uint totalReserveBeforeAdjust = totalReserve[_token].add(_amount);\r\n\r\n            if (cToken != address(0) &&\r\n            totalReserveBeforeAdjust > totalAmount.mul(globalConfig.maxReserveRatio()).div(100)) {\r\n                uint toCompoundAmount = totalReserveBeforeAdjust.sub(totalAmount.mul(globalConfig.midReserveRatio()).div(100));\r\n                //toCompound(_token, toCompoundAmount);\r\n                compoundAmount = toCompoundAmount;\r\n                totalCompound[cToken] = totalCompound[cToken].add(toCompoundAmount);\r\n                totalReserve[_token] = totalReserve[_token].add(_amount).sub(toCompoundAmount);\r\n            }\r\n            else {\r\n                totalReserve[_token] = totalReserve[_token].add(_amount);\r\n            }\r\n        } else {\r\n            // The lack of liquidity exception happens when the pool doesn't have enough tokens for borrow/withdraw\r\n            // It happens when part of the token has lended to the other accounts.\r\n            // However in case of withdrawAll, even if the token has no loan, this requirment may still false because\r\n            // of the precision loss in the rate calcuation. So we put a logic here to deal with this case: in case\r\n            // of withdrawAll and there is no loans for the token, we just adjust the balance in bank contract to the\r\n            // to the balance of that individual account.\r\n            if(_action == ActionType.WithdrawAction) {\r\n                if(totalLoans[_token] != 0)\r\n                    require(getPoolAmount(_token) >= _amount, \"Lack of liquidity when withdraw.\");\r\n                else if (getPoolAmount(_token) < _amount)\r\n                    totalReserve[_token] = _amount.sub(totalCompound[cToken]);\r\n                totalAmount = getTotalDepositStore(_token);\r\n            }\r\n            else\r\n                require(getPoolAmount(_token) >= _amount, \"Lack of liquidity when borrow.\");\r\n\r\n            // Total amount of token after withdraw or borrow\r\n            if (_action == ActionType.WithdrawAction)\r\n                totalAmount = totalAmount.sub(_amount);\r\n            else\r\n                totalLoans[_token] = totalLoans[_token].add(_amount);\r\n\r\n            // Expected total amount of token in reservation after deposit or repay\r\n            uint totalReserveBeforeAdjust = totalReserve[_token] > _amount ? totalReserve[_token].sub(_amount) : 0;\r\n\r\n            // Trigger fromCompound if the new reservation ratio is less than 10%\r\n            if(cToken != address(0) &&\r\n            (totalAmount == 0 || totalReserveBeforeAdjust < totalAmount.mul(globalConfig.minReserveRatio()).div(100))) {\r\n\r\n                uint totalAvailable = totalReserve[_token].add(totalCompound[cToken]).sub(_amount);\r\n                if (totalAvailable < totalAmount.mul(globalConfig.midReserveRatio()).div(100)){\r\n                    // Withdraw all the tokens from Compound\r\n                    compoundAmount = totalCompound[cToken];\r\n                    totalCompound[cToken] = 0;\r\n                    totalReserve[_token] = totalAvailable;\r\n                } else {\r\n                    // Withdraw partial tokens from Compound\r\n                    uint totalInCompound = totalAvailable.sub(totalAmount.mul(globalConfig.midReserveRatio()).div(100));\r\n                    compoundAmount = totalCompound[cToken].sub(totalInCompound);\r\n                    totalCompound[cToken] = totalInCompound;\r\n                    totalReserve[_token] = totalAvailable.sub(totalInCompound);\r\n                }\r\n            }\r\n            else {\r\n                totalReserve[_token] = totalReserve[_token].sub(_amount);\r\n            }\r\n        }\r\n        return compoundAmount;\r\n    }\r\n\r\n     function update(address _token, uint _amount, ActionType _action) public onlyAuthorized returns(uint256 compoundAmount) {\r\n        updateTotalCompound(_token);\r\n        // updateTotalLoan(_token);\r\n        compoundAmount = updateTotalReserve(_token, _amount, _action);\r\n        return compoundAmount;\r\n    }\r\n\r\n    /**\r\n     * The function is called in Bank.deposit(), Bank.withdraw() and Accounts.claim() functions.\r\n     * The function should be called AFTER the newRateIndexCheckpoint function so that the account balances are\r\n     * accurate, and BEFORE the account balance acutally updated due to deposit/withdraw activities.\r\n     */\r\n    function updateDepositFINIndex(address _token) public onlyAuthorized{\r\n        uint currentBlock = getBlockNumber();\r\n        uint deltaBlock;\r\n        // If it is the first deposit FIN rate checkpoint, set the deltaBlock value be 0 so that the first\r\n        // point on depositFINRateIndex is zero.\r\n        deltaBlock = lastDepositFINRateCheckpoint[_token] == 0 ? 0 : currentBlock.sub(lastDepositFINRateCheckpoint[_token]);\r\n        // If the totalDeposit of the token is zero, no FIN token should be mined and the FINRateIndex is unchanged.\r\n        depositFINRateIndex[_token][currentBlock] = depositFINRateIndex[_token][lastDepositFINRateCheckpoint[_token]].add(\r\n            getTotalDepositStore(_token) == 0 ? 0 : depositeRateIndex[_token][lastCheckpoint[_token]]\r\n                .mul(deltaBlock)\r\n                .mul(globalConfig.tokenInfoRegistry().depositeMiningSpeeds(_token))\r\n                .div(getTotalDepositStore(_token)));\r\n        lastDepositFINRateCheckpoint[_token] = currentBlock;\r\n\r\n        emit UpdateDepositFINIndex(_token, depositFINRateIndex[_token][currentBlock]);\r\n    }\r\n\r\n    function updateBorrowFINIndex(address _token) public onlyAuthorized{\r\n        uint currentBlock = getBlockNumber();\r\n        uint deltaBlock;\r\n        // If it is the first borrow FIN rate checkpoint, set the deltaBlock value be 0 so that the first\r\n        // point on borrowFINRateIndex is zero.\r\n        deltaBlock = lastBorrowFINRateCheckpoint[_token] == 0 ? 0 : currentBlock.sub(lastBorrowFINRateCheckpoint[_token]);\r\n        // If the totalBorrow of the token is zero, no FIN token should be mined and the FINRateIndex is unchanged.\r\n        borrowFINRateIndex[_token][currentBlock] = borrowFINRateIndex[_token][lastBorrowFINRateCheckpoint[_token]].add(\r\n            totalLoans[_token] == 0 ? 0 : borrowRateIndex[_token][lastCheckpoint[_token]]\r\n                    .mul(deltaBlock)\r\n                    .mul(globalConfig.tokenInfoRegistry().borrowMiningSpeeds(_token))\r\n                    .div(totalLoans[_token]));\r\n        lastBorrowFINRateCheckpoint[_token] = currentBlock;\r\n\r\n        emit UpdateBorrowFINIndex(_token, borrowFINRateIndex[_token][currentBlock]);\r\n    }\r\n\r\n    function updateMining(address _token) public onlyAuthorized{\r\n        newRateIndexCheckpoint(_token);\r\n        updateTotalCompound(_token);\r\n    }\r\n\r\n    /**\r\n     * Get the borrowing interest rate.\r\n     * @param _token token address\r\n     * @return the borrow rate for the current block\r\n     */\r\n    function getBorrowRatePerBlock(address _token) public view returns(uint) {\r\n        uint256 capitalUtilizationRatio = getCapitalUtilizationRatio(_token);\r\n        // rateCurveConstant = <'3 * (10)^16'_rateCurveConstant_configurable>\r\n        uint256 rateCurveConstant = globalConfig.rateCurveConstant();\r\n        // compoundSupply = Compound Supply Rate * <'0.4'_supplyRateWeights_configurable>\r\n        uint256 compoundSupply = compoundPool[_token].depositRatePerBlock.mul(globalConfig.compoundSupplyRateWeights());\r\n        // compoundBorrow = Compound Borrow Rate * <'0.6'_borrowRateWeights_configurable>\r\n        uint256 compoundBorrow = compoundPool[_token].borrowRatePerBlock.mul(globalConfig.compoundBorrowRateWeights());\r\n        // nonUtilizedCapRatio = (1 - U) // Non utilized capital ratio\r\n        uint256 nonUtilizedCapRatio = INT_UNIT.sub(capitalUtilizationRatio);\r\n\r\n        bool isSupportedOnCompound = globalConfig.tokenInfoRegistry().isSupportedOnCompound(_token);\r\n        if(isSupportedOnCompound) {\r\n            uint256 compoundSupplyPlusBorrow = compoundSupply.add(compoundBorrow).div(10);\r\n            uint256 rateConstant;\r\n            // if the token is supported in third party (like Compound), check if U = 1\r\n            if(capitalUtilizationRatio > ((10**18) - (10**15))) { // > 0.999\r\n                // if U = 1, borrowing rate = compoundSupply + compoundBorrow + ((rateCurveConstant * 100) / BLOCKS_PER_YEAR)\r\n                rateConstant = rateCurveConstant.mul(1000).div(BLOCKS_PER_YEAR);\r\n                return compoundSupplyPlusBorrow.add(rateConstant);\r\n            } else {\r\n                // if U != 1, borrowing rate = compoundSupply + compoundBorrow + ((rateCurveConstant / (1 - U)) / BLOCKS_PER_YEAR)\r\n                rateConstant = rateCurveConstant.mul(10**18).div(nonUtilizedCapRatio).div(BLOCKS_PER_YEAR);\r\n                return compoundSupplyPlusBorrow.add(rateConstant);\r\n            }\r\n        } else {\r\n            // If the token is NOT supported by the third party, check if U = 1\r\n            if(capitalUtilizationRatio > ((10**18) - (10**15))) { // > 0.999\r\n                // if U = 1, borrowing rate = rateCurveConstant * 100\r\n                return rateCurveConstant.mul(1000).div(BLOCKS_PER_YEAR);\r\n            } else {\r\n                // if 0 < U < 1, borrowing rate = 3% / (1 - U)\r\n                return rateCurveConstant.mul(10**18).div(nonUtilizedCapRatio).div(BLOCKS_PER_YEAR);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Get Deposit Rate.  Deposit APR = (Borrow APR * Utilization Rate (U) +  Compound Supply Rate *\r\n    * Capital Compound Ratio (C) )* (1- DeFiner Community Fund Ratio (D)). The scaling is 10 ** 18\r\n    * @param _token token address\r\n    * @return deposite rate of blocks before the current block\r\n    */\r\n    function getDepositRatePerBlock(address _token) public view returns(uint) {\r\n        uint256 borrowRatePerBlock = getBorrowRatePerBlock(_token);\r\n        uint256 capitalUtilRatio = getCapitalUtilizationRatio(_token);\r\n        if(!globalConfig.tokenInfoRegistry().isSupportedOnCompound(_token))\r\n            return borrowRatePerBlock.mul(capitalUtilRatio).div(INT_UNIT);\r\n\r\n        return borrowRatePerBlock.mul(capitalUtilRatio).add(compoundPool[_token].depositRatePerBlock\r\n            .mul(compoundPool[_token].capitalRatio)).div(INT_UNIT);\r\n    }\r\n\r\n    /**\r\n     * Get capital utilization. Capital Utilization Rate (U )= total loan outstanding / Total market deposit\r\n     * @param _token token address\r\n     * @return Capital utilization ratio `U`.\r\n     *  Valid range: 0 ≤ U ≤ 10^18\r\n     */\r\n    function getCapitalUtilizationRatio(address _token) public view returns(uint) {\r\n        uint256 totalDepositsNow = getTotalDepositStore(_token);\r\n        if(totalDepositsNow == 0) {\r\n            return 0;\r\n        } else {\r\n            return totalLoans[_token].mul(INT_UNIT).div(totalDepositsNow);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ratio of the capital in Compound\r\n     * @param _token token address\r\n     */\r\n    function getCapitalCompoundRatio(address _token) public view returns(uint) {\r\n        address cToken = globalConfig.tokenInfoRegistry().getCToken(_token);\r\n        if(totalCompound[cToken] == 0 ) {\r\n            return 0;\r\n        } else {\r\n            return uint(totalCompound[cToken].mul(INT_UNIT).div(getTotalDepositStore(_token)));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * It's a utility function. Get the cummulative deposit rate in a block interval ending in current block\r\n     * @param _token token address\r\n     * @param _depositRateRecordStart the start block of the interval\r\n     * @dev This function should always be called after current block is set as a new rateIndex point.\r\n     */\r\n    function getDepositAccruedRate(address _token, uint _depositRateRecordStart) external view returns (uint256) {\r\n        uint256 depositRate = depositeRateIndex[_token][_depositRateRecordStart];\r\n        require(depositRate != 0, \"_depositRateRecordStart is not a check point on index curve.\");\r\n        return depositeRateIndexNow(_token).mul(INT_UNIT).div(depositRate);\r\n    }\r\n\r\n    /**\r\n     * Get the cummulative borrow rate in a block interval ending in current block\r\n     * @param _token token address\r\n     * @param _borrowRateRecordStart the start block of the interval\r\n     * @dev This function should always be called after current block is set as a new rateIndex point.\r\n     */\r\n    function getBorrowAccruedRate(address _token, uint _borrowRateRecordStart) external view returns (uint256) {\r\n        uint256 borrowRate = borrowRateIndex[_token][_borrowRateRecordStart];\r\n        require(borrowRate != 0, \"_borrowRateRecordStart is not a check point on index curve.\");\r\n        return borrowRateIndexNow(_token).mul(INT_UNIT).div(borrowRate);\r\n    }\r\n\r\n    /**\r\n     * Set a new rate index checkpoint.\r\n     * @param _token token address\r\n     * @dev The rate set at the checkpoint is the rate from the last checkpoint to this checkpoint\r\n     */\r\n    function newRateIndexCheckpoint(address _token) public onlyAuthorized {\r\n\r\n        // return if the rate check point already exists\r\n        uint blockNumber = getBlockNumber();\r\n        if (blockNumber == lastCheckpoint[_token])\r\n            return;\r\n\r\n        uint256 UNIT = INT_UNIT;\r\n        address cToken = globalConfig.tokenInfoRegistry().getCToken(_token);\r\n\r\n        // If it is the first check point, initialize the rate index\r\n        uint256 previousCheckpoint = lastCheckpoint[_token];\r\n        if (lastCheckpoint[_token] == 0) {\r\n            if(cToken == address(0)) {\r\n                compoundPool[_token].supported = false;\r\n                borrowRateIndex[_token][blockNumber] = UNIT;\r\n                depositeRateIndex[_token][blockNumber] = UNIT;\r\n                // Update the last checkpoint\r\n                lastCheckpoint[_token] = blockNumber;\r\n            }\r\n            else {\r\n                compoundPool[_token].supported = true;\r\n                uint cTokenExchangeRate = ICToken(cToken).exchangeRateCurrent();\r\n                // Get the curretn cToken exchange rate in Compound, which is need to calculate DeFiner's rate\r\n                compoundPool[_token].capitalRatio = getCapitalCompoundRatio(_token);\r\n                compoundPool[_token].borrowRatePerBlock = ICToken(cToken).borrowRatePerBlock();  // initial value\r\n                compoundPool[_token].depositRatePerBlock = ICToken(cToken).supplyRatePerBlock(); // initial value\r\n                borrowRateIndex[_token][blockNumber] = UNIT;\r\n                depositeRateIndex[_token][blockNumber] = UNIT;\r\n                // Update the last checkpoint\r\n                lastCheckpoint[_token] = blockNumber;\r\n                lastCTokenExchangeRate[cToken] = cTokenExchangeRate;\r\n            }\r\n\r\n        } else {\r\n            if(cToken == address(0)) {\r\n                compoundPool[_token].supported = false;\r\n                borrowRateIndex[_token][blockNumber] = borrowRateIndexNow(_token);\r\n                depositeRateIndex[_token][blockNumber] = depositeRateIndexNow(_token);\r\n                // Update the last checkpoint\r\n                lastCheckpoint[_token] = blockNumber;\r\n            } else {\r\n                compoundPool[_token].supported = true;\r\n                uint cTokenExchangeRate = ICToken(cToken).exchangeRateCurrent();\r\n                // Get the curretn cToken exchange rate in Compound, which is need to calculate DeFiner's rate\r\n                compoundPool[_token].capitalRatio = getCapitalCompoundRatio(_token);\r\n                compoundPool[_token].borrowRatePerBlock = ICToken(cToken).borrowRatePerBlock();\r\n                compoundPool[_token].depositRatePerBlock = cTokenExchangeRate.mul(UNIT).div(lastCTokenExchangeRate[cToken])\r\n                    .sub(UNIT).div(blockNumber.sub(lastCheckpoint[_token]));\r\n                borrowRateIndex[_token][blockNumber] = borrowRateIndexNow(_token);\r\n                depositeRateIndex[_token][blockNumber] = depositeRateIndexNow(_token);\r\n                // Update the last checkpoint\r\n                lastCheckpoint[_token] = blockNumber;\r\n                lastCTokenExchangeRate[cToken] = cTokenExchangeRate;\r\n            }\r\n        }\r\n\r\n        // Update the total loan\r\n        if(borrowRateIndex[_token][blockNumber] != UNIT) {\r\n            totalLoans[_token] = totalLoans[_token].mul(borrowRateIndex[_token][blockNumber])\r\n                .div(borrowRateIndex[_token][previousCheckpoint]);\r\n        }\r\n\r\n        emit UpdateIndex(_token, depositeRateIndex[_token][getBlockNumber()], borrowRateIndex[_token][getBlockNumber()]);\r\n    }\r\n\r\n    /**\r\n     * Calculate a token deposite rate of current block\r\n     * @param _token token address\r\n     * @dev This is an looking forward estimation from last checkpoint and not the exactly rate that the user will pay or earn.\r\n     */\r\n    function depositeRateIndexNow(address _token) public view returns(uint) {\r\n        uint256 lcp = lastCheckpoint[_token];\r\n        // If this is the first checkpoint, set the index be 1.\r\n        if(lcp == 0)\r\n            return INT_UNIT;\r\n\r\n        uint256 lastDepositeRateIndex = depositeRateIndex[_token][lcp];\r\n        uint256 depositRatePerBlock = getDepositRatePerBlock(_token);\r\n        // newIndex = oldIndex*(1+r*delta_block). If delta_block = 0, i.e. the last checkpoint is current block, index doesn't change.\r\n        return lastDepositeRateIndex.mul(getBlockNumber().sub(lcp).mul(depositRatePerBlock).add(INT_UNIT)).div(INT_UNIT);\r\n    }\r\n\r\n    /**\r\n     * Calculate a token borrow rate of current block\r\n     * @param _token token address\r\n     */\r\n    function borrowRateIndexNow(address _token) public view returns(uint) {\r\n        uint256 lcp = lastCheckpoint[_token];\r\n        // If this is the first checkpoint, set the index be 1.\r\n        if(lcp == 0)\r\n            return INT_UNIT;\r\n        uint256 lastBorrowRateIndex = borrowRateIndex[_token][lcp];\r\n        uint256 borrowRatePerBlock = getBorrowRatePerBlock(_token);\r\n        return lastBorrowRateIndex.mul(getBlockNumber().sub(lcp).mul(borrowRatePerBlock).add(INT_UNIT)).div(INT_UNIT);\r\n    }\r\n\r\n    /**\r\n\t * Get the state of the given token\r\n     * @param _token token address\r\n\t */\r\n    function getTokenState(address _token) public view returns (uint256 deposits, uint256 loans, uint256 reserveBalance, uint256 remainingAssets){\r\n        return (\r\n        getTotalDepositStore(_token),\r\n        totalLoans[_token],\r\n        totalReserve[_token],\r\n        totalReserve[_token].add(totalCompound[globalConfig.tokenInfoRegistry().getCToken(_token)])\r\n        );\r\n    }\r\n\r\n    function getPoolAmount(address _token) public view returns(uint) {\r\n        return totalReserve[_token].add(totalCompound[globalConfig.tokenInfoRegistry().getCToken(_token)]);\r\n    }\r\n\r\n    function deposit(address _to, address _token, uint256 _amount) external onlyAuthorized {\r\n\r\n        require(_amount != 0, \"Amount is zero\");\r\n\r\n        // Add a new checkpoint on the index curve.\r\n        newRateIndexCheckpoint(_token);\r\n        updateDepositFINIndex(_token);\r\n\r\n        // Update tokenInfo. Add the _amount to principal, and update the last deposit block in tokenInfo\r\n        globalConfig.accounts().deposit(_to, _token, _amount);\r\n\r\n        // Update the amount of tokens in compound and loans, i.e. derive the new values\r\n        // of C (Compound Ratio) and U (Utilization Ratio).\r\n        uint compoundAmount = update(_token, _amount, ActionType.DepositAction);\r\n\r\n        if(compoundAmount > 0) {\r\n            globalConfig.savingAccount().toCompound(_token, compoundAmount);\r\n        }\r\n    }\r\n\r\n    function borrow(address _from, address _token, uint256 _amount) external onlyAuthorized {\r\n\r\n        // Add a new checkpoint on the index curve.\r\n        newRateIndexCheckpoint(_token);\r\n        updateBorrowFINIndex(_token);\r\n\r\n        // Update tokenInfo for the user\r\n        globalConfig.accounts().borrow(_from, _token, _amount);\r\n\r\n        // Update pool balance\r\n        // Update the amount of tokens in compound and loans, i.e. derive the new values\r\n        // of C (Compound Ratio) and U (Utilization Ratio).\r\n        uint compoundAmount = update(_token, _amount, ActionType.BorrowAction);\r\n\r\n        if(compoundAmount > 0) {\r\n            globalConfig.savingAccount().fromCompound(_token, compoundAmount);\r\n        }\r\n    }\r\n\r\n    function repay(address _to, address _token, uint256 _amount) external onlyAuthorized returns(uint) {\r\n\r\n        // Add a new checkpoint on the index curve.\r\n        newRateIndexCheckpoint(_token);\r\n        updateBorrowFINIndex(_token);\r\n\r\n        // Sanity check\r\n        require(globalConfig.accounts().getBorrowPrincipal(_to, _token) > 0,\r\n            \"Token BorrowPrincipal must be greater than 0. To deposit balance, please use deposit button.\"\r\n        );\r\n\r\n        // Update tokenInfo\r\n        uint256 remain = globalConfig.accounts().repay(_to, _token, _amount);\r\n\r\n        // Update the amount of tokens in compound and loans, i.e. derive the new values\r\n        // of C (Compound Ratio) and U (Utilization Ratio).\r\n        uint compoundAmount = update(_token, _amount.sub(remain), ActionType.RepayAction);\r\n        if(compoundAmount > 0) {\r\n           globalConfig.savingAccount().toCompound(_token, compoundAmount);\r\n        }\r\n\r\n        // Return actual amount repaid\r\n        return _amount.sub(remain);\r\n    }\r\n\r\n    /**\r\n     * Withdraw a token from an address\r\n     * @param _from address to be withdrawn from\r\n     * @param _token token address\r\n     * @param _amount amount to be withdrawn\r\n     * @return The actually amount withdrawed, which will be the amount requested minus the commission fee.\r\n     */\r\n    function withdraw(address _from, address _token, uint256 _amount) external onlyAuthorized returns(uint) {\r\n\r\n        require(_amount != 0, \"Amount is zero\");\r\n\r\n        // Add a new checkpoint on the index curve.\r\n        newRateIndexCheckpoint(_token);\r\n        updateDepositFINIndex(_token);\r\n\r\n        // Withdraw from the account\r\n        uint amount = globalConfig.accounts().withdraw(_from, _token, _amount);\r\n\r\n        // Update pool balance\r\n        // Update the amount of tokens in compound and loans, i.e. derive the new values\r\n        // of C (Compound Ratio) and U (Utilization Ratio).\r\n        uint compoundAmount = update(_token, amount, ActionType.WithdrawAction);\r\n\r\n        // Check if there are enough tokens in the pool.\r\n        if(compoundAmount > 0) {\r\n            globalConfig.savingAccount().fromCompound(_token, compoundAmount);\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * Get current block number\r\n     * @return the current block number\r\n     */\r\n    function getBlockNumber() private view returns (uint) {\r\n        return block.number;\r\n    }\r\n\r\n    function version() public pure returns(string memory) {\r\n        return \"v1.2.0\";\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCURACY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BLOCKS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INT_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_isTransferFeeEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isSupportedOnCompound\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainLinkOracle\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"addressFromIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowMiningSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositeMiningSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"disableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"enableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getBorrowLTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getCToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getChainLinkAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCoinLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenInfoFromAddress\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenInfoFromIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalConfig\",\"outputs\":[{\"internalType\":\"contract GlobalConfig\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract GlobalConfig\",\"name\":\"_globalConfig\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isSupportedOnCompound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTransferFeeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"priceFromAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"priceFromIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isTransferFeeEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSupportedOnCompound\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chainLinkOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowLTV\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowLTV\",\"type\":\"uint256\"}],\"name\":\"updateBorrowLTV\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"}],\"name\":\"updateCToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainLinkOracle\",\"type\":\"address\"}],\"name\":\"updateChainLinkAggregator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositeMiningSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowMiningSpeed\",\"type\":\"uint256\"}],\"name\":\"updateMiningSpeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSupportedOnCompound\",\"type\":\"bool\"}],\"name\":\"updateTokenSupportedOnCompoundFlag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isTransfeFeeEnabled\",\"type\":\"bool\"}],\"name\":\"updateTokenTransferFeeFlag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenRegistry","CompilerVersion":"v0.5.14+commit.01f1aaa4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"Utils:d06e67bf4f85c9e5c45f7d6a19edb6dd28131187","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"bzzr://18a517da100215f1b7d4ff4f095e6b43288b49ad6aa429abc8ef311d08b32ea9"}]}