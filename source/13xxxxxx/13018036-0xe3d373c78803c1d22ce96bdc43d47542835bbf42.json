{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/services/actions/IAction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IAction {\\n    function exec(\\n        bytes32 _taskHash,\\n        bytes memory _data,\\n        bytes memory _offChainData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/GelatoBytes.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity 0.8.7;\\n\\nlibrary GelatoBytes {\\n    function calldataSliceSelector(bytes calldata _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function memorySliceSelector(bytes memory _bytes)\\n        internal\\n        pure\\n        returns (bytes4 selector)\\n    {\\n        selector =\\n            _bytes[0] |\\n            (bytes4(_bytes[1]) >> 8) |\\n            (bytes4(_bytes[2]) >> 16) |\\n            (bytes4(_bytes[3]) >> 24);\\n    }\\n\\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\\n            } else {\\n                revert(\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"))\\n                );\\n            }\\n        } else {\\n            revert(\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"))\\n            );\\n        }\\n    }\\n\\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\\n        if (_bytes.length % 32 == 4) {\\n            bytes4 selector;\\n            assembly {\\n                selector := mload(add(0x20, _bytes))\\n            }\\n            if (selector == 0x08c379a0) {\\n                // Function selector for Error(string)\\n                assembly {\\n                    _bytes := add(_bytes, 68)\\n                }\\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\\n            } else {\\n                return\\n                    string(abi.encodePacked(_tracingInfo, \\\"NoErrorSelector\\\"));\\n            }\\n        } else {\\n            return\\n                string(abi.encodePacked(_tracingInfo, \\\"UnexpectedReturndata\\\"));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/services/aave/AaveServices.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable\\npragma solidity 0.8.7;\\n\\nimport {ASimpleServiceStandard} from \\\"../abstract/ASimpleServiceStandard.sol\\\";\\nimport {IAction} from \\\"../../interfaces/services/actions/IAction.sol\\\";\\nimport {GelatoBytes} from \\\"../../lib/GelatoBytes.sol\\\";\\nimport {ExecutionData} from \\\"../../structs/SProtection.sol\\\";\\n\\n/// @author Gelato Digital\\n/// @title Aave Automated Services Contract.\\n/// @dev Automate any type of task related to Aave.\\ncontract AaveServices is ASimpleServiceStandard {\\n    using GelatoBytes for bytes;\\n\\n    constructor(address _gelato) ASimpleServiceStandard(_gelato) {}\\n\\n    /// Submit Aave Task.\\n    /// @param _action Task's executor address.\\n    /// @param _taskData Data needed to perform the task.\\n    /// @param _isPermanent Defining if it's a permanent task.\\n    function submitTask(\\n        address _action,\\n        bytes memory _taskData,\\n        bool _isPermanent\\n    )\\n        external\\n        isActionOk(_action)\\n        gelatoSubmit(_action, _taskData, _isPermanent)\\n    {}\\n\\n    /// Cancel Aave Task.\\n    /// @param _action Type of action (for example Protection)\\n    function cancelTask(address _action) external gelatoCancel(_action) {}\\n\\n    /// Update Aave Task.\\n    /// @param _action Task's executor address.\\n    /// @param _data new data needed to perform the task.\\n    /// @param _isPermanent Defining if it's a permanent task.\\n    function updateTask(\\n        address _action,\\n        bytes memory _data,\\n        bool _isPermanent\\n    ) external isActionOk(_action) gelatoModify(_action, _data, _isPermanent) {}\\n\\n    /// Execution of Aave Task.\\n    /// @param _execData data containing user, action Addr, on chain data, off chain data, is permanent.\\n    function exec(ExecutionData memory _execData)\\n        external\\n        isActionOk(_execData.action)\\n        gelatofy(\\n            _execData.user,\\n            _execData.action,\\n            _execData.subBlockNumber,\\n            _execData.data,\\n            _execData.isPermanent\\n        )\\n    {\\n        bytes memory payload = abi.encodeWithSelector(\\n            IAction.exec.selector,\\n            hashTask(\\n                _execData.user,\\n                _execData.subBlockNumber,\\n                _execData.data,\\n                _execData.isPermanent\\n            ),\\n            _execData.data,\\n            _execData.offChainData\\n        );\\n        (bool success, bytes memory returndata) = _execData.action.call(\\n            payload\\n        );\\n        if (!success) returndata.revertWithError(\\\"AaveServices.exec:\\\");\\n\\n        if (_execData.isPermanent)\\n            _submitTask(\\n                _execData.user,\\n                _execData.action,\\n                _execData.data,\\n                _execData.isPermanent\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/services/abstract/ASimpleServiceStandard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport {ATaskStorage} from \\\"./ATaskStorage.sol\\\";\\n\\nabstract contract ASimpleServiceStandard is ATaskStorage {\\n    // solhint-disable  var-name-mixedcase\\n    address public immutable GELATO;\\n    // solhint-enable var-name-mixed-case\\n\\n    event LogExecSuccess(\\n        bytes32 indexed taskHash,\\n        address indexed user,\\n        address indexed executor\\n    );\\n\\n    modifier gelatoSubmit(\\n        address _action,\\n        bytes memory _payload,\\n        bool _isPermanent\\n    ) {\\n        _submitTask(msg.sender, _action, _payload, _isPermanent);\\n        _;\\n    }\\n\\n    modifier gelatoCancel(address _action) {\\n        _cancelTask(_action);\\n        _;\\n    }\\n\\n    modifier gelatoModify(\\n        address _action,\\n        bytes memory _payload,\\n        bool _isPermanent\\n    ) {\\n        _modifyTask(_action, _payload, _isPermanent);\\n        _;\\n    }\\n\\n    modifier gelatofy(\\n        address _user,\\n        address _action,\\n        uint256 _subBlockNumber,\\n        bytes memory _payload,\\n        bool _isPermanent\\n    ) {\\n        // Only GELATO vetted Executors can call\\n        require(\\n            address(GELATO) == msg.sender,\\n            \\\"ASimpleServiceStandard: msg.sender != gelato\\\"\\n        );\\n\\n        // Verifies and removes task\\n        bytes32 taskHash = _verifyAndRemoveTask(\\n            _user,\\n            _action,\\n            _subBlockNumber,\\n            _payload,\\n            _isPermanent\\n        );\\n        _;\\n\\n        emit LogExecSuccess(taskHash, _user, tx.origin);\\n    }\\n\\n    modifier isActionOk(address _action) {\\n        require(\\n            isActionWhitelisted(_action),\\n            \\\"ASimpleServiceStandard.isActionOk: notWhitelistedAction\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _gelato) {\\n        GELATO = _gelato;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/services/abstract/ATaskStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract ATaskStorage is Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(address => mapping(address => bytes32)) public taskByUsersAction;\\n    EnumerableSet.AddressSet internal _actions;\\n\\n    event LogTaskSubmitted(\\n        bytes32 indexed taskHash,\\n        address indexed user,\\n        address indexed action,\\n        uint256 subBlockNumber,\\n        bytes payload,\\n        bool isPermanent\\n    );\\n    event LogTaskCancelled(bytes32 indexed taskHash, address indexed user);\\n\\n    function addAction(address _action) external onlyOwner returns (bool) {\\n        return _actions.add(_action);\\n    }\\n\\n    function removeAction(address _action) external onlyOwner returns (bool) {\\n        return _actions.remove(_action);\\n    }\\n\\n    function isTaskSubmitted(\\n        address _user,\\n        bytes32 _taskHash,\\n        address _action\\n    ) external view returns (bool) {\\n        return isUserTask(_user, _taskHash, _action);\\n    }\\n\\n    function isActionWhitelisted(address _action) public view returns (bool) {\\n        return _actions.contains(_action);\\n    }\\n\\n    function actions() public view returns (address[] memory actions_) {\\n        uint256 length = numberOfActions();\\n        actions_ = new address[](length);\\n        for (uint256 i; i < length; i++) actions_[i] = _actions.at(i);\\n    }\\n\\n    function numberOfActions() public view returns (uint256) {\\n        return _actions.length();\\n    }\\n\\n    function isUserTask(\\n        address _user,\\n        bytes32 _taskHash,\\n        address _action\\n    ) public view returns (bool) {\\n        return _taskHash == taskByUsersAction[_user][_action];\\n    }\\n\\n    function hashTask(\\n        address _user,\\n        uint256 _subBlockNumber,\\n        bytes memory _payload,\\n        bool _isPermanent\\n    ) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(_user, _subBlockNumber, _payload, _isPermanent)\\n            );\\n    }\\n\\n    function _submitTask(\\n        address _user,\\n        address _action,\\n        bytes memory _payload,\\n        bool _isPermanent\\n    ) internal {\\n        require(\\n            taskByUsersAction[_user][_action] == bytes32(0),\\n            \\\"ATaskStorage._submitTask : userHasTask.\\\"\\n        );\\n\\n        bytes32 taskHash = hashTask(\\n            _user,\\n            block.number,\\n            _payload,\\n            _isPermanent\\n        );\\n        taskByUsersAction[_user][_action] = taskHash;\\n\\n        emit LogTaskSubmitted(\\n            taskHash,\\n            _user,\\n            _action,\\n            block.number,\\n            _payload,\\n            _isPermanent\\n        );\\n    }\\n\\n    function _cancelTask(address _action) internal {\\n        bytes32 userTask = taskByUsersAction[msg.sender][_action];\\n        require(\\n            userTask != bytes32(0),\\n            \\\"ATaskStorage._cancelTask: noTaskToCancel\\\"\\n        );\\n\\n        _removeTask(msg.sender, _action);\\n\\n        emit LogTaskCancelled(userTask, msg.sender);\\n    }\\n\\n    function _verifyAndRemoveTask(\\n        address _user,\\n        address _action,\\n        uint256 _subBlockNumber,\\n        bytes memory _payload,\\n        bool _isPermanent\\n    ) internal returns (bytes32 taskHash) {\\n        taskHash = _verifyTask(\\n            _user,\\n            _action,\\n            _subBlockNumber,\\n            _payload,\\n            _isPermanent\\n        );\\n        _removeTask(_user, _action);\\n    }\\n\\n    function _removeTask(address _user, address _action) internal {\\n        delete taskByUsersAction[_user][_action];\\n    }\\n\\n    function _modifyTask(\\n        address _action,\\n        bytes memory _payload,\\n        bool _isPermanent\\n    ) internal {\\n        _cancelTask(_action);\\n\\n        bytes32 taskHash = hashTask(\\n            msg.sender,\\n            block.number,\\n            _payload,\\n            _isPermanent\\n        );\\n        taskByUsersAction[msg.sender][_action] = taskHash;\\n\\n        emit LogTaskSubmitted(\\n            taskHash,\\n            msg.sender,\\n            _action,\\n            block.number,\\n            _payload,\\n            _isPermanent\\n        );\\n    }\\n\\n    function _verifyTask(\\n        address _user,\\n        address _action,\\n        uint256 _subBlockNumber,\\n        bytes memory _payload,\\n        bool _isPermanent\\n    ) internal view returns (bytes32 taskHash) {\\n        taskHash = hashTask(_user, _subBlockNumber, _payload, _isPermanent);\\n        require(\\n            isUserTask(_user, taskHash, _action),\\n            \\\"ATaskStorage._verifyTask: !userTask\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/structs/SProtection.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.7;\\n\\nstruct ProtectionPayload {\\n    bytes32 taskHash;\\n    address colToken;\\n    address debtToken;\\n    uint256 rateMode;\\n    uint256 amtToFlashBorrow;\\n    uint256 amtOfDebtToRepay;\\n    uint256 minimumHealthFactor;\\n    uint256 wantedHealthFactor;\\n    address onBehalfOf;\\n    uint256 protectionFeeInETH;\\n    address[] swapActions;\\n    bytes[] swapDatas;\\n}\\n\\nstruct ExecutionData {\\n    address user;\\n    address action;\\n    uint256 subBlockNumber;\\n    bytes data;\\n    bytes offChainData;\\n    bool isPermanent;\\n}\\n\\nstruct ProtectionDataCompute {\\n    address colToken;\\n    address debtToken;\\n    uint256 totalCollateralETH;\\n    uint256 totalBorrowsETH;\\n    uint256 currentLiquidationThreshold;\\n    uint256 colLiquidationThreshold;\\n    uint256 wantedHealthFactor;\\n    uint256 colPrice;\\n    uint256 debtPrice;\\n    address onBehalfOf;\\n    uint256 protectionFeeInETH;\\n    uint256 flashloanPremiumBps;\\n}\\n\\nstruct FlashLoanData {\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] premiums;\\n    bytes params;\\n}\\n\\nstruct FlashLoanParamsData {\\n    uint256 minimumHealthFactor;\\n    bytes32 taskHash;\\n    address debtToken;\\n    uint256 amtOfDebtToRepay;\\n    uint256 rateMode;\\n    address onBehalfOf;\\n    uint256 protectionFeeInETH;\\n    address[] swapActions;\\n    bytes[] swapDatas;\\n}\\n\\nstruct RepayAndFlashBorrowData {\\n    bytes32 id;\\n    address user;\\n    address colToken;\\n    address debtToken;\\n    uint256 wantedHealthFactor;\\n    uint256 protectionFeeInETH;\\n}\\n\\nstruct RepayAndFlashBorrowResult {\\n    bytes32 id;\\n    uint256 amtToFlashBorrow;\\n    uint256 amtOfDebtToRepay;\\n    string message;\\n}\\n\\nstruct CanExecData {\\n    bytes32 id;\\n    address user;\\n    uint256 minimumHF;\\n    address colToken;\\n    address spender;\\n}\\n\\nstruct CanExecResult {\\n    bytes32 id;\\n    bool isPositionUnSafe;\\n    bool isATokenAllowed;\\n    string message;\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gelato\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"LogExecSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogTaskCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"action\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subBlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPermanent\",\"type\":\"bool\"}],\"name\":\"LogTaskSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GELATO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"actions_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_action\",\"type\":\"address\"}],\"name\":\"addAction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_action\",\"type\":\"address\"}],\"name\":\"cancelTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"action\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"offChainData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"isPermanent\",\"type\":\"bool\"}],\"internalType\":\"struct ExecutionData\",\"name\":\"_execData\",\"type\":\"tuple\"}],\"name\":\"exec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_isPermanent\",\"type\":\"bool\"}],\"name\":\"hashTask\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_action\",\"type\":\"address\"}],\"name\":\"isActionWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_taskHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_action\",\"type\":\"address\"}],\"name\":\"isTaskSubmitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_taskHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_action\",\"type\":\"address\"}],\"name\":\"isUserTask\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfActions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_action\",\"type\":\"address\"}],\"name\":\"removeAction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_action\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_taskData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_isPermanent\",\"type\":\"bool\"}],\"name\":\"submitTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"taskByUsersAction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_action\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_isPermanent\",\"type\":\"bool\"}],\"name\":\"updateTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AaveServices","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"0000000000000000000000003caca7b48d0573d793d3b0279b5f0029180e83b6","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}