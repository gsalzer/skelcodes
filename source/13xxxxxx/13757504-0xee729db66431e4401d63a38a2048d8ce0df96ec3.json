{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PathPrivateBClaim.sol\": {\r\n      \"content\": \"pragma solidity 0.8.4;\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract PathPrivateBClaim is Ownable{\\n\\n    IERC20 immutable private token;\\n\\n    uint public grandTotalClaimed = 0;\\n    uint immutable public startTime;\\n\\n    uint private totalAllocated;\\n    \\n\\n    struct Allocation {\\n        uint TGEAllocation; //tokens allocateed at TGE\\n        uint initialAllocation; //Initial token allocated after first cliff\\n        uint endInitial; // Initial token claim locked until \\n        uint endCliff; // Vested Tokens are locked until\\n        uint endVesting; // End vesting \\n        uint totalAllocated; // Total tokens allocated\\n        uint amountClaimed;  // Total tokens claimed\\n    }\\n\\n    mapping (address => Allocation) public allocations;\\n\\n    event claimedToken(address indexed _recipient, uint tokensClaimed, uint totalClaimed);\\n\\n    constructor (address _tokenAddress, uint _startTime) {\\n        require(_startTime >= 1638896400, \\\"start time should be larger or equal to TGE\\\");\\n        token = IERC20(_tokenAddress);\\n        startTime = _startTime;\\n    }\\n\\n    function getClaimTotal(address _recipient) public view returns (uint amount) {\\n        return  calculateClaimAmount(_recipient) - allocations[_recipient].amountClaimed;\\n    }\\n\\n    // view function to calculate claimable tokens\\n    function calculateClaimAmount(address _recipient) internal view returns (uint amount) {\\n         uint newClaimAmount;\\n\\n        if (block.timestamp >= allocations[_recipient].endVesting) {\\n            newClaimAmount = allocations[_recipient].totalAllocated;\\n        }\\n        else {\\n            newClaimAmount = allocations[_recipient].TGEAllocation;\\n            if (block.timestamp >=  allocations[_recipient].endInitial) {\\n                newClaimAmount += allocations[_recipient].initialAllocation;\\n            }\\n            if (block.timestamp >= allocations[_recipient].endCliff) {\\n                newClaimAmount += ((allocations[_recipient].totalAllocated - allocations[_recipient].initialAllocation - allocations[_recipient].TGEAllocation)\\n                \\t* (block.timestamp - allocations[_recipient].endCliff))\\n                    / (allocations[_recipient].endVesting - allocations[_recipient].endCliff);\\n            }\\n        }\\n        return newClaimAmount;\\n    }\\n\\n    /**\\n    * @dev Set the minters and their corresponding allocations. Each mint gets 40000 Path Tokens with a vesting schedule\\n    * @param _addresses The recipient of the allocation\\n    * @param _totalAllocated The total number of minted NFT\\n    */\\n    function setAllocation(\\n        address[] memory _addresses,\\n        uint[] memory _TGEAllocation,\\n        uint[] memory _totalAllocated,\\n        uint[] memory _initialAllocation,\\n        uint[] memory _endInitial,\\n        uint[] memory _endCliff,\\n        uint[] memory _endVesting) onlyOwner external {\\n        //make sure that the length of address and total minted is the same\\n        require(_addresses.length == _totalAllocated.length, \\\"length of array should be the same\\\");\\n        require(_addresses.length == _initialAllocation.length, \\\"length of array should be the same\\\");\\n        require(_addresses.length == _endInitial.length, \\\"length of array should be the same\\\");\\n        require(_addresses.length == _endCliff.length, \\\"length of array should be the same\\\");\\n        require(_addresses.length == _endVesting.length, \\\"length of array should be the same\\\");\\n        uint amountToTransfer;\\n        for (uint i = 0; i < _addresses.length; i++ ) {\\n            require(_endInitial[i] <= _endCliff[i], \\\"Initial claim should be earlier than end cliff time\\\");\\n            allocations[_addresses[i]] = Allocation(\\n                _TGEAllocation[i],\\n                _initialAllocation[i],\\n                _endInitial[i],\\n                _endCliff[i],\\n                _endVesting[i],\\n                _totalAllocated[i],\\n                0);\\n            amountToTransfer += _totalAllocated[i];\\n            totalAllocated += _totalAllocated[i];\\n        }\\n        require(token.transferFrom(msg.sender, address(this), amountToTransfer), \\\"Token transfer failed\\\");\\n    }\\n\\n    /**\\n    * @dev Check current claimable amount\\n    * @param _recipient recipient of allocation\\n     */\\n    function getRemainingAmount (address _recipient) external view returns (uint amount) {\\n        return allocations[_recipient].totalAllocated - allocations[_recipient].amountClaimed;\\n    }\\n\\n\\n     /**\\n     * @dev transfers allocated tokens to recipient to their address\\n     * @param _recipient the addresss to withdraw tokens for\\n      */\\n    function transferTokens(address _recipient) external {\\n        require(allocations[_recipient].amountClaimed < allocations[_recipient].totalAllocated, \\\"Address should have some allocated tokens\\\");\\n        require(startTime <= block.timestamp, \\\"Start time of claim should be later than current time\\\");\\n        require(startTime <= allocations[_recipient].endInitial, \\\"Initial claim should be later than current time\\\");\\n        //transfer tokens after subtracting tokens claimed\\n        uint newClaimAmount = calculateClaimAmount(_recipient);\\n        uint tokensToClaim = getClaimTotal(_recipient);\\n        require(tokensToClaim > 0, \\\"Recipient should have more than 0 tokens to claim\\\");\\n        allocations[_recipient].amountClaimed = newClaimAmount;\\n        grandTotalClaimed += tokensToClaim;\\n        require(token.transfer(_recipient, tokensToClaim), \\\"Token transfer failed\\\");\\n        emit claimedToken(_recipient, tokensToClaim, allocations[_recipient].amountClaimed);\\n    }\\n\\n    //owner restricted functions\\n    /**\\n     * @dev reclaim excess allocated tokens for claiming\\n     * @param _amount the amount to withdraw tokens for\\n      */\\n    function reclaimExcessTokens(uint _amount) external onlyOwner {\\n        require(_amount <= token.balanceOf(address(this)) - (totalAllocated - grandTotalClaimed), \\\"Amount of tokens to recover is more than what is allowed\\\");\\n        require(token.transfer(msg.sender, _amount), \\\"Token transfer failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"name\":\"claimedToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"TGEAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endInitial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endVesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getClaimTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getRemainingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grandTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reclaimExcessTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_TGEAllocation\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_totalAllocated\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_initialAllocation\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_endInitial\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_endCliff\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_endVesting\",\"type\":\"uint256[]\"}],\"name\":\"setAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PathPrivateBClaim","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002a2550e0a75acec6d811ae3930732f7f3ad675880000000000000000000000000000000000000000000000000000000061af9310","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}