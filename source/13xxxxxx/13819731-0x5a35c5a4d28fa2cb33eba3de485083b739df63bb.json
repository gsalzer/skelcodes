{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking/StakingAccrualERC20/StakingAccrualERC20V5.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport {Adminable} from \\\"../../lib/Adminable.sol\\\";\\nimport {Initializable} from \\\"../../lib/Initializable.sol\\\";\\nimport {Address} from \\\"../../lib/Address.sol\\\";\\nimport {SafeERC20} from \\\"../../lib/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"../../lib/SafeMath.sol\\\";\\nimport {PassportScoreVerifiable} from \\\"../../lib/PassportScoreVerifiable.sol\\\";\\nimport {Bytes32} from \\\"../../lib/Bytes32.sol\\\";\\n\\nimport {ISablier} from \\\"../../global/ISablier.sol\\\";\\nimport {BaseERC20} from \\\"../../token/BaseERC20.sol\\\";\\nimport {IPermittableERC20} from \\\"../../token/IPermittableERC20.sol\\\";\\nimport {SapphireTypes} from \\\"../../sapphire/SapphireTypes.sol\\\";\\nimport {ISapphirePassportScores} from \\\"../../sapphire/ISapphirePassportScores.sol\\\";\\nimport {IERC721} from \\\"../../.openzeppelin/4.x/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @notice An ERC20 that allows users to deposit a given token, where their\\n *         balance is expressed in forms of shares. This will expose users to the\\n *         increase and decrease of the balance of the token on the contract.\\n *\\n *         To withdraw their balance, users must first express their withdrawal\\n *         intent, which will trigger a cooldown after which they will be able\\n *         to reclaim their share.\\n */\\ncontract StakingAccrualERC20V5 is BaseERC20, PassportScoreVerifiable, Adminable, Initializable {\\n\\n    /* ========== Libraries ========== */\\n\\n    using Address for address;\\n    using SafeERC20 for IPermittableERC20;\\n    using SafeMath for uint256;\\n    using Bytes32 for bytes32;\\n\\n    /* ========== Variables ========== */\\n\\n    uint256 public constant BASE = 1e18;\\n\\n    uint256 public exitCooldownDuration;\\n\\n    IPermittableERC20 public stakingToken;\\n\\n    ISablier public sablierContract;\\n    uint256 public sablierStreamId;\\n\\n    bytes32 public proofProtocol;\\n\\n    /**\\n     * @notice Cooldown duration to be elapsed for users to exit\\n     */\\n\\n    mapping (address => uint256) public cooldowns;\\n\\n    IERC721 private _defiPassportContract;\\n\\n    uint256 public scoreThreshold;\\n\\n    /* ========== Events ========== */\\n\\n    event ExitCooldownDurationSet(uint256 _duration);\\n\\n    event TokensRecovered(uint256 _amount);\\n\\n    event Staked(address indexed _user, uint256 _amount);\\n\\n    event ExitCooldownStarted(address indexed _user, uint256 _cooldownEndTimestamp);\\n\\n    event Exited(address indexed _user, uint256 _amount);\\n\\n    event SablierContractSet(address _sablierContract);\\n\\n    event SablierStreamIdSet(uint256 _newStreamId);\\n\\n    event FundsWithdrawnFromSablier(uint256 _streamId, uint256 _amount);\\n\\n    event DefiPassportContractSet(address _defiPassportContract);\\n\\n    event ProofProtocolSet(string _protocol);\\n\\n    event PassportScoresContractSet(address _passportScoresContract);\\n\\n    event ScoreThresholdSet(uint256 _threshold);\\n\\n    /* ========== Constructor (ignore) ========== */\\n\\n    constructor ()\\n        BaseERC20(\\\"\\\", \\\"\\\", 18)\\n    {} // solhint-disable-line\\n\\n    /* ========== Restricted Functions ========== */\\n\\n    function init(\\n        string calldata __name,\\n        string calldata __symbol,\\n        uint8 __decimals,\\n        address _stakingToken,\\n        uint256 _exitCooldownDuration,\\n        address _sablierContract\\n    )\\n        external\\n        onlyAdmin\\n        initializer\\n    {\\n        _name = __name;\\n        _symbol = __symbol;\\n        _decimals = __decimals;\\n        exitCooldownDuration = _exitCooldownDuration;\\n\\n        require (\\n            _stakingToken.isContract(),\\n            \\\"StakingAccrualERC20V5: staking token is not a contract\\\"\\n        );\\n\\n        require (\\n            _sablierContract.isContract(),\\n            \\\"StakingAccrualERC20V5: the sablier contract is invalid\\\"\\n        );\\n\\n        DOMAIN_SEPARATOR = _initDomainSeparator(\\n            __name,\\n            \\\"1\\\"\\n        );\\n\\n        stakingToken = IPermittableERC20(_stakingToken);\\n        sablierContract = ISablier(_sablierContract);\\n    }\\n\\n    /**\\n     * @notice Sets the exit cooldown duration\\n     */\\n    function setExitCooldownDuration(\\n        uint256 _duration\\n    )\\n        external\\n        onlyAdmin\\n    {\\n        require(\\n            exitCooldownDuration != _duration,\\n            \\\"StakingAccrualERC20V5: the same cooldown is already set\\\"\\n        );\\n\\n        exitCooldownDuration = _duration;\\n\\n        emit ExitCooldownDurationSet(exitCooldownDuration);\\n    }\\n\\n    /**\\n     * @notice Recovers tokens from the totalShares\\n\\n     */\\n    function recoverTokens(\\n        uint256 _amount\\n    )\\n        external\\n        onlyAdmin\\n    {\\n        uint256 contractBalance = stakingToken.balanceOf(address(this));\\n\\n        require (\\n            _amount <= contractBalance,\\n            \\\"StakingAccrualERC20V5: cannot recover more than the balance\\\"\\n        );\\n\\n        emit TokensRecovered(_amount);\\n\\n        stakingToken.safeTransfer(\\n            getAdmin(),\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets the Sablier contract address\\n     */\\n    function setSablierContract(\\n        address _sablierContract\\n    )\\n        external\\n        onlyAdmin\\n    {\\n        require (\\n            _sablierContract.isContract(),\\n            \\\"StakingAccrualERC20V5: address is not a contract\\\"\\n        );\\n\\n        sablierContract = ISablier(_sablierContract);\\n\\n        emit SablierContractSet(_sablierContract);\\n    }\\n\\n    /**\\n     * @notice Sets the Sablier stream ID\\n     */\\n    function setSablierStreamId(\\n        uint256 _sablierStreamId\\n    )\\n        external\\n        onlyAdmin\\n    {\\n        require (\\n            sablierStreamId != _sablierStreamId,\\n            \\\"StakingAccrualERC20V5: the same stream ID is already set\\\"\\n        );\\n\\n        (, address recipient,,,,,,) = sablierContract.getStream(_sablierStreamId);\\n\\n        require (\\n            recipient == address(this),\\n            \\\"StakingAccrualERC20V5: incorrect stream ID\\\"\\n        );\\n\\n        sablierStreamId = _sablierStreamId;\\n\\n        emit SablierStreamIdSet(sablierStreamId);\\n    }\\n\\n    function setProofProtocol(\\n        bytes32 _protocol\\n    )\\n        external\\n        onlyAdmin\\n    {\\n        proofProtocol = _protocol;\\n\\n        emit ProofProtocolSet(proofProtocol.toString());\\n    }\\n\\n    function setPassportScoresContract(\\n        address _passportScoresContract\\n    )\\n        external\\n        onlyAdmin\\n    {\\n        require (\\n            _passportScoresContract.isContract(),\\n            \\\"StakingAccrualERC20V5: address is not a contract\\\"\\n        );\\n\\n        passportScoresContract = ISapphirePassportScores(_passportScoresContract);\\n\\n        emit PassportScoresContractSet(_passportScoresContract);\\n    }\\n\\n    function setScoreThreshold(\\n        uint256 _threshold\\n    )\\n        external\\n        onlyAdmin\\n    {\\n        scoreThreshold = _threshold;\\n\\n        emit ScoreThresholdSet(_threshold);\\n    }\\n\\n    /* ========== Mutative Functions ========== */\\n\\n    function stake(\\n        uint256 _amount,\\n        SapphireTypes.ScoreProof memory _proof\\n    )\\n        public\\n        checkScoreProof(\\n            _proof,\\n            proofProtocol != bytes32(0),\\n            true\\n        )\\n    {\\n        uint256 cooldownTimestamp = cooldowns[msg.sender];\\n\\n        require (\\n            cooldownTimestamp == 0,\\n            \\\"StakingAccrualERC20V5: cannot stake during cooldown period\\\"\\n        );\\n\\n        if (proofProtocol != bytes32(0)) {\\n            require(\\n                _proof.score >= scoreThreshold,\\n                \\\"StakingAccrualERC20V5: score is below threshold\\\"\\n            );\\n        }\\n\\n        claimStreamFunds();\\n\\n        // Gets the amount of the staking token locked in the contract\\n        uint256 totalStakingToken = stakingToken.balanceOf(address(this));\\n        // Gets the amount of the staked token in existence\\n        uint256 totalShares = totalSupply();\\n        // If no the staked token exists, mint it 1:1 to the amount put in\\n        if (totalShares == 0 || totalStakingToken == 0) {\\n            _mint(msg.sender, totalStakingToken.add(_amount));\\n        }\\n        // Calculate and mint the amount of stToken the Token is worth. The ratio will change overtime, as stToken is burned/minted and Token deposited + gained from fees / withdrawn.\\n        else {\\n            uint256 tokensToMint = _amount.mul(totalShares).div(totalStakingToken);\\n            _mint(msg.sender, tokensToMint);\\n        }\\n        // Lock the staking token in the contract\\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        emit Staked(msg.sender, _amount);\\n    }\\n\\n    function stakeWithPermit(\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s,\\n        SapphireTypes.ScoreProof memory _proof\\n    )\\n        public\\n    {\\n        stakingToken.permit(\\n            msg.sender,\\n            address(this),\\n            _amount,\\n            _deadline,\\n            _v,\\n            _r,\\n            _s\\n        );\\n        stake(_amount, _proof);\\n    }\\n\\n    /**\\n     * @notice Starts the exit cooldown. After this call the user won't be able to\\n     *         stake until they exit.\\n     */\\n    function startExitCooldown()\\n        public\\n    {\\n        require (\\n            balanceOf(msg.sender) > 0,\\n            \\\"StakingAccrualERC20V5: user has 0 balance\\\"\\n        );\\n\\n        require (\\n            cooldowns[msg.sender] == 0,\\n            \\\"StakingAccrualERC20V5: exit cooldown already started\\\"\\n        );\\n\\n        cooldowns[msg.sender] = currentTimestamp().add(exitCooldownDuration);\\n\\n        emit ExitCooldownStarted(msg.sender, cooldowns[msg.sender]);\\n    }\\n\\n    /**\\n     * @notice Returns the staked tokens proportionally, as long as\\n     *         the caller's cooldown time has elapsed. Exiting resets\\n     *         the cooldown so the user can start staking again.\\n     */\\n    function exit()\\n        external\\n    {\\n        claimStreamFunds();\\n\\n        uint256 cooldownTimestamp = cooldowns[msg.sender];\\n         // Gets the amount of stakedToken in existence\\n        uint256 totalShares = totalSupply();\\n        // Amount of shares to exit\\n        uint256 _share = balanceOf(msg.sender);\\n\\n        require(\\n            _share > 0,\\n            \\\"StakingAccrualERC20V5: user has 0 balance\\\"\\n        );\\n\\n        require(\\n            currentTimestamp() >= cooldownTimestamp,\\n            \\\"StakingAccrualERC20V5: exit cooldown not elapsed\\\"\\n        );\\n        require(\\n            cooldownTimestamp != 0,\\n            \\\"StakingAccrualERC20V5: exit cooldown was not initiated\\\"\\n        );\\n\\n        // Calculates the amount of staking token the staked token is worth\\n        uint256 tokensToTransfer = _share.mul(stakingToken.balanceOf(address(this))).div(totalShares);\\n        _burn(msg.sender, _share);\\n        cooldowns[msg.sender] = 0;\\n        emit Exited(msg.sender, tokensToTransfer);\\n        stakingToken.safeTransfer(msg.sender, tokensToTransfer);\\n    }\\n\\n    /**\\n     * @notice Withdraws from the sablier stream if possible\\n     */\\n    function claimStreamFunds()\\n        public\\n    {\\n        if (address(sablierContract) == address(0) || sablierStreamId == 0) {\\n            return;\\n        }\\n\\n        // Get the balance of the stream. If the stream is complete, .balanceOf() will\\n        // throw. For that reason, we will use .staticcall() to check the balance.\\n        bytes memory payload = abi.encodeWithSignature(\\n            \\\"balanceOf(uint256,address)\\\",\\n            sablierStreamId,\\n            address(this)\\n        );\\n        (bool success, bytes memory returnData) = address(sablierContract).staticcall(payload);\\n\\n        if (!success) {\\n            // The stream is finished\\n            return;\\n        }\\n\\n        (uint256 availableBalance) = abi.decode(returnData, (uint256));\\n\\n        sablierContract.withdrawFromStream(sablierStreamId, availableBalance);\\n\\n        emit FundsWithdrawnFromSablier(sablierStreamId, availableBalance);\\n    }\\n\\n    /* ========== View Functions ========== */\\n\\n    function getExchangeRate() public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return 0;\\n        }\\n        return stakingToken.balanceOf(address(this)).mul(1e18).div(totalSupply());\\n    }\\n\\n    function toStakingToken(uint256 stTokenAmount) public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return 0;\\n        }\\n        return stTokenAmount.mul(stakingToken.balanceOf(address(this))).div(totalSupply());\\n    }\\n\\n    function toStakedToken(uint256 token) public view returns (uint256) {\\n        uint256 stakingBalance = stakingToken.balanceOf(address(this));\\n        if (stakingBalance == 0) {\\n            return 0;\\n        }\\n        return token.mul(totalSupply()).div(stakingBalance);\\n    }\\n\\n    function currentTimestamp()\\n        public\\n        virtual\\n        view\\n        returns (uint256)\\n    {\\n        return block.timestamp;\\n    }\\n\\n    function getProofProtocol()\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        return proofProtocol.toString();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Adminable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { Storage } from \\\"./Storage.sol\\\";\\n\\n/**\\n * @title Adminable\\n * @author dYdX\\n *\\n * @dev EIP-1967 Proxy Admin contract.\\n */\\ncontract Adminable {\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     *  This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    bytes32 internal constant ADMIN_SLOT =\\n    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n    * @dev Modifier to check whether the `msg.sender` is the admin.\\n    *  If it is, it will run the function. Otherwise, it will revert.\\n    */\\n    modifier onlyAdmin() {\\n        require(\\n            msg.sender == getAdmin(),\\n            \\\"Adminable: caller is not admin\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @return The EIP-1967 proxy admin\\n     */\\n    function getAdmin()\\n        public\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(Storage.load(ADMIN_SLOT))));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * Taken from OpenZeppelin\\n */\\ncontract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Collection of functions related to the address type.\\n *      Take from OpenZeppelin at\\n *      https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from \\\"../token/IERC20.sol\\\";\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary SafeERC20 {\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        /* solhint-disable-next-line */\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"SafeERC20: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        /* solhint-disable-next-line */\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"SafeERC20: TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        /* solhint-disable-next-line */\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(\\n                0x23b872dd,\\n                from,\\n                to,\\n                value\\n            )\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"SafeERC20: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/PassportScoreVerifiable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Address} from \\\"./Address.sol\\\";\\n\\nimport {ISapphirePassportScores} from \\\"../sapphire/ISapphirePassportScores.sol\\\";\\nimport {SapphireTypes} from \\\"../sapphire/SapphireTypes.sol\\\";\\n\\n/**\\n * @dev Provides the ability of verifying users' credit scores\\n */\\ncontract PassportScoreVerifiable {\\n\\n    using Address for address;\\n\\n    ISapphirePassportScores public passportScoresContract;\\n\\n    /**\\n     * @dev Verifies that the proof is passed if the score is required, and\\n     *      validates it.\\n     *      Additionally, it checks the proof validity if `scoreProof` has a score > 0\\n     */\\n    modifier checkScoreProof(\\n        SapphireTypes.ScoreProof memory _scoreProof,\\n        bool _isScoreRequired,\\n        bool _enforceSameCaller\\n    ) {\\n        if (_scoreProof.account != address(0) && _enforceSameCaller) {\\n            require (\\n                msg.sender == _scoreProof.account,\\n                \\\"PassportScoreVerifiable: proof does not belong to the caller\\\"\\n            );\\n        }\\n\\n        bool isProofPassed = _scoreProof.merkleProof.length > 0;\\n\\n        if (_isScoreRequired || isProofPassed || _scoreProof.score > 0) {\\n            passportScoresContract.verify(_scoreProof);\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Bytes32.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary Bytes32 {\\n\\n    function toString(\\n        bytes32 _bytes\\n    )\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        uint8 i = 0;\\n        while (i < 32 && _bytes[i] != 0) {\\n            i++;\\n        }\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 32 && _bytes[i] != 0; i++) {\\n            bytesArray[i] = _bytes[i];\\n        }\\n        return string(bytesArray);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/global/ISablier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title ISablier\\n * @author Sablier\\n */\\ninterface ISablier {\\n    /**\\n     * @notice Emits when a stream is successfully created.\\n     */\\n    event CreateStream(\\n        uint256 indexed streamId,\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 deposit,\\n        address tokenAddress,\\n        uint256 startTime,\\n        uint256 stopTime\\n    );\\n\\n    /**\\n     * @notice Emits when the recipient of a stream withdraws a portion or all their pro rata share of the stream.\\n     */\\n    event WithdrawFromStream(uint256 indexed streamId, address indexed recipient, uint256 amount);\\n\\n    /**\\n     * @notice Emits when a stream is successfully cancelled and tokens are transferred back on a pro rata basis.\\n     */\\n    event CancelStream(\\n        uint256 indexed streamId,\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 senderBalance,\\n        uint256 recipientBalance\\n    );\\n\\n    function balanceOf(uint256 streamId, address who) external view returns (uint256 balance);\\n\\n    function getStream(uint256 streamId)\\n        external\\n        view\\n        returns (\\n            address sender,\\n            address recipient,\\n            uint256 deposit,\\n            address token,\\n            uint256 startTime,\\n            uint256 stopTime,\\n            uint256 remainingBalance,\\n            uint256 ratePerSecond\\n        );\\n\\n    function createStream(\\n        address recipient,\\n        uint256 deposit,\\n        address tokenAddress,\\n        uint256 startTime,\\n        uint256 stopTime\\n    )\\n        external\\n        returns (uint256 streamId);\\n\\n    function withdrawFromStream(uint256 streamId, uint256 funds) external returns (bool);\\n\\n    function cancelStream(uint256 streamId) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/token/BaseERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {SafeMath} from \\\"../lib/SafeMath.sol\\\";\\n\\nimport {IERC20Metadata} from \\\"./IERC20Metadata.sol\\\";\\nimport {Permittable} from \\\"./Permittable.sol\\\";\\n\\n/**\\n * @title ERC20 Token\\n *\\n * Basic ERC20 Implementation\\n */\\ncontract BaseERC20 is IERC20Metadata, Permittable {\\n\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) internal _allowances;\\n\\n    uint8   internal _decimals;\\n    uint256 private _totalSupply;\\n\\n    string  internal _name;\\n    string  internal _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (\\n        string memory name_,\\n        string memory symbol_,\\n        uint8         decimals_\\n    )\\n        Permittable(name_, \\\"1\\\")\\n    {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name()\\n        public\\n        override\\n        view\\n        returns (string memory)\\n    {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol()\\n        public\\n        override\\n        view\\n        returns (string memory)\\n    {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals()\\n        public\\n        override\\n        view\\n        returns (uint8)\\n    {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply()\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(\\n        address account\\n    )\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    )\\n        public\\n        override\\n        virtual\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    )\\n        public\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    )\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            msg.sender,\\n            _allowances[sender][msg.sender].sub(amount)\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Approve by signature.\\n    *\\n    * Adapted from Uniswap's UniswapV2ERC20 and MakerDAO's Dai contracts:\\n    * https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol\\n    * https://github.com/makerdao/dss/blob/master/src/dai.sol\\n    */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        public\\n    {\\n        _permit(\\n            owner,\\n            spender,\\n            value,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n        internal\\n        virtual\\n    {\\n        require(\\n            sender != address(0),\\n            \\\"ERC20: transfer from the zero address\\\"\\n        );\\n\\n        require(\\n            recipient != address(0),\\n            \\\"ERC20: transfer to the zero address\\\"\\n        );\\n\\n        _balances[sender] = _balances[sender].sub(amount);\\n\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount);\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/IPermittableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IPermittableERC20 is IERC20 {\\n\\n    /**\\n     * @notice Approve token with signature\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/sapphire/SapphireTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary SapphireTypes {\\n\\n    struct ScoreProof {\\n        address account;\\n        bytes32 protocol;\\n        uint256 score;\\n        bytes32[] merkleProof;\\n    }\\n\\n    struct Vault {\\n        uint256 collateralAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct RootInfo {\\n        bytes32 merkleRoot;\\n        uint256 timestamp;\\n    }\\n\\n    enum Operation {\\n        Deposit,\\n        Withdraw,\\n        Borrow,\\n        Repay,\\n        Liquidate\\n    }\\n\\n    struct Action {\\n        uint256 amount;\\n        Operation operation;\\n        address userToLiquidate;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/sapphire/ISapphirePassportScores.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport {SapphireTypes} from \\\"./SapphireTypes.sol\\\";\\n\\ninterface ISapphirePassportScores {\\n    function updateMerkleRoot(bytes32 newRoot) external;\\n\\n    function setMerkleRootUpdater(address merkleRootUpdater) external;\\n\\n    /**\\n     * Reverts if proof is invalid\\n     */\\n    function verify(SapphireTypes.ScoreProof calldata proof) external view returns(bool);\\n\\n    function setMerkleRootDelay(uint256 delay) external;\\n\\n    function setPause(bool status) external;\\n}\\n\"\r\n    },\r\n    \"contracts/.openzeppelin/4.x/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary Storage {\\n\\n    /**\\n     * @dev Performs an SLOAD and returns the data in the slot.\\n     */\\n    function load(\\n        bytes32 slot\\n    )\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        bytes32 result;\\n        /* solhint-disable-next-line no-inline-assembly */\\n        assembly {\\n            result := sload(slot)\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Performs an SSTORE to save the value to the slot.\\n     */\\n    function store(\\n        bytes32 slot,\\n        bytes32 value\\n    )\\n        internal\\n    {\\n        /* solhint-disable-next-line no-inline-assembly */\\n        assembly {\\n            sstore(slot, value)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    )\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    )\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/token/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/token/Permittable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ncontract Permittable {\\n\\n    /* ============ Variables ============ */\\n\\n    // solhint-disable-next-line\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    mapping (address => uint256) public nonces;\\n\\n    /* ============ Constants ============ */\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /* solhint-disable-next-line */\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        string memory name,\\n        string memory version\\n    ) {\\n        DOMAIN_SEPARATOR = _initDomainSeparator(name, version);\\n    }\\n\\n    /**\\n     * @dev Initializes EIP712 DOMAIN_SEPARATOR based on the current contract and chain ID.\\n     */\\n    function _initDomainSeparator(\\n        string memory name,\\n        string memory version\\n    )\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        uint256 chainID;\\n        /* solhint-disable-next-line */\\n        assembly {\\n            chainID := chainid()\\n        }\\n\\n        return keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                chainID,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n    * @dev Approve by signature.\\n    *      Caution: If an owner signs a permit with no deadline, the corresponding spender\\n    *      can call permit at any time in the future to mess with the nonce, invalidating\\n    *      signatures to other spenders, possibly making their transactions fail.\\n    *\\n    * Adapted from Uniswap's UniswapV2ERC20 and MakerDAO's Dai contracts:\\n    * https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol\\n    * https://github.com/makerdao/dss/blob/master/src/dai.sol\\n    */\\n    function _permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        internal\\n    {\\n        require(\\n            deadline == 0 || deadline >= block.timestamp,\\n            \\\"Permittable: Permit expired\\\"\\n        );\\n\\n        require(\\n            spender != address(0),\\n            \\\"Permittable: spender cannot be 0x0\\\"\\n        );\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(\\n                    abi.encode(\\n                    PERMIT_TYPEHASH,\\n                    owner,\\n                    spender,\\n                    value,\\n                    nonces[owner]++,\\n                    deadline\\n                )\\n            )\\n        ));\\n\\n        address recoveredAddress = ecrecover(\\n            digest,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        require(\\n            recoveredAddress != address(0) && owner == recoveredAddress,\\n            \\\"Permittable: Signature invalid\\\"\\n        );\\n\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/.openzeppelin/4.x/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_defiPassportContract\",\"type\":\"address\"}],\"name\":\"DefiPassportContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"ExitCooldownDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_cooldownEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"ExitCooldownStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Exited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_streamId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawnFromSablier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_passportScoresContract\",\"type\":\"address\"}],\"name\":\"PassportScoresContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_protocol\",\"type\":\"string\"}],\"name\":\"ProofProtocolSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sablierContract\",\"type\":\"address\"}],\"name\":\"SablierContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newStreamId\",\"type\":\"uint256\"}],\"name\":\"SablierStreamIdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"ScoreThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStreamFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cooldowns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitCooldownDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProofProtocol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"__decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_exitCooldownDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sablierContract\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passportScoresContract\",\"outputs\":[{\"internalType\":\"contract ISapphirePassportScores\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofProtocol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sablierContract\",\"outputs\":[{\"internalType\":\"contract ISablier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sablierStreamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scoreThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setExitCooldownDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_passportScoresContract\",\"type\":\"address\"}],\"name\":\"setPassportScoresContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_protocol\",\"type\":\"bytes32\"}],\"name\":\"setProofProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sablierContract\",\"type\":\"address\"}],\"name\":\"setSablierContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sablierStreamId\",\"type\":\"uint256\"}],\"name\":\"setSablierStreamId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setScoreThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"protocol\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct SapphireTypes.ScoreProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"protocol\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct SapphireTypes.ScoreProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"stakeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IPermittableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startExitCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"toStakedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stTokenAmount\",\"type\":\"uint256\"}],\"name\":\"toStakingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingAccrualERC20V5","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}