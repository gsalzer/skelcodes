{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PWN.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./PWNVault.sol\\\";\\nimport \\\"./PWNDeed.sol\\\";\\nimport \\\"@pwnfinance/multitoken/contracts/MultiToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract PWN is Ownable {\\n\\n    /*----------------------------------------------------------*|\\n    |*  # VARIABLES & CONSTANTS DEFINITIONS                     *|\\n    |*----------------------------------------------------------*/\\n\\n    PWNDeed public deed;\\n    PWNVault public vault;\\n\\n    /*----------------------------------------------------------*|\\n    |*  # EVENTS & ERRORS DEFINITIONS                           *|\\n    |*----------------------------------------------------------*/\\n\\n    // No events nor error defined\\n\\n    /*----------------------------------------------------------*|\\n    |*  # CONSTRUCTOR & FUNCTIONS                               *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * Constructor\\n     * @dev establishes a connection with other pre-deployed components\\n     * @dev for the set up to work both PWNDeed & PWNVault contracts have to called via `.setPWN(PWN.address)`\\n     * @param _PWND Address of the PWNDeed contract - defines Deed tokens\\n     * @param _PWNV Address of the PWNVault contract - holds assets\\n     */\\n    constructor(\\n        address _PWND,\\n        address _PWNV\\n    ) Ownable() {\\n        deed = PWNDeed(_PWND);\\n        vault = PWNVault(_PWNV);\\n    }\\n\\n    /**\\n     * createDeed - sets & locks collateral\\n     * @dev for UI integrations is this the function enabling creation of a new Deed token\\n     * @param _assetAddress Address of the asset contract\\n     * @param _assetCategory Category of the asset - see { MultiToken.sol }\\n     * @param _duration Loan duration in seconds\\n     * @param _assetId ID of an ERC721 or ERC1155 token || 0 in case the token doesn't have IDs\\n     * @param _assetAmount Amount of an ERC20 or ERC1155 token || 0 in case of NFTs\\n     * @return a Deed ID of the newly created Deed\\n     */\\n    function createDeed(\\n        address _assetAddress,\\n        MultiToken.Category _assetCategory,\\n        uint32 _duration,\\n        uint256 _assetId,\\n        uint256 _assetAmount\\n    ) external returns (uint256) {\\n        uint256 did = deed.create(_assetAddress, _assetCategory, _duration, _assetId, _assetAmount, msg.sender);\\n        vault.push(deed.getDeedCollateral(did), msg.sender);\\n\\n        return did;\\n    }\\n\\n    /**\\n     * revokeDeed\\n     * @dev through this function the borrower can delete the Deed token given no offer was accepted\\n     * @param _did Deed ID specifying the concrete Deed\\n     */\\n    function revokeDeed(uint256 _did) external {\\n        deed.revoke(_did, msg.sender);\\n        vault.pull(deed.getDeedCollateral(_did), msg.sender);\\n\\n        deed.burn(_did, msg.sender);\\n    }\\n\\n    /**\\n     * makeOffer\\n     * @dev this is the function used by lenders to cast their offers\\n     * @dev this function doesn't assume the asset is approved yet for PWNVault\\n     * @dev this function requires lender to have a sufficient balance\\n     * @param _assetAddress Address of the asset contract\\n     * @param _assetAmount Amount of an ERC20 token to be offered as loan\\n     * @param _did ID of the Deed the offer should be bound to\\n     * @param _toBePaid Amount to be paid back by the borrower\\n     * @return a hash of the newly created offer\\n     */\\n    function makeOffer(\\n        address _assetAddress,\\n        uint256 _assetAmount,\\n        uint256 _did,\\n        uint256 _toBePaid\\n    ) external returns (bytes32) {\\n        return deed.makeOffer(_assetAddress, _assetAmount, msg.sender, _did, _toBePaid);\\n    }\\n\\n    /**\\n     * revokeOffer\\n     * @dev this is the function lenders can use to remove their offers on Deeds they are in the stage of getting offers\\n     * @param _offer Identifier of the offer to be revoked\\n     */\\n    function revokeOffer(bytes32 _offer) external {\\n        deed.revokeOffer(_offer, msg.sender);\\n    }\\n\\n    /**\\n     * acceptOffer\\n     * @dev through this function a borrower can accept an existing offer\\n     * @dev a UI should do an off-chain balance check on the lender side to make sure the call won't throw\\n     * @param _offer Identifier of the offer to be accepted\\n     * @return true if successful\\n     */\\n    function acceptOffer(bytes32 _offer) external returns (bool) {\\n        uint256 did = deed.getDeedID(_offer);\\n        deed.acceptOffer(did, _offer, msg.sender);\\n\\n        address lender = deed.getLender(_offer);\\n        vault.pullProxy(deed.getOfferLoan(_offer), lender, msg.sender);\\n\\n        MultiToken.Asset memory collateral;\\n        collateral.category = MultiToken.Category.ERC1155;\\n        collateral.id = did;\\n        collateral.assetAddress = address(deed);\\n        vault.pullProxy(collateral, msg.sender, lender);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * repayLoan\\n     * @dev the borrower can pay back the funds through this function\\n     * @dev the function assumes the asset (and amount to be paid back) to be returned is approved for PWNVault\\n     * @dev the function assumes the borrower has the full amount to be paid back in their account\\n     * @param _did Deed ID of the deed being paid back\\n     * @return true if successful\\n     */\\n    function repayLoan(uint256 _did) external returns (bool) {\\n        deed.repayLoan(_did);\\n\\n        bytes32 offer = deed.getAcceptedOffer(_did);\\n        MultiToken.Asset memory loan = deed.getOfferLoan(offer);\\n        loan.amount = deed.toBePaid(offer);  //override the num of loan given\\n\\n        vault.pull(deed.getDeedCollateral(_did), deed.getBorrower(_did));\\n        vault.push(loan, msg.sender);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * claim Deed\\n     * @dev The current Deed owner can call this function if the Deed is expired or payed back\\n     * @param _did Deed ID of the deed to be claimed\\n     * @return true if successful\\n     */\\n    function claimDeed(uint256 _did) external returns (bool) {\\n        uint8 status = deed.getDeedStatus(_did);\\n\\n        deed.claim(_did, msg.sender);\\n\\n        if (status == 3) {\\n            bytes32 offer = deed.getAcceptedOffer(_did);\\n            MultiToken.Asset memory loan = deed.getOfferLoan(offer);\\n            loan.amount = deed.toBePaid(offer);\\n\\n            vault.pull(loan, msg.sender);\\n\\n        } else if (status == 4) {\\n            vault.pull(deed.getDeedCollateral(_did), msg.sender);\\n        }\\n\\n        deed.burn(_did, msg.sender);\\n\\n        return true;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@pwnfinance/multitoken/contracts/MultiToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\n// @dev importing contract interfaces - for supported contracts; nothing more than the interface is needed!\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nlibrary MultiToken {\\n\\n    /**\\n     * @title Category\\n     * @dev enum represention Asset category\\n     */\\n    enum Category {\\n        ERC20,\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    /**\\n     * @title Asset\\n     * @param assetAddress Address of the token contract defining the asset\\n     * @param category Corresponding asset category\\n     * @param amount Amount of fungible tokens or 0 -> 1\\n     * @param id TokenID of an NFT or 0\\n     */\\n    struct Asset {\\n        address assetAddress;\\n        Category category;\\n        uint256 amount;\\n        uint256 id;\\n    }\\n\\n    /**\\n     * transferAsset\\n     * @dev wrapping function for transfer calls on various token interfaces\\n     * @param _asset Struck defining all necessary context of a token\\n     * @param _dest Destination address\\n     */\\n    function transferAsset(Asset memory _asset, address _dest) internal {\\n        if (_asset.category == Category.ERC20) {\\n            IERC20 token = IERC20(_asset.assetAddress);\\n            token.transfer(_dest, _asset.amount);\\n\\n        } else if (_asset.category == Category.ERC721) {\\n            IERC721 token = IERC721(_asset.assetAddress);\\n            token.transferFrom(address(this), _dest, _asset.id);\\n\\n        } else if (_asset.category == Category.ERC1155) {\\n            IERC1155 token = IERC1155(_asset.assetAddress);\\n            if (_asset.amount == 0) {\\n                _asset.amount = 1;\\n            }\\n            token.safeTransferFrom(address(this), _dest, _asset.id, _asset.amount, \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * transferAssetFrom\\n     * @dev wrapping function for transfer From calls on various token interfaces\\n     * @param _asset Struck defining all necessary context of a token\\n     * @param _source Account/address that provided the allowance\\n     * @param _dest Destination address\\n     */\\n    function transferAssetFrom(Asset memory _asset, address _source, address _dest) internal {\\n        if (_asset.category == Category.ERC20) {\\n            IERC20 token = IERC20(_asset.assetAddress);\\n            token.transferFrom(_source, _dest, _asset.amount);\\n\\n        } else if (_asset.category == Category.ERC721) {\\n            IERC721 token = IERC721(_asset.assetAddress);\\n            token.transferFrom(_source, _dest, _asset.id);\\n\\n        } else if (_asset.category == Category.ERC1155) {\\n            IERC1155 token = IERC1155(_asset.assetAddress);\\n            if (_asset.amount == 0) {\\n                _asset.amount = 1;\\n            }\\n            token.safeTransferFrom(_source, _dest, _asset.id, _asset.amount, \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * balanceOf\\n     * @dev wrapping function for checking balances on various token interfaces\\n     * @param _asset Struck defining all necessary context of a token\\n     * @param _target Target address to be checked\\n     */\\n    function balanceOf(Asset memory _asset, address _target) internal view returns (uint256) {\\n        if (_asset.category == Category.ERC20) {\\n            IERC20 token = IERC20(_asset.assetAddress);\\n            return token.balanceOf(_target);\\n\\n        } else if (_asset.category == Category.ERC721) {\\n            IERC721 token = IERC721(_asset.assetAddress);\\n            if (token.ownerOf(_asset.id) == _target) {\\n                return 1;\\n            } else {\\n                return 0;\\n            }\\n\\n        } else if (_asset.category == Category.ERC1155) {\\n            IERC1155 token = IERC1155(_asset.assetAddress);\\n            return token.balanceOf(_target, _asset.id);\\n        }\\n    }\\n\\n    /**\\n     * approveAsset\\n     * @dev wrapping function for approve calls on various token interfaces\\n     * @param _asset Struck defining all necessary context of a token\\n     * @param _target Target address to be checked\\n     */\\n    function approveAsset(Asset memory _asset, address _target) internal {\\n        if (_asset.category == Category.ERC20) {\\n            IERC20 token = IERC20(_asset.assetAddress);\\n            token.approve(_target, _asset.amount);\\n\\n        } else if (_asset.category == Category.ERC721) {\\n            IERC721 token = IERC721(_asset.assetAddress);\\n            token.approve(_target, _asset.id);\\n\\n        } else if (_asset.category == Category.ERC1155) {\\n            IERC1155 token = IERC1155(_asset.assetAddress);\\n            token.setApprovalForAll(_target, true);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PWNDeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@pwnfinance/multitoken/contracts/MultiToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\n\\ncontract PWNDeed is ERC1155, Ownable {\\n\\n    /*----------------------------------------------------------*|\\n    |*  # VARIABLES & CONSTANTS DEFINITIONS                     *|\\n    |*----------------------------------------------------------*/\\n\\n    address public PWN;                 // necessary msg.sender for all Deed related manipulations\\n    uint256 public id;                  // simple DeedID counter\\n    uint256 private nonce;              // server for offer hash generation\\n\\n    /**\\n     * Construct defining a Deed\\n     * @param status 0 == none/dead || 1 == new/open || 2 == running/accepted offer || 3 == paid back || 4 == expired\\n     * @param borrower Address of the issuer / borrower - stays the same for entire lifespan of the token\\n     * @param duration Loan duration in seconds\\n     * @param expiration Unix timestamp (in seconds) setting up the default deadline\\n     * @param collateral Consisting of another an `Asset` struct defined in the MultiToken library\\n     * @param acceptedOffer Hash of the offer which will be bound to the deed\\n     * @param pendingOffers List of offers made to the Deed\\n     */\\n    struct Deed {\\n        uint8 status;\\n        address borrower;\\n        uint32 duration;\\n        uint40 expiration;\\n        MultiToken.Asset collateral;\\n        bytes32 acceptedOffer;\\n        bytes32[] pendingOffers;\\n    }\\n\\n    /**\\n     * Construct defining an offer\\n     * @param did Deed ID the offer is bound to\\n     * @param toBePaid Nn amount to be paid back (borrowed + interest)\\n     * @param lender Address of the lender to be the loan withdrawn from\\n     * @param loan Consisting of another an `Asset` struct defined in the MultiToken library\\n     */\\n    struct Offer {\\n        uint256 did;\\n        uint256 toBePaid;\\n        address lender;\\n        MultiToken.Asset loan;\\n    }\\n\\n    mapping (uint256 => Deed) public deeds;             // mapping of all Deed data\\n    mapping (bytes32 => Offer) public offers;           // mapping of all Offer data\\n\\n    /*----------------------------------------------------------*|\\n    |*  # EVENTS & ERRORS DEFINITIONS                           *|\\n    |*----------------------------------------------------------*/\\n\\n    event DeedCreated(address indexed assetAddress, MultiToken.Category category, uint256 id, uint256 amount, uint32 duration, uint256 indexed did);\\n    event OfferMade(address assetAddress, uint256 amount, address indexed lender, uint256 toBePaid, uint256 indexed did, bytes32 offer);\\n    event DeedRevoked(uint256 did);\\n    event OfferRevoked(bytes32 offer);\\n    event OfferAccepted(uint256 did, bytes32 offer);\\n    event PaidBack(uint256 did, bytes32 offer);\\n    event DeedClaimed(uint256 did);\\n\\n    /*----------------------------------------------------------*|\\n    |*  # MODIFIERS                                             *|\\n    |*----------------------------------------------------------*/\\n\\n    modifier onlyPWN() {\\n        require(msg.sender == PWN, \\\"Caller is not the PWN\\\");\\n        _;\\n    }\\n\\n    /*----------------------------------------------------------*|\\n    |*  # CONSTRUCTOR & FUNCTIONS                               *|\\n    |*----------------------------------------------------------*/\\n\\n    /*\\n     *  PWN Deed constructor\\n     *  @dev Creates the PWN Deed token contract - ERC1155 with extra use case specific features\\n     *  @dev Once the PWN contract is set, you'll have to call `this.setPWN(PWN.address)` for this contract to work\\n     *  @param _uri Uri to be used for finding the token metadata (https://api.pwn.finance/deed/...)\\n     */\\n    constructor(string memory _uri) ERC1155(_uri) Ownable() {\\n\\n    }\\n\\n    /*\\n     *   All contracts of this section can only be called by the PWN contract itself - once set via `setPWN(PWN.address)`\\n     */\\n\\n    /**\\n     * create\\n     * @dev Creates the PWN Deed token contract - ERC1155 with extra use case specific features\\n     * @param _assetAddress Address of the asset contract\\n     * @param _assetCategory Category of the asset - see { MultiToken.sol }\\n     * @param _duration Loan duration in seconds\\n     * @param _assetId ID of an ERC721 or ERC1155 token || 0 in case the token doesn't have IDs\\n     * @param _assetAmount Amount of an ERC20 or ERC1155 token || 0 in case of NFTs\\n     * @param _owner Address initiating the new Deed\\n     * @return Deed ID of the newly minted Deed\\n     */\\n    function create(\\n        address _assetAddress,\\n        MultiToken.Category _assetCategory,\\n        uint32 _duration,\\n        uint256 _assetId,\\n        uint256 _assetAmount,\\n        address _owner\\n    ) external onlyPWN returns (uint256) {\\n        id++;\\n\\n        Deed storage deed = deeds[id];\\n        deed.duration = _duration;\\n        deed.collateral.assetAddress = _assetAddress;\\n        deed.collateral.category = _assetCategory;\\n        deed.collateral.id = _assetId;\\n        deed.collateral.amount = _assetAmount;\\n\\n        _mint(_owner, id, 1, \\\"\\\");\\n\\n        deed.status = 1;\\n\\n        emit DeedCreated(_assetAddress, _assetCategory, _assetId, _assetAmount, _duration, id);\\n\\n        return id;\\n    }\\n\\n    /**\\n     * revoke\\n     * @dev Burns a deed token\\n     * @param _did Deed ID of the token to be burned\\n     * @param _owner Address of the borrower who issued the Deed\\n     */\\n    function revoke(\\n        uint256 _did,\\n        address _owner\\n    ) external onlyPWN {\\n        require(balanceOf(_owner, _did) == 1, \\\"The deed doesn't belong to the caller\\\");\\n        require(getDeedStatus(_did) == 1, \\\"Deed can't be revoked at this stage\\\");\\n\\n        deeds[_did].status = 0;\\n\\n        emit DeedRevoked(_did);\\n    }\\n\\n    /**\\n     * makeOffer\\n     * @dev saves an offer object that defines loan terms\\n     * @dev only ERC20 tokens can be offered as loan\\n     * @param _assetAddress Address of the asset contract\\n     * @param _assetAmount Amount of an ERC20 token to be offered as loan\\n     * @param _lender Address of the asset lender\\n     * @param _did ID of the Deed the offer should be bound to\\n     * @param _toBePaid Amount to be paid back by the borrower\\n     * @return hash of the newly created offer\\n     */\\n    function makeOffer(\\n        address _assetAddress,\\n        uint256 _assetAmount,\\n        address _lender,\\n        uint256 _did,\\n        uint256 _toBePaid\\n    ) external onlyPWN returns (bytes32) {\\n        require(getDeedStatus(_did) == 1, \\\"Deed not accepting offers\\\");\\n\\n        bytes32 hash = keccak256(abi.encodePacked(_lender, nonce));\\n        nonce++;\\n\\n        Offer storage offer = offers[hash];\\n        offer.loan.assetAddress = _assetAddress;\\n        offer.loan.amount = _assetAmount;\\n        offer.toBePaid = _toBePaid;\\n        offer.lender = _lender;\\n        offer.did = _did;\\n\\n        deeds[_did].pendingOffers.push(hash);\\n\\n        emit OfferMade(_assetAddress, _assetAmount, _lender, _toBePaid, _did, hash);\\n\\n        return hash;\\n    }\\n\\n    /**\\n     * revokeOffer\\n     * @dev function to remove a pending offer\\n     * @dev This only removes the offer representation but it doesn't remove the offer from a list of pending offers.\\n     *         The offers associated with a deed has to be filtered on the front end to only list the valid ones.\\n     *         No longer existent offers will simply return 0 if prompted about their DID.\\n     * @param _offer Hash identifying an offer\\n     * @param _lender Address of the lender who made the offer\\n     * @dev TODO: consider ways to remove the offer from the pending offers array / maybe replace for a mapping\\n     */\\n    function revokeOffer(\\n        bytes32 _offer,\\n        address _lender\\n    ) external onlyPWN {\\n        require(offers[_offer].lender == _lender, \\\"This address didn't create the offer\\\");\\n        require(getDeedStatus(offers[_offer].did) == 1, \\\"Can only remove offers from open Deeds\\\");\\n\\n        delete offers[_offer];\\n\\n        emit OfferRevoked(_offer);\\n    }\\n\\n    /**\\n     * acceptOffer\\n     * @dev function to set accepted offer\\n     * @param _did ID of the Deed the offer should be bound to\\n     * @param _offer Hash identifying an offer\\n     * @param _owner Address of the borrower who issued the Deed\\n     */\\n    function acceptOffer(\\n        uint256 _did,\\n        bytes32 _offer,\\n        address _owner\\n    ) external onlyPWN {\\n        require(balanceOf(_owner, _did) == 1, \\\"The deed doesn't belong to the caller\\\");\\n        require(getDeedStatus(_did) == 1, \\\"Deed can't accept more offers\\\");\\n\\n        Deed storage deed = deeds[_did];\\n        deed.borrower = _owner;\\n        deed.expiration = uint40(block.timestamp) + deed.duration;\\n        deed.acceptedOffer = _offer;\\n        delete deed.pendingOffers;\\n        deed.status = 2;\\n\\n        emit OfferAccepted(_did, _offer);\\n    }\\n\\n    /**\\n     * repayLoan\\n     * @dev function to make proper state transition\\n     * @param _did ID of the Deed which is paid back\\n     */\\n    function repayLoan(uint256 _did) external onlyPWN {\\n        require(getDeedStatus(_did) == 2, \\\"Deed doesn't have an accepted offer to be paid back\\\");\\n\\n        deeds[_did].status = 3;\\n\\n        emit PaidBack(_did, deeds[_did].acceptedOffer);\\n    }\\n\\n    /**\\n     * claim\\n     * @dev function that would burn the deed token if the token is in paidBack or expired state\\n     * @param _did ID of the Deed which is claimed\\n     * @param _owner Address of the deed token owner\\n     */\\n    function claim(\\n        uint256 _did,\\n        address _owner\\n    ) external onlyPWN {\\n        require(balanceOf(_owner, _did) == 1, \\\"Caller is not the deed owner\\\");\\n        require(getDeedStatus(_did) >= 3, \\\"Deed can't be claimed yet\\\");\\n\\n        deeds[_did].status = 0;\\n\\n        emit DeedClaimed(_did);\\n    }\\n\\n    /**\\n     * burn\\n     * @dev function that would burn the deed token if the token is in dead state\\n     * @param _did ID of the Deed which is burned\\n     * @param _owner Address of the deed token owner\\n     */\\n    function burn(\\n        uint256 _did,\\n        address _owner\\n    ) external onlyPWN {\\n        require(balanceOf(_owner, _did) == 1, \\\"Caller is not the deed owner\\\");\\n        require(deeds[_did].status == 0, \\\"Deed can't be burned at this stage\\\");\\n\\n        delete deeds[_did];\\n        _burn(_owner, _did, 1);\\n    }\\n\\n    /*----------------------------------------------------------*|\\n    |*  ## VIEW FUNCTIONS                                       *|\\n    |*----------------------------------------------------------*/\\n\\n    /*--------------------------------*|\\n    |*  ## VIEW FUNCTIONS - DEEDS     *|\\n    |*--------------------------------*/\\n\\n    /**\\n     * getDeedStatus\\n     * @dev used in contract calls & status checks and also in UI for elementary deed status categorization\\n     * @param _did Deed ID checked for status\\n     * @return a status number\\n     */\\n    function getDeedStatus(uint256 _did) public view returns (uint8) {\\n        if (deeds[_did].expiration > 0 && deeds[_did].expiration < block.timestamp && deeds[_did].status != 3) {\\n            return 4;\\n        } else {\\n            return deeds[_did].status;\\n        }\\n    }\\n\\n    /**\\n     * getExpiration\\n     * @dev utility function to find out exact expiration time of a particular Deed\\n     * @dev for simple status check use `this.getDeedStatus(did)` if `status == 4` then Deed has expired\\n     * @param _did Deed ID to be checked\\n     * @return unix time stamp in seconds\\n     */\\n    function getExpiration(uint256 _did) public view returns (uint40) {\\n        return deeds[_did].expiration;\\n    }\\n\\n    /**\\n     * getDuration\\n     * @dev utility function to find out loan duration period of a particular Deed\\n     * @param _did Deed ID to be checked\\n     * @return loan duration period in seconds\\n     */\\n    function getDuration(uint256 _did) public view returns (uint32) {\\n        return deeds[_did].duration;\\n    }\\n\\n    /**\\n     * getBorrower\\n     * @dev utility function to find out a borrower address of a particular Deed\\n     * @param _did Deed ID to be checked\\n     * @return address of the borrower\\n     */\\n    function getBorrower(uint256 _did) public view returns (address) {\\n        return deeds[_did].borrower;\\n    }\\n\\n    /**\\n     * getDeedCollateral\\n     * @dev utility function to find out collateral asset of a particular Deed\\n     * @param _did Deed ID to be checked\\n     * @return Asset construct - for definition see { MultiToken.sol }\\n     */\\n    function getDeedCollateral(uint256 _did) public view returns (MultiToken.Asset memory) {\\n        return deeds[_did].collateral;\\n    }\\n\\n    /**\\n     * getOffers\\n     * @dev utility function to get a list of all pending offers of a Deed\\n     * @param _did Deed ID to be checked\\n     * @return a list of offer hashes\\n     */\\n    function getOffers(uint256 _did) public view returns (bytes32[] memory) {\\n        return deeds[_did].pendingOffers;\\n    }\\n\\n    /**\\n     * getAcceptedOffer\\n     * @dev used to get a list of made offers to be queried in the UI - needs additional check for re-validating each offer\\n     * @dev revalidation requires checking if the lender has sufficient balance and approved the asset\\n     * @param _did Deed ID being queried for offers\\n     * @return Hash of the accepted offer\\n     */\\n    function getAcceptedOffer(uint256 _did) public view returns (bytes32) {\\n        return deeds[_did].acceptedOffer;\\n    }\\n\\n    /*--------------------------------*|\\n    |*  ## VIEW FUNCTIONS - OFFERS    *|\\n    |*--------------------------------*/\\n\\n    /**\\n     * getDeedID\\n     * @dev utility function to find out which Deed is an offer associated with\\n     * @param _offer Offer hash of an offer to be prompted\\n     * @return Deed ID\\n     */\\n    function getDeedID(bytes32 _offer) public view returns (uint256) {\\n        return offers[_offer].did;\\n    }\\n\\n    /**\\n     * getOfferLoan\\n     * @dev utility function that returns the loan asset of a particular offer\\n     * @param _offer Offer hash of an offer to be prompted\\n     * @return Asset construct - for definition see { MultiToken.sol }\\n     */\\n    function getOfferLoan(bytes32 _offer) public view returns (MultiToken.Asset memory) {\\n        return offers[_offer].loan;\\n    }\\n\\n    /**\\n     * toBePaid\\n     * @dev quick query of the total amount to be paid to an offer\\n     * @param _offer Offer hash of an offer to be prompted\\n     * @return Amount to be paid back\\n     */\\n    function toBePaid(bytes32 _offer) public view returns (uint256) {\\n        return offers[_offer].toBePaid;\\n    }\\n\\n    /**\\n     * getLender\\n     * @dev utility function to find out a lender address of a particular offer\\n     * @param _offer Offer hash of an offer to be prompted\\n     * @return Address of the lender\\n     */\\n    function getLender(bytes32 _offer) public view returns (address) {\\n        return offers[_offer].lender;\\n    }\\n\\n    /*--------------------------------*|\\n    |*  ## SETUP FUNCTIONS            *|\\n    |*--------------------------------*/\\n\\n    /**\\n     * setPWN\\n     * @dev An essential setup function. Has to be called once PWN contract was deployed\\n     * @param _address Identifying the PWN contract\\n     */\\n    function setPWN(address _address) external onlyOwner {\\n        PWN = _address;\\n    }\\n\\n    /**\\n     * setUri\\n     * @dev An non-essential setup function. Can be called to adjust the Deed token metadata URI\\n     * @param _newUri setting the new origin of Deed metadata\\n     */\\n    function setUri(string memory _newUri) external onlyOwner {\\n        _setURI(_newUri);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PWNVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@pwnfinance/multitoken/contracts/MultiToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\ncontract PWNVault is Ownable, IERC1155Receiver {\\n    using MultiToken for MultiToken.Asset;\\n\\n    /*----------------------------------------------------------*|\\n    |*  # VARIABLES & CONSTANTS DEFINITIONS                     *|\\n    |*----------------------------------------------------------*/\\n\\n    address public PWN;\\n\\n    /*----------------------------------------------------------*|\\n    |*  # MODIFIERS                                             *|\\n    |*----------------------------------------------------------*/\\n\\n    modifier onlyPWN() {\\n        require(msg.sender == PWN, \\\"Caller is not the PWN\\\");\\n        _;\\n    }\\n\\n    /*----------------------------------------------------------*|\\n    |*  # EVENTS & ERRORS DEFINITIONS                           *|\\n    |*----------------------------------------------------------*/\\n\\n    event VaultPush(MultiToken.Asset asset, address indexed origin);\\n    event VaultPull(MultiToken.Asset asset, address indexed beneficiary);\\n    event VaultProxy(MultiToken.Asset asset, address indexed origin, address indexed beneficiary);\\n\\n\\n    /*----------------------------------------------------------*|\\n    |*  # CONSTRUCTOR & FUNCTIONS                               *|\\n    |*----------------------------------------------------------*/\\n\\n    /**\\n     * PWN Vault constructor\\n     * @dev this contract holds balances of all locked collateral & paid back loan prior to their rightful claims\\n     * @dev in order for the vault to work it has to have an association with the PWN logic via `.setPWN(PWN.address)`\\n     */\\n    constructor() Ownable() IERC1155Receiver() {\\n    }\\n\\n    /**\\n     * push\\n     * @dev function accessing an asset and pushing it INTO the vault\\n     * @dev the function assumes a prior token approval was made with the PWNVault.address to be approved\\n     * @param _asset An asset construct - for definition see { MultiToken.sol }\\n     * @return true if successful\\n     */\\n    function push(MultiToken.Asset memory _asset, address _origin) external onlyPWN returns (bool) {\\n        _asset.transferAssetFrom(_origin, address(this));\\n        emit VaultPush(_asset, _origin);\\n        return true;\\n    }\\n\\n    /**\\n     * pull\\n     * @dev function pulling an asset FROM the vault, sending to a defined recipient\\n     * @dev this is used for unlocking the collateral on revocations & claims or when claiming a paidback loan\\n     * @param _asset An asset construct - for definition see { MultiToken.sol }\\n     * @param _beneficiary An address of the recipient of the asset - is set in the PWN logic contract\\n     * @return true if successful\\n     */\\n    function pull(MultiToken.Asset memory _asset, address _beneficiary) external onlyPWN returns (bool) {\\n        _asset.transferAsset(_beneficiary);\\n        emit VaultPull(_asset, _beneficiary);\\n        return true;\\n    }\\n\\n    /**\\n     * pullProxy\\n     * @dev function pulling an asset FROM a lender, sending to a borrower\\n     * @dev this function assumes prior approval for the asset to be spend by the borrower address\\n     * @param _asset An asset construct - for definition see { MultiToken.sol }\\n     * @param _origin An address of the lender who is providing the loan asset\\n     * @param _beneficiary An address of the recipient of the asset - is set in the PWN logic contract\\n     * @return true if successful\\n     */\\n    function pullProxy(MultiToken.Asset memory _asset, address _origin, address _beneficiary) external onlyPWN returns (bool) {\\n        _asset.transferAssetFrom(_origin, _beneficiary);\\n        emit VaultProxy(_asset, _origin, _beneficiary);\\n        return true;\\n    }\\n    \\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     * To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        override\\n        external\\n        pure\\n        returns(bytes4)\\n    {\\n        return 0xf23a6e61;\\n    }\\n    \\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated. To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        override\\n        external\\n        pure\\n        returns(bytes4)\\n    {\\n        return 0xbc197c81;\\n    }\\n\\n    /**\\n     * setPWN\\n     * @dev An essential setup function. Has to be called once PWN contract was deployed\\n     * @param _address Identifying the PWN contract\\n     */\\n    function setPWN(address _address) external onlyOwner {\\n        PWN = _address;\\n    }\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external pure override returns (bool) {\\n        return\\n            interfaceId == type(IERC165).interfaceId || // ERC165\\n            interfaceId == type(Ownable).interfaceId || // Ownable\\n            interfaceId == type(IERC1155Receiver).interfaceId || // ERC1155Receiver\\n            interfaceId == this.PWN.selector\\n                            ^ this.push.selector\\n                            ^ this.pull.selector\\n                            ^ this.pullProxy.selector\\n                            ^ this.setPWN.selector; // PWN Vault\\n\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_PWND\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PWNV\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_offer\",\"type\":\"bytes32\"}],\"name\":\"acceptOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_did\",\"type\":\"uint256\"}],\"name\":\"claimDeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"internalType\":\"enum MultiToken.Category\",\"name\":\"_assetCategory\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_duration\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"}],\"name\":\"createDeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deed\",\"outputs\":[{\"internalType\":\"contract PWNDeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_did\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toBePaid\",\"type\":\"uint256\"}],\"name\":\"makeOffer\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_did\",\"type\":\"uint256\"}],\"name\":\"repayLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_did\",\"type\":\"uint256\"}],\"name\":\"revokeDeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_offer\",\"type\":\"bytes32\"}],\"name\":\"revokeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract PWNVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PWN","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009eb96d50a6d2af5771883547dae092996828be7300000000000000000000000045db28b2d4878ad124c037d4558acf5db3bba6a5","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}