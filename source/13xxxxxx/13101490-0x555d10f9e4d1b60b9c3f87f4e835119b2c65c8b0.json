{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/tokenbridge/ethereum/gateway/L1GatewayRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"arb-bridge-eth/contracts/libraries/Whitelist.sol\\\";\\n\\nimport \\\"../L1ArbitrumMessenger.sol\\\";\\nimport \\\"../../libraries/gateway/GatewayRouter.sol\\\";\\nimport \\\"../../arbitrum/gateway/L2GatewayRouter.sol\\\";\\n\\n/**\\n * @title Handles deposits from Erhereum into Arbitrum. Tokens are routered to their appropriate L1 gateway (Router itself also conforms to the Gateway itnerface).\\n * @notice Router also serves as an L1-L2 token address oracle.\\n */\\ncontract L1GatewayRouter is WhitelistConsumer, L1ArbitrumMessenger, GatewayRouter {\\n    address public owner;\\n    address public inbox;\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"ONLY_OWNER\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _owner,\\n        address _defaultGateway,\\n        address _whitelist,\\n        address _counterpartGateway,\\n        address _inbox\\n    ) public {\\n        GatewayRouter._initialize(_counterpartGateway, address(0), _defaultGateway);\\n        owner = _owner;\\n        WhitelistConsumer.whitelist = _whitelist;\\n        inbox = _inbox;\\n    }\\n\\n    function setDefaultGateway(\\n        address newL1DefaultGateway,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost\\n    ) external payable onlyOwner returns (uint256) {\\n        defaultGateway = newL1DefaultGateway;\\n\\n        emit DefaultGatewayUpdated(newL1DefaultGateway);\\n\\n        address l2NewDefaultGateway;\\n\\n        if (newL1DefaultGateway != address(0)) {\\n            l2NewDefaultGateway = TokenGateway(newL1DefaultGateway).counterpartGateway();\\n        }\\n\\n        bytes memory data =\\n            abi.encodeWithSelector(L2GatewayRouter.setDefaultGateway.selector, l2NewDefaultGateway);\\n\\n        return\\n            sendTxToL2(\\n                inbox,\\n                counterpartGateway,\\n                msg.sender,\\n                msg.value,\\n                0,\\n                L2GasParams({\\n                    _maxSubmissionCost: _maxSubmissionCost,\\n                    _maxGas: _maxGas,\\n                    _gasPriceBid: _gasPriceBid\\n                }),\\n                data\\n            );\\n    }\\n\\n    function setOwner(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"INVALID_OWNER\\\");\\n        // set newOwner to address(1) to disable owner and keep `initialize` safe\\n        owner = newOwner;\\n    }\\n\\n    function _setGateways(\\n        address[] memory _token,\\n        address[] memory _gateway,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost,\\n        address _creditBackAddress\\n    ) internal returns (uint256) {\\n        require(_token.length == _gateway.length, \\\"WRONG_LENGTH\\\");\\n\\n        for (uint256 i = 0; i < _token.length; i++) {\\n            l1TokenToGateway[_token[i]] = _gateway[i];\\n            emit GatewaySet(_token[i], _gateway[i]);\\n            // overwrite memory so the L2 router receives the L2 address of each gateway\\n            if (_gateway[i] != address(0)) {\\n                _gateway[i] = TokenGateway(_gateway[i]).counterpartGateway();\\n            }\\n        }\\n\\n        bytes memory data =\\n            abi.encodeWithSelector(L2GatewayRouter.setGateway.selector, _token, _gateway);\\n\\n        return\\n            sendTxToL2(\\n                inbox,\\n                counterpartGateway,\\n                _creditBackAddress,\\n                msg.value,\\n                0,\\n                L2GasParams({\\n                    _maxSubmissionCost: _maxSubmissionCost,\\n                    _maxGas: _maxGas,\\n                    _gasPriceBid: _gasPriceBid\\n                }),\\n                data\\n            );\\n    }\\n\\n    /**\\n     * @notice Allows L1 Token contract to trustlessly register its gateway. (other setGateway method allows excess eth recovery from _maxSubmissionCost and is recommended)\\n\\n     * @param _gateway l1 gateway address\\n     * @param _maxGas max gas for L2 retryable exrecution \\n     * @param _gasPriceBid gas price for L2 retryable ticket \\n     * @param  _maxSubmissionCost base submission cost  L2 retryable tick3et \\n     * @return Retryable ticket ID\\n     */\\n    function setGateway(\\n        address _gateway,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost\\n    ) external payable returns (uint256) {\\n        return setGateway(_gateway, _maxGas, _gasPriceBid, _maxSubmissionCost, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Allows L1 Token contract to trustlessly register its gateway.\\n\\n     * @param _gateway l1 gateway address\\n     * @param _maxGas max gas for L2 retryable exrecution \\n     * @param _gasPriceBid gas price for L2 retryable ticket \\n     * @param  _maxSubmissionCost base submission cost  L2 retryable tick3et \\n     * @param _creditBackAddress address for crediting back overpayment of _maxSubmissionCost\\n     * @return Retryable ticket ID\\n     */\\n    function setGateway(\\n        address _gateway,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost,\\n        address _creditBackAddress\\n    ) public payable returns (uint256) {\\n        require(address(msg.sender).isContract(), \\\"NOT_FROM_CONTRACT\\\");\\n        require(_gateway.isContract(), \\\"NOT_TO_CONTRACT\\\");\\n\\n        address[] memory _tokenArr = new address[](1);\\n        _tokenArr[0] = address(msg.sender);\\n\\n        address[] memory _gatewayArr = new address[](1);\\n        _gatewayArr[0] = _gateway;\\n\\n        return\\n            _setGateways(\\n                _tokenArr,\\n                _gatewayArr,\\n                _maxGas,\\n                _gasPriceBid,\\n                _maxSubmissionCost,\\n                _creditBackAddress\\n            );\\n    }\\n\\n    function setGateways(\\n        address[] memory _token,\\n        address[] memory _gateway,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        uint256 _maxSubmissionCost\\n    ) external payable onlyOwner returns (uint256) {\\n        // it is assumed that token and gateway are both contracts\\n        // require(_token[i].isContract() && _gateway[i].isContract(), \\\"NOT_CONTRACT\\\");\\n        return\\n            _setGateways(_token, _gateway, _maxGas, _gasPriceBid, _maxSubmissionCost, msg.sender);\\n    }\\n\\n    function outboundTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) public payable override onlyWhitelisted returns (bytes memory) {\\n        // will revert if msg.sender is not whitelisted\\n        super.outboundTransfer(_token, _to, _amount, _maxGas, _gasPriceBid, _data);\\n    }\\n\\n    modifier onlyCounterpartGateway() override {\\n        // don't expect messages from L2 router\\n        revert(\\\"ONLY_COUNTERPART_GATEWAY\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"arb-bridge-eth/contracts/libraries/Whitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nabstract contract WhitelistConsumer {\\n    address public whitelist;\\n\\n    event WhitelistSourceUpdated(address newSource);\\n\\n    modifier onlyWhitelisted {\\n        if (whitelist != address(0)) {\\n            require(Whitelist(whitelist).isAllowed(msg.sender), \\\"NOT_WHITELISTED\\\");\\n        }\\n        _;\\n    }\\n\\n    function updateWhitelistSource(address newSource) external {\\n        require(msg.sender == whitelist, \\\"NOT_FROM_LIST\\\");\\n        whitelist = newSource;\\n        emit WhitelistSourceUpdated(newSource);\\n    }\\n}\\n\\ncontract Whitelist {\\n    address public owner;\\n    mapping(address => bool) public isAllowed;\\n\\n    event OwnerUpdated(address newOwner);\\n    event WhitelistUpgraded(address newWhitelist, address[] targets);\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"ONLY_OWNER\\\");\\n        _;\\n    }\\n\\n    function setOwner(address newOwner) external onlyOwner {\\n        owner = newOwner;\\n        emit OwnerUpdated(newOwner);\\n    }\\n\\n    function setWhitelist(address[] memory user, bool[] memory val) external onlyOwner {\\n        require(user.length == val.length, \\\"INVALID_INPUT\\\");\\n\\n        for (uint256 i = 0; i < user.length; i++) {\\n            isAllowed[user[i]] = val[i];\\n        }\\n    }\\n\\n    // set new whitelist to address(0) to disable whitelist\\n    function triggerConsumers(address newWhitelist, address[] memory targets) external onlyOwner {\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            WhitelistConsumer(targets[i]).updateWhitelistSource(newWhitelist);\\n        }\\n        emit WhitelistUpgraded(newWhitelist, targets);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokenbridge/ethereum/L1ArbitrumMessenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"arb-bridge-eth/contracts/bridge/interfaces/IInbox.sol\\\";\\nimport \\\"arb-bridge-eth/contracts/bridge/interfaces/IOutbox.sol\\\";\\n\\n/// @notice L1 utility contract to assist with L1 <=> L2 interactions\\n/// @dev this is an abstract contract instead of library so the functions can be easily overriden when testing\\nabstract contract L1ArbitrumMessenger {\\n    event TxToL2(address indexed _from, address indexed _to, uint256 indexed _seqNum, bytes _data);\\n\\n    struct L2GasParams {\\n        uint256 _maxSubmissionCost;\\n        uint256 _maxGas;\\n        uint256 _gasPriceBid;\\n    }\\n\\n    function sendTxToL2(\\n        address _inbox,\\n        address _to,\\n        address _user,\\n        uint256 _l1CallValue,\\n        uint256 _l2CallValue,\\n        L2GasParams memory _l2GasParams,\\n        bytes memory _data\\n    ) internal virtual returns (uint256) {\\n        // alternative function entry point when struggling with the stack size\\n        return\\n            sendTxToL2(\\n                _inbox,\\n                _to,\\n                _user,\\n                _l1CallValue,\\n                _l2CallValue,\\n                _l2GasParams._maxSubmissionCost,\\n                _l2GasParams._maxGas,\\n                _l2GasParams._gasPriceBid,\\n                _data\\n            );\\n    }\\n\\n    function sendTxToL2(\\n        address _inbox,\\n        address _to,\\n        address _user,\\n        uint256 _l1CallValue,\\n        uint256 _l2CallValue,\\n        uint256 _maxSubmissionCost,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes memory _data\\n    ) internal virtual returns (uint256) {\\n        uint256 seqNum = IInbox(_inbox).createRetryableTicket{ value: _l1CallValue }(\\n            _to,\\n            _l2CallValue,\\n            _maxSubmissionCost,\\n            _user,\\n            _user,\\n            _maxGas,\\n            _gasPriceBid,\\n            _data\\n        );\\n        emit TxToL2(_user, _to, seqNum, _data);\\n        return seqNum;\\n    }\\n\\n    function getBridge(address _inbox) internal view virtual returns (IBridge) {\\n        return IInbox(_inbox).bridge();\\n    }\\n\\n    /// @dev the l2ToL1Sender behaves as the tx.origin, the msg.sender should be validated to protect against reentrancies\\n    function getL2ToL1Sender(address _inbox) internal view virtual returns (address) {\\n        IOutbox outbox = IOutbox(getBridge(_inbox).activeOutbox());\\n        address l2ToL1Sender = outbox.l2ToL1Sender();\\n\\n        require(l2ToL1Sender != address(0), \\\"NO_SENDER\\\");\\n        return l2ToL1Sender;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokenbridge/libraries/gateway/GatewayRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"arb-bridge-eth/contracts/libraries/ProxyUtil.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./TokenGateway.sol\\\";\\nimport \\\"./GatewayMessageHandler.sol\\\";\\n\\n/**\\n * @title Common interface for L1 and L2 Gateway Routers\\n */\\nabstract contract GatewayRouter is TokenGateway {\\n    using Address for address;\\n\\n    address internal constant ZERO_ADDR = address(0);\\n    address internal constant DISABLED = address(1);\\n\\n    mapping(address => address) public l1TokenToGateway;\\n    address public defaultGateway;\\n\\n    event TransferRouted(\\n        address indexed token,\\n        address indexed _userFrom,\\n        address indexed _userTo,\\n        address gateway\\n    );\\n\\n    event GatewaySet(address indexed l1Token, address indexed gateway);\\n    event DefaultGatewayUpdated(address newDefaultGateway);\\n\\n    function postUpgradeInit() external {\\n        // it is assumed the L2 Arbitrum Gateway contract is behind a Proxy controlled by a proxy admin\\n        // this function can only be called by the proxy admin contract\\n        address proxyAdmin = ProxyUtil.getProxyAdmin();\\n        require(msg.sender == proxyAdmin, \\\"NOT_FROM_ADMIN\\\");\\n        // this has no other logic since the current upgrade doesn't require this logic\\n    }\\n\\n    function _initialize(\\n        address _counterpartGateway,\\n        address _router,\\n        address _defaultGateway\\n    ) internal {\\n        // if you are a router, you can't have a router\\n        require(_router == address(0), \\\"BAD_ROUTER\\\");\\n        TokenGateway._initialize(_counterpartGateway, _router);\\n        // default gateway can have 0 address\\n        defaultGateway = _defaultGateway;\\n    }\\n\\n    function finalizeInboundTransfer(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external payable virtual override returns (bytes memory) {\\n        revert(\\\"ONLY_OUTBOUND_ROUTER\\\");\\n    }\\n\\n    function outboundTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) public payable virtual override returns (bytes memory) {\\n        address gateway = getGateway(_token);\\n        bytes memory gatewayData = GatewayMessageHandler.encodeFromRouterToGateway(\\n            msg.sender,\\n            _data\\n        );\\n\\n        emit TransferRouted(_token, msg.sender, _to, gateway);\\n        return\\n            ITokenGateway(gateway).outboundTransfer{ value: msg.value }(\\n                _token,\\n                _to,\\n                _amount,\\n                _maxGas,\\n                _gasPriceBid,\\n                gatewayData\\n            );\\n    }\\n\\n    function getOutboundCalldata(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) public view virtual override returns (bytes memory) {\\n        address gateway = getGateway(_token);\\n        return TokenGateway(gateway).getOutboundCalldata(_token, _from, _to, _amount, _data);\\n    }\\n\\n    function getGateway(address _token) public view virtual returns (address gateway) {\\n        gateway = l1TokenToGateway[_token];\\n\\n        if (gateway == ZERO_ADDR) {\\n            // if no gateway value set, use default gateway\\n            gateway = defaultGateway;\\n        }\\n\\n        if (gateway == DISABLED || !gateway.isContract()) {\\n            // not a valid gateway\\n            return ZERO_ADDR;\\n        }\\n\\n        return gateway;\\n    }\\n\\n    function calculateL2TokenAddress(address l1ERC20)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        address gateway = getGateway(l1ERC20);\\n        if (gateway == ZERO_ADDR) {\\n            return ZERO_ADDR;\\n        }\\n        return TokenGateway(gateway).calculateL2TokenAddress(l1ERC20);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokenbridge/arbitrum/gateway/L2GatewayRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"../../libraries/gateway/GatewayRouter.sol\\\";\\nimport \\\"../../ethereum/gateway/L1GatewayRouter.sol\\\";\\nimport \\\"../L2ArbitrumMessenger.sol\\\";\\n\\n/**\\n * @title Handles withdrawals from Ethereum into Arbitrum. Tokens are routered to their appropriate L2 gateway (Router itself also conforms to the Gateway interface).\\n * @notice Router also serves as an L2-L1 token address oracle.\\n */\\ncontract L2GatewayRouter is GatewayRouter, L2ArbitrumMessenger {\\n    modifier onlyCounterpartGateway() override {\\n        require(\\n            msg.sender == counterpartGateway ||\\n                L2ArbitrumMessenger.getL1Address(msg.sender) == counterpartGateway,\\n            \\\"ONLY_COUNTERPART_GATEWAY\\\"\\n        );\\n        _;\\n    }\\n\\n    function initialize(address _counterpartGateway, address _defaultGateway) public {\\n        GatewayRouter._initialize(_counterpartGateway, address(0), _defaultGateway);\\n    }\\n\\n    function setGateway(address[] memory _l1Token, address[] memory _gateway)\\n        external\\n        onlyCounterpartGateway\\n    {\\n        // counterpart gateway (L1 router) should never allow wrong lengths\\n        assert(_l1Token.length == _gateway.length);\\n\\n        for (uint256 i = 0; i < _l1Token.length; i++) {\\n            l1TokenToGateway[_l1Token[i]] = _gateway[i];\\n            emit GatewaySet(_l1Token[i], _gateway[i]);\\n        }\\n    }\\n\\n    function outboundTransfer(\\n        address _l1Token,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) public payable returns (bytes memory) {\\n        return outboundTransfer(_l1Token, _to, _amount, 0, 0, _data);\\n    }\\n\\n    function setDefaultGateway(address newL2DefaultGateway) external onlyCounterpartGateway {\\n        defaultGateway = newL2DefaultGateway;\\n        emit DefaultGatewayUpdated(newL2DefaultGateway);\\n    }\\n}\\n\"\r\n    },\r\n    \"arb-bridge-eth/contracts/bridge/interfaces/IInbox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./IBridge.sol\\\";\\nimport \\\"./IMessageProvider.sol\\\";\\n\\ninterface IInbox is IMessageProvider {\\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\\n\\n    function sendUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendL1FundedUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function sendL1FundedContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function depositEth(uint256 maxSubmissionCost) external payable returns (uint256);\\n\\n    function bridge() external view returns (IBridge);\\n}\\n\"\r\n    },\r\n    \"arb-bridge-eth/contracts/bridge/interfaces/IOutbox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface IOutbox {\\n    event OutboxEntryCreated(\\n        uint256 indexed batchNum,\\n        uint256 outboxEntryIndex,\\n        bytes32 outputRoot,\\n        uint256 numInBatch\\n    );\\n    event OutBoxTransactionExecuted(\\n        address indexed destAddr,\\n        address indexed l2Sender,\\n        uint256 indexed outboxEntryIndex,\\n        uint256 transactionIndex\\n    );\\n\\n    function l2ToL1Sender() external view returns (address);\\n\\n    function l2ToL1Block() external view returns (uint256);\\n\\n    function l2ToL1EthBlock() external view returns (uint256);\\n\\n    function l2ToL1Timestamp() external view returns (uint256);\\n\\n    function l2ToL1BatchNum() external view returns (uint256);\\n\\n    function l2ToL1OutputId() external view returns (bytes32);\\n\\n    function processOutgoingMessages(bytes calldata sendsData, uint256[] calldata sendLengths)\\n        external;\\n\\n    function outboxEntryExists(uint256 batchNum) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"arb-bridge-eth/contracts/bridge/interfaces/IBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    );\\n\\n    event BridgeCallTriggered(\\n        address indexed outbox,\\n        address indexed destAddr,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    event InboxToggle(address indexed inbox, bool enabled);\\n\\n    event OutboxToggle(address indexed outbox, bool enabled);\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    // These are only callable by the admin\\n    function setInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    // View functions\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function messageCount() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"arb-bridge-eth/contracts/bridge/interfaces/IMessageProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface IMessageProvider {\\n    event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\\n\\n    event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\\n}\\n\"\r\n    },\r\n    \"arb-bridge-eth/contracts/libraries/ProxyUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nlibrary ProxyUtil {\\n    function getProxyAdmin() internal view returns (address admin) {\\n        // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/proxy/TransparentUpgradeableProxy.sol#L48\\n        // Storage slot with the admin of the proxy contract.\\n        // This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n        bytes32 slot = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n        assembly {\\n            admin := sload(slot)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokenbridge/libraries/gateway/TokenGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./ITokenGateway.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract TokenGateway is ITokenGateway {\\n    using Address for address;\\n\\n    address public counterpartGateway;\\n    address public router;\\n\\n    modifier onlyCounterpartGateway() virtual {\\n        // this method is overriden in gateways that require special logic for validation\\n        // ie L2 to L1 messages need to be validated against the outbox\\n        require(msg.sender == counterpartGateway, \\\"ONLY_COUNTERPART_GATEWAY\\\");\\n        _;\\n    }\\n\\n    function _initialize(address _counterpartGateway, address _router) internal virtual {\\n        // This initializes internal variables of the abstract contract it can be chained together with other functions.\\n        // It is virtual so subclasses can override or wrap around this logic.\\n        // An example where this is useful is different subclasses that validate the router address differently\\n        require(_counterpartGateway != address(0), \\\"INVALID_COUNTERPART\\\");\\n        require(counterpartGateway == address(0), \\\"ALREADY_INIT\\\");\\n        counterpartGateway = _counterpartGateway;\\n        router = _router;\\n    }\\n\\n    function isRouter(address _target) internal view returns (bool isTargetRouter) {\\n        return _target == router;\\n    }\\n\\n    /**\\n     * @notice Calculate the address used when bridging an ERC20 token\\n     * @dev the L1 and L2 address oracles may not always be in sync.\\n     * For example, a custom token may have been registered but not deploy or the contract self destructed.\\n     * @param l1ERC20 address of L1 token\\n     * @return L2 address of a bridged ERC20 token\\n     */\\n    function calculateL2TokenAddress(address l1ERC20)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address);\\n\\n    function outboundTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) external payable virtual override returns (bytes memory);\\n\\n    function getOutboundCalldata(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) public view virtual returns (bytes memory);\\n\\n    function finalizeInboundTransfer(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external payable virtual override returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/tokenbridge/libraries/gateway/GatewayMessageHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\n/// @notice this library manages encoding and decoding of gateway communication\\nlibrary GatewayMessageHandler {\\n    // these are for communication from L1 to L2 gateway\\n\\n    function encodeToL2GatewayMsg(bytes memory gatewayData, bytes memory callHookData)\\n        internal\\n        pure\\n        returns (bytes memory res)\\n    {\\n        res = abi.encode(gatewayData, callHookData);\\n    }\\n\\n    function parseFromL1GatewayMsg(bytes calldata _data)\\n        internal\\n        pure\\n        returns (bytes memory gatewayData, bytes memory callHookData)\\n    {\\n        // abi decode may revert, but the encoding is done by L1 gateway, so we trust it\\n        (gatewayData, callHookData) = abi.decode(_data, (bytes, bytes));\\n    }\\n\\n    // these are for communication from L2 to L1 gateway\\n\\n    function encodeFromL2GatewayMsg(uint256 exitNum, bytes memory callHookData)\\n        internal\\n        pure\\n        returns (bytes memory res)\\n    {\\n        res = abi.encode(exitNum, callHookData);\\n    }\\n\\n    function parseToL1GatewayMsg(bytes calldata _data)\\n        internal\\n        pure\\n        returns (uint256 exitNum, bytes memory callHookData)\\n    {\\n        // abi decode may revert, but the encoding is done by L1 gateway, so we trust it\\n        (exitNum, callHookData) = abi.decode(_data, (uint256, bytes));\\n    }\\n\\n    // these are for communication from router to gateway\\n\\n    function encodeFromRouterToGateway(address _from, bytes calldata _data)\\n        internal\\n        view\\n        returns (bytes memory res)\\n    {\\n        // abi decode may revert, but the encoding is done by L1 gateway, so we trust it\\n        return abi.encode(_from, _data);\\n    }\\n\\n    function parseFromRouterToGateway(bytes calldata _data)\\n        internal\\n        view\\n        returns (address, bytes memory res)\\n    {\\n        // abi decode may revert, but the encoding is done by L1 gateway, so we trust it\\n        return abi.decode(_data, (address, bytes));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokenbridge/libraries/gateway/ITokenGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface ITokenGateway {\\n    /// @notice event deprecated in favor of DepositInitiated and WithdrawalInitiated\\n    // event OutboundTransferInitiated(\\n    //     address token,\\n    //     address indexed _from,\\n    //     address indexed _to,\\n    //     uint256 indexed _transferId,\\n    //     uint256 _amount,\\n    //     bytes _data\\n    // );\\n\\n    /// @notice event deprecated in favor of DepositFinalized and WithdrawalFinalized\\n    // event InboundTransferFinalized(\\n    //     address token,\\n    //     address indexed _from,\\n    //     address indexed _to,\\n    //     uint256 indexed _transferId,\\n    //     uint256 _amount,\\n    //     bytes _data\\n    // );\\n\\n    function outboundTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) external payable returns (bytes memory);\\n\\n    function finalizeInboundTransfer(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external payable returns (bytes memory);\\n\\n    /**\\n     * @notice Calculate the address used when bridging an ERC20 token\\n     * @dev the L1 and L2 address oracles may not always be in sync.\\n     * For example, a custom token may have been registered but not deploy or the contract self destructed.\\n     * @param l1ERC20 address of L1 token\\n     * @return L2 address of a bridged ERC20 token\\n     */\\n    function calculateL2TokenAddress(address l1ERC20) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/tokenbridge/arbitrum/L2ArbitrumMessenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2020, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"arbos-contracts/arbos/builtin/ArbSys.sol\\\";\\n\\n/// @notice L2 utility contract to assist with L1 <=> L2 interactions\\n/// @dev this is an abstract contract instead of library so the functions can be easily overriden when testing\\nabstract contract L2ArbitrumMessenger {\\n    address internal constant ARB_SYS_ADDRESS = address(100);\\n\\n    event TxToL1(address indexed _from, address indexed _to, uint256 indexed _id, bytes _data);\\n\\n    function sendTxToL1(\\n        uint256 _l1CallValue,\\n        address _from,\\n        address _to,\\n        bytes memory _data\\n    ) internal virtual returns (uint256) {\\n        uint256 _id = ArbSys(ARB_SYS_ADDRESS).sendTxToL1{ value: _l1CallValue }(_to, _data);\\n        emit TxToL1(_from, _to, _id, _data);\\n        return _id;\\n    }\\n\\n    /// @notice Utility function that converts the msg.sender viewed in the L2 to the\\n    /// address in the L1 that submitted a tx to the inbox\\n    /// @param sender L2 address as viewed in msg.sender\\n    /// @return l1Address the address in the L1 that triggered the tx to L2\\n    function getL1Address(address sender) internal pure returns (address l1Address) {\\n        uint160 offset = uint160(0x1111000000000000000000000000000000001111);\\n        l1Address = address(uint160(sender) - offset);\\n    }\\n}\\n\"\r\n    },\r\n    \"arbos-contracts/arbos/builtin/ArbSys.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.21 <0.7.0;\\n\\n/**\\n* @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface ArbSys {\\n    /**\\n    * @notice Get internal version number identifying an ArbOS build\\n    * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns(uint);\\n\\n    /**\\n    * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n    * @return block number as int\\n     */ \\n    function arbBlockNumber() external view returns (uint);\\n\\n    /** \\n    * @notice Send given amount of Eth to dest from sender.\\n    * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n    * @param destination recipient address on L1\\n    * @return unique identifier for this L2-to-L1 transaction.\\n    */\\n    function withdrawEth(address destination) external payable returns(uint);\\n\\n    /** \\n    * @notice Send a transaction to L1\\n    * @param destination recipient address on L1 \\n    * @param calldataForL1 (optional) calldata for L1 contract call\\n    * @return a unique identifier for this L2-to-L1 transaction.\\n    */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns(uint);\\n\\n    /** \\n    * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n    * @param account target account\\n    * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n    */\\n    function getTransactionCount(address account) external view returns(uint256);\\n\\n    /**  \\n    * @notice get the value of target L2 storage slot \\n    * This function is only callable from address 0 to prevent contracts from being able to call it\\n    * @param account target account\\n    * @param index target index of storage slot \\n    * @return stotage value for the given account at the given index\\n    */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n    * @notice check if current call is coming from l1\\n    * @return true if the caller of this was called directly from L1\\n    */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    event L2ToL1Transaction(address caller, address indexed destination, uint indexed uniqueId,\\n                            uint indexed batchNumber, uint indexInBatch,\\n                            uint arbBlockNum, uint ethBlockNum, uint timestamp,\\n                            uint callvalue, bytes data);\\n}\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDefaultGateway\",\"type\":\"address\"}],\"name\":\"DefaultGatewayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"GatewaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"TransferRouted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_seqNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"TxToL2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSource\",\"type\":\"address\"}],\"name\":\"WhitelistSourceUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1ERC20\",\"type\":\"address\"}],\"name\":\"calculateL2TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterpartGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"finalizeInboundTransfer\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"getOutboundCalldata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultGateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_counterpartGateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"l1TokenToGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"outboundTransfer\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postUpgradeInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newL1DefaultGateway\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"setDefaultGateway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gateway\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creditBackAddress\",\"type\":\"address\"}],\"name\":\"setGateway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gateway\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"setGateway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_token\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_gateway\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCost\",\"type\":\"uint256\"}],\"name\":\"setGateways\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSource\",\"type\":\"address\"}],\"name\":\"updateWhitelistSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"L1GatewayRouter","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}