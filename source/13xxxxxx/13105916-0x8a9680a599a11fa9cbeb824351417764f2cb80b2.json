{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FujiAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IFujiAdmin.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\n\\ncontract FujiAdmin is IFujiAdmin, OwnableUpgradeable {\\n  address private _flasher;\\n  address private _fliquidator;\\n  address payable private _ftreasury;\\n  address private _controller;\\n  address private _vaultHarvester;\\n\\n  mapping(address => bool) public override validVault;\\n\\n  function initialize() external initializer {\\n    __Ownable_init();\\n  }\\n\\n  // Setter Functions\\n\\n  /**\\n   * @dev Sets the flasher contract address\\n   * @param _newFlasher: flasher address\\n   */\\n  function setFlasher(address _newFlasher) external onlyOwner {\\n    require(_newFlasher != address(0), Errors.VL_ZERO_ADDR);\\n    _flasher = _newFlasher;\\n  }\\n\\n  /**\\n   * @dev Sets the fliquidator contract address\\n   * @param _newFliquidator: new fliquidator address\\n   */\\n  function setFliquidator(address _newFliquidator) external onlyOwner {\\n    require(_newFliquidator != address(0), Errors.VL_ZERO_ADDR);\\n    _fliquidator = _newFliquidator;\\n  }\\n\\n  /**\\n   * @dev Sets the Treasury contract address\\n   * @param _newTreasury: new Fuji Treasury address\\n   */\\n  function setTreasury(address payable _newTreasury) external onlyOwner {\\n    require(_newTreasury != address(0), Errors.VL_ZERO_ADDR);\\n    _ftreasury = _newTreasury;\\n  }\\n\\n  /**\\n   * @dev Sets the controller contract address.\\n   * @param _newController: controller address\\n   */\\n  function setController(address _newController) external onlyOwner {\\n    require(_newController != address(0), Errors.VL_ZERO_ADDR);\\n    _controller = _newController;\\n  }\\n\\n  /**\\n   * @dev Sets the VaultHarvester address\\n   * @param _newVaultHarverster: controller address\\n   */\\n  function setVaultHarvester(address _newVaultHarverster) external onlyOwner {\\n    require(_newVaultHarverster != address(0), Errors.VL_ZERO_ADDR);\\n    _vaultHarvester = _newVaultHarverster;\\n  }\\n\\n  /**\\n   * @dev Adds a Vault.\\n   * @param _vaultAddr: Address of vault to be added\\n   */\\n  function allowVault(address _vaultAddr, bool _allowed) external onlyOwner {\\n    validVault[_vaultAddr] = _allowed;\\n  }\\n\\n  // Getter Functions\\n\\n  function getFlasher() external view override returns (address) {\\n    return _flasher;\\n  }\\n\\n  function getFliquidator() external view override returns (address) {\\n    return _fliquidator;\\n  }\\n\\n  function getTreasury() external view override returns (address payable) {\\n    return _ftreasury;\\n  }\\n\\n  function getController() external view override returns (address) {\\n    return _controller;\\n  }\\n\\n  function getVaultHarvester() external view override returns (address) {\\n    return _vaultHarvester;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFujiAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFujiAdmin {\\n  function validVault(address _vaultAddr) external view returns (bool);\\n\\n  function getFlasher() external view returns (address);\\n\\n  function getFliquidator() external view returns (address);\\n\\n  function getController() external view returns (address);\\n\\n  function getTreasury() external view returns (address payable);\\n\\n  function getVaultHarvester() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author Fuji\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = Validation Logic 100 series\\n *  - MATH = Math libraries 200 series\\n *  - RF = Refinancing 300 series\\n *  - VLT = vault 400 series\\n *  - SP = Special 900 series\\n */\\nlibrary Errors {\\n  //Errors\\n  string public constant VL_INDEX_OVERFLOW = \\\"100\\\"; // index overflows uint128\\n  string public constant VL_INVALID_MINT_AMOUNT = \\\"101\\\"; //invalid amount to mint\\n  string public constant VL_INVALID_BURN_AMOUNT = \\\"102\\\"; //invalid amount to burn\\n  string public constant VL_AMOUNT_ERROR = \\\"103\\\"; //Input value >0, and for ETH msg.value and amount shall match\\n  string public constant VL_INVALID_WITHDRAW_AMOUNT = \\\"104\\\"; //Withdraw amount exceeds provided collateral, or falls undercollaterized\\n  string public constant VL_INVALID_BORROW_AMOUNT = \\\"105\\\"; //Borrow amount does not meet collaterization\\n  string public constant VL_NO_DEBT_TO_PAYBACK = \\\"106\\\"; //Msg sender has no debt amount to be payback\\n  string public constant VL_MISSING_ERC20_ALLOWANCE = \\\"107\\\"; //Msg sender has not approved ERC20 full amount to transfer\\n  string public constant VL_USER_NOT_LIQUIDATABLE = \\\"108\\\"; //User debt position is not liquidatable\\n  string public constant VL_DEBT_LESS_THAN_AMOUNT = \\\"109\\\"; //User debt is less than amount to partial close\\n  string public constant VL_PROVIDER_ALREADY_ADDED = \\\"110\\\"; // Provider is already added in Provider Array\\n  string public constant VL_NOT_AUTHORIZED = \\\"111\\\"; //Not authorized\\n  string public constant VL_INVALID_COLLATERAL = \\\"112\\\"; //There is no Collateral, or Collateral is not in active in vault\\n  string public constant VL_NO_ERC20_BALANCE = \\\"113\\\"; //User does not have ERC20 balance\\n  string public constant VL_INPUT_ERROR = \\\"114\\\"; //Check inputs. For ERC1155 batch functions, array sizes should match.\\n  string public constant VL_ASSET_EXISTS = \\\"115\\\"; //Asset intended to be added already exists in FujiERC1155\\n  string public constant VL_ZERO_ADDR_1155 = \\\"116\\\"; //ERC1155: balance/transfer for zero address\\n  string public constant VL_NOT_A_CONTRACT = \\\"117\\\"; //Address is not a contract.\\n  string public constant VL_INVALID_ASSETID_1155 = \\\"118\\\"; //ERC1155 Asset ID is invalid.\\n  string public constant VL_NO_ERC1155_BALANCE = \\\"119\\\"; //ERC1155: insufficient balance for transfer.\\n  string public constant VL_MISSING_ERC1155_APPROVAL = \\\"120\\\"; //ERC1155: transfer caller is not owner nor approved.\\n  string public constant VL_RECEIVER_REJECT_1155 = \\\"121\\\"; //ERC1155Receiver rejected tokens\\n  string public constant VL_RECEIVER_CONTRACT_NON_1155 = \\\"122\\\"; //ERC1155: transfer to non ERC1155Receiver implementer\\n  string public constant VL_OPTIMIZER_FEE_SMALL = \\\"123\\\"; //Fuji OptimizerFee has to be > 1 RAY (1e27)\\n  string public constant VL_UNDERCOLLATERIZED_ERROR = \\\"124\\\"; // Flashloan-Flashclose cannot be used when User's collateral is worth less than intended debt position to close.\\n  string public constant VL_MINIMUM_PAYBACK_ERROR = \\\"125\\\"; // Minimum Amount payback should be at least Fuji Optimizerfee accrued interest.\\n  string public constant VL_HARVESTING_FAILED = \\\"126\\\"; // Harvesting Function failed, check provided _farmProtocolNum or no claimable balance.\\n  string public constant VL_FLASHLOAN_FAILED = \\\"127\\\"; // Flashloan failed\\n  string public constant VL_ERC1155_NOT_TRANSFERABLE = \\\"128\\\"; // ERC1155: Not Transferable\\n  string public constant VL_SWAP_SLIPPAGE_LIMIT_EXCEED = \\\"129\\\"; // ERC1155: Not Transferable\\n  string public constant VL_ZERO_ADDR = \\\"130\\\"; // Zero Address\\n\\n  string public constant MATH_DIVISION_BY_ZERO = \\\"201\\\";\\n  string public constant MATH_ADDITION_OVERFLOW = \\\"202\\\";\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = \\\"203\\\";\\n\\n  string public constant RF_INVALID_RATIO_VALUES = \\\"301\\\"; // Ratio Value provided is invalid, _ratioA/_ratioB <= 1, and > 0, or activeProvider borrowBalance = 0\\n\\n  string public constant VLT_CALLER_MUST_BE_VAULT = \\\"401\\\"; // The caller of this function must be a vault\\n\\n  string public constant ORACLE_INVALID_LENGTH = \\\"501\\\"; // The assets length and price feeds length doesn't match\\n  string public constant ORACLE_NONE_PRICE_FEED = \\\"502\\\"; // The price feed is not found\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"allowVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlasher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFliquidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultHarvester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFlasher\",\"type\":\"address\"}],\"name\":\"setFlasher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFliquidator\",\"type\":\"address\"}],\"name\":\"setFliquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newVaultHarverster\",\"type\":\"address\"}],\"name\":\"setVaultHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FujiAdmin","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}