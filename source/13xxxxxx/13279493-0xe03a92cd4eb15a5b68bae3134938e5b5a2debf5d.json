{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ForexVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/*                                                *\\\\\\n *                ,.-\\\"\\\"\\\"-.,                       *\\n *               /   ===   \\\\                      *\\n *              /  =======  \\\\                     *\\n *           __|  (o)   (0)  |__                  *\\n *          / _|    .---.    |_ \\\\                 *\\n *         | /.----/ O O \\\\----.\\\\ |                *\\n *          \\\\/     |     |     \\\\/                 *\\n *          |                   |                 *\\n *          |                   |                 *\\n *          |                   |                 *\\n *          _\\\\   -.,_____,.-   /_                 *\\n *      ,.-\\\"  \\\"-.,_________,.-\\\"  \\\"-.,             *\\n *     /          |       |  ╭-╮     \\\\            *\\n *    |           l.     .l  ┃ ┃      |           *\\n *    |            |     |   ┃ ╰━━╮   |           *\\n *    l.           |     |   ┃ ╭╮ ┃  .l           *\\n *     |           l.   .l   ┃ ┃┃ ┃  | \\\\,         *\\n *     l.           |   |    ╰-╯╰-╯ .l   \\\\,       *\\n *      |           |   |           |      \\\\,     *\\n *      l.          |   |          .l        |    *\\n *       |          |   |          |         |    *\\n *       |          |---|          |         |    *\\n *       |          |   |          |         |    *\\n *       /\\\"-.,__,.-\\\"\\\\   /\\\"-.,__,.-\\\"\\\\\\\"-.,_,.-\\\"\\\\    *\\n *      |            \\\\ /            |         |   *\\n *      |             |             |         |   *\\n *       \\\\__|__|__|__/ \\\\__|__|__|__/ \\\\_|__|__/    *\\n\\\\*                                                 */\\n\\ncontract ForexVesting is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    /** @dev Canonical FOREX token address */\\n    address public immutable FOREX;\\n    /** @dev The vesting period in seconds at which the FOREX supply for each\\n             participant is accrued as claimable each second according to their\\n             vested value */\\n    uint256 public immutable vestingPeriod;\\n    /** @dev Minimum delay (in seconds) between user claims. */\\n    uint256 public immutable minimumClaimDelay;\\n    /** @dev Date from which participants can claim their immediate value, and\\n             from which the vested value starts accruing as claimable */\\n    uint256 public claimStartDate;\\n    /** @dev Mapping of (participant address => participant vesting data) */\\n    mapping(address => Participant) public participants;\\n    /** @dev Total funds required by contract. Used for asserting the contract\\n             has been correctly funded after deployment */\\n    uint256 public immutable forexSupply;\\n\\n    /** @dev Vesting data for participant */\\n    struct Participant {\\n        /* Amount initially claimable at any time from the claimStartDate */\\n        uint256 claimable;\\n        /* Total vested amount released in equal amounts throughout the\\n                 vesting period. */\\n        uint256 vestedValue;\\n        /* Date at which the participant last claimed FOREX */\\n        uint256 lastClaimDate;\\n    }\\n\\n    event ParticipantAddressChanged(\\n        address indexed previous,\\n        address indexed current\\n    );\\n\\n    constructor(\\n        address _FOREX,\\n        uint256 _vestingPeriod,\\n        uint256 _minimumClaimDelay,\\n        address[] memory participantAddresses,\\n        uint256[] memory initiallyClaimable,\\n        uint256[] memory vestedValues\\n    ) {\\n        // Assert that the minimum claim delay is greater than zero seconds.\\n        assert(_minimumClaimDelay > 0);\\n        // Assert that the vesting period is a multiple of the minimum delay.\\n        assert(_vestingPeriod % _minimumClaimDelay == 0);\\n        // Assert all array lengths match.\\n        uint256 length = participantAddresses.length;\\n        assert(length == initiallyClaimable.length);\\n        assert(length == vestedValues.length);\\n        // Initialise immutable variables.\\n        FOREX = _FOREX;\\n        vestingPeriod = _vestingPeriod;\\n        minimumClaimDelay = _minimumClaimDelay;\\n        uint256 _forexSupply = 0;\\n        // Initialise participants mapping.\\n        for (uint256 i = 0; i < length; i++) {\\n            participants[participantAddresses[i]] = Participant({\\n                claimable: initiallyClaimable[i],\\n                vestedValue: vestedValues[i],\\n                lastClaimDate: 0\\n            });\\n            _forexSupply += initiallyClaimable[i] + vestedValues[i];\\n        }\\n        forexSupply = _forexSupply;\\n    }\\n\\n    /**\\n     * @dev Transfers claimable FOREX to participant.\\n     */\\n    function claim() external {\\n        require(isClaimable(), \\\"Funds not yet claimable\\\");\\n        Participant storage participant = participants[msg.sender];\\n        require(\\n            block.timestamp >= participant.lastClaimDate + minimumClaimDelay,\\n            \\\"Must wait before next claim\\\"\\n        );\\n        uint256 cutoffTime = getLastCutoffTime(msg.sender);\\n        uint256 claimable = _balanceOf(msg.sender, cutoffTime);\\n        if (claimable == 0) return;\\n        // Reset vesting period for accruing new FOREX.\\n        // This starts at the claim date and then is incremented in\\n        // a value multiple of minimumClaimDelay.\\n        participant.lastClaimDate = cutoffTime;\\n        // Clear initial claimable amount if claiming for the first time.\\n        if (participant.claimable > 0) participant.claimable = 0;\\n        // Transfer tokens.\\n        IERC20(FOREX).safeTransfer(msg.sender, claimable);\\n    }\\n\\n    /**\\n     * @dev Returns the last valid claim date for a participant.\\n     *      The difference between this value and the participant's\\n     *      last claim date is the actual claimable amount that\\n     *      can be transferred so that the minimum delay also enforces\\n     *      a minimum FOREX claim granularity.\\n     * @param account The participant account to fetch the cutoff time for.\\n     */\\n    function getLastCutoffTime(address account) public view returns (uint256) {\\n        Participant storage participant = participants[account];\\n        uint256 lastClaimDate = getParticipantLastClaimDate(participant);\\n        uint256 elapsed = block.timestamp - lastClaimDate;\\n        uint256 remainder = elapsed % minimumClaimDelay;\\n        if (elapsed > remainder) {\\n            // At least one cutoff time has passed.\\n            return lastClaimDate + elapsed - remainder;\\n        } else {\\n            // Next cutoff time not yet reached.\\n            return lastClaimDate;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the parsed last claim date for a participant.\\n     *      Instead of returning the default date of zero, it returns\\n     *      the claim start date.\\n     * @param participant The storage pointer to a participant.\\n     */\\n    function getParticipantLastClaimDate(Participant storage participant)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            participant.lastClaimDate > claimStartDate\\n                ? participant.lastClaimDate\\n                : claimStartDate;\\n    }\\n\\n    /**\\n     * @dev Returns the accrued FOREX balance for an participant.\\n     *      This amount may not be fully claimable yet.\\n     * @param account The participant to fetch the balance for.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balanceOf(account, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Returns the claimable FOREX balance for an participant.\\n     * @param account The participant to fetch the balance for.\\n     * @param cutoffTime The time to fetch the balance from.\\n     */\\n    function _balanceOf(address account, uint256 cutoffTime)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (!isClaimable()) return 0;\\n        Participant storage participant = participants[account];\\n        uint256 lastClaimed = getParticipantLastClaimDate(participant);\\n        uint256 vestingCompleteDate = claimStartDate + vestingPeriod;\\n        // Prevent elapsed from passing the vestingPeriod value.\\n        uint256 elapsed = cutoffTime > vestingCompleteDate\\n            ? vestingCompleteDate - lastClaimed\\n            : cutoffTime - lastClaimed;\\n        uint256 accrued = (participant.vestedValue * elapsed) / vestingPeriod;\\n        return participant.claimable + accrued;\\n    }\\n\\n    /**\\n     * @dev Withdraws FOREX for the contract owner.\\n     * @param amount The amount of FOREX to withdraw.\\n     */\\n    function withdrawForex(uint256 amount) external onlyOwner {\\n        IERC20(FOREX).safeTransfer(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Changes the address for a participant. The new address\\n     *      will be eligible to claim the currently claimable funds\\n     *      from the previous address, plus all the accrued funds\\n     *      until the end of the vesting period.\\n     * @param previous The previous participant address to be changed.\\n     * @param current The current participant address to be eligible for claims.\\n     */\\n    function changeParticipantAddress(address previous, address current)\\n        external\\n        onlyOwner\\n    {\\n        require(current != address(0), \\\"Current address cannot be zero\\\");\\n        require(previous != current, \\\"Addresses are the same\\\");\\n        Participant storage previousParticipant = participants[previous];\\n        require(\\n            doesParticipantExist(previousParticipant),\\n            \\\"Previous participant does not exist\\\"\\n        );\\n        Participant storage currentParticipant = participants[current];\\n        require(\\n            !doesParticipantExist(currentParticipant),\\n            \\\"Next participant already exists\\\"\\n        );\\n        currentParticipant.claimable = previousParticipant.claimable;\\n        currentParticipant.vestedValue = previousParticipant.vestedValue;\\n        currentParticipant.lastClaimDate = previousParticipant.lastClaimDate;\\n        delete participants[previous];\\n        emit ParticipantAddressChanged(previous, current);\\n    }\\n\\n    /**\\n     * @dev Returns whether the participant exists.\\n     * @param participant Pointer to the participant object.\\n     */\\n    function doesParticipantExist(Participant storage participant)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return participant.claimable > 0 || participant.vestedValue > 0;\\n    }\\n\\n    /**\\n     * @dev Enables FOREX claiming from the next block.\\n     *      Can only be called once.\\n     */\\n    function enableForexClaims() public onlyOwner {\\n        assert(claimStartDate == 0);\\n        claimStartDate = block.timestamp + 1;\\n    }\\n\\n    /**\\n     * Returns whether the contract is currently claimable.\\n     */\\n    function isClaimable() private view returns (bool) {\\n        return claimStartDate != 0 && block.timestamp >= claimStartDate;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_FOREX\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumClaimDelay\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"participantAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"initiallyClaimable\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"vestedValues\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"ParticipantAddressChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FOREX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cutoffTime\",\"type\":\"uint256\"}],\"name\":\"_balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"changeParticipantAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableForexClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forexSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLastCutoffTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumClaimDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawForex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ForexVesting","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}