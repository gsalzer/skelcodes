{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/lbp/LBPManagerFactory.sol\": {\r\n      \"content\": \"/*\\n\\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\\n\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n// LBPManager Factory contract. Governance to create new LBPManager contracts.\\n// Copyright (C) 2021 PrimeDao\\n\\n// solium-disable linebreak-style\\npragma solidity 0.8.9;\\n\\nimport \\\"../utils/CloneFactory.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\nimport \\\"./LBPManager.sol\\\";\\n\\n/**\\n * @title LBPManager Factory\\n * @dev   Governance to create new LBPManager contracts.\\n */\\ncontract LBPManagerFactory is CloneFactory, Ownable {\\n    address public masterCopy;\\n    address public lbpFactory;\\n\\n    event LBPManagerDeployed(\\n        address indexed lbpManager,\\n        address indexed admin,\\n        bytes metadata\\n    );\\n\\n    event LBPFactoryChanged(\\n        address indexed oldLBPFactory,\\n        address indexed newLBPFactory\\n    );\\n\\n    event MastercopyChanged(\\n        address indexed oldMasterCopy,\\n        address indexed newMasterCopy\\n    );\\n\\n    /**\\n     * @dev                             Constructor.\\n     * @param _lbpFactory               The address of Balancers LBP factory.\\n     */\\n    constructor(address _lbpFactory) {\\n        require(_lbpFactory != address(0), \\\"LBPMFactory: LBPFactory is zero\\\");\\n        lbpFactory = _lbpFactory;\\n    }\\n\\n    modifier validAddress(address addressToCheck) {\\n        require(addressToCheck != address(0), \\\"LBPMFactory: address is zero\\\");\\n        // solhint-disable-next-line reason-string\\n        require(\\n            addressToCheck != address(this),\\n            \\\"LBPMFactory: address same as LBPManagerFactory\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev                             Set LBPManager contract which works as a base for clones.\\n     * @param _masterCopy               The address of the new LBPManager basis.\\n     */\\n    function setMasterCopy(address _masterCopy)\\n        external\\n        onlyOwner\\n        validAddress(_masterCopy)\\n    {\\n        emit MastercopyChanged(masterCopy, _masterCopy);\\n        masterCopy = _masterCopy;\\n    }\\n\\n    /**\\n     * @dev                             Set Balancers LBP Factory contract as basis for deploying LBPs.\\n     * @param _lbpFactory               The address of Balancers LBP factory.\\n     */\\n    function setLBPFactory(address _lbpFactory)\\n        external\\n        onlyOwner\\n        validAddress(_lbpFactory)\\n    {\\n        emit LBPFactoryChanged(lbpFactory, _lbpFactory);\\n        lbpFactory = _lbpFactory;\\n    }\\n\\n    /**\\n     * @dev                             Deploy and initialize LBPManager.\\n     * @param _admin                    The address of the admin of the LBPManager.\\n     * @param _beneficiary              The address that receives the _fees.\\n     * @param _name                     Name of the LBP.\\n     * @param _symbol                   Symbol of the LBP.\\n     * @param _tokenList                Numerically sorted array (ascending) containing two addresses:\\n                                            - The address of the project token being distributed.\\n                                            - The address of the funding token being exchanged for the project token.\\n     * @param _amounts                  Sorted array to match the _tokenList, containing two parameters:\\n                                            - The amounts of project token to be added as liquidity to the LBP.\\n                                            - The amounts of funding token to be added as liquidity to the LBP.\\n     * @param _startWeights                  Sorted array to match the _tokenList, containing two parametes:\\n                                            - The start weight for the project token in the LBP.\\n                                            - The start weight for the funding token in the LBP.\\n     * @param _startTimeEndtime         Array containing two parameters:\\n                                            - Start time for the LBP.\\n                                            - End time for the LBP.\\n     * @param _endWeights               Sorted array to match the _tokenList, containing two parametes:\\n                                            - The end weight for the project token in the LBP.\\n                                            - The end weight for the funding token in the LBP.\\n     * @param _fees                     Array containing two parameters:\\n                                            - Percentage of fee paid for every swap in the LBP.\\n                                            - Percentage of fee paid to the _beneficiary for providing the service of the LBP Manager.\\n     * @param _metadata                 IPFS Hash of the LBP creation wizard information.\\n     */\\n    function deployLBPManager(\\n        address _admin,\\n        address _beneficiary,\\n        string memory _name,\\n        string memory _symbol,\\n        IERC20[] memory _tokenList,\\n        uint256[] memory _amounts,\\n        uint256[] memory _startWeights,\\n        uint256[] memory _startTimeEndtime,\\n        uint256[] memory _endWeights,\\n        uint256[] memory _fees,\\n        bytes memory _metadata\\n    ) external onlyOwner {\\n        // solhint-disable-next-line reason-string\\n        require(\\n            masterCopy != address(0),\\n            \\\"LBPMFactory: LBPManager mastercopy not set\\\"\\n        );\\n\\n        address lbpManager = createClone(masterCopy);\\n\\n        LBPManager(lbpManager).initializeLBPManager(\\n            lbpFactory,\\n            _beneficiary,\\n            _name,\\n            _symbol,\\n            _tokenList,\\n            _amounts,\\n            _startWeights,\\n            _startTimeEndtime,\\n            _endWeights,\\n            _fees,\\n            _metadata\\n        );\\n\\n        LBPManager(lbpManager).transferAdminRights(_admin);\\n\\n        emit LBPManagerDeployed(lbpManager, _admin, _metadata);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/CloneFactory.sol\": {\r\n      \"content\": \"/*\\n\\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\\n\\n* ===========\\n*\\n* CloneFactory.sol was originally published under MIT license.\\n* Republished by PrimeDAO under GNU General Public License v3.0.\\n*\\n*/\\n\\n/*\\nThe MIT License (MIT)\\nCopyright (c) 2018 Murray Software, LLC.\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n// solium-disable linebreak-style\\n// solhint-disable max-line-length\\n// solhint-disable no-inline-assembly\\n\\npragma solidity 0.8.9;\\n\\ncontract CloneFactory {\\n    function createClone(address target) internal returns (address result) {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(\\n                clone,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(\\n                add(clone, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n            result := create(0, clone, 0x37)\\n        }\\n    }\\n\\n    function isClone(address target, address query)\\n        internal\\n        view\\n        returns (bool result)\\n    {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(\\n                clone,\\n                0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000\\n            )\\n            mstore(add(clone, 0xa), targetBytes)\\n            mstore(\\n                add(clone, 0x1e),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n\\n            let other := add(clone, 0x40)\\n            extcodecopy(query, other, 0, 0x2d)\\n            result := and(\\n                eq(mload(clone), mload(other)),\\n                eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\\n            )\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lbp/LBPManager.sol\": {\r\n      \"content\": \"/*\\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n// LBPManager contract. Smart contract for managing interactions with a Balancer LBP.\\n// Copyright (C) 2021 PrimeDao\\n\\n// solium-disable linebreak-style\\npragma solidity 0.8.9;\\n\\nimport \\\"openzeppelin-contracts-sol8/token/ERC20/IERC20.sol\\\";\\nimport \\\"../utils/interface/ILBPFactory.sol\\\";\\nimport \\\"../utils/interface/IVault.sol\\\";\\nimport \\\"../utils/interface/ILBP.sol\\\";\\n\\n/**\\n * @title LBPManager contract.\\n * @dev   Smart contract for managing interactions with a Balancer LBP.\\n */\\n// solhint-disable-next-line max-states-count\\ncontract LBPManager {\\n    // Constants\\n    uint256 private constant HUNDRED_PERCENT = 1e18; // Used in calculating the fee.\\n\\n    // Locked parameter\\n    string public symbol; // Symbol of the LBP.\\n    string public name; // Name of the LBP.\\n    address public admin; // Address of the admin of this contract.\\n    address public beneficiary; // Address that recieves fees.\\n    uint256 public feePercentage; // Fee expressed as a % (e.g. 10**18 = 100% fee, toWei('1') = 100%, 1e18)\\n    uint256 public swapFeePercentage; // Percentage of fee paid for every swap in the LBP.\\n    IERC20[] public tokenList; // Tokens that are used in the LBP, sorted by address in numerical order (ascending).\\n    uint256[] public amounts; // Amount of tokens to be added as liquidity in LBP.\\n    uint256[] public startWeights; // Array containing the startWeights for the project & funding token.\\n    uint256[] public endWeights; // Array containing the endWeights for the project & funding token.\\n    uint256[] public startTimeEndTime; // Array containing the startTime and endTime for the LBP.\\n    ILBP public lbp; // Address of LBP that is managed by this contract.\\n    bytes public metadata; // IPFS Hash of the LBP creation wizard information.\\n    uint8 public projectTokenIndex; // Index repesenting the project token in the tokenList.\\n    address public lbpFactory; // Address of Balancers LBP factory.\\n\\n    // Contract logic\\n    bool public poolFunded; // true:- LBP is funded; false:- LBP is not funded.\\n    bool public initialized; // true:- LBPManager initialized; false:- LBPManager not initialized. Makes sure, only initialized once.\\n\\n    event LBPManagerAdminChanged(\\n        address indexed oldAdmin,\\n        address indexed newAdmin\\n    );\\n    event FeeTransferred(\\n        address indexed beneficiary,\\n        address tokenAddress,\\n        uint256 amount\\n    );\\n    event PoolTokensWithdrawn(address indexed lbpAddress, uint256 amount);\\n    event MetadataUpdated(bytes indexed metadata);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"LBPManager: caller is not admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev                             Transfer admin rights.\\n     * @param _newAdmin                 Address of the new admin.\\n     */\\n    function transferAdminRights(address _newAdmin) external onlyAdmin {\\n        require(_newAdmin != address(0), \\\"LBPManager: new admin is zero\\\");\\n\\n        emit LBPManagerAdminChanged(admin, _newAdmin);\\n        admin = _newAdmin;\\n    }\\n\\n    /**\\n     * @dev                             Initialize LBPManager.\\n     * @param _lbpFactory               LBP factory address.\\n     * @param _beneficiary              The address that receives the feePercentage.\\n     * @param _name                     Name of the LBP.\\n     * @param _symbol                   Symbol of the LBP.\\n     * @param _tokenList                Array containing two addresses in order of:\\n                                            1. The address of the project token being distributed.\\n                                            2. The address of the funding token being exchanged for the project token.\\n     * @param _amounts                  Array containing two parameters in order of:\\n                                            1. The amounts of project token to be added as liquidity to the LBP.\\n                                            2. The amounts of funding token to be added as liquidity to the LBP.\\n     * @param _startWeights             Array containing two parametes in order of:\\n                                            1. The start weight for the project token in the LBP.\\n                                            2. The start weight for the funding token in the LBP.\\n     * @param _startTimeEndTime         Array containing two parameters in order of:\\n                                            1. Start time for the LBP.\\n                                            2. End time for the LBP.\\n     * @param _endWeights               Array containing two parametes in order of:\\n                                            1. The end weight for the project token in the LBP.\\n                                            2. The end weight for the funding token in the LBP.\\n    * @param _fees                      Array containing two parameters in order of:\\n                                            1. Percentage of fee paid for every swap in the LBP.\\n                                            2. Percentage of fee paid to the _beneficiary for providing the service of the LBP Manager.\\n     * @param _metadata                 IPFS Hash of the LBP creation wizard information.\\n     */\\n    function initializeLBPManager(\\n        address _lbpFactory,\\n        address _beneficiary,\\n        string memory _name,\\n        string memory _symbol,\\n        IERC20[] memory _tokenList,\\n        uint256[] memory _amounts,\\n        uint256[] memory _startWeights,\\n        uint256[] memory _startTimeEndTime,\\n        uint256[] memory _endWeights,\\n        uint256[] memory _fees,\\n        bytes memory _metadata\\n    ) external {\\n        require(!initialized, \\\"LBPManager: already initialized\\\");\\n        require(_beneficiary != address(0), \\\"LBPManager: _beneficiary is zero\\\");\\n        // solhint-disable-next-line reason-string\\n        require(_fees[0] >= 1e12, \\\"LBPManager: swapFeePercentage to low\\\"); // 0.0001%\\n        // solhint-disable-next-line reason-string\\n        require(_fees[0] <= 1e17, \\\"LBPManager: swapFeePercentage to high\\\"); // 10%\\n        require(\\n            _tokenList.length == 2 &&\\n                _amounts.length == 2 &&\\n                _startWeights.length == 2 &&\\n                _startTimeEndTime.length == 2 &&\\n                _endWeights.length == 2 &&\\n                _fees.length == 2,\\n            \\\"LBPManager: arrays wrong size\\\"\\n        );\\n        require(\\n            _tokenList[0] != _tokenList[1],\\n            \\\"LBPManager: tokens can't be same\\\"\\n        );\\n        require(\\n            _startTimeEndTime[0] < _startTimeEndTime[1],\\n            \\\"LBPManager: startTime > endTime\\\"\\n        );\\n\\n        initialized = true;\\n        admin = msg.sender;\\n        swapFeePercentage = _fees[0];\\n        feePercentage = _fees[1];\\n        beneficiary = _beneficiary;\\n        metadata = _metadata;\\n        startTimeEndTime = _startTimeEndTime;\\n        name = _name;\\n        symbol = _symbol;\\n        lbpFactory = _lbpFactory;\\n\\n        // Token addresses are sorted in numerical order (ascending) as specified by Balancer\\n        if (address(_tokenList[0]) > address(_tokenList[1])) {\\n            projectTokenIndex = 1;\\n            tokenList.push(_tokenList[1]);\\n            tokenList.push(_tokenList[0]);\\n\\n            amounts.push(_amounts[1]);\\n            amounts.push(_amounts[0]);\\n\\n            startWeights.push(_startWeights[1]);\\n            startWeights.push(_startWeights[0]);\\n\\n            endWeights.push(_endWeights[1]);\\n            endWeights.push(_endWeights[0]);\\n        } else {\\n            projectTokenIndex = 0;\\n            tokenList = _tokenList;\\n            amounts = _amounts;\\n            startWeights = _startWeights;\\n            endWeights = _endWeights;\\n        }\\n    }\\n\\n    /**\\n     * @dev                             Subtracts the fee, deploys the LBP and adds liquidity to it.\\n     * @param _sender                   Address of the liquidity provider.\\n     */\\n    function initializeLBP(address _sender) external onlyAdmin {\\n        // solhint-disable-next-line reason-string\\n        require(initialized == true, \\\"LBPManager: LBPManager not initialized\\\");\\n        require(!poolFunded, \\\"LBPManager: pool already funded\\\");\\n        poolFunded = true;\\n\\n        lbp = ILBP(\\n            ILBPFactory(lbpFactory).create(\\n                name,\\n                symbol,\\n                tokenList,\\n                startWeights,\\n                swapFeePercentage,\\n                address(this),\\n                true // SwapEnabled is set to true at pool creation.\\n            )\\n        );\\n\\n        lbp.updateWeightsGradually(\\n            startTimeEndTime[0],\\n            startTimeEndTime[1],\\n            endWeights\\n        );\\n\\n        IVault vault = lbp.getVault();\\n\\n        if (feePercentage != 0) {\\n            // Transfer fee to beneficiary.\\n            uint256 feeAmountRequired = _feeAmountRequired();\\n            tokenList[projectTokenIndex].transferFrom(\\n                _sender,\\n                beneficiary,\\n                feeAmountRequired\\n            );\\n            emit FeeTransferred(\\n                beneficiary,\\n                address(tokenList[projectTokenIndex]),\\n                feeAmountRequired\\n            );\\n        }\\n\\n        for (uint8 i; i < tokenList.length; i++) {\\n            tokenList[i].transferFrom(_sender, address(this), amounts[i]);\\n            tokenList[i].approve(address(vault), amounts[i]);\\n        }\\n\\n        IVault.JoinPoolRequest memory request = IVault.JoinPoolRequest({\\n            maxAmountsIn: amounts,\\n            userData: abi.encode(0, amounts), // JOIN_KIND_INIT = 0, used when adding liquidity for the first time.\\n            fromInternalBalance: false, // It is not possible to add liquidity through the internal Vault balance.\\n            assets: tokenList\\n        });\\n\\n        vault.joinPool(lbp.getPoolId(), address(this), address(this), request);\\n    }\\n\\n    /**\\n     * @dev                             Exit pool or remove liquidity from pool.\\n     * @param _receiver                 Address of the liquidity receiver, after exiting the LBP.\\n     */\\n    function removeLiquidity(address _receiver) external onlyAdmin {\\n        require(_receiver != address(0), \\\"LBPManager: receiver is zero\\\");\\n        require(\\n            lbp.balanceOf(address(this)) > 0,\\n            \\\"LBPManager: no BPT token balance\\\"\\n        );\\n\\n        uint256 endTime = startTimeEndTime[1];\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp >= endTime, \\\"LBPManager: endtime not reached\\\");\\n\\n        IVault vault = lbp.getVault();\\n\\n        IVault.ExitPoolRequest memory request = IVault.ExitPoolRequest({\\n            minAmountsOut: new uint256[](tokenList.length), // To remove all funding from the pool. Initializes to [0, 0]\\n            userData: abi.encode(1, lbp.balanceOf(address(this))),\\n            toInternalBalance: false,\\n            assets: tokenList\\n        });\\n\\n        vault.exitPool(\\n            lbp.getPoolId(),\\n            address(this),\\n            payable(_receiver),\\n            request\\n        );\\n    }\\n\\n    /*\\n        DISCLAIMER:\\n        The method below is an advanced functionality. By invoking this method, you are withdrawing\\n        the BPT tokens, which are necessary to exit the pool. If you chose to remove the BPT tokens,\\n        the LBPManager will no longer be able to remove liquidity. By withdrawing the BPT tokens\\n        you agree on removing all the responsibility from the LBPManger for removing liquidity from\\n        the pool and transferring this responsibility to the holder of the BPT tokens. Any possible\\n        loss of funds by choosing to withdraw the BPT tokens is not the responsibility of\\n        LBPManager or PrimeDao. After withdrawing the BPT tokens, liquidity has to be withdrawn\\n        directly from Balancer's LBP. LBPManager or PrimeDAO will no longer provide support to do so.\\n    */\\n    /**\\n     * @dev                             Withdraw pool tokens if available.\\n     * @param _receiver                 Address of the BPT tokens receiver.\\n     */\\n    function withdrawPoolTokens(address _receiver) external onlyAdmin {\\n        require(_receiver != address(0), \\\"LBPManager: receiver is zero\\\");\\n\\n        uint256 endTime = startTimeEndTime[1];\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp >= endTime, \\\"LBPManager: endtime not reached\\\");\\n\\n        require(\\n            lbp.balanceOf(address(this)) > 0,\\n            \\\"LBPManager: no BPT token balance\\\"\\n        );\\n\\n        emit PoolTokensWithdrawn(address(lbp), lbp.balanceOf(address(this)));\\n        lbp.transfer(_receiver, lbp.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @dev                             Can pause/unpause trading.\\n     * @param _swapEnabled              Enables/disables swapping.\\n     */\\n    function setSwapEnabled(bool _swapEnabled) external onlyAdmin {\\n        lbp.setSwapEnabled(_swapEnabled);\\n    }\\n\\n    /**\\n     * @dev                              Tells whether swaps are enabled or not for the LBP\\n     */\\n    function getSwapEnabled() external view returns (bool) {\\n        return lbp.getSwapEnabled();\\n    }\\n\\n    /**\\n     * @dev             Get required amount of project tokens to cover for fees and the actual LBP.\\n     */\\n    function projectTokensRequired()\\n        external\\n        view\\n        returns (uint256 projectTokenAmounts)\\n    {\\n        projectTokenAmounts = amounts[projectTokenIndex] + _feeAmountRequired();\\n    }\\n\\n    /**\\n     * @dev                             Updates metadata.\\n     * @param _metadata                 LBP wizard contract metadata, that is an IPFS Hash.\\n     */\\n    function updateMetadata(bytes memory _metadata) external onlyAdmin {\\n        metadata = _metadata;\\n        emit MetadataUpdated(_metadata);\\n    }\\n\\n    /**\\n     * @dev             Get required amount of project tokens to cover for fees.\\n     */\\n    function _feeAmountRequired() internal view returns (uint256 feeAmount) {\\n        feeAmount =\\n            (amounts[projectTokenIndex] * feePercentage) /\\n            HUNDRED_PERCENT;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-sol8/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/interface/ILBPFactory.sol\": {\r\n      \"content\": \"/*\\n\\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\\n\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/* solium-disable */\\npragma solidity 0.8.9;\\n\\nimport \\\"openzeppelin-contracts-sol8/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILBPFactory {\\n    function create(\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        uint256[] memory weights,\\n        uint256 swapFeePercentage,\\n        address owner,\\n        bool swapEnabledOnStart\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/interface/IVault.sol\": {\r\n      \"content\": \"/*\\n\\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\\n\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/* solium-disable */\\npragma solidity 0.8.9;\\n\\nimport \\\"openzeppelin-contracts-sol8/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVault {\\n    struct JoinPoolRequest {\\n        IERC20[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    struct ExitPoolRequest {\\n        IERC20[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/interface/ILBP.sol\": {\r\n      \"content\": \"/*\\n\\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\\n\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\n/* solium-disable */\\n\\nimport \\\"openzeppelin-contracts-sol8/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IVault.sol\\\";\\n\\npragma solidity 0.8.9;\\n\\ninterface ILBP is IERC20 {\\n    function updateWeightsGradually(\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256[] memory endWeights\\n    ) external;\\n\\n    function getGradualWeightUpdateParams()\\n        external\\n        view\\n        returns (\\n            uint256 startTime,\\n            uint256 endTime,\\n            uint256[] memory endWeights\\n        );\\n\\n    function getPoolId() external view returns (bytes32);\\n\\n    function getVault() external view returns (IVault);\\n\\n    function setSwapEnabled(bool swapEnabled) external;\\n\\n    function getSwapEnabled() external view returns (bool);\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lbpFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLBPFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLBPFactory\",\"type\":\"address\"}],\"name\":\"LBPFactoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lbpManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"LBPManagerDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMasterCopy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMasterCopy\",\"type\":\"address\"}],\"name\":\"MastercopyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_startWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_startTimeEndtime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_endWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"}],\"name\":\"deployLBPManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lbpFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterCopy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lbpFactory\",\"type\":\"address\"}],\"name\":\"setLBPFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"}],\"name\":\"setMasterCopy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LBPManagerFactory","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000751a0bc0e3f75b38e01cf25bfce7ff36de1c87de","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}