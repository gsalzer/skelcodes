{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/contracts/Bridge.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.8.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"../interfaces/IBridgeInbound.sol\\\";\\r\\nimport \\\"../interfaces/IBridgeOutbound.sol\\\";\\r\\nimport \\\"../interfaces/IMintableBurnableERC20.sol\\\";\\r\\nimport \\\"../interfaces/IRegistry.sol\\\";\\r\\nimport \\\"../interfaces/IFederation.sol\\\";\\r\\nimport \\\"../libraries/Utils.sol\\\";\\r\\n\\r\\ncontract Bridge is\\r\\n    IBridgeInbound,\\r\\n    IBridgeOutbound,\\r\\n    OwnableUpgradeable,\\r\\n    PausableUpgradeable,\\r\\n    ReentrancyGuardUpgradeable {\\r\\n    using Utils for *;\\r\\n    using SafeERC20Upgradeable for IMintableBurnableERC20;\\r\\n    using AddressUpgradeable for address;\\r\\n\\r\\n    IRegistry public tokenRegistry;\\r\\n    IFederation public override federation;\\r\\n\\r\\n    mapping(bytes32 => uint256) public override processed;\\r\\n\\r\\n    function initialize(address tokenRegistry_) public initializer {\\r\\n        PausableUpgradeable.__Pausable_init();\\r\\n        OwnableUpgradeable.__Ownable_init();\\r\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\r\\n        tokenRegistry = IRegistry(tokenRegistry_);\\r\\n    }\\r\\n\\r\\n    function setFederation(address federation_) external onlyOwner {\\r\\n        require(federation_.isContract(), \\\"input not contract addr\\\");\\r\\n        federation = IFederation(federation_);\\r\\n    }\\r\\n\\r\\n    function isTransferProcessed(\\r\\n        uint256 srcChainID_,\\r\\n        address srcChainTokenAddress_,\\r\\n        address dstChainTokenAddress_,\\r\\n        address receiver_,\\r\\n        uint256 amount_,\\r\\n        bytes32 transactionHash_,\\r\\n        uint32 logIndex_\\r\\n    ) external view override returns(bool) {\\r\\n        return processed[Utils.getTransferId(\\r\\n            srcChainID_,\\r\\n            srcChainTokenAddress_,\\r\\n            dstChainTokenAddress_,\\r\\n            receiver_,\\r\\n            amount_,\\r\\n            transactionHash_,\\r\\n            logIndex_\\r\\n        )] > 0;\\r\\n    }\\r\\n    // function isCallProcessed(\\r\\n    //     uint256 srcChainID_,\\r\\n    //     address srcChainTokenAddress_,\\r\\n    //     address dstChainTokenAddress_,\\r\\n    //     bytes32 transactionHash_,\\r\\n    //     uint32 logIndex_,\\r\\n    //     bytes calldata payload\\r\\n    // ) external view override returns(bool) {\\r\\n    //     return processed[Utils.getCallId(\\r\\n    //         srcChainID_,\\r\\n    //         srcChainTokenAddress_,\\r\\n    //         dstChainTokenAddress_,\\r\\n    //         transactionHash_,\\r\\n    //         logIndex_,\\r\\n    //         payload\\r\\n    //     )] > 0;\\r\\n    // }\\r\\n\\r\\n    function acceptTransfer(\\r\\n        uint256 srcChainID_,\\r\\n        address srcChainTokenAddress_,\\r\\n        address dstChainTokenAddress_,\\r\\n        address receiver_,\\r\\n        uint256 amount_,\\r\\n        bytes32 transactionHash_,\\r\\n        uint32 logIndex_\\r\\n    ) external override onlyFederation {\\r\\n        require(dstChainTokenAddress_ != address(0), \\\"Bridge: destination chain token address is null\\\");\\r\\n        require(srcChainTokenAddress_ != address(0), \\\"Bridge: src chain token address is null\\\");\\r\\n        require(receiver_ != address(0), \\\"Bridge: Receiver is null\\\");\\r\\n        require(amount_ > 0, \\\"Bridge: Amount 0\\\");\\r\\n        require(transactionHash_ != bytes32(0), \\\"Bridge: Transaction is null\\\");\\r\\n        require(srcChainTokenAddress_ != address(0), \\\"src token address is null\\\");\\r\\n        require(tokenRegistry.tokenRegistry(dstChainTokenAddress_, srcChainID_) == srcChainTokenAddress_, \\\"Token Not Registered\\\");\\r\\n        bytes32 processId = Utils.getTransferId(\\r\\n            srcChainID_,\\r\\n            srcChainTokenAddress_,\\r\\n            dstChainTokenAddress_,\\r\\n            receiver_,\\r\\n            amount_,\\r\\n            transactionHash_,\\r\\n            logIndex_\\r\\n        );\\r\\n        require(processed[processId] == 0, \\\"Bridge: Already processed\\\");\\r\\n        processed[processId] = block.number;\\r\\n        IMintableBurnableERC20(dstChainTokenAddress_).mint(receiver_, amount_);\\r\\n        emit TransferAccepted(\\r\\n            srcChainID_,\\r\\n            transactionHash_,\\r\\n            receiver_,\\r\\n            srcChainTokenAddress_,\\r\\n            dstChainTokenAddress_,\\r\\n            amount_,\\r\\n            logIndex_\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // function acceptCall(\\r\\n    //     uint256 srcChainID_,\\r\\n    //     address srcChainTokenAddress_,\\r\\n    //     address dstChainTokenAddress_,\\r\\n    //     bytes32 transactionHash_,\\r\\n    //     uint32 logIndex_,\\r\\n    //     bytes calldata payload\\r\\n    // ) external override onlyFederation nonReentrant {\\r\\n    //     require(dstChainTokenAddress_ != address(0), \\\"Bridge: destination chain token address is null\\\");\\r\\n    //     require(srcChainTokenAddress_ != address(0), \\\"Bridge: src chain token address is null\\\");\\r\\n    //     require(transactionHash_ != bytes32(0), \\\"Bridge: Transaction is null\\\");\\r\\n    //     require(srcChainTokenAddress_ != address(0), \\\"src token address is null\\\");\\r\\n    //     bytes4 sig =\\r\\n    //         payload[0] |\\r\\n    //         (bytes4(payload[1]) >> 8) |\\r\\n    //         (bytes4(payload[2]) >> 16) |\\r\\n    //         (bytes4(payload[3]) >> 24);\\r\\n\\r\\n    //     bytes32 callRegistryID = Utils.getCallRegistryId(\\r\\n    //         srcChainID_,\\r\\n    //         srcChainTokenAddress_,\\r\\n    //         dstChainTokenAddress_,\\r\\n    //         sig\\r\\n    //     );\\r\\n    //     require(tokenRegistry.callRegistry(callRegistryID), \\\"Call Not Registered\\\");\\r\\n    //     bytes32 callId = Utils.getCallId(\\r\\n    //         srcChainID_,\\r\\n    //         srcChainTokenAddress_,\\r\\n    //         dstChainTokenAddress_,\\r\\n    //         transactionHash_,\\r\\n    //         logIndex_,\\r\\n    //         payload\\r\\n    //     );\\r\\n\\r\\n    //     require(processed[callId] == 0, \\\"Bridge: Already processed\\\");\\r\\n    //     processed[callId] = block.number;\\r\\n\\r\\n    //     // call the function\\r\\n    //     (bool success, ) = dstChainTokenAddress_.call(payload);\\r\\n    //     require(success, \\\"call fail\\\");\\r\\n    // }\\r\\n\\r\\n    function bridgeTokenAt(\\r\\n        uint256 dstChainId_,\\r\\n        address srcChainTokenAddr_,\\r\\n        uint256 amount_,\\r\\n        address dstChainReceiverAddr_\\r\\n    ) external override whenNotPaused nonReentrant {\\r\\n        _bridgeToken(\\r\\n            srcChainTokenAddr_,\\r\\n            dstChainId_,\\r\\n            amount_,\\r\\n            dstChainReceiverAddr_\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function bridgeToken(\\r\\n        uint256 dstChainId_,\\r\\n        address srcChainTokenAddr_,\\r\\n        uint256 amount_\\r\\n    ) external override whenNotPaused nonReentrant {\\r\\n\\r\\n        _bridgeToken(\\r\\n            srcChainTokenAddr_,\\r\\n            dstChainId_,\\r\\n            amount_,\\r\\n            _msgSender()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _bridgeToken(\\r\\n        address srcChainTokenAddr_,\\r\\n        uint256 dstChainId_,\\r\\n        uint256 amount_,\\r\\n        address dstChainReceiverAddr_\\r\\n    ) internal {\\r\\n        address dstChainTokenAddr_ = tokenRegistry.tokenRegistry(srcChainTokenAddr_, dstChainId_);\\r\\n        require(dstChainTokenAddr_ != address(0), \\\"Token Not Registered\\\");\\r\\n        //Transfer the tokens on IERC20, they should be already Approved for the bridge Address to use them\\r\\n        IMintableBurnableERC20(srcChainTokenAddr_).safeTransferFrom(\\r\\n            _msgSender(),\\r\\n            address(this),\\r\\n            amount_\\r\\n        );\\r\\n        _crossTokens(\\r\\n            srcChainTokenAddr_,\\r\\n            dstChainId_,\\r\\n            dstChainTokenAddr_,\\r\\n            dstChainReceiverAddr_,\\r\\n            amount_\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _crossTokens(\\r\\n        address srcChainTokenAddr_,\\r\\n        uint256 dstChainId_,\\r\\n        address dstChainTokenAddr_,\\r\\n        address dstChainReceiverAddr_,\\r\\n        uint256 amount_\\r\\n    ) internal {\\r\\n        IMintableBurnableERC20 localToken = IMintableBurnableERC20(srcChainTokenAddr_);\\r\\n        uint256 fee = _calculateFee(srcChainTokenAddr_, amount_);\\r\\n        if (fee > 0) {\\r\\n            localToken.safeTransfer(owner(), fee);\\r\\n        }\\r\\n        uint256 amountToCross = amount_ - fee;\\r\\n        localToken.burn(address(this), amountToCross);\\r\\n        emit Cross(\\r\\n            _msgSender(),\\r\\n            srcChainTokenAddr_,\\r\\n            dstChainId_,\\r\\n            dstChainTokenAddr_,\\r\\n            dstChainReceiverAddr_,\\r\\n            amountToCross,\\r\\n            fee\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _calculateFee(address srcChainTokenAddr_, uint256 amount_) internal view returns(uint256) {\\r\\n        uint256 feeIn18 = tokenRegistry.fee(srcChainTokenAddr_);\\r\\n        return amount_ * feeIn18 / 1e18;\\r\\n    }\\r\\n\\r\\n    modifier onlyFederation() {\\r\\n        require(msg.sender == address(federation), \\\"Bridge: Sender not Federation\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBridgeInbound.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./IRegistry.sol\\\";\\r\\nimport \\\"./IFederation.sol\\\";\\r\\n\\r\\ninterface IBridgeInbound {\\r\\n    event TransferAccepted(\\r\\n        uint256 indexed sourceChainId,\\r\\n        bytes32 indexed sourceHash,\\r\\n        address indexed receiver_,\\r\\n        address sourceToken,\\r\\n        address destinationToken,\\r\\n        uint256 amount,\\r\\n        uint32 logIndex\\r\\n    );\\r\\n\\r\\n    function federation() external returns (IFederation);\\r\\n    function processed(bytes32) external view returns(uint256);\\r\\n    /**\\r\\n     * Accepts the transaction from the other chain that was voted and sent by the federation contract\\r\\n     */\\r\\n    function acceptTransfer(\\r\\n        uint256 srcChainID,\\r\\n        address srcChainTokenAddress,\\r\\n        address dstChainTokenAddress,\\r\\n        address receiver,\\r\\n        uint256 amount,\\r\\n        bytes32 transactionHash,\\r\\n        uint32 logIndex\\r\\n    ) external;\\r\\n\\r\\n    // function acceptCall(\\r\\n    //     uint256 srcChainID_,\\r\\n    //     address srcChainTokenAddress_,\\r\\n    //     address dstChainTokenAddress_,\\r\\n    //     bytes32 transactionHash_,\\r\\n    //     uint32 logIndex_,\\r\\n    //     bytes calldata payload\\r\\n    // ) external;\\r\\n\\r\\n    function isTransferProcessed(\\r\\n        uint256 srcChainID,\\r\\n        address srcChainTokenAddress,\\r\\n        address dstChainTokenAddress,\\r\\n        address receiver,\\r\\n        uint256 amount,\\r\\n        bytes32 transactionHash,\\r\\n        uint32 logIndex\\r\\n    ) external view returns(bool);\\r\\n\\r\\n    // function isCallProcessed(\\r\\n    //     uint256 srcChainID_,\\r\\n    //     address srcChainTokenAddress_,\\r\\n    //     address dstChainTokenAddress_,\\r\\n    //     bytes32 transactionHash_,\\r\\n    //     uint32 logIndex_,\\r\\n    //     bytes calldata payload\\r\\n    // ) external view returns(bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IBridgeOutbound.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./IRegistry.sol\\\";\\r\\nimport \\\"./IFederation.sol\\\";\\r\\n\\r\\ninterface IBridgeOutbound {\\r\\n    // function tokenRegistry() external returns (IRegistry);\\r\\n    function bridgeTokenAt(\\r\\n        uint256 dstChainID,\\r\\n        address srcChainTokenAddress,\\r\\n        uint256 amount,\\r\\n        address dstReceiverAddress\\r\\n    ) external;\\r\\n    function bridgeToken(\\r\\n        uint256 dstChainID,\\r\\n        address srcChainTokenAddress,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n    event Cross(\\r\\n        address indexed srcChainSenderAddress,\\r\\n        address indexed srcChainTokenAddress,\\r\\n        uint256 indexed dstChainID,\\r\\n        address dstChainTokenAddress,\\r\\n        address dstChainReceiverAddr,\\r\\n        uint256 amountToCross,\\r\\n        uint256 feeCollected\\r\\n    );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintableBurnableERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.5.0;\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\r\\n\\r\\ninterface IMintableBurnableERC20 is IERC20MetadataUpgradeable {\\r\\n    function mint(address account, uint256 amount) external;\\r\\n    function burn(address account, uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IRegistry {\\r\\n\\r\\n    function fee(address localAddr) external view returns(uint256);\\r\\n    function tokenRegistry(address localAddress, uint256 alienChainId) external view returns(address);\\r\\n    function callRegistry(bytes32 callId) external view returns(bool);\\r\\n    function registerToken(address localAddress, uint256 alienChainId, address alienAddress) external;\\r\\n    function unregisterToken(address localAddress, uint256 alienChainId, address alienAddress) external;\\r\\n    function setFee(address localAddr, uint256 _feeConst) external;\\r\\n\\r\\n\\r\\n    event TokenRegistered(address indexed localAddress, uint256 indexed alienChainId, address indexed alienTokenAddress);\\r\\n    event TokenUnregistered(address indexed localAddress, uint256 indexed alienChainId, address indexed alienTokenAddress);\\r\\n\\r\\n\\r\\n    // event CallRegistered(uint256 indexed alienChainId_, address indexed alienChainContractAddr_, address indexed localChainContractAddr_, bytes4 callSig_);\\r\\n    // event CallUnregistered(uint256 indexed alienChainId_, address indexed alienChainContractAddr_, address indexed localChainContractAddr_, bytes4 callSig_);\\r\\n\\r\\n    event FeeChanged(address indexed localAddr, uint256 _feeConst);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IFederation.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IFederation {\\r\\n    event VotedTransfer(\\r\\n        uint256 srcChainID_,\\r\\n        address srcChainTokenAddress_,\\r\\n        address dstChainTokenAddress_,\\r\\n        address receiver_,\\r\\n        uint256 amount_,\\r\\n        bytes32 indexed transactionHash_,\\r\\n        uint32 logIndex_,\\r\\n        address indexed federator,\\r\\n        bytes32 indexed processId);\\r\\n    event VotedCall(\\r\\n        uint256 srcChainID_,\\r\\n        address srcChainContractAddress_,\\r\\n        address dstChainContractAddress_,\\r\\n        bytes32 indexed transactionHash_,\\r\\n        uint32 logIndex_,\\r\\n        address indexed federator,\\r\\n        bytes32 indexed processId,\\r\\n        bytes payload\\r\\n    );\\r\\n\\r\\n    event ExecutedCall(bytes32 indexed processId);\\r\\n    event ExecutedTransfer(bytes32 indexed processId);\\r\\n    event MemberAddition(address indexed member);\\r\\n    event MemberRemoval(address indexed member);\\r\\n    event RequirementChange(uint required);\\r\\n    event BridgeChanged(address bridge);\\r\\n    function voteTransfer(\\r\\n        uint256 srcChainID_,\\r\\n        address srcChainTokenAddress_,\\r\\n        address dstChainTokenAddress_,\\r\\n        address receiver_,\\r\\n        uint256 amount_,\\r\\n        bytes32 transactionHash_,\\r\\n        uint32 logIndex_\\r\\n    ) external;\\r\\n    function hasVotedTransfer(\\r\\n        uint256 srcChainID_,\\r\\n        address srcChainTokenAddress_,\\r\\n        address dstChainTokenAddress_,\\r\\n        address receiver_,\\r\\n        uint256 amount_,\\r\\n        bytes32 transactionHash_,\\r\\n        uint32 logIndex_\\r\\n    ) external view returns(bool);\\r\\n\\r\\n    function isTransferProcessed(\\r\\n        uint256 srcChainID_,\\r\\n        address srcChainTokenAddress_,\\r\\n        address dstChainTokenAddress_,\\r\\n        address receiver_,\\r\\n        uint256 amount_,\\r\\n        bytes32 transactionHash_,\\r\\n        uint32 logIndex_\\r\\n    ) external view returns(bool);\\r\\n\\r\\n\\r\\n    // function voteCall(\\r\\n    //     uint256 srcChainID_,\\r\\n    //     address srcChainContractAddress_,\\r\\n    //     address dstChainContractAddress_,\\r\\n    //     bytes32 transactionHash_,\\r\\n    //     uint32 logIndex_,\\r\\n    //     bytes calldata payload\\r\\n    // ) external;\\r\\n\\r\\n    // function hasVotedCall(\\r\\n    //     uint256 srcChainID_,\\r\\n    //     address srcChainContractAddress_,\\r\\n    //     address dstChainContractAddress_,\\r\\n    //     bytes32 transactionHash_,\\r\\n    //     uint32 logIndex_,\\r\\n    //     bytes calldata payload\\r\\n    // ) external view returns(bool);\\r\\n\\r\\n    // function isCallProcessed(\\r\\n    //     uint256 srcChainID_,\\r\\n    //     address srcChainContractAddress_,\\r\\n    //     address dstChainContractAddress_,\\r\\n    //     bytes32 transactionHash_,\\r\\n    //     uint32 logIndex_,\\r\\n    //     bytes calldata payload\\r\\n    // ) external view returns(bool);\\r\\n\\r\\n    function getVoteCount(bytes32 processId) external view returns(uint);\\r\\n\\r\\n\\r\\n\\r\\n    function setRequired(uint _required) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Utils.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.8.4;\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\r\\n\\r\\nlibrary Utils {\\r\\n    // function getCallRegistryId(\\r\\n    //     uint256 alienChainId_,\\r\\n    //     address alienChainContractAddr_,\\r\\n    //     address localChainContractAddr_,\\r\\n    //     bytes4 callSig_\\r\\n    // ) internal pure returns(bytes32) {\\r\\n    //     return keccak256(abi.encodePacked(\\r\\n    //         alienChainId_,\\r\\n    //         alienChainContractAddr_,\\r\\n    //         localChainContractAddr_,\\r\\n    //         callSig_\\r\\n    //     ));\\r\\n    // }\\r\\n\\r\\n    function getTokenRegistryId(\\r\\n        uint256 fromChainID,\\r\\n        address alienAddress\\r\\n    ) internal pure returns(bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\r\\n            fromChainID,\\r\\n            alienAddress\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    function getTransferId(\\r\\n        uint256 srcChainID_,\\r\\n        address srcChainTokenAddress_,\\r\\n        address dstChainTokenAddress_,\\r\\n        address receiver_,\\r\\n        uint256 amount_,\\r\\n        bytes32 transactionHash_,\\r\\n        uint32 logIndex_\\r\\n    ) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\r\\n            \\\"Transfer\\\",\\r\\n            srcChainID_,\\r\\n            srcChainTokenAddress_,\\r\\n            dstChainTokenAddress_,\\r\\n            receiver_,\\r\\n            amount_,\\r\\n            transactionHash_,\\r\\n            logIndex_\\r\\n        ));\\r\\n    }\\r\\n    // function getCallId(\\r\\n    //     uint256 srcChainID_,\\r\\n    //     address srcChainTokenAddress_,\\r\\n    //     address dstChainTokenAddress_,\\r\\n    //     bytes32 transactionHash_,\\r\\n    //     uint32 logIndex_,\\r\\n    //     bytes calldata payload\\r\\n    // ) internal pure returns (bytes32) {\\r\\n    //     return keccak256(abi.encodePacked(\\r\\n    //         \\\"Call\\\",\\r\\n    //         srcChainID_,\\r\\n    //         srcChainTokenAddress_,\\r\\n    //         dstChainTokenAddress_,\\r\\n    //         transactionHash_,\\r\\n    //         logIndex_,\\r\\n    //         payload\\r\\n    //     ));\\r\\n    // }\\r\\n\\r\\n    function getTokenInfo(address tokenToUse) internal view returns (uint8 decimals, string memory symbol) {\\r\\n        return (\\r\\n            getDecimals(tokenToUse),\\r\\n            getSymbol(tokenToUse)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getSymbol(address tokenToUse) internal view returns (string memory symbol) {\\r\\n        return IERC20MetadataUpgradeable(tokenToUse).symbol();\\r\\n    }\\r\\n\\r\\n    function getDecimals(address tokenToUse) internal view returns (uint8) {\\r\\n        return IERC20MetadataUpgradeable(tokenToUse).decimals();\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcChainSenderAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcChainTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dstChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstChainTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstChainReceiverAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToCross\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeCollected\",\"type\":\"uint256\"}],\"name\":\"Cross\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sourceHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destinationToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"}],\"name\":\"TransferAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"srcChainID_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"srcChainTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstChainTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash_\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex_\",\"type\":\"uint32\"}],\"name\":\"acceptTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"srcChainTokenAddr_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"bridgeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dstChainId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"srcChainTokenAddr_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dstChainReceiverAddr_\",\"type\":\"address\"}],\"name\":\"bridgeTokenAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"federation\",\"outputs\":[{\"internalType\":\"contract IFederation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenRegistry_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"srcChainID_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"srcChainTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstChainTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash_\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex_\",\"type\":\"uint32\"}],\"name\":\"isTransferProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"federation_\",\"type\":\"address\"}],\"name\":\"setFederation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRegistry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Bridge","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}