{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/lib/InitializableOwnable.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    SPDX-License-Identifier: Apache-2.0\r\n\r\n*/\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract InitializableOwnable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n    bool internal _INITIALIZED_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier notInitialized() {\r\n        require(!_INITIALIZED_, \"DODO_INITIALIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function initOwner(address newOwner) public notInitialized {\r\n        _INITIALIZED_ = true;\r\n        _OWNER_ = newOwner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/intf/IERC20.sol\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/lib/SafeMath.sol\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"MUL_ERROR\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"DIVIDING_ERROR\");\r\n        return a / b;\r\n    }\r\n\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 quotient = div(a, b);\r\n        uint256 remainder = a - quotient * b;\r\n        if (remainder > 0) {\r\n            return quotient + 1;\r\n        } else {\r\n            return quotient;\r\n        }\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SUB_ERROR\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ADD_ERROR\");\r\n        return c;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = x / 2 + 1;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/DODOFee/FeeRateDIP3Impl.sol\r\n\r\n\r\ninterface ICrowdPooling {\r\n    function _QUOTE_RESERVE_() external view returns (uint256);\r\n    function getShares(address user) external view returns (uint256);\r\n}\r\n\r\ninterface IFee {\r\n    function getUserFee(address user) external view returns (uint256);\r\n}\r\n\r\ninterface IQuota {\r\n    function getUserQuota(address user) external view returns (int);\r\n}\r\n\r\ninterface IPool {\r\n    function version() external pure returns (string memory);\r\n    function _LP_FEE_RATE_() external view returns (uint256);\r\n    function _BASE_RESERVE_() external view returns (uint);\r\n    function _QUOTE_RESERVE_() external view returns (uint);\r\n    function _K_() external view returns (uint);\r\n}\r\n\r\ncontract FeeRateDIP3Impl is InitializableOwnable {\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Storage  ============\r\n\r\n    uint256 public _LP_MT_RATIO_ = 25;\r\n\r\n    struct CPPoolInfo {\r\n        address quoteToken;\r\n        int globalQuota;\r\n        address feeAddr;\r\n        address quotaAddr;\r\n    }\r\n\r\n    mapping(address => CPPoolInfo) cpPools;\r\n    mapping(address => uint256) public specPoolList;\r\n\r\n\r\n    // ============ Ownable Functions ============\r\n    \r\n    function addCpPoolInfo(address cpPool, address quoteToken, int globalQuota, address feeAddr, address quotaAddr) external onlyOwner {\r\n        CPPoolInfo memory cpPoolInfo =  CPPoolInfo({\r\n            quoteToken: quoteToken,\r\n            feeAddr: feeAddr,\r\n            quotaAddr: quotaAddr,\r\n            globalQuota: globalQuota\r\n        });\r\n        cpPools[cpPool] = cpPoolInfo;\r\n    }\r\n\r\n    function setCpPoolInfo(address cpPool, address quoteToken, int globalQuota, address feeAddr, address quotaAddr) external onlyOwner {\r\n        cpPools[cpPool].quoteToken = quoteToken;\r\n        cpPools[cpPool].feeAddr = feeAddr;\r\n        cpPools[cpPool].quotaAddr = quotaAddr;\r\n        cpPools[cpPool].globalQuota = globalQuota;\r\n    }\r\n\r\n    function setLpMtRatio(uint256 newLpMtRatio) external onlyOwner {\r\n        _LP_MT_RATIO_ = newLpMtRatio;\r\n    }\r\n\r\n\r\n    function setSpecPoolList (address poolAddr, uint256 mtFeeRate) public onlyOwner {\r\n        specPoolList[poolAddr] = mtFeeRate;\r\n    }\r\n\r\n    // ============ View Functions ============\r\n\r\n    function getFeeRate(address pool, address user) external view returns (uint256) {\r\n        try IPool(pool).version() returns (string memory poolVersion) {\r\n            bytes32 hashPoolVersion = keccak256(abi.encodePacked(poolVersion));\r\n            if(_kjudge(hashPoolVersion)) {\r\n                uint k = IPool(pool)._K_();\r\n                uint baseReserve = IPool(pool)._BASE_RESERVE_();\r\n                uint quoteReserve = IPool(pool)._QUOTE_RESERVE_();\r\n                require(!(k==0 && (baseReserve ==0 || quoteReserve == 0)), \"KJUDGE_ERROR\");\r\n            }\r\n\r\n            if(specPoolList[pool] != 0) {\r\n                return specPoolList[pool];\r\n            }\r\n\r\n            if(_cp(hashPoolVersion)) {\r\n                CPPoolInfo memory cpPoolInfo = cpPools[pool];\r\n                address quoteToken = cpPoolInfo.quoteToken;\r\n                if(quoteToken == address(0)) {\r\n                    return 0;\r\n                }else {\r\n                    uint256 userInput = IERC20(quoteToken).balanceOf(pool).sub(ICrowdPooling(pool)._QUOTE_RESERVE_());\r\n                    uint256 userStake = ICrowdPooling(pool).getShares(user);\r\n                    address feeAddr = cpPoolInfo.feeAddr;\r\n                    address quotaAddr = cpPoolInfo.quotaAddr;\r\n                    int curQuota = cpPoolInfo.globalQuota;\r\n                    if(quotaAddr != address(0))\r\n                        curQuota = IQuota(quotaAddr).getUserQuota(user);\r\n\r\n                    require(curQuota == -1 || (curQuota != -1 && int(userInput.add(userStake)) <= curQuota), \"DODOFeeImpl: EXCEED_YOUR_QUOTA\");\r\n\r\n                    if(feeAddr == address(0)) {\r\n                        return 0;\r\n                    } else {\r\n                        return IFee(feeAddr).getUserFee(user);\r\n                    }\r\n                }\r\n            } else if(_dip3dvm(hashPoolVersion) || _dip3dsp(hashPoolVersion)) {\r\n                uint256 lpFeeRate = IPool(pool)._LP_FEE_RATE_();\r\n                uint256 mtFeeRate = lpFeeRate.mul(_LP_MT_RATIO_).div(100);\r\n                if(lpFeeRate.add(mtFeeRate) >= 10**18) {\r\n                    return 0;\r\n                } else {\r\n                    return mtFeeRate;\r\n                }\r\n            } else {\r\n                return 0;\r\n            }\r\n        } catch (bytes memory) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getCPInfoByUser(address pool, address user) external view returns (bool isHaveCap, int curQuota, uint256 userFee) {\r\n        CPPoolInfo memory cpPoolInfo = cpPools[pool];\r\n        if(cpPoolInfo.quoteToken == address(0)) {\r\n            isHaveCap = false;\r\n            curQuota = -1;\r\n            userFee = 0;\r\n        }else {\r\n            address quotaAddr = cpPoolInfo.quotaAddr;\r\n            curQuota = cpPoolInfo.globalQuota;\r\n            if(quotaAddr != address(0))\r\n                curQuota = IQuota(quotaAddr).getUserQuota(user);\r\n        \r\n            if(curQuota == -1) {\r\n                isHaveCap = false;\r\n            }else {\r\n                isHaveCap = true;\r\n                uint256 userStake = ICrowdPooling(pool).getShares(user);\r\n                curQuota = int(uint256(curQuota).sub(userStake));\r\n            }\r\n\r\n            address feeAddr = cpPoolInfo.feeAddr;\r\n            if(feeAddr == address(0)) {\r\n                userFee =  0;\r\n            } else {\r\n                userFee = IFee(feeAddr).getUserFee(user);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _cp(bytes32 _hashPoolVersion) internal pure returns (bool) {\r\n        return (_hashPoolVersion == keccak256(abi.encodePacked(\"CP 1.0.0\")) || _hashPoolVersion == keccak256(abi.encodePacked(\"CP 2.0.0\")));\r\n    }\r\n\r\n    function _dip3dvm(bytes32 _hashPoolVersion) internal pure returns (bool){\r\n        return (_hashPoolVersion == keccak256(abi.encodePacked(\"DVM 1.0.2\")) || _hashPoolVersion == keccak256(abi.encodePacked(\"DVM 1.0.3\")));\r\n    }\r\n\r\n    function _dip3dsp(bytes32 _hashPoolVersion) internal pure returns (bool){\r\n        return (_hashPoolVersion == keccak256(abi.encodePacked(\"DSP 1.0.1\")) || _hashPoolVersion == keccak256(abi.encodePacked(\"DSP 1.0.2\")));\r\n    }\r\n\r\n    function _kjudge(bytes32 _hashPoolVersion) internal pure returns (bool) {\r\n        return (_hashPoolVersion == keccak256(abi.encodePacked(\"DVM 1.0.2\")) || _hashPoolVersion == keccak256(abi.encodePacked(\"DSP 1.0.1\")) || _hashPoolVersion == keccak256(abi.encodePacked(\"DPP 1.0.0\")));\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_LP_MT_RATIO_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cpPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"globalQuota\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"feeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quotaAddr\",\"type\":\"address\"}],\"name\":\"addCpPoolInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCPInfoByUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isHaveCap\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"curQuota\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"userFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cpPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"globalQuota\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"feeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quotaAddr\",\"type\":\"address\"}],\"name\":\"setCpPoolInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLpMtRatio\",\"type\":\"uint256\"}],\"name\":\"setLpMtRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mtFeeRate\",\"type\":\"uint256\"}],\"name\":\"setSpecPoolList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"specPoolList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FeeRateDIP3Impl","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ec2fbf939f1e8743f40231a24124a06ea7cccb5d7220a8f98ae207db756dfc6a"}]}