{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Mocks/PriceInvertor.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2021 Hegic\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract PriceProviderInvertor is AggregatorV3Interface {\\n    // string public override description = \\\"Test implementatiln\\\";\\n    // uint256 public override version = 0;\\n    AggregatorV3Interface rawPricer;\\n\\n    constructor(AggregatorV3Interface _rawPricer) {\\n        rawPricer = _rawPricer;\\n    }\\n\\n    function decimals() external view override returns (uint8) {\\n        return rawPricer.decimals();\\n    }\\n\\n    function description() external view override returns (string memory) {\\n        return rawPricer.description();\\n    }\\n\\n    function version() external view override returns (uint256) {\\n        return rawPricer.version();\\n    }\\n\\n    function getRoundData(uint80 i)\\n        external\\n        view\\n        override\\n        returns (\\n            uint80 x1,\\n            int256 price,\\n            uint256 x2,\\n            uint256 x3,\\n            uint80 x4\\n        )\\n    {\\n        (x1, price, x2, x3, x4) = rawPricer.getRoundData(i);\\n        price = int256(10**(rawPricer.decimals() * 2)) / price;\\n    }\\n\\n    function latestAnswer() external view returns (int256 result) {\\n        (, result, , , ) = latestRoundData();\\n    }\\n\\n    function latestRoundData()\\n        public\\n        view\\n        override\\n        returns (\\n            uint80 x1,\\n            int256 answer,\\n            uint256 x2,\\n            uint256 x3,\\n            uint80 x4\\n        )\\n    {\\n        (x1, answer, x2, x3, x4) = rawPricer.latestRoundData();\\n        answer = int256(10**(rawPricer.decimals() * 2)) / answer;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"contracts/Mocks/PriceProviderMock.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2021 Hegic\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract PriceProviderMock is AggregatorV3Interface {\\n    uint256 public price;\\n    uint8 public immutable override decimals;\\n    string public override description = \\\"Test implementatiln\\\";\\n    uint256 public override version = 0;\\n\\n    constructor(uint256 _price, uint8 _decimals) {\\n        price = _price;\\n        decimals = _decimals;\\n    }\\n\\n    function setPrice(uint256 _price) external {\\n        price = _price;\\n    }\\n\\n    function getRoundData(uint80)\\n        external\\n        pure\\n        override\\n        returns (\\n            uint80,\\n            int256,\\n            uint256,\\n            uint256,\\n            uint80\\n        )\\n    {\\n        revert(\\\"Test implementation\\\");\\n    }\\n\\n    function latestAnswer() external view returns (int256 result) {\\n        (, result, , , ) = latestRoundData();\\n    }\\n\\n    function latestRoundData()\\n        public\\n        view\\n        override\\n        returns (\\n            uint80,\\n            int256 answer,\\n            uint256,\\n            uint256,\\n            uint80\\n        )\\n    {\\n        answer = int256(price);\\n        return (0, answer, 0, 0, 0);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_rawPricer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"i\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"x1\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"x2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x3\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"x4\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"result\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"x1\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"x2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x3\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"x4\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PriceProviderInvertor","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000deb288f737066589598e9214e782fa5a8ed689e8","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://308010c6b761567853ac6da4bb288d82d68d4b0acbbef6d8015370390b5dc01b"}]}