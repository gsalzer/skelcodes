{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking/Lair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport \\\"../IVampireGameERC721.sol\\\";\\nimport \\\"../traits/TokenTraits.sol\\\";\\n\\nimport \\\"./ILair.sol\\\";\\n\\n/// @notice holds info about a staked Vampire\\nstruct VampireStake {\\n    /// @notice address of the token owner\\n    address owner;\\n    /// @notice id of the token. uint16 cuz max token id = 50k\\n    uint16 tokenId;\\n    /// @notice the bloodbagPerPredatorScore of the Lair when the vampire joined\\n    uint80 bloodbagPerPredatorScoreWhenStaked;\\n}\\n\\n/// @title The Vampire Lair\\n///\\n/// Note: A lot of the ideas in this contract are from wolf.game, some parts\\n/// were taken directly from their original contract. A lot of things were reorganized\\n///\\n/// ---\\n///\\n/// This contract holds all the state for staked humans and all the logic\\n/// for updating the state.\\n///\\n/// It doesn't transfer tokens or knows about other contracts.\\ncontract Lair is ILair, IERC721Receiver, Ownable {\\n    /// @notice sum of \\\"predator score\\\" of all staked vampires\\n    uint24 public totalPredatorScoreStaked = 0;\\n    /// @notice amount of $BLOODBAG for each predator score\\n    uint256 public bloodbagPerPredatorScore = 0;\\n    /// @notice map a predator score to a list of VampireStake[] containing vampires with that score\\n    mapping(uint8 => VampireStake[]) public scoreStakingMap;\\n    /// @notice tracks the index of each Vampire in the stake list\\n    mapping(uint16 => uint256) public stakeIndices;\\n    /// @notice map of controllers that can control this contract\\n    mapping(address => bool) public controllers;\\n\\n    /// @notice VampireGame ERC721 contract for quering info\\n    IVampireGame public vgame;\\n\\n    /// ==== Events\\n\\n    event VampireStaked(\\n        address indexed owner,\\n        uint16 indexed tokenId,\\n        uint256 bloodBagPerPredatorScoreWhenStaked\\n    );\\n    event VampireUnstaked(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n    event BloodBagClaimed(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n    event TaxUpdated(\\n        uint256 amount,\\n        uint256 unaccountedReward\\n    );\\n\\n    /// ==== Constructor\\n\\n    constructor(address _vgame) {\\n        vgame = IVampireGame(_vgame);\\n    }\\n\\n    /// ==== Modifiers\\n\\n    modifier onlyControllers() {\\n        require(controllers[_msgSender()], \\\"ONLY_CONTROLLERS_ALLOWED\\\");\\n        _;\\n    }\\n\\n    /// ==== Helpers\\n\\n    /// @notice returns the predator score of a Vampire\\n    /// @param tokenId the Vampire's id\\n    /// @return the predator score of the Vampire (5-8)\\n    function _predatorScoreForVampire(uint16 tokenId)\\n        private\\n        view\\n        returns (uint8)\\n    {\\n        return 8 - vgame.getPredatorIndex(tokenId);\\n    }\\n\\n    /// ==== ILairControls\\n\\n    /// @dev See {ILairControls.stakeVampire}\\n    function stakeVampire(address sender, uint16 tokenId)\\n        external\\n        override\\n        onlyControllers\\n    {\\n        uint8 score = _predatorScoreForVampire(tokenId);\\n\\n        // Update total predator score\\n        totalPredatorScoreStaked += score;\\n\\n        // Store the location of the vampire in the VampireStake list\\n        stakeIndices[tokenId] = scoreStakingMap[score].length;\\n\\n        // Push vampire to the VamprieStake list\\n        scoreStakingMap[score].push(\\n            VampireStake({\\n                owner: sender,\\n                tokenId: tokenId,\\n                bloodbagPerPredatorScoreWhenStaked: uint80(\\n                    bloodbagPerPredatorScore\\n                )\\n            })\\n        );\\n\\n        emit VampireStaked(sender, tokenId, bloodbagPerPredatorScore);\\n    }\\n\\n    /// @dev See {ILairControls.claimBloodBags}\\n    function claimBloodBags(address sender, uint16 tokenId)\\n        external\\n        override\\n        onlyControllers\\n        returns (uint256 owed)\\n    {\\n        uint8 score = _predatorScoreForVampire(tokenId);\\n        VampireStake memory stake = scoreStakingMap[score][\\n            stakeIndices[tokenId]\\n        ];\\n        require(sender == stake.owner, \\\"NOT_OWNER_OR_NOT_STAKED\\\");\\n\\n        // Calculate and sets amount of bloodbags owed (this is returned by the fn)\\n        uint256 _bloodbagPerPredatorScore = bloodbagPerPredatorScore;\\n        owed =\\n            score *\\n            (_bloodbagPerPredatorScore -\\n                stake.bloodbagPerPredatorScoreWhenStaked);\\n\\n        // Resets the vampire staking info\\n        scoreStakingMap[score][stakeIndices[tokenId]] = VampireStake({\\n            owner: sender,\\n            tokenId: tokenId,\\n            bloodbagPerPredatorScoreWhenStaked: uint80(_bloodbagPerPredatorScore)\\n        });\\n\\n        // Logs an event with the blood claiming info\\n        emit BloodBagClaimed(sender, tokenId, owed);\\n\\n        // <- Controller is supposed to transfer $BLOODBAGs\\n    }\\n\\n    /// @dev See {ILairControls.unstakeVampire}\\n    function unstakeVampire(address sender, uint16 tokenId)\\n        external\\n        override\\n        onlyControllers\\n        returns (uint256 owed)\\n    {\\n        uint8 score = _predatorScoreForVampire(tokenId);\\n        VampireStake memory stake = scoreStakingMap[score][\\n            stakeIndices[tokenId]\\n        ];\\n        require(stake.owner == sender, \\\"NOT_OWNER_OR_NOT_STAKED\\\");\\n\\n        // Calculate and sets amount of bloodbags owed (this is returned by the fn)\\n        owed =\\n            score *\\n            (bloodbagPerPredatorScore -\\n                stake.bloodbagPerPredatorScoreWhenStaked);\\n\\n        // Sub vampire's score from total score staked\\n        totalPredatorScoreStaked -= score;\\n\\n        // Gets the last vampire in the staking list for this score\\n        VampireStake memory lastStake = scoreStakingMap[score][\\n            scoreStakingMap[score].length - 1\\n        ];\\n\\n        // Move the last staked vampire to the current position\\n        scoreStakingMap[score][stakeIndices[tokenId]] = lastStake;\\n        stakeIndices[lastStake.tokenId] = stakeIndices[tokenId];\\n\\n        // Delete the last vampire from staking list, since it's duplicated now\\n        scoreStakingMap[score].pop();\\n        delete stakeIndices[tokenId];\\n\\n        // Setting all state first, then controller will do the token transfer.\\n        // Doing that in this order will protects us against reentrancy.\\n\\n        // Logs an event with the vampire unstaking and blood claiming info\\n        emit VampireUnstaked(sender, tokenId, owed);\\n\\n        // <- Controller is supposed to transfer NFT\\n        // <- Controller is supposed to transfer $BLOODBAGs\\n    }\\n\\n    function addTaxToVampires(uint256 amount, uint256 unaccountedRewards)\\n        external\\n        override\\n        onlyControllers\\n    {\\n        bloodbagPerPredatorScore +=\\n            (amount + unaccountedRewards) /\\n            totalPredatorScoreStaked;\\n        emit TaxUpdated(amount, unaccountedRewards);\\n    }\\n\\n    /// ==== ILair\\n\\n    /// @notice See {ILair.getTotalPredatorScoreStaked}\\n    function getTotalPredatorScoreStaked()\\n        external\\n        view\\n        override\\n        returns (uint24)\\n    {\\n        return totalPredatorScoreStaked;\\n    }\\n\\n    /// @notice See {ILair.getBloodbagPerPredatorScore}\\n    function getBloodbagPerPredatorScore()\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return bloodbagPerPredatorScore;\\n    }\\n\\n    /// ==== IERC721Receiver\\n\\n    function onERC721Received(\\n        address,\\n        address from,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        require(from == address(0x0), \\\"PLEASE_DONT\\\");\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    /// ==== Only Owner\\n\\n    /// @notice add a controller that will be able to call functions in this contract\\n    /// @param controller the address that will be authorized\\n    function addController(address controller) external onlyOwner {\\n        controllers[controller] = true;\\n    }\\n\\n    /// @notice remove a controller so it won't be able to call functions in this contract anymore\\n    /// @param controller the address that will be unauthorized\\n    function removeController(address controller) external onlyOwner {\\n        controllers[controller] = false;\\n    }\\n\\n    /// ==== Frontend Helpers\\n\\n    function ownerOf(uint16 tokenId, uint8 predatorIndex) public view override returns (address) {\\n        return scoreStakingMap[predatorIndex][stakeIndices[tokenId]].owner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/IVampireGameERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./IVampireGame.sol\\\";\\n\\n/// @notice Interface composed by IVampireGame + IERC721\\ninterface IVampireGameERC721 is IVampireGame, IERC721 {}\"\r\n    },\r\n    \"contracts/traits/TokenTraits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nstruct TokenTraits {\\n    bool isVampire;\\n    // Shared Traits\\n    uint8 skin;\\n    uint8 face;\\n    uint8 clothes;\\n    // Human-only Traits\\n    uint8 pants;\\n    uint8 boots;\\n    uint8 accessory;\\n    uint8 hair;\\n    // Vampire-only Traits\\n    uint8 cape;\\n    uint8 predatorIndex;\\n}\"\r\n    },\r\n    \"contracts/staking/ILair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\n\\ninterface ILair {\\n    /// @notice returns the totalPredatorScoreStaked property\\n    function getTotalPredatorScoreStaked() external view returns (uint24);\\n\\n    /// @notice returns the totalPredatorScoreStaked property\\n    function getBloodbagPerPredatorScore() external view returns (uint256);\\n\\n    function ownerOf(uint16 tokenId, uint8 predatorIndex) external view returns (address);\\n\\n    /// @notice Stake one vampire\\n    ///\\n    /// What this does:\\n    ///\\n    /// - Update the state of the vault to contain the Vampire that the user wants to stake\\n    ///\\n    /// What the controller should do after this function returns:\\n    ///\\n    /// - Before calling this: Controller should check if the address implements onReceiveERC721.\\n    /// - Then call transferFrom(_msgSender(), LAIR_ADDRESS, tokenId)\\n    ///\\n    /// Note: This is only called by controller, and the sender should be `_msgSender()`\\n    ///\\n    /// @param sender address of who's making this request, should be the vampire owner\\n    /// @param tokenId ids of each vampire to stake\\n    function stakeVampire(address sender, uint16 tokenId) external;\\n\\n    /// @notice update the vault state to as the owed amont fo the vampire was removed\\n    ///\\n    /// What this does:\\n    ///\\n    /// - Calculate and return the current amount owed to a vampire\\n    /// - Reset the vampire stake info to as if they were staked now\\n    ///\\n    /// What the controller should do after this function returns:\\n    ///\\n    /// - Transfer the `owed` amount of $BLOODBAGs to `sender`.\\n    ///\\n    /// Note: This is only called by controller, and the sender should be `_msgSender()`\\n    /// Note: We set all state first, and the do the transfers to avoid reentrancy\\n    ///\\n    /// @param sender address of who's making this request, should be the vampire owner\\n    /// @param tokenId id of the vampire\\n    /// @return owed amount of $BLOODBAGs owed to the vampire\\n    function claimBloodBags(address sender, uint16 tokenId)\\n        external\\n        returns (uint256 owed);\\n\\n    /// @notice update the vault state to as the owed amont fo the vampire was removed\\n    /// and the vampire was unstaked.\\n    ///\\n    /// What this does:\\n    ///\\n    /// - Calculate and return the current amount owed to a vampire\\n    /// - Deletes the vampire info from staking structures\\n    /// - Moves the last vampire staked to the current position of this vampire\\n    ///\\n    /// What the controller should do after this function returns:\\n    ///\\n    /// - Transfer the `owed` amount of $BLOODBAGs to `sender`.\\n    /// - Transfer the NFT from this contract to `sender`\\n    ///\\n    /// Note: This is only called by controller, and the sender should be `_msgSender()`\\n    /// Note: We set all state first, and the do the transfers to avoid reentrancy\\n    ///\\n    /// @param sender address of who's making this request, should be the vampire owner\\n    /// @param tokenId id of the vampire\\n    /// @return owed amount of $BLOODBAGs owed to the vampire\\n    function unstakeVampire(address sender, uint16 tokenId)\\n        external\\n        returns (uint256 owed);\\n\\n    function addTaxToVampires(uint256 amount, uint256 unaccountedRewards) external;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/IVampireGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"./traits/TokenTraits.sol\\\";\\n\\n/// @notice Interface to interact with the VampireGame contract\\ninterface IVampireGame {\\n    /// @notice get the amount of tokens minted\\n    function getTotalSupply() external view returns (uint16);\\n\\n    /// @notice get tthe amount of og supply\\n    function getOGSupply() external view returns (uint16);\\n\\n    /// @notice get the total supply of gen-0\\n    function getGenZeroSupply() external view returns (uint16);\\n\\n    /// @notice get the total supply of tokens\\n    function getMaxSupply() external view returns (uint16);\\n\\n    /// @notice get the TokenTraits for a given tokenId\\n    function getTokenTraits(uint16 tokenId) external view returns (TokenTraits memory);\\n\\n    /// @notice check if token id a vampire\\n    function isTokenVampire(uint16 tokenId) external view returns (bool);\\n\\n    /// @notice get the Predator Index for a given tokenId\\n    function getPredatorIndex(uint16 tokenId) external view returns (uint8);\\n\\n    /// @notice returns true if a token is aleady revealed\\n    function isTokenRevealed(uint16 tokenId) external view returns (bool);\\n}\\n\\n/// @notice Interface to control parts of the VampireGame ERC 721\\ninterface IVampireGameControls {\\n    /// @notice mint any amount of nft to any address\\n    /// Requirements:\\n    /// - message sender should be an allowed address (game contract)\\n    /// - amount + totalSupply() has to be smaller than MAX_SUPPLY\\n    function mintFromController(address receiver, uint16 amount) external;\\n\\n    /// @notice reveal a list of tokens using specific seeds for each\\n    function controllerRevealTokens(uint16[] calldata tokenIds, uint256[] calldata seeds) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vgame\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BloodBagClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unaccountedReward\",\"type\":\"uint256\"}],\"name\":\"TaxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bloodBagPerPredatorScoreWhenStaked\",\"type\":\"uint256\"}],\"name\":\"VampireStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VampireUnstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unaccountedRewards\",\"type\":\"uint256\"}],\"name\":\"addTaxToVampires\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bloodbagPerPredatorScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"claimBloodBags\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"owed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBloodbagPerPredatorScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPredatorScoreStaked\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"predatorIndex\",\"type\":\"uint8\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"scoreStakingMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint80\",\"name\":\"bloodbagPerPredatorScoreWhenStaked\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"stakeIndices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"stakeVampire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPredatorScoreStaked\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"unstakeVampire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"owed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vgame\",\"outputs\":[{\"internalType\":\"contract IVampireGame\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Lair","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b8c78d9c32061dc91406ed0bd7112ff912fa55a7","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}