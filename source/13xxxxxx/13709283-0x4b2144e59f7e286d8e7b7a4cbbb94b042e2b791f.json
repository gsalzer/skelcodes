{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/metaZooSale.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n//import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./interface/SkeletonCrew.sol\\\";\\n\\n/* \\n\\nWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMM\\n\\nWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMM\\nNk,'cooooooooooolcOWMMMMMMWKl,cooooooooooo:oXMMMMMMMMMMMMMMMMMN0xd0MMMMMMMMMMMMMMMMMMMMMMMMXkddddddddddddddddxxxxxxdclxkkxxxxkkkkkkxxxxxxkk0NN0ddkOxOO\\nO' .:dx0KKKKKKKKKolKMMMMMM0;.:0KKKKKKKKOxo;lXMMMMMMMMMMMMMMNKOkkkx0MMMMMMMMMMMMMMMMMMMMMMWk,.o0KKKKKKKKKKKKKKK000OxllxOdc:lkKOdok0KKkl;;ooOdokOOOdlOOO\\nO'    .;kKKKKKKKK0ldNMMMMXc.'kKKKKKKKKx;..:OWMWNXKKKXXNWWKdlxOKK0dxKK00XWNKKKXNNKK00KNWMM0,.c0KKKKKK00OOOOO0KKKKKd;l0Kkc;. 'lod0KKKx' .:cxKKd;oddXOooo\\nNOxo;  .lKK00KKKKKklkWMMWx..dKK0KKKKKKo:d0NWX00000O0000K0c.'kKKKKOkkkdlxdldkkkkkkkkkkxkXKc.cOK0kdl:,'.....,d0KKKk,,kKKOdOO; .cOKKKx. ,O0dkKK0:'xWMMMMM\\nMMMMK, .oK0dd0KKKKKdl0MM0'.c0Kdd0KKKKKdlKMXkxOKKkl:oOKKKO: 'kKKK0dcclldl;dKKKOOO0KKKKKxl,  'cc,...,;::'  .o0KKKKl.,OKKKkxX0, :0KKO, 'OXxxKKK0:.cNMMMMM\\nMMMMK, .dK0:,xKKKKK0ooXX:.;OKx,:0KKKKKdl00ld0KKOdc.'xKKKKl.'kKKK0l'',l:.cxoc:'.':x0KKK0l'.  .:okKXNWNk,.;kKKKKKKl..dKKKKxxXk.'xKKd..dXxx0KKKx. lNMMMMM\\nMMMMO' .xKO; ;OKKKKKOlol..xKO: ,OKKKKKxld::OKKKkO0xk00kol;.'kKKK0xOXXk,.;clllodxkOKKKK0dO0xkXWMMMMMXo..l0KKKKKKk:. .o0KK0kxx;.cx0k;,dxx0KK0d' 'OMMMMMM\\nMMMMk. 'kKk' .c0KKKKKk;..lKKl. 'kKKKKKkc,.c0KKKOO0Oxoolld:.'kKKK0x0MMNkldk0KK0dc,:kKKK0dOMMMMMMMMW0;.,xKKKKKK0dlkk; .,ok00Okxdl;:odxkO0Oxl,. ;OWMMMMMM\\nMMMWx. ,OKx'  .dKKKKKKo.:OKx'  .xKKKKKO:. :0KKKKKkdk0NNX0l.'kKKK0xkWNx,l0KKKKdl;..dKKK0dOMMMMMMMNd..cOKKKKKKkloKWMXx:...',;;:clxkdc:;,'....:xXMMMMMMMM\\nMMMWo. :0Kd;.  ,kKKKKK0xOKOl:. .xKKKKK0c. .xKKKKK00000000d..oKKKK0kko..xKKKKKkxo,:kKKKKxkNMMMMW0:.,xKKKKKK0dcxNMMMMMWKOxoodxOXWMMMWXOkxxk0XWMMMMMMMMMM\\nMMMNl  c0Kolx,  :OKKKKKKK0ook, .dKKKKK0l:' 'xKKKKKKKKKKK0d' .lOKKKK0l..c0KKKKK0OxxkKKKKklkNMMNx'.cOKKKKKKOll0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\nMMMNc .lKKloXx. .l0KKKKKKdl0K; .oKKKKKKook; .:dOKKKKKOkk0Xk;  .:oxOOo'  ,okOOkoc,..ldl:;:kNMKc.'d0KKKKK0xlxXMMMMMMWXkOXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\nMMMX: .oK0ldNNl  .lOKKKKkckWX:  lKKKKKKooXXd;...,;::cokXWMMNkc,....,lOd'. .';lxOx,.,ldk0NMWk,.:kKKKKKKOolOWMMMMMWKxooolxXMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\nMMMK, .xK0ldWMXc   .,:clcdNMNc  cKKKKKKdl0MMNKkdodxOKWMMMMMMMWNKOxoxXMMNOxxk0NMMWK0NWMMMMXl..o0KKKKKKk:;okkkkkkxddx0KxcdXMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\nMWXd..l0KKdlkKXXkc;'.  .lXWN0c.'xKKKKKKOooOKNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWO;.;kKKKKKKKKOxxxxxxxxkk0KKKxckNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\nk:;ldkKKKKKkdockWWWNKOk0NKo;codOKKKKKKKK0kdloXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXo. ;OKKKKKKKKKKKKKKKKKKKKKKKxcOWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n. .ldddddddddo;xWMMMMMMMNc  ;oddddddddddddd:cKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWk.  .ckkkkkkkkkkkkkkkkkkkkkkdcxWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n             .c0MMMMMMMMX:                .'xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx.   ......................,xNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n:;;;;;;;;;;;:dXMMMMMMMMMNx:;;;;;;;;;;;;;;;cOWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWk'.......................,kWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\nWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMM\\n\\nWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMM\\n\\n*/\\n\\n//// @author:  Blockchain platform powered by Ether Cards - https://ether.cards\\n\\ncontract metaZooSale is Ownable {\\n    using SafeMath for uint256;\\n\\n    event WhiteListSale(uint256 tokenCount, address receiver, uint256 role);\\n    event PurchaseSale(uint256 tokenCount, address buyer);\\n\\n    /* \\n    using tokenIndex to retrieve tokenID to send.\\n    Sale with start at 5 eth and decrease by 0.1 eth every 15 minutes for 12 hours.\\n    */\\n\\n    uint256 public startingPrice = 5 ether;\\n    // Whitelist time\\n    uint256 public whitelist_sales;\\n    uint256 public whitelist_sales_end;\\n    // DSP\\n    uint256 public sales_start;\\n    uint256 public sales_end;\\n\\n    address public nft_sales;\\n    uint256 public sales_duration = 12 hours;\\n    bool public setupStatus = true;\\n    uint256 public maxDecreaseSold = 0;\\n    uint256 public maxDecreaseNFTs = 500;\\n\\n    uint256 public whiteListSold = 0;\\n    uint256 public maxWhiteListNFTs = 4300;\\n\\n    address public presigner;\\n    uint256 public whiteListPrice = 0.1 ether;\\n    mapping(address => uint256) public whitelist_claimed;\\n\\n    address payable[] _wallets = [\\n        payable(0xA3cB071C94b825471E230ff42ca10094dEd8f7bB), \\n        payable(0xA807a452e20a766Ea36019bF5bE5c5f4cbDE7563), \\n        payable(0x77b94A55684C95D59A8F56a234B6e555fC79997c) \\n    ];\\n\\n    uint256[] _shares = [70, 180, 750];\\n\\n    function _split(uint256 amount) internal {\\n        // duplicated to save an extra call\\n        bool sent;\\n        uint256 _total;\\n        for (uint256 j = 0; j < _wallets.length; j++) {\\n            uint256 _amount = (amount * _shares[j]) / 1000;\\n            if (j == _wallets.length - 1) {\\n                _amount = amount - _total;\\n            } else {\\n                _total += _amount;\\n            }\\n            (sent, ) = _wallets[j].call{value: _amount}(\\\"\\\"); // don't use send or xfer (gas)\\n            require(sent, \\\"Failed to send Ether\\\");\\n        }\\n    }\\n    function whiteListBySignature(\\n        address _recipient,\\n        uint256 _tokenCount,\\n        bytes memory signature,\\n        uint64 _role\\n    ) public payable {\\n        require(\\n            whiteListSalesActive(),\\n            \\\"Sales has not started or ended , please chill sir.\\\"\\n        );\\n        require(_role == 1 || _role == 2, \\\"One or Two none else will do\\\");\\n        require(verify(_role, msg.sender, signature), \\\"Unauthorised\\\");\\n        require(msg.value >= _tokenCount * (whiteListPrice), \\\"Price not met\\\");\\n        uint256 this_taken = whitelist_claimed[msg.sender] + _tokenCount;\\n\\n        whitelist_claimed[msg.sender] = this_taken;\\n        require(\\n            _role >= whitelist_claimed[msg.sender],\\n            \\\"Too many tokens requested\\\"\\n        );\\n        whiteListSold += _tokenCount;\\n        require(whiteListSold <= maxWhiteListNFTs, \\\"sold out\\\");\\n        SkeletonCrew(nft_sales).mintCards(_tokenCount, _recipient);\\n        _split(msg.value);\\n        emit WhiteListSale(_tokenCount, _recipient, _role);\\n    }\\n\\n    function verify(\\n        uint64 _amount,\\n        address _user,\\n        bytes memory _signature\\n    ) public view returns (bool) {\\n        require(_user != address(0), \\\"NativeMetaTransaction: INVALID__user\\\");\\n        bytes32 _hash =\\n            ECDSA.toEthSignedMessageHash(\\n                keccak256(abi.encodePacked(_user, _amount))\\n            );\\n        require(_signature.length == 65, \\\"Invalid signature length\\\");\\n        address recovered = ECDSA.recover(_hash, _signature);\\n        return (presigner == recovered);\\n    }\\n\\n    function currentPrice() public view returns (uint256) {\\n        uint256 gap = block.timestamp - sales_start;\\n        uint256 counts = gap / (15 minutes);\\n        if (gap >= sales_duration) {\\n            return 0.2 ether;\\n        }\\n        return startingPrice - (counts * 0.1 ether);\\n    }\\n\\n    function whiteListRemainingTokens() public view returns (uint256) {\\n        return maxWhiteListNFTs - whiteListSold;\\n    }\\n\\n    function decreaseRemainingTokens() public view returns (uint256) {\\n        return (maxDecreaseNFTs + whiteListRemainingTokens()) - maxDecreaseSold;\\n    }\\n\\n    constructor(\\n        uint256 _whitelist_sales,\\n        uint256 _sales_start,\\n        address _nft_sales,\\n        address _presigner\\n    ) {\\n        whitelist_sales = _whitelist_sales;\\n        whitelist_sales_end = _whitelist_sales + 3 days;\\n        sales_start = _sales_start;\\n        sales_end = sales_start + 12 hours;\\n        nft_sales = _nft_sales;\\n        presigner = _presigner;\\n    }\\n\\n    function purchase(uint256 _amount) public payable {\\n        require(\\n            salesActive(),\\n            \\\"Sales has not started or ended , please chill sir.\\\"\\n        );\\n        require(msg.value >= _amount.mul(currentPrice()), \\\"Price not met\\\");\\n        require(decreaseRemainingTokens() >= _amount, \\\"sold out\\\");\\n        maxDecreaseSold += _amount;\\n        SkeletonCrew(nft_sales).mintCards(_amount, msg.sender);\\n        _split(msg.value);\\n\\n        emit PurchaseSale(_amount, msg.sender);\\n    }\\n\\n    function whiteListMint(uint64 _amount, address _receiver) public onlyOwner {\\n        SkeletonCrew(nft_sales).mintCards(_amount, _receiver);\\n    }\\n\\n    function salesActive() public view returns (bool) {\\n        return (block.timestamp > sales_start && block.timestamp < sales_end);\\n    }\\n\\n    function whiteListSalesActive() public view returns (bool) {\\n        return (block.timestamp > whitelist_sales &&\\n            block.timestamp < whitelist_sales_end);\\n    }\\n\\n    function sales_how_long_more()\\n        public\\n        view\\n        returns (\\n            uint256 Days,\\n            uint256 Hours,\\n            uint256 Minutes,\\n            uint256 Seconds\\n        )\\n    {\\n        require(block.timestamp < sales_start, \\\"Started\\\");\\n        uint256 gap = sales_start - block.timestamp;\\n        Days = gap / (24 * 60 * 60);\\n        gap = gap % (24 * 60 * 60);\\n        Hours = gap / (60 * 60);\\n        gap = gap % (60 * 60);\\n        Minutes = gap / 60;\\n        Seconds = gap % 60;\\n        return (Days, Hours, Minutes, Seconds);\\n    }\\n\\n    function whitelist_how_long_more()\\n        public\\n        view\\n        returns (\\n            uint256 Days,\\n            uint256 Hours,\\n            uint256 Minutes,\\n            uint256 Seconds\\n        )\\n    {\\n        require(block.timestamp < whitelist_sales, \\\"Started\\\");\\n        uint256 gap = whitelist_sales - block.timestamp;\\n        Days = gap / (24 * 60 * 60);\\n        gap = gap % (24 * 60 * 60);\\n        Hours = gap / (60 * 60);\\n        gap = gap % (60 * 60);\\n        Minutes = gap / 60;\\n        Seconds = gap % 60;\\n        return (Days, Hours, Minutes, Seconds);\\n    }\\n\\n    function changePresigner(address _presigner) external onlyOwner {\\n        presigner = _presigner;\\n    }\\n\\n    function resetSalesStatus(\\n        uint256 _whitelist_sales,\\n        uint256 _sales_start,\\n        address _nft_sales,\\n        bool _setupStatus\\n    ) external onlyOwner {\\n        whitelist_sales = _whitelist_sales;\\n        whitelist_sales_end = _whitelist_sales + 2 days;\\n        sales_start = _sales_start;\\n        sales_end = _sales_start + 12 hours;\\n        nft_sales = _nft_sales;\\n        setupStatus = _setupStatus;\\n    }\\n\\n    function retrieveETH() external onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function retrieveERC20(address _tracker, uint256 amount)\\n        external\\n        onlyOwner\\n    {\\n        IERC20(_tracker).transfer(msg.sender, amount);\\n    }\\n\\n    function retrieve721(address _tracker, uint256 id) external onlyOwner {\\n        IERC721(_tracker).transferFrom(address(this), msg.sender, id);\\n    }\\n\\n    struct theKitchenSink {\\n        uint256 startingPrice;\\n        // Whitelist time\\n        uint256 whitelist_sales;\\n        uint256 whitelist_sales_end;\\n        // DSP\\n        uint256 sales_start;\\n        uint256 sales_end;\\n        address nft_sales;\\n        uint256 sales_duration;\\n        bool setupStatus;\\n        uint256 maxDecreaseSold;\\n        uint256 maxDecreaseNFTs;\\n        uint256 whiteListSold;\\n        uint256 maxWhiteListNFTs;\\n        address presigner;\\n        uint256 whiteListPrice;\\n        uint256 whiteListRemaining;\\n        uint256 decreaseRemaining;\\n    }\\n\\n    function tellEverything() external view returns (theKitchenSink memory) {\\n        return\\n            theKitchenSink(\\n                startingPrice,\\n                whitelist_sales,\\n                whitelist_sales_end,\\n                sales_start,\\n                sales_end,\\n                nft_sales,\\n                sales_duration,\\n                setupStatus,\\n                maxDecreaseSold,\\n                maxDecreaseNFTs,\\n                whiteListSold,\\n                maxWhiteListNFTs,\\n                presigner,\\n                whiteListPrice,\\n                whiteListRemainingTokens(),\\n                decreaseRemainingTokens()\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n        } else if (signature.length == 64) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let vs := mload(add(signature, 0x40))\\n                r := mload(add(signature, 0x20))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/SkeletonCrew.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface SkeletonCrew {\\n    function mintCards(uint256 numberOfCards, address recipient) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_whitelist_sales\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sales_start\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nft_sales\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_presigner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"PurchaseSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"WhiteListSale\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_presigner\",\"type\":\"address\"}],\"name\":\"changePresigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreaseRemainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDecreaseNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDecreaseSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWhiteListNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft_sales\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_whitelist_sales\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sales_start\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nft_sales\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_setupStatus\",\"type\":\"bool\"}],\"name\":\"resetSalesStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tracker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"retrieve721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tracker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retrieveERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salesActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sales_duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sales_end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sales_how_long_more\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Hours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Minutes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Seconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sales_start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tellEverything\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whitelist_sales\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whitelist_sales_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sales_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sales_end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nft_sales\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sales_duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"setupStatus\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxDecreaseSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDecreaseNFTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whiteListSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWhiteListNFTs\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"presigner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"whiteListPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whiteListRemaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decreaseRemaining\",\"type\":\"uint256\"}],\"internalType\":\"struct metaZooSale.theKitchenSink\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_amount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_role\",\"type\":\"uint64\"}],\"name\":\"whiteListBySignature\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_amount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"whiteListMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteListPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteListRemainingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteListSalesActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteListSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist_claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist_how_long_more\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Hours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Minutes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Seconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist_sales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist_sales_end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"metaZooSale","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000061a4f9000000000000000000000000000000000000000000000000000000000061a8ed800000000000000000000000002d366be8fa4d15c289964dd4adf7be6cc5e896e8000000000000000000000000510c2b0b54829e600e12fe9d364dfd7044d2e52e","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}