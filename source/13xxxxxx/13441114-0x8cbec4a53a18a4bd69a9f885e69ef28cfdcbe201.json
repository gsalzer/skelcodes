{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"EnvoyStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract EnvoyStaking is Ownable {\\n    event NewStake(address indexed user, uint256 totalStaked, uint256 totalDays, bool isEmbargo);\\n    event StakeFinished(address indexed user, uint256 totalRewards);\\n    event LockingIncreased(address indexed user, uint256 total);\\n    event LockingReleased(address indexed user, uint256 total);\\n    IERC20 token;\\n    uint256 dailyBonusRate = 10003271876792519; //1,0003271876792519\\n    \\n    uint256 public totalStakes;\\n    uint256 public totalActiveStakes;\\n    uint256 public totalStaked;\\n    uint256 public totalStakeClaimed;\\n    uint256 public totalRewardsClaimed;\\n    \\n    struct Stake {\\n        bool exists;\\n        uint256 createdOn;\\n        uint256 initialAmount;\\n        uint256 totalDays;\\n        bool claimed;\\n        bool isEmbargo;\\n    }\\n    \\n    mapping(address => Stake) stakes;\\n    mapping(address => uint256) public lockings;\\n\\n    constructor(address _token) {\\n        token = IERC20(_token);\\n    }\\n    \\n    function increaseLocking(address _beneficiary, uint256 _total) public onlyOwner {\\n        require(IERC20(token).transferFrom(msg.sender, address(this), _total), \\\"Couldn't take the tokens\\\");\\n        \\n        lockings[_beneficiary] += _total;\\n        \\n        emit LockingIncreased(_beneficiary, _total);\\n    }\\n    \\n    function releaseFromLocking(address _beneficiary, uint256 _total) public onlyOwner {\\n        require(lockings[_beneficiary] >= _total, \\\"Not enough locked tokens\\\");\\n        \\n        lockings[_beneficiary] -= _total;\\n\\n        require(IERC20(token).transfer(_beneficiary, _total), \\\"Couldn't send the tokens\\\");\\n        \\n        emit LockingReleased(_beneficiary, _total);\\n    }\\n\\n    function createEmbargo(address _account, uint256 _totalStake, uint256 _totalDays) public onlyOwner {\\n        _addStake(_account, _totalStake, _totalDays, true);\\n    }\\n    \\n    function createStake(uint256 _totalStake, uint256 _totalDays) public {\\n        _addStake(msg.sender, _totalStake, _totalDays, false);\\n    }\\n    \\n    function _addStake(address _beneficiary, uint256 _totalStake, uint256 _totalDays, bool _isEmbargo) internal {\\n        require(!stakes[_beneficiary].exists, \\\"Stake already created\\\");\\n        require(_totalDays > 29, \\\"The minimum is 30 days\\\");\\n\\n        require(IERC20(token).transferFrom(msg.sender, address(this), _totalStake), \\\"Couldn't take the tokens\\\");\\n        \\n        Stake memory stake = Stake({exists:true,\\n                                    createdOn: block.timestamp, \\n                                    initialAmount:_totalStake, \\n                                    totalDays:_totalDays, \\n                                    claimed:false,\\n                                    isEmbargo:_isEmbargo\\n        });\\n        \\n        stakes[_beneficiary] = stake;\\n                                    \\n        totalActiveStakes++;\\n        totalStakes++;\\n        totalStaked += _totalStake;\\n        \\n        emit NewStake(_beneficiary, _totalStake, _totalDays, _isEmbargo);\\n    }\\n    \\n    function finishStake() public {\\n        require(!stakes[msg.sender].isEmbargo, \\\"This is an embargo\\\");\\n\\n        _finishStake(msg.sender);\\n    }\\n    \\n    function finishEmbargo(address _account) public onlyOwner {\\n        require(stakes[_account].isEmbargo, \\\"Not an embargo\\\");\\n\\n        _finishStake(_account);\\n    }\\n    \\n    function _finishStake(address _account) internal {\\n        require(stakes[_account].exists, \\\"Invalid stake\\\");\\n        require(!stakes[_account].claimed, \\\"Already claimed\\\");\\n\\n        Stake storage stake = stakes[_account];\\n        \\n        uint256 finishesOn = _calculateFinishTimestamp(stake.createdOn, stake.totalDays);\\n        require(block.timestamp > finishesOn, \\\"Can't be finished yet\\\");\\n        \\n        stake.claimed = true;\\n        \\n        uint256 totalRewards = calculateRewards(_account, block.timestamp);\\n\\n        totalActiveStakes -= 1;\\n        totalStakeClaimed += stake.initialAmount;\\n        totalRewardsClaimed += totalRewards;\\n        \\n        require(token.transfer(msg.sender, totalRewards), \\\"Couldn't transfer the tokens\\\");\\n        \\n        emit StakeFinished(msg.sender, totalRewards);\\n    }\\n    \\n    function _truncateTotal(uint256 _total) internal pure returns(uint256) {\\n        return _total / 1e18 * 1e18;\\n    }\\n    \\n    function calculateRewards(address _account, uint256 _date) public view returns (uint256) {\\n        require(stakes[_account].exists, \\\"Invalid stake\\\");\\n\\n        uint256 daysSoFar = (_date - stakes[_account].createdOn) / 1 days;\\n        if (daysSoFar > stakes[_account].totalDays) {\\n            daysSoFar = stakes[_account].totalDays;\\n        }\\n        \\n        uint256 totalRewards = stakes[_account].initialAmount;\\n        \\n        for (uint256 i = 0; i < daysSoFar; i++) {\\n            totalRewards = totalRewards * dailyBonusRate / 1e16;\\n        }\\n        \\n        return _truncateTotal(totalRewards);\\n    }\\n    \\n    function calculateFinishTimestamp(address _account) public view returns (uint256) {\\n        return _calculateFinishTimestamp(stakes[_account].createdOn, stakes[_account].totalDays);\\n    }\\n    \\n    function _calculateFinishTimestamp(uint256 _timestamp, uint256 _totalDays) internal pure returns (uint256) {\\n        return _timestamp + _totalDays * 1 days;\\n    }\\n    \\n    function _extract(uint256 amount, address _sendTo) public onlyOwner {\\n        require(token.transfer(_sendTo, amount));\\n    }\\n    \\n    function getStake(address _account) external view returns (bool _exists, uint256 _createdOn, uint256 _initialAmount, uint256 _totalDays, bool _claimed, bool _isEmbargo, uint256 _finishesOn, uint256 _rewardsSoFar, uint256 _totalRewards) {\\n        Stake memory stake = stakes[_account];\\n        if (!stake.exists) {\\n            return (false, 0, 0, 0, false, false, 0, 0, 0);\\n        }\\n        uint256 finishesOn = calculateFinishTimestamp(_account);\\n        uint256 rewardsSoFar = calculateRewards(_account, block.timestamp);\\n        uint256 totalRewards = calculateRewards(_account, stake.createdOn + stake.totalDays * 1 days);\\n        return (stake.exists, stake.createdOn, stake.initialAmount, stake.totalDays, stake.claimed, stake.isEmbargo, finishesOn, rewardsSoFar, totalRewards);\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LockingIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LockingReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEmbargo\",\"type\":\"bool\"}],\"name\":\"NewStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"name\":\"StakeFinished\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sendTo\",\"type\":\"address\"}],\"name\":\"_extract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"calculateFinishTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDays\",\"type\":\"uint256\"}],\"name\":\"createEmbargo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDays\",\"type\":\"uint256\"}],\"name\":\"createStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"finishEmbargo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_createdOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDays\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_claimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isEmbargo\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_finishesOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsSoFar\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"increaseLocking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"releaseFromLocking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalActiveStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakeClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EnvoyStaking","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002ac8172d8ce1c5ad3d869556fd708801a42c1c0e","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}