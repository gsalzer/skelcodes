{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at BscScan.com on 2021-11-09\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-10-06\r\n*/\r\n\r\n/**\r\n *Submitted for verification at polygonscan.com on 2021-07-19\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public proposedOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Has to be owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _proposedOwner) public onlyOwner {\r\n        require(msg.sender != _proposedOwner, \"Has to be diff than current owner\");\r\n        proposedOwner = _proposedOwner;\r\n    }\r\n\r\n    function claimOwnership() public {\r\n        require(msg.sender == proposedOwner, \"Has to be the proposed owner\");\r\n        emit OwnershipTransferred(owner, proposedOwner);\r\n        owner = proposedOwner;\r\n        proposedOwner = address(0);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\nabstract contract Context {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n \r\n\r\n  function _msgSender() internal view returns (address payable) {\r\n    return payable(msg.sender);\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n// user can stake HDAO to obtain memberships and upgrade to topper tiers.\r\n// stake can generate interest with a certain APY, as well as referal dynamic rewards\r\n\r\ncontract TierSystem is Ownable, Context{\r\n    using SafeMath for uint;\r\n    bool public isAudit=false;\r\n    address public HDAO;\r\n    uint public rate;   // yield \r\n    uint[10] public dynamicRate;\r\n    uint public period; // calm down period\r\n    bool public isReferMode;\r\n    uint public referMode; // two types of refer modes\r\n    uint[4] public threshold;  \r\n    \r\n    enum Tier{None,Bronze,Silver,Gold,Platinum}\r\n    \r\n    // statistics\r\n    uint public totalStake;  // total amount at stake\r\n    uint public totalFrozen; // total amount at frozen status\r\n    uint public withdrawn; // total amount of stake withdrawn\r\n    \r\n    uint public staticAccrued;\r\n    uint public dynamicAccrued;\r\n    \r\n    uint public staticWithdrawn;\r\n    uint public dynamicWithdrawn;\r\n    \r\n    mapping(Tier=>uint) public tierInfo; // members of each tier\r\n\r\n    \r\n    struct UserInfo{\r\n        uint deposit_times;\r\n        address invite;\r\n        uint stake_amount;  // real time on stake \r\n        uint frozen_amount; // unstake amount at frozen status\r\n        uint lastTime; // stake timestamp used for interest calculation, will update at each operation\r\n        uint countdown; // timestamp at unstake, used for calculate frozen period\r\n        \r\n        uint intAccrued; // static interest rewards\r\n        uint dynamicRewards; \r\n        Tier tier;\r\n        uint num_invitor; // number of people this address invited\r\n        \r\n    }\r\n    \r\n    mapping(address=>UserInfo) public userInfo; \r\n    \r\n    \r\n    event ReferMode(bool status, uint mode);\r\n    event Stake(address indexed user, uint amount, uint timestamp);\r\n    event Unstake(address indexed user, uint amount, uint timestamp);\r\n    event Withdraw(address indexed user, uint amount, uint timestamp);\r\n    \r\n    constructor(){\r\n        // initialize tier thresholds\r\n\r\n        owner = _msgSender();\r\n        userInfo[address(this)].deposit_times = 1;\r\n        period = 3 days;\r\n        rate = 18;\r\n        \r\n        threshold[0] = 10000 * 1e18;\r\n        threshold[1] = 100000 * 1e18;\r\n        threshold[2] = 500000 * 1e18;\r\n        threshold[3] = 1000000 * 1e18;\r\n        \r\n        \r\n        dynamicRate[0] = 30;\r\n        dynamicRate[1] = 20;\r\n        dynamicRate[2] = 10;\r\n        dynamicRate[3] = 5;\r\n        dynamicRate[4] = 5;\r\n        dynamicRate[5] = 3;\r\n        dynamicRate[6] = 3;\r\n        dynamicRate[7] = 2;\r\n        dynamicRate[8] = 2;\r\n        dynamicRate[9] = 2;\r\n        \r\n    }\r\n    \r\n    function setAudit()external onlyOwner{\r\n        isAudit = true;\r\n    }\r\n    function getUserTier(address _user) external view returns(uint8){\r\n        return uint8(userInfo[_user].tier);\r\n    }\r\n    \r\n    function getUserStake(address _user)external view returns(uint){\r\n        return userInfo[_user].stake_amount;\r\n    }\r\n    \r\n    function setHDAO(address addr) external onlyOwner{\r\n        HDAO = addr;\r\n    }\r\n    /*\r\n    * set thresholds for each tier level\r\n    */\r\n    function setThreshold(uint[4] memory ts) external onlyOwner{\r\n        for(uint i=0;i<4; i++){\r\n            threshold[i] = ts[i];\r\n        }\r\n    }\r\n    \r\n    /*\r\n     * set calm down period determining unstake forzen time\r\n    */\r\n    function setPeriod(uint p) external onlyOwner{\r\n        period = p;\r\n    }\r\n    \r\n    /*\r\n    * set static yield rate, as percentage\r\n    */\r\n    function setRate(uint r) external onlyOwner{\r\n        rate = r;\r\n    }\r\n    \r\n    /*\r\n    * switch on or off for referal mode\r\n    */\r\n    function setReferMode(bool s, uint mode) external onlyOwner{\r\n        require(mode==1 || mode==2,\"only two mode options\");\r\n        isReferMode = s;\r\n        referMode = mode;\r\n        emit ReferMode(s, mode);\r\n    }\r\n   \r\n    /*\r\n    * stake function, user needs invitor to entry for the first time;\r\n      update static interest rewards since last time;\r\n      upgrade tier spontaneously\r\n    */\r\n    function stake(uint _amount, address _invite) external {\r\n        require(userInfo[_invite].deposit_times > 0 && _invite != _msgSender(), \"invalid invitor\");\r\n        \r\n        \r\n        require(_amount>0,\"amount should be positive\");\r\n        IERC20(HDAO).transferFrom(_msgSender(),address(this),_amount);\r\n        \r\n        if(userInfo[_msgSender()].deposit_times==0){\r\n            tierInfo[Tier.None] += 1;\r\n            userInfo[_msgSender()].invite = _invite;\r\n            userInfo[_invite].num_invitor += 1;\r\n            require(userInfo[_invite].stake_amount >= 10000*1e18 || _invite == address(this),\"invitor should have at least 10000 on stake\");\r\n        }\r\n        \r\n        //checkpoint for interest rewards: if already have stake amount then accumulating interest\r\n        calculateInterest(_msgSender());\r\n        \r\n        // update user info\r\n        userInfo[_msgSender()].deposit_times += 1;\r\n        userInfo[_msgSender()].stake_amount += _amount;\r\n        \r\n       \r\n        \r\n        // upgrade spontaneously\r\n        Tier temp;  // new tier\r\n        Tier tier_user = userInfo[_msgSender()].tier; // original tier\r\n        \r\n        // update user tier level and total tier info \r\n        if(uint8(userInfo[_msgSender()].tier) < uint8(4)){\r\n            // only update if user is not at toppest level\r\n            if(userInfo[_msgSender()].stake_amount >= threshold[3]){\r\n                temp = Tier.Platinum;\r\n                \r\n            }\r\n            else if(userInfo[_msgSender()].stake_amount >= threshold[2]){\r\n                temp = Tier.Gold;\r\n                \r\n            }\r\n            else if(userInfo[_msgSender()].stake_amount >= threshold[1]){\r\n                temp = Tier.Silver;\r\n                \r\n            }\r\n            else if(userInfo[_msgSender()].stake_amount >= threshold[0]){\r\n                temp = Tier.Bronze;\r\n            }\r\n            \r\n            if(tier_user != temp){\r\n                userInfo[_msgSender()].tier = temp;\r\n                tierInfo[tier_user] --;\r\n                tierInfo[temp] ++;\r\n            }\r\n        }\r\n        \r\n        totalStake += _amount;\r\n        emit Stake(_msgSender(), _amount, block.timestamp);\r\n    }\r\n    \r\n    \r\n    /*\r\n    * unstake a certain available amount and frozen;\r\n      degrade tier spontaneously;\r\n      update static rewards;\r\n    */\r\n    function unstake(uint _amount) external {\r\n        require(userInfo[_msgSender()].stake_amount>= _amount,\"insufficient ammout\");\r\n        \r\n        //checkpoint for interest rewards and update timestamp\r\n        calculateInterest(_msgSender());\r\n        \r\n        // update userInfo\r\n        userInfo[_msgSender()].stake_amount -= _amount;\r\n        userInfo[_msgSender()].frozen_amount += _amount;\r\n        userInfo[_msgSender()].countdown = block.timestamp;\r\n        \r\n        // downgrade spontaneously\r\n        Tier temp;  // new tier\r\n        Tier tier_user = userInfo[_msgSender()].tier; // original tier\r\n        \r\n        if(uint8(userInfo[_msgSender()].tier) > uint8(0)){\r\n            if(userInfo[_msgSender()].stake_amount >= threshold[3]){\r\n                temp = Tier.Platinum;\r\n                \r\n            }\r\n            else if(userInfo[_msgSender()].stake_amount >= threshold[2]){\r\n                temp = Tier.Gold;\r\n                \r\n            }\r\n            else if(userInfo[_msgSender()].stake_amount >= threshold[1]){\r\n                temp = Tier.Silver;\r\n                \r\n            }\r\n            else if(userInfo[_msgSender()].stake_amount >= threshold[0]){\r\n                temp = Tier.Bronze;\r\n            }\r\n            \r\n            if(tier_user != temp){\r\n                userInfo[_msgSender()].tier = temp;\r\n                tierInfo[tier_user] --;\r\n                tierInfo[temp] ++;\r\n            }\r\n        }\r\n        \r\n        totalStake -= _amount;\r\n        totalFrozen += _amount; \r\n        emit Unstake(_msgSender(), _amount, block.timestamp);\r\n    }\r\n    \r\n    \r\n    /*\r\n    * user can only withdraw the amount after the frozen period passes\r\n    */\r\n    function withdraw() external{\r\n        uint temp = userInfo[_msgSender()].frozen_amount;\r\n        require(temp > 0, \"no available tokens\");\r\n        require(userInfo[_msgSender()].countdown + period < block.timestamp, \"countdown is not finished\");\r\n        \r\n        userInfo[_msgSender()].frozen_amount = 0;\r\n        IERC20(HDAO).transfer(_msgSender(), temp);\r\n        \r\n        totalFrozen -= temp;\r\n        withdrawn += temp;\r\n        \r\n        emit Withdraw(_msgSender(), temp, block.timestamp);\r\n    }\r\n    \r\n   \r\n   /*\r\n   *  get static interest rewards at a certain APY\r\n      credit dynamicRewards for each layers\r\n   */\r\n   function getStaticRewards() external{\r\n       //checkpoint for interest rewards and update timestamp\r\n       calculateInterest(_msgSender());\r\n       uint interest = userInfo[_msgSender()].intAccrued;\r\n       if(interest==0){revert(\"no rewards\");}\r\n       \r\n       // resist race competetion attack\r\n       userInfo[_msgSender()].intAccrued = 0;\r\n       staticAccrued -= interest; // accrued static interest decreases;\r\n       IERC20(HDAO).transfer(_msgSender(),interest);\r\n       \r\n       // credit 10 layers of invites\r\n       address _invite = userInfo[_msgSender()].invite; // temporary invite variable\r\n       \r\n       // layer number depends on the mode type\r\n       uint layers;\r\n       if(referMode==1){layers = 2;}\r\n       else if(referMode==2){layers=10;}\r\n       require(layers>0,\"layers should be positive\");\r\n       for(uint i=0;i<layers;i++){\r\n           if(!isReferMode){break;}\r\n           \r\n           if(_invite != address(0) && _invite != address(this) && userInfo[_invite].stake_amount >= 10000*1e18){\r\n                if(i==0){\r\n                    userInfo[_invite].dynamicRewards += interest.mul(dynamicRate[i]).div(100);\r\n                    dynamicAccrued += interest.mul(dynamicRate[i]).div(100);\r\n                    \r\n                }\r\n                    \r\n                else if(i==1 && userInfo[_invite].num_invitor>=2){\r\n                    // only users have more than 2 refrees can get layer 2 rewards.\r\n                    userInfo[_invite].dynamicRewards += interest.mul(dynamicRate[i]).div(100);\r\n                    dynamicAccrued += interest.mul(dynamicRate[i]).div(100);\r\n                    \r\n                }else if(i>=2 && userInfo[_invite].num_invitor>=3){\r\n                    // only users invited more than 3 others can get layer 3+ rewards\r\n                    userInfo[_invite].dynamicRewards += interest.mul(dynamicRate[i]).div(100);\r\n                    dynamicAccrued += interest.mul(dynamicRate[i]).div(100);\r\n                }\r\n                \r\n                \r\n                _invite = userInfo[_invite].invite;\r\n                \r\n           }\r\n           else {\r\n               break;\r\n           }\r\n       }\r\n       \r\n       staticWithdrawn += interest; // paid static interest increments\r\n   }\r\n   \r\n  \r\n   /*\r\n   *  get dynamic rewards from inviting others\r\n   */\r\n   function getDynamicRewards() external{\r\n       require(userInfo[_msgSender()].dynamicRewards>0,\"No Dynamic Rewards\");\r\n       uint rewards = userInfo[_msgSender()].dynamicRewards;\r\n       userInfo[_msgSender()].dynamicRewards = 0;\r\n       dynamicAccrued -= rewards; // accrued dynamic rewards decreases\r\n       IERC20(HDAO).transfer(_msgSender(), rewards);\r\n       \r\n       dynamicWithdrawn += rewards; // paid dynamic rewards\r\n   }\r\n   \r\n   \r\n   /*\r\n   * query real-time static rewards for each user, for query purpose only, not modify the state variable\r\n     for dynamic rewards, retrieve userInfo directly\r\n   */\r\n   function queryRewards(address _user) external view returns(uint){\r\n       require(userInfo[_user].deposit_times>0 ,\"no stake record\");\r\n       uint temp_interest;\r\n       if(userInfo[_user].stake_amount==0){return userInfo[_user].intAccrued;}\r\n       else{temp_interest = userInfo[_user].stake_amount * (block.timestamp - userInfo[_user].lastTime) * rate/(100*365 days);}\r\n       \r\n       return temp_interest + userInfo[_user].intAccrued;\r\n   }\r\n   \r\n   \r\n   /*\r\n   * calculate static interest rewards, \r\n     update state variable i.e. accrued interest\r\n     update timestamp for last time operation\r\n   */\r\n   function calculateInterest(address _user) internal{\r\n       uint temp_interest = userInfo[_msgSender()].stake_amount * (block.timestamp - userInfo[_user].lastTime) * rate/(100*365 days);\r\n       \r\n       userInfo[_user].intAccrued += temp_interest;\r\n       userInfo[_user].lastTime = block.timestamp;\r\n       staticAccrued += temp_interest;\r\n   }\r\n   \r\n   /*\r\n   * pull all balance back in case of emergency\r\n     this interface called just before audit contract is ok,if audited ,will be killed\r\n\r\n   */\r\n   function transferBalance(address _account) external onlyOwner{\r\n       require(!isAudit,\"after audit not allowed\");\r\n       uint temp=IERC20(HDAO).balanceOf(address(this));\r\n       IERC20(HDAO).transfer(_account, temp);\r\n   }\r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mode\",\"type\":\"uint256\"}],\"name\":\"ReferMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dynamicRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDynamicRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaticRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTier\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAudit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReferMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"queryRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAudit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setHDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"p\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"mode\",\"type\":\"uint256\"}],\"name\":\"setReferMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"ts\",\"type\":\"uint256[4]\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_invite\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staticAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staticWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TierSystem.Tier\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tierInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"transferBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit_times\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"invite\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"frozen_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countdown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intAccrued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynamicRewards\",\"type\":\"uint256\"},{\"internalType\":\"enum TierSystem.Tier\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"num_invitor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TierSystem","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0d4bcf88a583506017e7a3ccd711c52eee13ef2909d72634dd22e9c351827bd1"}]}