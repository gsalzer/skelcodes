{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n    BETA POOL :\r\n    Pool Details - 10%, 7 days (1 Week)\r\n    Early Maturity - 1/2 Week ,3.5 Days, 20% Of Pool Rewards\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable  {\r\n    address payable public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        _owner = payable(msg.sender);\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface Token {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n}\r\n\r\n\r\ncontract MU_StakePool is Ownable{\r\n    \r\n    using SafeMath for uint;\r\n\r\n    struct User {\r\n        uint256 poolBal;\r\n        uint40 pool_deposit_time;\r\n        uint256 total_deposits;\r\n        uint256 pool_payouts;\r\n        uint256 rewardEarned;\r\n        uint256 rewardUnWithdrawed;\r\n        uint256 earlyRewardUnWithdrawed;\r\n        uint256 afterEarlyRewardUnWithdrawed;\r\n    }\r\n    \r\n    address public tokenAddr;\r\n    uint256 public Pool = 100000;\r\n    uint256 public PoolBalance;\r\n    uint256 public tokenDecimal = 18;\r\n\r\n    uint256 public poolNumber = 1;\r\n    uint256 public poolRewardPercent = 10;\r\n    uint256 public poolDurationMonths = 1;\r\n   \r\n\r\n    mapping(address => User) public users;\r\n\r\n    event TokenTransfer(address beneficiary, uint amount);\r\n    event PoolTransfer(address beneficiary, uint amount);\r\n    event RewardClaimed(address beneficiary, uint amount);\r\n    \r\n    mapping (address => uint256) public balances;\r\n\r\n\r\n    constructor(address _tokenAddr) {\r\n        tokenAddr = _tokenAddr;\r\n    }\r\n    \r\n    /* Recieve Accidental ETH Transfers */\r\n    receive() payable external {\r\n        _owner.transfer(msg.value);\r\n        balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n    }\r\n\r\n\r\n    /* Stake Token Function */\r\n    function PoolStake(uint256  _amount) public returns (bool) {\r\n        require(_amount <= Token(tokenAddr).balanceOf(msg.sender),\"Token Balance of user is less\");\r\n        require(Token(tokenAddr).transferFrom(msg.sender,address(this), _amount),\"BEP20: Amount Transfer Failed Check id Amount is Approved\");\r\n        PoolBalance += _amount;\r\n        require(PoolBalance <= Pool * (10**tokenDecimal),\"Pool is Full, Enter Amount Equal to Pool Holding or remaining pool balance\");\r\n        require(users[msg.sender].poolBal == 0,\"Already Staked\");\r\n        users[msg.sender].poolBal = _amount;\r\n        users[msg.sender].total_deposits += _amount;\r\n        users[msg.sender].pool_deposit_time = uint40(block.timestamp);\r\n        users[msg.sender].rewardUnWithdrawed = (_amount*10)/100; // 10% Total Reward After 1 Week Stake\r\n        users[msg.sender].earlyRewardUnWithdrawed = (((_amount*10)/100)*20)/100; // 20% of Reward After 3.5 Days Stake - Early Maturity\r\n        users[msg.sender].afterEarlyRewardUnWithdrawed = (((_amount*10)/100)*80)/100; // 80% of Reward After 1 week Stake Early Withdrawal - Full Maturity\r\n        emit PoolTransfer(msg.sender, _amount);\r\n        return true;\r\n    }\r\n    \r\n    /* Claims Principal Token and Rewards Collected */\r\n    function claimPool() public returns(bool){\r\n        require(users[msg.sender].poolBal > 0,\"There is no deposit for this address in Pool\");\r\n        require(block.timestamp > users[msg.sender].pool_deposit_time + 5040 minutes, \"Minimum 3.5 Days to be completed - 1/2 Week\");\r\n        \r\n        if(block.timestamp > users[msg.sender].pool_deposit_time + 5040 minutes && block.timestamp < users[msg.sender].pool_deposit_time + 7 days){\r\n            \r\n            require(Token(tokenAddr).transfer(msg.sender, users[msg.sender].earlyRewardUnWithdrawed),\"Cannot Transfer Reward Funds\");\r\n            users[msg.sender].rewardEarned += (users[msg.sender].earlyRewardUnWithdrawed);\r\n            users[msg.sender].rewardUnWithdrawed = users[msg.sender].rewardUnWithdrawed - users[msg.sender].earlyRewardUnWithdrawed;\r\n            users[msg.sender].earlyRewardUnWithdrawed = 0;\r\n            emit RewardClaimed(msg.sender, users[msg.sender].earlyRewardUnWithdrawed);\r\n            return true;\r\n\r\n        }else{\r\n            require(block.timestamp > users[msg.sender].pool_deposit_time + 7 days, \"Minimum 7 Days to be completed  - 1 Week\");\r\n            uint256 amount = users[msg.sender].poolBal;\r\n            require(Token(tokenAddr).transfer(msg.sender, amount),\"Cannot Transfer Principal Funds\");\r\n            require(Token(tokenAddr).transfer(msg.sender, users[msg.sender].earlyRewardUnWithdrawed + users[msg.sender].afterEarlyRewardUnWithdrawed),\"Cannot Transfer Reward Funds\");\r\n            \r\n            uint256 totalReward= (users[msg.sender].earlyRewardUnWithdrawed + users[msg.sender].afterEarlyRewardUnWithdrawed);\r\n            users[msg.sender].rewardEarned += totalReward;\r\n            \r\n            users[msg.sender].rewardUnWithdrawed = users[msg.sender].rewardUnWithdrawed - (users[msg.sender].earlyRewardUnWithdrawed + users[msg.sender].afterEarlyRewardUnWithdrawed);\r\n            users[msg.sender].earlyRewardUnWithdrawed = 0;\r\n            users[msg.sender].afterEarlyRewardUnWithdrawed = 0;\r\n            users[msg.sender].poolBal = 0;\r\n            users[msg.sender].pool_deposit_time = 0;\r\n            users[msg.sender].pool_payouts += amount;\r\n            \r\n            emit TokenTransfer(msg.sender, amount);\r\n            emit RewardClaimed(msg.sender, totalReward);\r\n            return true;\r\n        \r\n            \r\n        }\r\n\r\n            \r\n    }\r\n\r\n    \r\n    /* Check Token Balance inside Contract */\r\n    function tokenBalance() public view returns (uint256){\r\n        return Token(tokenAddr).balanceOf(address(this));\r\n    }\r\n\r\n    /* Check ETH Balance inside Contract */\r\n    function ethBalance() public view returns (uint256){\r\n        return address(this).balance;\r\n    }\r\n\r\n    /* Calculate Remaining Staking Claim time of Users */\r\n    function stakeTimeRemaining(address _userAdd) public view returns (uint256){\r\n        if(users[_userAdd].pool_deposit_time > 0){\r\n            uint256 stakeTime = users[_userAdd].pool_deposit_time + 7 days;\r\n            if(stakeTime > block.timestamp){\r\n                return (stakeTime - block.timestamp);\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    /* Calculate Early Remaining Staking Claim time of Users */\r\n    function earlyStakeTimeRemaining(address _userAdd) public view returns (uint256){\r\n        if(users[_userAdd].pool_deposit_time > 0){\r\n            uint256 stakeTime = users[_userAdd].pool_deposit_time + 5040 minutes;\r\n            if(stakeTime > block.timestamp){\r\n                return (stakeTime - block.timestamp);\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /* Admin function to update the Pool Total Stake Capacity */\r\n    function updatePoolCapacity(uint256 PoolAmount) public onlyOwner() returns(bool){\r\n        Pool = PoolAmount;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /* Maturity Date */\r\n    function maturityDate(address userAdd) public view returns(uint256){\r\n        return (users[userAdd].pool_deposit_time + 7 days);\r\n    }\r\n    \r\n    /* Early Maturity Date */\r\n    function earlyMaturityDate(address userAdd) public view returns(uint256){\r\n        return (users[userAdd].pool_deposit_time + 5040 minutes);\r\n    }\r\n    \r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PoolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PoolStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAdd\",\"type\":\"address\"}],\"name\":\"earlyMaturityDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAdd\",\"type\":\"address\"}],\"name\":\"earlyStakeTimeRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAdd\",\"type\":\"address\"}],\"name\":\"maturityDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolDurationMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAdd\",\"type\":\"address\"}],\"name\":\"stakeTimeRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"PoolAmount\",\"type\":\"uint256\"}],\"name\":\"updatePoolCapacity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolBal\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"pool_deposit_time\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"total_deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pool_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardUnWithdrawed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyRewardUnWithdrawed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"afterEarlyRewardUnWithdrawed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MU_StakePool","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009ea1ae46c15a4164b74463bc26f8aa3b0eea2e6e","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://89a5687b9d94b5d113bfa74610d2b9d8afc2241de27b4d862f6657dc07d1e19c"}]}