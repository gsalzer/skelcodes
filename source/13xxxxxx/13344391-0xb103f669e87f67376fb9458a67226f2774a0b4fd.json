{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StonksStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ninterface IRouter {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IDaoL1Vault is IERC20Upgradeable {\\r\\n    function deposit(uint amount) external;\\r\\n    function withdraw(uint share) external returns (uint);\\r\\n    function getAllPoolInUSD() external view returns (uint);\\r\\n    function getAllPoolInETH() external view returns (uint);\\r\\n}\\r\\n\\r\\ninterface IChainlink {\\r\\n    function latestAnswer() external view returns (int256);\\r\\n}\\r\\n\\r\\ncontract StonksStrategy is Initializable, OwnableUpgradeable {\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    IERC20Upgradeable constant UST = IERC20Upgradeable(0xa47c8bf37f92aBed4A126BDA807A7b7498661acD);\\r\\n    IERC20Upgradeable constant mMSFT = IERC20Upgradeable(0x41BbEDd7286dAab5910a1f15d12CBda839852BD7);\\r\\n    IERC20Upgradeable constant mTWTR = IERC20Upgradeable(0xEdb0414627E6f1e3F082DE65cD4F9C693D78CCA9);\\r\\n    IERC20Upgradeable constant mTSLA = IERC20Upgradeable(0x21cA39943E91d704678F5D00b6616650F066fD63);\\r\\n    IERC20Upgradeable constant mGOOGL = IERC20Upgradeable(0x59A921Db27Dd6d4d974745B7FfC5c33932653442);\\r\\n    IERC20Upgradeable constant mAMZN = IERC20Upgradeable(0x0cae9e4d663793c2a2A0b211c1Cf4bBca2B9cAa7);\\r\\n    IERC20Upgradeable constant mAAPL = IERC20Upgradeable(0xd36932143F6eBDEDD872D5Fb0651f4B72Fd15a84);\\r\\n    IERC20Upgradeable constant mNFLX = IERC20Upgradeable(0xC8d674114bac90148d11D3C1d33C61835a0F9DCD);\\r\\n\\r\\n    IERC20Upgradeable constant mMSFTUST = IERC20Upgradeable(0xeAfAD3065de347b910bb88f09A5abE580a09D655);\\r\\n    IERC20Upgradeable constant mTWTRUST = IERC20Upgradeable(0x34856be886A2dBa5F7c38c4df7FD86869aB08040);\\r\\n    IERC20Upgradeable constant mTSLAUST = IERC20Upgradeable(0x5233349957586A8207c52693A959483F9aeAA50C);\\r\\n    IERC20Upgradeable constant mGOOGLUST = IERC20Upgradeable(0x4b70ccD1Cf9905BE1FaEd025EADbD3Ab124efe9a);\\r\\n    IERC20Upgradeable constant mAMZNUST = IERC20Upgradeable(0x0Ae8cB1f57e3b1b7f4f5048743710084AA69E796);\\r\\n    IERC20Upgradeable constant mAAPLUST = IERC20Upgradeable(0xB022e08aDc8bA2dE6bA4fECb59C6D502f66e953B);\\r\\n    IERC20Upgradeable constant mNFLXUST = IERC20Upgradeable(0xC99A74145682C4b4A6e9fa55d559eb49A6884F75);\\r\\n\\r\\n    IRouter constant uniRouter = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n\\r\\n    IDaoL1Vault public mMSFTUSTVault;\\r\\n    IDaoL1Vault public mTWTRUSTVault;\\r\\n    IDaoL1Vault public mTSLAUSTVault;\\r\\n    IDaoL1Vault public mGOOGLUSTVault;\\r\\n    IDaoL1Vault public mAMZNUSTVault;\\r\\n    IDaoL1Vault public mAAPLUSTVault;\\r\\n    IDaoL1Vault public mNFLXUSTVault;\\r\\n\\r\\n    address public vault;\\r\\n    uint public watermark; // In USD (18 decimals)\\r\\n    uint public profitFeePerc;\\r\\n\\r\\n    event TargetComposition (uint targetPool);\\r\\n    event CurrentComposition (\\r\\n        uint mMSFTUSTCurrentPool, uint mTWTRUSTCurrentPool, uint mTSLAUSTCurrentPool, uint mGOOGLUSTCurrentPool,\\r\\n        uint mAMZNUSTCurrentPool, uint mAAPLUSTCurrentPool, uint mNFLXUSTCurrentPool\\r\\n    );\\r\\n    event InvestMMSFTUST(uint USTAmtIn, uint mMSFTUSTAmt);\\r\\n    event InvestMTWTRUST(uint USTAmtIn, uint mTWTRUSTAmt);\\r\\n    event InvestMTSLAUST(uint USTAmtIn, uint mTSLAUSTAmt);\\r\\n    event InvestMGOOGLUST(uint USTAmtIn, uint mGOOGLUSTAmt);\\r\\n    event InvestMAMZNUST(uint USTAmtIn, uint mAMZNUSTAmt);\\r\\n    event InvestMAAPLUST(uint USTAmtIn, uint mAAPLUSTAmt);\\r\\n    event InvestMNFLXUST(uint USTAmtIn, uint mNFLXUSTAmt);\\r\\n    event Withdraw(uint amtWithdraw, uint USTAmtOut);\\r\\n    event WithdrawMMSFTUST(uint lpTokenAmt, uint USTAmt);\\r\\n    event WithdrawMTWTRUST(uint lpTokenAmt, uint USTAmt);\\r\\n    event WithdrawMTSLAUST(uint lpTokenAmt, uint USTAmt);\\r\\n    event WithdrawMGOOGLUST(uint lpTokenAmt, uint USTAmt);\\r\\n    event WithdrawMAMZNUST(uint lpTokenAmt, uint USTAmt);\\r\\n    event WithdrawMAAPLUST(uint lpTokenAmt, uint USTAmt);\\r\\n    event WithdrawMNFLXUST(uint lpTokenAmt, uint USTAmt);\\r\\n    event CollectProfitAndUpdateWatermark(uint currentWatermark, uint lastWatermark, uint fee);\\r\\n    event AdjustWatermark(uint currentWatermark, uint lastWatermark);\\r\\n    event Reimburse(uint USTAmt);\\r\\n    event EmergencyWithdraw(uint USTAmt);\\r\\n\\r\\n    modifier onlyVault {\\r\\n        require(msg.sender == vault, \\\"Only vault\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        IDaoL1Vault _mMSFTUSTVault,\\r\\n        IDaoL1Vault _mTWTRUSTVault,\\r\\n        IDaoL1Vault _mTSLAUSTVault,\\r\\n        IDaoL1Vault _mGOOGLUSTVault,\\r\\n        IDaoL1Vault _mAMZNUSTVault,\\r\\n        IDaoL1Vault _mAAPLUSTVault,\\r\\n        IDaoL1Vault _mNFLXUSTVault\\r\\n    ) external initializer {\\r\\n        __Ownable_init();\\r\\n\\r\\n        mMSFTUSTVault = _mMSFTUSTVault;\\r\\n        mTWTRUSTVault = _mTWTRUSTVault;\\r\\n        mTSLAUSTVault = _mTSLAUSTVault;\\r\\n        mGOOGLUSTVault = _mGOOGLUSTVault;\\r\\n        mAMZNUSTVault = _mAMZNUSTVault;\\r\\n        mAAPLUSTVault = _mAAPLUSTVault;\\r\\n        mNFLXUSTVault = _mNFLXUSTVault;\\r\\n\\r\\n        profitFeePerc = 2000;\\r\\n\\r\\n        UST.safeApprove(address(uniRouter), type(uint).max);\\r\\n        mMSFT.safeApprove(address(uniRouter), type(uint).max);\\r\\n        mTWTR.safeApprove(address(uniRouter), type(uint).max);\\r\\n        mTSLA.safeApprove(address(uniRouter), type(uint).max);\\r\\n        mGOOGL.safeApprove(address(uniRouter), type(uint).max);\\r\\n        mAMZN.safeApprove(address(uniRouter), type(uint).max);\\r\\n        mAAPL.safeApprove(address(uniRouter), type(uint).max);\\r\\n        mNFLX.safeApprove(address(uniRouter), type(uint).max);\\r\\n\\r\\n        mMSFTUST.safeApprove(address(mMSFTUSTVault), type(uint).max);\\r\\n        mMSFTUST.safeApprove(address(uniRouter), type(uint).max);\\r\\n        mTWTRUST.safeApprove(address(mTWTRUSTVault), type(uint).max);\\r\\n        mTWTRUST.safeApprove(address(uniRouter), type(uint).max);\\r\\n        mTSLAUST.safeApprove(address(mTSLAUSTVault), type(uint).max);\\r\\n        mTSLAUST.safeApprove(address(uniRouter), type(uint).max);\\r\\n        mGOOGLUST.safeApprove(address(mGOOGLUSTVault), type(uint).max);\\r\\n        mGOOGLUST.safeApprove(address(uniRouter), type(uint).max);\\r\\n        mAMZNUST.safeApprove(address(mAMZNUSTVault), type(uint).max);\\r\\n        mAMZNUST.safeApprove(address(uniRouter), type(uint).max);\\r\\n        mAAPLUST.safeApprove(address(mAAPLUSTVault), type(uint).max);\\r\\n        mAAPLUST.safeApprove(address(uniRouter), type(uint).max);\\r\\n        mNFLXUST.safeApprove(address(mNFLXUSTVault), type(uint).max);\\r\\n        mNFLXUST.safeApprove(address(uniRouter), type(uint).max);\\r\\n    }\\r\\n\\r\\n    function invest(uint USTAmt) external onlyVault {\\r\\n        UST.safeTransferFrom(vault, address(this), USTAmt);\\r\\n\\r\\n        uint[] memory pools = getEachPoolInUSD();\\r\\n        uint pool = pools[0] + pools[1] + pools[2] + pools[3] + pools[4] + pools[5] + pools[6] + USTAmt;\\r\\n        uint targetPool = pool / 7;\\r\\n\\r\\n        // Rebalancing invest\\r\\n        if (\\r\\n            targetPool > pools[0] &&\\r\\n            targetPool > pools[1] &&\\r\\n            targetPool > pools[2] &&\\r\\n            targetPool > pools[3] &&\\r\\n            targetPool > pools[4] &&\\r\\n            targetPool > pools[5] &&\\r\\n            targetPool > pools[6]\\r\\n        ) {\\r\\n            investMMSFTUST(targetPool - pools[0]);\\r\\n            investMTWTRUST(targetPool - pools[1]);\\r\\n            investMTSLAUST(targetPool - pools[2]);\\r\\n            investMGOOGLUST(targetPool - pools[3]);\\r\\n            investMAMZNUST(targetPool - pools[4]);\\r\\n            investMAAPLUST(targetPool - pools[5]);\\r\\n            investMNFLXUST(targetPool - pools[6]);\\r\\n        } else {\\r\\n            uint furthest;\\r\\n            uint farmIndex;\\r\\n            uint diff;\\r\\n\\r\\n            if (targetPool > pools[0]) {\\r\\n                diff = targetPool - pools[0];\\r\\n                furthest = diff;\\r\\n                farmIndex = 0;\\r\\n            }\\r\\n            if (targetPool > pools[1]) {\\r\\n                diff = targetPool - pools[1];\\r\\n                if (diff > furthest) {\\r\\n                    furthest = diff;\\r\\n                    farmIndex = 1;\\r\\n                }\\r\\n            }\\r\\n            if (targetPool > pools[2]) {\\r\\n                diff = targetPool - pools[2];\\r\\n                if (diff > furthest) {\\r\\n                    furthest = diff;\\r\\n                    farmIndex = 2;\\r\\n                }\\r\\n            }\\r\\n            if (targetPool > pools[3]) {\\r\\n                diff = targetPool - pools[3];\\r\\n                if (diff > furthest) {\\r\\n                    furthest = diff;\\r\\n                    farmIndex = 3;\\r\\n                }\\r\\n            }\\r\\n            if (targetPool > pools[4]) {\\r\\n                diff = targetPool - pools[4];\\r\\n                if (diff > furthest) {\\r\\n                    furthest = diff;\\r\\n                    farmIndex = 4;\\r\\n                }\\r\\n            }\\r\\n            if (targetPool > pools[5]) {\\r\\n                diff = targetPool - pools[5];\\r\\n                if (diff > furthest) {\\r\\n                    furthest = diff;\\r\\n                    farmIndex = 5;\\r\\n                }\\r\\n            }\\r\\n            if (targetPool > pools[6]) {\\r\\n                diff = targetPool - pools[6];\\r\\n                if (diff > furthest) {\\r\\n                    furthest = diff;\\r\\n                    farmIndex = 6;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (farmIndex == 0) investMMSFTUST(USTAmt);\\r\\n            else if (farmIndex == 1) investMTWTRUST(USTAmt);\\r\\n            else if (farmIndex == 2) investMTSLAUST(USTAmt);\\r\\n            else if (farmIndex == 3) investMGOOGLUST(USTAmt);\\r\\n            else if (farmIndex == 4) investMAMZNUST(USTAmt);\\r\\n            else if (farmIndex == 5) investMNFLXUST(USTAmt);\\r\\n            else investMNFLXUST(USTAmt);\\r\\n        }\\r\\n\\r\\n        emit TargetComposition(targetPool);\\r\\n        emit CurrentComposition(pools[0], pools[1], pools[2], pools[3], pools[4], pools[5], pools[6]);\\r\\n    }\\r\\n\\r\\n    function investMMSFTUST(uint USTAmt) private {\\r\\n        uint halfUST = USTAmt / 2;\\r\\n        uint mMSFTAmt = swap(address(UST), address(mMSFT), halfUST, 0);\\r\\n        (,,uint mMSFTUSTAmt) = uniRouter.addLiquidity(address(mMSFT), address(UST), mMSFTAmt, halfUST, 0, 0, address(this), block.timestamp);\\r\\n        mMSFTUSTVault.deposit(mMSFTUSTAmt);\\r\\n        emit InvestMMSFTUST(USTAmt, mMSFTUSTAmt);\\r\\n    }\\r\\n\\r\\n    function investMTWTRUST(uint USTAmt) private {\\r\\n        uint halfUST = USTAmt / 2;\\r\\n        uint mTWTRAmt = swap(address(UST), address(mTWTR), halfUST, 0);\\r\\n        (,,uint mTWTRUSTAmt) = uniRouter.addLiquidity(address(mTWTR), address(UST), mTWTRAmt, halfUST, 0, 0, address(this), block.timestamp);\\r\\n        mTWTRUSTVault.deposit(mTWTRUSTAmt);\\r\\n        emit InvestMTWTRUST(USTAmt, mTWTRUSTAmt);\\r\\n    }\\r\\n\\r\\n    function investMTSLAUST(uint USTAmt) private {\\r\\n        uint halfUST = USTAmt / 2;\\r\\n        uint mTSLAAmt = swap(address(UST), address(mTSLA), halfUST, 0);\\r\\n        (,,uint mTSLAUSTAmt) = uniRouter.addLiquidity(address(mTSLA), address(UST), mTSLAAmt, halfUST, 0, 0, address(this), block.timestamp);\\r\\n        mTSLAUSTVault.deposit(mTSLAUSTAmt);\\r\\n        emit InvestMTSLAUST(USTAmt, mTSLAUSTAmt);\\r\\n    }\\r\\n\\r\\n    function investMGOOGLUST(uint USTAmt) private {\\r\\n        uint halfUST = USTAmt / 2;\\r\\n        uint mGOOGLAmt = swap(address(UST), address(mGOOGL), halfUST, 0);\\r\\n        (,,uint mGOOGLUSTAmt) = uniRouter.addLiquidity(address(mGOOGL), address(UST), mGOOGLAmt, halfUST, 0, 0, address(this), block.timestamp);\\r\\n        mGOOGLUSTVault.deposit(mGOOGLUSTAmt);\\r\\n        emit InvestMGOOGLUST(USTAmt, mGOOGLUSTAmt);\\r\\n    }\\r\\n\\r\\n    function investMAMZNUST(uint USTAmt) private {\\r\\n        uint halfUST = USTAmt / 2;\\r\\n        uint mAMZNAmt = swap(address(UST), address(mAMZN), halfUST, 0);\\r\\n        (,,uint mAMZNUSTAmt) = uniRouter.addLiquidity(address(mAMZN), address(UST), mAMZNAmt, halfUST, 0, 0, address(this), block.timestamp);\\r\\n        mAMZNUSTVault.deposit(mAMZNUSTAmt);\\r\\n        emit InvestMAMZNUST(USTAmt, mAMZNUSTAmt);\\r\\n    }\\r\\n\\r\\n    function investMAAPLUST(uint USTAmt) private {\\r\\n        uint halfUST = USTAmt / 2;\\r\\n        uint mAAPLAmt = swap(address(UST), address(mAAPL), halfUST, 0);\\r\\n        (,,uint mAAPLUSTAmt) = uniRouter.addLiquidity(address(mAAPL), address(UST), mAAPLAmt, halfUST, 0, 0, address(this), block.timestamp);\\r\\n        mAAPLUSTVault.deposit(mAAPLUSTAmt);\\r\\n        emit InvestMAAPLUST(USTAmt, mAAPLUSTAmt);\\r\\n    }\\r\\n\\r\\n    function investMNFLXUST(uint USTAmt) private {\\r\\n        uint halfUST = USTAmt / 2;\\r\\n        uint mNFLXAmt = swap(address(UST), address(mNFLX), halfUST, 0);\\r\\n        (,,uint mNFLXUSTAmt) = uniRouter.addLiquidity(address(mNFLX), address(UST), mNFLXAmt, halfUST, 0, 0, address(this), block.timestamp);\\r\\n        mNFLXUSTVault.deposit(mNFLXUSTAmt);\\r\\n        emit InvestMNFLXUST(USTAmt, mNFLXUSTAmt);\\r\\n    }\\r\\n\\r\\n    /// @param amount Amount to withdraw in USD\\r\\n    function withdraw(uint amount, uint[] calldata tokenPrice) external onlyVault returns (uint USTAmt) {\\r\\n        uint sharePerc = amount * 1e18 / getAllPoolInUSD();\\r\\n        uint USTAmtBefore = UST.balanceOf(address(this));\\r\\n        withdrawMMSFTUST(sharePerc, tokenPrice[0]);\\r\\n        withdrawMTWTRUST(sharePerc, tokenPrice[1]);\\r\\n        withdrawMTSLAUST(sharePerc, tokenPrice[2]);\\r\\n        withdrawMGOOGLUST(sharePerc, tokenPrice[3]);\\r\\n        withdrawMAMZNUST(sharePerc, tokenPrice[4]);\\r\\n        withdrawMAAPLUST(sharePerc, tokenPrice[5]);\\r\\n        withdrawMNFLXUST(sharePerc, tokenPrice[6]);\\r\\n        USTAmt = UST.balanceOf(address(this)) - USTAmtBefore;\\r\\n        UST.safeTransfer(vault, USTAmt);\\r\\n        emit Withdraw(amount, USTAmt);\\r\\n    }\\r\\n\\r\\n    function withdrawMMSFTUST(uint sharePerc, uint mMSFTPrice) private {\\r\\n        uint mMSFTUSTAmt = mMSFTUSTVault.withdraw(mMSFTUSTVault.balanceOf(address(this)) * sharePerc / 1e18);\\r\\n        (uint mMSFTAmt, uint USTAmt) = uniRouter.removeLiquidity(address(mMSFT), address(UST), mMSFTUSTAmt, 0, 0, address(this), block.timestamp);\\r\\n        uint _USTAmt = swap(address(mMSFT), address(UST), mMSFTAmt, mMSFTAmt * mMSFTPrice / 1e18);\\r\\n        emit WithdrawMMSFTUST(mMSFTUSTAmt, USTAmt + _USTAmt);\\r\\n    }\\r\\n    \\r\\n    function withdrawMTWTRUST(uint sharePerc, uint mTWTRPrice) private {\\r\\n        uint mTWTRUSTAmt = mTWTRUSTVault.withdraw(mTWTRUSTVault.balanceOf(address(this)) * sharePerc / 1e18);\\r\\n        (uint mTWTRAmt, uint USTAmt) = uniRouter.removeLiquidity(address(mTWTR), address(UST), mTWTRUSTAmt, 0, 0, address(this), block.timestamp);\\r\\n        uint _USTAmt = swap(address(mTWTR), address(UST), mTWTRAmt, mTWTRAmt * mTWTRPrice / 1e18);\\r\\n        emit WithdrawMTWTRUST(mTWTRUSTAmt, USTAmt + _USTAmt);\\r\\n    }\\r\\n\\r\\n    function withdrawMTSLAUST(uint sharePerc, uint mTSLAPrice) private {\\r\\n        uint mTSLAUSTAmt = mTSLAUSTVault.withdraw(mTSLAUSTVault.balanceOf(address(this)) * sharePerc / 1e18);\\r\\n        (uint mTSLAAmt, uint USTAmt) = uniRouter.removeLiquidity(address(mTSLA), address(UST), mTSLAUSTAmt, 0, 0, address(this), block.timestamp);\\r\\n        uint _USTAmt = swap(address(mTSLA), address(UST), mTSLAAmt, mTSLAAmt * mTSLAPrice / 1e18);\\r\\n        emit WithdrawMTSLAUST(mTSLAUSTAmt, USTAmt + _USTAmt);\\r\\n    }\\r\\n\\r\\n    function withdrawMGOOGLUST(uint sharePerc, uint mGOOGLPrice) private {\\r\\n        uint mGOOGLUSTAmt = mGOOGLUSTVault.withdraw(mGOOGLUSTVault.balanceOf(address(this)) * sharePerc / 1e18);\\r\\n        (uint mGOOGLAmt, uint USTAmt) = uniRouter.removeLiquidity(address(mGOOGL), address(UST), mGOOGLUSTAmt, 0, 0, address(this), block.timestamp);\\r\\n        uint _USTAmt = swap(address(mGOOGL), address(UST), mGOOGLAmt, mGOOGLAmt * mGOOGLPrice / 1e18);\\r\\n        emit WithdrawMGOOGLUST(mGOOGLUSTAmt, USTAmt + _USTAmt);\\r\\n    }\\r\\n\\r\\n    function withdrawMAMZNUST(uint sharePerc, uint mAMZNPrice) private {\\r\\n        uint mAMZNUSTAmt = mAMZNUSTVault.withdraw(mAMZNUSTVault.balanceOf(address(this)) * sharePerc / 1e18);\\r\\n        (uint mAMZNAmt, uint USTAmt) = uniRouter.removeLiquidity(address(mAMZN), address(UST), mAMZNUSTAmt, 0, 0, address(this), block.timestamp);\\r\\n        uint _USTAmt = swap(address(mAMZN), address(UST), mAMZNAmt, mAMZNAmt * mAMZNPrice / 1e18);\\r\\n        emit WithdrawMAMZNUST(mAMZNUSTAmt, USTAmt + _USTAmt);\\r\\n    }\\r\\n\\r\\n    function withdrawMAAPLUST(uint sharePerc, uint mAAPLPrice) private {\\r\\n        uint mAAPLUSTAmt = mAAPLUSTVault.withdraw(mAAPLUSTVault.balanceOf(address(this)) * sharePerc / 1e18);\\r\\n        (uint mAAPLAmt, uint USTAmt) = uniRouter.removeLiquidity(address(mAAPL), address(UST), mAAPLUSTAmt, 0, 0, address(this), block.timestamp);\\r\\n        uint _USTAmt = swap(address(mAAPL), address(UST), mAAPLAmt, mAAPLAmt * mAAPLPrice / 1e18);\\r\\n        emit WithdrawMAAPLUST(mAAPLUSTAmt, USTAmt + _USTAmt);\\r\\n    }\\r\\n\\r\\n    function withdrawMNFLXUST(uint sharePerc, uint mNFLXPrice) private {\\r\\n        uint mNFLXUSTAmt = mNFLXUSTVault.withdraw(mNFLXUSTVault.balanceOf(address(this)) * sharePerc / 1e18);\\r\\n        (uint mNFLXAmt, uint USTAmt) = uniRouter.removeLiquidity(address(mNFLX), address(UST), mNFLXUSTAmt, 0, 0, address(this), block.timestamp);\\r\\n        uint _USTAmt = swap(address(mNFLX), address(UST), mNFLXAmt, mNFLXAmt * mNFLXPrice / 1e18);\\r\\n        emit WithdrawMNFLXUST(mNFLXUSTAmt, USTAmt + _USTAmt);\\r\\n    }\\r\\n\\r\\n    function collectProfitAndUpdateWatermark() public onlyVault returns (uint fee) {\\r\\n        uint currentWatermark = getAllPoolInUSD();\\r\\n        uint lastWatermark = watermark;\\r\\n        if (currentWatermark > lastWatermark) {\\r\\n            uint profit = currentWatermark - lastWatermark;\\r\\n            fee = profit * profitFeePerc / 10000;\\r\\n            watermark = currentWatermark;\\r\\n        }\\r\\n        emit CollectProfitAndUpdateWatermark(currentWatermark, lastWatermark, fee);\\r\\n    }\\r\\n\\r\\n    /// @param signs True for positive, false for negative\\r\\n    function adjustWatermark(uint amount, bool signs) external onlyVault {\\r\\n        uint lastWatermark = watermark;\\r\\n        watermark = signs == true ? watermark + amount : watermark - amount;\\r\\n        emit AdjustWatermark(watermark, lastWatermark);\\r\\n    }\\r\\n\\r\\n    /// @param amount Amount to reimburse to vault contract in USD\\r\\n    function reimburse(uint farmIndex, uint amount) external onlyVault returns (uint USTAmt) {\\r\\n        if (farmIndex == 0) withdrawMMSFTUST(amount * 1e18 / getMMSFTUSTPoolInUSD(), 0);\\r\\n        else if (farmIndex == 1) withdrawMTWTRUST(amount * 1e18 / getMTWTRUSTPoolInUSD(), 0);\\r\\n        else if (farmIndex == 2) withdrawMTSLAUST(amount * 1e18 / getMTSLAUSTPoolInUSD(), 0);\\r\\n        else if (farmIndex == 3) withdrawMGOOGLUST(amount * 1e18 / getMGOOGLUSTPoolInUSD(), 0);\\r\\n        else if (farmIndex == 4) withdrawMAMZNUST(amount * 1e18 / getMAMZNUSTPoolInUSD(), 0);\\r\\n        else if (farmIndex == 5) withdrawMAAPLUST(amount * 1e18 / getMAAPLUSTPoolInUSD(), 0);\\r\\n        else if (farmIndex == 6) withdrawMNFLXUST(amount * 1e18 / getMNFLXUSTPoolInUSD(), 0);\\r\\n        USTAmt = UST.balanceOf(address(this));\\r\\n        UST.safeTransfer(vault, USTAmt);\\r\\n        emit Reimburse(USTAmt);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw() external onlyVault {\\r\\n        // 1e18 == 100% of share\\r\\n        withdrawMMSFTUST(1e18, 0);\\r\\n        withdrawMTWTRUST(1e18, 0);\\r\\n        withdrawMTSLAUST(1e18, 0);\\r\\n        withdrawMGOOGLUST(1e18, 0);\\r\\n        withdrawMAMZNUST(1e18, 0);\\r\\n        withdrawMAAPLUST(1e18, 0);\\r\\n        withdrawMNFLXUST(1e18, 0);\\r\\n        uint USTAmt = UST.balanceOf(address(this));\\r\\n        UST.safeTransfer(vault, USTAmt);\\r\\n        watermark = 0;\\r\\n\\r\\n        emit EmergencyWithdraw(USTAmt);\\r\\n    }\\r\\n\\r\\n    function swap(address from, address to, uint amount, uint amountOutMin) private returns (uint) {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = from;\\r\\n        path[1] = to;\\r\\n        return uniRouter.swapExactTokensForTokens(amount, amountOutMin, path, address(this), block.timestamp)[1];\\r\\n    }\\r\\n\\r\\n    function setVault(address _vault) external onlyOwner {\\r\\n        require(vault == address(0), \\\"Vault set\\\");\\r\\n        vault = _vault;\\r\\n    }\\r\\n\\r\\n    function setProfitFeePerc(uint _profitFeePerc) external onlyVault {\\r\\n        profitFeePerc = _profitFeePerc;\\r\\n    }\\r\\n\\r\\n    function getPath(address tokenA, address tokenB) private pure returns (address[] memory path) {\\r\\n        path = new address[](2);\\r\\n        path[0] = tokenA;\\r\\n        path[1] = tokenB;\\r\\n    }\\r\\n\\r\\n    function getMMSFTUSTPoolInUSD() private view returns (uint) {\\r\\n        uint mMSFTUSTVaultPool = mMSFTUSTVault.getAllPoolInUSD();\\r\\n        if (mMSFTUSTVaultPool == 0) return 0;\\r\\n        return mMSFTUSTVaultPool * mMSFTUSTVault.balanceOf(address(this)) / mMSFTUSTVault.totalSupply();\\r\\n    }\\r\\n\\r\\n    function getMTWTRUSTPoolInUSD() private view returns (uint) {\\r\\n        uint mTWTRUSTVaultPool = mTWTRUSTVault.getAllPoolInUSD();\\r\\n        if (mTWTRUSTVaultPool == 0) return 0;\\r\\n        return mTWTRUSTVaultPool * mTWTRUSTVault.balanceOf(address(this)) / mTWTRUSTVault.totalSupply();\\r\\n    }\\r\\n\\r\\n    function getMTSLAUSTPoolInUSD() private view returns (uint) {\\r\\n        uint mTSLAUSTVaultPool = mTSLAUSTVault.getAllPoolInUSD();\\r\\n        if (mTSLAUSTVaultPool == 0) return 0;\\r\\n        return mTSLAUSTVaultPool * mTSLAUSTVault.balanceOf(address(this)) / mTSLAUSTVault.totalSupply();\\r\\n    }\\r\\n\\r\\n    function getMGOOGLUSTPoolInUSD() private view returns (uint) {\\r\\n        uint mGOOGLUSTVaultPool = mGOOGLUSTVault.getAllPoolInUSD();\\r\\n        if (mGOOGLUSTVaultPool == 0) return 0;\\r\\n        return mGOOGLUSTVaultPool * mGOOGLUSTVault.balanceOf(address(this)) / mGOOGLUSTVault.totalSupply();\\r\\n    }\\r\\n\\r\\n    function getMAMZNUSTPoolInUSD() private view returns (uint) {\\r\\n        uint mAMZNUSTVaultPool = mAMZNUSTVault.getAllPoolInUSD();\\r\\n        if (mAMZNUSTVaultPool == 0) return 0;\\r\\n        return mAMZNUSTVaultPool * mAMZNUSTVault.balanceOf(address(this)) / mAMZNUSTVault.totalSupply();\\r\\n    }\\r\\n\\r\\n    function getMAAPLUSTPoolInUSD() private view returns (uint) {\\r\\n        uint mAAPLUSTVaultPool = mAAPLUSTVault.getAllPoolInUSD();\\r\\n        if (mAAPLUSTVaultPool == 0) return 0;\\r\\n        return mAAPLUSTVaultPool * mAAPLUSTVault.balanceOf(address(this)) / mAAPLUSTVault.totalSupply();\\r\\n    }\\r\\n\\r\\n    function getMNFLXUSTPoolInUSD() private view returns (uint) {\\r\\n        uint mNFLXUSTVaultPool = mNFLXUSTVault.getAllPoolInUSD();\\r\\n        if (mNFLXUSTVaultPool == 0) return 0;\\r\\n        return mNFLXUSTVaultPool * mNFLXUSTVault.balanceOf(address(this)) / mNFLXUSTVault.totalSupply();\\r\\n    }\\r\\n\\r\\n    function getEachPoolInUSD() private view returns (uint[] memory pools) {\\r\\n        pools = new uint[](7);\\r\\n        pools[0] = getMMSFTUSTPoolInUSD();\\r\\n        pools[1] = getMTWTRUSTPoolInUSD();\\r\\n        pools[2] = getMTSLAUSTPoolInUSD();\\r\\n        pools[3] = getMGOOGLUSTPoolInUSD();\\r\\n        pools[4] = getMAMZNUSTPoolInUSD();\\r\\n        pools[5] = getMAAPLUSTPoolInUSD();\\r\\n        pools[6] = getMNFLXUSTPoolInUSD();\\r\\n    }\\r\\n\\r\\n    /// @notice This function return only farms TVL in ETH\\r\\n    function getAllPoolInETH() public view returns (uint) {\\r\\n        uint USTPriceInETH = uint(IChainlink(0xa20623070413d42a5C01Db2c8111640DD7A5A03a).latestAnswer());\\r\\n        require(USTPriceInETH > 0, \\\"ChainLink error\\\");\\r\\n        return getAllPoolInUSD() * USTPriceInETH / 1e18;\\r\\n    }\\r\\n\\r\\n    /// @notice This function return only farms TVL in USD\\r\\n    function getAllPoolInUSD() public view returns (uint) {\\r\\n        uint[] memory pools = getEachPoolInUSD();\\r\\n        return pools[0] + pools[1] + pools[2] + pools[3] + pools[4] + pools[5] + pools[6];\\r\\n    }\\r\\n\\r\\n    function getCurrentCompositionPerc() external view returns (uint[] memory percentages) {\\r\\n        uint[] memory pools = getEachPoolInUSD();\\r\\n        uint allPool = getAllPoolInUSD();\\r\\n        percentages = new uint[](7);\\r\\n        percentages[0] = pools[0] * 10000 / allPool;\\r\\n        percentages[1] = pools[1] * 10000 / allPool;\\r\\n        percentages[2] = pools[2] * 10000 / allPool;\\r\\n        percentages[3] = pools[3] * 10000 / allPool;\\r\\n        percentages[4] = pools[4] * 10000 / allPool;\\r\\n        percentages[5] = pools[5] * 10000 / allPool;\\r\\n        percentages[6] = pools[6] * 10000 / allPool;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentWatermark\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastWatermark\",\"type\":\"uint256\"}],\"name\":\"AdjustWatermark\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentWatermark\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastWatermark\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"CollectProfitAndUpdateWatermark\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mMSFTUSTCurrentPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mTWTRUSTCurrentPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mTSLAUSTCurrentPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mGOOGLUSTCurrentPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mAMZNUSTCurrentPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mAAPLUSTCurrentPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mNFLXUSTCurrentPool\",\"type\":\"uint256\"}],\"name\":\"CurrentComposition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USTAmt\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USTAmtIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mAAPLUSTAmt\",\"type\":\"uint256\"}],\"name\":\"InvestMAAPLUST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USTAmtIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mAMZNUSTAmt\",\"type\":\"uint256\"}],\"name\":\"InvestMAMZNUST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USTAmtIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mGOOGLUSTAmt\",\"type\":\"uint256\"}],\"name\":\"InvestMGOOGLUST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USTAmtIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mMSFTUSTAmt\",\"type\":\"uint256\"}],\"name\":\"InvestMMSFTUST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USTAmtIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mNFLXUSTAmt\",\"type\":\"uint256\"}],\"name\":\"InvestMNFLXUST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USTAmtIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mTSLAUSTAmt\",\"type\":\"uint256\"}],\"name\":\"InvestMTSLAUST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USTAmtIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mTWTRUSTAmt\",\"type\":\"uint256\"}],\"name\":\"InvestMTWTRUST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USTAmt\",\"type\":\"uint256\"}],\"name\":\"Reimburse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetPool\",\"type\":\"uint256\"}],\"name\":\"TargetComposition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amtWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USTAmtOut\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawMAAPLUST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawMAMZNUST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawMGOOGLUST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawMMSFTUST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawMNFLXUST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawMTSLAUST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USTAmt\",\"type\":\"uint256\"}],\"name\":\"WithdrawMTWTRUST\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"signs\",\"type\":\"bool\"}],\"name\":\"adjustWatermark\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectProfitAndUpdateWatermark\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentCompositionPerc\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"percentages\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDaoL1Vault\",\"name\":\"_mMSFTUSTVault\",\"type\":\"address\"},{\"internalType\":\"contract IDaoL1Vault\",\"name\":\"_mTWTRUSTVault\",\"type\":\"address\"},{\"internalType\":\"contract IDaoL1Vault\",\"name\":\"_mTSLAUSTVault\",\"type\":\"address\"},{\"internalType\":\"contract IDaoL1Vault\",\"name\":\"_mGOOGLUSTVault\",\"type\":\"address\"},{\"internalType\":\"contract IDaoL1Vault\",\"name\":\"_mAMZNUSTVault\",\"type\":\"address\"},{\"internalType\":\"contract IDaoL1Vault\",\"name\":\"_mAAPLUSTVault\",\"type\":\"address\"},{\"internalType\":\"contract IDaoL1Vault\",\"name\":\"_mNFLXUSTVault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USTAmt\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mAAPLUSTVault\",\"outputs\":[{\"internalType\":\"contract IDaoL1Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mAMZNUSTVault\",\"outputs\":[{\"internalType\":\"contract IDaoL1Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mGOOGLUSTVault\",\"outputs\":[{\"internalType\":\"contract IDaoL1Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mMSFTUSTVault\",\"outputs\":[{\"internalType\":\"contract IDaoL1Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mNFLXUSTVault\",\"outputs\":[{\"internalType\":\"contract IDaoL1Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mTSLAUSTVault\",\"outputs\":[{\"internalType\":\"contract IDaoL1Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mTWTRUSTVault\",\"outputs\":[{\"internalType\":\"contract IDaoL1Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFeePerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"farmIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reimburse\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USTAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitFeePerc\",\"type\":\"uint256\"}],\"name\":\"setProfitFeePerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"watermark\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenPrice\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USTAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StonksStrategy","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}