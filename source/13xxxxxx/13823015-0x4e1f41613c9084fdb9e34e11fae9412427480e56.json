{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"details\": {\r\n        \"constantOptimizer\": true,\r\n        \"cse\": true,\r\n        \"deduplicate\": true,\r\n        \"jumpdestRemover\": true,\r\n        \"orderLiterals\": true,\r\n        \"peephole\": true,\r\n        \"yul\": false\r\n      },\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/ITerraformsData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITerraformsData {\\n    function tokenURI(uint, uint, uint, uint, uint, uint[] memory) \\n        external \\n        view \\n        returns (string memory);\\n\\n    function tokenHTML(uint, uint, uint, uint, uint[] memory) \\n        external \\n        view \\n        returns (string memory);\\n\\n    function tokenSVG(uint, uint, uint, uint, uint[] memory) \\n        external \\n        view \\n        returns (string memory);\\n\\n    function tokenTerrain(uint, uint, uint) \\n        external \\n        view \\n        returns (int[32][32] memory);\\n\\n    function tokenCharacters(uint, uint, uint, uint, uint[] memory) \\n        external \\n        view \\n        returns (string[32][32] memory);\\n\\n    function tokenHeightmapIndices(uint, uint, uint, uint, uint[] memory) \\n        external \\n        view \\n        returns (uint[32][32] memory);\\n\\n    function tokenZone(uint, uint) \\n        external \\n        view \\n        returns (string[10] memory, string memory);\\n\\n    function characterSet(uint, uint) \\n        external \\n        view \\n        returns (string[9] memory, uint, uint, uint);\\n    \\n    function levelAndTile(uint, uint) external view returns (uint, uint);\\n    \\n    function tileOrigin(uint, uint, uint, uint, uint) \\n        external \\n        view \\n        returns (int, int, int);\\n   \\n    function levelDimensions(uint) external view returns (uint);\\n\\n    function tokenElevation(uint, uint, uint) external view returns (int);\\n\\n    function prerevealURI(uint) external view returns (string memory);\\n}\"\r\n    },\r\n    \"contracts/Terraforms.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*                                 TERRAFORMS\\n\\n            . . # # - _ _ > _ _ - - # # # # . + + ^ + . . # - _ } ~ \\n            . . # - - _ > } } _ _ _ - - - - # . + + + + . # - _ ~ ~ \\n            # # # - _ _ } ~ ~ ~ } > _ _ _ - # . + ^ ^ + . # - _ } ~ \\n            # - - - _ > } ~ ~ ~ ~ ~ ~ ~ } _ - . + ^ ^ ^ + . # - > ~ \\n            - - _ _ _ > ~ ~ ~ ~ ~ ~ ~ ~ ~ _ - . + ^ ^ ^ ^ + . - _ } \\n            _ _ _ _ _ > } ~ ~ ~ ~ ~ ~ ~ ~ _ # . ^ ^ ^ ^ ^ + . # - _ \\n            _ > > _ _ _ _ } ~ ~ ~ ~ ~ ~ > - # + ^ ^ ^ ^ ^ + . # - - \\n            _ > _ _ - - - _ } ~ ~ ~ } _ _ # . ^ ^ ^ ^ ^ ^ + . # # - \\n            _ _ _ - - # # - _ _ > > _ - # . ^ ^ ^ ^ ^ ^ + . # # # # \\n            _ _ - # # . # # - - _ _ - # . + ^ ^ ^ ^ ^ + . # # - - # \\n            - - # # . . . . # - - - # . . ^ ^ ^ ^ ^ ^ . # - - - - # \\n            # # # . + ^ + + . # # # . . + ^ ^ ^ ^ ^ + . # - _ _ - - \\n            # # . + ^ ^ ^ ^ + . . . . + ^ ^ ^ ^ ^ ^ . # - - _ _ - # \\n            # . . ^ ^ ^ ^ ^ ^ ^ + + + ^ ^ ^ ^ ^ ^ + . # - - - - - # \\n            - . . ^ ^ ^ ^ ^ ^ ^ ^ + + ^ ^ ^ ^ + + . # # # - - # # # \\n            - # . + ^ ^ ^ ^ ^ ^ ^ ^ + + + + . . # # # # # # # . . . \\n            _ - # . + ^ ^ ^ ^ ^ ^ ^ + . . # # - - - # # . . . + + + \\n            > - # . + ^ ^ ^ ^ ^ ^ + . . # - _ _ _ _ - # . . + ^ ^ + \\n            } _ - # . + ^ ^ ^ ^ ^ + . # - _ > } } _ - # . . + ^ ^ + \\n            } _ - # . + ^ ^ ^ ^ ^ + . # - _ } ~ ~ } _ - # . + + ^ + \\n            } _ - # . + ^ ^ ^ ^ ^ + . # - _ } ~ ~ ~ } _ - # . + + + \\n            > _ - # . + ^ ^ ^ ^ ^ + . # - _ } ~ ~ ~ ~ _ - - # . + + \\n            _ _ - # . + ^ ^ ^ ^ ^ + . . # - > ~ ~ ~ ~ > _ - # . + + \\n            - - - # # . + ^ ^ ^ ^ ^ + . # - _ } ~ ~ } _ - - # . + ^ \\n            - - # # # . . + ^ ^ ^ ^ ^ + . # - _ > } _ _ - # . + ^ ^ \\n            # # # # # # # . + ^ ^ ^ ^ ^ + . # - _ _ _ - # . . + ^ ^ \\n            . . # # - - - # . + + ^ ^ ^ + . # # - - - # # . + ^ ^ ^ \\n            + . # # - - - - # . . + + + + . . # - - - # . + + ^ ^ ^ \\n*/\\n\\nimport \\\"./ITerraformsData.sol\\\";\\nimport \\\"./TerraformsPlacements.sol\\\";\\n\\n/// @title  Land parcels in an onchain 3D megastructure\\n/// @author xaltgeist, with code direction and consultation from 0x113d\\ncontract Terraforms is TerraformsPlacements {\\n    \\n    /// @notice Tokens are pieces of an onchain 3D megastructure. Represents a\\n    ///         level of the structure\\n    struct StructureLevel {\\n        uint levelNumber;\\n        uint tokensOnLevel;\\n        int structureSpaceX;\\n        int structureSpaceY;\\n        int structureSpaceZ;  \\n    }\\n\\n    /// @notice Supplemental token data, including spatial information\\n    struct TokenData {\\n        uint tokenId;\\n        uint level;\\n        uint xCoordinate;\\n        uint yCoordinate;\\n        int elevation;\\n        int structureSpaceX;\\n        int structureSpaceY;\\n        int structureSpaceZ;\\n        string zoneName;\\n        string[10] zoneColors;\\n        string[9] characterSet;\\n    }\\n\\n    /// @notice Address of contract managing augmentations\\n    address public immutable terraformsAugmentationsAddress;\\n\\n    /// @notice This constant is the length of a token in 3D space\\n    int public constant TOKEN_SCALE = 6619 * 32;\\n\\n    /// @notice An append-only list of optional (opt-in) tokenURI upgrades\\n    address[] public tokenURIAddresses;\\n\\n    // The array index of the tokenURIAddress for each token\\n    mapping(uint => uint) tokenToURIAddressIndex;\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     * CONSTRUCTOR, FALLBACKS\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n    constructor(\\n        address _terraformsDataAddress, \\n        address _terraformsAugmentationsAddress\\n    ) \\n        ERC721(\\\"Terraforms\\\", \\\"TERRAFORMS\\\")\\n        Ownable()\\n    {\\n        tokenURIAddresses.push(_terraformsDataAddress);\\n        terraformsAugmentationsAddress = _terraformsAugmentationsAddress;\\n    }\\n \\n    receive() external payable {}\\n    fallback() external payable {}\\n    \\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     * FUNCTION MODIFIERS\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n    modifier publicMint (uint numTokens) {\\n        require(numTokens <= 10, \\\"Max 10\\\");\\n        require(\\n            tokenCounter <= (SUPPLY - numTokens) &&\\n            msg.value >= numTokens * PRICE\\n        );\\n        _;\\n    }\\n\\n    modifier postReveal (uint tokenId) {\\n        require(seed != 0 && _exists(tokenId));\\n        _;\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     * PUBLIC: MINTING\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n    /// @notice Mint tokens\\n    /// @param numTokens The amount of tokens\\n    function mint(uint numTokens) \\n        public \\n        payable \\n        nonReentrant \\n        publicMint(numTokens)\\n    {\\n        require(!mintingPaused, \\\"Paused\\\");\\n        _mintTokens(msg.sender, numTokens);\\n    }\\n\\n    /// @notice Mints tokens if you hold Loot or a mintpass\\n    /// @dev Queries the Loot contract to check if minter is a holder\\n    /// @param numTokens The amount of tokens\\n    function earlyMint(uint numTokens) \\n        public \\n        payable \\n        nonReentrant \\n        publicMint(numTokens)\\n    {\\n        require(earlyMintActive, \\\"Inactive\\\");\\n        require(\\n            balanceOf(msg.sender) <= 100 && // Early wallet limit of 100\\n            (\\n                IERC721(\\n                    0xFF9C1b15B16263C61d017ee9F65C50e4AE0113D7\\n                ).balanceOf(msg.sender) > 0 || // Check if sender has Loot\\n                addressToMintpass[msg.sender] != Mintpass.None // Or a mintpass\\n            )\\n        );\\n        _mintTokens(msg.sender, numTokens);\\n    }\\n\\n    /// @notice Redeems a mintpass for a dreaming token\\n    function redeemMintpass() public nonReentrant {\\n        require(addressToMintpass[msg.sender] == Mintpass.Unused);\\n        addressToMintpass[msg.sender] = Mintpass.Used;\\n        _mintTokens(msg.sender, 1);\\n        dreamers += 1;\\n        tokenToDreamBlock[tokenCounter] = block.number;\\n        tokenToStatus[tokenCounter] = Status.OriginDaydream;\\n        emit Daydreaming(tokenCounter);\\n    }\\n\\n    /// @notice Allows owners to claim an allotment of tokens\\n    /// @param to The recipient address\\n    /// @param numTokens The amount of tokens\\n    function ownerClaim(address to, uint numTokens) public onlyOwner {\\n        require(\\n            tokenCounter >= SUPPLY && \\n            tokenCounter <= (MAX_SUPPLY - numTokens)\\n        );\\n        _mintTokens(to, numTokens);\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     * PUBLIC: TOKEN DATA\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n    /// @notice Returns the token URI\\n    /// @param tokenId The tokenId, from 1 to tokenCounter (max MAX_SUPPLY)\\n    /// @dev Token owners can specify which tokenURI address to use\\n    ///      on a per-token basis using setTokenURIAddress\\n    /// @return result A base64 encoded JSON string\\n    function tokenURI(uint256 tokenId) \\n        public \\n        view\\n        override\\n        returns (string memory result) \\n    {\\n        if (seed == 0){ // If tokens aren't revealed yet, return a placeholder\\n            result = ITerraformsData(tokenURIAddresses[0]).prerevealURI(tokenId);\\n        } else { // Otherwise, call the token's specified tokenURI address\\n            result = ITerraformsData(\\n                tokenURIAddresses[tokenToURIAddressIndex[tokenId]]\\n            ).tokenURI(\\n                tokenId,\\n                uint(tokenToStatus[tokenId]),\\n                tokenToPlacement[tokenId],\\n                seed,\\n                _yearsOfDecay(block.timestamp),\\n                tokenToCanvasData[tokenId]\\n            );\\n        }\\n    }\\n\\n    /// @notice Returns HTML containing the token SVG\\n    /// @param tokenId The tokenId, from 1 to tokenCounter (max MAX_SUPPLY)\\n    /// @return result A plaintext HTML string with a plaintext token SVG\\n    function tokenHTML(uint tokenId) \\n        public \\n        view\\n        postReveal(tokenId)\\n        returns (string memory result)\\n    {\\n        result = ITerraformsData( // Call the token's specified tokenURI address\\n            tokenURIAddresses[tokenToURIAddressIndex[tokenId]]\\n        ).tokenHTML(\\n            uint(tokenToStatus[tokenId]),\\n            tokenToPlacement[tokenId],\\n            seed,\\n            _yearsOfDecay(block.timestamp),\\n            tokenToCanvasData[tokenId]\\n        );\\n    }\\n\\n    /// @notice Returns an SVG of the token\\n    /// @param tokenId The tokenId, from 1 to tokenCounter (max MAX_SUPPLY)\\n    /// @return A plaintext SVG\\n    function tokenSVG(uint tokenId) \\n        public \\n        view \\n        postReveal(tokenId)\\n        returns (string memory) \\n    {\\n        return ITerraformsData( // Call the token's specified tokenURI address\\n            tokenURIAddresses[tokenToURIAddressIndex[tokenId]]\\n        ).tokenSVG(\\n            uint(tokenToStatus[tokenId]),\\n            tokenToPlacement[tokenId],\\n            seed,\\n            _yearsOfDecay(block.timestamp),\\n            tokenToCanvasData[tokenId]\\n        );\\n    }\\n\\n    /// @notice Returns the characters composing the token image\\n    /// @param tokenId The tokenId, from 1 to tokenCounter (max MAX_SUPPLY)\\n    /// @return A 2D array of strings\\n    function tokenCharacters(uint tokenId) \\n        public \\n        view\\n        postReveal(tokenId)\\n        returns (string[32][32] memory) \\n    {\\n        return ITerraformsData( // Call the token's specified tokenURI address\\n            tokenURIAddresses[tokenToURIAddressIndex[tokenId]]\\n        ).tokenCharacters(\\n            uint(tokenToStatus[tokenId]),\\n            tokenToPlacement[tokenId],\\n            seed,\\n            _yearsOfDecay(block.timestamp),\\n            tokenToCanvasData[tokenId]\\n        );\\n    }\\n\\n    /// @notice Returns the integer values that determine the token's topography\\n    /// @dev Values are 16-bit signed ints (i.e., +/- 65536)\\n    /// @param tokenId The tokenId, from 1 to tokenCounter (max MAX_SUPPLY)\\n    /// @return A 2D array of signed integers\\n    function tokenTerrainValues(uint tokenId) \\n        public \\n        view\\n        postReveal(tokenId)\\n        returns (int[32][32] memory) \\n    {\\n        return ITerraformsData( // Call the token's specified tokenURI address\\n            tokenURIAddresses[tokenToURIAddressIndex[tokenId]]\\n        ).tokenTerrain(\\n            tokenToPlacement[tokenId], \\n            seed, \\n            _yearsOfDecay(block.timestamp)\\n        );\\n    }\\n\\n    /// @notice Returns the stepwise height values visually represented on token\\n    /// @dev Values range from 0 (highest) to 8 (lowest). 9 indicates empty \\n    /// @param tokenId The tokenId, from 1 to tokenCounter (max MAX_SUPPLY)\\n    /// @return A 2D array of unsigned integers\\n    function tokenHeightmapIndices(uint tokenId)\\n        public \\n        view\\n        postReveal(tokenId)\\n        returns (uint[32][32] memory)\\n    {\\n        return ITerraformsData( // Call the token's specified tokenURI address\\n            tokenURIAddresses[tokenToURIAddressIndex[tokenId]]\\n        ).tokenHeightmapIndices(\\n            uint(tokenToStatus[tokenId]),\\n            tokenToPlacement[tokenId], \\n            seed, \\n            _yearsOfDecay(block.timestamp),\\n            tokenToCanvasData[tokenId]\\n        );\\n    }\\n\\n    /// @notice Spatial information about the token structure at a given time\\n    /// @dev Spatial values used to generate visuals are offset by\\n    ///      (seed * TOKEN_SCALE). Return values remove that offset\\n    /// @param timestamp The point in time to visualize the structure\\n    /// @return structure An array of StructureLevel structs\\n    function structureData(uint timestamp) \\n        public \\n        view \\n        returns (StructureLevel[20] memory structure)\\n    {\\n        ITerraformsData terraformsData = ITerraformsData(tokenURIAddresses[0]);\\n        uint decay = _yearsOfDecay(timestamp);\\n\\n        // Structure is offset into 3D space by the seed * the size of a tile\\n        // That offset is removed for ease of use\\n        int xyzNormalization = int(seed) * TOKEN_SCALE;\\n        \\n        // Temporary variables for loop\\n        int x;\\n        int y;\\n        int z;\\n        \\n        for (uint i; i < 20; i++){ \\n            // Get XYZ origin for 0,0 tile on each level\\n            (x, y, z) = terraformsData.tileOrigin(i, 0, seed, decay, timestamp);\\n            \\n            // Add level to result array\\n            structure[i] = StructureLevel(\\n                i + 1, // Adjust level from zero-index\\n                terraformsData.levelDimensions(i) ** 2, // n Tokens == edge^2\\n                x - xyzNormalization,\\n                y - xyzNormalization,\\n                z - xyzNormalization                \\n            );\\n        }\\n\\n        return structure;\\n    }\\n\\n    /// @notice Data re: a token's visual composition and location on structure\\n    /// @dev Spatial values used to generate visuals are offset by\\n    ///      (seed * TOKEN_SCALE). Return values remove that offset\\n    /// @param tokenId The tokenId, from 1 to tokenCounter (max MAX_SUPPLY)\\n    /// @return result A TokenData struct\\n    function tokenSupplementalData(uint tokenId) \\n        public \\n        view\\n        postReveal(tokenId)\\n        returns (TokenData memory result) \\n    {\\n        ITerraformsData terraformsData = ITerraformsData(\\n            tokenURIAddresses[tokenToURIAddressIndex[tokenId]]\\n        );\\n\\n        // Structure is offset into 3D space by the seed * the size of a tile\\n        // That offset is removed for ease of use\\n        int xyzNormalization = int(seed) * TOKEN_SCALE;   \\n\\n        (uint level, uint tile) = terraformsData.levelAndTile(\\n            tokenToPlacement[tokenId], \\n            seed\\n        );\\n        uint dimensions = terraformsData.levelDimensions(level);\\n        \\n        result.elevation = terraformsData.tokenElevation(level, tile, seed);\\n        (\\n            result.structureSpaceX, \\n            result.structureSpaceY, \\n            result.structureSpaceZ\\n        ) = terraformsData.tileOrigin(\\n            level, \\n            tile, \\n            seed, \\n            _yearsOfDecay(block.timestamp),\\n            block.timestamp\\n        );\\n\\n        (result.zoneColors, result.zoneName) = terraformsData.tokenZone(\\n            tokenToPlacement[tokenId], \\n            seed\\n        );\\n\\n        (result.characterSet, , , ) = terraformsData.characterSet(\\n            tokenToPlacement[tokenId], seed\\n        );\\n\\n        result.level = level + 1; // Adjust from zero-index\\n        result.xCoordinate = tile % dimensions;\\n        result.yCoordinate = tile / dimensions;\\n        result.structureSpaceX -= xyzNormalization;\\n        result.structureSpaceY -= xyzNormalization;\\n        result.structureSpaceZ -= xyzNormalization;\\n        return result;\\n        \\n    }\\n\\n    /// @notice Token owner can set tokenURI address for an array of tokens\\n    /// @param tokens The tokens to set to the new URI address\\n    /// @param index The index of the new tokenURIAddress in tokenURIAddresses\\n    function setTokenURIAddress(uint[] memory tokens, uint index) public {\\n        require(index < tokenURIAddresses.length);\\n\\n        for(uint i; i < tokens.length; i++){\\n            require(msg.sender == ownerOf(tokens[i]));\\n            tokenToURIAddressIndex[tokens[i]] = index;\\n        }\\n    }\\n\\n    /// @notice Owner can add new opt-in tokenURI address\\n    /// @param newAddress The new tokenURI address\\n    function addTokenURIAddress(address newAddress) public onlyOwner {\\n        tokenURIAddresses.push(newAddress);\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     * INTERNAL: MINTING\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n    /// @notice Internal function for minting tokens\\n    /// @param to The recipient address\\n    /// @param numTokens The amount of tokens\\n    function _mintTokens(address to, uint numTokens) internal {\\n        uint base = tokenCounter;\\n        while (tokenCounter < base + numTokens) {\\n            _shufflePlacements();\\n            tokenCounter += 1;\\n            _safeMint(to, tokenCounter);\\n        }\\n    }\\n\\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n     * INTERNAL: TOKEN DATA\\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\\n    /// @notice Returns the amount of decay to apply to the token structure\\n    /// @dev Decay begins unless there are enough dreamers\\n    /// @param timestamp The point in time for determining decay\\n    /// @return The years of decay affecting the tokens\\n    function _yearsOfDecay(uint timestamp) internal view returns (uint) {\\n        uint decayBegins = REVEAL_TIMESTAMP + dreamers * 3_650 days;\\n        if (dreamers >= 500 || timestamp <= decayBegins) {\\n            return 0;\\n        } else {\\n            return (timestamp - decayBegins) / 365 days;\\n        }\\n    }\\n}\\n\\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\n * LICENSES\\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\nFOR UPDATES AND ADDITIONAL INFO ABOUT THE LICENSE RELATING TO THIS PROJECT,\\nSEE WWW.MATHCASTLES.XYZ\\n\\nAS OF DEPLOY TIME, THE FOLLOWING LICENSE APPLIES TO THIS PROJECT'S ARTWORK\\n(EXCLUDING ITS FONTS, WHICH ARE COVERED BY THE LICENSE BELOW THIS LICENSE):\\n\\n# License - Terraforms by Mathcastles\\n\\n## 1. Purpose\\n\\nThis license (this “**License**”) was created by Mathcastles LLC \\n(\\\"**Mathcastles**\\\") to promote the interests of and to foster the innovations \\nand creativity of NFT collectors and developers. This License seeks to maximize \\nthe rights of owners to enjoy and profit from the NFTs they own while preserving \\ntheir value for future owners.\\n\\n## 2. Summary\\n\\n### 2.A. Owners of Terraforms NFTs can:\\n\\n1. Display, reproduce and commercialize the Art (defined below) while they own \\nthe NFTs, with optional attribution.\\n2. Develop and commercialize derivative works of the Art, both physical and \\nvirtual (including, for example, fractionalizations) while they own the \\ncorresponding NFTs, with optional attribution.\\n3. Continue to commercialize derivative works of the Art of NFTs they previously \\nowned if the derivative works were developed and released while they owned the \\nNFTs.\\n4. Use the Art for personal, non-commercial use.\\n5. Display the Art on marketplaces for buying and selling their NFTs.\\n6. Use their NFTs to interact with websites and apps, including decentralized \\napps (dapps).\\n\\n### 2.B. Owners of Terraforms NFTs cannot:\\n\\n1. Transfer the rights granted by this license to anyone, or to the public.\\n2. Commercialize the Art of NFTs they do not currently own, or develop or \\nrelease derivative works of the Art of NFTs they do not currently own.\\n3. Register or attempt to enforce any intellectual property rights in any \\nderivative work of the Art, in a manner that would limit a past, present or \\nfuture owner from commercializing the Art or creating derivative works in \\naccordance with this license.\\n\\n### 2.C. Additional Terms for Commercial Enterprises:\\n\\nIf an owner, together with its direct and indirect affiliates, operates an \\nenterprise that has ten (10) or more employees or US$5,000,000 or more per year \\nin gross receipts, then the owner cannot make more than US$500,000 in total \\nannual revenue from commercializing its NFTs or derivatives without separate \\nwritten permission from Mathcastles.\\n\\n## 3. Terms\\n\\n### 3.A. Definitions\\n\\n“**Art**” means any art, design, and related underlying data that may be \\nassociated with an NFT that you Own.\\n\\n\\\"**Commercial Enterprise**\\\" means any natural person, incorporated entity, or \\nother commercial venture, together with its direct and indirect owners and \\naffiliates, which during any of the last three calendar years had, in the \\naggregate, (i) ten (10) or more employees or (ii) the equivalent of \\nUS$5,000,000 or more per year in gross receipts.\\n\\n\\\"**Creator**\\\" means Mathcastles LLC.\\n\\n“**Derivatives**” means extensions or derivative works created by you of \\nPurchased NFTs that include, or contain or are derived from the Art.\\n\\n\\\"**NFT**\\\" means an Ethereum blockchain-tracked non-fungible token created from\\nthis contract.\\n\\n“**Own**” means, with respect to an NFT, an NFT that you have purchased or \\notherwise rightfully acquired, where proof of such purchase is recorded on the \\nrelevant blockchain, and that you continue to possess.\\n\\n“**Purchased NFT**” means an NFT that you Own.\\n\\n“**Third Party IP**” means any third party patent rights (including, without \\nlimitation, patent applications and disclosures), copyrights, trade secrets, \\ntrademarks, know-how or any other intellectual property rights recognized in any \\ncountry or jurisdiction in the world.\\n\\n### 3.B. Ownership\\n\\nYou acknowledge and agree that Creator (or, as applicable, its licensors) owns \\nall legal right, title and interest in and to the Art, and all intellectual \\nproperty rights therein. The rights that you have in and to the Art are limited \\nto those described in this License. Creator reserves all rights in and to the \\nArt not expressly granted to you in this License.\\n\\n### 3.C. License\\n\\n#### 3.C.1. General Use\\n\\nSubject to your continued compliance with the terms of this License, Creator \\ngrants you a worldwide, non-exclusive, non-transferable, royalty-free license to \\nuse, copy, and display the Art for your Purchased NFTs, along with any \\nDerivatives that you choose to create or use, solely for the following purposes:\\n\\n1. for your own personal, non-commercial use;\\n2. as part of a marketplace that permits the purchase and sale of your NFTs; or\\n3. as part of a third party website or application that permits the inclusion, \\ninvolvement, or participation of your NFTs.\\n\\n#### 3.C.2. Commercial and Derivative Use\\n\\nCreator grants you a limited, worldwide, non-exclusive, non-transferable license \\nto use, copy, and display the Art for your Purchased NFTs for the purpose of \\ncommercializing your own physical or virtual merchandise that includes, \\ncontains, or consists of the Art for your Purchased NFTs (“**Commercial Use**”) \\nand to commercialize Derivatives of your Purchased NFTs (\\\"**Derivative Use**\\\"), \\nprovided that if you are a Commercial Enterprise, such Commercial Use and \\nDerivative Use do not in the aggregate result in you earning more than Five \\nHundred Thousand U.S. Dollars (US$500,000) in gross revenue in any year. For \\nthe sake of clarity, nothing in this Section 3.C.2. will be deemed to restrict \\nyou from:\\n\\n1. owning or operating a marketplace that permits the use and sale of NFTs \\ngenerally;\\n2. owning or operating a third party website or application that permits the \\ninclusion, involvement, or participation of NFTs generally; or\\n3. earning revenue from any of the foregoing, even where such revenue is in \\nexcess of US$500,000 per year.\\n\\n### 3.D. Restrictions\\n\\n#### 3.D.1. No Additional IP Rights\\n\\nYou may not attempt to trademark, copyright, or otherwise acquire additional \\nintellectual property rights in the Art, nor permit any third party to do or \\nattempt to do any of the foregoing, without Creator’s express prior written \\nconsent; _provided_, that this section does not prohibit an owner from acquiring \\nintellectual property rights in a derivative work.\\n\\n#### 3.D.2. No License Granted as to Third Party IP\\n\\nTo the extent that Art associated with your Purchased NFTs contains Third Party \\nIP (for example, licensed intellectual property from a third party artist, \\ncompany, or public figure), you understand and agree as follows:\\n\\n1. that the inclusion of any Third Party IP in the Art does not grant you any \\nrights to use such Third Party IP except as it is incorporated in the Art;\\n2. that, depending on the nature of the license granted from the owner of the \\nThird Party IP, Creator may need to pass through additional restrictions on your \\nability to use the Art; and\\n3. to the extent that Creator informs you of such additional restrictions in \\nwriting (including by email), you will be responsible for complying with all \\nsuch restrictions from the date that you receive the notice, and that failure \\nto do so will be deemed a breach of this license.\\n\\nThe restrictions in this Section 3.D. will survive the expiration or termination \\nof this License.\\n\\n### 3.E. Limitations of License\\n\\nExcept for the right to Derivative Use described in Section 3.C.2., the license \\ngranted in this Section 3 applies only to the extent that you continue to Own \\nthe applicable Purchased NFT. If at any time you sell, trade, donate, give away, \\ntransfer, or otherwise dispose of your Purchased NFT for any reason, the license \\ngranted in Section 3 (except for the right to Derivative Use described in \\nSection 3.C.2.) will immediately expire with respect to those NFTs without the \\nrequirement of notice, and you will have no further rights in or to the Art for \\nthose NFTs. The right to Derivative Use described in Section 3.C.2. shall \\ncontinue indefinitely for so long as you comply with this License.\\n\\nIf you are a Commercial Enterprise and you exceed the US$500,000 limitation on \\nannual gross revenue set forth in Section 3.C.2. above, you will be in breach of \\nthis License, and must send an email to Creator at license@mathcastles.xyz \\nwithin fifteen (15) days, with the phrase “NFT License - Commercial Use” in the \\nsubject line, requesting a discussion with Creator regarding entering into a \\nbroader license agreement or obtaining an exemption (which may be granted or \\nwithheld in Creator’s sole and absolute discretion).\\n\\nIf you exceed the scope of the license grant in this Section 3 without entering \\ninto a broader license agreement with or obtaining an exemption from Creator, \\nyou acknowledge and agree that:\\n\\n1. you are in breach of this License;\\n2. in addition to any remedies that may be available to Creator at law or in \\nequity, the Creator may immediately terminate this License, without the \\nrequirement of notice; and\\n3. you will be responsible to reimburse Creator for any costs and expenses \\nincurred by Creator during the course of enforcing the terms of this License \\nagainst you.\\n\\n********************************************************************************\\n\\nTHE FOLLOWING LICENSE APPLIES TO THE FONTS USED IN THIS PROJECT\\n\\nCopyright 2018 The Noto Project Authors (github.com/googlei18n/noto-fonts)\\n\\nThis Font Software is licensed under the SIL Open Font License,\\nVersion 1.1.\\n\\nThis license is copied below, and is also available with a FAQ at:\\nhttp://scripts.sil.org/OFL\\n\\n-----------------------------------------------------------\\nSIL OPEN FONT LICENSE Version 1.1 - 26 February 2007\\n-----------------------------------------------------------\\n\\nPREAMBLE\\nThe goals of the Open Font License (OFL) are to stimulate worldwide\\ndevelopment of collaborative font projects, to support the font\\ncreation efforts of academic and linguistic communities, and to\\nprovide a free and open framework in which fonts may be shared and\\nimproved in partnership with others.\\n\\nThe OFL allows the licensed fonts to be used, studied, modified and\\nredistributed freely as long as they are not sold by themselves. The\\nfonts, including any derivative works, can be bundled, embedded,\\nredistributed and/or sold with any software provided that any reserved\\nnames are not used by derivative works. The fonts and derivatives,\\nhowever, cannot be released under any other type of license. The\\nrequirement for fonts to remain under this license does not apply to\\nany document created using the fonts or their derivatives.\\n\\nDEFINITIONS\\n\\\"Font Software\\\" refers to the set of files released by the Copyright\\nHolder(s) under this license and clearly marked as such. This may\\ninclude source files, build scripts and documentation.\\n\\n\\\"Reserved Font Name\\\" refers to any names specified as such after the\\ncopyright statement(s).\\n\\n\\\"Original Version\\\" refers to the collection of Font Software\\ncomponents as distributed by the Copyright Holder(s).\\n\\n\\\"Modified Version\\\" refers to any derivative made by adding to,\\ndeleting, or substituting -- in part or in whole -- any of the\\ncomponents of the Original Version, by changing formats or by porting\\nthe Font Software to a new environment.\\n\\n\\\"Author\\\" refers to any designer, engineer, programmer, technical\\nwriter or other person who contributed to the Font Software.\\n\\nPERMISSION & CONDITIONS\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of the Font Software, to use, study, copy, merge, embed,\\nmodify, redistribute, and sell modified and unmodified copies of the\\nFont Software, subject to the following conditions:\\n\\n1) Neither the Font Software nor any of its individual components, in\\nOriginal or Modified Versions, may be sold by itself.\\n\\n2) Original or Modified Versions of the Font Software may be bundled,\\nredistributed and/or sold with any software, provided that each copy\\ncontains the above copyright notice and this license. These can be\\nincluded either as stand-alone text files, human-readable headers or\\nin the appropriate machine-readable metadata fields within text or\\nbinary files as long as those fields can be easily viewed by the user.\\n\\n3) No Modified Version of the Font Software may use the Reserved Font\\nName(s) unless explicit written permission is granted by the\\ncorresponding Copyright Holder. This restriction only applies to the\\nprimary font name as presented to the users.\\n\\n4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font\\nSoftware shall not be used to promote, endorse or advertise any\\nModified Version, except to acknowledge the contribution(s) of the\\nCopyright Holder(s) and the Author(s) or with their explicit written\\npermission.\\n\\n5) The Font Software, modified or unmodified, in part or in whole,\\nmust be distributed entirely under this license, and must not be\\ndistributed under any other license. The requirement for fonts to\\nremain under this license does not apply to any document created using\\nthe Font Software.\\n\\nTERMINATION\\nThis license becomes null and void if any of the above conditions are\\nnot met.\\n\\nDISCLAIMER\\nTHE FONT SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND,\\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\\nOF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE\\nCOPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\\nINCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL\\nDAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\nFROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM\\nOTHER DEALINGS IN THE FONT SOFTWARE.\\n*/\"\r\n    },\r\n    \"contracts/TerraformsAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @title Admin functions and access control for the Terraforms contract\\n/// @author xaltgeist\\nabstract contract TerraformsAdmin is ERC721Enumerable, ReentrancyGuard, Ownable{\\n    \\n    enum Mintpass {None, Unused, Used}\\n    \\n    /// @notice Sale information\\n    uint public constant PRICE = 0.16 ether; \\n    uint public constant MAX_SUPPLY = 11_104;\\n    uint public constant OWNER_ALLOTMENT = 1_200;\\n    uint public constant SUPPLY = MAX_SUPPLY - OWNER_ALLOTMENT;\\n    uint public tokenCounter;\\n    bool public earlyMintActive;\\n    bool public mintingPaused = true;\\n\\n    mapping(address => Mintpass) addressToMintpass;\\n    \\n    /// @notice Toggles whether claimers can mint (other than through early)\\n    function togglePause() public onlyOwner {\\n        mintingPaused = !mintingPaused;\\n    }\\n\\n    /// @notice Toggles whether Loot and mintpass holders can mint early\\n    function toggleEarly() public onlyOwner {\\n        earlyMintActive = !earlyMintActive;\\n    }\\n\\n    /// @notice Sets the addresses of mintpass holders\\n    function setMintpassHolders(address[] memory mintpassHolders) \\n        public\\n        onlyOwner \\n    {\\n        for (uint i; i < mintpassHolders.length; i ++){\\n            addressToMintpass[mintpassHolders[i]] = Mintpass.Unused;\\n        }\\n    }\\n\\n    /// @notice Transfers the contract balance to the owner\\n    function withdraw() public onlyOwner {\\n        (bool success, ) = owner().call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n}\"\r\n    },\r\n    \"contracts/TerraformsDreaming.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TerraformsAdmin.sol\\\";\\n\\n/// @author xaltgeist\\n/// @title Tokens can be transformed to painter apps or terraformed\\nabstract contract TerraformsDreaming is TerraformsAdmin {\\n    \\n    /// Tokens can have one of five statuses:\\n    /// 0. Terrain:       The default visual presentation\\n    /// 1. Daydream:      A blank token that users can paint on\\n    /// 2. Terraformed:   A terraformed token with user-supplied visuals\\n    /// 3. OriginDaydream:    A daydream token that was dreaming on mint\\n    /// 4. OriginTerraformed: A terraformed OriginDaydream token\\n    enum Status {\\n        Terrain, \\n        Daydream, \\n        Terraformed, \\n        OriginDaydream, \\n        OriginTerraformed\\n    }\\n    \\n    uint public dreamers; // Number of dreaming tokens\\n\\n    mapping(uint => uint) public tokenToDreamBlock;\\n    mapping(uint => Status) public tokenToStatus;\\n    mapping(uint => uint[]) public tokenToCanvasData;\\n    mapping(uint => address) public tokenToDreamer;\\n    mapping(uint => address) public tokenToAuthorizedDreamer;\\n\\n    event Daydreaming(uint tokenId);\\n    event Terraformed(uint tokenId, address terraformer);\\n\\n    /// @notice *PERMANENTLY* sets a token to dreaming, changing its attributes\\n    /// @dev A minimum amount must be dreaming to prevent collapse\\n    /// @param tokenId The tokenId, from 1 to tokenCounter (max MAX_SUPPLY)\\n    function enterDream(uint tokenId) public {\\n        require(msg.sender == ownerOf(tokenId));\\n        tokenToDreamBlock[tokenId] = block.number;\\n        if (tokenToStatus[tokenId] == Status.Terrain){\\n            dreamers += 1;\\n        }\\n        if (uint(tokenToStatus[tokenId]) > 2){\\n            tokenToStatus[tokenId] = Status.OriginDaydream;\\n        } else {\\n            tokenToStatus[tokenId] = Status.Daydream;   \\n        }\\n        emit Daydreaming(tokenId);\\n    }\\n\\n    /// @notice Authorizes an address to commit canvas data to a dreaming token\\n    /// @dev To revoke, call authorizeDreamer with address(0).\\n    /// NOTE Authorization is automatically revoked on transfer.\\n    /// @param tokenId The tokenId, from 1 to tokenCounter (max MAX_SUPPLY)\\n    /// @param authorizedDreamer The address authorized to commit canvas data\\n    function authorizeDreamer(uint tokenId, address authorizedDreamer) public {\\n        require(msg.sender == ownerOf(tokenId));\\n        tokenToAuthorizedDreamer[tokenId] = authorizedDreamer;\\n    }\\n\\n    /// @notice Sets a dreaming token's canvas to a user-supplied drawing\\n    /// @dev The drawing data is encoded as 16 uints. The 64 least significant\\n    ///      digits of each uint represent values from 0-9 at successive x,y\\n    ///      positions on the token, beginning in the top left corner. Each \\n    ///      value will be obtained from left to right by taking the current \\n    ///      uint mod 10, and then advancing to the next digit until all uints \\n    ///      are exhausted. \\n    /// @param tokenId The tokenId, from 1 to tokenCounter (max MAX_SUPPLY)\\n    /// @param dream An array of 16 uints, each representing the heightmap \\n    ///              indices of two rows\\n    function commitDreamToCanvas(uint tokenId, uint[16] memory dream) public {\\n        require(\\n            (\\n                msg.sender == ownerOf(tokenId) ||\\n                msg.sender == tokenToAuthorizedDreamer[tokenId]\\n            ) &&\\n            uint(tokenToStatus[tokenId]) % 2 == 1\\n        );\\n        tokenToDreamer[tokenId] = msg.sender;\\n        tokenToStatus[tokenId] = Status(uint(tokenToStatus[tokenId]) + 1);\\n        tokenToCanvasData[tokenId] = dream;\\n        emit Terraformed(tokenId, msg.sender);\\n    }\\n\\n    /// @notice On transfer, revokes authorization to commit dreaming token\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\\n        internal \\n        virtual \\n        override\\n    {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n        tokenToAuthorizedDreamer[tokenId] = address(0);\\n    }\\n}\"\r\n    },\r\n    \"contracts/TerraformsPlacements.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TerraformsDreaming.sol\\\";\\n\\n/// @author xaltgeist\\n/// @title Pseudorandom token placements\\nabstract contract TerraformsPlacements is TerraformsDreaming {\\n    \\n    uint public seed; // Seed derived from blockhash, used to rotate placements\\n    mapping(uint => uint) public tokenToPlacement; // Pseudorandom placements\\n    uint public immutable REVEAL_TIMESTAMP; // Token reveal (if not minted out)\\n    uint[MAX_SUPPLY] placementShuffler; // Used for pseudorandom placements\\n\\n    event TokensRevealed(uint timestamp, uint seed);\\n\\n    constructor (){\\n        REVEAL_TIMESTAMP = block.timestamp + 7 days;\\n    }\\n\\n    /// @notice Finalizes the seed used to randomize token placement\\n    /// @dev Requires that seed isn't set, and that either the supply is minted\\n    ///      or a week has elapsed since deploy\\n    function setSeed() public {\\n        require(\\n            seed == 0 && \\n            (tokenCounter >= SUPPLY || block.timestamp >= REVEAL_TIMESTAMP)\\n        );\\n\\n        seed = uint(blockhash(block.number - 1)) % MAX_SUPPLY;\\n\\n        if (seed == 0) { // Don't allow seed to be 0\\n            seed = 1;\\n        }\\n        emit TokensRevealed(block.timestamp, seed);\\n    }\\n\\n    /// @notice Creates initial placements to determine a token's level/tile\\n    /// @dev Initial pseudorandom placements will be rotated by the seed\\n    function _shufflePlacements() internal {\\n        uint max = MAX_SUPPLY - tokenCounter;\\n        uint result;\\n        uint next = uint(\\n            keccak256(\\n                abi.encodePacked(\\n                    tokenCounter, \\n                    blockhash(block.number - 1), \\n                    block.difficulty\\n                )\\n            )\\n        ) % max;\\n        \\n        if (placementShuffler[next] == 0) {\\n            result = next;\\n        } else {\\n            result = placementShuffler[next];\\n        }\\n\\n        if (placementShuffler[max - 1] != 0) {\\n            placementShuffler[next] = placementShuffler[max - 1];            \\n        } else {\\n            placementShuffler[next] = max - 1;\\n        }\\n        \\n        tokenToPlacement[tokenCounter + 1] = result;\\n    }\\n}\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_terraformsDataAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_terraformsAugmentationsAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Daydreaming\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"terraformer\",\"type\":\"address\"}],\"name\":\"Terraformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"TokensRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ALLOTMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVEAL_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_SCALE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"addTokenURIAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"authorizedDreamer\",\"type\":\"address\"}],\"name\":\"authorizeDreamer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[16]\",\"name\":\"dream\",\"type\":\"uint256[16]\"}],\"name\":\"commitDreamToCanvas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dreamers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"earlyMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyMintActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"enterDream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"ownerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemMintpass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"mintpassHolders\",\"type\":\"address[]\"}],\"name\":\"setMintpassHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"setTokenURIAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"structureData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"levelNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensOnLevel\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"structureSpaceX\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"structureSpaceY\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"structureSpaceZ\",\"type\":\"int256\"}],\"internalType\":\"struct Terraforms.StructureLevel[20]\",\"name\":\"structure\",\"type\":\"tuple[20]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terraformsAugmentationsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleEarly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenCharacters\",\"outputs\":[{\"internalType\":\"string[32][32]\",\"name\":\"\",\"type\":\"string[32][32]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenHTML\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenHeightmapIndices\",\"outputs\":[{\"internalType\":\"uint256[32][32]\",\"name\":\"\",\"type\":\"uint256[32][32]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenSupplementalData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xCoordinate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yCoordinate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"elevation\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"structureSpaceX\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"structureSpaceY\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"structureSpaceZ\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"zoneName\",\"type\":\"string\"},{\"internalType\":\"string[10]\",\"name\":\"zoneColors\",\"type\":\"string[10]\"},{\"internalType\":\"string[9]\",\"name\":\"characterSet\",\"type\":\"string[9]\"}],\"internalType\":\"struct Terraforms.TokenData\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenTerrainValues\",\"outputs\":[{\"internalType\":\"int256[32][32]\",\"name\":\"\",\"type\":\"int256[32][32]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToAuthorizedDreamer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToCanvasData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToDreamBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToDreamer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToPlacement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToStatus\",\"outputs\":[{\"internalType\":\"enum TerraformsDreaming.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenURIAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Terraforms","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a5afc9fe76a28fb12c60954ed6e2e5f8cef64ff20000000000000000000000002521beb44d433a5b916ad9d5ab51b98378870072","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}