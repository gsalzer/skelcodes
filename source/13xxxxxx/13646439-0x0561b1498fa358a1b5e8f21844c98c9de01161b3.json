{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\u0027Address: insufficient balance\\u0027);\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\u0027\\u0027);\\n        require(success, \\u0027Address: unable to send value, recipient may have reverted\\u0027);\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\u0027Address: low-level call failed\\u0027);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\u0027Address: low-level call with value failed\\u0027);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\u0027Address: insufficient balance for call\\u0027);\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\u0027Address: call to non-contract\\u0027);\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"},\"BtclSeedRound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./ERC677Receiver.sol\\\";\\nimport \\\"./ERC677.sol\\\";\\nimport \\\"./SafeERC677.sol\\\";\\nimport \\\"./IERC677.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./IWETH.sol\\\";\\nimport \\\"./SafeMathChainlink.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ncontract BtclSeedRound is Context, ReentrancyGuard {\\n    using SafeMathChainlink for uint256;\\n    using SafeERC677 for IERC677;\\n\\n    event TokensPurchased(address purchaser, uint256 btclAmount, uint256 usdAmount);\\n    event DepositedTokens(address from, uint256 value, bytes data);\\n\\n    IERC677 public btclToken;\\n    address payable public wallet;\\n    address payable public bonus;\\n    address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address  DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    \\n    struct UserInfo {\\n        uint256 totalLockedBTCL;      // Total BTCL Tokens left to be released\\n        uint256 totalClaimedBTCL;     // Total BTCL Tokens Claimed \\n        uint256 totalUSDContributed;  // Total USD Contribution in decimals\\n        uint256 totalContributions;   // Total Unique Contributions\\n        uint256 lastRewardBlock;      // Last Block when Tokens were Claimed\\n    }\\n    \\n    struct UserContribution {\\n        address token;                // Individual Token Address\\n        uint256 time;                 // Individual Contribution Timestamp\\n        uint256 tokenInUSD;           // Individual Token USD Value\\n        uint256 tokenAmount;          // Individual Token Contribution\\n        uint256 btclToDistribute;     // Individual BTCL Tokens to be distributed\\n    }\\n\\n    uint256 public kycUsdLimit = 1500000;       // Max Contribution $15K with 2 extra decimals for precision\\n    uint256 public kycLimitUplifted = 5000000;  // Max Contribution $50K with 2 extra decimals for precision\\n    uint256 public startBlock = 13656111;       // https://etherscan.io/block/countdown/13656111 (~21 Nov 2021 UTC = 04:00AM)\\n    uint256 public endBlock = 13915000;         // https://etherscan.io/block/countdown/13915000 (~1 Jan 2022 UTC = 00:00AM)\\n    uint256 public cliffEndingBlock = 14777777; // https://etherscan.io/block/countdown/14777777 (~15 May 2022 UTC = 00:00AM)\\n    uint256 public blocksPerMonth = 200000;\\n    uint256 public btclDistributed;\\n    uint256 public totalRaised;\\n    uint256 public totalBtclClaimed;\\n    uint256 public uniqueContributors;\\n    uint256 public uniqueContributions;\\n    uint256[12] public vestingSchedules;\\n    uint256[12] public vestingPercentages = [24,5,5,5,5,5,5,5,5,12,12,12];\\n    \\n    mapping(uint256 =\\u003e address) public uniqueAddress;\\n    mapping(address =\\u003e bool) private isUnique;\\n    mapping(address =\\u003e bool) private kyc;\\n    mapping(address =\\u003e bool) private kycUplifted;\\n    mapping(address =\\u003e UserInfo) public userInfo;\\n    mapping(address =\\u003e mapping(uint256 =\\u003e UserContribution)) public userContribution;\\n    mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) public totalBTCL;\\n    mapping(address =\\u003e address) public tokensAndFeeds;\\n\\n    /**\\n     * @dev Team Multisig Wallet Modifier\\n     */\\n    modifier onlyTeam() {\\n        require(wallet == _msgSender(), \\\"Only the team wallet can run this function\\\");\\n        _;\\n    }\\n    \\n    /*\\n     * Bitcoin Lottery - Seed Round\\n     * @param _assets the list of accepted tokens\\n     * @param _priceOracles the list of price feeds\\n     */\\n    constructor(IERC677[] memory _assets, address[] memory _priceOracles) public {\\n        wallet = _msgSender();\\n        \\n        for(uint256 i = 0; i \\u003c _priceOracles.length; i++) {\\n            tokensAndFeeds[address(_assets[i])] = _priceOracles[i];\\n        }\\n        \\n        for(uint256 i = 0; i \\u003c vestingPercentages.length; i++) {\\n            vestingSchedules[i] = cliffEndingBlock.add(blocksPerMonth.mul(i));\\n        }\\n    }\\n\\n    /*\\n     * Aggregate the value for whitelisted tokens.\\n     * @param _asset the token to be contributed.\\n     * @param _amount the amount of the token contribution.\\n     * @return totalUSD and toContribute and toDistribute \\n     */\\n    function getTokenExchangeRate(address _asset, uint256 _amount) public view returns (uint256 totalUSD, uint256 toContribute, uint256 toDistribute) {\\n        if(_asset == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) { _asset = WETH; } // eth price feed fix\\n        else { require(tokensAndFeeds[_asset] != address(0), \\\"Asset must be whitelisted\\\"); } // other whitelisted asset price feeds\\n        \\n        (, int256 price_token, , , ) = AggregatorV3Interface(tokensAndFeeds[_asset]).latestRoundData();\\n        (, int256 price_dai, , , ) = AggregatorV3Interface(tokensAndFeeds[DAI]).latestRoundData();\\n\\n        toContribute = _amount;\\n        \\n        if(_asset == USDT || _asset == USDC) {\\n            totalUSD = _amount.div(10000); // with 2 extra decimals\\n            toDistribute = totalUSD.mul(666666666666666666); // 0,66 BTCL for 1 cent\\n        } else if (_asset == DAI) {\\n            totalUSD = _amount.div(10000000000000000); // with 2 extra decimals\\n            toDistribute = totalUSD.mul(666666666666666666); // 0,66 BTCL for 1 cent\\n        } else {\\n            uint256 tokenDecimals = uint256(10 ** uint256(IERC677(_asset).decimals()));\\n            uint256 tokenValueInUSD = uint256(price_token).div(uint256(price_dai));\\n            uint256 tokenOneDollarWorth = tokenDecimals.div(tokenValueInUSD);\\n            totalUSD = _amount.mul(100).div(tokenOneDollarWorth); // with 2 extra decimals\\n            toDistribute = totalUSD.mul(666666666666666666); // 0.66 BTCL for 1 cent\\n        }\\n    }\\n    \\n    /**\\n     * @dev Contribute with ETH directly\\n     */\\n    receive() external payable {\\n        buyTokensWithETH(_msgSender());\\n    }\\n\\n    /*\\n     * Contribute with ETH directly.\\n     * @param _beneficiary the contributors address.\\n     * @return success Contribution succeeded or failed.\\n     */\\n    function buyTokensWithETH(address _beneficiary) public payable nonReentrant returns (bool success) {\\n        require(kyc[_msgSender()] == true \\u0026\\u0026 _msgSender() == _beneficiary, \\\"Only Whitelisted addresses are allowed to participate in the Seed Round.\\\");\\n        \\n        (uint256 totalUSD, uint256 toContribute, uint256 toDistribute) = getTokenExchangeRate(WETH, msg.value);\\n\\n        _createPayment(_msgSender(), 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, totalUSD, toContribute, toDistribute);\\n        \\n        return true;\\n    }\\n    \\n    /*\\n     * Contribute with any of the Whitelisted Tokens (WBTC/WETH/LINK/UNI/DAI/USDC/USDT).\\n     * @param _asset the token used to make the contribution.\\n     * @param _value the value to be contributed.\\n     * @return success Contribution succeeded or failed.\\n     */\\n    function buyTokens(address _asset, uint256 _value) public nonReentrant returns (bool success) {\\n        require(kyc[_msgSender()] == true, \\\"Only Whitelisted addresses are allowed to participate in the Seed Round.\\\");\\n\\n        (uint256 totalUSD, uint256 toContribute, uint256 toDistribute) = getTokenExchangeRate(_asset, _value);\\n        \\n        _createPayment(_msgSender(), _asset, totalUSD, toContribute, toDistribute);\\n    \\n        return true;\\n    }\\n    \\n    /*\\n     * Helper function to create the contribution and set BTCL Token Vesting \\u0026 Distribution Emissions.\\n     * @param beneficiary The address of the Contributor.\\n     * @param asset The token used to Contribute.\\n     * @param value The total amount in USD Contributed.\\n     */\\n    function _createPayment(address _beneficiary, address _asset, uint256 _value, uint256 toContribute, uint256 toDistribute) private {\\n        checkKycDepositLimit(_beneficiary, _value);\\n\\n        makeContribution(_beneficiary, _asset, toContribute);\\n\\n        splitTokensInStages(toDistribute);\\n        \\n        hydrateContribution(_beneficiary, _asset, toContribute, toDistribute, _value); \\n        \\n        checkUnique();\\n        \\n        // EMIT \\u0026 RETURN TRUE IF CONTRIBUTION SUCCEEDED\\n        emit TokensPurchased(_beneficiary, toDistribute, _value);\\n    }\\n\\n    /**\\n     * KYC helper function that checks USD Contribution limits.\\n     * @param _beneficiary the address of the contributor.\\n     * @param _value the amount contributed.\\n     */\\n    function checkKycDepositLimit(address _beneficiary, uint256 _value) private view {\\n        require(block.number \\u003e= startBlock \\u0026\\u0026 block.number \\u003c= endBlock \\u0026\\u0026 btclDistributed \\u003c 250000000 * 1e18, \\\"Seed Round finished successfully. Congrats to everyone!\\\");\\n        require(_value \\u003e= 10000, \\\"Contribution amount must be atleast 100$\\\");\\n        \\n        UserInfo storage user = userInfo[_beneficiary];\\n        \\n        // check if KYC Limit is 15K or 50K and if it was already reached.\\n        uint256 newUSDValue = user.totalUSDContributed.add(_value);\\n        \\n        if(kycUplifted[_beneficiary] == true) {\\n            require(newUSDValue \\u003c= kycLimitUplifted, \\\"Address can\\u0027t contribute more than 50K USD.\\\");\\n        } else {\\n            require(newUSDValue \\u003c= kycUsdLimit, \\\"Address can\\u0027t contribute more than 15K USD.\\\");    \\n        }\\n\\n    }\\n        \\n    /**\\n     * KYC helper function to make either ETH or Tokens Contribution\\n     * @param _beneficiary the address of the contributor.\\n     * @param _asset the amount contributed.\\n     * @param toContribute the amount contributed.\\n     */\\n    function makeContribution(address _beneficiary, address _asset, uint256 toContribute) private {\\n        if(_asset == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\\n            wallet.transfer(msg.value);\\n        } else {\\n            makeTokenContribution(_beneficiary, _asset, toContribute);\\n        }\\n    }\\n    \\n    /**\\n     * Helper function that checks token allowance and makes the contribution.\\n     * @param _beneficiary the address of the contributor.\\n     * @param _asset the asset used to contribute.\\n     * @param _toContribute the amount contributed.\\n     */\\n    function makeTokenContribution(address _beneficiary, address _asset, uint256 _toContribute) private {\\n        uint256 allowance = IERC677(_asset).allowance(_beneficiary, address(this));\\n        require(allowance \\u003e= _toContribute, \\\"Check the token allowance\\\");\\n        IERC677(_asset).safeTransferFrom(_beneficiary, wallet, _toContribute);\\n    }\\n    \\n    /**\\n     * Helper function that split BTCL Tokens into multiple release stages.\\n     * @param _toDistribute total BTCL Tokens that will be distributed.\\n     */\\n    function splitTokensInStages(uint256 _toDistribute) private {\\n        uint256 accumulatedTokens;\\n        for(uint256 i = 0; i \\u003c vestingPercentages.length; i++) {\\n            uint256 storedBTCL = totalBTCL[_msgSender()][i];\\n            uint256 tempBTCL = _toDistribute.mul(vestingPercentages[i]).div(100);\\n            accumulatedTokens = accumulatedTokens.add(_toDistribute.mul(vestingPercentages[i]).div(100));\\n            // run in all stages except the last stage\\n            if(i != vestingPercentages.length - 1) {\\n                totalBTCL[_msgSender()][i] = tempBTCL.add(storedBTCL);\\n            } else {\\n                // check if there are any dustTokens stuck and add them to final vesting stage.\\n                uint256 dustTokens = _toDistribute.sub(accumulatedTokens);\\n                totalBTCL[_msgSender()][i] = tempBTCL.add(storedBTCL).add(dustTokens);\\n            }\\n        }\\n    }\\n    \\n    /**\\n     * Helper function that updates individual and global variables.\\n     * @param _beneficiary the address of the contributor.\\n     * @param _asset the asset used to contribute.\\n     * @param _toContribute the amount contributed.\\n     * @param _toDistribute total BTCL Tokens that will be distributed.\\n     * @param _value The total amount in USD Contributed.\\n     */\\n    function hydrateContribution(address _beneficiary, address _asset, uint256 _toContribute, uint256 _toDistribute, uint256 _value) private {\\n        UserInfo storage user = userInfo[_beneficiary];\\n        UserContribution storage contribution = userContribution[_beneficiary][user.totalContributions];\\n        \\n        // HYDRATE USER CONTRIBUTION\\n        user.totalContributions = user.totalContributions.add(1);\\n        user.totalLockedBTCL = user.totalLockedBTCL.add(_toDistribute);\\n        user.totalUSDContributed = user.totalUSDContributed.add(_value);\\n        \\n        // TOTAL BTCL TO DISTRIBUTE \\u0026 TOTAL RAISED IN USD\\n        btclDistributed = btclDistributed.add(_toDistribute);\\n        totalRaised = totalRaised.add(_value);\\n        uniqueContributions = uniqueContributions.add(1);\\n        \\n        // HYDRATE INDIVIDUAL CONTRIBUTION\\n        contribution.token = _asset;\\n        contribution.time = now;\\n        contribution.tokenInUSD = _value;\\n        contribution.tokenAmount = _toContribute;\\n        contribution.btclToDistribute = _toDistribute;\\n    }\\n    \\n    /*\\n     * Helper function to help keep track of all contributors onchain\\n     */\\n    function checkUnique() private {\\n        if(isUnique[_msgSender()] == false) { \\n            isUnique[_msgSender()] = true;\\n            uniqueAddress[uniqueContributors] = _msgSender();\\n            uniqueContributors = uniqueContributors.add(1);\\n        }\\n    }\\n    \\n    /**\\n     * Claim unlockable BTCL Tokens based on current vesting stage.\\n     * @return total BTCL tokens claimed.\\n     */\\n    function claimVestedTokens() public nonReentrant returns (uint256 total) {\\n        uint256 totalBtclLeftToWithdraw;\\n        \\n        if(block.number \\u003e cliffEndingBlock) {\\n            \\n            UserInfo storage user = userInfo[_msgSender()];\\n        \\n            for(uint256 i = 0; i \\u003c vestingSchedules.length; i++) {\\n                if (block.number \\u003e= vestingSchedules[i]) {\\n                    uint256 tempBTCL = totalBTCL[_msgSender()][i];\\n                    totalBtclLeftToWithdraw = totalBtclLeftToWithdraw.add(tempBTCL);\\n                    user.totalClaimedBTCL = user.totalClaimedBTCL.add(tempBTCL);\\n                    totalBTCL[_msgSender()][i] = 0;\\n                    user.lastRewardBlock = block.number;\\n                    totalBtclClaimed = totalBtclClaimed.add(tempBTCL);\\n                }\\n            }\\n            \\n            btclToken.safeTransfer(_msgSender(), totalBtclLeftToWithdraw);\\n        \\n            return (totalBtclLeftToWithdraw);\\n        } else {\\n            revert(\\\"The Vesting Cliff Period has not yet passed.\\\");\\n        }\\n\\n    }\\n    \\n    /**\\n     * Get tokens unlocked percentage on current stage.\\n     * @param _contributorAddress the contributor address.\\n     * @return stage and percent and total Percent of tokens that can be claimed.\\n     */\\n    function getTokensUnlockedPercentage(address _contributorAddress) public view returns (uint256 stage, uint256 percentage, uint256 total) {\\n        uint256 totalLeftToWithdraw;\\n        uint256 allowedPercent;\\n        uint256 currentStage;\\n        \\n        for(uint8 i = 0; i \\u003c vestingSchedules.length; i++) {\\n            if (block.number \\u003e= vestingSchedules[i]) {\\n                allowedPercent = allowedPercent.add(vestingPercentages[i]);\\n                currentStage = i;\\n            }\\n        }\\n        \\n        for(uint256 v = 0; v \\u003c= currentStage; v++) {\\n            if (block.number \\u003e= vestingSchedules[currentStage]) {\\n                uint256 tempBTCL = totalBTCL[_contributorAddress][v];\\n                totalLeftToWithdraw = totalLeftToWithdraw.add(tempBTCL);\\n            }\\n        }\\n        \\n        return (currentStage, allowedPercent, totalLeftToWithdraw);\\n    }\\n\\n    /**\\n     * @dev KYC helper function used to display current KYC Status.\\n     * @param _contributorAddress The Contributor Address Whitelisting Address.\\n     * @return whitelisted and KYC uplift Status.\\n     */\\n    function checkKYC(address _contributorAddress) public view returns (bool whitelisted, bool uplifted) {\\n        return (kyc[_contributorAddress], kycUplifted[_contributorAddress]);\\n    }\\n\\n    /**\\n     * @dev KYC helper function used by the team to whitelist multiple addresses at once.\\n     * @param _addresses whitelisted address list.\\n     * @param _whitelisted whitelisted address can contribute up to $15K.\\n     * @param _kycUplift whitelisted address owner has provided sources of funds and was uplifted to contribute up to $50K.\\n     */\\n    function multiKycWhitelisting(address[] memory _addresses, bool[] memory _whitelisted, bool[] memory _kycUplift) public onlyTeam returns (bool success) {\\n        for(uint256 i = 0; i \\u003c _addresses.length; i++) {\\n            kyc[_addresses[i]] = _whitelisted[i];\\n            kycUplifted[_addresses[i]] = _kycUplift[i];\\n        }\\n        return true;\\n    }\\n    \\n    /**\\n     * @dev ChainLink helper function used to update old Chainlink Price Feed Aggregators or add new ones.\\n     * @param _asset The token associated to the Chainlink Price Feed.\\n     * @param _newAggregatorAddress The Aggregator Contract Address.\\n     */\\n    function updateAggregatorAddress(address _asset, address _newAggregatorAddress) public onlyTeam {\\n        tokensAndFeeds[_asset] = _newAggregatorAddress;\\n    }\\n    \\n    /**\\n     * @dev Team helper function used to update old multisig wallet address.\\n     * @param _newWallet The new team multi signature wallet.\\n     */\\n    function updateTeamWalletAddress(address payable _newWallet) public onlyTeam {\\n        wallet = _newWallet;\\n    }\\n    \\n    /**\\n     * @dev Team helper function used to update old bonus reserve address.\\n     * @param _newWallet The new bonus reserve smart contract.\\n     */\\n    function updateBonusReserveAddress(address payable _newWallet) public onlyTeam {\\n        bonus = _newWallet;\\n    }\\n    \\n    /**\\n     * @dev Team helper function used to upgrade the BTCL Governance Token.\\n     * Future Upgrades: Gassless DAO Voting, Approval Signatures with no GAS Costs, Merkle Proofs.\\n     * @param _btclToken The new upgraded BTCL Governance Token.\\n    */\\n    function updateBtclTokenAddress(address payable _btclToken) public onlyTeam {\\n        btclToken = IERC677(_btclToken);\\n    }\\n    \\n    /**\\n     * @dev Team helper function used to redistribute undistributed BTCL Tokens back into the Community Bonus Reserve.\\n     */\\n    function redistributeTokens() public onlyTeam {\\n        require(block.number \\u003e= endBlock, \\\"The Seed Round Contribution period has not yet finished\\\");\\n        uint256 undistributedBtclTokens = uint256(250000000 * 1e18).sub(btclDistributed);\\n        btclToken.safeTransfer(bonus, undistributedBtclTokens);\\n    }\\n\\n    /**\\n     * @dev ERC677 TokenFallback Function.\\n     * @param _wallet The team address can send BTCL tokens to the Seed Round Contract.\\n     * @param _value The amount of tokens sent by the team to the BTCL Seed Round Contract.\\n     * @param _data The transaction metadata.\\n     */\\n    function onTokenTransfer(address _wallet, uint256 _value, bytes memory _data) public {\\n        require(_msgSender() == address(btclToken), \\\"Contract only accepts BTCL Tokens\\\");\\n        require(wallet == _wallet,\\\"Only team wallet is allowed\\\");\\n        emit DepositedTokens(_wallet, _value, _data);\\n    }\\n    \\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity \\u003e=0.4.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"ERC677.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\u0027./Ownable.sol\\u0027;\\nimport \\u0027./Context.sol\\u0027;\\nimport \\u0027./IERC677.sol\\u0027;\\nimport \\u0027./SafeMath.sol\\u0027;\\nimport \\u0027./Address.sol\\u0027;\\nimport \\u0027./ERC677Receiver.sol\\u0027;\\n\\n/**\\n * @dev Implementation of the {IERC677} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC677PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-ERC677-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC677 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC677-approve}.\\n */\\ncontract ERC677 is Context, IERC677, Ownable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(address =\\u003e uint256) private _balances;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n    \\n    address private _owner;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name, string memory symbol, uint256 initialSupply, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n        _totalSupply = initialSupply * (10 ** uint256(_decimals));\\n        _balances[_msgSender()] = _balances[_msgSender()].add(_totalSupply);\\n        _owner = _msgSender();\\n        emit Transfer(address(0), _msgSender(), _totalSupply);\\n    }\\n\\n    /**\\n     * @dev Returns the ERC677 token owner.\\n     */\\n    function getOwner() external override view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() public override view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() public override view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() public override view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ERC677-totalSupply}.\\n     */\\n    function totalSupply() public override view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {ERC677-balanceOf}.\\n     */\\n    function balanceOf(address account) public override view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {ERC677-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {ERC677-allowance}.\\n     */\\n    function allowance(address owner, address spender) public override view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {ERC677-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {ERC677-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC677};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(amount, \\u0027ERC677: transfer amount exceeds allowance\\u0027)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {ERC677-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {ERC677-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(subtractedValue, \\u0027ERC677: decreased allowance below zero\\u0027)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\\n     * the total supply.\\n     *\\n     * Requirements\\n     *\\n     * - `msg.sender` must be the token owner\\n     */\\n    // function mint(uint256 amount) public onlyOwner returns (bool) {\\n    //     _mint(_msgSender(), amount);\\n    //     return true;\\n    // }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(sender != address(0), \\u0027ERC677: transfer from the zero address\\u0027);\\n        require(recipient != address(0), \\u0027ERC677: transfer to the zero address\\u0027);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\u0027ERC677: transfer amount exceeds balance\\u0027);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n \\n    /**\\n     * @dev Destroys `amount` tokens from `msg.sender`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount) public override {\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount, \\u0027ERC677: burn amount exceeds balance\\u0027);\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(msg.sender, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), \\u0027ERC677: approve from the zero address\\u0027);\\n        require(spender != address(0), \\u0027ERC677: approve to the zero address\\u0027);\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n    * @dev Transfer tokens to a contract address with additional data.\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    * @param _data The extra data to be passed to the receiving contract, mostly used \\\"0x\\\", empty byte.\\n    */\\n    function transferAndCall(address _to, uint _value, bytes memory _data) public override returns (bool success) {\\n        require(_msgSender() != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(_to != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        transfer(_to, _value);\\n        if (isContract(_to)) {\\n            contractFallback(_to, _value, _data);\\n        }\\n        return true;\\n    }\\n    \\n    function contractFallback(address _to, uint _value, bytes memory _data) private {\\n        ERC677Receiver receiver = ERC677Receiver(_to);\\n        receiver.onTokenTransfer(msg.sender, _value, _data);\\n    }\\n\\n    function isContract(address _addr) private view returns (bool hasCode) {\\n        uint length;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { length := extcodesize(_addr) }\\n        return length \\u003e 0;\\n    }\\n}\\n\"},\"ERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\n\\nabstract contract ERC677Receiver {\\n    function onTokenTransfer(address _sender, uint _value, bytes memory _data) virtual public;\\n}\\n\\n// interface ERC677Receiver {\\n//     function onTokenTransfer(\\n//         address _sender,\\n//         uint256 _value,\\n//         bytes calldata _data\\n//     ) external;\\n// }\\n\"},\"IERC677.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity \\u003e=0.4.0;\\n\\ninterface IERC677 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the ERC677 token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n \\n    /**\\n     * @dev Destroys `amount` tokens from `msg.sender`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function burn(uint amount) external;\\n    \\n    /**\\n    * @dev transfer token to a contract address with additional data if the recipient is a contact.\\n    * @param to The address to transfer to.\\n    * @param value The amount to be transferred.\\n    * @param data The extra data to be passed to the receiving contract.\\n    */\\n    function transferAndCall(address to, uint value, bytes memory data) external returns (bool success);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity \\u003e=0.4.0;\\n\\nimport \\u0027./Context.sol\\u0027;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\u0027Ownable: caller is not the owner\\u0027);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\u0027Ownable: new owner is the zero address\\u0027);\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() public {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"SafeERC677.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\u0027./IERC677.sol\\u0027;\\nimport \\u0027./SafeMath.sol\\u0027;\\nimport \\u0027./Address.sol\\u0027;\\n\\n/**\\n * @title SafeERC677\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC677 for IERC677;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC677 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC677 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC677 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC677-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC677 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\u0027SafeERC677: approve from non-zero to non-zero allowance\\u0027\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC677 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC677 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\u0027SafeERC677: decreased allowance below zero\\u0027\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC677 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\u0027SafeERC677: low-level call failed\\u0027);\\n        if (returndata.length \\u003e 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\u0027SafeERC677: ERC677 operation did not succeed\\u0027);\\n        }\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.4.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\u0027SafeMath: addition overflow\\u0027);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\u0027SafeMath: subtraction overflow\\u0027);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\u0027SafeMath: multiplication overflow\\u0027);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\u0027SafeMath: division by zero\\u0027);\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\u0027SafeMath: modulo by zero\\u0027);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x \\u003c y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y \\u003e 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x \\u003c z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"},\"SafeMathChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMathChainlink {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity\\u0027s `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity\\u0027s `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity\\u0027s `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC677[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_priceOracles\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DepositedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"btclAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"blocksPerMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"btclDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"btclToken\",\"outputs\":[{\"internalType\":\"contract IERC677\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokensWithETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contributorAddress\",\"type\":\"address\"}],\"name\":\"checkKYC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"uplifted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimVestedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliffEndingBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTokenExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toContribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toDistribute\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contributorAddress\",\"type\":\"address\"}],\"name\":\"getTokensUnlockedPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kycLimitUplifted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kycUsdLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_whitelisted\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"_kycUplift\",\"type\":\"bool[]\"}],\"name\":\"multiKycWhitelisting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redistributeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensAndFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalBTCL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBtclClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniqueAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueContributors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAggregatorAddress\",\"type\":\"address\"}],\"name\":\"updateAggregatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"updateBonusReserveAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_btclToken\",\"type\":\"address\"}],\"name\":\"updateBtclTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"updateTeamWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userContribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"btclToDistribute\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLockedBTCL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimedBTCL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUSDContributed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalContributions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestingPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestingSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BtclSeedRound","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000070000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca0000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f9840000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000000000000000000000007000000000000000000000000f4030086522a5beea4988f8ca5b36dbc97bee88c0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000002c1d072e956affc0d435cb7ac38ef18d24d9127c000000000000000000000000553303d460ee0afb37edff9be42922d8ff63220e000000000000000000000000aed0c38402a5d19df6e4c03f4e2dced6e29c1ee90000000000000000000000008fffffd4afb6115b954bd326cbe7b4ba576818f60000000000000000000000003e7d1eab13ad0104d2750b8863b489d65364e32d","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d278fbb9522a0bed860ede76c9c493bb005337e21385ac003c155ef8d477e0dd"}]}