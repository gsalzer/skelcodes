{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"sources\": {\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"Initializable.sol\": {\r\n      \"content\": \"// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/v3.0.0/contracts/Initializable.sol\\n// Added public isInitialized() view of private initialized bool.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n\\n    /**\\n     * @dev Return true if and only if the contract has been initialized\\n     * @return whether the contract has been initialized\\n     */\\n    function isInitialized() public view returns (bool) {\\n        return initialized;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"UpgradeableClaimable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {Context} from \\\"Context.sol\\\";\\n\\nimport {Initializable} from \\\"Initializable.sol\\\";\\n\\n/**\\n * @title UpgradeableClaimable\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. Since\\n * this contract combines Claimable and UpgradableOwnable contracts, ownership\\n * can be later change via 2 step method {transferOwnership} and {claimOwnership}\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract UpgradeableClaimable is Initializable, Context {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting a custom initial owner of choice.\\n     * @param __owner Initial owner of contract to be set.\\n     */\\n    function initialize(address __owner) internal initializer {\\n        _owner = __owner;\\n        emit OwnershipTransferred(address(0), __owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier throws if called by any account other than the pendingOwner.\\n     */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller is not the pending owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to set the pendingOwner address.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _pendingOwner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingOwner address to finalize the transfer.\\n     */\\n    function claimOwnership() public onlyPendingOwner {\\n        emit OwnershipTransferred(_owner, _pendingOwner);\\n        _owner = _pendingOwner;\\n        _pendingOwner = address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"ITrueDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\n\\ninterface ITrueDistributor {\\n    function trustToken() external view returns (IERC20);\\n\\n    function farm() external view returns (address);\\n\\n    function distribute() external;\\n\\n    function nextDistribution() external view returns (uint256);\\n\\n    function empty() external;\\n}\\n\"\r\n    },\r\n    \"ITrueMultiFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\n\\nimport {ITrueDistributor} from \\\"ITrueDistributor.sol\\\";\\n\\ninterface ITrueMultiFarm {\\n    function trueDistributor() external view returns (ITrueDistributor);\\n\\n    function stake(IERC20 token, uint256 amount) external;\\n\\n    function unstake(IERC20 token, uint256 amount) external;\\n\\n    function claim(IERC20[] calldata tokens) external;\\n\\n    function exit(IERC20[] calldata tokens) external;\\n}\\n\"\r\n    },\r\n    \"TrueMultiFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\nimport {IERC20} from \\\"IERC20.sol\\\";\\nimport {SafeMath} from \\\"SafeMath.sol\\\";\\nimport {SafeERC20} from \\\"SafeERC20.sol\\\";\\n\\nimport {UpgradeableClaimable} from \\\"UpgradeableClaimable.sol\\\";\\nimport {ITrueDistributor} from \\\"ITrueDistributor.sol\\\";\\nimport {ITrueMultiFarm} from \\\"ITrueMultiFarm.sol\\\";\\n\\n/**\\n * @title TrueMultiFarm\\n * @notice Deposit liquidity tokens to earn TRU rewards over time\\n * @dev Staking pool where tokens are staked for TRU rewards\\n * A Distributor contract decides how much TRU all farms in total can earn over time\\n * Calling setShare() by owner decides ratio of rewards going to respective token farms\\n * You can think of this contract as of a farm that is a distributor to the multiple other farms\\n * A share of a farm in the multifarm is it's stake\\n */\\ncontract TrueMultiFarm is ITrueMultiFarm, UpgradeableClaimable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    uint256 private constant PRECISION = 1e30;\\n\\n    struct Stakes {\\n        // total amount of a particular token staked\\n        uint256 totalStaked;\\n        // who staked how much\\n        mapping(address => uint256) staked;\\n    }\\n\\n    struct Rewards {\\n        // track overall cumulative rewards\\n        uint256 cumulativeRewardPerToken;\\n        // track previous cumulate rewards for accounts\\n        mapping(address => uint256) previousCumulatedRewardPerToken;\\n        // track claimable rewards for accounts\\n        mapping(address => uint256) claimableReward;\\n        // track total rewards\\n        uint256 totalClaimedRewards;\\n        uint256 totalRewards;\\n    }\\n\\n    // ================ WARNING ==================\\n    // ===== THIS CONTRACT IS INITIALIZABLE ======\\n    // === STORAGE VARIABLES ARE DECLARED BELOW ==\\n    // REMOVAL OR REORDER OF VARIABLES WILL RESULT\\n    // ========= IN STORAGE CORRUPTION ===========\\n\\n    IERC20 public rewardToken;\\n    ITrueDistributor public override trueDistributor;\\n\\n    mapping(IERC20 => Stakes) public stakes;\\n    mapping(IERC20 => Rewards) public stakerRewards;\\n\\n    // Shares of farms in the multifarm\\n    Stakes public shares;\\n    // Total rewards per farm\\n    Rewards public farmRewards;\\n\\n    // ======= STORAGE DECLARATION END ============\\n\\n    /**\\n     * @dev Emitted when an account stakes\\n     * @param who Account staking\\n     * @param amountStaked Amount of tokens staked\\n     */\\n    event Stake(IERC20 indexed token, address indexed who, uint256 amountStaked);\\n\\n    /**\\n     * @dev Emitted when an account unstakes\\n     * @param who Account unstaking\\n     * @param amountUnstaked Amount of tokens unstaked\\n     */\\n    event Unstake(IERC20 indexed token, address indexed who, uint256 amountUnstaked);\\n\\n    /**\\n     * @dev Emitted when an account claims TRU rewards\\n     * @param who Account claiming\\n     * @param amountClaimed Amount of TRU claimed\\n     */\\n    event Claim(IERC20 indexed token, address indexed who, uint256 amountClaimed);\\n\\n    /**\\n     * @dev Update all rewards associated with the token and msg.sender\\n     */\\n    modifier update(IERC20 token) {\\n        distribute();\\n        updateRewards(token);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Is there any reward allocatiion for given token\\n     */\\n    modifier hasShares(IERC20 token) {\\n        require(shares.staked[address(token)] > 0, \\\"TrueMultiFarm: This token has no shares\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev How much is staked by staker on token farm\\n     */\\n    function staked(IERC20 token, address staker) external view returns (uint256) {\\n        return stakes[token].staked[staker];\\n    }\\n\\n    /**\\n     * @dev Initialize staking pool with a Distributor contract\\n     * The distributor contract calculates how much TRU rewards this contract\\n     * gets, and stores TRU for distribution.\\n     * @param _trueDistributor Distributor contract\\n     */\\n    function initialize(ITrueDistributor _trueDistributor) public initializer {\\n        UpgradeableClaimable.initialize(msg.sender);\\n        trueDistributor = _trueDistributor;\\n        rewardToken = _trueDistributor.trustToken();\\n        require(trueDistributor.farm() == address(this), \\\"TrueMultiFarm: Distributor farm is not set\\\");\\n    }\\n\\n    /**\\n     * @dev Stake tokens for TRU rewards.\\n     * Also claims any existing rewards.\\n     * @param amount Amount of tokens to stake\\n     */\\n    function stake(IERC20 token, uint256 amount) external override hasShares(token) update(token) {\\n        if (stakerRewards[token].claimableReward[msg.sender] > 0) {\\n            _claim(token);\\n        }\\n        stakes[token].staked[msg.sender] = stakes[token].staked[msg.sender].add(amount);\\n        stakes[token].totalStaked = stakes[token].totalStaked.add(amount);\\n\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Stake(token, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Remove staked tokens\\n     * @param amount Amount of tokens to unstake\\n     */\\n    function unstake(IERC20 token, uint256 amount) external override update(token) {\\n        _unstake(token, amount);\\n    }\\n\\n    /**\\n     * @dev Claim TRU rewards\\n     */\\n    function claim(IERC20[] calldata tokens) external override {\\n        uint256 tokensLength = tokens.length;\\n\\n        distribute();\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            updateRewards(tokens[i]);\\n        }\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            _claim(tokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Unstake amount and claim rewards\\n     */\\n    function exit(IERC20[] calldata tokens) external override {\\n        distribute();\\n\\n        uint256 tokensLength = tokens.length;\\n\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            updateRewards(tokens[i]);\\n        }\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            _unstake(tokens[i], stakes[tokens[i]].staked[msg.sender]);\\n            _claim(tokens[i]);\\n        }\\n    }\\n\\n    /*\\n     * What proportional share of rewards get distributed to this token?\\n     * The denominator is visible in the public `shares()` view.\\n     */\\n    function getShare(IERC20 token) external view returns (uint256) {\\n        return shares.staked[address(token)];\\n    }\\n\\n    /**\\n     * @dev Set shares for farms\\n     * Example: setShares([DAI, USDC], [1, 2]) will ensure that 33.(3)% of rewards will go to DAI farm and rest to USDC farm\\n     * If later setShares([DAI, TUSD], [2, 1]) will be called then shares of DAI will grow to 2, shares of USDC won't change and shares of TUSD will be 1\\n     * So this will give 40% of rewards going to DAI farm, 40% to USDC and 20% to TUSD\\n     * @param tokens Token addresses\\n     * @param updatedShares share of the i-th token in the multifarm\\n     */\\n    function setShares(IERC20[] calldata tokens, uint256[] calldata updatedShares) external onlyOwner {\\n        uint256 tokensLength = tokens.length;\\n\\n        require(tokensLength == updatedShares.length, \\\"TrueMultiFarm: Array lengths mismatch\\\");\\n        distribute();\\n\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            _updateClaimableRewardsForFarm(tokens[i]);\\n        }\\n        for (uint256 i = 0; i < tokensLength; i++) {\\n            uint256 oldStaked = shares.staked[address(tokens[i])];\\n            shares.staked[address(tokens[i])] = updatedShares[i];\\n            shares.totalStaked = shares.totalStaked.sub(oldStaked).add(updatedShares[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal unstake function\\n     * @param amount Amount of tokens to unstake\\n     */\\n    function _unstake(IERC20 token, uint256 amount) internal {\\n        require(amount <= stakes[token].staked[msg.sender], \\\"TrueMultiFarm: Cannot withdraw amount bigger than available balance\\\");\\n        stakes[token].staked[msg.sender] = stakes[token].staked[msg.sender].sub(amount);\\n        stakes[token].totalStaked = stakes[token].totalStaked.sub(amount);\\n\\n        token.safeTransfer(msg.sender, amount);\\n        emit Unstake(token, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Internal claim function\\n     */\\n    function _claim(IERC20 token) internal {\\n        uint256 rewardToClaim = stakerRewards[token].claimableReward[msg.sender];\\n\\n        stakerRewards[token].totalClaimedRewards = stakerRewards[token].totalClaimedRewards.add(rewardToClaim);\\n        farmRewards.totalClaimedRewards = farmRewards.totalClaimedRewards.add(rewardToClaim);\\n\\n        stakerRewards[token].claimableReward[msg.sender] = 0;\\n        farmRewards.claimableReward[address(token)] = farmRewards.claimableReward[address(token)].sub(rewardToClaim);\\n\\n        rewardToken.safeTransfer(msg.sender, rewardToClaim);\\n        emit Claim(token, msg.sender, rewardToClaim);\\n    }\\n\\n    /**\\n     * @dev View to estimate the claimable reward for an account that is staking token\\n     * @return claimable rewards for account\\n     */\\n    function claimable(IERC20 token, address account) external view returns (uint256) {\\n        if (stakes[token].staked[account] == 0) {\\n            return stakerRewards[token].claimableReward[account];\\n        }\\n        // estimate pending reward from distributor\\n        uint256 pending = _pendingDistribution(token);\\n        // calculate total rewards (including pending)\\n        uint256 newTotalRewards = pending.add(stakerRewards[token].totalClaimedRewards).mul(PRECISION);\\n        // calculate block reward\\n        uint256 totalBlockReward = newTotalRewards.sub(stakerRewards[token].totalRewards);\\n        // calculate next cumulative reward per token\\n        uint256 nextcumulativeRewardPerToken = stakerRewards[token].cumulativeRewardPerToken.add(\\n            totalBlockReward.div(stakes[token].totalStaked)\\n        );\\n        // return claimable reward for this account\\n        return\\n            stakerRewards[token].claimableReward[account].add(\\n                stakes[token].staked[account]\\n                    .mul(nextcumulativeRewardPerToken.sub(stakerRewards[token].previousCumulatedRewardPerToken[account]))\\n                    .div(PRECISION)\\n            );\\n    }\\n\\n    function _pendingDistribution(IERC20 token) internal view returns (uint256) {\\n        // estimate pending reward from distributor\\n        uint256 pending = trueDistributor.farm() == address(this) ? trueDistributor.nextDistribution() : 0;\\n\\n        // calculate new total rewards ever received by farm\\n        uint256 newTotalRewards = rewardToken.balanceOf(address(this)).add(pending).add(farmRewards.totalClaimedRewards).mul(\\n            PRECISION\\n        );\\n        // calculate new rewards that were received since previous distribution\\n        uint256 totalBlockReward = newTotalRewards.sub(farmRewards.totalRewards);\\n\\n        uint256 cumulativeRewardPerShare = farmRewards.cumulativeRewardPerToken;\\n        if (shares.totalStaked > 0) {\\n            cumulativeRewardPerShare = cumulativeRewardPerShare.add(totalBlockReward.div(shares.totalStaked));\\n        }\\n\\n        uint256 newReward = shares.staked[address(token)]\\n            .mul(cumulativeRewardPerShare.sub(farmRewards.previousCumulatedRewardPerToken[address(token)]))\\n            .div(PRECISION);\\n\\n        return farmRewards.claimableReward[address(token)].add(newReward);\\n    }\\n\\n    /**\\n     * @dev Distribute rewards from distributor and increase cumulativeRewardPerShare in Multifarm\\n     */\\n    function distribute() internal {\\n        // pull TRU from distributor\\n        // only pull if there is distribution and distributor farm is set to this farm\\n        if (trueDistributor.nextDistribution() > 0 && trueDistributor.farm() == address(this)) {\\n            trueDistributor.distribute();\\n        }\\n        _updateCumulativeRewardPerShare();\\n    }\\n\\n    /**\\n     * @dev This function must be called before any change of token share in multifarm happens (e.g. before shares.totalStaked changes)\\n     * This will also update cumulativeRewardPerToken after distribution has happened\\n     * 1. Get total lifetime rewards as Balance of TRU plus total rewards that have already been claimed\\n     * 2. See how much reward we got since previous update (R)\\n     * 3. Increase cumulativeRewardPerToken by R/total shares\\n     */\\n    function _updateCumulativeRewardPerShare() internal {\\n        // calculate new total rewards ever received by farm\\n        uint256 newTotalRewards = rewardToken.balanceOf(address(this)).add(farmRewards.totalClaimedRewards).mul(PRECISION);\\n        // calculate new rewards that were received since previous distribution\\n        uint256 rewardSinceLastUpdate = newTotalRewards.sub(farmRewards.totalRewards);\\n        // update info about total farm rewards\\n        farmRewards.totalRewards = newTotalRewards;\\n        // if there are sub farms increase their value per share\\n        if (shares.totalStaked > 0) {\\n            farmRewards.cumulativeRewardPerToken = farmRewards.cumulativeRewardPerToken.add(\\n                rewardSinceLastUpdate.div(shares.totalStaked)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Update rewards for the farm on token and for the staker.\\n     * The function must be called before any modification of staker's stake and to update values when claiming rewards\\n     */\\n    function updateRewards(IERC20 token) internal {\\n        _updateTokenFarmRewards(token);\\n        _updateClaimableRewardsForStaker(token);\\n    }\\n\\n    /**\\n     * @dev Update rewards data for the token farm - update all values associated with total available rewards for the farm inside multifarm\\n     */\\n    function _updateTokenFarmRewards(IERC20 token) internal {\\n        _updateClaimableRewardsForFarm(token);\\n        _updateTotalRewards(token);\\n    }\\n\\n    /**\\n     * @dev Increase total claimable rewards for token farm in multifarm.\\n     * This function must be called before share of the token in multifarm is changed and to update total claimable rewards for the staker\\n     */\\n    function _updateClaimableRewardsForFarm(IERC20 token) internal {\\n        if (shares.staked[address(token)] == 0) {\\n            return;\\n        }\\n        // claimableReward += staked(token) * (cumulativeRewardPerShare - previousCumulatedRewardPerShare(token))\\n        uint256 newReward = shares.staked[address(token)]\\n            .mul(farmRewards.cumulativeRewardPerToken.sub(farmRewards.previousCumulatedRewardPerToken[address(token)]))\\n            .div(PRECISION);\\n\\n        farmRewards.claimableReward[address(token)] = farmRewards.claimableReward[address(token)].add(newReward);\\n        farmRewards.previousCumulatedRewardPerToken[address(token)] = farmRewards.cumulativeRewardPerToken;\\n    }\\n\\n    /**\\n     * @dev Update total reward for the farm\\n     * Get total farm reward as claimable rewards for the given farm plus total rewards claimed by stakers in the farm\\n     */\\n    function _updateTotalRewards(IERC20 token) internal {\\n        uint256 totalRewards = farmRewards.claimableReward[address(token)].add(stakerRewards[token].totalClaimedRewards).mul(\\n            PRECISION\\n        );\\n        // calculate received reward\\n        uint256 rewardReceivedSinceLastUpdate = totalRewards.sub(stakerRewards[token].totalRewards);\\n\\n        // if there are stakers of the token, increase cumulativeRewardPerToken by newly received reward per total staked amount\\n        if (stakes[token].totalStaked > 0) {\\n            stakerRewards[token].cumulativeRewardPerToken = stakerRewards[token].cumulativeRewardPerToken.add(\\n                rewardReceivedSinceLastUpdate.div(stakes[token].totalStaked)\\n            );\\n        }\\n\\n        // update farm rewards\\n        stakerRewards[token].totalRewards = totalRewards;\\n    }\\n\\n    /**\\n     * @dev Update claimable rewards for the msg.sender who is staking this token\\n     * Increase claimable reward by the number that is\\n     * staker's stake times the change of cumulativeRewardPerToken for the given token since this function was previously called\\n     * This method must be called before any change of staker's stake\\n     */\\n    function _updateClaimableRewardsForStaker(IERC20 token) internal {\\n        // increase claimable reward for sender by amount staked by the staker times the growth of cumulativeRewardPerToken since last update\\n        stakerRewards[token].claimableReward[msg.sender] = stakerRewards[token].claimableReward[msg.sender].add(\\n            stakes[token].staked[msg.sender]\\n                .mul(\\n                stakerRewards[token].cumulativeRewardPerToken.sub(stakerRewards[token].previousCumulatedRewardPerToken[msg.sender])\\n            )\\n                .div(PRECISION)\\n        );\\n\\n        // update previous cumulative for sender\\n        stakerRewards[token].previousCumulatedRewardPerToken[msg.sender] = stakerRewards[token].cumulativeRewardPerToken;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnstaked\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cumulativeRewardPerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITrueDistributor\",\"name\":\"_trueDistributor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"updatedShares\",\"type\":\"uint256[]\"}],\"name\":\"setShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cumulativeRewardPerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trueDistributor\",\"outputs\":[{\"internalType\":\"contract ITrueDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TrueMultiFarm","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}