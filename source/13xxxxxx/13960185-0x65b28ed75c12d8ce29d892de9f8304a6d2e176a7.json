{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"KaijuDAO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"ThreePerWallet.sol\\\";\\nimport \\\"Ownable.sol\\\";\\nimport \\\"ERC721.sol\\\";\\nimport \\\"IERC721.sol\\\";\\n\\nimport \\\"IOpenDAO.sol\\\";\\n/***************************************************************************************************\\noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\nooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo+/::://+ooooooooooooo\\noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo/-`       `./ooooooooooo\\noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo/.             .+ooooooooo\\nooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo/`               `+oooooooo\\nooooooooooooooooooooooooooooooooooooooossyyhhddddmmmmmddddhhyyssoooooooo+`                 ./++ooooo\\nooooooooooooooooooooooooooooooooosyhdmNNNNNmmmmmddddddddmmmmNNNNNmdhyso/-                   ```-/ooo\\nooooooooooooooooooooooooooooosydNNNmmddhhdddmddddddddddddddhhysyhhdmNNmo`                       `:oo\\nooooooooooooo++:-....-:++oosdNMMd+/:yNMMMMNmdhhyyyyyyyyyyhhdmMMNmo-:/oNMh                         /o\\noooooooooooo/.          ./oNMNMMdyo/ossyyyhddmmNmmmmmmmmmmmmNmhs+:::/sNMh                         `:\\nooooooooooo-              +MMoshdNNMMNmdhysoo+/////++++oooooosyhhdmNMNd+`                           \\noooooooooo/               /MMo::::/+oshNMMMMMMMMMMMMMMMMMMMMMMMMmdhyo.                              \\noooo+/:::/-             `.-NMm::::::/yNMNhs+++oooossssoooo++sdMMmyooo+:.``                      ``..\\no/.`                  omMMMMMMy::::sNMNy+/////////////////////+hMMmsooooooo+++/////////////+++oooooo\\n.                    hMNs++ohMMs:+mMNy+/////////////////////////odMMhooooooooooooooooooooooooooooooo\\n                    -MMs:::::yMMhNMmo////////////////////////////+yMMdoooooooooooooooooooooooooooooo\\n                    -MMs::::::smMMd+/////////////////////////////++yMMdooooooooooooooooooooooooooooo\\n                     dMm/:::::+NMd+//////////osys+//////////////smNNMMMhoooooooooooooooooooooooooooo\\n                     -mMd/::::mMN+/////////+hNNMMmo////////////sMMyyMMMMsooooooooooooooooooooooooooo\\n                      -dMNs/:sMMs//////////yMM/-hMNo///////////NMd .MMMMdooooooooooooooooooooooooooo\\n`                     `hMMMmomMm///////////NMd  `MMh///////////mMm`.MMMMNooooooooooooooooooooooooooo\\n+/:-----------------..oMMshNMMMy///////////mMm` .MMh///////////oNMmmMNdMMsoooooooooooooooooooooooooo\\noooooooooooooooooooooohMM+:/hMMs///////////sNMmymMNo///+++syyhhhdNMNhoyMMsoooooooooooooooooooooooooo\\noooooooooooooooooooooosMMh::sMMo////////////+ydddy+/+oydNMMNNNmmmNNMMNNMMooooooooooooooooooooooooooo\\noooooooooooooooooooooooyMMh:sMMo//////////////////+smMMmhyo+//////+yyymMMdoooooooooooooooooooooooooo\\nooooooydmNMMMNNNmmdhysooyNMmhMMs/////////////////omMMho/oNNo//////yMM+/sNMmooooooooooosssyyssooooooo\\nooooohMMy+///++oshdNMMNdoohMMMMh/////////////////smd+///oMMo//////omd+//hMMoooooyhmNMMMMMMMMMNdooooo\\nooooohMMs-`         ./mMNooodNMN//////////////////+//////++////////+////hMMooymMMmhs+:-..``./NMdoooo\\nooooooyMMMNmhysso.    :MMyoooyMMs/////////////+s+//////////////////////+NMmodMMs-`   `.-:/+ydMMhoooo\\noooooooMMmosyhhdd:    .MMhooooNMm+////////////hMN+/////////+oyhmmmdysoodMMsoMMs    `mNNNNNmhmMMooooo\\nooooooohNMdsosymNd     hMNsoooyMMy////////////oNMmso++++oshNNNmdhdmNMNNMmyohMM-    /hs+/::/+mMmooooo\\noooooooosNMMddhyo/     `yNNmddNMMNy+///////////ohNMNNmNNNNmdyo+///+yMMNyosyNMh     hNNmmmNNMNhoooooo\\nooooooooodMM+--+dm+  ..  -ohNMMNymMmy+///////////+oyyhyyso+//////+omMNMNmNMmo`   .-..://+dMMoooooooo\\noooooooooohNNNMMms--ymm. ``+NMM: .omMmy+////////////oso++/+++ooshmMNdohMMm/. --``dNmhsosdMNyoooooooo\\noooooooooooosmMMdhdMMh:`/dmMMMMy   .oNMNhs+////////+mMNmmdmmNNMNNdyo///yNMy``mMh::omMMNNmhsooooooooo\\noooooooooooooohmNMMMMhydMMMMyyMMo `+dMNNNMNho///////+syhdddhysso+///////sNMdssNMMNNMNhoooooooooooooo\\noooooooooooosmMMMMMMMMmhhMMh//yMMohMNyssyymMNs///////////////////////////oNMMMNNdyysoooooooooooooooo\\noooooooooooomMm++oshNMNyNMm+///yMMMM+dMmmMmdMMs+//////////////////////////oNMmoooooooooooooooooooooo\\nooooooooooooNMd::::::omMMMo/////oNMN:NMsoNMsMMMms/////+++++////////////////sMMhooooooooooooooooooooo\\noooo+/:--::/mMm:::::::+MMh///////yMMy+dmmdohMMyMMmhdNMMMNMMMMNNmdys+////////hMMyoooooooooooooooooooo\\no+:`        yMM:::::::dMN+////////yNMmysshmMMm..omMMmo:::::://+oydNNdo//////+mMNoooooooooooooooooooo\\n/`          :MMs:::::/MMh//////////+yNMMNMMo/NN: `/hNMmy+:::::::::/omMh//////oMMdo+/:::/+ooooooooooo\\n             dMm:::::yMM+////////////oNMdoMd`.dd    .+hNMmho/:::::::/dMy//////dMM/`     `-+ooooooooo\\n             +MMy::::NMm//////////////sMMy+Nd.``      `./ymMNdyo/::::/MN++mms/oMMo        `+oooooooo\\n            sNMMMs::+MMy///////////////yMM//Nm:           `-ohmNNmyo+/mMo/mMm//mMm         /oooooooo\\n           :MMshMNs:sMMo////////////ymh+mMm -hNs`             .-+ymNNmNMhohMMo/yMM-        -/+oooooo\\n           +MM+:hMMohMM/////////////dMN/yMM: `oNd/`               `-/shmNNNMMh/oMM+          `/ooooo\\n           -MMs::os/mMm/////////////dMM/+MMo   -yNy                    `-/sNMm//MMy           `+oooo\\n            dMm:::::NMm/////////////hMM++MMs     -.                        yMM+/NMd            /oooo\\n            :MMy::::NMd/////////////hMM+oMM+                               +MMo/mMm`          .+oooo\\n             sMMo:::NMd/////////////hMModMN`                               /MMs/mMNo+++++////+oooooo\\n              yMMs::mMm/////////////yMMdMM/                                :MMs/NMmooooooooooooooooo\\n ***************************************************************************************************/\\n\\ncontract KaijuDAO is ERC721, ThreePerWallet, Ownable{\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    address private signer;\\n    address payable public treasury;\\n    bool private publicGen0Sale;\\n    bool private publicGen1Sale;\\n    bool private preGen0Sale;\\n    \\n    uint16 public minted;\\n    //uint256 public constant MINT_PRICE_SOS_GEN0 = 50000000000000000000000000;\\n    uint256 public  MINT_PRICE_ETH_GEN0_PRESALE = 0.03 ether;\\n    uint256 public  MINT_PRICE_ETH_GEN0 = 0.04 ether;\\n    uint256 public  MINT_PRICE_ETH_GEN1 = 0.04 ether;\\n    uint256 public  MINT_PRICE_SOS_GEN0_PRESALE = 23000000000000000000000000;\\n    uint256 public  MINT_PRICE_SOS_GEN0 = 31000000000000000000000000;\\n    uint256 public  MINT_PRICE_SOS_GEN1 = 31000000000000000000000000;\\n    uint256 public MAX_TOKENS_GEN0 = 10000;\\n    uint256 public MAX_TOKENS_GEN1 = 10000;\\n    uint256 public MAX_AIRDROPS_GEN0 = 100;\\n    uint256 public MAX_AIRDROPS_GEN1 = 100;\\n    uint256 public remain_airdrops_gen0 = 100;\\n    uint256 public remain_airdrops_gen1 = 100;\\n\\n    uint16 public round_gen0;\\n    uint16 public round_gen1;\\n\\n    address[] public power_leaders;\\n    address[] public money_leaders;\\n    address[] public music_leaders;\\n    address[] public alien_leaders;\\n    address[] public zombie_leaders;\\n\\n    mapping(uint256 => uint16) public traits;\\n    uint256[] public power_list;\\n    uint256[] public money_list;\\n    uint256[] public music_list;\\n    uint256[] public alien_list;\\n    uint256[] public zombie_list;\\n\\n    IOpenDAO private openDAO;\\n\\n    uint256 private accum_eth_gen0 = 0 ether;\\n    uint256 private accum_eth_gen1 = 0 ether;\\n\\n    uint256 private accum_sos_gen0 = 0;\\n    uint256 private accum_sos_gen1 = 0;\\n\\n    constructor(address _openDAOAddress) ERC721(\\\"ChubbyKaijuDAO\\\", \\\"CKAIJU\\\"){\\n        openDAO = IOpenDAO(_openDAOAddress);\\n    }\\n\\n    function initialize(uint256 supply0, uint256 supply1, uint256 airdrop0, uint256 airdrop1, address _signer, address payable _treasury) public onlyOwner {\\n        openDAO.approve(address(this), 1000000000000000000000000000000);\\n        MAX_TOKENS_GEN0=supply0;\\n        MAX_TOKENS_GEN1=supply1;\\n        MAX_AIRDROPS_GEN0 = airdrop0;\\n        remain_airdrops_gen0 = MAX_AIRDROPS_GEN0;\\n        MAX_AIRDROPS_GEN1 = airdrop1;\\n        remain_airdrops_gen1 = MAX_AIRDROPS_GEN1;\\n        signer = _signer;\\n        treasury = _treasury;\\n    }\\n\\n    function _setTrait(uint256 tokenId) internal {\\n        uint256 seed = uint256(keccak256(abi.encodePacked(block.timestamp, tokenId)));\\n        if(tokenId<MAX_TOKENS_GEN0+1){\\n            uint16 mod = uint16(seed % 3);\\n            traits[tokenId] = mod;\\n            if(mod == 0 && power_list.length<uint256(MAX_TOKENS_GEN0/3)){\\n                power_list.push(tokenId);\\n            }else if(mod == 1 && money_list.length<uint256(MAX_TOKENS_GEN0/3)){\\n                money_list.push(tokenId);\\n            }else{\\n                music_list.push(tokenId);\\n            }\\n        }else{\\n            uint16 mod = uint16(seed % 2)+3;\\n            traits[tokenId] = mod;\\n            if(mod==3 && alien_list.length < MAX_TOKENS_GEN1/2) alien_list.push(tokenId);\\n            else zombie_list.push(tokenId);\\n        }\\n    }\\n\\n    function airdropGEN0(address[] calldata airdropAddresses) public onlyOwner {\\n        require(remain_airdrops_gen0-airdropAddresses.length>=0, \\\"Too many airdrops\\\");\\n        for(uint256 i = 0; i < airdropAddresses.length; i++) {\\n            minted++;\\n            _setTrait(minted);\\n            _mint(airdropAddresses[i], minted);\\n            _autoTransfer();\\n        }\\n        remain_airdrops_gen0 -= airdropAddresses.length;\\n    }\\n\\n    function airdropGEN1(address[] calldata airdropAddresses) public onlyOwner {\\n        require(remain_airdrops_gen1-airdropAddresses.length>=0, \\\"Too many airdrops\\\");\\n        for(uint256 i = 0; i < airdropAddresses.length; i++) {\\n            minted++;\\n            _setTrait(minted);\\n            _mint(airdropAddresses[i], minted);\\n            _autoTransfer();\\n        }\\n        remain_airdrops_gen1 -= airdropAddresses.length;\\n    }\\n\\n    function preSaleETH(bytes memory signature, uint16 amount) external payable threePerWallet(msg.sender, minted+1){\\n        require(preGen0Sale, \\\"preSale closed\\\");\\n        require(isWhitelisted(msg.sender, signature), \\\"Not Whitelisted\\\");\\n        require(MINT_PRICE_ETH_GEN0_PRESALE * amount == msg.value, \\\"Invalid payment amount\\\");\\n        require(amount < 4, \\\"Too many amount\\\");\\n        require(minted + amount <= MAX_TOKENS_GEN0-remain_airdrops_gen0, \\\"minted out\\\");\\n        for(uint i=0; i<amount; i++){\\n            minted++;\\n            accum_eth_gen0 += MINT_PRICE_ETH_GEN0_PRESALE;\\n            _setTrait(minted);\\n            _mint(msg.sender, minted);\\n            _autoTransfer();\\n        }\\n    }\\n    function publicETH(uint16 amount) external payable threePerWallet(msg.sender, minted+1){\\n        if(minted<MAX_TOKENS_GEN0){\\n            require(publicGen0Sale, \\\"publicGen0Sale not open\\\");\\n            require(MINT_PRICE_ETH_GEN0 * amount == msg.value, \\\"Invalid payment amount\\\");\\n            require(minted + amount <= MAX_TOKENS_GEN0-remain_airdrops_gen0, \\\"minted out\\\");\\n        }else{\\n            require(publicGen1Sale, \\\"publicGen1Sale not open\\\");\\n            require(MINT_PRICE_ETH_GEN1 * amount == msg.value, \\\"Invalid payment amount\\\");\\n            require(minted + amount <= MAX_TOKENS_GEN0+MAX_TOKENS_GEN1-remain_airdrops_gen1, \\\"minted out\\\");\\n        } \\n        require(amount < 4, \\\"Too many amount\\\");\\n        \\n        for(uint i=0; i<amount; i++){\\n            minted++;\\n            if(minted < MAX_TOKENS_GEN0+1) accum_eth_gen0 += MINT_PRICE_ETH_GEN0;\\n            else accum_eth_gen1 += MINT_PRICE_ETH_GEN1;\\n            _setTrait(minted);\\n            _mint(msg.sender, minted);\\n            _autoTransfer();\\n        }\\n    }\\n    function preSaleSOS(bytes memory signature, uint16 amount) external threePerWallet(msg.sender, minted+1){\\n        require(preGen0Sale, \\\"preSale closed\\\");\\n        require(isWhitelisted(msg.sender, signature), \\\"Not Whitelisted\\\");\\n        require(amount < 4, \\\"Too many amount\\\");\\n        require(minted + amount <= MAX_TOKENS_GEN0-remain_airdrops_gen0, \\\"minted out\\\");\\n        require(MINT_PRICE_SOS_GEN0_PRESALE * amount <= openDAO.balanceOf(msg.sender), \\\"not enough balance\\\");\\n        require(MINT_PRICE_SOS_GEN0_PRESALE * amount <= openDAO.allowance(msg.sender, address(this)), \\\"low allowance\\\");\\n        openDAO.transferFrom(msg.sender, address(this), MINT_PRICE_SOS_GEN0_PRESALE * amount);\\n        for(uint i=0; i<amount; i++){\\n            minted++;\\n            accum_sos_gen0 += MINT_PRICE_SOS_GEN0_PRESALE;\\n            _setTrait(minted);\\n            _mint(msg.sender, minted);\\n            _autoTransfer();\\n        }\\n    }\\n    function publicSOS(uint16 amount) external threePerWallet(msg.sender, minted+1){\\n        if(minted<MAX_TOKENS_GEN0){\\n            require(publicGen0Sale, \\\"publicGen0Sale not open\\\");\\n            require(minted + amount <= MAX_TOKENS_GEN0-remain_airdrops_gen0, \\\"minted out\\\");\\n            require(MINT_PRICE_SOS_GEN0 * amount <= openDAO.balanceOf(msg.sender), \\\"not enough balance\\\");\\n            require(MINT_PRICE_SOS_GEN0 * amount <= openDAO.allowance(msg.sender, address(this)), \\\"low allowance\\\");\\n        }else{\\n            require(publicGen1Sale, \\\"publicGen1Sale not open\\\");\\n            require(minted + amount <= MAX_TOKENS_GEN0+MAX_TOKENS_GEN1-remain_airdrops_gen1, \\\"minted out\\\");\\n            require(MINT_PRICE_SOS_GEN1 * amount <= openDAO.balanceOf(msg.sender), \\\"not enough balance\\\");\\n            require(MINT_PRICE_SOS_GEN1 * amount <= openDAO.allowance(msg.sender, address(this)), \\\"low allowance\\\");\\n        } \\n        require(amount < 4, \\\"Too many amount\\\");\\n        \\n        openDAO.transferFrom(msg.sender, address(this), MINT_PRICE_SOS_GEN0_PRESALE * amount);\\n        for(uint i=0; i<amount; i++){\\n            minted++;\\n            if(minted < MAX_TOKENS_GEN0+1) accum_sos_gen0 += MINT_PRICE_SOS_GEN0;\\n            else accum_sos_gen1 += MINT_PRICE_SOS_GEN1;\\n            _setTrait(minted);\\n            _mint(msg.sender, minted);\\n            _autoTransfer();\\n        }\\n    }\\n\\n    function ownerOf(uint256 tokenId) public view override(ERC721) returns (address) {\\n        return super.ownerOf(tokenId);\\n    }\\n\\n    function contractURI() public pure returns (string memory) {\\n        //TODO change contractURI\\n        return \\\"https://raw.githubusercontent.com/KaijuDAO/kaijudao/main/contracturi\\\";\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId), \\\"nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    function _baseURI() override internal pure returns (string memory) {\\n        //TODO change baseURI\\n        return \\\"https://raw.githubusercontent.com/KaijuDAO/kaijudao/main/tokenuri/\\\";\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal override(ERC721, ThreePerWallet) {\\n        ThreePerWallet._mint(to, tokenId);\\n    }\\n\\n    function setLeadersGen0(address power, address money, address music) external onlyOwner {\\n        power_leaders.push(power);\\n        money_leaders.push(money);\\n        music_leaders.push(music);\\n        round_gen0++;\\n    }\\n\\n    function setLeadersGen1(address alien, address zombie) external onlyOwner {\\n        alien_leaders.push(alien);\\n        zombie_leaders.push(zombie);\\n        round_gen1++;\\n    }\\n\\n    function getEthSignedMessageHash(bytes32 _messageHash) public pure returns (bytes32) {\\n        /*\\n        Signature is produced by signing a keccak256 hash with the following format:\\n        \\\"\\\\x19Ethereum Signed Message\\\\n\\\" + len(msg) + msg\\n        */\\n        return\\n        keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash)\\n        );\\n    }\\n\\n    function isWhitelisted(address user, bytes memory signature) public view returns (bool) {\\n        bytes32 messageHash = keccak256(abi.encode(user));\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n\\n        return recoverSigner(ethSignedMessageHash, signature) == signer;\\n    }\\n\\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature) private pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory sig) private pure returns (bytes32 r, bytes32 s, uint8 v) {\\n        require(sig.length == 65, \\\"sig invalid\\\");\\n\\n        assembly {\\n        /*\\n        First 32 bytes stores the length of the signature\\n\\n        add(sig, 32) = pointer of sig + 32\\n        effectively, skips first 32 bytes of signature\\n\\n        mload(p) loads next 32 bytes starting at the memory address p into memory\\n        */\\n\\n        // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n        // second 32 bytes\\n            s := mload(add(sig, 64))\\n        // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // implicitly return (r, s, v)\\n    }\\n    function setPreGen0Sale(bool isPre) public onlyOwner {\\n        preGen0Sale = isPre;\\n    }\\n    function setpublicGen0Sale(bool isPublic) public onlyOwner {\\n        publicGen0Sale = isPublic;\\n    }\\n    \\n    function setpublicGen1Sale(bool isPublic) public onlyOwner {\\n        publicGen1Sale = isPublic;\\n    }\\n\\n    function setSupplyGen0(uint256 supply) public onlyOwner {\\n        MAX_TOKENS_GEN0=supply;\\n    }\\n\\n    function setSupplyGen1(uint256 supply) public onlyOwner {\\n        MAX_TOKENS_GEN1=supply;\\n    }\\n\\n    function setSigner(address _signer) public onlyOwner {\\n        signer = _signer;\\n    }\\n\\n    function setTreasury(address payable _treasury) public onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n    function setAirdropGen0(uint256 airdrop) public onlyOwner{\\n        MAX_AIRDROPS_GEN0 = airdrop;\\n    }\\n\\n    function setAirdropGen1(uint256 airdrop) public onlyOwner{\\n        MAX_AIRDROPS_GEN1 = airdrop;\\n    }\\n\\n    function setGen0SOSPrice(uint256 price) public onlyOwner{\\n        MINT_PRICE_SOS_GEN0 = price;\\n    }\\n\\n    function setGen1SOSPrice(uint256 price) public onlyOwner{\\n        MINT_PRICE_SOS_GEN1 = price;\\n    }\\n\\n    function _autoTransfer() internal {\\n        if(minted < MAX_TOKENS_GEN0+1){\\n            if(minted%1000 == 0){\\n                require(address(this).balance>=accum_eth_gen0);\\n                treasury.transfer(accum_eth_gen0/4);\\n                openDAO.transferFrom(address(this), treasury, uint256(accum_sos_gen0/4));\\n                accum_eth_gen0=0 ether;\\n                accum_sos_gen0=0 ;\\n                \\n            }\\n        }else{\\n            // TODO: Gen1 treasury autotransfer\\n            if(minted%1000 == 0){\\n                require(address(this).balance>=accum_eth_gen1);\\n                treasury.transfer(accum_eth_gen1/4);\\n                openDAO.transferFrom(address(this), treasury, uint256(accum_sos_gen1/4));\\n                accum_eth_gen1=0 ether;\\n                accum_sos_gen1=0 ;\\n            }\\n        }\\n    }\\n\\n    function withdraw() public onlyOwner{\\n        payable(owner()).transfer(address(this).balance);\\n        openDAO.transferFrom(address(this), owner(), openDAO.balanceOf(address(this)));\\n    }\\n}\"\r\n    },\r\n    \"ThreePerWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"ERC721.sol\\\";\\n\\n/// @author 1001.digital\\n/// @title An extension that enables checking that an address only holds one token.\\nabstract contract ThreePerWallet is ERC721 {\\n    // Mapping owner address to token\\n    mapping (address => uint256) private _ownedGen0;\\n    mapping (address => uint256) private _ownedGen1;\\n\\n    /// Require an externally owned account to only hold one token.\\n    /// @param wallet the address of\\n    /// @dev Only allow one token per wallet\\n    modifier threePerWallet(address wallet, uint256 tokenId) {\\n        if (_isExternal(wallet)) {\\n            if(tokenId<10001){\\n                require(_ownedGen0[wallet] < 3, \\\"Can only hold three tokens per wallet\\\");\\n            }else{\\n                require(_ownedGen1[wallet] < 3, \\\"Can only hold three tokens per wallet\\\");\\n            }\\n            \\n        }\\n\\n        _;\\n    }\\n\\n\\n    /// Store `_ownedGen0` instead of `_balances`.\\n    /// @param to the address to which to mint the token\\n    /// @param tokenId the tokenId that should be minted\\n    /// @dev overrides the OpenZeppelin `_mint` method to accomodate for our own balance tracker\\n    function _mint(address to, uint256 tokenId) internal virtual override threePerWallet(to, tokenId) {\\n        super._mint(to, tokenId);\\n\\n        // We add one to account for 0-index based collections\\n        if(msg.sender==to){\\n            if(tokenId<10001){\\n                _ownedGen0[to] += 1;\\n            }else{\\n                _ownedGen1[to] += 1;\\n            }\\n        }\\n        \\n    }\\n    /*\\n    /// Track transfers in `_ownedGen0` instead of `_balances`\\n    /// @param from the address from which to transfer the token\\n    /// @param to the address to which to transfer the token\\n    /// @param tokenId the tokenId that is being transferred\\n    /// @dev overrides the OpenZeppelin `_transfer` method to accomodate for our own balance tracker\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual override threePerWallet(to, tokenId) {\\n        super._transfer(from, to, tokenId);\\n        if(tokenId<10001){\\n            _ownedGen0[from] -= 1;\\n            // We add one to account for 0-index based collections\\n            _ownedGen0[to] += 1;\\n        }else{\\n            _ownedGen1[from] -= 1;\\n            // We add one to account for 0-index based collections\\n            _ownedGen1[to] += 1;\\n        }\\n        \\n    }\\n    */\\n    function _isContract(address account) internal view returns (bool) {\\n        return _getSize(account) > 0;\\n    }\\n\\n    /// Check whether an address is an external wallet.\\n    /// @param account the address to check\\n    /// @dev checks if the `extcodesize` of `address` is zero\\n    /// @return true for external wallets\\n    function _isExternal(address account) internal view returns (bool) {\\n        return _getSize(account) == 0;\\n    }\\n\\n    /// Get the size of the code of an address\\n    /// @param account the address to check\\n    /// @dev gets the `extcodesize` of `address`\\n    /// @return the size of the address\\n    function _getSize(address account) internal view returns (uint256) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size;\\n    }\\n}\"\r\n    },\r\n    \"ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\nimport \\\"IERC721Receiver.sol\\\";\\nimport \\\"IERC721Metadata.sol\\\";\\nimport \\\"Address.sol\\\";\\nimport \\\"Context.sol\\\";\\nimport \\\"Strings.sol\\\";\\nimport \\\"ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"\r\n    },\r\n    \"IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\"\r\n    },\r\n    \"IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\"\r\n    },\r\n    \"ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"IOpenDAO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOpenDAO {\\n    function balanceOf(address owner) external view returns(uint256);\\n    function transferFrom(address, address, uint256) external;\\n    function allowance(address owner, address spender) external view returns(uint256);\\n    function approve(address spender, uint256 amount) external returns(bool);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_openDAOAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_AIRDROPS_GEN0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AIRDROPS_GEN1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_GEN0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_GEN1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE_ETH_GEN0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE_ETH_GEN0_PRESALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE_ETH_GEN1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE_SOS_GEN0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE_SOS_GEN0_PRESALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRICE_SOS_GEN1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"airdropAddresses\",\"type\":\"address[]\"}],\"name\":\"airdropGEN0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"airdropAddresses\",\"type\":\"address[]\"}],\"name\":\"airdropGEN1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"alien_leaders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"alien_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"getEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"airdrop0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"airdrop1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"money_leaders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"money_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"music_leaders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"music_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"power_leaders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"power_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"preSaleETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"preSaleSOS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"publicETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"publicSOS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remain_airdrops_gen0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remain_airdrops_gen1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round_gen0\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round_gen1\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"airdrop\",\"type\":\"uint256\"}],\"name\":\"setAirdropGen0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"airdrop\",\"type\":\"uint256\"}],\"name\":\"setAirdropGen1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setGen0SOSPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setGen1SOSPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"power\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"money\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"music\",\"type\":\"address\"}],\"name\":\"setLeadersGen0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"alien\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zombie\",\"type\":\"address\"}],\"name\":\"setLeadersGen1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPre\",\"type\":\"bool\"}],\"name\":\"setPreGen0Sale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"setSupplyGen0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"setSupplyGen1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"name\":\"setpublicGen0Sale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"name\":\"setpublicGen1Sale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"zombie_leaders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"zombie_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"KaijuDAO","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003b484b82567a09e2588a13d54d032153f0c0aee0","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}