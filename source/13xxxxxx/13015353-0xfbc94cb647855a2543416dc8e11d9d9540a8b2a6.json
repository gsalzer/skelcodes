{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/flattened/NewUniswapV2Router.sol\": {\r\n      \"content\": \"// File: original_contracts/ITokenTransferProxy.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ninterface ITokenTransferProxy {\\n\\n    function transferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        external;\\n}\\n\\n// File: original_contracts/AugustusStorage.sol\\n\\npragma solidity 0.7.5;\\n\\n\\ncontract AugustusStorage {\\n\\n    struct FeeStructure {\\n        uint256 partnerShare;\\n        bool noPositiveSlippage;\\n        bool positiveSlippageToUser;\\n        uint16 feePercent;\\n        string partnerId;\\n        bytes data;\\n    }\\n\\n    ITokenTransferProxy internal tokenTransferProxy;\\n    address payable internal feeWallet;\\n    \\n    mapping(address => FeeStructure) internal registeredPartners;\\n\\n    mapping (bytes4 => address) internal selectorVsRouter;\\n    mapping (bytes32 => bool) internal adapterInitialized;\\n    mapping (bytes32 => bytes) internal adapterVsData;\\n\\n    mapping (bytes32 => bytes) internal routerData;\\n    mapping (bytes32 => bool) internal routerInitialized;\\n\\n\\n    bytes32 public constant WHITELISTED_ROLE = keccak256(\\\"WHITELISTED_ROLE\\\");\\n\\n    bytes32 public constant ROUTER_ROLE = keccak256(\\\"ROUTER_ROLE\\\");\\n\\n}\\n\\n// File: original_contracts/routers/IRouter.sol\\n\\npragma solidity 0.7.5;\\n\\ninterface IRouter {\\n\\n    /**\\n    * @dev Certain routers/exchanges needs to be initialized.\\n    * This method will be called from Augustus\\n    */\\n    function initialize(bytes calldata data) external;\\n\\n    /**\\n    * @dev Returns unique identifier for the router\\n    */\\n    function getKey() external pure returns(bytes32);\\n\\n    event Swapped(\\n        bytes16 uuid,\\n        address initiator,\\n        address indexed beneficiary,\\n        address indexed srcToken,\\n        address indexed destToken,\\n        uint256 srcAmount,\\n        uint256 receivedAmount,\\n        uint256 expectedAmount\\n    );\\n\\n    event Bought(\\n        bytes16 uuid,\\n        address initiator,\\n        address indexed beneficiary,\\n        address indexed srcToken,\\n        address indexed destToken,\\n        uint256 srcAmount,\\n        uint256 receivedAmount\\n    );\\n\\n    event FeeTaken(\\n        uint256 fee,\\n        uint256 partnerShare,\\n        uint256 paraswapShare\\n    );\\n}\\n\\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// File: original_contracts/lib/weth/IWETH.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\nabstract contract IWETH is IERC20 {\\n    function deposit() external virtual payable;\\n    function withdraw(uint256 amount) external virtual;\\n}\\n\\n// File: original_contracts/lib/uniswapv2/IUniswapV2Pair.sol\\n\\npragma solidity 0.7.5;\\n\\ninterface IUniswapV2Pair {\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    )\\n        external;\\n}\\n\\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// File: original_contracts/lib/uniswapv2/NewUniswapV2Lib.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\nlibrary NewUniswapV2Lib {\\n    using SafeMath for uint256;\\n\\n    function getReservesByPair(\\n        address pair,\\n        bool direction\\n    )\\n        internal\\n        view\\n        returns (uint256 reserveIn, uint256 reserveOut)\\n    {\\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(pair).getReserves();\\n        (reserveIn, reserveOut) = direction ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        address pair,\\n        bool direction,\\n        uint256 fee\\n    )\\n        internal\\n        view\\n        returns (uint256 amountOut)\\n    {\\n        require(amountIn > 0, \\\"UniswapV2Lib: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        (uint256 reserveIn, uint256 reserveOut) = getReservesByPair(pair, direction);\\n        uint256 amountInWithFee = amountIn.mul(fee);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(10000).add(amountInWithFee);\\n        amountOut = uint256(numerator / denominator);\\n    }\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        address pair,\\n        bool direction,\\n        uint256 fee\\n    )\\n        internal\\n        view\\n        returns (uint256 amountIn)\\n    {\\n        require(amountOut > 0, \\\"UniswapV2Lib: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        (uint256 reserveIn, uint256 reserveOut) = getReservesByPair(pair, direction);\\n        require(reserveOut > amountOut, \\\"UniswapV2Lib: reserveOut should be greater than amountOut\\\");\\n        uint256 numerator = reserveIn.mul(amountOut).mul(10000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(fee);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n}\\n\\n// File: @uniswap/lib/contracts/libraries/TransferHelper.sol\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\\n// File: original_contracts/routers/NewUniswapV2Router.sol\\n\\npragma solidity 0.7.5;\\n\\n\\n\\n\\n\\n\\n\\ncontract NewUniswapV2Router is AugustusStorage, IRouter {\\n    using SafeMath for uint256;\\n\\n    address constant ETH_IDENTIFIER = address(\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\n    );\\n    // Pool bits are 255-161: fee, 160: direction flag, 159-0: address\\n    uint256 constant FEE_OFFSET = 161;\\n    uint256 constant DIRECTION_FLAG =\\n        0x0000000000000000000000010000000000000000000000000000000000000000;\\n\\n    function initialize(bytes calldata data) override external {\\n        revert(\\\"METHOD NOT IMPLEMENTED\\\");\\n    }\\n\\n    function getKey() override external pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(\\\"UNISWAP_DIRECT_ROUTER\\\", \\\"2.0.0\\\"));\\n    }\\n\\n    function swapOnUniswapV2Fork(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address weth,\\n        uint256[] calldata pools\\n    )\\n        external\\n        payable\\n    {\\n        _swap(\\n            tokenIn,\\n            amountIn,\\n            amountOutMin,\\n            weth,\\n            pools\\n        );\\n    }\\n\\n    function buyOnUniswapV2Fork(\\n        address tokenIn,\\n        uint256 amountInMax,\\n        uint256 amountOut,\\n        address weth,\\n        uint256[] calldata pools\\n    )\\n        external\\n        payable\\n    {\\n        _buy(\\n            tokenIn,\\n            amountInMax,\\n            amountOut,\\n            weth,\\n            pools\\n        );\\n    }\\n\\n    function transferTokens(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        private\\n    {\\n        ITokenTransferProxy(tokenTransferProxy).transferFrom(\\n            token, from, to, amount\\n        );\\n    }\\n\\n    function _swap(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address weth,\\n        uint256[] memory pools\\n    )\\n        private\\n        returns (uint256 tokensBought)\\n    {\\n        uint256 pairs = pools.length;\\n\\n        require(pairs != 0, \\\"At least one pool required\\\");\\n\\n        bool tokensBoughtEth;\\n\\n        if (tokenIn == ETH_IDENTIFIER) {\\n            require(amountIn == msg.value, \\\"Incorrect amount of ETH sent\\\");\\n            IWETH(weth).deposit{value: msg.value}();\\n            require(IWETH(weth).transfer(address(pools[0]), msg.value));\\n        } else {\\n            transferTokens(tokenIn, msg.sender, address(pools[0]), amountIn);\\n            tokensBoughtEth = weth != address(0);\\n        }\\n\\n        tokensBought = amountIn;\\n\\n        for (uint256 i = 0; i < pairs; ++i) {\\n            uint256 p = pools[i];\\n            address pool = address(p);\\n            bool direction = p & DIRECTION_FLAG == 0;\\n\\n            tokensBought = NewUniswapV2Lib.getAmountOut(\\n                tokensBought, pool, direction, p >> FEE_OFFSET\\n            );\\n            (uint256 amount0Out, uint256 amount1Out) = direction\\n                ? (uint256(0), tokensBought) : (tokensBought, uint256(0));\\n            IUniswapV2Pair(pool).swap(\\n                amount0Out,\\n                amount1Out,\\n                i + 1 == pairs\\n                    ? (tokensBoughtEth ? address(this) : msg.sender)\\n                    : address(pools[i + 1]),\\n                \\\"\\\"\\n            );\\n        }\\n\\n        if (tokensBoughtEth) {\\n            IWETH(weth).withdraw(tokensBought);\\n            TransferHelper.safeTransferETH(msg.sender, tokensBought);\\n        }\\n\\n        require(tokensBought >= amountOutMin, \\\"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    }\\n\\n    function _buy(\\n        address tokenIn,\\n        uint256 amountInMax,\\n        uint256 amountOut,\\n        address weth,\\n        uint256[] memory pools\\n    )\\n        private\\n        returns (uint256 tokensSold)\\n    {\\n        uint256 pairs = pools.length;\\n\\n        require(pairs != 0, \\\"At least one pool required\\\");\\n\\n        uint256[] memory amounts = new uint256[](pairs + 1);\\n\\n        amounts[pairs] = amountOut;\\n\\n        for (uint256 i = pairs; i != 0; --i) {\\n            uint256 p = pools[i - 1];\\n            amounts[i - 1] = NewUniswapV2Lib.getAmountIn(\\n                amounts[i],\\n                address(p),\\n                p & DIRECTION_FLAG == 0,\\n                p >> FEE_OFFSET\\n            );\\n        }\\n\\n        tokensSold = amounts[0];\\n        require(tokensSold <= amountInMax, \\\"UniswapV2Router: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        bool tokensBoughtEth;\\n\\n        if (tokenIn == ETH_IDENTIFIER) {\\n            TransferHelper.safeTransferETH(\\n                msg.sender, msg.value.sub(tokensSold)\\n            );\\n            IWETH(weth).deposit{value: tokensSold}();\\n            require(IWETH(weth).transfer(address(pools[0]), tokensSold));\\n        } else {\\n            transferTokens(tokenIn, msg.sender, address(pools[0]), tokensSold);\\n            tokensBoughtEth = weth != address(0);\\n        }\\n\\n        for (uint256 i = 0; i < pairs; ++i) {\\n            uint256 p = pools[i];\\n            (uint256 amount0Out, uint256 amount1Out) = p & DIRECTION_FLAG == 0\\n                ? (uint256(0), amounts[i + 1]) : (amounts[i + 1], uint256(0));\\n            IUniswapV2Pair(address(p)).swap(\\n                amount0Out,\\n                amount1Out,\\n                i + 1 == pairs\\n                    ? (tokensBoughtEth ? address(this) : msg.sender)\\n                    : address(pools[i + 1]),\\n                \\\"\\\"\\n            );\\n        }\\n\\n        if (tokensBoughtEth) {\\n            IWETH(weth).withdraw(amountOut);\\n            TransferHelper.safeTransferETH(msg.sender, amountOut);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partnerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paraswapShare\",\"type\":\"uint256\"}],\"name\":\"FeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"uuid\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROUTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELISTED_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"pools\",\"type\":\"uint256[]\"}],\"name\":\"buyOnUniswapV2Fork\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"pools\",\"type\":\"uint256[]\"}],\"name\":\"swapOnUniswapV2Fork\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"NewUniswapV2Router","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}