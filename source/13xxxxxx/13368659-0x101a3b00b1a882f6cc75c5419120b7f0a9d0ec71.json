{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n// ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\r\n// ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\r\n// ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\r\n// ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\r\n// ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\r\n// ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\r\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\npragma solidity >=0.7.0;\r\n\r\n/// @title The interface for the Ante V0.5 Ante Test\r\n/// @notice The Ante V0.5 Ante Test wraps test logic for verifying fundamental invariants of a protocol\r\ninterface IAnteTest {\r\n    /// @notice Returns the author of the Ante Test\r\n    /// @dev This overrides the auto-generated getter for testAuthor as a public var\r\n    /// @return The address of the test author\r\n    function testAuthor() external view returns (address);\r\n\r\n    /// @notice Returns the name of the protocol the Ante Test is testing\r\n    /// @dev This overrides the auto-generated getter for protocolName as a public var\r\n    /// @return The name of the protocol in string format\r\n    function protocolName() external view returns (string memory);\r\n\r\n    /// @notice Returns a single address in the testedContracts array\r\n    /// @dev This overrides the auto-generated getter for testedContracts [] as a public var\r\n    /// @param i The array index of the address to return\r\n    /// @return The address of the i-th element in the list of tested contracts\r\n    function testedContracts(uint256 i) external view returns (address);\r\n\r\n    /// @notice Returns the name of the Ante Test\r\n    /// @dev This overrides the auto-generated getter for testName as a public var\r\n    /// @return The name of the Ante Test in string format\r\n    function testName() external view returns (string memory);\r\n\r\n    /// @notice Function containing test logic to inspect the protocol invariant\r\n    /// @dev This should usually return True\r\n    /// @return A single bool indicating if the Ante Test passes/fails\r\n    function checkTestPasses() external returns (bool);\r\n}\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n/// @title Ante V0.5 Ante Test smart contract\r\n/// @notice Abstract inheritable contract that supplies syntactic sugar for writing Ante Tests\r\n/// @dev Usage: contract YourAnteTest is AnteTest(\"String descriptor of test\") { ... }\r\nabstract contract AnteTest is IAnteTest {\r\n    /// @inheritdoc IAnteTest\r\n    address public override testAuthor;\r\n    /// @inheritdoc IAnteTest\r\n    string public override testName;\r\n    /// @inheritdoc IAnteTest\r\n    string public override protocolName;\r\n    /// @inheritdoc IAnteTest\r\n    address[] public override testedContracts;\r\n\r\n    /// @dev testedContracts and protocolName are optional parameters which should\r\n    /// be set in the constructor of your AnteTest\r\n    /// @param _testName The name of the Ante Test\r\n    constructor(string memory _testName) {\r\n        testAuthor = msg.sender;\r\n        testName = _testName;\r\n    }\r\n\r\n    /// @notice Returns the testedContracts array of addresses\r\n    /// @return The list of tested contracts as an array of addresses\r\n    function getTestedContracts() external view returns (address[] memory) {\r\n        return testedContracts;\r\n    }\r\n\r\n    /// @inheritdoc IAnteTest\r\n    function checkTestPasses() external virtual override returns (bool) {}\r\n}\r\n\r\n\r\n\r\npragma solidity >=0.8.0;\r\n\r\ninterface IPriceOracle {\r\n    function tokenPrice(address _token) external view returns (uint256);\r\n}\r\n\r\n// Ante Test to check if the Wild Credit $WILD token price is always within 1% of the UniswapV3Price oracle\r\n// This will be useful in the event Wild Credit ever changes the price oracle and there would be discrepancies\r\ncontract AnteWildCreditOracleTest is\r\n    AnteTest(\"Wild.Credit Controller price oracle is always the within 1% of Wild.Credit UniswapV3Oracle\")\r\n{\r\n    address public constant wildCreditTokenAddr = 0x08A75dbC7167714CeaC1a8e43a8d643A4EDd625a;\r\n    IPriceOracle public constant uniswapV3Oracle = IPriceOracle(0x3D619bc03014917d3B27B3B86452346af36e58de);\r\n    IPriceOracle public constant controllerPriceOracle = IPriceOracle(0x45ee906E9CFAE0aabDB194D6180A3A119D4376C4);\r\n    uint256 accuracy = 10e12;\r\n\r\n    constructor() {\r\n        protocolName = \"Wild Credit\";\r\n        testedContracts = [address(controllerPriceOracle)];\r\n    }\r\n\r\n    function checkTestPasses() public view override returns (bool) {\r\n        uint256 price1 = uniswapV3Oracle.tokenPrice(wildCreditTokenAddr);\r\n        uint256 price2 = controllerPriceOracle.tokenPrice(wildCreditTokenAddr);\r\n        return ((price1 * accuracy) / (price2)) > 99e11 || ((price2 * accuracy) / (price1)) > 99e11;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"checkTestPasses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerPriceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTestedContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testAuthor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"testedContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV3Oracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wildCreditTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AnteWildCreditOracleTest","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0c09955a05b9f51e013bddf27fc1d7629d9ac15510109f4d522b1089f804a7c8"}]}