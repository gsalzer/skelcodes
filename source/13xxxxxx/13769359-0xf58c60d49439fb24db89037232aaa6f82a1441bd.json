{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\ninterface IToken {\r\n  function transferFrom(address from, address to, uint amount) external returns (bool);\r\n  function approve(address spender, uint value) external returns (bool);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract BridgeBase {\r\n  IToken public token;\r\n  mapping(address => mapping(uint => bool)) public processedNonces;\r\n  mapping(address => uint) public tokenLocked;\r\n\r\n  enum Step { Burn, Mint }\r\n  event Transfer(\r\n    address from,\r\n    address to,\r\n    uint amount,\r\n    uint date,\r\n    uint nonce,\r\n    bytes signature,\r\n    Step indexed step\r\n  );\r\n\r\n  constructor(address _token) {\r\n    token = IToken(_token);\r\n  }\r\n\r\n  function burn(address to, uint amount, uint nonce, bytes calldata signature) external {\r\n    require(processedNonces[msg.sender][nonce] == false, 'transfer already processed');\r\n    processedNonces[msg.sender][nonce] = true;\r\n    require(token.transferFrom(msg.sender, address(this), amount), 'failed to lock token');\r\n    tokenLocked[to] = tokenLocked[to] + amount;\r\n\r\n    emit Transfer(\r\n      msg.sender,\r\n      to,\r\n      amount,\r\n      block.timestamp,\r\n      nonce,\r\n      signature,\r\n      Step.Burn\r\n    );\r\n  }\r\n\r\n  function mint(\r\n    address from, \r\n    address to, \r\n    uint amount, \r\n    uint nonce,\r\n    bytes calldata signature\r\n  ) external {\r\n    bytes32 message = prefixed(keccak256(abi.encodePacked(\r\n      from, \r\n      to, \r\n      amount,\r\n      nonce\r\n    )));\r\n    require(recoverSigner(message, signature) == from , 'wrong signature');\r\n    require(processedNonces[from][nonce] == false, 'transfer already processed');\r\n    require(tokenLocked[from] >= amount, 'insufficient token locked');\r\n    processedNonces[from][nonce] = true;\r\n    token.transfer(to, amount);\r\n    tokenLocked[from] = tokenLocked[from] - amount;\r\n\r\n    emit Transfer(\r\n      from,\r\n      to,\r\n      amount,\r\n      block.timestamp,\r\n      nonce,\r\n      signature,\r\n      Step.Mint\r\n    );\r\n  }\r\n\r\n  function prefixed(bytes32 hash) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(\r\n      '\\x19Ethereum Signed Message:\\n32', \r\n      hash\r\n    ));\r\n  }\r\n\r\n  function recoverSigner(bytes32 message, bytes memory sig)\r\n    internal\r\n    pure\r\n    returns (address)\r\n  {\r\n    uint8 v;\r\n    bytes32 r;\r\n    bytes32 s;\r\n  \r\n    (v, r, s) = splitSignature(sig);\r\n  \r\n    return ecrecover(message, v, r, s);\r\n  }\r\n\r\n  function splitSignature(bytes memory sig)\r\n    internal\r\n    pure\r\n    returns (uint8, bytes32, bytes32)\r\n  {\r\n    require(sig.length == 65);\r\n  \r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n  \r\n    assembly {\r\n        // first 32 bytes, after the length prefix\r\n        r := mload(add(sig, 32))\r\n        // second 32 bytes\r\n        s := mload(add(sig, 64))\r\n        // final byte (first byte of the next 32 bytes)\r\n        v := byte(0, mload(add(sig, 96)))\r\n    }\r\n  \r\n    return (v, r, s);\r\n  }\r\n}\r\n\r\ncontract BridgeEth is BridgeBase {\r\n  constructor(address token) BridgeBase(token) {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"enum BridgeBase.Step\",\"name\":\"step\",\"type\":\"uint8\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"processedNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BridgeEth","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008578530205cecbe5db83f7f29ecfeec860c297c2","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5bfdbdefbf4811dfc4a256955ab0296c06cc8a9b4583d886f6bb80effa44c5be"}]}