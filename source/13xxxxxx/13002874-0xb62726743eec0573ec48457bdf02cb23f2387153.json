{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/VanillaV1Migration01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IVanillaV1MigrationState, IVanillaV1Converter} from \\\"./interfaces/IVanillaV1Migration01.sol\\\";\\n\\n/// @title The contract keeping the record of VNL v1 -> v1.1 migration state\\ncontract VanillaV1MigrationState is IVanillaV1MigrationState {\\n\\n    address private immutable owner;\\n\\n    /// @inheritdoc IVanillaV1MigrationState\\n    bytes32 public override stateRoot;\\n\\n    /// @inheritdoc IVanillaV1MigrationState\\n    uint64 public override blockNumber;\\n\\n    /// @inheritdoc IVanillaV1MigrationState\\n    uint64 public override conversionDeadline;\\n\\n    /// @dev the conversion deadline is initialized to 30 days from the deployment\\n    /// @param migrationOwner The address of the owner of migration state\\n    constructor(address migrationOwner) {\\n        owner = migrationOwner;\\n        conversionDeadline = uint64(block.timestamp + 30 days);\\n    }\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) {\\n            revert UnauthorizedAccess();\\n        }\\n        _;\\n    }\\n\\n    modifier beforeDeadline() {\\n        if (block.timestamp >= conversionDeadline) {\\n            revert MigrationStateUpdateDisabled();\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IVanillaV1MigrationState\\n    function updateConvertibleState(bytes32 newStateRoot, uint64 blockNum) onlyOwner beforeDeadline external override {\\n        stateRoot = newStateRoot;\\n        blockNumber = blockNum;\\n        conversionDeadline = uint64(block.timestamp + 30 days);\\n    }\\n\\n    /// @inheritdoc IVanillaV1MigrationState\\n    function verifyEligibility(bytes32[] memory proof, address tokenOwner, uint256 amount) external view override returns (bool) {\\n        // deliberately using encodePacked with a delimiter string to resolve ambiguity and let client implementations be simpler\\n        bytes32 leafInTree = keccak256(abi.encodePacked(tokenOwner, \\\":\\\", amount));\\n        return block.timestamp < conversionDeadline && MerkleProof.verify(proof, stateRoot, leafInTree);\\n    }\\n\\n}\\n\\n/// @title Conversion functionality for migrating VNL v1 tokens to VNL v1.1\\nabstract contract VanillaV1Converter is IVanillaV1Converter {\\n    /// @inheritdoc IVanillaV1Converter\\n    IVanillaV1MigrationState public override migrationState;\\n    IERC20 internal vnl;\\n\\n    constructor(IVanillaV1MigrationState _state, IERC20 _VNLv1) {\\n        migrationState = _state;\\n        vnl = _VNLv1;\\n    }\\n\\n    function mintConverted(address target, uint256 amount) internal virtual;\\n\\n\\n    /// @inheritdoc IVanillaV1Converter\\n    function checkEligibility(bytes32[] memory proof) external view override returns (bool convertible, bool transferable) {\\n        uint256 balance = vnl.balanceOf(msg.sender);\\n\\n        convertible = migrationState.verifyEligibility(proof, msg.sender, balance);\\n        transferable = balance > 0 && vnl.allowance(msg.sender, address(this)) >= balance;\\n    }\\n\\n    /// @inheritdoc IVanillaV1Converter\\n    function convertVNL(bytes32[] memory proof) external override {\\n        if (block.timestamp >= migrationState.conversionDeadline()) {\\n            revert ConversionWindowClosed();\\n        }\\n\\n        uint256 convertedAmount = vnl.balanceOf(msg.sender);\\n        if (convertedAmount == 0) {\\n            revert NoConvertibleVNL();\\n        }\\n\\n        // because VanillaV1Token01's cannot be burned, the conversion just locks them into this contract permanently\\n        address freezer = address(this);\\n        uint256 previouslyFrozen = vnl.balanceOf(freezer);\\n\\n        // we know that OpenZeppelin ERC20 returns always true and reverts on failure, so no need to check the return value\\n        vnl.transferFrom(msg.sender, freezer, convertedAmount);\\n\\n        // These should never fail as we know precisely how VanillaV1Token01.transferFrom is implemented\\n        if (vnl.balanceOf(freezer) != previouslyFrozen + convertedAmount) {\\n            revert FreezerBalanceMismatch();\\n        }\\n        if (vnl.balanceOf(msg.sender) > 0) {\\n            revert UnexpectedTokensAfterConversion();\\n        }\\n\\n        if (!migrationState.verifyEligibility(proof, msg.sender, convertedAmount)) {\\n            revert VerificationFailed();\\n        }\\n\\n        // finally let implementor to mint the converted amount of tokens and log the event\\n        mintConverted(msg.sender, convertedAmount);\\n        emit VNLConverted(msg.sender, convertedAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVanillaV1Migration01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IVanillaV1MigrationState {\\n\\n    /// @notice The current Merkle tree root for checking the eligibility for token conversion\\n    /// @dev tree leaves are tuples of (VNLv1-owner-address, VNLv1-token-balance), ordered as keccak256(abi.encodePacked(tokenOwner, \\\":\\\", amount))\\n    function stateRoot() external view returns (bytes32);\\n\\n    /// @notice Gets the block.number which was used to calculate the `stateRoot()` (for off-chain verification)\\n    function blockNumber() external view returns (uint64);\\n\\n    /// @notice Gets the current deadline for conversion as block.timestamp\\n    function conversionDeadline() external view returns (uint64);\\n\\n    /// @notice Checks if `tokenOwner` owning `amount` of VNL v1s is eligible for token conversion. Needs a Merkle `proof`.\\n    /// @dev The proof must be generated from a Merkle tree where leaf data is formatted as \\\"<address>:<VNL v1 balance>\\\" before hashing,\\n    /// leaves and intermediate nodes are always hashed with keccak256 and then sorted.\\n    /// @param proof The proof that user is operating on the same state\\n    /// @param tokenOwner The address owning the VanillaV1Token01 tokens\\n    /// @param amount The amount of VanillaV1Token01 tokens (i.e. the balance of the tokenowner)\\n    /// @return true iff `tokenOwner` is eligible to convert `amount` tokens to VanillaV1Token02\\n    function verifyEligibility(bytes32[] memory proof, address tokenOwner, uint256 amount) external view returns (bool);\\n\\n    /// @notice Updates the Merkle tree for provable ownership of convertible VNL v1 tokens. Only for the owner.\\n    /// @dev Moves also the internal deadline forward 30 days\\n    /// @param newStateRoot The new Merkle tree root for checking the eligibility for token conversion\\n    /// @param blockNum The block.number whose state was used to calculate the `newStateRoot`\\n    function updateConvertibleState(bytes32 newStateRoot, uint64 blockNum) external;\\n\\n    /// @notice thrown if non-owners try to modify state\\n    error UnauthorizedAccess();\\n\\n    /// @notice thrown if attempting to update migration state after conversion deadline\\n    error MigrationStateUpdateDisabled();\\n}\\n\\ninterface IVanillaV1Converter {\\n    /// @notice Gets the address of the migration state contract\\n    function migrationState() external view returns (IVanillaV1MigrationState);\\n\\n    /// @dev Emitted when VNL v1.01 is converted to v1.02\\n    /// @param converter The owner of tokens.\\n    /// @param amount Number of converted tokens.\\n    event VNLConverted(address converter, uint256 amount);\\n\\n    /// @notice Checks if all `msg.sender`s VanillaV1Token01's are eligible for token conversion. Needs a Merkle `proof`.\\n    /// @dev The proof must be generated from a Merkle tree where leaf data is formatted as \\\"<address>:<VNL v1 balance>\\\" before hashing, and leaves and intermediate nodes are always hashed with keccak256 and then sorted.\\n    /// @param proof The proof that user is operating on the same state\\n    /// @return convertible true if `msg.sender` is eligible to convert all VanillaV1Token01 tokens to VanillaV1Token02 and conversion window is open\\n    /// @return transferable true if `msg.sender`'s VanillaV1Token01 tokens are ready to be transferred for conversion\\n    function checkEligibility(bytes32[] memory proof) external view returns (bool convertible, bool transferable);\\n\\n    /// @notice Converts _ALL_ `msg.sender`s VanillaV1Token01's to VanillaV1Token02 if eligible. The conversion is irreversible.\\n    /// @dev The proof must be generated from a Merkle tree where leaf data is formatted as \\\"<address>:<VNL v1 balance>\\\" before hashing, and leaves and intermediate nodes are always hashed with keccak256 and then sorted.\\n    /// @param proof The proof that user is operating on the same state\\n    function convertVNL(bytes32[] memory proof) external;\\n\\n    /// @notice thrown when attempting to convert VNL after deadline\\n    error ConversionWindowClosed();\\n\\n    /// @notice thrown when attempting to convert 0 VNL\\n    error NoConvertibleVNL();\\n\\n    /// @notice thrown if for some reason VNL freezer balance doesn't match the transferred amount + old balance\\n    error FreezerBalanceMismatch();\\n\\n    /// @notice thrown if for some reason user holds VNL v1 tokens after conversion (i.e. transfer failed)\\n    error UnexpectedTokensAfterConversion();\\n\\n    /// @notice thrown if user provided incorrect proof for conversion eligibility\\n    error VerificationFailed();\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"migrationOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MigrationStateUpdateDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"blockNumber\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conversionDeadline\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newStateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockNum\",\"type\":\"uint64\"}],\"name\":\"updateConvertibleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"verifyEligibility\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VanillaV1MigrationState","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a135f339b5acd1f4ecb1c6eed69a31482f878545","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}