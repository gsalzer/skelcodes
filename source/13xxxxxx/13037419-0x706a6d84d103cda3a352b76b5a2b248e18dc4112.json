{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/strategies/curve/CRVStrategyYCRV.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../BoilerplateStrategy.sol\\\";\\r\\n\\r\\nimport \\\"../../interfaces/curvefi/ICurveFi_Gauge.sol\\\";\\r\\nimport \\\"../../interfaces/curvefi/ICurveFi_Minter.sol\\\";\\r\\nimport \\\"../../interfaces/curvefi/ICurveFi_DepositY.sol\\\";\\r\\nimport \\\"../../interfaces/curvefi/IYERC20.sol\\\";\\r\\nimport \\\"../../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\r\\n\\r\\n/**\\r\\n* This strategy is for the yCRV vault, i.e., the underlying token is yCRV. It is not to accept\\r\\n* stable coins. It will farm the CRV crop. For liquidation, it swaps CRV into DAI and uses DAI\\r\\n* to produce yCRV.\\r\\n*/\\r\\n\\r\\ncontract CRVStrategyYCRV is IStrategy, BoilerplateStrategy {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // yDAIyUSDCyUSDTyTUSD (yCRV)\\r\\n    address public pool; //aka Gauge\\r\\n    address public mintr;\\r\\n    address public crv;\\r\\n\\r\\n    address public curve; // aka DepositY\\r\\n    address public dai;\\r\\n\\r\\n    address public uniswapRouter;\\r\\n\\r\\n    address[] public uniswap_CRV2DAI;\\r\\n\\r\\n    constructor(\\r\\n        address _vault,\\r\\n        address _underlying,\\r\\n        address _strategist,\\r\\n        address _pool,\\r\\n        address _curve,\\r\\n        address _dai,\\r\\n        address _uniswap\\r\\n    ) public BoilerplateStrategy(_vault, _underlying, _strategist) {\\r\\n        require(IVault(_vault).token() == _underlying, \\\"vault does not support underlying\\\");\\r\\n        pool = _pool;\\r\\n        require(ICurveFi_Gauge(pool).lp_token() == _underlying, \\\"Incorrect Gauge\\\");\\r\\n\\r\\n        mintr = ICurveFi_Gauge(pool).minter();\\r\\n        crv = ICurveFi_Gauge(pool).crv_token();\\r\\n        curve = _curve;\\r\\n        dai = _dai;\\r\\n\\r\\n        uniswapRouter = _uniswap;\\r\\n        uniswap_CRV2DAI = [crv, IUniswapV2Router02(uniswapRouter).WETH(), dai];\\r\\n\\r\\n        // set these tokens to be not salvageable\\r\\n        unsalvageableTokens[underlying] = true;\\r\\n        unsalvageableTokens[crv] = true;\\r\\n    }\\r\\n\\r\\n    /*****\\r\\n    * VIEW INTERFACE\\r\\n    *****/\\r\\n\\r\\n    function getNameStrategy() external override view returns(string memory){\\r\\n        return \\\"CRVStrategyYCRV\\\";\\r\\n    }\\r\\n\\r\\n    function want() external override view returns(address){\\r\\n        return address(underlying);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Balance of invested.\\r\\n    */\\r\\n    function balanceOf() public override view returns (uint256) {\\r\\n        return ICurveFi_Gauge(pool).balanceOf(address(this)).add(\\r\\n            IERC20(underlying).balanceOf(address(this))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*****\\r\\n    * DEPOSIT/WITHDRAW/HARVEST EXTERNAL\\r\\n    *****/\\r\\n\\r\\n    /**\\r\\n    * Invests all the underlying yCRV into the pool that mints crops (CRV_.\\r\\n    */\\r\\n    function deposit() public override restricted {\\r\\n        uint256 underlyingBalance = IERC20(underlying).balanceOf(address(this));\\r\\n        if (underlyingBalance > 0) {\\r\\n            IERC20(underlying).safeApprove(pool, 0);\\r\\n            IERC20(underlying).safeApprove(pool, underlyingBalance);\\r\\n            ICurveFi_Gauge(pool).deposit(underlyingBalance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Withdraws the yCRV tokens from the pool in the specified amount.\\r\\n    */\\r\\n    function withdraw(uint256 amountUnderlying) public override restricted {\\r\\n        require(amountUnderlying > 0, \\\"Incorrect amount\\\");\\r\\n        if (harvestOnWithdraw && liquidationAllowed) {\\r\\n            claimAndLiquidateCrv();\\r\\n        }\\r\\n        uint256 balanceUnderlying = ICurveFi_Gauge(pool).balanceOf(address(this));\\r\\n        uint256 looseBalance = IERC20(underlying).balanceOf(address(this));\\r\\n        uint256 total = balanceUnderlying.add(looseBalance);\\r\\n\\r\\n        if (amountUnderlying > total) {\\r\\n            //cant withdraw more than we own\\r\\n            amountUnderlying = total;\\r\\n        }\\r\\n\\r\\n        if (looseBalance >= amountUnderlying) {\\r\\n            IERC20(underlying).safeTransfer(vault, amountUnderlying);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 toWithdraw = amountUnderlying.sub(looseBalance);\\r\\n        withdrawYCrvFromPool(toWithdraw);\\r\\n\\r\\n        looseBalance = IERC20(underlying).balanceOf(address(this));\\r\\n        IERC20(underlying).safeTransfer(vault, looseBalance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Withdraws all the yCRV tokens to the pool.\\r\\n    */\\r\\n    function withdrawAll() external override restricted {\\r\\n      if (harvestOnWithdraw && liquidationAllowed) {\\r\\n          claimAndLiquidateCrv();\\r\\n      }\\r\\n      uint256 balanceUnderlying = ICurveFi_Gauge(pool).balanceOf(address(this));\\r\\n      withdrawYCrvFromPool(balanceUnderlying);\\r\\n\\r\\n      uint256 balance = IERC20(underlying).balanceOf(address(this));\\r\\n      IERC20(underlying).safeTransfer(vault, balance);\\r\\n    }\\r\\n\\r\\n    function emergencyExit() external onlyGovernance {\\r\\n        claimAndLiquidateCrv();\\r\\n\\r\\n        uint256 balanceUnderlying = ICurveFi_Gauge(pool).balanceOf(address(this));\\r\\n        withdrawYCrvFromPool(balanceUnderlying);\\r\\n\\r\\n        uint256 balance = IERC20(underlying).balanceOf(address(this));\\r\\n        IERC20(underlying).safeTransfer(IVault(vault).governance(), balance);\\r\\n    }\\r\\n\\r\\n  /**\\r\\n  * Claims and liquidates CRV into yCRV, and then invests all underlying.\\r\\n  */\\r\\n  function earn() public restricted {\\r\\n      if (liquidationAllowed) {\\r\\n          claimAndLiquidateCrv();\\r\\n      }\\r\\n\\r\\n      deposit();\\r\\n  }\\r\\n\\r\\n\\r\\n    function convert(address) external override returns(uint256){\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function skim()  override external {\\r\\n        revert(\\\"Can't skim\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n    * Claims the CRV crop, converts it to DAI on Uniswap, and then uses DAI to mint yCRV using the\\r\\n    * Curve protocol.\\r\\n    */\\r\\n    function claimAndLiquidateCrv() public {\\r\\n        ICurveFi_Minter(mintr).mint(pool);\\r\\n        // claiming rewards and sending them to the master strategy\\r\\n\\r\\n        uint256 crvBalance = IERC20(crv).balanceOf(address(this));\\r\\n\\r\\n        if (crvBalance > sellFloor) {\\r\\n            uint256 daiBalanceBefore = IERC20(dai).balanceOf(address(this));\\r\\n            IERC20(crv).safeApprove(uniswapRouter, 0);\\r\\n            IERC20(crv).safeApprove(uniswapRouter, crvBalance);\\r\\n            // we can accept 1 as the minimum because this will be called only by a trusted worker\\r\\n            IUniswapV2Router02(uniswapRouter).swapExactTokensForTokens(\\r\\n              crvBalance, 1, uniswap_CRV2DAI, address(this), block.timestamp + 10\\r\\n            );\\r\\n            // now we have DAI\\r\\n            // pay fee before making yCRV\\r\\n            _profitSharing(IERC20(dai).balanceOf(address(this)) - daiBalanceBefore);\\r\\n\\r\\n            // liquidate if there is any DAI left\\r\\n            yCurveFromDai();\\r\\n            // now we have yCRV\\r\\n        }\\r\\n    }\\r\\n\\r\\n  /**\\r\\n  * Withdraws yCRV from the investment pool that mints crops.\\r\\n  */\\r\\n  function withdrawYCrvFromPool(uint256 amount) internal {\\r\\n      Gauge(pool).withdraw(amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * Converts all DAI to yCRV using the CRV protocol.\\r\\n  */\\r\\n  function yCurveFromDai() internal {\\r\\n    uint256 daiBalance = IERC20(dai).balanceOf(address(this));\\r\\n    if (daiBalance > 0) {\\r\\n        IERC20(dai).safeApprove(curve, 0);\\r\\n        IERC20(dai).safeApprove(curve, daiBalance);\\r\\n        uint256 minimum = 0;\\r\\n        ICurveFi_DepositY(curve).add_liquidity([daiBalance, 0, 0, 0], minimum);\\r\\n    }\\r\\n    // now we have yCRV\\r\\n  }\\r\\n\\r\\n  function _profitSharing(uint256 amount) internal override {\\r\\n      if (profitSharingNumerator == 0) {\\r\\n          return;\\r\\n      }\\r\\n      uint256 feeAmount = amount.mul(profitSharingNumerator).div(profitSharingDenominator);\\r\\n      emit ProfitShared(amount, feeAmount, block.timestamp);\\r\\n\\r\\n      if(feeAmount > 0) {\\r\\n        IERC20(dai).safeTransfer(controller, feeAmount);\\r\\n      }\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"contracts/strategies/BoilerplateStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/yearn/IVault.sol\\\";\\r\\nimport \\\"../interfaces/yearn/IStrategy.sol\\\";\\r\\n\\r\\nabstract contract BoilerplateStrategy is IStrategy {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    enum Setting { CONTROLLER_SET, STRATEGIST_SET, PROFIT_SHARING_SET, LIQ_ALLOWED_SET,\\r\\n                    HARVEST_ALLOWED_SET, SELL_FLOOR_SET } \\r\\n\\r\\n    address public underlying;\\r\\n    address public strategist;\\r\\n    address public controller;\\r\\n    address public vault;\\r\\n\\r\\n    uint256 public profitSharingNumerator;\\r\\n    uint256 public profitSharingDenominator;\\r\\n\\r\\n    bool public harvestOnWithdraw;\\r\\n\\r\\n    bool public liquidationAllowed = true;\\r\\n    uint256 public sellFloor = 0;\\r\\n\\r\\n    // These tokens cannot be claimed by the controller\\r\\n    mapping(address => bool) public unsalvageableTokens;\\r\\n\\r\\n\\r\\n    event ProfitShared(uint256 amount, uint256 fee, uint256 timestamp);\\r\\n    event SettingChanged(Setting setting, address initiator, uint timestamp);\\r\\n\\r\\n    modifier restricted() {\\r\\n        require(\\r\\n            msg.sender == vault || msg.sender == controller ||\\r\\n            msg.sender == IVault(vault).governance() || msg.sender == strategist,\\r\\n            \\\"Sender must be privileged\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernance() {\\r\\n        require(msg.sender == IVault(vault).governance(), \\\"!governance\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _vault, address _underlying, address _strategist) public {\\r\\n        vault = _vault;\\r\\n\\r\\n        underlying = _underlying;\\r\\n\\r\\n        strategist = _strategist;\\r\\n\\r\\n        harvestOnWithdraw = true;\\r\\n\\r\\n        profitSharingNumerator = 30;\\r\\n        profitSharingDenominator = 100;\\r\\n\\r\\n        require(IVault(vault).token() == _underlying, \\\"vault does not support underlying\\\");\\r\\n        controller = IVault(vault).controller();       \\r\\n    }\\r\\n\\r\\n    function setController(address _controller) external onlyGovernance {\\r\\n        controller = _controller;\\r\\n        emit SettingChanged(Setting.CONTROLLER_SET, msg.sender, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function setStrategist(address _strategist) external restricted {\\r\\n        strategist = _strategist;\\r\\n        emit SettingChanged(Setting.STRATEGIST_SET, msg.sender, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function setProfitSharing(uint256 _profitSharingNumerator, uint256 _profitSharingDenominator) external restricted {\\r\\n        require(_profitSharingDenominator > 0, \\\"Incorrect denominator\\\");\\r\\n        require(_profitSharingNumerator < _profitSharingDenominator, \\\"Numerator < Denominator\\\");\\r\\n        profitSharingNumerator = _profitSharingNumerator;\\r\\n        profitSharingDenominator = _profitSharingDenominator;\\r\\n        emit SettingChanged(Setting.PROFIT_SHARING_SET, msg.sender, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function setHarvestOnWithdraw(bool _flag) external restricted {\\r\\n        harvestOnWithdraw = _flag;\\r\\n        emit SettingChanged(Setting.HARVEST_ALLOWED_SET, msg.sender, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Allows liquidation\\r\\n     */\\r\\n    function setLiquidationAllowed(bool allowed) external restricted {\\r\\n        liquidationAllowed = allowed;\\r\\n        emit SettingChanged(Setting.LIQ_ALLOWED_SET, msg.sender, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function setSellFloor(uint256 value) external restricted {\\r\\n        sellFloor = value;\\r\\n        emit SettingChanged(Setting.SELL_FLOOR_SET, msg.sender, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdraws a token.\\r\\n     */\\r\\n    function withdraw(address token) external override restricted {\\r\\n        // To make sure that governance cannot come in and take away the coins\\r\\n        require(!unsalvageableTokens[token], \\\"!salvageable\\\");\\r\\n        uint256 balance =  IERC20(token).balanceOf(address(this));\\r\\n        IERC20(token).safeTransfer(vault, balance);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _profitSharing(uint256 amount) internal virtual {\\r\\n      if (profitSharingNumerator == 0) {\\r\\n          return;\\r\\n      }\\r\\n      uint256 feeAmount = amount.mul(profitSharingNumerator).div(profitSharingDenominator);\\r\\n      emit ProfitShared(amount, feeAmount, block.timestamp);\\r\\n\\r\\n      if(feeAmount > 0) {\\r\\n        IERC20(underlying).safeTransfer(controller, feeAmount);\\r\\n      }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/curvefi/ICurveFi_Gauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Interface for Curve.Fi CRV staking Gauge contract.\\r\\n * @dev See original implementation in official repository:\\r\\n * https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/LiquidityGauge.vy\\r\\n */\\r\\ninterface ICurveFi_Gauge {\\r\\n    function lp_token() external view returns(address);\\r\\n    function crv_token() external view returns(address);\\r\\n\\r\\n    function balanceOf(address addr) external view returns (uint256);\\r\\n    function deposit(uint256 _value) external;\\r\\n    function withdraw(uint256 _value) external;\\r\\n\\r\\n    function claimable_tokens(address addr) external returns (uint256);\\r\\n    function minter() external view returns(address); //use minter().mint(gauge_addr) to claim CRV\\r\\n\\r\\n    function integrate_fraction(address _for) external view returns(uint256);\\r\\n    function user_checkpoint(address _for) external returns(bool);\\r\\n}\\r\\n\\r\\ninterface Gauge {\\r\\n    function deposit(uint) external;\\r\\n    function balanceOf(address) external view returns (uint);\\r\\n    function withdraw(uint) external;\\r\\n    function user_checkpoint(address) external;\\r\\n}\\r\\n\\r\\ninterface VotingEscrow {\\r\\n    function create_lock(uint256 v, uint256 time) external;\\r\\n    function increase_amount(uint256 _value) external;\\r\\n    function increase_unlock_time(uint256 _unlock_time) external;\\r\\n    function withdraw() external;\\r\\n}\\r\\n\\r\\ninterface Mintr {\\r\\n    function mint(address) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/curvefi/ICurveFi_Minter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Interface for Curve.Fi CRV minter contract.\\r\\n * @dev See original implementation in official repository:\\r\\n * https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/Minter.vy\\r\\n */\\r\\ninterface ICurveFi_Minter {\\r\\n    function mint(address gauge_addr) external;\\r\\n    function mint_for(address gauge_addr, address _for) external;\\r\\n    function minted(address _for, address gauge_addr) external view returns(uint256);\\r\\n\\r\\n    function toggle_approve_mint(address minting_user) external;\\r\\n\\r\\n    function token() external view returns(address);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/curvefi/ICurveFi_DepositY.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Interface for Curve.Fi deposit contract for Y-pool.\\r\\n * @dev See original implementation in official repository:\\r\\n * https://github.com/curvefi/curve-contract/blob/master/contracts/pools/y/DepositY.vy\\r\\n */\\r\\ninterface ICurveFi_DepositY {\\r\\n    function add_liquidity(uint256[4] calldata uamounts, uint256 min_mint_amount) external;\\r\\n    function remove_liquidity(uint256 _amount, uint256[4] calldata min_uamounts) external;\\r\\n    function remove_liquidity_imbalance(uint256[4] calldata uamounts, uint256 max_burn_amount) external;\\r\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_uamount) external;\\r\\n    \\r\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns(uint256);\\r\\n\\r\\n    function coins(int128 i) external view returns (address);\\r\\n    function underlying_coins(int128 i) external view returns (address);\\r\\n    function underlying_coins() external view returns (address[4] memory);\\r\\n    function curve() external view returns (address);\\r\\n    function token() external view returns (address);\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/curvefi/IYERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IYERC20 {\\r\\n\\r\\n    // //ERC20 functions\\r\\n    // function totalSupply() external view returns (uint256);\\r\\n    // function balanceOf(address account) external view returns (uint256);\\r\\n    // function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    // function allowance(address owner, address spender) external view returns (uint256);\\r\\n    // function approve(address spender, uint256 amount) external returns (bool);\\r\\n    // function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    // function name() external view returns (string memory);\\r\\n    // function symbol() external view returns (string memory);\\r\\n    // function decimals() external view returns (uint8);\\r\\n\\r\\n    //Y-token functions\\r\\n    function deposit(uint256 amount) external;\\r\\n    function withdraw(uint256 shares) external;\\r\\n    function getPricePerFullShare() external view returns (uint256);\\r\\n\\r\\n    function token() external returns(address);\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/uniswap/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport './IUniswapV2Router01.sol';\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/yearn/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IVault {\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function controller() external view returns (address);\\r\\n\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function getPricePerFullShare() external view returns (uint256);\\r\\n\\r\\n    function deposit(uint256) external;\\r\\n\\r\\n    function depositAll() external;\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n\\r\\n    function withdrawAll() external;\\r\\n\\r\\n    // Part of ERC20 interface\\r\\n\\r\\n    //function name() external view returns (string memory);\\r\\n    //function symbol() external view returns (string memory);\\r\\n    //function decimals() external view returns (uint8);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/yearn/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IStrategy {\\r\\n\\r\\n    /// @notice Returns the name of the strategy\\r\\n    /// @dev The name is set when the strategy is deployed\\r\\n    /// @return Returns the name of the strategy\\r\\n    function getNameStrategy() external view returns (string memory);\\r\\n\\r\\n    /// @notice Returns the want address of the strategy\\r\\n    /// @dev The want is set when the strategy is deployed\\r\\n    /// @return Returns the name of the strategy\\r\\n    function want() external view returns (address);\\r\\n\\r\\n    /// @notice Shows the balance of the strategy.\\r\\n    function balanceOf() external view returns (uint256);\\r\\n\\r\\n    /// @notice Transfers tokens for earnings\\r\\n    function deposit() external;\\r\\n\\r\\n    // NOTE: must exclude any tokens used in the yield\\r\\n    /// @notice Controller role - withdraw should return to Controller\\r\\n    function withdraw(address) external;\\r\\n\\r\\n    /// @notice Controller | Vault role - withdraw should always return to Vault\\r\\n    function withdraw(uint256) external;\\r\\n\\r\\n    /// @notice Controller | Vault role - withdraw should always return to Vault\\r\\n    function withdrawAll() external;\\r\\n\\r\\n    /// @notice Calls to the method to convert the required token to the want token\\r\\n    function convert(address _token) external returns(uint256);\\r\\n\\r\\n    function skim() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/uniswap/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswap\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProfitShared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum BoilerplateStrategy.Setting\",\"name\":\"setting\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SettingChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAndLiquidateCrv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNameStrategy\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestOnWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitSharingDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitSharingNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setHarvestOnWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setLiquidationAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitSharingNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profitSharingDenominator\",\"type\":\"uint256\"}],\"name\":\"setProfitSharing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSellFloor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswap_CRV2DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unsalvageableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CRVStrategyYCRV","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000010d50d4b1b069d47151e6de3734232fe75b18628000000000000000000000000df5e0e81dff6faf3a7e52ba697820c5e32d806a80000000000000000000000008443d047c448bdfc826d9f7cb9c877c75e3e47cd000000000000000000000000fa712ee4788c042e2b7bb55e6cb8ec569c4530c1000000000000000000000000bbc81d23ea2c3ec7e56d39296f0cbb648873a5d30000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e447ca98cf3c4fb29640c33c1413dff93be31b1f14ba1d249e99f0f002fffdc0"}]}