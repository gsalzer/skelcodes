{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/resolver/mainnet/main.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Helper } from \\\"./helpers.sol\\\";\\n\\nimport { \\n    InstaFlashloanAggregatorInterface\\n} from \\\"./interfaces.sol\\\";\\n\\ncontract FlashResolver is Helper {\\n    function getRoutesInfo() public view returns (uint16[] memory routes_, uint256[] memory fees_) {\\n        routes_ = flashloanAggregator.getRoutes();\\n        fees_ = new uint256[](routes_.length);\\n        for(uint256 i = 0; i < routes_.length; i++) {\\n            fees_[i] = flashloanAggregator.calculateFeeBPS(routes_[i]);\\n        }\\n    }\\n\\n    function getBestRoutes(address[] memory _tokens, uint256[] memory _amounts) public view returns (uint16[] memory, uint256) {\\n        require(_tokens.length == _amounts.length, \\\"array-lengths-not-same\\\");\\n\\n        (_tokens, _amounts) = bubbleSort(_tokens, _amounts);\\n        validateTokens(_tokens);\\n\\n        uint16[] memory bRoutes_;\\n        uint256 feeBPS_;\\n        uint16[] memory routes_ = flashloanAggregator.getRoutes();\\n        uint16[] memory routesWithAvailability_ = getRoutesWithAvailability(routes_, _tokens, _amounts);\\n        uint16 j = 0;\\n        bRoutes_ = new uint16[](routes_.length);\\n        feeBPS_ = type(uint256).max;\\n        for(uint256 i = 0; i < routesWithAvailability_.length; i++) {\\n            if(routesWithAvailability_[i] != 0) {\\n                uint routeFeeBPS_ = flashloanAggregator.calculateFeeBPS(routesWithAvailability_[i]);\\n                if(feeBPS_ > routeFeeBPS_) {\\n                    feeBPS_ = routeFeeBPS_;\\n                    bRoutes_[0] = routesWithAvailability_[i];\\n                    j=1;\\n                } else if (feeBPS_ == routeFeeBPS_) {\\n                    bRoutes_[j] = routesWithAvailability_[i];\\n                    j++;\\n                }\\n            } \\n        }\\n        uint16[] memory bestRoutes_ = new uint16[](j);\\n        for(uint256 i = 0; i < j ; i++) {\\n            bestRoutes_[i] = bRoutes_[i];\\n        }\\n        return (bestRoutes_, feeBPS_);\\n    }\\n    \\n    function getData(address[] memory _tokens, uint256[] memory _amounts) public view returns (uint16[] memory routes_, uint256[] memory fees_, uint16[] memory bestRoutes_, uint256 bestFee_) {\\n        (routes_, fees_) = getRoutesInfo();\\n        (bestRoutes_, bestFee_) = getBestRoutes(_tokens, _amounts);\\n        return (routes_, fees_, bestRoutes_, bestFee_);\\n    }\\n}\\n\\ncontract InstaFlashloanResolver is FlashResolver {\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/resolver/mainnet/helpers.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport {Variables} from \\\"./variables.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Helper is Variables {\\n    function getAaveAvailability(address[] memory  _tokens, uint256[] memory  _amounts) internal view returns (bool) {\\n        for(uint256 i = 0; i < _tokens.length; i++) {\\n            IERC20 token_ = IERC20(_tokens[i]);\\n            (,,,,,,,,bool isActive,) = aaveProtocolDataProvider.getReserveConfigurationData(_tokens[i]);\\n            (address aTokenAddr,,) = aaveProtocolDataProvider.getReserveTokensAddresses(_tokens[i]);\\n            if(isActive == false) return false;\\n            if(token_.balanceOf(aTokenAddr) < _amounts[i]) return false;\\n        }\\n        return true;\\n    }\\n\\n    function getMakerAvailability(address[] memory  _tokens, uint256[] memory _amounts) internal pure returns (bool) {\\n        if (_tokens.length == 1 && _tokens[0] == daiToken && _amounts[0] <= daiBorrowAmount) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function getCompoundAvailability(address[] memory _tokens, uint256[] memory _amounts) internal view returns (bool) {\\n        for(uint256 i = 0; i < _tokens.length; i++) {\\n            if(_tokens[i] == chainToken) {\\n                if(cEthToken.balance < _amounts[i]) return false;\\n            } else {\\n                address cTokenAddr_ = flashloanAggregator.tokenToCToken(_tokens[i]);\\n                IERC20 token_ = IERC20(_tokens[i]);\\n                if(cTokenAddr_ == address(0)) return false;\\n                if(token_.balanceOf(cTokenAddr_) < _amounts[i]) return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function getBalancerAvailability(address[] memory _tokens, uint256[] memory _amounts) internal view returns (bool) {\\n        for(uint256 i = 0; i < _tokens.length; i++) {\\n            IERC20 token_ = IERC20(_tokens[i]);\\n            if (token_.balanceOf(balancerLendingAddr) < _amounts[i]) {\\n                return false;\\n            }\\n            // console.log(\\\"hello\\\");\\n            // if ((balancerWeightedPoolFactory.isPoolFromFactory(_tokens[i]) ||\\n            //     balancerWeightedPool2TokensFactory.isPoolFromFactory(_tokens[i]) ||\\n            //     balancerStablePoolFactory.isPoolFromFactory(_tokens[i]) ||\\n            //     balancerLiquidityBootstrappingPoolFactory.isPoolFromFactory(_tokens[i]) ||\\n            //     balancerMetaStablePoolFactory.isPoolFromFactory(_tokens[i]) ||\\n            //     balancerInvestmentPoolFactory.isPoolFromFactory(_tokens[i])\\n            //     ) == false) {\\n            //     return false;\\n            // }\\n        }\\n        return true;\\n    }\\n\\n    function getRoutesWithAvailability(uint16[] memory _routes, address[] memory _tokens, uint256[] memory _amounts) internal view returns (uint16[] memory) {\\n        uint16[] memory routesWithAvailability_ = new uint16[](7);\\n        uint j = 0;\\n        for(uint256 i = 0; i < _routes.length; i++) {\\n            if (_routes[i] == 1 || _routes[i] == 4 || _routes[i] == 7) {\\n                if(getAaveAvailability(_tokens, _amounts)) {\\n                    routesWithAvailability_[j] = _routes[i];\\n                    j++;\\n                }\\n            } else if (_routes[i] == 2) {\\n                if(getMakerAvailability(_tokens, _amounts)) {\\n                    routesWithAvailability_[j] = _routes[i];\\n                    j++;\\n                }\\n            } else if (_routes[i] == 3 || _routes[i] == 6) {\\n                if(getCompoundAvailability(_tokens, _amounts)) {\\n                    routesWithAvailability_[j] = _routes[i];\\n                    j++;\\n                }\\n            } else if (_routes[i] == 5) {\\n                if(getBalancerAvailability(_tokens, _amounts)) {\\n                    routesWithAvailability_[j] = _routes[i];\\n                    j++;\\n                }\\n            } else {\\n                require(false, \\\"invalid-route\\\");\\n            }\\n        }\\n        return routesWithAvailability_;\\n    }\\n\\n    function bubbleSort(address[] memory _tokens, uint256[] memory _amounts) internal pure returns (address[] memory, uint256[] memory) {\\n        for (uint256 i = 0; i < _tokens.length - 1; i++) {\\n            for( uint256 j = 0; j < _tokens.length - i - 1 ; j++) {\\n                if(_tokens[j] > _tokens[j+1]) {\\n                    (_tokens[j], _tokens[j+1], _amounts[j], _amounts[j+1]) = (_tokens[j+1], _tokens[j], _amounts[j+1], _amounts[j]);\\n                }\\n            }\\n        }\\n        return (_tokens, _amounts);\\n    }\\n\\n    function validateTokens(address[] memory _tokens) internal pure {\\n        for (uint i = 0; i < _tokens.length - 1; i++) {\\n            require(_tokens[i] != _tokens[i+1], \\\"non-unique-tokens\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/resolver/mainnet/interfaces.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface InstaFlashloanAggregatorInterface {\\n    function getRoutes() external pure returns (uint16[] memory);\\n    function calculateFeeBPS(uint256 _route) external view returns (uint256);\\n    function tokenToCToken(address) external view returns (address);\\n}\\n\\ninterface IAaveProtocolDataProvider {\\n    function getReserveConfigurationData(address asset) external view returns (uint256, uint256, uint256, uint256, uint256, bool, bool, bool, bool, bool);\\n    function getReserveTokensAddresses(address asset) external view returns (address, address, address);\\n}\"\r\n    },\r\n    \"contracts/resolver/mainnet/variables.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n\\nimport { \\n    InstaFlashloanAggregatorInterface,\\n    IAaveProtocolDataProvider\\n} from \\\"./interfaces.sol\\\";\\n\\ncontract Variables {\\n    address public constant chainToken = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    address public constant aaveLendingAddr = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;\\n    address public constant aaveProtocolDataProviderAddr = 0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d;\\n    IAaveProtocolDataProvider public constant aaveProtocolDataProvider = IAaveProtocolDataProvider(aaveProtocolDataProviderAddr);\\n\\n    address public constant balancerLendingAddr = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\n\\n    address public constant daiToken = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    uint256 public constant daiBorrowAmount = 500000000000000000000000000;\\n\\n    address public constant cEthToken = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\\n\\n    address private flashloanAggregatorAddr = 0x619Ad2D02dBeE6ebA3CDbDA3F98430410e892882;\\n    InstaFlashloanAggregatorInterface internal flashloanAggregator = InstaFlashloanAggregatorInterface(flashloanAggregatorAddr);\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"aaveLendingAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveProtocolDataProvider\",\"outputs\":[{\"internalType\":\"contract IAaveProtocolDataProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveProtocolDataProviderAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerLendingAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cEthToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiBorrowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"getBestRoutes\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"routes_\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"bestRoutes_\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"bestFee_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoutesInfo\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"routes_\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"InstaFlashloanResolver","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}