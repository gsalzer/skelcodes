{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/cruzmolina/Code/opyn-projects/GammaProtocol/contracts/interfaces/OpynPricerInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface OpynPricerInterface {\\n    function getPrice() external view returns (uint256);\\n\\n    function getHistoricalPrice(uint80 _roundId) external view returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/cruzmolina/Code/opyn-projects/GammaProtocol/contracts/interfaces/OracleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface OracleInterface {\\n    function isLockingPeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\\n\\n    function isDisputePeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\\n\\n    function getExpiryPrice(address _asset, uint256 _expiryTimestamp) external view returns (uint256, bool);\\n\\n    function getDisputer() external view returns (address);\\n\\n    function getPricer(address _asset) external view returns (address);\\n\\n    function getPrice(address _asset) external view returns (uint256);\\n\\n    function getPricerLockingPeriod(address _pricer) external view returns (uint256);\\n\\n    function getPricerDisputePeriod(address _pricer) external view returns (uint256);\\n\\n    function getChainlinkRoundData(address _asset, uint80 _roundId) external view returns (uint256, uint256);\\n\\n    // Non-view function\\n\\n    function setAssetPricer(address _asset, address _pricer) external;\\n\\n    function setLockingPeriod(address _pricer, uint256 _lockingPeriod) external;\\n\\n    function setDisputePeriod(address _pricer, uint256 _disputePeriod) external;\\n\\n    function setExpiryPrice(\\n        address _asset,\\n        uint256 _expiryTimestamp,\\n        uint256 _price\\n    ) external;\\n\\n    function disputeExpiryPrice(\\n        address _asset,\\n        uint256 _expiryTimestamp,\\n        uint256 _price\\n    ) external;\\n\\n    function setDisputer(address _disputer) external;\\n}\\n\"\r\n    },\r\n    \"/Users/cruzmolina/Code/opyn-projects/GammaProtocol/contracts/interfaces/WSTETHInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.6.10;\\n\\ninterface WSTETHInterface {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function stEthPerToken() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/cruzmolina/Code/opyn-projects/GammaProtocol/contracts/packages/oz/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// openzeppelin-contracts v3.1.0\\n\\n/* solhint-disable */\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/cruzmolina/Code/opyn-projects/GammaProtocol/contracts/pricers/WstethPricer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.6.10;\\n\\nimport {OracleInterface} from \\\"../interfaces/OracleInterface.sol\\\";\\nimport {OpynPricerInterface} from \\\"../interfaces/OpynPricerInterface.sol\\\";\\nimport {WSTETHInterface} from \\\"../interfaces/WSTETHInterface.sol\\\";\\nimport {SafeMath} from \\\"../packages/oz/SafeMath.sol\\\";\\n\\n/**\\n * Error Codes\\n * W1: cannot deploy pricer, wstETH address cannot be 0\\n * W2: cannot deploy pricer, underlying address cannot be 0\\n * W3: cannot deploy pricer, oracle address cannot be 0\\n * W4: cannot retrieve price, underlying price is 0\\n * W5: cannot set expiry price in oracle, underlying price is 0 and has not been set\\n * W6: cannot retrieve historical prices, getHistoricalPrice has been deprecated\\n */\\n\\n/**\\n * @title WstethPricer\\n * @author Opyn Team\\n * @notice A Pricer contract for a wstETH token\\n */\\ncontract WstethPricer is OpynPricerInterface {\\n    using SafeMath for uint256;\\n\\n    /// @notice opyn oracle address\\n    OracleInterface public oracle;\\n\\n    /// @notice wstETH token\\n    WSTETHInterface public wstETH;\\n\\n    /// @notice underlying asset (WETH)\\n    address public underlying;\\n\\n    /**\\n     * @param _wstETH wstETH\\n     * @param _underlying underlying asset for wstETH\\n     * @param _oracle Opyn Oracle contract address\\n     */\\n    constructor(\\n        address _wstETH,\\n        address _underlying,\\n        address _oracle\\n    ) public {\\n        require(_wstETH != address(0), \\\"W1\\\");\\n        require(_underlying != address(0), \\\"W2\\\");\\n        require(_oracle != address(0), \\\"W3\\\");\\n\\n        wstETH = WSTETHInterface(_wstETH);\\n        oracle = OracleInterface(_oracle);\\n        underlying = _underlying;\\n    }\\n\\n    /**\\n     * @notice get the live price for the asset\\n     * @dev overrides the getPrice function in OpynPricerInterface\\n     * @return price of 1e18 stETH in USD, scaled by 1e8\\n     */\\n    function getPrice() external view override returns (uint256) {\\n        uint256 underlyingPrice = oracle.getPrice(address(underlying));\\n        require(underlyingPrice > 0, \\\"W4\\\");\\n        return _underlyingPriceToWstethPrice(underlyingPrice);\\n    }\\n\\n    /**\\n     * @notice set the expiry price in the oracle\\n     * @dev requires that the underlying price has been set before setting a wstETH price\\n     * @param _expiryTimestamp expiry to set a price for\\n     */\\n    function setExpiryPriceInOracle(uint256 _expiryTimestamp) external {\\n        (uint256 underlyingPriceExpiry, ) = oracle.getExpiryPrice(underlying, _expiryTimestamp);\\n        require(underlyingPriceExpiry > 0, \\\"W5\\\");\\n        uint256 wstEthPrice = _underlyingPriceToWstethPrice(underlyingPriceExpiry);\\n        oracle.setExpiryPrice(address(wstETH), _expiryTimestamp, wstEthPrice);\\n    }\\n\\n    /**\\n     * @dev convert underlying price to wstETH price with the wstETH to stETH exchange rate (1stETH = 1 ETH)\\n     * @param _underlyingPrice price of 1 underlying token (ie 1e18 WETH) in USD, scaled by 1e8\\n     * @return price of 1e8 wstETH in USD, scaled by 1e8\\n     */\\n    function _underlyingPriceToWstethPrice(uint256 _underlyingPrice) private view returns (uint256) {\\n        uint256 stEthPerWsteth = wstETH.stEthPerToken();\\n\\n        return stEthPerWsteth.mul(_underlyingPrice).div(1e18);\\n    }\\n\\n    function getHistoricalPrice(uint80) external view override returns (uint256, uint256) {\\n        revert(\\\"W6\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wstETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"name\":\"getHistoricalPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract OracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"setExpiryPriceInOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wstETH\",\"outputs\":[{\"internalType\":\"contract WSTETHInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"WstethPricer","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000789cd7ab3742e23ce0952f6bc3eb3a73a0e08833","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}