{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ILand.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\ninterface ILand {\\n  function maximumSupply() external view returns (uint256);\\n  function balanceOf(address owner) external view returns (uint256);\\n  function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n}\\n\"},\"LandYield.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\nimport \\\"./ILand.sol\\\";\\n\\n\\ncontract LandYield is Ownable, ReentrancyGuard {\\n  // Land token contract interface\\n  ILand public landContract;\\n\\n  address private _treasury;\\n  address private _admin;\\n\\n  uint256 private _totalYieldPerLand;\\n  uint256 private _totalReleasedYield;\\n  uint256 private _owedTreasuryYield;\\n  mapping (uint256 =\\u003e uint256) private _releasedYield;\\n\\n  // Add this modifier to all functions which are only accessible by the owner or the selected admin\\n  modifier onlyManager() {\\n    require(msg.sender == owner() || msg.sender == _admin, \\\"Unauthorized Access\\\");\\n    _;\\n  }\\n\\n  constructor(address _landContractAddress) {\\n    landContract = ILand(_landContractAddress);\\n    _treasury = msg.sender;\\n    _admin = msg.sender;\\n  }\\n\\n  function admin() external view returns (address) {\\n    return _admin;\\n  }\\n\\n  function setAdmin(address _address) external onlyOwner {\\n    require(_address != address(0), \\\"Invalid Address\\\");\\n    _admin = _address;\\n  }\\n\\n  function treasury() external view returns (address) {\\n    return _treasury;\\n  }\\n\\n  function setTreasury(address _address) external onlyManager {\\n    require(_address != address(0), \\\"Invalid Address\\\");\\n    _treasury = _address;\\n  }\\n\\n  function totalYieldPerLand() external view returns (uint256) {\\n    return _totalYieldPerLand;\\n  }\\n\\n  function totalReleasedYield() external view returns (uint256) {\\n    return _totalReleasedYield;\\n  }\\n\\n  function owedTreasuryYield() external view returns (uint256) {\\n    return _owedTreasuryYield;\\n  }\\n\\n  // Called by registered primary token sales contracts for distributing the profits for land owners and treasury\\n  function distributeSalesYield(uint256 _landYield) external payable nonReentrant {\\n    require(msg.value \\u003e 0, \\\"Insufficient Yield\\\");\\n\\n    // Calculate and update the total yield per land\\n    // And also update the yield allocated for the treasury (+ any division remainders)\\n    uint256 landCount = landContract.maximumSupply();\\n    _totalYieldPerLand += _landYield / landCount;\\n    _owedTreasuryYield += (msg.value - _landYield) + (_landYield % landCount);\\n  }\\n\\n  function releasedYieldByTokenId(uint256 _tokenId) external view returns (uint256) {\\n    return _releasedYield[_tokenId];\\n  }\\n\\n  // Calculate and return the total amount of owed (land) yield for the specified account\\n  function totalOwedYieldByAccount(address _account) external view returns (uint256) {\\n    uint256 landOwned = landContract.balanceOf(_account);\\n    uint256 totalOwedYield = 0;\\n    for (uint256 i = 0; i \\u003c landOwned; i++) {\\n      uint256 tokenId = landContract.tokenOfOwnerByIndex(_account, i);\\n      uint256 owedYield = _totalYieldPerLand - _releasedYield[tokenId];\\n\\n      if (owedYield \\u003e 0) {\\n        totalOwedYield += owedYield;\\n      }\\n    }\\n\\n    return totalOwedYield;\\n  }\\n\\n  // Can be called by land owners for withdrawing collected yields\\n  function releaseForLandOwner() external nonReentrant {\\n    uint256 landOwned = landContract.balanceOf(msg.sender);\\n    require(landOwned \\u003e 0, \\\"Reserved For Land Owners\\\");\\n\\n    // Iterate through all owned land tokens and calculate the total unclaimed yield\\n    uint256 totalOwedYield = 0;\\n    for (uint256 i = 0; i \\u003c landOwned; i++) {\\n      uint256 tokenId = landContract.tokenOfOwnerByIndex(msg.sender, i);\\n      uint256 owedYield = _totalYieldPerLand - _releasedYield[tokenId];\\n\\n      if (owedYield \\u003e 0) {\\n        totalOwedYield += owedYield;\\n        _releasedYield[tokenId] = _totalYieldPerLand;\\n      }\\n    }\\n\\n    require(totalOwedYield \\u003e 0, \\\"Insufficient Yield\\\");\\n    _totalReleasedYield += totalOwedYield;\\n\\n    payable(msg.sender).transfer(totalOwedYield);\\n  }\\n\\n  // Handles yield received as royalties from OpenSea, allocated for the land owners\\n  receive() external payable {\\n    require(msg.value \\u003e 0, \\\"Insufficient Yield\\\");\\n\\n    // Update the total yield per land and put the remainder due to integer-division (if any) to the treasury\\n    uint256 landCount = landContract.maximumSupply();\\n    _totalYieldPerLand += msg.value / landCount;\\n    _owedTreasuryYield += msg.value % landCount;\\n  }\\n\\n  function releaseForTreasury() external onlyManager nonReentrant {\\n    require(_owedTreasuryYield \\u003e 0, \\\"Insufficient Yield\\\");\\n\\n    uint256 totalOwedYield = _owedTreasuryYield;\\n    _owedTreasuryYield = 0;\\n    _totalReleasedYield += totalOwedYield;\\n\\n    payable(_treasury).transfer(totalOwedYield);\\n  }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_landContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_landYield\",\"type\":\"uint256\"}],\"name\":\"distributeSalesYield\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landContract\",\"outputs\":[{\"internalType\":\"contract ILand\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owedTreasuryYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseForLandOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseForTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"releasedYieldByTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"totalOwedYieldByAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleasedYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalYieldPerLand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LandYield","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"00000000000000000000000030d5977e4c9b159c2d44461868bdc7353c2e425b","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://71122db80a44cfd6d690e6f648ded72bcffd0fed275f6ce924340b05027b3962"}]}