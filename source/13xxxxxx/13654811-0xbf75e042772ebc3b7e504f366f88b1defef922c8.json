{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.9;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n\tfunction feeTo() external view returns (address);\r\n\r\n\tfunction feeToSetter() external view returns (address);\r\n\r\n\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n\tfunction allPairs(uint) external view returns (address pair);\r\n\r\n\tfunction allPairsLength() external view returns (uint);\r\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\tfunction setFeeTo(address) external;\r\n\r\n\tfunction setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IDEXRouter {\r\n\tfunction factory() external pure returns (address);\r\n\r\n\tfunction WETH() external pure returns (address);\r\n\r\n\tfunction addLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint amountADesired,\r\n\t\tuint amountBDesired,\r\n\t\tuint amountAMin,\r\n\t\tuint amountBMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint amountTokenDesired,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n\tfunction removeLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint liquidity,\r\n\t\tuint amountAMin,\r\n\t\tuint amountBMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountA, uint amountB);\r\n\r\n\tfunction removeLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountToken, uint amountETH);\r\n\r\n\tfunction removeLiquidityWithPermit(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint liquidity,\r\n\t\tuint amountAMin,\r\n\t\tuint amountBMin,\r\n\t\taddress to,\r\n\t\tuint deadline,\r\n\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\t) external returns (uint amountA, uint amountB);\r\n\r\n\tfunction removeLiquidityETHWithPermit(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline,\r\n\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\t) external returns (uint amountToken, uint amountETH);\r\n\r\n\tfunction swapExactTokensForTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint[] memory amounts);\r\n\r\n\tfunction swapTokensForExactTokens(\r\n\t\tuint amountOut,\r\n\t\tuint amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint[] memory amounts);\r\n\r\n\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\texternal\r\n\tpayable\r\n\treturns (uint[] memory amounts);\r\n\r\n\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n\texternal\r\n\treturns (uint[] memory amounts);\r\n\r\n\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\texternal\r\n\treturns (uint[] memory amounts);\r\n\r\n\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n\texternal\r\n\tpayable\r\n\treturns (uint[] memory amounts);\r\n\r\n\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountETH);\r\n\r\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline,\r\n\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\t) external returns (uint amountETH);\r\n\r\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external;\r\n\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external payable;\r\n\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract LetsGoBrandon is Context, IERC20, Ownable {\r\n\tusing Address for address payable;\r\n\r\n\tstring constant NAME = \"Lets Go Brandon\";\r\n\tstring constant SYMBOL = \"LETS\";\r\n\tuint8 constant DECIMALS = 9;\r\n\r\n\tuint256 constant MAX_UINT = 2 ** 256 - 1;\r\n\taddress constant ROUTER_ADDRESS = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\taddress constant ZERO_ADDRESS = address(0);\r\n\taddress constant DEAD_ADDRESS = address(0x000000000000000000000000000000000000dEaD);//address(57005);\r\n\r\n\tmapping(address => uint256) rOwned;\r\n\tmapping(address => uint256) tOwned;\r\n\r\n\tmapping(address => uint256) firstTransactionTimestamp;\r\n\r\n\tmapping(address => mapping(address => uint256)) allowances;\r\n\r\n\tmapping(address => bool) public isExcludedFromFees;\r\n\tmapping(address => bool) public isExcludedFromRewards;\r\n\tmapping(address => bool) public isExcludedFromMaxWallet;\r\n\taddress[] excluded;\r\n\r\n\tmapping(address => bool) public isBot;\r\n\tuint256 tTotal = 100000000000000 * 10**9;//1000000000000000 * 10**9;\r\n\tuint256 rTotal = (MAX_UINT - (MAX_UINT % tTotal));\r\n\r\n\tuint256 public maxTxAmountBuy = tTotal;// / 200;\r\n\tuint256 public maxTxAmountSell = tTotal;// / 200;\r\n\tuint256 public maxWalletAmount = tTotal / 50;\r\n\r\n\tuint256 launchedAt;\r\n\tuint256 launchedAtTime;\r\n\taddress payable marketingAddress;\r\n\taddress payable developmentAddress;\r\n\r\n\tmapping(address => bool) automatedMarketMakerPairs;\r\n\r\n\tbool areFeesBeingProcessed;\r\n\tbool public isFeeProcessingEnabled = false;\r\n\tuint256 public feeProcessingThreshold = tTotal / 10000;\r\n\r\n\tIDEXRouter router;\r\n\r\n\tbool isTradingOpen;\r\n\r\n\tstruct FeeSet {\r\n\t\tuint256 reflectFee;\r\n\t\tuint256 marketingFee;\r\n\t\tuint256 developmentFee;\r\n\t\tuint256 liquidityFee;\r\n\t}\r\n\r\n\tFeeSet public fees = FeeSet({\r\n\t\treflectFee: 2,\r\n\t\tmarketingFee: 3,\r\n\t\tdevelopmentFee: 2,\r\n\t\tliquidityFee: 3\r\n\t});\r\n\r\n\tuint256 extraBurnFee = 10; //for early sale, per wallet//\r\n\r\n\tstruct ReflectValueSet {\r\n\t\tuint256 rAmount;\r\n\t\tuint256 rTransferAmount;\r\n\t\tuint256 rReflectFee;\r\n\t\tuint256 rOtherFee;\r\n\t\tuint256 tTransferAmount;\r\n\t\tuint256 tReflectFee;\r\n\t\tuint256 tOtherFee;\r\n\r\n\t\tuint256 rExtraFee;\r\n\t\tuint256 tExtraFee;\r\n\t}\r\n\r\n\tmodifier lockTheSwap {\r\n\t\tareFeesBeingProcessed = true;\r\n\t\t_;\r\n\t\tareFeesBeingProcessed = false;\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\taddress self = address(this);\r\n\r\n\t\trOwned[owner()] = rTotal;\r\n\r\n\t\trouter = IDEXRouter(ROUTER_ADDRESS);\r\n\r\n\t\tmarketingAddress = payable(0xbfA80969cE5330c938cfc0F54Ac38384C9618449);\r\n\t\tdevelopmentAddress = payable(0x143CE9C93e5F03e860FFEeDEf9D97F621104ad70);\r\n\r\n\t\tisExcludedFromFees[owner()] = true;\r\n\t\tisExcludedFromFees[marketingAddress] = true;\r\n\t\tisExcludedFromFees[developmentAddress] = true;\r\n\t\tisExcludedFromFees[self] = true;\r\n\t\tisExcludedFromFees[DEAD_ADDRESS] = true;\r\n\r\n\t\tisExcludedFromMaxWallet[owner()] = true;\r\n\t\tisExcludedFromMaxWallet[marketingAddress] = true;\r\n\t\tisExcludedFromMaxWallet[developmentAddress] = true;\r\n\t\tisExcludedFromMaxWallet[self] = true;\r\n\t\tisExcludedFromMaxWallet[DEAD_ADDRESS] = true;\r\n\r\n\t\t//new - exclude owner from rewards for fair distribution\r\n\t\ttOwned[owner()] = tokenFromReflection(rOwned[owner()]);\r\n\t\tisExcludedFromRewards[owner()] = true;\r\n\t\texcluded.push(owner());\r\n\r\n\t\temit Transfer(ZERO_ADDRESS, owner(), tTotal);\r\n\t}\r\n\r\n\tfunction name() public pure returns (string memory) {\r\n\t\treturn NAME;\r\n\t}\r\n\r\n\tfunction symbol() public pure returns (string memory) {\r\n\t\treturn SYMBOL;\r\n\t}\r\n\r\n\tfunction decimals() public pure returns (uint8) {\r\n\t\treturn DECIMALS;\r\n\t}\r\n\r\n\tfunction totalSupply() public view override returns (uint256) {\r\n\t\treturn tTotal;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\tif (isExcludedFromRewards[account]) return tOwned[account];\r\n\t\treturn tokenFromReflection(rOwned[account]);\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view override returns (uint256) {\r\n\t\treturn allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\r\n\t\tuint256 currentAllowance = allowances[sender][_msgSender()];\r\n\t\trequire(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n\r\n\t\tunchecked {\r\n\t\t\t_approve(sender, _msgSender(), currentAllowance - amount);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, allowances[_msgSender()][spender] + addedValue);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\tuint256 currentAllowance = allowances[_msgSender()][spender];\r\n\t\trequire(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n\r\n\t\tunchecked {\r\n\t\t\t_approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction tokenFromReflection(uint256 rAmount) public view returns (uint256) {\r\n\t\trequire(rAmount <= rTotal, \"Amount must be less than total reflections\");\r\n\t\tuint256 currentRate = _getRate();\r\n\t\treturn rAmount / currentRate;\r\n\t}\r\n\r\n\tfunction excludeFromRewards(address account) external onlyOwner {\r\n\t\trequire(!isExcludedFromRewards[account], \"Account is already excluded\");\r\n\r\n\t\tif (rOwned[account] > 0) {\r\n\t\t\ttOwned[account] = tokenFromReflection(rOwned[account]);\r\n\t\t}\r\n\r\n\t\tisExcludedFromRewards[account] = true;\r\n\t\texcluded.push(account);\r\n\t}\r\n\r\n\tfunction includeInRewards(address account) external onlyOwner {\r\n\t\trequire(isExcludedFromRewards[account], \"Account is not excluded\");\r\n\r\n\t\tfor (uint256 i = 0; i < excluded.length; i++) {\r\n\t\t\tif (excluded[i] == account) {\r\n\t\t\t\texcluded[i] = excluded[excluded.length - 1];\r\n\t\t\t\ttOwned[account] = 0;\r\n\t\t\t\tisExcludedFromRewards[account] = false;\r\n\t\t\t\texcluded.pop();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _getValues(uint256 tAmount, bool takeFee, uint256 extraFee) private view returns (ReflectValueSet memory set) {\r\n\t\tset = _getTValues(tAmount, takeFee, extraFee);\r\n\t\t(set.rAmount, set.rTransferAmount, set.rReflectFee, set.rOtherFee, set.rExtraFee) = _getRValues(set, tAmount, takeFee, _getRate());\r\n\t\treturn set;\r\n\t}\r\n\r\n\tfunction _getTValues(uint256 tAmount, bool takeFee, uint256 extraFee) private view returns (ReflectValueSet memory set) {\r\n\t\tif (!takeFee) {\r\n\t\t\tset.tTransferAmount = tAmount;\r\n\t\t\treturn set;\r\n\t\t}\r\n\r\n\t\tset.tReflectFee = tAmount * fees.reflectFee / 100;\r\n\t\tset.tExtraFee = tAmount * extraFee / 100;\r\n\t\tset.tOtherFee = tAmount * (fees.marketingFee + fees.liquidityFee + fees.developmentFee) / 100;\r\n\t\tset.tTransferAmount = tAmount - set.tReflectFee - set.tOtherFee - set.tExtraFee;\r\n\r\n\t\treturn set;\r\n\t}\r\n\r\n\tfunction _getRValues(ReflectValueSet memory set, uint256 tAmount, bool takeFee, uint256 currentRate) private pure returns (uint256 rAmount, uint256 rTransferAmount, uint256 rReflectFee, uint256 rOtherFee, uint256 rExtraFee) {\r\n\t\trAmount = tAmount * currentRate;\r\n\r\n\t\tif (!takeFee) {\r\n\t\t\treturn (rAmount, rAmount, 0, 0, 0);\r\n\t\t}\r\n\r\n\t\trReflectFee = set.tReflectFee * currentRate;\r\n\t\trOtherFee = set.tOtherFee * currentRate;\r\n\t\trExtraFee = set.tExtraFee * currentRate;\r\n\t\trTransferAmount = rAmount - rReflectFee - rOtherFee - rExtraFee;\r\n\t\treturn (rAmount, rTransferAmount, rReflectFee, rOtherFee, rExtraFee);\r\n\t}\r\n\r\n\tfunction _getRate() private view returns (uint256) {\r\n\t\t(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n\t\treturn rSupply / tSupply;\r\n\t}\r\n\r\n\tfunction _getCurrentSupply() private view returns (uint256, uint256) {\r\n\t\tuint256 rSupply = rTotal;\r\n\t\tuint256 tSupply = tTotal;\r\n\r\n\t\tfor (uint256 i = 0; i < excluded.length; i++) {\r\n\t\t\tif (rOwned[excluded[i]] > rSupply || tOwned[excluded[i]] > tSupply) return (rTotal, tTotal);\r\n\t\t\trSupply -= rOwned[excluded[i]];\r\n\t\t\ttSupply -= tOwned[excluded[i]];\r\n\t\t}\r\n\r\n\t\tif (rSupply < rTotal / tTotal) return (rTotal, tTotal);\r\n\t\treturn (rSupply, tSupply);\r\n\t}\r\n\r\n\tfunction _approve(address owner, address spender, uint256 amount) private {\r\n\t\trequire(owner != ZERO_ADDRESS, \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != ZERO_ADDRESS, \"ERC20: approve to the zero address\");\r\n\r\n\t\tallowances[owner][spender] = amount;\r\n\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _transfer(address from, address to, uint256 amount) private {\r\n\t\trequire(from != ZERO_ADDRESS, \"ERC20: transfer from the zero address\");\r\n\t\trequire(to != ZERO_ADDRESS, \"ERC20: transfer to the zero address\");\r\n\t\trequire(!isBot[from], \"ERC20: address blacklisted (bot)\");\r\n\t\trequire(amount > 0, \"Transfer amount must be greater than zero\");\r\n\t\trequire(amount <= balanceOf(from), \"You are trying to transfer more than your balance\");\r\n\r\n\t\tif (maxWalletAmount > 0 && !automatedMarketMakerPairs[to] && !isExcludedFromMaxWallet[to]) {\r\n\t\t\trequire((balanceOf(to) + amount) <= maxWalletAmount, \"You are trying to transfer more than the max wallet amount\");\r\n\t\t}\r\n\r\n\t\tif (launchedAt == 0 && automatedMarketMakerPairs[to]) {\r\n\t\t\tlaunchedAt = block.number;\r\n\t\t}\r\n\r\n\t\tbool shouldTakeFees = !isExcludedFromFees[from] && !isExcludedFromFees[to];\r\n\t\tif (shouldTakeFees) {\r\n\t\t\trequire(amount <= (automatedMarketMakerPairs[from] ? maxTxAmountBuy : maxTxAmountSell), \"You are trying to transfer too many tokens\");\r\n\r\n\t\t\tif (automatedMarketMakerPairs[from] && block.number <= launchedAt) {\r\n\t\t\t\tisBot[to] = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tuint256 balance = balanceOf(address(this));\r\n\r\n\t\tif (balance > maxTxAmountSell) {\r\n\t\t\tbalance = maxTxAmountSell;\r\n\t\t}\r\n\t\tuint256 extraFees = 0;\r\n\t\tif(!automatedMarketMakerPairs[from]) \r\n\t\t{\r\n\t\t\tif (isFeeProcessingEnabled && !areFeesBeingProcessed \r\n        \t\t&& balance >= feeProcessingThreshold \r\n\t\t\t) {\r\n\t\t\t\tareFeesBeingProcessed = true;\r\n\t\t\t\t_processFees(balance);\r\n\t\t\t\tareFeesBeingProcessed = false;\r\n\t\t\t}\r\n\t\t\tif(automatedMarketMakerPairs[to]){ //user is selling//\r\n\t\t\t\tuint256 firstTransTime = firstTransactionTimestamp[from];\r\n\t\t\t\tuint256 blockTime = block.timestamp;\r\n\t\t\t\t//first 5 minutes from launch ONLY - bot protection = 15% burn fee\r\n\t\t\t\tif(blockTime < launchedAtTime + 5 minutes){\r\n\t\t\t\t\textraFees = 15;\r\n\t\t\t\t}\r\n\t\t\t\t//first week early sale = 10% burn fee\r\n\t\t\t\telse if(blockTime < firstTransTime + 7 days){\r\n\t\t\t\t\textraFees = extraBurnFee;\r\n\t\t\t\t}\r\n\t\t\t\t//else don't apply extra tax//\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_tokenTransfer(from, to, amount, shouldTakeFees, extraFees);\r\n\t}\r\n\r\n\tfunction _takeReflectFees(uint256 rReflectFee) private {\r\n\t\trTotal -= rReflectFee;\r\n\t}\r\n\r\n\tfunction _takeOtherFees(uint256 rOtherFee, uint256 tOtherFee) private {\r\n\t\taddress self = address(this);\r\n\r\n\t\trOwned[self] += rOtherFee;\r\n\r\n\t\tif (isExcludedFromRewards[self]) {\r\n\t\t\ttOwned[self] += tOtherFee;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _takeExtraFees(uint256 rExtraFee, uint256 tExtraFee) private {\r\n\t\trOwned[DEAD_ADDRESS] += rExtraFee;\r\n\t\tif (isExcludedFromRewards[DEAD_ADDRESS]) {\r\n\t\t\ttOwned[DEAD_ADDRESS] += tExtraFee;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _tokenTransfer(address sender, address recipient, uint256 tAmount, bool shouldTakeFees, uint256 extraFee) private {\r\n\t\tReflectValueSet memory set = _getValues(tAmount, shouldTakeFees, extraFee);\r\n\r\n\t\tif (isExcludedFromRewards[sender]) {\r\n\t\t\ttOwned[sender] -= tAmount;\r\n\t\t}\r\n\r\n\t\tif (isExcludedFromRewards[recipient]) {\r\n\t\t\ttOwned[recipient] += set.tTransferAmount;\r\n\t\t}\r\n\r\n\t\trOwned[sender] -= set.rAmount;\r\n\t\trOwned[recipient] += set.rTransferAmount;\r\n\r\n\t\tif(firstTransactionTimestamp[recipient] == 0){ \r\n\t\t\tfirstTransactionTimestamp[recipient] = block.timestamp;\r\n\t\t}\r\n\r\n\t\tif (shouldTakeFees) {\r\n\t\t\t_takeReflectFees(set.rReflectFee);\r\n\t\t\t_takeOtherFees(set.rOtherFee, set.tOtherFee);\r\n\t\t\temit Transfer(sender, address(this), set.tOtherFee);\r\n\t\t\tif(set.tExtraFee > 0){\r\n\t\t\t\t_takeExtraFees(set.rExtraFee, set.tExtraFee);\r\n\t\t\t\temit Transfer(sender, DEAD_ADDRESS, set.tExtraFee);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\temit Transfer(sender, recipient, set.tTransferAmount);\r\n\t}\r\n\r\n\tfunction _processFees(uint256 amount) private lockTheSwap {\r\n\t\tuint256 _marketingFee = fees.marketingFee + fees.developmentFee;\r\n\t\tuint256 feeSum = _marketingFee + fees.liquidityFee;\r\n\t\t\r\n\t\tif (feeSum == 0) return;\r\n\r\n\t\t//Calculate amounts\r\n\t\tuint256 amountForMarketing = amount * _marketingFee / feeSum;\r\n\t\tuint256 amountForLiquidity = amount - amountForMarketing;\r\n\r\n\t\t//Do processing\r\n\t\t_swapExactTokensForETH(amountForMarketing);\r\n\t\t_addLiquidity(amountForLiquidity);\r\n\r\n\t\t//Send marketing funds\r\n\t\tuint256 balanceEth = address(this).balance;\r\n\t\tuint256 marketingInEth = balanceEth * fees.marketingFee / _marketingFee;\r\n\t\tmarketingAddress.transfer(marketingInEth);\r\n\t\tdevelopmentAddress.transfer(address(this).balance);\r\n\t}\r\n\r\n\tfunction _addLiquidity(uint256 amount) private {\r\n\t\taddress self = address(this);\r\n\r\n\t\tuint256 tokensToSell = amount / 2;\r\n\t\tuint256 tokensForLiquidity = amount - tokensToSell;\r\n\r\n\t\tuint256 ethForLiquidity = _swapExactTokensForETH(tokensToSell);\r\n\r\n\t\t_approve(self, address(router), MAX_UINT);\r\n\t\trouter.addLiquidityETH{value: ethForLiquidity}(self, tokensForLiquidity, 0, 0, DEAD_ADDRESS, block.timestamp);\r\n\t}\r\n\r\n\tfunction _swapExactTokensForETH(uint256 amountIn) private returns (uint256) {\r\n\t\taddress self = address(this);\r\n\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = self;\r\n\t\tpath[1] = router.WETH();\r\n\r\n\t\t_approve(self, address(router), MAX_UINT);\r\n\r\n\t\tuint256 previousBalance = self.balance;\r\n\t\trouter.swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn, 0, path, self, block.timestamp);\r\n\t\treturn self.balance - previousBalance;\r\n\t}\r\n\t\r\n\t//OWNER ONLY WRITE//\r\n\tfunction burn(uint256 value) external onlyOwner {\r\n\t\trequire(balanceOf(_msgSender()) >= value, \"Insufficient token balance for burn\");\r\n\t\t_tokenTransfer(_msgSender(), DEAD_ADDRESS, value, false, 0);\r\n    }\r\n\r\n\tfunction openTrading(uint256 tokensForLiquidity) external payable onlyOwner {\r\n\t\taddress self = address(this);\r\n\t\trequire(!isTradingOpen, \"Trading is already open\");\r\n\t\trequire(balanceOf(_msgSender()) >= tokensForLiquidity, \"Insufficient token balance for initial liquidity\");\r\n\t\trequire(msg.value > 0, \"Insufficient ETH for initial liquidity\");\r\n\r\n\t\t//Transfer tokens from sender/owner to contract\r\n\t\t_tokenTransfer(_msgSender(), self, tokensForLiquidity, false, 0);\r\n\r\n\t\t//Create pair\r\n\t\taddress pairAddress = IDEXFactory(router.factory()).createPair(self, router.WETH());\r\n\t\tautomatedMarketMakerPairs[pairAddress] = true;\r\n\t\tisExcludedFromMaxWallet[pairAddress] = true;\r\n\r\n\t\t//Add liquidity\r\n\t\t_approve(self, address(router), MAX_UINT);\r\n\t\trouter.addLiquidityETH{value: msg.value}(self, tokensForLiquidity, 0, 0, owner(), block.timestamp);\r\n\r\n\t\tisFeeProcessingEnabled = true;\r\n\t\tisTradingOpen = true;\r\n\t\tlaunchedAtTime = block.timestamp;\r\n\t}\r\n\r\n\tfunction setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {\r\n\t\trequire(automatedMarketMakerPairs[pair] != value, \"Automated market maker pair is already set to that value\");\r\n\t\tautomatedMarketMakerPairs[pair] = value;\r\n\r\n\t\tif (value) {\r\n\t\t\tisExcludedFromMaxWallet[pair] = true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setBurnFees(uint256 burnFee) external onlyOwner {\r\n\t\trequire(burnFee <= 10, \"Cannot set burn fee to above 10%\");\r\n\t\textraBurnFee = burnFee;\r\n\t}\r\n\r\n\tfunction setIsFeeProcessingEnabled(bool value) public onlyOwner {\r\n\t\tisFeeProcessingEnabled = value;\r\n\t}\r\n\r\n\tfunction setFeeProcessingThreshold(uint256 value) external onlyOwner {\r\n\t\tfeeProcessingThreshold = value;\r\n\t}\r\n\r\n\tfunction setMarketingAddress(address payable value) external onlyOwner {\r\n\t\trequire(marketingAddress != value, \"Marketing address is already set to this value\");\r\n\t\tmarketingAddress = value;\r\n\t}\r\n\t\r\n\tfunction setDevelopmentAddress(address payable value) external onlyOwner {\r\n\t\trequire(developmentAddress != value, \"Development address is already set to this value\");\r\n\t\tdevelopmentAddress = value;\r\n\t}\r\n\r\n\tfunction setIsBot(address[] memory accounts, bool value) external onlyOwner {\r\n\t\tfor (uint256 i = 0; i < accounts.length; i++){\r\n\t\t\tisBot[accounts[i]] = value;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction transferMany(address[] memory accounts, uint256 amount) external onlyOwner {\r\n\t\trequire(balanceOf(_msgSender()) >= amount * accounts.length, \"Insufficient token balance\");\r\n\t\tfor (uint256 i = 0; i < accounts.length; i++){\r\n\t\t\t_tokenTransfer(_msgSender(), accounts[i], amount, false, 0);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setMaxTransactionAmounts(uint256 maxBuy, uint256 maxSell) external onlyOwner {\r\n\t\trequire(maxBuy >= (tTotal / 400), \"Must set max buy to at least 0.25% of total supply\");\r\n\t\trequire(maxSell >= (tTotal / 400), \"Must set max sell to at least 0.25% of total supply\");\r\n\r\n\t\tmaxTxAmountBuy = maxBuy;\r\n\t\tmaxTxAmountSell = maxSell;\r\n\t}\r\n\r\n\tfunction setMaxWalletAmount(uint256 value) external onlyOwner {\r\n\t\trequire(value >= (tTotal / 200), \"Must set max wallet to at least 0.5% of total supply\");\r\n\t\tmaxWalletAmount = value;\r\n\t}\r\n\r\n\tfunction manuallyProcessFees() external onlyOwner{\r\n\t\tuint256 balance = balanceOf(address(this));\r\n\t\t_tokenTransfer(address(this), _msgSender(), balance, false, 0);\r\n\t}\r\n\r\n\t// function setIsExcludedFromMaxWallet(address account, bool value) external onlyOwner {\r\n\t// \trequire(isExcludedFromMaxWallet[account] != value, \"Account is already set to this value\");\r\n\t// \tisExcludedFromMaxWallet[account] = value;\r\n\t// }\r\n\r\n\t// function setIsExcludedFromFees(address account, bool value) external onlyOwner {\r\n\t// \trequire(isExcludedFromFees[account] != value, \"Account is already set to this value\");\r\n\t// \tisExcludedFromFees[account] = value;\r\n\t// }\r\n\r\n\tfunction getExtraSalesFee(address account) public view returns (uint256) {\r\n\t\tuint256 extraFees = 0;\r\n\t\tuint256 firstTransTime = firstTransactionTimestamp[account];\r\n\t\tuint256 blockTime = block.timestamp;\r\n\t\tif(blockTime < launchedAtTime + 5 minutes){\r\n\t\t\textraFees = 15;\r\n\t\t}\r\n\t\telse if(blockTime < firstTransTime + 7 days){\r\n\t\t\textraFees = extraBurnFee;\r\n\t\t}\r\n\t\treturn extraFees;\r\n\t}\r\n\r\n\treceive() external payable {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeProcessingThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getExtraSalesFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeProcessingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manuallyProcessFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmountBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmountSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensForLiquidity\",\"type\":\"uint256\"}],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setDevelopmentAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setFeeProcessingThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsFeeProcessingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSell\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LetsGoBrandon","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f609cf76acd6063e8aaad535f9de451439839a83d3b5efaefed5d9b4c3aec708"}]}