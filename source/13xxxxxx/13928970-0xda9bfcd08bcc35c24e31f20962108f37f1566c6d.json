{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.10;\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory  errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory  errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (bytes32 );\r\n    function symbol() external pure returns (bytes32 );\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// IVC (Internal Virtual Chain)\r\n// (c) Kaiba DeFi DAO 2021\r\n// This source code is distributed under the CC-BY-ND-4.0 License https://spdx.org/licenses/CC-BY-ND-4.0.html#licenseText\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n\r\n    function symbol() external view returns (bytes32 );\r\n    function name() external view returns (bytes32 );\r\n    function decimals() external view returns (uint8);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\ncontract Kaiba_IVC_sKlee {\r\n    using SafeMath for uint256;\r\n\r\n    bool locked;\r\n    mapping(address => bool) is_team;\r\n    mapping(address => mapping(uint256 => bool)) public can_synth;\r\n    mapping(address => mapping(string => uint256)) public estimated_paid;\r\n\r\n     modifier safe() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    modifier onlyTeam {\r\n        require(is_team[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    address public owner;\r\n    mapping (address => bool) is_synthetizer;\r\n    bool synth_open;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        is_team[owner] = true;\r\n        is_synthetizer[owner] = true;\r\n        ERC20 from_erc = ERC20(0x382f0160c24f5c515A19f155BAc14d479433A407);\r\n        klee.deployed = true;\r\n        klee.totalSupply = from_erc.totalSupply();\r\n        klee.balance_url = \"\";\r\n        klee.original_token = 0x382f0160c24f5c515A19f155BAc14d479433A407;\r\n        klee.pair_address = 0x8044E86CA1963E099a7E70594D72bC96a088Fed2;\r\n        klee.name = from_erc.name();\r\n        klee.ticker = from_erc.symbol();  \r\n    }\r\n\r\n    struct SVT_Synth { // This struct defines a typical SVT token\r\n        bool deployed;\r\n        string balance_url;\r\n        address tokenOwner;\r\n        uint256 totalSupply;\r\n        uint256 circulatingSupply;\r\n        bytes32 name;\r\n        bytes32 ticker;\r\n        bool isBridged;\r\n        address original_token;\r\n        address pair_address;\r\n        address SVT_Liquidity_storage;\r\n        mapping(address => bool) synthesis_control;\r\n    }\r\n\r\n    \r\n        SVT_Synth klee;\r\n         \r\n\r\n    function grant_synth(address addy, bool booly) public onlyTeam {\r\n        is_synthetizer[addy] = booly;\r\n    }\r\n\r\n    function modify_svt_klee(address to_bridge, address pair, string calldata url) public safe {\r\n        require(is_synthetizer[msg.sender] || synth_open, \"Unauthorized\");\r\n        ERC20 from_erc = ERC20(to_bridge);\r\n        klee.deployed = true;\r\n        klee.totalSupply = from_erc.totalSupply();\r\n        klee.balance_url = url;\r\n        klee.original_token = to_bridge;\r\n        klee.pair_address = pair;\r\n        klee.name = from_erc.name();\r\n        klee.ticker = from_erc.symbol();        \r\n     }\r\n\r\n\r\n     function operate_svt_klee_update(string calldata url) public {\r\n        require(is_synthetizer[msg.sender], \"Not authorized\");\r\n        require(klee.deployed, \"No assets\");\r\n        klee.balance_url = url;\r\n    }\r\n\r\n    function start_retrieve(address addy, string calldata hashed) payable public {\r\n        estimated_paid[addy][hashed] = msg.value;\r\n    }\r\n\r\n    function gas_paid(address addy, string calldata hashed) public view returns (uint256) {\r\n        return estimated_paid[addy][hashed];\r\n    }\r\n\r\n    function get_synthetic_svt_liquidity() external  view returns (address, address, uint256, uint256) {\r\n        require(klee.deployed, \"SVT Token does not exist\");\r\n        IUniswapV2Pair pair = IUniswapV2Pair(klee.pair_address);\r\n        address token0_frompair = pair.token0();\r\n        address token1_frompair = pair.token1();\r\n        (uint Res0, uint Res1,) = pair.getReserves();\r\n        return(token0_frompair, token1_frompair, Res0, Res1);\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"can_synth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"estimated_paid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hashed\",\"type\":\"string\"}],\"name\":\"gas_paid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_synthetic_svt_liquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"booly\",\"type\":\"bool\"}],\"name\":\"grant_synth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"modify_svt_klee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"operate_svt_klee_update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hashed\",\"type\":\"string\"}],\"name\":\"start_retrieve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"Kaiba_IVC_sKlee","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://83194ecf3ad270bed5acb12bcbe3b2c60b10b2d9d98b843e05e02e3f6a3d42e7"}]}