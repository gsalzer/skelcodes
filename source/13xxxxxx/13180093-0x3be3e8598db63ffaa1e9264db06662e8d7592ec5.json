{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"./Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 =\\u003e uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue\\u0027s index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length \\u003e index,\\n            \\\"EnumerableSet: index out of bounds\\\"\\n        );\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"},\"ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal initializer {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n        __ERC1155Holder_init_unchained();\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal initializer {\\n    }\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./ERC165Upgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal initializer {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"},\"IAddSeriesToAmm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\ninterface IAddSeriesToAmm {\\n    function addSeries(uint64 _seriesId) external;\\n}\\n\"},\"IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller\\u0027s tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``\\u0027s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``\\u0027s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"},\"IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IERC20Lib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.0;\\n\\n/** Dead simple interface for the ERC20 methods that aren\\u0027t in the standard interface\\n */\\ninterface IERC20Lib {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\"},\"Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can\\u0027t have a constructor, it\\u0027s common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"},\"InitializeableAmm.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./ISeriesController.sol\\\";\\n\\ninterface InitializeableAmm {\\n    function initialize(\\n        ISeriesController _seriesController,\\n        address _priceOracle,\\n        IERC20 _underlyingToken,\\n        IERC20 _priceToken,\\n        IERC20 _collateralToken,\\n        address _tokenImplementation,\\n        uint16 _tradeFeeBasisPoints\\n    ) external;\\n}\\n\"},\"IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.0;\\n\\ninterface IPriceOracle {\\n    function getSettlementPrice(\\n        address underlyingToken,\\n        address priceToken,\\n        uint256 settlementDate\\n    ) external view returns (bool, uint256);\\n\\n    function getCurrentPrice(address underlyingToken, address priceToken)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setSettlementPrice(address underlyingToken, address priceToken)\\n        external;\\n\\n    function setSettlementPriceForDate(\\n        address underlyingToken,\\n        address priceToken,\\n        uint256 date\\n    ) external;\\n\\n    function get8amWeeklyOrDailyAligned(uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"},\"ISeriesController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.0;\\n\\n/**\\n @title ISeriesController\\n @author The Siren Devs\\n @notice Onchain options protocol for minting, exercising, and claiming calls and puts\\n @notice Manages the lifecycle of individual Series\\n @dev The id\\u0027s for bTokens and wTokens on the same Series are consecutive uints\\n */\\ninterface ISeriesController {\\n    /// @notice The basis points to use for fees on the various SeriesController functions,\\n    /// in units of basis points (1 basis point = 0.01%)\\n    struct Fees {\\n        address feeReceiver;\\n        uint16 exerciseFeeBasisPoints;\\n        uint16 closeFeeBasisPoints;\\n        uint16 claimFeeBasisPoints;\\n    }\\n\\n    struct Tokens {\\n        address underlyingToken;\\n        address priceToken;\\n        address collateralToken;\\n    }\\n\\n    /// @notice All data pertaining to an individual series\\n    struct Series {\\n        uint40 expirationDate;\\n        bool isPutOption;\\n        ISeriesController.Tokens tokens;\\n        uint256 strikePrice;\\n    }\\n\\n    /// @notice All possible states a Series can be in with regard to its expiration date\\n    enum SeriesState {\\n        /**\\n         * New option token cans be created.\\n         * Existing positions can be closed.\\n         * bTokens cannot be exercised\\n         * wTokens cannot be claimed\\n         */\\n        OPEN,\\n        /**\\n         * No new options can be created\\n         * Positions cannot be closed\\n         * bTokens can be exercised\\n         * wTokens can be claimed\\n         */\\n        EXPIRED\\n    }\\n\\n    /** Enum to track Fee Events */\\n    enum FeeType {EXERCISE_FEE, CLOSE_FEE, CLAIM_FEE}\\n\\n    ///////////////////// EVENTS /////////////////////\\n\\n    /// @notice Emitted when the owner creates a new series\\n    event SeriesCreated(\\n        uint64 seriesId,\\n        Tokens tokens,\\n        address[] restrictedMinters,\\n        uint256 strikePrice,\\n        uint40 expirationDate,\\n        bool isPutOption\\n    );\\n\\n    /// @notice Emitted when the SeriesController gets initialized\\n    event SeriesControllerInitialized(\\n        address priceOracle,\\n        address vault,\\n        address erc1155Controller,\\n        Fees fees\\n    );\\n\\n    /// @notice Emitted when SeriesController.mintOptions is called, and wToken + bToken are minted\\n    event OptionMinted(\\n        address minter,\\n        uint64 seriesId,\\n        uint256 optionTokenAmount,\\n        uint256 wTokenTotalSupply,\\n        uint256 bTokenTotalSupply\\n    );\\n\\n    /// @notice Emitted when either the SeriesController transfers ERC20 funds to the SeriesVault,\\n    /// or the SeriesController transfers funds from the SeriesVault to a recipient\\n    event ERC20VaultTransferIn(address sender, uint64 seriesId, uint256 amount);\\n    event ERC20VaultTransferOut(\\n        address recipient,\\n        uint64 seriesId,\\n        uint256 amount\\n    );\\n\\n    event FeePaid(\\n        FeeType indexed feeType,\\n        address indexed token,\\n        uint256 value\\n    );\\n\\n    /** Emitted when a bToken is exercised for collateral */\\n    event OptionExercised(\\n        address indexed redeemer,\\n        uint64 seriesId,\\n        uint256 optionTokenAmount,\\n        uint256 wTokenTotalSupply,\\n        uint256 bTokenTotalSupply,\\n        uint256 collateralAmount\\n    );\\n\\n    /** Emitted when a wToken is redeemed after expiration */\\n    event CollateralClaimed(\\n        address indexed redeemer,\\n        uint64 seriesId,\\n        uint256 optionTokenAmount,\\n        uint256 wTokenTotalSupply,\\n        uint256 bTokenTotalSupply,\\n        uint256 collateralAmount\\n    );\\n\\n    /** Emitted when an equal amount of wToken and bToken is redeemed for original collateral */\\n    event OptionClosed(\\n        address indexed redeemer,\\n        uint64 seriesId,\\n        uint256 optionTokenAmount,\\n        uint256 wTokenTotalSupply,\\n        uint256 bTokenTotalSupply,\\n        uint256 collateralAmount\\n    );\\n\\n    ///////////////////// VIEW/PURE FUNCTIONS /////////////////////\\n\\n    function priceDecimals() external view returns (uint8);\\n\\n    function erc1155Controller() external view returns (address);\\n\\n    function series(uint256 seriesId)\\n        external\\n        view\\n        returns (ISeriesController.Series memory);\\n\\n    function state(uint64 _seriesId) external view returns (SeriesState);\\n\\n    function calculateFee(uint256 _amount, uint16 _basisPoints)\\n        external\\n        pure\\n        returns (uint256);\\n\\n    function getExerciseAmount(uint64 _seriesId, uint256 _bTokenAmount)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getClaimAmount(uint64 _seriesId, uint256 _wTokenAmount)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function seriesName(uint64 _seriesId) external view returns (string memory);\\n\\n    function strikePrice(uint64 _seriesId) external view returns (uint256);\\n\\n    function expirationDate(uint64 _seriesId) external view returns (uint40);\\n\\n    function underlyingToken(uint64 _seriesId) external view returns (address);\\n\\n    function priceToken(uint64 _seriesId) external view returns (address);\\n\\n    function collateralToken(uint64 _seriesId) external view returns (address);\\n\\n    function exerciseFeeBasisPoints(uint64 _seriesId)\\n        external\\n        view\\n        returns (uint16);\\n\\n    function closeFeeBasisPoints(uint64 _seriesId)\\n        external\\n        view\\n        returns (uint16);\\n\\n    function claimFeeBasisPoints(uint64 _seriesId)\\n        external\\n        view\\n        returns (uint16);\\n\\n    function wTokenIndex(uint64 _seriesId) external pure returns (uint256);\\n\\n    function bTokenIndex(uint64 _seriesId) external pure returns (uint256);\\n\\n    function isPutOption(uint64 _seriesId) external view returns (bool);\\n\\n    function getCollateralPerOptionToken(\\n        uint64 _seriesId,\\n        uint256 _optionTokenAmount\\n    ) external view returns (uint256);\\n\\n    /// @notice Returns the amount of collateralToken held in the vault on behalf of the Series at _seriesId\\n    /// @param _seriesId The index of the Series in the SeriesController\\n    function getSeriesERC20Balance(uint64 _seriesId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    ///////////////////// MUTATING FUNCTIONS /////////////////////\\n\\n    function mintOptions(uint64 _seriesId, uint256 _optionTokenAmount) external;\\n\\n    function exerciseOption(\\n        uint64 _seriesId,\\n        uint256 _bTokenAmount,\\n        bool _revertOtm\\n    ) external;\\n\\n    function claimCollateral(uint64 _seriesId, uint256 _wTokenAmount) external;\\n\\n    function closePosition(uint64 _seriesId, uint256 _optionTokenAmount)\\n        external;\\n}\\n\"},\"ISimpleToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.0;\\n\\n/** Interface for any Siren SimpleToken\\n */\\ninterface ISimpleToken {\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n}\\n\"},\"Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.0;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y \\u003e 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x \\u003c z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a \\u003c b) return a;\\n        return b;\\n    }\\n}\\n\"},\"MinterAmm.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"./ERC1155HolderUpgradeable.sol\\\";\\nimport \\\"./ISeriesController.sol\\\";\\nimport \\\"./Proxiable.sol\\\";\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"./Math.sol\\\";\\nimport \\\"./InitializeableAmm.sol\\\";\\nimport \\\"./IAddSeriesToAmm.sol\\\";\\nimport \\\"./IPriceOracle.sol\\\";\\nimport \\\"./ISimpleToken.sol\\\";\\nimport \\\"./IERC20Lib.sol\\\";\\nimport \\\"./EnumerableSet.sol\\\";\\nimport \\\"./SeriesLibrary.sol\\\";\\n\\n/// This is an implementation of a minting/redeeming AMM (Automated Market Maker) that trades a list of series with the same\\n/// collateral token. For example, a single WBTC Call AMM contract can trade all strikes of WBTC calls using\\n/// WBTC as the collateral, and a single WBTC Put AMM contract can trade all strikes of WBTC puts, using\\n/// USDC as the collateral.\\n///\\n/// Each AMM uses a triplet of ERC20 tokens to define the option asset whose price determines the option\\u0027s value\\n/// (the underlyingToken), the token used to denominate the strike price (the priceToken) and the token used\\n/// as collateral writing the option (the collateralToken). The collateralToken also determines the units used\\n/// in pricing the option\\u0027s premiums.\\n///\\n/// It uses an on-chain Black-Scholes approximation to calculate the price of a single option (which we represent by an\\n/// ERC1155 token we call \\\"bToken\\\"). The Black-Scholes approximation uses an on-chain oracle price feed to get the\\n/// current series price of the underlying asset. By using an on-chain oracle the AMM\\u0027s bonding curve is aware of the\\n/// time-dependent nature of options pricing (a.k.a. theta-decay), and can price options better than a naive constant\\n/// product bonding curve such as Uniswap.\\n///\\n/// In addition, it uses a novel \\\"mint aware bonding curve\\\" to allow for infinite depth when buying options. A user\\n/// pays for options in units of the AMM\\u0027s collateral token, and the AMM uses this collateral to mint additional bTokens\\n/// to satisfy the user\\u0027s trade size\\n///\\n/// External users can buy bTokens with collateral (wToken trading is disabled in this version).\\n/// When they do this, the AMM will mint new bTokens and wTokens, sell the wToken to the AMM for more bToken,\\n/// and transfer the bToken to the user.\\n///\\n/// External users can sell bTokens for collateral. When they do this, the AMM will sell a partial amount of assets\\n/// to get a 50/50 split between bTokens and wTokens, then redeem them for collateral and transfer the collateral back to\\n/// the user.\\n///\\n/// LPs can provide collateral for liquidity. All collateral will be used to mint bTokens/wTokens for each trade.\\n/// They will be given a corresponding amount of lpTokens to track ownership. The amount of lpTokens is calculated based on\\n/// total pool value which includes collateral token, active b/wTokens and expired/unclaimed b/wTokens\\n///\\n/// LPs can withdraw collateral from liquidity. When withdrawing user can specify if they want their pro-rata b/wTokens\\n/// to be automatically sold to the pool for collateral. If the chose not to sell then they get pro-rata of all tokens\\n/// in the pool (collateral, bToken, wToken). If they chose to sell then their bTokens and wTokens will be sold\\n/// to the pool for collateral incurring slippage.\\n///\\n/// All expired unclaimed wTokens are automatically claimed on each deposit or withdrawal\\n///\\n/// All conversions between bToken and wToken in the AMM will generate fees that will be send to the protocol fees pool\\n/// (disabled in this version)\\ncontract MinterAmm is\\n    InitializeableAmm,\\n    ERC1155HolderUpgradeable,\\n    IAddSeriesToAmm,\\n    OwnableUpgradeable,\\n    Proxiable\\n{\\n    /// Use safe ERC20 functions for any token transfers since people don\\u0027t follow the ERC20 standard */\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for ISimpleToken;\\n\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /// @dev The token contract that will track lp ownership of the AMM\\n    ISimpleToken public lpToken;\\n\\n    /// @dev The ERC20 tokens used by all the Series associated with this AMM\\n    IERC20 public underlyingToken;\\n    IERC20 public priceToken;\\n    IERC20 public collateralToken;\\n\\n    /// @dev The registry which the AMM will use to lookup individual Series\\n    ISeriesController public seriesController;\\n\\n    /// @notice The contract used to mint the option tokens\\n    IERC1155 public erc1155Controller;\\n\\n    /// @dev Fees on trading\\n    uint16 public tradeFeeBasisPoints;\\n\\n    /// Volatility factor used in the black scholes approximation - can be updated by the owner */\\n    uint256 public volatilityFactor;\\n\\n    /// @dev Flag to ensure initialization can only happen once\\n    bool initialized = false;\\n\\n    uint256 public constant MINIMUM_TRADE_SIZE = 1000;\\n\\n    /// @dev A price oracle contract used to get onchain price data\\n    address private sirenPriceOracle;\\n\\n    /// @dev Collection of ids of open series\\n    /// @dev If we ever re-deploy MinterAmm we need to check that the EnumerableSet implementation hasn’t changed,\\n    /// because we rely on undocumented implementation details (see Note in MinterAmm.claimAllExpiredTokens on\\n    /// removing series)\\n    EnumerableSet.UintSet private openSeries;\\n\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /// Emitted when the amm is created\\n    event AMMInitialized(\\n        ISimpleToken lpToken,\\n        address sirenPriceOracle,\\n        address controller\\n    );\\n\\n    /// Emitted when an LP deposits collateral\\n    event LpTokensMinted(\\n        address minter,\\n        uint256 collateralAdded,\\n        uint256 lpTokensMinted\\n    );\\n\\n    /// Emitted when an LP withdraws collateral\\n    event LpTokensBurned(\\n        address redeemer,\\n        uint256 collateralRemoved,\\n        uint256 lpTokensBurned\\n    );\\n\\n    /// Emitted when a user buys bTokens from the AMM\\n    event BTokensBought(\\n        address buyer,\\n        uint64 seriesId,\\n        uint256 bTokensBought,\\n        uint256 collateralPaid\\n    );\\n\\n    /// Emitted when a user sells bTokens to the AMM\\n    event BTokensSold(\\n        address seller,\\n        uint64 seriesId,\\n        uint256 bTokensSold,\\n        uint256 collateralPaid\\n    );\\n\\n    /// Emitted when a user sells wTokens to the AMM\\n    event WTokensSold(\\n        address seller,\\n        uint64 seriesId,\\n        uint256 wTokensSold,\\n        uint256 collateralPaid\\n    );\\n\\n    /// Emitted when the owner updates volatilityFactor\\n    event VolatilityFactorUpdated(uint256 newVolatilityFactor);\\n\\n    /// Emitted when a new sirenPriceOracle gets set on an upgraded AMM\\n    event NewSirenPriceOracle(address newSirenPriceOracle);\\n\\n    /// @notice Emitted when an expired series has been removed\\n    event SeriesEvicted(uint64 seriesId);\\n\\n    // Error codes. We only use error code because we need to reduce the size of this contract\\u0027s deployed\\n    // bytecode in order for it to be deployable\\n\\n    // E02: Invalid _sirenPriceOracle\\n    // E03: Invalid _underlyingToken\\n    // E04: Invalid _priceToken\\n    // E05: Invalid _collateralToken\\n    // E06: _underlyingToken cannot equal _priceToken\\n    // E07: Invalid _tokenImplementation\\n    // E08: Contract can only be initialized once\\n    // E09: VolatilityFactor is too low\\n    // E10: Invalid _newImplementation\\n    // E11: Can only be called by SeriesController\\n    // E12: withdrawCapital: collateralMinimum must be set\\n\\n    /// @dev Require minimum trade size to prevent precision errors at low values\\n    modifier minTradeSize(uint256 tradeSize) {\\n        require(\\n            tradeSize \\u003e= MINIMUM_TRADE_SIZE,\\n            \\\"Buy/Sell amount below min size\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Prevents a contract from calling itself, directly or indirectly.\\n    /// Calling a `nonReentrant` function from another `nonReentrant`\\n    /// function is not supported. It is possible to prevent this from happening\\n    /// by making the `nonReentrant` function external, and make it call a\\n    /// `private` function that does the actual work.\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /// Initialize the contract, and create an lpToken to track ownership\\n    function initialize(\\n        ISeriesController _seriesController,\\n        address _sirenPriceOracle,\\n        IERC20 _underlyingToken,\\n        IERC20 _priceToken,\\n        IERC20 _collateralToken,\\n        address _tokenImplementation,\\n        uint16 _tradeFeeBasisPoints\\n    ) public override {\\n        require(address(_sirenPriceOracle) != address(0x0), \\\"E02\\\");\\n        require(address(_underlyingToken) != address(0x0), \\\"E03\\\");\\n        require(address(_priceToken) != address(0x0), \\\"E04\\\");\\n        require(address(_collateralToken) != address(0x0), \\\"E05\\\");\\n        require(address(_underlyingToken) != address(_priceToken), \\\"E06\\\");\\n        require(_tokenImplementation != address(0x0), \\\"E07\\\");\\n\\n        // Enforce initialization can only happen once\\n        require(!initialized, \\\"E08\\\");\\n        initialized = true;\\n\\n        // Save off state variables\\n        seriesController = _seriesController;\\n        erc1155Controller = IERC1155(_seriesController.erc1155Controller());\\n\\n        // Approve seriesController to move tokens\\n        erc1155Controller.setApprovalForAll(address(seriesController), true);\\n\\n        sirenPriceOracle = _sirenPriceOracle;\\n        tradeFeeBasisPoints = _tradeFeeBasisPoints;\\n\\n        // Save off series tokens\\n        underlyingToken = _underlyingToken;\\n        priceToken = _priceToken;\\n        collateralToken = _collateralToken;\\n\\n        // Create the lpToken and initialize it\\n        Proxy lpTokenProxy = new Proxy(_tokenImplementation);\\n        lpToken = ISimpleToken(address(lpTokenProxy));\\n\\n        // AMM name will be \\u003cunderlying\\u003e-\\u003cprice\\u003e-\\u003ccollateral\\u003e, e.g. WBTC-USDC-WBTC for a WBTC Call AMM\\n        string memory ammName = string(\\n            abi.encodePacked(\\n                IERC20Lib(address(underlyingToken)).symbol(),\\n                \\\"-\\\",\\n                IERC20Lib(address(priceToken)).symbol(),\\n                \\\"-\\\",\\n                IERC20Lib(address(collateralToken)).symbol()\\n            )\\n        );\\n        string memory lpTokenName = string(abi.encodePacked(\\\"LP-\\\", ammName));\\n        lpToken.initialize(\\n            lpTokenName,\\n            lpTokenName,\\n            IERC20Lib(address(collateralToken)).decimals()\\n        );\\n\\n        // Set default volatility\\n        // 0.4 * volInSeconds * 1e18\\n        volatilityFactor = 4000e10;\\n\\n        __Ownable_init();\\n\\n        emit AMMInitialized(\\n            lpToken,\\n            _sirenPriceOracle,\\n            address(_seriesController)\\n        );\\n    }\\n\\n    /// The owner can set the volatility factor used to price the options\\n    function setVolatilityFactor(uint256 _volatilityFactor) public onlyOwner {\\n        // Check lower bounds: 500e10 corresponds to ~7% annualized volatility\\n        require(_volatilityFactor \\u003e 500e10, \\\"E09\\\");\\n\\n        volatilityFactor = _volatilityFactor;\\n        emit VolatilityFactorUpdated(_volatilityFactor);\\n    }\\n\\n    /// @notice update the logic contract for this proxy contract\\n    /// @param _newImplementation the address of the new MinterAmm implementation\\n    /// @dev only the admin address may call this function\\n    function updateImplementation(address _newImplementation)\\n        external\\n        onlyOwner\\n    {\\n        require(_newImplementation != address(0x0), \\\"E10\\\");\\n\\n        _updateCodeAddress(_newImplementation);\\n    }\\n\\n    /// LP allows collateral to be used to mint new options\\n    /// bTokens and wTokens will be held in this contract and can be traded back and forth.\\n    /// The amount of lpTokens is calculated based on total pool value\\n    function provideCapital(uint256 collateralAmount, uint256 lpTokenMinimum)\\n        external\\n        nonReentrant\\n    {\\n        // Move collateral into this contract\\n        collateralToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            collateralAmount\\n        );\\n\\n        // If first LP, mint options, mint LP tokens, and send back any redemption amount\\n        if (IERC20Lib(address(lpToken)).totalSupply() == 0) {\\n            // Mint lp tokens to the user\\n            lpToken.mint(msg.sender, collateralAmount);\\n\\n            // Emit event\\n            LpTokensMinted(msg.sender, collateralAmount, collateralAmount);\\n\\n            // Bail out after initial tokens are minted - nothing else to do\\n            return;\\n        }\\n\\n        // At any given moment the AMM can have the following reserves:\\n        // * collateral token\\n        // * active bTokens and wTokens for any series\\n        // * expired bTokens and wTokens for any series\\n        // In order to calculate correct LP amount we do the following:\\n        // 1. Claim expired wTokens and bTokens\\n        // 2. Add value of all active bTokens and wTokens at current prices\\n        // 3. Add value of collateral\\n\\n        claimAllExpiredTokens();\\n\\n        uint256 poolValue = getTotalPoolValue(false);\\n\\n        // Mint LP tokens - the percentage added to bTokens should be same as lp tokens added\\n        uint256 lpTokenExistingSupply = IERC20Lib(address(lpToken))\\n            .totalSupply();\\n\\n        uint256 lpTokensNewSupply = (poolValue * lpTokenExistingSupply) /\\n            (poolValue - collateralAmount);\\n        uint256 lpTokensToMint = lpTokensNewSupply - lpTokenExistingSupply;\\n        require(lpTokensToMint \\u003e= lpTokenMinimum, \\\"Slippage exceeded\\\");\\n        lpToken.mint(msg.sender, lpTokensToMint);\\n\\n        // Emit event\\n        emit LpTokensMinted(msg.sender, collateralAmount, lpTokensToMint);\\n    }\\n\\n    /// LP can redeem their LP tokens in exchange for collateral\\n    /// If `sellTokens` is true pro-rata active b/wTokens will be sold to the pool in exchange for collateral\\n    /// All expired wTokens will be claimed\\n    /// LP will get pro-rata collateral asset\\n    function withdrawCapital(\\n        uint256 lpTokenAmount,\\n        bool sellTokens,\\n        uint256 collateralMinimum\\n    ) public nonReentrant {\\n        require(!sellTokens || collateralMinimum \\u003e 0, \\\"E12\\\");\\n        // First get starting numbers\\n        uint256 redeemerCollateralBalance = collateralToken.balanceOf(\\n            msg.sender\\n        );\\n\\n        // Get the lpToken supply\\n        uint256 lpTokenSupply = IERC20Lib(address(lpToken)).totalSupply();\\n\\n        // Burn the lp tokens\\n        lpToken.burn(msg.sender, lpTokenAmount);\\n\\n        // Claim all expired wTokens\\n        claimAllExpiredTokens();\\n\\n        uint256 collateralTokenBalance = collateralToken.balanceOf(\\n            address(this)\\n        );\\n\\n        // Withdraw pro-rata collateral token\\n        // We withdraw this collateral here instead of at the end,\\n        // because when we sell the residual tokens to the pool we want\\n        // to exclude the withdrawn collateral\\n        uint256 ammCollateralBalance = collateralTokenBalance -\\n            ((collateralTokenBalance * lpTokenAmount) / lpTokenSupply);\\n\\n        // Sell pro-rata active tokens or withdraw if no collateral left\\n        ammCollateralBalance = _sellOrWithdrawActiveTokens(\\n            lpTokenAmount,\\n            lpTokenSupply,\\n            msg.sender,\\n            sellTokens,\\n            ammCollateralBalance\\n        );\\n\\n        // Send all accumulated collateralTokens\\n        collateralToken.safeTransfer(\\n            msg.sender,\\n            collateralTokenBalance - ammCollateralBalance\\n        );\\n\\n        uint256 collateralTokenSent = collateralToken.balanceOf(msg.sender) -\\n            redeemerCollateralBalance;\\n\\n        require(\\n            !sellTokens || collateralTokenSent \\u003e= collateralMinimum,\\n            \\\"Slippage exceeded\\\"\\n        );\\n\\n        // Emit the event\\n        emit LpTokensBurned(msg.sender, collateralTokenSent, lpTokenAmount);\\n    }\\n\\n    /// @notice Claims any remaining collateral from all expired series whose wToken is held by the AMM, and removes\\n    /// the expired series from the AMM\\u0027s collection of series\\n    function claimAllExpiredTokens() public {\\n        for (uint256 i = 0; i \\u003c openSeries.length(); i++) {\\n            uint64 seriesId = uint64(openSeries.at(i));\\n            while (\\n                seriesController.state(seriesId) ==\\n                ISeriesController.SeriesState.EXPIRED\\n            ) {\\n                claimExpiredTokens(seriesId);\\n\\n                // Handle edge case: If, prior to removing the Series, i was the index of the last Series\\n                // in openSeries, then after the removal `i` will point to one beyond the end of the array.\\n                // This means we\\u0027ve iterated through all of the Series in `openSeries`, and we should break\\n                // out of the while loop. At this point i == openSeries.length(), so the outer for loop\\n                // will end as well\\n                if (i == openSeries.length()) {\\n                    break;\\n                } else {\\n                    seriesId = uint64(openSeries.at(i));\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Claims any remaining collateral from expired series whose wToken is held by the AMM, and removes\\n    /// the expired series from the AMM\\u0027s collection of series\\n    function claimExpiredTokens(uint64 seriesId) public {\\n        // claim the expired series\\u0027 wTokens, which means it can now be safely removed\\n        uint256 bTokenIndex = SeriesLibrary.bTokenIndex(seriesId);\\n        uint256 wTokenIndex = SeriesLibrary.wTokenIndex(seriesId);\\n\\n        uint256 bTokenBalance = erc1155Controller.balanceOf(\\n            address(this),\\n            bTokenIndex\\n        );\\n        if (bTokenBalance \\u003e 0) {\\n            seriesController.exerciseOption(seriesId, bTokenBalance, false);\\n        }\\n\\n        uint256 wTokenBalance = erc1155Controller.balanceOf(\\n            address(this),\\n            wTokenIndex\\n        );\\n        if (wTokenBalance \\u003e 0) {\\n            seriesController.claimCollateral(seriesId, wTokenBalance);\\n        }\\n        // Remove the expired series to free storage and reduce gas fee\\n        // NOTE: openSeries.remove will remove the series from the i’th position in the EnumerableSet by\\n        // swapping it with the last element in EnumerableSet and then calling .pop on the internal array.\\n        // We are relying on this undocumented behavior of EnumerableSet, which is acceptable because once\\n        // deployed we will never change the EnumerableSet logic.\\n        openSeries.remove(seriesId);\\n\\n        emit SeriesEvicted(seriesId);\\n    }\\n\\n    /// During liquidity withdrawal we either sell pro-rata active tokens back to the pool\\n    /// or withdraw them to the LP\\n    function _sellOrWithdrawActiveTokens(\\n        uint256 lpTokenAmount,\\n        uint256 lpTokenSupply,\\n        address redeemer,\\n        bool sellTokens,\\n        uint256 collateralLeft\\n    ) internal returns (uint256) {\\n        for (uint256 i = 0; i \\u003c openSeries.length(); i++) {\\n            uint64 seriesId = uint64(openSeries.at(i));\\n            if (\\n                seriesController.state(seriesId) ==\\n                ISeriesController.SeriesState.OPEN\\n            ) {\\n                uint256 bTokenIndex = SeriesLibrary.bTokenIndex(seriesId);\\n                uint256 wTokenIndex = SeriesLibrary.wTokenIndex(seriesId);\\n\\n                uint256 bTokenToSell = (erc1155Controller.balanceOf(\\n                    address(this),\\n                    bTokenIndex\\n                ) * lpTokenAmount) / lpTokenSupply;\\n                uint256 wTokenToSell = (erc1155Controller.balanceOf(\\n                    address(this),\\n                    wTokenIndex\\n                ) * lpTokenAmount) / lpTokenSupply;\\n                if (!sellTokens || lpTokenAmount == lpTokenSupply) {\\n                    // Full LP token withdrawal for the last LP in the pool\\n                    // or if auto-sale is disabled\\n                    if (bTokenToSell \\u003e 0) {\\n                        bytes memory data;\\n                        erc1155Controller.safeTransferFrom(\\n                            address(this),\\n                            redeemer,\\n                            bTokenIndex,\\n                            bTokenToSell,\\n                            data\\n                        );\\n                    }\\n                    if (wTokenToSell \\u003e 0) {\\n                        bytes memory data;\\n                        erc1155Controller.safeTransferFrom(\\n                            address(this),\\n                            redeemer,\\n                            wTokenIndex,\\n                            wTokenToSell,\\n                            data\\n                        );\\n                    }\\n                } else {\\n                    // The LP sells their bToken and wToken to the AMM. The AMM\\n                    // pays the LP by reducing collateralLeft, which is what the\\n                    // AMM\\u0027s collateral balance will be after executing this\\n                    // transaction (see MinterAmm.withdrawCapital to see where\\n                    // _sellOrWithdrawActiveTokens gets called)\\n                    uint256 collateralAmountB = optionTokenGetCollateralOutInternal(\\n                            seriesId,\\n                            bTokenToSell,\\n                            collateralLeft,\\n                            true\\n                        );\\n\\n                    // Note! It\\u0027s possible that either of the two subraction operations\\n                    // below will underflow and return an error. This will only\\n                    // happen if the AMM does not have sufficient collateral\\n                    // balance to buy the bToken and wToken from the LP. If this\\n                    // happens, this transaction will revert with a\\n                    // \\\"revert\\\" error message\\n                    collateralLeft -= collateralAmountB;\\n                    uint256 collateralAmountW = optionTokenGetCollateralOutInternal(\\n                            seriesId,\\n                            wTokenToSell,\\n                            collateralLeft,\\n                            false\\n                        );\\n                    collateralLeft -= collateralAmountW;\\n                }\\n            }\\n        }\\n\\n        return collateralLeft;\\n    }\\n\\n    /// Get value of all assets in the pool in units of this AMM\\u0027s collateralToken.\\n    /// Can specify whether to include the value of expired unclaimed tokens\\n    function getTotalPoolValue(bool includeUnclaimed)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        // Note! This function assumes the price obtained from the onchain oracle\\n        // in getCurrentUnderlyingPrice is a valid series price in units of\\n        // collateralToken/paymentToken. If the onchain price oracle\\u0027s value\\n        // were to drift from the true series price, then the bToken price\\n        // we calculate here would also drift, and will result in undefined\\n        // behavior for any functions which call getTotalPoolValue\\n        uint256 underlyingPrice = getCurrentUnderlyingPrice();\\n        // First, determine the value of all residual b/wTokens\\n        uint256 activeTokensValue = 0;\\n        uint256 expiredTokensValue = 0;\\n        for (uint256 i = 0; i \\u003c openSeries.length(); i++) {\\n            uint64 seriesId = uint64(openSeries.at(i));\\n            ISeriesController.Series memory series = seriesController.series(\\n                seriesId\\n            );\\n\\n            uint256 bTokenIndex = SeriesLibrary.bTokenIndex(seriesId);\\n            uint256 wTokenIndex = SeriesLibrary.wTokenIndex(seriesId);\\n\\n            uint256 bTokenBalance = erc1155Controller.balanceOf(\\n                address(this),\\n                bTokenIndex\\n            );\\n            uint256 wTokenBalance = erc1155Controller.balanceOf(\\n                address(this),\\n                wTokenIndex\\n            );\\n\\n            if (\\n                seriesController.state(seriesId) ==\\n                ISeriesController.SeriesState.OPEN\\n            ) {\\n                // value all active bTokens and wTokens at current prices\\n                uint256 bPrice = getPriceForSeriesInternal(\\n                    series,\\n                    underlyingPrice\\n                );\\n                // wPrice = 1 - bPrice\\n                uint256 wPrice = uint256(1e18) - bPrice;\\n\\n                uint256 tokensValueCollateral = seriesController\\n                    .getCollateralPerOptionToken(\\n                        seriesId,\\n                        (bTokenBalance * bPrice + wTokenBalance * wPrice) / 1e18\\n                    );\\n\\n                activeTokensValue += tokensValueCollateral;\\n            } else if (\\n                includeUnclaimed \\u0026\\u0026\\n                seriesController.state(seriesId) ==\\n                ISeriesController.SeriesState.EXPIRED\\n            ) {\\n                // Get collateral token locked in the series\\n                expiredTokensValue += getRedeemableCollateral(\\n                    seriesId,\\n                    wTokenBalance,\\n                    bTokenBalance\\n                );\\n            }\\n        }\\n\\n        // Add collateral value\\n        uint256 collateralBalance = collateralToken.balanceOf(address(this));\\n\\n        return activeTokensValue + expiredTokensValue + collateralBalance;\\n    }\\n\\n    /// @notice List the Series ids this AMM trades\\n    /// @notice Warning: there is no guarantee that the indexes\\n    /// of any individual Series will remain constant between blocks. At any\\n    /// point the indexes of a particular Series may change, so do not rely on\\n    /// the indexes obtained from this function\\n    /// @return an array of all the series IDs\\n    function getAllSeries() external view returns (uint64[] memory) {\\n        uint64[] memory series = new uint64[](openSeries.length());\\n        for (uint256 i = 0; i \\u003c openSeries.length(); i++) {\\n            series[i] = uint64(openSeries.at(i));\\n        }\\n        return series;\\n    }\\n\\n    /// @notice Get a specific Series that this AMM trades\\n    /// @notice Warning: there is no guarantee that the indexes\\n    /// of any individual Series will remain constant between blocks. At any\\n    /// point the indexes of a particular Series may change, so do not rely on\\n    /// the indexes obtained from this function\\n    /// @param seriesId the ID of the Series\\n    /// @return an ISeries, if it exists\\n    function getSeries(uint64 seriesId)\\n        external\\n        view\\n        returns (ISeriesController.Series memory)\\n    {\\n        require(openSeries.contains(seriesId), \\\"E13\\\");\\n        return seriesController.series(seriesId);\\n    }\\n\\n    /// This function determines reserves of a bonding curve for a specific series.\\n    /// Given price of bToken we determine what is the largest pool we can create such that\\n    /// the ratio of its reserves satisfy the given bToken price: Rb / Rw = (1 - Pb) / Pb\\n    function getVirtualReserves(uint64 seriesId)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        require(openSeries.contains(seriesId), \\\"E13\\\");\\n\\n        return\\n            getVirtualReservesInternal(\\n                seriesId,\\n                collateralToken.balanceOf(address(this))\\n            );\\n    }\\n\\n    function getVirtualReservesInternal(\\n        uint64 seriesId,\\n        uint256 collateralTokenBalance\\n    ) internal view returns (uint256, uint256) {\\n        uint256 bTokenIndex = SeriesLibrary.bTokenIndex(seriesId);\\n        uint256 wTokenIndex = SeriesLibrary.wTokenIndex(seriesId);\\n\\n        // Get residual balances\\n        uint256 bTokenBalance = erc1155Controller.balanceOf(\\n            address(this),\\n            bTokenIndex\\n        );\\n        uint256 wTokenBalance = erc1155Controller.balanceOf(\\n            address(this),\\n            wTokenIndex\\n        );\\n\\n        ISeriesController.Series memory series = seriesController.series(\\n            seriesId\\n        );\\n\\n        // For put convert token balances into collateral locked in them\\n        if (series.isPutOption) {\\n            bTokenBalance = seriesController.getCollateralPerOptionToken(\\n                seriesId,\\n                bTokenBalance\\n            );\\n            wTokenBalance = seriesController.getCollateralPerOptionToken(\\n                seriesId,\\n                wTokenBalance\\n            );\\n        }\\n\\n        // Max amount of tokens we can get by adding current balance plus what can be minted from collateral\\n        uint256 bTokenBalanceMax = bTokenBalance + collateralTokenBalance;\\n        uint256 wTokenBalanceMax = wTokenBalance + collateralTokenBalance;\\n\\n        uint256 bTokenPrice = getPriceForSeriesInternal(\\n            series,\\n            getCurrentUnderlyingPrice()\\n        );\\n        uint256 wTokenPrice = uint256(1e18) - bTokenPrice;\\n\\n        // Balance on higher reserve side is the sum of what can be minted (collateralTokenBalance)\\n        // plus existing balance of the token\\n        uint256 bTokenVirtualBalance;\\n        uint256 wTokenVirtualBalance;\\n\\n        if (bTokenPrice \\u003c= wTokenPrice) {\\n            // Rb \\u003e= Rw, Pb \\u003c= Pw\\n            bTokenVirtualBalance = bTokenBalanceMax;\\n            wTokenVirtualBalance =\\n                (bTokenVirtualBalance * bTokenPrice) /\\n                wTokenPrice;\\n\\n            // Sanity check that we don\\u0027t exceed actual physical balances\\n            // In case this happens, adjust virtual balances to not exceed maximum\\n            // available reserves while still preserving correct price\\n            if (wTokenVirtualBalance \\u003e wTokenBalanceMax) {\\n                wTokenVirtualBalance = wTokenBalanceMax;\\n                bTokenVirtualBalance =\\n                    (wTokenVirtualBalance * wTokenPrice) /\\n                    bTokenPrice;\\n            }\\n        } else {\\n            // if Rb \\u003c Rw, Pb \\u003e Pw\\n            wTokenVirtualBalance = wTokenBalanceMax;\\n            bTokenVirtualBalance =\\n                (wTokenVirtualBalance * wTokenPrice) /\\n                bTokenPrice;\\n\\n            // Sanity check\\n            if (bTokenVirtualBalance \\u003e bTokenBalanceMax) {\\n                bTokenVirtualBalance = bTokenBalanceMax;\\n                wTokenVirtualBalance =\\n                    (bTokenVirtualBalance * bTokenPrice) /\\n                    wTokenPrice;\\n            }\\n        }\\n\\n        return (bTokenVirtualBalance, wTokenVirtualBalance);\\n    }\\n\\n    /// @dev Get the current series price of the underlying token with units of priceToken,\\n    /// always with 8 decimals\\n    /// @dev For example, if underlying == WBTC and price == USDC, then this function will return\\n    /// 4500000000000 ($45_000 in human readable units)\\n    function getCurrentUnderlyingPrice() private view returns (uint256) {\\n        return\\n            IPriceOracle(sirenPriceOracle).getCurrentPrice(\\n                address(underlyingToken),\\n                address(priceToken)\\n            );\\n    }\\n\\n    /// @notice Get the bToken price for given Series, in units of the collateral token\\n    /// and normalized to 1e18. We use a normalization factor of 1e18 because we need\\n    /// to represent fractional values, yet Solidity does not support floating point numerics.\\n    /// @notice For example, if this is a WBTC Call option pool and so\\n    /// the collateral token is WBTC, then a return value of 0.5e18 means X units of bToken\\n    /// have a price of 0.5 * X units of WBTC. Another example; if this were a WBTC Put\\n    /// option pool, and so the collateral token is USDC, then a return value of 0.1e18 means\\n    /// X units of bToken have a price of 0.1 * X * strikePrice units of USDC.\\n    /// @notice This value will always be between 0 and 1e18, so you can think of it as\\n    /// representing the price as a fraction of 1 collateral token unit\\n    function getPriceForSeries(uint64 seriesId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        require(openSeries.contains(seriesId), \\\"E13\\\");\\n\\n        return\\n            getPriceForSeriesInternal(\\n                seriesController.series(seriesId),\\n                getCurrentUnderlyingPrice()\\n            );\\n    }\\n\\n    function getPriceForSeriesInternal(\\n        ISeriesController.Series memory series,\\n        uint256 underlyingPrice\\n    ) private view returns (uint256) {\\n        return\\n            // Note! This function assumes the price obtained from the onchain oracle\\n            // in getCurrentUnderlyingPrice is a valid series price in units of\\n            // underlyingToken/priceToken. If the onchain price oracle\\u0027s value\\n            // were to drift from the true series price, then the bToken price\\n            // we calculate here would also drift, and will result in undefined\\n            // behavior for any functions which call getPriceForSeries\\n            calcPrice(\\n                series.expirationDate - block.timestamp,\\n                series.strikePrice,\\n                underlyingPrice,\\n                volatilityFactor,\\n                series.isPutOption\\n            );\\n    }\\n\\n    /// @dev Calculate price of bToken based on Black-Scholes approximation by Brennan-Subrahmanyam from their paper\\n    /// \\\"A Simple Formula to Compute the Implied Standard Deviation\\\" (1988).\\n    /// Formula: 0.4 * ImplVol * sqrt(timeUntilExpiry) * priceRatio\\n    ///\\n    /// Returns premium in units of percentage of collateral locked in a contract for both calls and puts\\n    function calcPrice(\\n        uint256 timeUntilExpiry,\\n        uint256 strike,\\n        uint256 currentPrice,\\n        uint256 volatility,\\n        bool isPutOption\\n    ) public pure returns (uint256) {\\n        uint256 intrinsic = 0;\\n        uint256 timeValue = 0;\\n\\n        if (isPutOption) {\\n            if (currentPrice \\u003c strike) {\\n                // ITM\\n                intrinsic = ((strike - currentPrice) * 1e18) / strike;\\n            }\\n\\n            timeValue =\\n                (Math.sqrt(timeUntilExpiry) * volatility * strike) /\\n                currentPrice;\\n        } else {\\n            if (currentPrice \\u003e strike) {\\n                // ITM\\n                intrinsic = ((currentPrice - strike) * 1e18) / currentPrice;\\n            }\\n\\n            // use a Black-Scholes approximation to calculate the option price given the\\n            // volatility, strike price, and the current series price\\n            timeValue =\\n                (Math.sqrt(timeUntilExpiry) * volatility * currentPrice) /\\n                strike;\\n        }\\n\\n        return intrinsic + timeValue;\\n    }\\n\\n    /// @dev Buy bToken of a given series.\\n    /// We supply series index instead of series address to ensure that only supported series can be traded using this AMM\\n    /// collateralMaximum is used for slippage protection\\n    function bTokenBuy(\\n        uint64 seriesId,\\n        uint256 bTokenAmount,\\n        uint256 collateralMaximum\\n    ) external minTradeSize(bTokenAmount) nonReentrant returns (uint256) {\\n        require(openSeries.contains(seriesId), \\\"E13\\\");\\n\\n        require(\\n            seriesController.state(seriesId) ==\\n                ISeriesController.SeriesState.OPEN,\\n            \\\"Series has expired\\\"\\n        );\\n\\n        uint256 collateralAmount = bTokenGetCollateralIn(\\n            seriesId,\\n            bTokenAmount\\n        );\\n        require(collateralAmount \\u003c= collateralMaximum, \\\"Slippage exceeded\\\");\\n\\n        // Move collateral into this contract\\n        collateralToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            collateralAmount\\n        );\\n\\n        // Mint new options only as needed\\n        uint256 bTokenIndex = SeriesLibrary.bTokenIndex(seriesId);\\n        uint256 bTokenBalance = erc1155Controller.balanceOf(\\n            address(this),\\n            bTokenIndex\\n        );\\n        if (bTokenBalance \\u003c bTokenAmount) {\\n            // Approve the collateral to mint bTokenAmount of new options\\n            uint256 bTokenCollateralAmount = seriesController\\n                .getCollateralPerOptionToken(seriesId, bTokenAmount);\\n\\n            collateralToken.approve(\\n                address(seriesController),\\n                bTokenCollateralAmount\\n            );\\n            seriesController.mintOptions(\\n                seriesId,\\n                bTokenAmount - bTokenBalance\\n            );\\n        }\\n\\n        // Send all bTokens back\\n        bytes memory data;\\n        erc1155Controller.safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            bTokenIndex,\\n            bTokenAmount,\\n            data\\n        );\\n\\n        // Emit the event\\n        emit BTokensBought(\\n            msg.sender,\\n            seriesId,\\n            bTokenAmount,\\n            collateralAmount\\n        );\\n\\n        // Return the amount of collateral required to buy\\n        return collateralAmount;\\n    }\\n\\n    /// @notice Sell the bToken of a given series to the AMM in exchange for collateral token\\n    /// @notice This call will fail if the caller tries to sell a bToken amount larger than the amount of\\n    /// wToken held by the AMM\\n    /// @param seriesId The ID of the Series to buy bToken on\\n    /// @param bTokenAmount The amount of bToken to sell (bToken has the same decimals as the underlying)\\n    /// @param collateralMinimum The lowest amount of collateral the caller is willing to receive as payment\\n    /// for their bToken. The actual amount of bToken received may be lower than this due to slippage\\n    function bTokenSell(\\n        uint64 seriesId,\\n        uint256 bTokenAmount,\\n        uint256 collateralMinimum\\n    ) external minTradeSize(bTokenAmount) nonReentrant returns (uint256) {\\n        require(openSeries.contains(seriesId), \\\"E13\\\");\\n\\n        require(\\n            seriesController.state(seriesId) ==\\n                ISeriesController.SeriesState.OPEN,\\n            \\\"Series has expired\\\"\\n        );\\n\\n        uint256 collateralAmount = bTokenGetCollateralOut(\\n            seriesId,\\n            bTokenAmount\\n        );\\n        require(collateralAmount \\u003e= collateralMinimum, \\\"Slippage exceeded\\\");\\n\\n        uint256 bTokenIndex = SeriesLibrary.bTokenIndex(seriesId);\\n        uint256 wTokenIndex = SeriesLibrary.wTokenIndex(seriesId);\\n\\n        // Move bToken into this contract\\n        bytes memory data;\\n        erc1155Controller.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            bTokenIndex,\\n            bTokenAmount,\\n            data\\n        );\\n\\n        // Always be closing!\\n        uint256 bTokenBalance = erc1155Controller.balanceOf(\\n            address(this),\\n            bTokenIndex\\n        );\\n        uint256 wTokenBalance = erc1155Controller.balanceOf(\\n            address(this),\\n            wTokenIndex\\n        );\\n        uint256 closeAmount = Math.min(bTokenBalance, wTokenBalance);\\n\\n        // at this point we know it\\u0027s worth calling closePosition because\\n        // the close amount is greater than 0, so let\\u0027s call it and burn\\n        // excess option tokens in order to receive collateral tokens\\n        seriesController.closePosition(seriesId, closeAmount);\\n\\n        // Send the tokens to the seller\\n        collateralToken.safeTransfer(msg.sender, collateralAmount);\\n\\n        // Emit the event\\n        emit BTokensSold(msg.sender, seriesId, bTokenAmount, collateralAmount);\\n\\n        // Return the amount of collateral received during sale\\n        return collateralAmount;\\n    }\\n\\n    /// @notice Calculate premium (i.e. the option price) to buy bTokenAmount bTokens for the\\n    /// given Series\\n    /// @notice The premium depends on the amount of collateral token in the pool, the reserves\\n    /// of bToken and wToken in the pool, and the current series price of the underlying\\n    /// @param seriesId The ID of the Series to buy bToken on\\n    /// @param bTokenAmount The amount of bToken to buy, which uses the same decimals as\\n    /// the underlying ERC20 token\\n    /// @return The amount of collateral token necessary to buy bTokenAmount worth of bTokens\\n    function bTokenGetCollateralIn(uint64 seriesId, uint256 bTokenAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        // Shortcut for 0 amount\\n        if (bTokenAmount == 0) return 0;\\n\\n        bTokenAmount = seriesController.getCollateralPerOptionToken(\\n            seriesId,\\n            bTokenAmount\\n        );\\n\\n        // For both puts and calls balances are expressed in collateral token\\n        (uint256 bTokenBalance, uint256 wTokenBalance) = getVirtualReserves(\\n            seriesId\\n        );\\n\\n        uint256 sumBalance = bTokenBalance + wTokenBalance;\\n        uint256 toSquare;\\n        if (sumBalance \\u003e bTokenAmount) {\\n            toSquare = sumBalance - bTokenAmount;\\n        } else {\\n            toSquare = bTokenAmount - sumBalance;\\n        }\\n\\n        // return the collateral amount\\n        return\\n            (((Math.sqrt((toSquare**2) + (4 * bTokenAmount * wTokenBalance)) +\\n                bTokenAmount) - bTokenBalance) - wTokenBalance) / 2;\\n    }\\n\\n    /// @notice Calculate the amount of collateral token the user will receive for selling\\n    /// bTokenAmount worth of bToken to the pool. This is the option\\u0027s sell price\\n    /// @notice The sell price depends on the amount of collateral token in the pool, the reserves\\n    /// of bToken and wToken in the pool, and the current series price of the underlying\\n    /// @param seriesId The ID of the Series to sell bToken on\\n    /// @param bTokenAmount The amount of bToken to sell, which uses the same decimals as\\n    /// the underlying ERC20 token\\n    /// @return The amount of collateral token the user will receive upon selling bTokenAmount of\\n    /// bTokens to the pool\\n    function bTokenGetCollateralOut(uint64 seriesId, uint256 bTokenAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            optionTokenGetCollateralOutInternal(\\n                seriesId,\\n                bTokenAmount,\\n                collateralToken.balanceOf(address(this)),\\n                true\\n            );\\n    }\\n\\n    /// @notice Sell the wToken of a given series to the AMM in exchange for collateral token\\n    /// @param seriesId The ID of the Series to buy wToken on\\n    /// @param wTokenAmount The amount of wToken to sell (wToken has the same decimals as the underlying)\\n    /// @param collateralMinimum The lowest amount of collateral the caller is willing to receive as payment\\n    /// for their wToken. The actual amount of wToken received may be lower than this due to slippage\\n    function wTokenSell(\\n        uint64 seriesId,\\n        uint256 wTokenAmount,\\n        uint256 collateralMinimum\\n    ) external minTradeSize(wTokenAmount) nonReentrant returns (uint256) {\\n        require(openSeries.contains(seriesId), \\\"E13\\\");\\n\\n        require(\\n            seriesController.state(seriesId) ==\\n                ISeriesController.SeriesState.OPEN,\\n            \\\"Series has expired\\\"\\n        );\\n\\n        // Get initial stats\\n        uint256 collateralAmount = wTokenGetCollateralOut(\\n            seriesId,\\n            wTokenAmount\\n        );\\n        require(collateralAmount \\u003e= collateralMinimum, \\\"Slippage exceeded\\\");\\n\\n        uint256 bTokenIndex = SeriesLibrary.bTokenIndex(seriesId);\\n        uint256 wTokenIndex = SeriesLibrary.wTokenIndex(seriesId);\\n\\n        // Move wToken into this contract\\n        bytes memory data;\\n        erc1155Controller.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            wTokenIndex,\\n            wTokenAmount,\\n            data\\n        );\\n\\n        // Always be closing!\\n        uint256 bTokenBalance = erc1155Controller.balanceOf(\\n            address(this),\\n            bTokenIndex\\n        );\\n        uint256 wTokenBalance = erc1155Controller.balanceOf(\\n            address(this),\\n            wTokenIndex\\n        );\\n        uint256 closeAmount = Math.min(bTokenBalance, wTokenBalance);\\n        if (closeAmount \\u003e 0) {\\n            seriesController.closePosition(seriesId, closeAmount);\\n        }\\n\\n        // Send the tokens to the seller\\n        collateralToken.safeTransfer(msg.sender, collateralAmount);\\n\\n        // Emit the event\\n        emit WTokensSold(msg.sender, seriesId, wTokenAmount, collateralAmount);\\n\\n        // Return the amount of collateral received during sale\\n        return collateralAmount;\\n    }\\n\\n    /// @notice Calculate amount of collateral in exchange for selling wTokens\\n    function wTokenGetCollateralOut(uint64 seriesId, uint256 wTokenAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            optionTokenGetCollateralOutInternal(\\n                seriesId,\\n                wTokenAmount,\\n                collateralToken.balanceOf(address(this)),\\n                false\\n            );\\n    }\\n\\n    /// @dev Calculates the amount of collateral token a seller will receive for selling their option tokens,\\n    /// taking into account the AMM\\u0027s level of reserves\\n    /// @param seriesId The ID of the Series\\n    /// @param optionTokenAmount The amount of option tokens (either bToken or wToken) to be sold\\n    /// @param _collateralTokenBalance The amount of collateral token held by this AMM\\n    /// @param isBToken true if the option token is bToken, and false if it\\u0027s wToken. Depending on which\\n    /// of the two it is, the equation for calculating the final collateral token is a little different\\n    /// @return The amount of collateral token the seller will receive in exchange for their option token\\n    function optionTokenGetCollateralOutInternal(\\n        uint64 seriesId,\\n        uint256 optionTokenAmount,\\n        uint256 _collateralTokenBalance,\\n        bool isBToken\\n    ) private view returns (uint256) {\\n        // Shortcut for 0 amount\\n        if (optionTokenAmount == 0) return 0;\\n\\n        optionTokenAmount = seriesController.getCollateralPerOptionToken(\\n            seriesId,\\n            optionTokenAmount\\n        );\\n\\n        (\\n            uint256 bTokenBalance,\\n            uint256 wTokenBalance\\n        ) = getVirtualReservesInternal(seriesId, _collateralTokenBalance);\\n\\n        uint256 balanceFactor;\\n        if (isBToken) {\\n            balanceFactor = wTokenBalance;\\n        } else {\\n            balanceFactor = bTokenBalance;\\n        }\\n        uint256 toSquare = optionTokenAmount + wTokenBalance + bTokenBalance;\\n        uint256 collateralAmount = (toSquare -\\n            Math.sqrt(\\n                (toSquare**2) - (4 * optionTokenAmount * balanceFactor)\\n            )) / 2;\\n\\n        return collateralAmount;\\n    }\\n\\n    /// @notice Calculate the amount of collateral the AMM would received if all of the\\n    /// expired Series\\u0027 wTokens and bTokens were to be redeemed for their underlying collateral\\n    /// value\\n    /// @return The amount of collateral token the AMM would receive if it were to exercise/claim\\n    /// all expired bTokens/wTokens\\n    function getCollateralValueOfAllExpiredOptionTokens()\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 unredeemedCollateral = 0;\\n\\n        for (uint256 i = 0; i \\u003c openSeries.length(); i++) {\\n            uint64 seriesId = uint64(openSeries.at(i));\\n\\n            if (\\n                seriesController.state(seriesId) ==\\n                ISeriesController.SeriesState.EXPIRED\\n            ) {\\n                uint256 bTokenIndex = SeriesLibrary.bTokenIndex(seriesId);\\n                uint256 wTokenIndex = SeriesLibrary.wTokenIndex(seriesId);\\n\\n                // Get the pool\\u0027s option token balances\\n                uint256 bTokenBalance = erc1155Controller.balanceOf(\\n                    address(this),\\n                    bTokenIndex\\n                );\\n                uint256 wTokenBalance = erc1155Controller.balanceOf(\\n                    address(this),\\n                    wTokenIndex\\n                );\\n\\n                // calculate the amount of collateral The AMM would receive by\\n                // redeeming this Series\\u0027 bTokens and wTokens\\n                unredeemedCollateral += getRedeemableCollateral(\\n                    seriesId,\\n                    wTokenBalance,\\n                    bTokenBalance\\n                );\\n            }\\n        }\\n\\n        return unredeemedCollateral;\\n    }\\n\\n    /// @notice Calculate sale value of pro-rata LP b/wTokens in units of collateral token\\n    function getOptionTokensSaleValue(uint256 lpTokenAmount)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (lpTokenAmount == 0) return 0;\\n\\n        uint256 lpTokenSupply = IERC20Lib(address(lpToken)).totalSupply();\\n        if (lpTokenSupply == 0) return 0;\\n\\n        // Calculate the amount of collateral receivable by redeeming all the expired option tokens\\n        uint256 expiredOptionTokenCollateral = getCollateralValueOfAllExpiredOptionTokens();\\n\\n        // Calculate amount of collateral left in the pool to sell tokens to\\n        uint256 totalCollateral = expiredOptionTokenCollateral +\\n            collateralToken.balanceOf(address(this));\\n\\n        // Subtract pro-rata collateral amount to be withdrawn\\n        totalCollateral =\\n            (totalCollateral * (lpTokenSupply - lpTokenAmount)) /\\n            lpTokenSupply;\\n\\n        // Given remaining collateral calculate how much all tokens can be sold for\\n        uint256 collateralLeft = totalCollateral;\\n        for (uint256 i = 0; i \\u003c openSeries.length(); i++) {\\n            uint64 seriesId = uint64(openSeries.at(i));\\n\\n            if (\\n                seriesController.state(seriesId) ==\\n                ISeriesController.SeriesState.OPEN\\n            ) {\\n                uint256 bTokenToSell = (erc1155Controller.balanceOf(\\n                    address(this),\\n                    SeriesLibrary.bTokenIndex(seriesId)\\n                ) * lpTokenAmount) / lpTokenSupply;\\n                uint256 wTokenToSell = (erc1155Controller.balanceOf(\\n                    address(this),\\n                    SeriesLibrary.wTokenIndex(seriesId)\\n                ) * lpTokenAmount) / lpTokenSupply;\\n\\n                uint256 collateralAmountB = optionTokenGetCollateralOutInternal(\\n                    seriesId,\\n                    bTokenToSell,\\n                    collateralLeft,\\n                    true\\n                );\\n                collateralLeft -= collateralAmountB;\\n\\n                uint256 collateralAmountW = optionTokenGetCollateralOutInternal(\\n                    seriesId,\\n                    wTokenToSell,\\n                    collateralLeft,\\n                    false\\n                );\\n                collateralLeft -= collateralAmountW;\\n            }\\n        }\\n\\n        return totalCollateral - collateralLeft;\\n    }\\n\\n    /// @dev Calculate the collateral amount receivable by redeeming the given\\n    /// Series\\u0027 bTokens and wToken\\n    /// @param seriesId The index of the Series\\n    /// @param wTokenBalance The wToken balance for this Series owned by this AMM\\n    /// @param bTokenBalance The bToken balance for this Series owned by this AMM\\n    /// @return The total amount of collateral receivable by redeeming the Series\\u0027 option tokens\\n    function getRedeemableCollateral(\\n        uint64 seriesId,\\n        uint256 wTokenBalance,\\n        uint256 bTokenBalance\\n    ) private view returns (uint256) {\\n        uint256 unredeemedCollateral = 0;\\n        if (wTokenBalance \\u003e 0) {\\n            (uint256 unclaimedCollateral, ) = seriesController.getClaimAmount(\\n                seriesId,\\n                wTokenBalance\\n            );\\n            unredeemedCollateral += unclaimedCollateral;\\n        }\\n        if (bTokenBalance \\u003e 0) {\\n            (uint256 unexercisedCollateral, ) = seriesController\\n                .getExerciseAmount(seriesId, bTokenBalance);\\n            unredeemedCollateral += unexercisedCollateral;\\n        }\\n\\n        return unredeemedCollateral;\\n    }\\n\\n    /// @notice Adds the address of series to the amm\\n    /// @dev Only the associated SeriesController may call this function\\n    /// @dev The SeriesController calls this function when it is creating a Series\\n    /// and adds the Series to this AMM\\n    function addSeries(uint64 _seriesId) external override {\\n        require(msg.sender == address(seriesController), \\\"E11\\\");\\n        // Prevents out of gas error, occuring at 250 series, from locking\\n        // in LPs when we cycle over openSeries in _sellOrWithdrawActiveTokens.\\n        // We further lower the limit to 100 series for extra safety.\\n        require(openSeries.length() \\u003c= 100, \\\"Too many open series\\\");\\n        openSeries.add(_seriesId);\\n    }\\n\\n    /// @notice Returns true when interfaceId is the ID of the addSeries function or the ERC165\\n    /// standard, and false otherwise\\n    /// @dev This function exists only so the SeriesController can tell when to try to add\\n    /// Series it has created to the MinterAmm\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == this.addSeries.selector ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\"},\"OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"},\"Proxiable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.0;\\n\\ncontract Proxiable {\\n    // Code position in storage is keccak256(\\\"PROXIABLE\\\") = \\\"0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7\\\"\\n    uint256 constant PROXY_MEM_SLOT =\\n        0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\\n\\n    event CodeAddressUpdated(address newAddress);\\n\\n    function _updateCodeAddress(address newAddress) internal {\\n        require(\\n            bytes32(PROXY_MEM_SLOT) == Proxiable(newAddress).proxiableUUID(),\\n            \\\"Not compatible\\\"\\n        );\\n        assembly {\\n            // solium-disable-line\\n            sstore(PROXY_MEM_SLOT, newAddress)\\n        }\\n\\n        emit CodeAddressUpdated(newAddress);\\n    }\\n\\n    function getLogicAddress() public view returns (address logicAddress) {\\n        assembly {\\n            // solium-disable-line\\n            logicAddress := sload(PROXY_MEM_SLOT)\\n        }\\n    }\\n\\n    function proxiableUUID() public pure returns (bytes32) {\\n        return bytes32(PROXY_MEM_SLOT);\\n    }\\n}\\n\"},\"Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.0;\\n\\ncontract Proxy {\\n    // Code position in storage is keccak256(\\\"PROXIABLE\\\") = \\\"0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7\\\"\\n    uint256 constant PROXY_MEM_SLOT =\\n        0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\\n\\n    constructor(address contractLogic) public {\\n        // Verify a valid address was passed in\\n        require(contractLogic != address(0), \\\"Contract Logic cannot be 0x0\\\");\\n\\n        // save the code address\\n        assembly {\\n            // solium-disable-line\\n            sstore(PROXY_MEM_SLOT, contractLogic)\\n        }\\n    }\\n\\n    fallback() external payable {\\n        assembly {\\n            // solium-disable-line\\n            let contractLogic := sload(PROXY_MEM_SLOT)\\n            let ptr := mload(0x40)\\n            calldatacopy(ptr, 0x0, calldatasize())\\n            let success := delegatecall(\\n                gas(),\\n                contractLogic,\\n                ptr,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            let retSz := returndatasize()\\n            returndatacopy(ptr, 0, retSz)\\n            switch success\\n                case 0 {\\n                    revert(ptr, retSz)\\n                }\\n                default {\\n                    return(ptr, retSz)\\n                }\\n        }\\n    }\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"},\"SeriesLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.0;\\n\\nlibrary SeriesLibrary {\\n    function wTokenIndex(uint64 _seriesId) internal pure returns (uint256) {\\n        return _seriesId * 2;\\n    }\\n\\n    function bTokenIndex(uint64 _seriesId) internal pure returns (uint256) {\\n        return (_seriesId * 2) + 1;\\n    }\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISimpleToken\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sirenPriceOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"AMMInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"seriesId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bTokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralPaid\",\"type\":\"uint256\"}],\"name\":\"BTokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"seriesId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bTokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralPaid\",\"type\":\"uint256\"}],\"name\":\"BTokensSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"CodeAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralRemoved\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokensBurned\",\"type\":\"uint256\"}],\"name\":\"LpTokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokensMinted\",\"type\":\"uint256\"}],\"name\":\"LpTokensMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSirenPriceOracle\",\"type\":\"address\"}],\"name\":\"NewSirenPriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"seriesId\",\"type\":\"uint64\"}],\"name\":\"SeriesEvicted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVolatilityFactor\",\"type\":\"uint256\"}],\"name\":\"VolatilityFactorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"seriesId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wTokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralPaid\",\"type\":\"uint256\"}],\"name\":\"WTokensSold\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_TRADE_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_seriesId\",\"type\":\"uint64\"}],\"name\":\"addSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"seriesId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"bTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralMaximum\",\"type\":\"uint256\"}],\"name\":\"bTokenBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"seriesId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"bTokenAmount\",\"type\":\"uint256\"}],\"name\":\"bTokenGetCollateralIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"seriesId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"bTokenAmount\",\"type\":\"uint256\"}],\"name\":\"bTokenGetCollateralOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"seriesId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"bTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralMinimum\",\"type\":\"uint256\"}],\"name\":\"bTokenSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeUntilExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volatility\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPutOption\",\"type\":\"bool\"}],\"name\":\"calcPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllExpiredTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"seriesId\",\"type\":\"uint64\"}],\"name\":\"claimExpiredTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc1155Controller\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllSeries\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralValueOfAllExpiredOptionTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLogicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"logicAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"name\":\"getOptionTokensSaleValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"seriesId\",\"type\":\"uint64\"}],\"name\":\"getPriceForSeries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"seriesId\",\"type\":\"uint64\"}],\"name\":\"getSeries\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"expirationDate\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"isPutOption\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"internalType\":\"struct ISeriesController.Tokens\",\"name\":\"tokens\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ISeriesController.Series\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"includeUnclaimed\",\"type\":\"bool\"}],\"name\":\"getTotalPoolValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"seriesId\",\"type\":\"uint64\"}],\"name\":\"getVirtualReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISeriesController\",\"name\":\"_seriesController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sirenPriceOracle\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_underlyingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_priceToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenImplementation\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_tradeFeeBasisPoints\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract ISimpleToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenMinimum\",\"type\":\"uint256\"}],\"name\":\"provideCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seriesController\",\"outputs\":[{\"internalType\":\"contract ISeriesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_volatilityFactor\",\"type\":\"uint256\"}],\"name\":\"setVolatilityFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImplementation\",\"type\":\"address\"}],\"name\":\"updateImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volatilityFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"seriesId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"wTokenAmount\",\"type\":\"uint256\"}],\"name\":\"wTokenGetCollateralOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"seriesId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"wTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralMinimum\",\"type\":\"uint256\"}],\"name\":\"wTokenSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sellTokens\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralMinimum\",\"type\":\"uint256\"}],\"name\":\"withdrawCapital\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MinterAmm","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://aec9a096c51f4ed488b6b263028660ac8903a3dc62948a0d99b00173b73bf77b"}]}