{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/CryptoPunkAttributes.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**************************/\r\n/***     Interfaces     ***/\r\n/**************************/\r\n\r\ninterface ICryptoPunksData {\r\n    function punkAttributes(uint16 index)\r\n        external\r\n        view\r\n        returns (string memory text);\r\n}\r\n\r\ncontract CryptoPunkAttributes is Ownable {\r\n\r\n    address internal constant CRYPTO_PUNKS_DATA_ADDR = 0x16F5A35647D6F03D5D3da7b35409D65ba03aF3B2;\r\n\r\n    struct CryptoPunk {\r\n        string species;\r\n        string ears;\r\n        string topHead;\r\n        string eyes;\r\n        string neck;\r\n        string face;\r\n        string mouth;\r\n        string mouthAccessory;\r\n        string facialHair;\r\n    }\r\n\r\n    mapping(uint256 => CryptoPunk) internal _punkIdToAttributes;\r\n\r\n    mapping(uint256 => address) private _creators;\r\n\r\n    mapping(string => uint) private _attributesToCategoryIndex;\r\n\r\n    /**************************/\r\n    /*** Internal Functions ***/\r\n    /**************************/\r\n\r\n    /**\r\n     * Strings Library (author James Lockhart: james at n3tw0rk.co.uk)\r\n     *\r\n     * Index Of\r\n     *\r\n     * Locates and returns the position of a character within a string starting\r\n     * from a defined offset\r\n     * \r\n     * @param _base When being used for a data type this is the extended object\r\n     *              otherwise this is the string acting as the haystack to be\r\n     *              searched\r\n     * @param _value The needle to search for, at present this is currently\r\n     *               limited to one character\r\n     * @param _offset The starting point to start searching from which can start\r\n     *                from 0, but must not exceed the length of the string\r\n     * @return int The position of the needle starting from 0 and returning -1\r\n     *             in the case of no matches found\r\n     */\r\n        function _indexOf(string memory _base, string memory _value, uint _offset)\r\n        internal\r\n        pure\r\n        returns (int) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        bytes memory _valueBytes = bytes(_value);\r\n\r\n        assert(_valueBytes.length == 1);\r\n\r\n        for (uint i = _offset; i < _baseBytes.length; i++) {\r\n            if (_baseBytes[i] == _valueBytes[0]) {\r\n                return int(i);\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n    \r\n    /**\r\n     * Strings Library (author James Lockhart: james at n3tw0rk.co.uk)\r\n     * \r\n     * Modified String Split:\r\n     * String splitByComaAndSpace\r\n     *\r\n     * Splits a string into an array of strings based off the delimiter value, in this case \",\".\r\n     *\r\n     * @param _base When being used for a data type this is the extended object\r\n     *               otherwise this is the string value to be split.\r\n     * \r\n     * @return splitArr\r\n     */\r\n        function _splitByComaAndSpace(string memory _base) internal pure returns (string[] memory splitArr) {\r\n            bytes memory _baseBytes = bytes(_base);\r\n            string memory _value = \",\";\r\n            \r\n            uint _offset = 0;\r\n        uint _splitsCount = 1;\r\n        while (_offset < _baseBytes.length - 1) {\r\n            int _limit = _indexOf(_base, _value, _offset);\r\n            if (_limit == -1)\r\n                break;\r\n            else {\r\n                _splitsCount++;\r\n                _offset = uint(_limit) + 1;\r\n            }\r\n        }\r\n\r\n        splitArr = new string[](_splitsCount);\r\n        \r\n        _offset = 0;\r\n        _splitsCount = 0;\r\n        \r\n        while (_offset < _baseBytes.length - 1) {\r\n            int _limit = _indexOf(_base, _value, _offset);\r\n            if (_limit == -1) {\r\n                _limit = int(_baseBytes.length);\r\n            }\r\n            \r\n            string memory _tmp = new string(uint(_limit) - _offset);\r\n            bytes memory _tmpBytes = bytes(_tmp);\r\n            \r\n            uint j = 0;\r\n            for (uint i = _offset; i < uint(_limit); i++) {\r\n                _tmpBytes[j++] = _baseBytes[i];\r\n            }\r\n            \r\n            _offset = uint(_limit) + 2;\r\n            splitArr[_splitsCount++] = string(_tmpBytes);\r\n        }\r\n        return splitArr;\r\n        }\r\n\r\n\r\n    /**************************/\r\n    /***  Public Functions  ***/\r\n    /**************************/\r\n\r\n    function exists(uint256 tokenId) public view returns (bool) {\r\n        return _creators[tokenId] != address(0);\r\n    }\r\n\r\n    function createStructForPunk(uint punkIndex) public {\r\n        require(!exists(punkIndex), \"Crypto Punks Attributes: There are already attributes stored for the Punk you are requesting\");\r\n        require(punkIndex >= 0 && punkIndex < 10000, \"Crypto Punks Attributes: You have to enter a Punk Index between 0 and 9999\");\r\n        string memory punkAttributes = ICryptoPunksData(CRYPTO_PUNKS_DATA_ADDR).punkAttributes(uint16(punkIndex));\r\n\r\n        string[] memory punkAttributesArray = _splitByComaAndSpace(punkAttributes);\r\n\r\n        CryptoPunk memory thisCryptoPunk;\r\n\r\n        thisCryptoPunk.topHead;\r\n\r\n        thisCryptoPunk.species = punkAttributesArray[0];\r\n\r\n        for (uint i = 1; i < punkAttributesArray.length; i++) {\r\n\r\n            uint attributeCategoryIndex = _attributesToCategoryIndex[punkAttributesArray[i]];\r\n            \r\n            if (attributeCategoryIndex == 1) {\r\n                thisCryptoPunk.ears = punkAttributesArray[i];\r\n            } \r\n            else if (attributeCategoryIndex == 2) {\r\n                thisCryptoPunk.topHead = punkAttributesArray[i];\r\n            } \r\n            else if (attributeCategoryIndex == 3) {\r\n                thisCryptoPunk.eyes = punkAttributesArray[i];\r\n            } \r\n            else if (attributeCategoryIndex == 4) {\r\n                thisCryptoPunk.neck = punkAttributesArray[i];\r\n            } \r\n            else if (attributeCategoryIndex == 5) {\r\n                thisCryptoPunk.face = punkAttributesArray[i];\r\n            } \r\n            else if (attributeCategoryIndex == 6) {\r\n                thisCryptoPunk.mouth = punkAttributesArray[i];\r\n            } \r\n            else if (attributeCategoryIndex == 7) {\r\n                thisCryptoPunk.mouthAccessory = punkAttributesArray[i];\r\n            }\r\n            else if (attributeCategoryIndex == 8) {\r\n                thisCryptoPunk.facialHair = punkAttributesArray[i];\r\n            }\r\n            }\r\n\r\n        _punkIdToAttributes[punkIndex] = thisCryptoPunk;\r\n        _creators[punkIndex] = msg.sender;\r\n    }\r\n\r\n    function getAttributeSpeciesFrom(uint punkIndex) public view returns (string memory attribute) {\r\n        require(exists(punkIndex), \"Crypto Punks Attributes: There aren't any attributes stored for the Punk you are requesting\");\r\n        return _punkIdToAttributes[punkIndex].species;\r\n    }\r\n\r\n    function getAttributeTopHeadFrom(uint punkIndex) public view returns (string memory attribute) {\r\n        require(exists(punkIndex), \"Crypto Punks Attributes: There aren't any attributes stored for the Punk you are requesting\");\r\n        return _punkIdToAttributes[punkIndex].topHead;\r\n    }\r\n\r\n    function getAttributeEyesFrom(uint punkIndex) public view returns (string memory attribute) {\r\n        require(exists(punkIndex), \"Crypto Punks Attributes: There aren't any attributes stored for the Punk you are requesting\");\r\n        return _punkIdToAttributes[punkIndex].eyes;\r\n    }\r\n\r\n    function getAttributeEarsFrom(uint punkIndex) public view returns (string memory attribute) {\r\n        require(exists(punkIndex), \"Crypto Punks Attributes: There aren't any attributes stored for the Punk you are requesting\");\r\n        return _punkIdToAttributes[punkIndex].ears;\r\n    }\r\n\r\n    function getAttributeNeckFrom(uint punkIndex) public view returns (string memory attribute) {\r\n        require(exists(punkIndex), \"Crypto Punks Attributes: There aren't any attributes stored for the Punk you are requesting\");\r\n        return _punkIdToAttributes[punkIndex].neck;\r\n    }\r\n\r\n    function getAttributeFaceFrom(uint punkIndex) public view returns (string memory attribute) {\r\n        require(exists(punkIndex), \"Crypto Punks Attributes: There aren't any attributes stored for the Punk you are requesting\");\r\n        return _punkIdToAttributes[punkIndex].face;\r\n    }\r\n\r\n    function getAttributeMouthFrom(uint punkIndex) public view returns (string memory attribute) {\r\n        require(exists(punkIndex), \"Crypto Punks Attributes: There aren't any attributes stored for the Punk you are requesting\");\r\n        return _punkIdToAttributes[punkIndex].mouth;\r\n    }\r\n\r\n    function getAttributeMouthAccessoryFrom(uint punkIndex) public view returns (string memory attribute) {\r\n        require(exists(punkIndex), \"Crypto Punks Attributes: There aren't any attributes stored for the Punk you are requesting\");\r\n        return _punkIdToAttributes[punkIndex].mouthAccessory;\r\n    }\r\n\r\n    function getAttributeFacialHairFrom(uint punkIndex) public view returns (string memory attribute) {\r\n        require(exists(punkIndex), \"Crypto Punks Attributes: There aren't any attributes stored for the Punk you are requesting\");\r\n        return _punkIdToAttributes[punkIndex].facialHair;\r\n    }\r\n\r\n    function setCategoryIndex(string memory attribute, uint categoryIndex) public onlyOwner {\r\n        _attributesToCategoryIndex[attribute] = categoryIndex;\r\n    }\r\n\r\n    constructor() Ownable() {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"createStructForPunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"getAttributeEarsFrom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"attribute\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"getAttributeEyesFrom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"attribute\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"getAttributeFaceFrom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"attribute\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"getAttributeFacialHairFrom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"attribute\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"getAttributeMouthAccessoryFrom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"attribute\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"getAttributeMouthFrom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"attribute\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"getAttributeNeckFrom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"attribute\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"getAttributeSpeciesFrom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"attribute\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"getAttributeTopHeadFrom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"attribute\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"attribute\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"categoryIndex\",\"type\":\"uint256\"}],\"name\":\"setCategoryIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CryptoPunkAttributes","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://239cbd763ec6d4a5f983b1b4213cd66456256ea483888cb9826032b36bce8396"}]}