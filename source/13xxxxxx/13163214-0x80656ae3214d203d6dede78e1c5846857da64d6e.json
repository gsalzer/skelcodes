{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: NONE\n\npragma solidity 0.8.3;\n\n\n\n// Part: ERC721TokenReceiver\n\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\ninterface ERC721TokenReceiver {\n    /// @notice Handle the receipt of an NFT\n    /// @dev The ERC721 smart contract calls this function on the recipient\n    ///  after a `transfer`. This function MAY throw to revert and reject the\n    ///  transfer. Return of other than the magic value MUST result in the\n    ///  transaction being reverted.\n    ///  Note: the contract address is always the message sender.\n    /// @param _operator The address which called `safeTransferFrom` function\n    /// @param _from The address which previously owned the token\n    /// @param _tokenId The NFT identifier which is being transferred\n    /// @param _data Additional data with no specified format\n    /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    ///         unless throwing\n    function onERC721Received(\n        address _operator,\n        address _from,\n        uint256 _tokenId,\n        bytes memory _data\n    ) external returns (bytes4);\n}\n\n// Part: EtherRock\n\ninterface EtherRock {\n    function getRockInfo(uint256 rockNumber) external view returns (address);\n\n    function rockOwners(address owner, uint256 idx)\n        external\n        view\n        returns (uint256);\n}\n\n// Part: ProofOfRock\n\n/**\n    @title Proof Of Rock\n    @notice ERC721-ish contract where token ownership is 1:1 pegged with ownership of EtherRocks\n */\nabstract contract ProofOfRock {\n    EtherRock public constant etherRock =\n        EtherRock(0x41f28833Be34e6EDe3c58D1f597bef429861c4E2);\n\n    string public name;\n    string public symbol;\n    uint256 public totalSupply;\n\n    mapping(bytes4 => bool) public supportsInterface;\n\n    string[100] tokenURIs;\n    address[100] tokenApprovals;\n\n    mapping(address => mapping(address => bool)) private operatorApprovals;\n\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 indexed _tokenId\n    );\n    event Approval(\n        address indexed _owner,\n        address indexed _approved,\n        uint256 indexed _tokenId\n    );\n    event ApprovalForAll(\n        address indexed _owner,\n        address indexed _operator,\n        bool _approved\n    );\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n        supportsInterface[_INTERFACE_ID_ERC165] = true;\n        supportsInterface[_INTERFACE_ID_ERC721] = true;\n        supportsInterface[_INTERFACE_ID_ERC721_METADATA] = true;\n        supportsInterface[_INTERFACE_ID_ERC721_ENUMERABLE] = true;\n    }\n\n    /// @notice Count all NFTs assigned to an owner\n    function balanceOf(address _owner) public view virtual returns (uint256);\n\n    /// @notice Find the owner of an NFT\n    function ownerOf(uint256 tokenId) public view virtual returns (address);\n\n    function tokenOfOwnerByIndex(address _owner, uint256 _index)\n        public\n        view\n        virtual\n        returns (uint256);\n\n    function _transfer(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) internal virtual;\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\n    ///  `onERC721Received` on `_to` and throws if the return value is not\n    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param _data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        bytes memory _data\n    ) public {\n        _transfer(_from, _to, _tokenId);\n        require(\n            _checkOnERC721Received(_from, _to, _tokenId, _data),\n            \"Transfer to non ERC721 receiver\"\n        );\n    }\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev This works identically to the other function with an extra data parameter,\n    ///  except this function just sets data to \"\".\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) external {\n        safeTransferFrom(_from, _to, _tokenId, bytes(\"\"));\n    }\n\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    ///  THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) external {\n        _transfer(_from, _to, _tokenId);\n    }\n\n    /// @notice Change or reaffirm the approved address for an NFT\n    function approve(address approved, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\n            \"Not owner nor approved for all\"\n        );\n        tokenApprovals[tokenId] = approved;\n        emit Approval(owner, approved, tokenId);\n    }\n\n    /// @notice Get the approved address for a single NFT\n    function getApproved(uint256 tokenId) public view returns (address) {\n        ownerOf(tokenId);\n        return tokenApprovals[tokenId];\n    }\n\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n    ///         all of `msg.sender`'s assets\n    function setApprovalForAll(address operator, bool approved) external {\n        operatorApprovals[msg.sender][operator] = approved;\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    /// @notice Query if an address is an authorized operator for another address\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        returns (bool)\n    {\n        return operatorApprovals[owner][operator];\n    }\n\n    /// @notice Concatenates tokenId to baseURI and returns the string.\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\n        ownerOf(tokenId);\n        return tokenURIs[tokenId];\n    }\n\n    /// @notice Enumerate valid NFTs\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\n        require(_index < totalSupply, \"Index out of bounds\");\n        return _index;\n    }\n\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(to)\n        }\n        if (size == 0) {\n            return true;\n        }\n\n        (bool success, bytes memory returnData) = to.call{value: 0}(\n            abi.encodeWithSelector(\n                ERC721TokenReceiver(to).onERC721Received.selector,\n                msg.sender,\n                from,\n                tokenId,\n                _data\n            )\n        );\n        require(success, \"Transfer to non ERC721 receiver\");\n        bytes4 returnValue = abi.decode(returnData, (bytes4));\n        return (returnValue == _ERC721_RECEIVED);\n    }\n}\n\n// File: PoRTethered.sol\n\n/**\n    @title Proof Of Rock: Tethered\n    @notice ERC721-ish contract where token ownership is 1:1 pegged with ownership of EtherRocks\n */\ncontract ProofOfRockTethered is ProofOfRock {\n    constructor(string memory _name, string memory _symbol)\n        ProofOfRock(_name, _symbol)\n    {\n        totalSupply = 100;\n        tokenURIs = [\n            \"QmPJ8qzTuu4ThCJNDxa7ib1DUYhEbAPzMUpasinnucC5AH\",\n            \"QmXNSt14kaGKauW37VxLShLSqfvLyShzBnVBmbhXbJdci6\",\n            \"QmdtQsrEzrgztRYuKvpnYMxcYLfQxS59x9M5fBQVGvSx3q\",\n            \"QmVwExvwgZuKDavcTGEYLi8wrSEUerRXcSD7NEfbzZgFLE\",\n            \"QmekTo6LMCVRKrdrHPqiMhYwU3uiCqZgVtjjtTRmTk4w5v\",\n            \"QmadAqBoMXm7AdLXWNsLqyBjwEUh9XrEALftKWSVqyb2Ws\",\n            \"QmZi6WxyVEMLzRA6bm51iDNw9qTxbieEJDzAkYbr4b1DMo\",\n            \"Qme1fuKKBUFsGzzwBRDjDtnrfiUHP9zkb3Jgi9ojKk7Hv5\",\n            \"QmRucC5Ux7FvmWCScTKLxCiorxXY8daCyTPx3tGZDRRccb\",\n            \"QmYaNk6gGbQ9QoabN9jurwPQ5py7GjW8M5WWJdwKmzvL9Z\",\n            \"QmYojyCWKPM9e2xYj54H7c2bD67Nbbx2mVjLQZHo7P4WhS\",\n            \"QmVPgPH4yZizyjVHd3YpAHwxQHP5jXfsg3UqnbAWXs5v7d\",\n            \"QmYrzkgg4UVrCuxeYn5ij8Pmygof2rhd7BqrMgTNPBnQ8d\",\n            \"QmTzAzj93EDEMq3jmoRPFV4fsB5rTQHNBFy9EMTSEPh5QA\",\n            \"QmcjQMD9LSZinXWVFqmMdPXXiwqiTUpgSc8pyWRE4QvfuZ\",\n            \"QmfCP8PT934BR4FVsSzsxze8NfLMepwNFb2ZYih4Gz4ZJt\",\n            \"QmNxr6zrdeFZuAdQFmWevQ9BdVuboZevxzrhMcPQRnCjTb\",\n            \"QmUXgtKx6tVvKk1aqDD5aZwB7C5ct3R1tS7m45kgKsgKf2\",\n            \"QmXhvWC3xTBUFe85GLWrqUNay347EVD7hYKc1aBHoyr2Co\",\n            \"QmRUN2R6wLNCfxAz3zK3bdnCYkT4EzGmSQMqLaKaAF1w6G\",\n            \"QmRChgYU8CraSPB4YU1HN9RXuTmx7USR3LPuCHArv5EAGG\",\n            \"Qme5gCUYKxQaqrAEq428dDMpt1neBWkaZnD7YTKxVGwFxU\",\n            \"Qmf8Db6UE3sdcexkG8eK3p88p3bTbL1tSsVFiPTzKuUwdQ\",\n            \"Qmb8C1sfx8cvmo5E5CENzZX4WBJyJdYbf5zVgcfsUH9v1m\",\n            \"QmVdgUU4VBSp8goWBxgAj7zQuCNBYRk1kCkL5a59z2QHbE\",\n            \"QmU3iddwTtYhQUBvxJHmrH4tB71qo7DnvJ9yoEwJfipUK3\",\n            \"QmWH894qumXwCupitw4U1YQ7P6rhZhxAjJSSCj9Jm9tZu7\",\n            \"QmR2JTwZLTurjFfL2nrqVuFJBo9TvnerrybGuDsA4uv3EP\",\n            \"QmdAWM9HnxehbX1mEHN6FAPTuksNrZjEVhKHoSRtWYxYct\",\n            \"QmTLi4PMR9oas2Rtq3LjXxGfFKbVqFGxh7xrQd98tZxHWp\",\n            \"QmcVWASAA2oDVmUyiP1pLMtbAQx4MimWEJZLjxgQmZv9cW\",\n            \"QmY5cmDU3VuRkJV8hA1wRcvxK6ECLD9nmsvQXqV69MUFyg\",\n            \"QmNi2Th3LdhyeccUJZNHjVRBKvpB9MFYJi26w9rZiRwJkT\",\n            \"QmfFEoTsJCvzuRE8z184sTEzYdEtDkaFtDuzAKT5QWMKHo\",\n            \"Qmf5HTTWV9EST9J4QMXM5VRpLVw9NdQLxgPJYGp35NseZz\",\n            \"QmbpSpiEKzXwjq41MeCxqPfMkdt2xRNHGQ26uKRyekwuQ8\",\n            \"QmZmHDrodoc1KvZwb2SzVo6Bu3zouWogmEQG9GMGrFLuAR\",\n            \"QmdvxaEqZA5tihnm2kQ3maPq6njZ66EXRzVamYnHaPjipb\",\n            \"QmRcdQbuuTyc2wp6jsbJog7Cf31WkXC6LptXs9VgErjBPK\",\n            \"QmSkGRL66jKDqwVwvU2vGsGtgq8Ejy7LdGy7Fyc8RsuZzC\",\n            \"QmXnwPkxfvSuTFwV9Wk4ibVo9ci8qKmjmMXWjTJXf8pgTs\",\n            \"QmcdrEVE5KKTCU59gCuFJ87HijSovzdpBF8USmubhd4d6z\",\n            \"QmQt7KDGaPVxxzFiuvKpfdSjDfbT9ATHdK7JY1EEdZzT52\",\n            \"QmPijpreFELWBJnxKd4F9gekV4JSjM27szw9VSKC6GxoiX\",\n            \"QmU1Db1Ft4gXLkdHNCw7uM98dLpfVq39b8aK1oLWMZN7QT\",\n            \"QmaynTAHbVGg2ERcDbpnBukoFgwL8f4eKDDVuBYfRFi4Qu\",\n            \"QmWnLxpYCG4HmCCiULdBSpayqw3JtfJvz4gkTuobzeVLQ1\",\n            \"QmSWERGitRfcD5ABk322z8RGf2dWS5MvJi3wisHX7dMknN\",\n            \"QmdBxsrXs1sK1btiQKybveyLTqeG2kHG1xuKt6c6piEHNF\",\n            \"QmVmMoYeBUc9o1NFA5ucDwmi2BGpbaEoCQ2ARBGC7LP6jR\",\n            \"QmSupSUfBfnyCqoBHzCnxkSWRzqHoJRAQJjWYDzg5Jhb6C\",\n            \"Qmd2ZuNVGSTbj2qBfLSUkgcKTcfWgMpgtbyhkdJrPQSgm8\",\n            \"QmNoTWLsm6BYPsyVRDdKjhMPBsMJ8f2TZQmKtGk5fu7tWz\",\n            \"QmcFmPHiGmoYjZ5nrj2EnkvcgNgT6e8oADyBZ6Gk6SE8Y9\",\n            \"QmdcSqkNo5Txp3hoZWftHmt98kenvTWAuKjXPHJfSsv3RC\",\n            \"QmU3eBA5q7b94rUThWARPvMobedNRSZ7ueBxCTGZmzv1nR\",\n            \"QmSbmXujufQtFTi6K2SAcQ8etQSS2GtY7gf2RPYfyjo1nv\",\n            \"QmVmSeqorghs6omNbRSnrBFjWun4qxrZ8buEkyMruuRbpB\",\n            \"QmQT3gfDXYvk8iix1iv68UpoCJbpnsBay7Lpf5X67mGzRV\",\n            \"QmeraW9Drh6VuaLk1ev7xpTDqEzh5tHFjd5CttMC57xmVX\",\n            \"QmQ4ABH8SLDrLaZiHhebfbQEUudcgkvdVAvWUQyCE46Yqo\",\n            \"QmRqJimbHkndUmYG1pxMFYMWp51P2qg9KdorEKZhU6XDt2\",\n            \"QmPwzA4UKaQQeJmjtfXdaVhUodAz3TvA5pkympumeU4BEF\",\n            \"QmcgJWLMF7q3eJScKrD9F6cqg6Fa4MivJCcKaU7SQYhYhM\",\n            \"QmRXKHKvnBhKyEteGxw59DLqsouTPBYvTuHyHSmbxCLtND\",\n            \"QmTVRZH86PEF2MDucSH7grQip9i9fGbLoT5euSW5jG1mis\",\n            \"QmP5r2yf19BJ4VzzL9Z5Txh7TcZcZr2brGWyQY14mEABG8\",\n            \"QmaTryHgQ6ARUJAUedTnPy97njS642zm3Vy6xjfLFEX32Q\",\n            \"QmfDVU77wCGtebMxgxTjvFd2HDiskv34H3xBvLyJUAQNJa\",\n            \"QmXYtx1Xks3mvDNLweSkCjwrhQssUW1afK9vXKHciBLNMn\",\n            \"QmRkCenqbXhKxykcBDmuvzWKxnmuvB93vSmUeG5YSrDj6e\",\n            \"Qmasg7UKJvdaTDTNxZ54w7gAVyaK1YDNy1vxuqCoX52W6q\",\n            \"QmX8JyrSE2BdLsenHKdQV84tFWSzDX5LfmWnfgpNfQp9AX\",\n            \"Qmf9ydFPcJXwqYU1NPUyJ3RHM5jZCeTkJrntjA6DBmTb7C\",\n            \"QmTSzAeyv9a6oW3ZZ8sP9WogQWBqFWHd3oGFudMabvo6xX\",\n            \"QmQrXSFQiW3rF4iztos6Rdy5R8PCpRAzLndaBQ9MYm5SNL\",\n            \"QmZQhsWMDtQnJnGWACaZAhm449cbKQonG4XWhQNeMBtNQa\",\n            \"QmQMwHXwLCHnh9DT5xXGRrt8SLTQB1yEmmVKuE2EfHjT1r\",\n            \"QmVwrxXGsPx5QU4RQ7H5eY67GkUpCa1tukmZ8ARZVqzBR9\",\n            \"QmY22M4fAR4xabVeJeWF7wPx9PiyCLYXuwo1ZHqxrbtnuz\",\n            \"QmV8DPURTE9mxnMnUU97LsCveYj7EHJQwcKGeDacGHtRuP\",\n            \"QmTogHdDApN1kTDEtAYbs43m9jRDc3JNvxSWjgkQrPV6ja\",\n            \"QmTKSW2PzUpoAj6oiVa7tSh3pzJvpJU6H2YrTLSx746D9f\",\n            \"QmbQjggJpXPkCmLYHt46VuZ6hSPvS51WcXBRvvy6ezzjGW\",\n            \"QmRV35WjZwvdaBoPVr1YX8oqLHxnDcYfNXju7QvWXCV7h9\",\n            \"QmTbzjS9RUajbKfELMDyYTpoopi8VTgwhYRefSect6RowM\",\n            \"QmZus6AWjsVAsinnGimJ1sTfFRaQn4R2abupHY8DimNcdc\",\n            \"QmVawAxirBmd56DNv7RuxP1m4m1UNR8goCt9H9H1ME3PDc\",\n            \"QmThmqdMEAyyE7rdN7uE1AgQKfM4cRiWkTDWs1QGuqDBWe\",\n            \"QmP9MtgGpANWKujcWUpRZkANDNhcfM4yTncQMzAeNZ34N8\",\n            \"QmajtUPkX3EzfsRq9EwQTYo88DNfCnKHVWE1po1dCc7JGL\",\n            \"QmaLqdQs1X3AKs2BRxZUxJjbVJqtXLfC1SycJysafbW8Tp\",\n            \"QmUVxfFwRbPGxY9sM65QeRvg4ng4Vt2hsCMSL6kGBTZbtg\",\n            \"QmdzVD1XC4D7ydPa2dP98WmDpvkcxizApebc1ujJvwzThb\",\n            \"QmStSzhebV5cvokQ6Q3PRgnHLfciiMFPbh9DMnCvHZ2KXG\",\n            \"QmW8zFv1CFqDnqxjBnR69db5Gj54RnYrim4qqwtqZ5kMyC\",\n            \"QmahcvNu6XbtwDLHz45iYqrzf9qzxTRZ4qtn9o7JaZ8VBv\",\n            \"QmaMvgiHEZSEnU9THJPwAthYNbQuwSdZkPqiC3FiwnRJfX\",\n            \"QmP7FQNXYhe5eWWQEHRT4SihCTF7dZbv3LSMBtXY3HyBto\",\n            \"QmRxC4a7Uo23KCYVqUxsHmimKA1wYTukJ6CGRgm8aCZ1Gd\"\n        ];\n\n        for (uint256 i = 0; i < 100; i++) {\n            // We must fire this event once per rock in order for OpenSea to recognize\n            // the NFTs. When an EtherRock is transfered after deployment, OpenSea\n            // will notice the change in ownership of this NFT within 24 hours.\n            emit Transfer(address(0), etherRock.getRockInfo(i), i);\n        }\n    }\n\n    /// @notice Count all NFTs assigned to an owner\n    function balanceOf(address _owner) public view override returns (uint256) {\n        uint256 index;\n        while (true) {\n            try etherRock.rockOwners(_owner, index) returns (uint256) {\n                index++;\n            } catch {\n                return index;\n            }\n        }\n    }\n\n    /// @notice Find the owner of an NFT\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        if (tokenId < 100) {\n            return etherRock.getRockInfo(tokenId);\n        }\n        revert(\"Query for nonexistent tokenId\");\n    }\n\n    function _transfer(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) internal override {\n        revert(\"NFT is attached to rock\");\n    }\n\n    function tokenOfOwnerByIndex(address _owner, uint256 _index)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        try etherRock.rockOwners(_owner, _index) returns (uint256 tokenId) {\n            return tokenId;\n        } catch {\n            revert(\"Index out of bounds\");\n        }\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etherRock\",\"outputs\":[{\"internalType\":\"contract EtherRock\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ProofOfRockTethered","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000d50726f6f66206f6620526f636b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003504f520000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}