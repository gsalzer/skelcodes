{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ArrayLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.12 <0.8.0;\\r\\n\\r\\nlibrary ArrayLib {\\r\\n\\r\\n    string constant NOT_IN_ARRAY     = \\\"Not in array\\\";\\r\\n    string constant ALREADY_IN_ARRAY = \\\"Already in array\\\";\\r\\n\\r\\n    // address array\\r\\n\\r\\n    function inArray(address[] storage array, address _item)\\r\\n    internal view returns (bool) {\\r\\n        uint len = array.length;\\r\\n        for (uint i=0; i<len; i++) {\\r\\n            if (array[i]==_item) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function addUnique(address[] storage array, address _item)\\r\\n    internal {\\r\\n        require(!inArray(array, _item), ALREADY_IN_ARRAY);\\r\\n        array.push(_item);\\r\\n    }\\r\\n\\r\\n    function removeByIndex(address[] storage array, uint256 index)\\r\\n    internal {\\r\\n        uint256 len_1 = array.length - 1;\\r\\n        require(index<=len_1, NOT_IN_ARRAY);\\r\\n        for (uint256 i = index; i < len_1; i++) {\\r\\n            array[i] = array[i + 1];\\r\\n        }\\r\\n        array.pop();\\r\\n    }\\r\\n\\r\\n    function removeFirst(address[] storage array, address _item)\\r\\n    internal {\\r\\n        require(inArray(array, _item), NOT_IN_ARRAY);\\r\\n        uint last = array.length-1;\\r\\n        for (uint i=0; i<=last; i++) {\\r\\n            if (array[i]==_item) {\\r\\n                removeByIndex(array, i);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addArrayUnique(address[] storage array, address[] memory _items)\\r\\n    internal {\\r\\n        uint len = _items.length;\\r\\n        for (uint i=0; i<len; i++) {\\r\\n            addUnique(array, _items[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeArrayFirst(address[] storage array, address[] memory _items)\\r\\n    internal {\\r\\n        uint len = _items.length;\\r\\n        for (uint i=0; i<len; i++) {\\r\\n            removeFirst(array, _items[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function inArray(uint256[] storage array, uint256 _item)\\r\\n    internal view returns (bool) {\\r\\n        uint len = array.length;\\r\\n        for (uint i=0; i<len; i++) {\\r\\n            if (array[i]==_item) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function addUnique(uint256[] storage array, uint256 _item)\\r\\n    internal {\\r\\n        require(!inArray(array, _item), ALREADY_IN_ARRAY);\\r\\n        array.push(_item);\\r\\n    }\\r\\n\\r\\n\\r\\n    function removeByIndex(uint256[] storage array, uint256 index)\\r\\n    internal {\\r\\n        uint256 len_1 = array.length - 1;\\r\\n        require(index<=len_1, NOT_IN_ARRAY);\\r\\n        for (uint256 i = index; i < len_1; i++) {\\r\\n            array[i] = array[i + 1];\\r\\n        }\\r\\n        array.pop();\\r\\n    }\\r\\n\\r\\n    function removeFirst(uint256[] storage array, uint256 _item)\\r\\n    internal {\\r\\n        require(inArray(array, _item), NOT_IN_ARRAY);\\r\\n        uint last = array.length-1;\\r\\n        for (uint i=0; i<=last; i++) {\\r\\n            if (array[i]==_item) {\\r\\n                removeByIndex(array, i);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addArrayUnique(uint256[] storage array, uint256[] memory _items)\\r\\n    internal {\\r\\n        uint len = _items.length;\\r\\n        for (uint i=0; i<len; i++) {\\r\\n            addUnique(array, _items[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeArrayFirst(uint256[] storage array, uint256[] memory _items)\\r\\n    internal {\\r\\n        uint len = _items.length;\\r\\n        for (uint i=0; i<len; i++) {\\r\\n            removeFirst(array, _items[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ContractRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"./Governable.sol\\\";\\r\\nimport \\\"./ArrayLib.sol\\\";\\r\\n\\r\\ncontract ContractRegistry is Governable, Initializable {\\r\\n    using Address for address;\\r\\n    using ArrayLib for address[];\\r\\n\\r\\n    uint public constant POOLS_FOLDER = 1;\\r\\n    uint public constant VAULTS_FOLDER = 2;\\r\\n\\r\\n    mapping (uint => address[]) public addresses;\\r\\n\\r\\n    event AddressesAdded(address[] addresses);\\r\\n    event AddressesRemoved(address[] addresses);\\r\\n    event PoolsAdded(address[] addresses);\\r\\n    event PoolsRemoved(address[] addresses);\\r\\n    event VaultsAdded(address[] addresses);\\r\\n    event VaultsRemoved(address[] addresses);\\r\\n\\r\\n    address[] private singleAddress;\\r\\n\\r\\n    constructor(address[] memory _pools, address[] memory _vaults)\\r\\n    public Governable(msg.sender) {\\r\\n        singleAddress.push(address(0));\\r\\n    }\\r\\n\\r\\n    function initialize(address[] memory _pools, address[] memory _vaults)\\r\\n    public onlyGovernance initializer {\\r\\n        Governable.setGovernance(msg.sender);\\r\\n        singleAddress.push(address(0));\\r\\n\\r\\n        addPoolsArray(_pools);\\r\\n        addVaultsArray(_vaults);\\r\\n    }\\r\\n\\r\\n    function list(uint folder) public view returns (address[] memory) {\\r\\n        return addresses[folder];\\r\\n    }\\r\\n\\r\\n    function add(uint folder, address _address) public onlyGovernance {\\r\\n        addresses[folder].addUnique(_address);\\r\\n\\r\\n        singleAddress[0] = _address;\\r\\n        emit AddressesAdded(singleAddress);\\r\\n    }\\r\\n\\r\\n    function remove(uint folder, address _address) public onlyGovernance {\\r\\n        addresses[folder].removeFirst(_address);\\r\\n\\r\\n        singleAddress[0] = _address;\\r\\n        emit AddressesRemoved(singleAddress);\\r\\n    }\\r\\n\\r\\n    function addArray(uint folder, address[] memory _addresses) public onlyGovernance {\\r\\n        addresses[folder].addArrayUnique(_addresses);\\r\\n        emit AddressesAdded(_addresses);\\r\\n    }\\r\\n\\r\\n    function removeArray(uint folder, address[] memory _addresses) public onlyGovernance {\\r\\n        addresses[folder].removeArrayFirst(_addresses);\\r\\n        emit AddressesRemoved(_addresses);\\r\\n    }\\r\\n\\r\\n    // Pools\\r\\n\\r\\n    function listPools() public view returns (address[] memory) {\\r\\n        return addresses[POOLS_FOLDER];\\r\\n    }\\r\\n\\r\\n    function addPool(address _address) public onlyGovernance {\\r\\n        addresses[POOLS_FOLDER].addUnique(_address);\\r\\n\\r\\n        singleAddress[0] = _address;\\r\\n        emit PoolsAdded(singleAddress);\\r\\n    }\\r\\n\\r\\n    function removePool(address _address) public onlyGovernance {\\r\\n        addresses[POOLS_FOLDER].removeFirst(_address);\\r\\n\\r\\n        singleAddress[0] = _address;\\r\\n        emit PoolsRemoved(singleAddress);\\r\\n    }\\r\\n\\r\\n    function addPoolsArray(address[] memory _addresses) public onlyGovernance {\\r\\n        addresses[POOLS_FOLDER].addArrayUnique(_addresses);\\r\\n        emit PoolsAdded(_addresses);\\r\\n    }\\r\\n\\r\\n    function removePoolsArray(address[] memory _addresses) public onlyGovernance {\\r\\n        addresses[POOLS_FOLDER].removeArrayFirst(_addresses);\\r\\n        emit PoolsRemoved(_addresses);\\r\\n    }\\r\\n\\r\\n\\r\\n    // Vaults\\r\\n\\r\\n    function listVaults() public view returns (address[] memory) {\\r\\n        return addresses[VAULTS_FOLDER];\\r\\n    }\\r\\n\\r\\n    function addVault(address _address) public onlyGovernance {\\r\\n        addresses[VAULTS_FOLDER].addUnique(_address);\\r\\n\\r\\n        singleAddress[0] = _address;\\r\\n        emit VaultsAdded(singleAddress);\\r\\n    }\\r\\n\\r\\n    function removeVault(address _address) public onlyGovernance {\\r\\n        addresses[VAULTS_FOLDER].removeFirst(_address);\\r\\n\\r\\n        singleAddress[0] = _address;\\r\\n        emit VaultsRemoved(singleAddress);\\r\\n    }\\r\\n\\r\\n    function addVaultsArray(address[] memory _addresses) public onlyGovernance {\\r\\n        addresses[VAULTS_FOLDER].addArrayUnique(_addresses);\\r\\n        emit VaultsAdded(_addresses);\\r\\n    }\\r\\n\\r\\n    function removeVaultsArray(address[] memory _addresses) public onlyGovernance {\\r\\n        addresses[VAULTS_FOLDER].removeArrayFirst(_addresses);\\r\\n        emit VaultsRemoved(_addresses);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.16;\\r\\n\\r\\ncontract Governable {\\r\\n\\r\\n  address public governance;\\r\\n\\r\\n  constructor(address _governance) public {\\r\\n    setGovernance(_governance);\\r\\n  }\\r\\n\\r\\n  modifier onlyGovernance() {\\r\\n    // pass check while governance might not initialized (i.e. in proxy)\\r\\n    require((governance==address(0)) || (msg.sender==governance), \\\"Not governance\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setGovernance(address _governance) public onlyGovernance {\\r\\n    require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\r\\n    governance = _governance;\\r\\n  }\\r\\n\\r\\n}\\r\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"AddressesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"AddressesRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"PoolsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"PoolsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"VaultsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"VaultsRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOLS_FOLDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULTS_FOLDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"folder\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"folder\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addPoolsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addVaultsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"folder\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"folder\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"folder\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removePoolsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeVaultsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ContractRegistry","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}