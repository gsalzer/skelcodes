{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL V3.0\r\n\r\npragma solidity 0.8.0;\r\n\r\n\r\n\r\n// Part: IPowerCalculator\r\n\r\ninterface IPowerCalculator {\r\n    function calculatePower(uint256 weaponId) external returns (uint256);\r\n}\r\n\r\n// File: PowerCalculatorV0.sol\r\n\r\ncontract PowerCalculatorV0 is IPowerCalculator {\r\n    function calculatePower(uint256 weaponId)\r\n        external\r\n        pure\r\n        override\r\n        returns (uint256)\r\n    {\r\n        // get the actual weapon class and greatness\r\n        uint256 rand = random(\r\n            string(abi.encodePacked(\"WEAPON\", toString(weaponId)))\r\n        );\r\n        uint256 greatness = rand % 21;\r\n        return greatness * 100;\r\n    }\r\n\r\n    function random(string memory input) internal pure returns (uint256) {\r\n        return uint256(keccak256(abi.encodePacked(input)));\r\n    }\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT license\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weaponId\",\"type\":\"uint256\"}],\"name\":\"calculatePower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"PowerCalculatorV0","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c2dbc44b27545f3c15370767704f8dc3ca011c8325341c7aa513dec0afc50b43"}]}